

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Mar 23 11:48:51 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  000F00                     __psmallconst:
    94                           	opt stack 0
    95  000F00                     _vscp_deviceURL:
    96                           	opt stack 0
    97  000F00  77                 	db	119
    98  000F01  77                 	db	119
    99  000F02  77                 	db	119
   100  000F03  2E                 	db	46
   101  000F04  65                 	db	101
   102  000F05  75                 	db	117
   103  000F06  72                 	db	114
   104  000F07  6F                 	db	111
   105  000F08  73                 	db	115
   106  000F09  6F                 	db	111
   107  000F0A  75                 	db	117
   108  000F0B  72                 	db	114
   109  000F0C  63                 	db	99
   110  000F0D  65                 	db	101
   111  000F0E  2E                 	db	46
   112  000F0F  73                 	db	115
   113  000F10  65                 	db	101
   114  000F11  2F                 	db	47
   115  000F12  6F                 	db	111
   116  000F13  64                 	db	100
   117  000F14  65                 	db	101
   118  000F15  73                 	db	115
   119  000F16  73                 	db	115
   120  000F17  61                 	db	97
   121  000F18  30                 	db	48
   122  000F19  30                 	db	48
   123  000F1A  31                 	db	49
   124  000F1B  2E                 	db	46
   125  000F1C  78                 	db	120
   126  000F1D  6D                 	db	109
   127  000F1E  6C                 	db	108
   128  000F1F  00                 	db	0
   129  000F20                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _ANCON0	set	3933
   132  0000                     _ANCON1	set	3932
   133  0000                     _BRGCON1	set	3651
   134  0000                     _BRGCON2	set	3652
   135  0000                     _BRGCON3	set	3653
   136  0000                     _BSEL0	set	3709
   137  0000                     _CANCON	set	3951
   138  0000                     _CIOCON	set	3952
   139  0000                     _ECANCON	set	3954
   140  0000                     _EEADR	set	3956
   141  0000                     _EEADRH	set	3957
   142  0000                     _EECON1bits	set	3967
   143  0000                     _EECON2	set	3966
   144  0000                     _EEDATA	set	3955
   145  0000                     _INTCONbits	set	4082
   146  0000                     _MSEL0	set	3705
   147  0000                     _MSEL1	set	3706
   148  0000                     _MSEL2	set	3707
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTAbits	set	3968
   151  0000                     _PORTB	set	3969
   152  0000                     _PORTBbits	set	3969
   153  0000                     _PORTC	set	3970
   154  0000                     _PORTCbits	set	3970
   155  0000                     _RXB1CONbits	set	3888
   156  0000                     _RXF0EIDH	set	3810
   157  0000                     _RXF0EIDL	set	3811
   158  0000                     _RXF0SIDH	set	3808
   159  0000                     _RXF0SIDL	set	3809
   160  0000                     _RXF1EIDH	set	3814
   161  0000                     _RXF1EIDL	set	3815
   162  0000                     _RXF1SIDL	set	3813
   163  0000                     _RXFBCON0	set	3697
   164  0000                     _RXFBCON1	set	3698
   165  0000                     _RXFBCON2	set	3699
   166  0000                     _RXFBCON3	set	3700
   167  0000                     _RXFBCON4	set	3701
   168  0000                     _RXFBCON5	set	3702
   169  0000                     _RXFBCON6	set	3703
   170  0000                     _RXFBCON7	set	3704
   171  0000                     _RXFCON0	set	3654
   172  0000                     _RXFCON1	set	3655
   173  0000                     _RXM0EIDH	set	3834
   174  0000                     _RXM0EIDL	set	3835
   175  0000                     _RXM0SIDH	set	3832
   176  0000                     _RXM0SIDL	set	3833
   177  0000                     _RXM1EIDH	set	3838
   178  0000                     _RXM1EIDL	set	3839
   179  0000                     _RXM1SIDL	set	3837
   180  0000                     _T0CON	set	4053
   181  0000                     _T0CONbits	set	4053
   182  0000                     _TMR0H	set	4055
   183  0000                     _TMR0L	set	4054
   184  0000                     _TRISA	set	3986
   185  0000                     _TRISB	set	3987
   186  0000                     _TRISC	set	3988
   187  0000                     _B0RXFUL	set	29703
   188  0000                     _B0TXEN	set	29674
   189  0000                     _B1RXFUL	set	29831
   190  0000                     _B1TXEN	set	29675
   191  0000                     _B2RXFUL	set	29959
   192  0000                     _B2TXEN	set	29676
   193  0000                     _B3RXFUL	set	30087
   194  0000                     _B3TXEN	set	29677
   195  0000                     _B4RXFUL	set	30215
   196  0000                     _B4TXEN	set	29678
   197  0000                     _B5RXFUL	set	30343
   198  0000                     _B5TXEN	set	29679
   199  0000                     _FIFOEMPTY	set	31631
   200  0000                     _IRXIF	set	31679
   201  0000                     _MDSEL0	set	31638
   202  0000                     _MDSEL1	set	31639
   203  0000                     _RXB0FILHIT0	set	31488
   204  0000                     _RXB0FUL	set	31495
   205  0000                     _RXB0IF	set	31672
   206  0000                     _RXB0OVFL	set	31631
   207  0000                     _RXB1IF	set	31673
   208  0000                     _RXB1OVFL	set	31630
   209  0000                     _RXF1EN	set	29233
   210  0000                     _RXM0EXIDM	set	30667
   211  0000                     _RXM1EXIDEN	set	30699
   212  0000                     _B0CON	set	3712
   213  0000                     _B1CON	set	3728
   214  0000                     _B2CON	set	3744
   215  0000                     _B3CON	set	3760
   216  0000                     _B4CON	set	3776
   217  0000                     _B5CON	set	3792
   218  0000                     _RXB0CON	set	3936
   219  0000                     _RXB1CON	set	3888
   220  0000                     _RXF1SIDH	set	3812
   221  0000                     _RXM1SIDH	set	3836
   222  0000                     _TXB0CON	set	3872
   223  0000                     _TXB1CON	set	3856
   224  0000                     _TXB2CON	set	3840
   225                           
   226                           ; #config settings
   227  000F20  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	cinit
   230  002F42                     __pcinit:
   231                           	opt stack 0
   232  002F42                     start_initialization:
   233                           	opt stack 0
   234  002F42                     __initialization:
   235                           	opt stack 0
   236                           
   237                           ; Clear objects allocated to BANK0 (49 bytes)
   238  002F42  EE00  F060         	lfsr	0,__pbssBANK0
   239  002F46  0E31               	movlw	49
   240  002F48                     clear_0:
   241  002F48  6AEE               	clrf	postinc0,c
   242  002F4A  06E8               	decf	wreg,f,c
   243  002F4C  E1FD               	bnz	clear_0
   244                           
   245                           ; Clear objects allocated to COMRAM (7 bytes)
   246  002F4E  EE00  F052         	lfsr	0,__pbssCOMRAM
   247  002F52  0E07               	movlw	7
   248  002F54                     clear_1:
   249  002F54  6AEE               	clrf	postinc0,c
   250  002F56  06E8               	decf	wreg,f,c
   251  002F58  E1FD               	bnz	clear_1
   252  002F5A                     end_of_initialization:
   253                           	opt stack 0
   254  002F5A                     __end_of__initialization:
   255                           	opt stack 0
   256  002F5A  0100               	movlb	0
   257  002F5C  EF48  F011         	goto	_main	;jump to C main() function
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssCOMRAM
   262  000052                     __pbssCOMRAM:
   263                           	opt stack 0
   264  000052                     _vscp_page_select:
   265                           	opt stack 0
   266  000052                     	ds	2
   267  000054                     __ECANRxFilterHitInfo:
   268                           	opt stack 0
   269  000054                     	ds	1
   270  000055                     _vscp_errorcnt:
   271                           	opt stack 0
   272  000055                     	ds	1
   273  000056                     _vscp_initledfunc:
   274                           	opt stack 0
   275  000056                     	ds	1
   276  000057                     _vscp_probe_address:
   277                           	opt stack 0
   278  000057                     	ds	1
   279  000058                     _vscp_statuscnt:
   280                           	opt stack 0
   281  000058                     	ds	1
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	bssBANK0
   286  000060                     __pbssBANK0:
   287                           	opt stack 0
   288  000060                     _measurement_clock:
   289                           	opt stack 0
   290  000060                     	ds	4
   291  000064                     _vscp_configtimer:
   292                           	opt stack 0
   293  000064                     	ds	2
   294  000066                     _vscp_timer:
   295                           	opt stack 0
   296  000066                     	ds	2
   297  000068                     _hours:
   298                           	opt stack 0
   299  000068                     	ds	1
   300  000069                     _minutes:
   301                           	opt stack 0
   302  000069                     	ds	1
   303  00006A                     _seconds:
   304                           	opt stack 0
   305  00006A                     	ds	1
   306  00006B                     _vscp_alarmstatus:
   307                           	opt stack 0
   308  00006B                     	ds	1
   309  00006C                     _vscp_guid_reset:
   310                           	opt stack 0
   311  00006C                     	ds	1
   312  00006D                     _vscp_hour:
   313                           	opt stack 0
   314  00006D                     	ds	1
   315  00006E                     _vscp_initbtncnt:
   316                           	opt stack 0
   317  00006E                     	ds	1
   318  00006F                     _vscp_minute:
   319                           	opt stack 0
   320  00006F                     	ds	1
   321  000070                     _vscp_nickname:
   322                           	opt stack 0
   323  000070                     	ds	1
   324  000071                     _vscp_node_state:
   325                           	opt stack 0
   326  000071                     	ds	1
   327  000072                     _vscp_node_substate:
   328                           	opt stack 0
   329  000072                     	ds	1
   330  000073                     _vscp_probe_cnt:
   331                           	opt stack 0
   332  000073                     	ds	1
   333  000074                     _vscp_second:
   334                           	opt stack 0
   335  000074                     	ds	1
   336  000075                     _vscp_imsg:
   337                           	opt stack 0
   338  000075                     	ds	14
   339  000083                     _vscp_omsg:
   340                           	opt stack 0
   341  000083                     	ds	14
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	cstackBANK0
   346  000091                     __pcstackBANK0:
   347                           	opt stack 0
   348  000091                     ??_sendVSCPFrame:
   349                           
   350                           ; 0 bytes @ 0x0
   351  000091                     	ds	20
   352  0000A5                     ??_vscp_handleProtocolEvent:
   353  0000A5                     ?_SendInformationEvent:
   354                           	opt stack 0
   355  0000A5                     ?_vscp_sendHeartBeat:
   356                           	opt stack 0
   357  0000A5                     SendInformationEvent@eventClass:
   358                           	opt stack 0
   359  0000A5                     vscp_sendHeartBeat@subzone:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x14
   363  0000A5                     	ds	1
   364  0000A6                     SendInformationEvent@eventTypeId:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x15
   368  0000A6                     	ds	1
   369  0000A7                     ??_doDM:
   370                           
   371                           ; 0 bytes @ 0x16
   372  0000A7                     	ds	3
   373  0000AA                     doDM@class_filter:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x19
   377  0000AA                     	ds	2
   378  0000AC                     doDM@class_mask:
   379                           	opt stack 0
   380  0000AC                     vscp_handleProtocolEvent@page_save:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x1B
   384  0000AC                     	ds	2
   385  0000AE                     doDM@type_filter:
   386                           	opt stack 0
   387  0000AE                     vscp_handleProtocolEvent@page_save_1133:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x1D
   391  0000AE                     	ds	1
   392  0000AF                     doDM@type_mask:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x1E
   396  0000AF                     	ds	1
   397  0000B0                     vscp_handleProtocolEvent@offset:
   398                           	opt stack 0
   399  0000B0                     _doDM$1984:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x1F
   403  0000B0                     	ds	1
   404  0000B1                     vscp_handleProtocolEvent@pos:
   405                           	opt stack 0
   406  0000B1                     _doDM$1985:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x20
   410  0000B1                     	ds	1
   411  0000B2                     vscp_handleProtocolEvent@bytes:
   412                           	opt stack 0
   413  0000B2                     _doDM$1986:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x21
   417  0000B2                     	ds	1
   418  0000B3                     vscp_handleProtocolEvent@len:
   419                           	opt stack 0
   420  0000B3                     _doDM$1987:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x22
   424  0000B3                     	ds	1
   425  0000B4                     doDM@dmflags:
   426                           	opt stack 0
   427  0000B4                     vscp_handleProtocolEvent@pos_1122:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x23
   431  0000B4                     	ds	1
   432  0000B5                     doDM@i:
   433                           	opt stack 0
   434  0000B5                     vscp_handleProtocolEvent@len_1123:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x24
   438  0000B5                     	ds	1
   439  0000B6                     vscp_handleProtocolEvent@bytes_this_time:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x25
   443  0000B6                     	ds	1
   444  0000B7                     vscp_handleProtocolEvent@cb:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x26
   448  0000B7                     	ds	1
   449  0000B8                     vscp_handleProtocolEvent@i_1132:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x27
   453  0000B8                     	ds	1
   454  0000B9                     vscp_handleProtocolEvent@k:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x28
   458  0000B9                     	ds	1
   459  0000BA                     vscp_handleProtocolEvent@i_1121:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x29
   463  0000BA                     	ds	1
   464  0000BB                     vscp_handleProtocolEvent@byte:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x2A
   468  0000BB                     	ds	1
   469  0000BC                     vscp_handleProtocolEvent@bytes_1128:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x2B
   473  0000BC                     	ds	2
   474  0000BE                     vscp_handleProtocolEvent@i_1124:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x2D
   478  0000BE                     	ds	1
   479  0000BF                     vscp_handleProtocolEvent@i:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x2E
   483  0000BF                     	ds	1
   484  0000C0                     vscp_handleProtocolEvent@j:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x2F
   488  0000C0                     	ds	1
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492                           	psect	cstackCOMRAM
   493  000001                     __pcstackCOMRAM:
   494                           	opt stack 0
   495  000001                     ?i1_WriteTimer0:
   496                           	opt stack 0
   497  000001                     i1WriteTimer0@timer0:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x0
   501  000001                     	ds	2
   502  000003                     i1WriteTimer0@timer:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x2
   506  000003                     	ds	2
   507  000005                     ??_interrupt_at_low_vector:
   508                           
   509                           ; 0 bytes @ 0x4
   510  000005                     	ds	3
   511  000008                     ?_WriteTimer0:
   512                           	opt stack 0
   513  000008                     ?_Write_b_eep:
   514                           	opt stack 0
   515  000008                     ??_readControlReg:
   516  000008                     ?__CANIDToRegs:
   517                           	opt stack 0
   518  000008                     ?__RegsToCANID:
   519                           	opt stack 0
   520  000008                     ??_vscp_getMDF_URL:
   521  000008                     ?_Read_b_eep:
   522                           	opt stack 0
   523  000008                     ?___lbmod:
   524                           	opt stack 0
   525  000008                     ?__ECANPointBuffer:
   526                           	opt stack 0
   527  000008                     ?_vscp_getFamilyCode:
   528                           	opt stack 0
   529  000008                     ?_vscp_getFamilyType:
   530                           	opt stack 0
   531  000008                     ECANSetOperationMode@mode:
   532                           	opt stack 0
   533  000008                     OpenTimer0@config:
   534                           	opt stack 0
   535  000008                     ___lbmod@divisor:
   536                           	opt stack 0
   537  000008                     __CANIDToRegs@ptr:
   538                           	opt stack 0
   539  000008                     __RegsToCANID@ptr:
   540                           	opt stack 0
   541  000008                     Read_b_eep@badd:
   542                           	opt stack 0
   543  000008                     Write_b_eep@badd:
   544                           	opt stack 0
   545  000008                     WriteTimer0@timer0:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x7
   549  000008                     	ds	1
   550  000009                     vscp_getMDF_URL@idx:
   551                           	opt stack 0
   552  000009                     ___lbmod@dividend:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x8
   556  000009                     	ds	1
   557  00000A                     vscp_getGUID@idx:
   558                           	opt stack 0
   559  00000A                     vscp_getUserID@idx:
   560                           	opt stack 0
   561  00000A                     vscp_getManufacturerId@idx:
   562                           	opt stack 0
   563  00000A                     vscp_getControlByte@idx:
   564                           	opt stack 0
   565  00000A                     __RegsToCANID@val:
   566                           	opt stack 0
   567  00000A                     Write_b_eep@bdat:
   568                           	opt stack 0
   569  00000A                     ___lbmod@counter:
   570                           	opt stack 0
   571  00000A                     WriteTimer0@timer:
   572                           	opt stack 0
   573  00000A                     __CANIDToRegs@val:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x9
   577  00000A                     	ds	1
   578  00000B                     __RegsToCANID@type:
   579                           	opt stack 0
   580  00000B                     __ECANPointBuffer@b:
   581                           	opt stack 0
   582  00000B                     Write_b_eep@GIE_BIT_VAL:
   583                           	opt stack 0
   584  00000B                     ___lbmod@rem:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0xA
   588  00000B                     	ds	1
   589  00000C                     ??_init_app_eeprom:
   590  00000C                     ??__RegsToCANID:
   591  00000C                     ??_vscp_readStdReg:
   592  00000C                     ?_vscp_setGUID:
   593                           	opt stack 0
   594  00000C                     ?_vscp_setManufacturerId:
   595                           	opt stack 0
   596  00000C                     ?_vscp_setUserID:
   597                           	opt stack 0
   598  00000C                     ?_vscp_setControlByte:
   599                           	opt stack 0
   600  00000C                     vscp_setGUID@data:
   601                           	opt stack 0
   602  00000C                     vscp_setManufacturerId@data:
   603                           	opt stack 0
   604  00000C                     vscp_writeNicknamePermanent@nickname:
   605                           	opt stack 0
   606  00000C                     vscp_setUserID@data:
   607                           	opt stack 0
   608  00000C                     vscp_setControlByte@ctrl:
   609                           	opt stack 0
   610  00000C                     vscp_goBootloaderMode@algorithm:
   611                           	opt stack 0
   612  00000C                     __ECANPointBuffer@pt:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0xB
   616  00000C                     	ds	1
   617  00000D                     vscp_setGUID@idx:
   618                           	opt stack 0
   619  00000D                     vscp_setManufacturerId@idx:
   620                           	opt stack 0
   621  00000D                     vscp_setUserID@idx:
   622                           	opt stack 0
   623  00000D                     vscp_setControlByte@idx:
   624                           	opt stack 0
   625  00000D                     vscp_handleDropNickname@bytes:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0xC
   629  00000D                     	ds	1
   630  00000E                     init_app_eeprom@j:
   631                           	opt stack 0
   632  00000E                     __CANIDToRegs@type:
   633                           	opt stack 0
   634  00000E                     __RegsToCANID@Value:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0xD
   638  00000E                     	ds	1
   639  00000F                     ??__CANIDToRegs:
   640  00000F                     ?_ECANReceiveMessage:
   641                           	opt stack 0
   642  00000F                     init_app_eeprom@i:
   643                           	opt stack 0
   644  00000F                     readControlReg@ctrlreg:
   645                           	opt stack 0
   646  00000F                     ECANReceiveMessage@data:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0xE
   650  00000F                     	ds	1
   651  000010                     ?_vscp_writeStdReg:
   652                           	opt stack 0
   653  000010                     readControlReg@rv:
   654                           	opt stack 0
   655  000010                     ECANReceiveMessage@dataLen:
   656                           	opt stack 0
   657  000010                     vscp_writeStdReg@value:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0xF
   661  000010                     	ds	1
   662  000011                     ??_vscp_writeStdReg:
   663  000011                     ?_writeControlReg:
   664                           	opt stack 0
   665  000011                     vscp_readAppReg@rv:
   666                           	opt stack 0
   667  000011                     writeControlReg@val:
   668                           	opt stack 0
   669  000011                     ECANReceiveMessage@msgFlags:
   670                           	opt stack 0
   671  000011                     __CANIDToRegs@Value:
   672                           	opt stack 0
   673  000011                     vscp_readStdReg@code:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x10
   677  000011                     	ds	1
   678  000012                     ??_writeControlReg:
   679  000012                     ?_ECANSendMessage:
   680                           	opt stack 0
   681  000012                     vscp_readAppReg@reg:
   682                           	opt stack 0
   683  000012                     ECANReceiveMessage@savedPtr:
   684                           	opt stack 0
   685  000012                     ECANSendMessage@id:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x11
   689  000012                     	ds	1
   690  000013                     writeControlReg@ctrlreg:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x12
   694  000013                     	ds	1
   695  000014                     writeControlReg@rv:
   696                           	opt stack 0
   697  000014                     ECANReceiveMessage@id:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x13
   701  000014                     	ds	1
   702  000015                     ?_vscp_writeAppReg:
   703                           	opt stack 0
   704  000015                     vscp_writeAppReg@val:
   705                           	opt stack 0
   706  000015                     ECANReceiveMessage@i:
   707                           	opt stack 0
   708  000015                     vscp_writeStdReg@rv:
   709                           	opt stack 0
   710  000015                     vscp_readStdReg@code_1106:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x14
   714  000015                     	ds	1
   715  000016                     vscp_writeAppReg@rv:
   716                           	opt stack 0
   717  000016                     ECANReceiveMessage@mode:
   718                           	opt stack 0
   719  000016                     vscp_writeStdReg@reg:
   720                           	opt stack 0
   721  000016                     ECANSendMessage@data:
   722                           	opt stack 0
   723                           
   724                           ; 2 bytes @ 0x15
   725  000016                     	ds	1
   726  000017                     vscp_writeAppReg@reg:
   727                           	opt stack 0
   728  000017                     ECANReceiveMessage@temp:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x16
   732  000017                     	ds	1
   733  000018                     ?_vscp_writeRegister:
   734                           	opt stack 0
   735  000018                     ECANSendMessage@dataLen:
   736                           	opt stack 0
   737  000018                     vscp_writeRegister@value:
   738                           	opt stack 0
   739  000018                     ECANReceiveMessage@ptr:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x17
   743  000018                     	ds	1
   744  000019                     ECANSendMessage@msgFlags:
   745                           	opt stack 0
   746  000019                     vscp_readStdReg@idx:
   747                           	opt stack 0
   748  000019                     vscp_writeRegister@reg:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x18
   752  000019                     	ds	1
   753  00001A                     ??_ECANSendMessage:
   754  00001A                     ?_getCANFrame:
   755                           	opt stack 0
   756  00001A                     getCANFrame@pdlc:
   757                           	opt stack 0
   758  00001A                     vscp_readStdReg@idx_1107:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x19
   762  00001A                     	ds	1
   763  00001B                     getCANFrame@pdata:
   764                           	opt stack 0
   765  00001B                     vscp_readStdReg@rv:
   766                           	opt stack 0
   767  00001B                     ECANSendMessage@pb:
   768                           	opt stack 0
   769                           
   770                           ; 18 bytes @ 0x1A
   771  00001B                     	ds	1
   772  00001C                     getCANFrame@pid:
   773                           	opt stack 0
   774  00001C                     vscp_readStdReg@reg:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x1B
   778  00001C                     	ds	1
   779  00001D                     getCANFrame@flags:
   780                           	opt stack 0
   781  00001D                     vscp_readRegister@reg:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x1C
   785  00001D                     	ds	1
   786  00001E                     ?_getVSCPFrame:
   787                           	opt stack 0
   788  00001E                     getVSCPFrame@pvscptype:
   789                           	opt stack 0
   790                           
   791                           ; 1 bytes @ 0x1D
   792  00001E                     	ds	1
   793  00001F                     getVSCPFrame@pNodeId:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x1E
   797  00001F                     	ds	1
   798  000020                     getVSCPFrame@pPriority:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x1F
   802  000020                     	ds	1
   803  000021                     getVSCPFrame@pSize:
   804                           	opt stack 0
   805                           
   806                           ; 1 bytes @ 0x20
   807  000021                     	ds	1
   808  000022                     getVSCPFrame@pData:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x21
   812  000022                     	ds	1
   813  000023                     ??_getVSCPFrame:
   814                           
   815                           ; 0 bytes @ 0x22
   816  000023                     	ds	4
   817  000027                     getVSCPFrame@pvscpclass:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x26
   821  000027                     	ds	1
   822  000028                     getVSCPFrame@id:
   823                           	opt stack 0
   824                           
   825                           ; 4 bytes @ 0x27
   826  000028                     	ds	4
   827  00002C                     vscp_getEvent@rv:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x2B
   831  00002C                     	ds	1
   832  00002D                     ECANSendMessage@mode:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x2C
   836  00002D                     	ds	1
   837  00002E                     ECANSendMessage@buffers:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x2D
   841  00002E                     	ds	1
   842  00002F                     ECANSendMessage@j:
   843                           	opt stack 0
   844                           
   845                           ; 1 bytes @ 0x2E
   846  00002F                     	ds	1
   847  000030                     ECANSendMessage@tempBSEL0:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x2F
   851  000030                     	ds	1
   852  000031                     ECANSendMessage@tempPtr:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x30
   856  000031                     	ds	2
   857  000033                     ECANSendMessage@temp:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x32
   861  000033                     	ds	1
   862  000034                     ECANSendMessage@i:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x33
   866  000034                     	ds	1
   867  000035                     ECANSendMessage@ptr:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x34
   871  000035                     	ds	2
   872  000037                     ?_sendCANFrame:
   873                           	opt stack 0
   874  000037                     sendCANFrame@id:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x36
   878  000037                     	ds	4
   879  00003B                     sendCANFrame@dlc:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x3A
   883  00003B                     	ds	1
   884  00003C                     sendCANFrame@pdata:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x3B
   888  00003C                     	ds	2
   889  00003E                     
   890                           ; 0 bytes @ 0x3D
   891  00003E                     	ds	1
   892  00003F                     ?_sendVSCPFrame:
   893                           	opt stack 0
   894  00003F                     sendVSCPFrame@vscpclass:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x3E
   898  00003F                     	ds	2
   899  000041                     sendVSCPFrame@vscptype:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x40
   903  000041                     	ds	1
   904  000042                     sendVSCPFrame@nodeid:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x41
   908  000042                     	ds	1
   909  000043                     sendVSCPFrame@priority:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x42
   913  000043                     	ds	1
   914  000044                     sendVSCPFrame@size:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x43
   918  000044                     	ds	1
   919  000045                     sendVSCPFrame@pData:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x44
   923  000045                     	ds	2
   924  000047                     sendVSCPFrame@id:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x46
   928  000047                     	ds	4
   929  00004B                     vscp_sendEvent@rv:
   930                           	opt stack 0
   931  00004B                     SendInformationEvent@data:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x4A
   935  00004B                     	ds	1
   936  00004C                     ??_vscp_newNodeOnline:
   937  00004C                     vscp_sendHeartBeat@zone:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x4B
   941  00004C                     	ds	1
   942  00004D                     ??_vscp_doOneSecondWork:
   943                           
   944                           ; 0 bytes @ 0x4C
   945  00004D                     	ds	1
   946  00004E                     SendInformationEvent@idx:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x4D
   950  00004E                     	ds	1
   951  00004F                     ?_actionSet:
   952                           	opt stack 0
   953  00004F                     ?_actionClr:
   954                           	opt stack 0
   955  00004F                     ?_actionSetAll:
   956                           	opt stack 0
   957  00004F                     ?_actionClrAll:
   958                           	opt stack 0
   959  00004F                     actionSet@param:
   960                           	opt stack 0
   961  00004F                     actionClr@param:
   962                           	opt stack 0
   963  00004F                     
   964                           ; 1 bytes @ 0x4E
   965  00004F                     	ds	1
   966  000050                     actionSetAll@i:
   967                           	opt stack 0
   968  000050                     actionClrAll@i:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x4F
   972  000050                     	ds	2
   973  000052                     postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           
   976                           ; 0 bytes @ 0x51
   977 ;;
   978 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   979 ;;
   980 ;; *************** function _main *****************
   981 ;; Defined at:
   982 ;;		line 160 in file "../main.c"
   983 ;; Parameters:    Size  Location     Type
   984 ;;		None
   985 ;; Auto vars:     Size  Location     Type
   986 ;;		None
   987 ;; Return value:  Size  Location     Type
   988 ;;		None               void
   989 ;; Registers used:
   990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : F/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1000 ;;Total ram usage:        0 bytes
  1001 ;; Hardware stack levels required when called:    9
  1002 ;; This function calls:
  1003 ;;		_init
  1004 ;;		_vscp_check_pstorage
  1005 ;;		_init_app_eeprom
  1006 ;;		_init_app_ram
  1007 ;;		_vscp_init
  1008 ;;		_Read_b_eep
  1009 ;;		_writeControlReg
  1010 ;;		_Busy_eep
  1011 ;;		_Write_b_eep
  1012 ;;		_vscp_getEvent
  1013 ;;		_vscp_goActiveState
  1014 ;;		_vscp_handleProbeState
  1015 ;;		_vscp_handleProtocolEvent
  1016 ;;		_doDM
  1017 ;;		_vscp_error
  1018 ;;		_vscp_doOneSecondWork
  1019 ;;		_doApplicationOneSecondWork
  1020 ;;		_doWork
  1021 ;; This function is called by:
  1022 ;;		Startup code after reset
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text0
  1027  002290                     __ptext0:
  1028                           	opt stack 0
  1029  002290                     _main:
  1030                           	opt stack 22
  1031                           
  1032                           ;main.c: 161: init();
  1033                           
  1034                           ;incstack = 0
  1035                           ;incstack = 0
  1036  002290  EC74  F016         	call	_init	;wreg free
  1037                           
  1038                           ;main.c: 165: if ( !vscp_check_pstorage() ) {
  1039  002294  EC3A  F016         	call	_vscp_check_pstorage	;wreg free
  1040  002298  0900               	iorlw	0
  1041  00229A  E104               	bnz	l7235
  1042                           
  1043                           ;main.c: 168: init_app_eeprom();
  1044  00229C  EC98  F013         	call	_init_app_eeprom	;wreg free
  1045                           
  1046                           ;main.c: 169: init_app_ram();
  1047  0022A0  EC7C  F018         	call	_init_app_ram	;wreg free
  1048  0022A4                     l7235:
  1049                           
  1050                           ;main.c: 172: }
  1051                           ;main.c: 174: vscp_init();
  1052  0022A4  EC13  F016         	call	_vscp_init	;wreg free
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;main.c: 177: writeControlReg( 0, Read_b_eep(0x22 + 2) );
  1056  0022A8  6A09               	clrf	?_Read_b_eep+1,c
  1057  0022AA  0E24               	movlw	36
  1058  0022AC  6E08               	movwf	?_Read_b_eep,c
  1059  0022AE  EC25  F018         	call	_Read_b_eep	;wreg free
  1060  0022B2  6E11               	movwf	?_writeControlReg,c
  1061  0022B4  0E00               	movlw	0
  1062  0022B6  ECDC  F00D         	call	_writeControlReg
  1063                           
  1064                           ;main.c: 178: writeControlReg( 1, Read_b_eep(0x22 + 3) );
  1065  0022BA  6A09               	clrf	?_Read_b_eep+1,c
  1066  0022BC  0E25               	movlw	37
  1067  0022BE  6E08               	movwf	?_Read_b_eep,c
  1068  0022C0  EC25  F018         	call	_Read_b_eep	;wreg free
  1069  0022C4  6E11               	movwf	?_writeControlReg,c
  1070  0022C6  0E01               	movlw	1
  1071  0022C8  ECDC  F00D         	call	_writeControlReg
  1072                           
  1073                           ;main.c: 179: writeControlReg( 2, Read_b_eep(0x22 + 4) );
  1074  0022CC  6A09               	clrf	?_Read_b_eep+1,c
  1075  0022CE  0E26               	movlw	38
  1076  0022D0  6E08               	movwf	?_Read_b_eep,c
  1077  0022D2  EC25  F018         	call	_Read_b_eep	;wreg free
  1078  0022D6  6E11               	movwf	?_writeControlReg,c
  1079  0022D8  0E02               	movlw	2
  1080  0022DA  ECDC  F00D         	call	_writeControlReg
  1081  0022DE                     l147:
  1082  0022DE  0004               	clrwdt		;# 
  1083                           
  1084                           ;main.c: 185: if ( ( vscp_initbtncnt > 250 ) &&
  1085                           ;main.c: 186: ( 0x01 != vscp_node_state ) ) {
  1086  0022E0  0EFA               	movlw	250
  1087  0022E2  0100               	movlb	0	; () banked
  1088  0022E4  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1089  0022E6  D00E               	goto	l7255
  1090                           
  1091                           ; BSR set to: 0
  1092  0022E8  0571               	decf	_vscp_node_state& (0+255),w,b
  1093  0022EA  E00C               	bz	l7255
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;main.c: 189: vscp_nickname = 0xff;
  1097  0022EC  6970               	setf	_vscp_nickname& (0+255),b
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;main.c: 190: (Busy_eep(), Write_b_eep(0x01,0xff));
  1101  0022EE  ECB4  F018         	call	_Busy_eep	;wreg free
  1102  0022F2  6A09               	clrf	?_Write_b_eep+1,c
  1103  0022F4  0E01               	movlw	1
  1104  0022F6  6E08               	movwf	?_Write_b_eep,c
  1105  0022F8  0EFF               	movlw	255
  1106  0022FA  680A               	setf	?_Write_b_eep+2,c
  1107  0022FC  EC57  F016         	call	_Write_b_eep	;wreg free
  1108                           
  1109                           ;main.c: 191: vscp_init();
  1110  002300  EC13  F016         	call	_vscp_init	;wreg free
  1111  002304                     l7255:
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main.c: 193: }
  1115                           ;main.c: 196: vscp_imsg.flags = 0;
  1116  002304  6B75               	clrf	_vscp_imsg& (0+255),b
  1117                           
  1118                           ; BSR set to: 0
  1119                           ;main.c: 197: vscp_getEvent();
  1120  002306  EC06  F017         	call	_vscp_getEvent	;wreg free
  1121                           
  1122                           ;main.c: 199: switch ( vscp_node_state ) {
  1123  00230A  D01C               	goto	l7279
  1124  00230C                     l7259:
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 204: if (0xff == vscp_nickname) {
  1128  00230C  2970               	incf	_vscp_nickname& (0+255),w,b
  1129  00230E  E103               	bnz	l7263
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;main.c: 206: vscp_node_state = 0x01;
  1133  002310  0E01               	movlw	1
  1134  002312  6F71               	movwf	_vscp_node_state& (0+255),b
  1135                           
  1136                           ;main.c: 207: } else {
  1137  002314  D023               	goto	l7281
  1138  002316                     l7263:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;main.c: 209: vscp_node_state = 0x03;
  1142  002316  0E03               	movlw	3
  1143  002318  6F71               	movwf	_vscp_node_state& (0+255),b
  1144  00231A                     l7265:
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 210: vscp_goActiveState();
  1148  00231A  ECDD  F017         	call	_vscp_goActiveState	;wreg free
  1149  00231E  D01E               	goto	l7281
  1150  002320                     l7267:
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 215: vscp_handleProbeState();
  1154  002320  ECFD  F013         	call	_vscp_handleProbeState	;wreg free
  1155                           
  1156                           ;main.c: 216: break;
  1157  002324  D01B               	goto	l7281
  1158  002326                     l156:
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 225: if (vscp_imsg.flags & 0x80) {
  1162  002326  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1163  002328  D019               	goto	l7281
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;main.c: 227: if ( 0 == vscp_imsg.vscp_class ) {
  1167  00232A  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1168  00232C  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1169  00232E  B4D8               	btfsc	status,2,c
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;main.c: 230: vscp_handleProtocolEvent();
  1173  002330  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1174                           
  1175                           ;main.c: 232: }
  1176                           ;main.c: 234: doDM();
  1177  002334  ECAE  F00A         	call	_doDM	;wreg free
  1178  002338  D011               	goto	l7281
  1179  00233A                     l7275:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 240: vscp_error();
  1183  00233A  ECB7  F018         	call	_vscp_error	;wreg free
  1184                           
  1185                           ;main.c: 241: break;
  1186  00233E  D00E               	goto	l7281
  1187  002340                     l160:
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;main.c: 244: vscp_node_state = 0x00;
  1191  002340  6B71               	clrf	_vscp_node_state& (0+255),b
  1192                           
  1193                           ;main.c: 245: break;
  1194  002342  D00C               	goto	l7281
  1195  002344                     l7279:
  1196  002344  0100               	movlb	0	; () banked
  1197  002346  5171               	movf	_vscp_node_state& (0+255),w,b
  1198                           
  1199                           ; Switch size 1, requested type "speed"
  1200                           ; Number of cases is 5, Range of values is 0 to 4
  1201                           ; switch strategies available:
  1202                           ; Name         Instructions Cycles
  1203                           ; simple_byte           16     9 (average)
  1204                           ;	Chosen strategy is simple_byte
  1205  002348  E0E1               	bz	l7259
  1206  00234A  0A01               	xorlw	1	; case 1
  1207  00234C  E0E9               	bz	l7267
  1208  00234E  0A03               	xorlw	3	; case 2
  1209  002350  E0E4               	bz	l7265
  1210  002352  0A01               	xorlw	1	; case 3
  1211  002354  E0E8               	bz	l156
  1212  002356  0A07               	xorlw	7	; case 4
  1213  002358  E0F0               	bz	l7275
  1214  00235A  D7F2               	goto	l160
  1215  00235C                     l7281:
  1216                           
  1217                           ;main.c: 250: if ( measurement_clock > 1000 ) {
  1218  00235C  0EE9               	movlw	233
  1219  00235E  0100               	movlb	0	; () banked
  1220  002360  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1221  002362  0E03               	movlw	3
  1222  002364  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1223  002366  0E00               	movlw	0
  1224  002368  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1225  00236A  0E00               	movlw	0
  1226  00236C  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1227  00236E  E30B               	bnc	l7291
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 252: measurement_clock = 0;
  1231  002370  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1232  002372  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1233  002374  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1234  002376  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 255: vscp_doOneSecondWork();
  1238  002378  ECEA  F015         	call	_vscp_doOneSecondWork	;wreg free
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 259: if ( 0x03 == vscp_node_state ) {
  1242  00237C  5171               	movf	_vscp_node_state& (0+255),w,b
  1243  00237E  0A03               	xorlw	3
  1244  002380  B4D8               	btfsc	status,2,c
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 262: doApplicationOneSecondWork();
  1248  002382  ECBC  F018         	call	_doApplicationOneSecondWork	;wreg free
  1249  002386                     l7291:
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;main.c: 264: }
  1253                           ;main.c: 266: }
  1254                           ;main.c: 269: if ( seconds > 59 ) {
  1255  002386  0E3B               	movlw	59
  1256  002388  656A               	cpfsgt	_seconds& (0+255),b
  1257  00238A  D00B               	goto	l7307
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;main.c: 271: seconds = 0;
  1261  00238C  6B6A               	clrf	_seconds& (0+255),b
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 272: minutes++;
  1265  00238E  2B69               	incf	_minutes& (0+255),f,b
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;main.c: 274: if ( minutes > 59 ) {
  1269  002390  0E3B               	movlw	59
  1270  002392  6569               	cpfsgt	_minutes& (0+255),b
  1271  002394  D002               	goto	l7303
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;main.c: 275: minutes = 0;
  1275  002396  6B69               	clrf	_minutes& (0+255),b
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;main.c: 276: hours++;
  1279  002398  2B68               	incf	_hours& (0+255),f,b
  1280  00239A                     l7303:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 277: }
  1284                           ;main.c: 279: if ( hours > 23 ) hours = 0;
  1285  00239A  0E17               	movlw	23
  1286  00239C  6568               	cpfsgt	_hours& (0+255),b
  1287  00239E  D001               	goto	l7307
  1288                           
  1289                           ; BSR set to: 0
  1290  0023A0  6B68               	clrf	_hours& (0+255),b
  1291  0023A2                     l7307:
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 281: }
  1295                           ;main.c: 283: doWork();
  1296  0023A2  ECBB  F018         	call	_doWork	;wreg free
  1297  0023A6  D79B               	goto	l147
  1298  0023A8                     __end_of_main:
  1299                           	opt stack 0
  1300                           postinc0	equ	0xFEE
  1301                           wreg	equ	0xFE8
  1302                           status	equ	0xFD8
  1303                           
  1304 ;; *************** function _doWork *****************
  1305 ;; Defined at:
  1306 ;;		line 565 in file "../main.c"
  1307 ;; Parameters:    Size  Location     Type
  1308 ;;		None
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;		None
  1311 ;; Return value:  Size  Location     Type
  1312 ;;		None               void
  1313 ;; Registers used:
  1314 ;;		wreg, status,2, status,0
  1315 ;; Tracked objects:
  1316 ;;		On entry : F/0
  1317 ;;		On exit  : F/0
  1318 ;;		Unchanged: F/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1323 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1324 ;;Total ram usage:        0 bytes
  1325 ;; Hardware stack levels used:    1
  1326 ;; Hardware stack levels required when called:    2
  1327 ;; This function calls:
  1328 ;;		Nothing
  1329 ;; This function is called by:
  1330 ;;		_main
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text1
  1335  003176                     __ptext1:
  1336                           	opt stack 0
  1337  003176                     _doWork:
  1338                           	opt stack 28
  1339                           
  1340                           ; BSR set to: 0
  1341                           
  1342                           ; BSR set to: 0
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;incstack = 0
  1346                           ;incstack = 0
  1347  003176  0012               	return	
  1348  003178                     __end_of_doWork:
  1349                           	opt stack 0
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _doApplicationOneSecondWork *****************
  1355 ;; Defined at:
  1356 ;;		line 447 in file "../main.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		None
  1365 ;; Tracked objects:
  1366 ;;		On entry : F/0
  1367 ;;		On exit  : F/0
  1368 ;;		Unchanged: F/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1374 ;;Total ram usage:        0 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    2
  1377 ;; This function calls:
  1378 ;;		Nothing
  1379 ;; This function is called by:
  1380 ;;		_main
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text2
  1385  003178                     __ptext2:
  1386                           	opt stack 0
  1387  003178                     _doApplicationOneSecondWork:
  1388                           	opt stack 28
  1389                           
  1390                           ; BSR set to: 0
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;incstack = 0
  1394                           ;incstack = 0
  1395  003178  0012               	return	
  1396  00317A                     __end_of_doApplicationOneSecondWork:
  1397                           	opt stack 0
  1398                           postinc0	equ	0xFEE
  1399                           wreg	equ	0xFE8
  1400                           status	equ	0xFD8
  1401                           
  1402 ;; *************** function _vscp_doOneSecondWork *****************
  1403 ;; Defined at:
  1404 ;;		line 518 in file "../../vscp_firmware/common/vscp_firmware.c"
  1405 ;; Parameters:    Size  Location     Type
  1406 ;;		None
  1407 ;; Auto vars:     Size  Location     Type
  1408 ;;		None
  1409 ;; Return value:  Size  Location     Type
  1410 ;;		None               void
  1411 ;; Registers used:
  1412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1413 ;; Tracked objects:
  1414 ;;		On entry : F/0
  1415 ;;		On exit  : F/0
  1416 ;;		Unchanged: 0/0
  1417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1422 ;;Total ram usage:        1 bytes
  1423 ;; Hardware stack levels used:    1
  1424 ;; Hardware stack levels required when called:    8
  1425 ;; This function calls:
  1426 ;;		_vscp_getZone
  1427 ;;		_vscp_getSubzone
  1428 ;;		_vscp_sendHeartBeat
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text3
  1435  002BD4                     __ptext3:
  1436                           	opt stack 0
  1437  002BD4                     _vscp_doOneSecondWork:
  1438                           	opt stack 22
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;vscp_firmware.c: 520: ++vscp_second;
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;incstack = 0
  1445                           ;incstack = 0
  1446  002BD4  2B74               	incf	_vscp_second& (0+255),f,b
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;vscp_firmware.c: 522: if (vscp_second > 59) {
  1450  002BD6  0E3B               	movlw	59
  1451  002BD8  6574               	cpfsgt	_vscp_second& (0+255),b
  1452  002BDA  D00D               	goto	l6601
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;vscp_firmware.c: 523: vscp_second = 0;
  1456  002BDC  6B74               	clrf	_vscp_second& (0+255),b
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;vscp_firmware.c: 524: vscp_minute++;
  1460  002BDE  2B6F               	incf	_vscp_minute& (0+255),f,b
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;vscp_firmware.c: 527: if (0x03 == vscp_node_state) {
  1464  002BE0  5171               	movf	_vscp_node_state& (0+255),w,b
  1465  002BE2  0A03               	xorlw	3
  1466  002BE4  E108               	bnz	l6601
  1467                           
  1468                           ; BSR set to: 0
  1469                           ;vscp_firmware.c: 528: vscp_sendHeartBeat(vscp_getZone(),
  1470                           ;vscp_firmware.c: 529: vscp_getSubzone());
  1471  002BE6  EC97  F018         	call	_vscp_getSubzone	;wreg free
  1472  002BEA  0100               	movlb	0	; () banked
  1473  002BEC  6FA5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1474  002BEE  EC9C  F018         	call	_vscp_getZone	;wreg free
  1475  002BF2  EC45  F017         	call	_vscp_sendHeartBeat
  1476  002BF6                     l6601:
  1477                           
  1478                           ;vscp_firmware.c: 530: }
  1479                           ;vscp_firmware.c: 531: }
  1480                           ;vscp_firmware.c: 533: if (vscp_minute > 59) {
  1481  002BF6  0E3B               	movlw	59
  1482  002BF8  0100               	movlb	0	; () banked
  1483  002BFA  656F               	cpfsgt	_vscp_minute& (0+255),b
  1484  002BFC  D002               	goto	l6607
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;vscp_firmware.c: 534: vscp_minute = 0;
  1488  002BFE  6B6F               	clrf	_vscp_minute& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;vscp_firmware.c: 535: vscp_hour++;
  1492  002C00  2B6D               	incf	_vscp_hour& (0+255),f,b
  1493  002C02                     l6607:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;vscp_firmware.c: 536: }
  1497                           ;vscp_firmware.c: 538: if (vscp_hour > 23) vscp_hour = 0;
  1498  002C02  0E17               	movlw	23
  1499  002C04  656D               	cpfsgt	_vscp_hour& (0+255),b
  1500  002C06  D001               	goto	l6611
  1501                           
  1502                           ; BSR set to: 0
  1503  002C08  6B6D               	clrf	_vscp_hour& (0+255),b
  1504  002C0A                     l6611:
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;vscp_firmware.c: 542: if (0x03 == vscp_node_state) {
  1508  002C0A  5171               	movf	_vscp_node_state& (0+255),w,b
  1509  002C0C  0A03               	xorlw	3
  1510  002C0E  A4D8               	btfss	status,2,c
  1511  002C10  0012               	return	
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;vscp_firmware.c: 543: vscp_guid_reset++;
  1515  002C12  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;vscp_firmware.c: 544: if ((vscp_guid_reset & 0x0f) >= 2) {
  1519  002C14  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1520  002C18  0E0F               	movlw	15
  1521  002C1A  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1522  002C1C  0E02               	movlw	2
  1523  002C1E  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1524  002C20  B0D8               	btfsc	status,0,c
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;vscp_firmware.c: 545: vscp_guid_reset = 0;
  1528  002C22  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531  002C24  0012               	return	
  1532  002C26                     __end_of_vscp_doOneSecondWork:
  1533                           	opt stack 0
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           status	equ	0xFD8
  1537                           
  1538 ;; *************** function _vscp_sendHeartBeat *****************
  1539 ;; Defined at:
  1540 ;;		line 387 in file "../../vscp_firmware/common/vscp_firmware.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  zone            1    wreg     unsigned char 
  1543 ;;  subzone         1   20[BANK0 ] unsigned char 
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  zone            1   75[COMRAM] unsigned char 
  1546 ;; Return value:  Size  Location     Type
  1547 ;;		None               void
  1548 ;; Registers used:
  1549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1550 ;; Tracked objects:
  1551 ;;		On entry : 0/0
  1552 ;;		On exit  : 0/0
  1553 ;;		Unchanged: 0/0
  1554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1555 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1558 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1559 ;;Total ram usage:        2 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    7
  1562 ;; This function calls:
  1563 ;;		_vscp_sendEvent
  1564 ;; This function is called by:
  1565 ;;		_vscp_doOneSecondWork
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text4
  1570  002E8A                     __ptext4:
  1571                           	opt stack 0
  1572  002E8A                     _vscp_sendHeartBeat:
  1573                           	opt stack 22
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;incstack = 0
  1577                           ;incstack = 0
  1578                           ;vscp_sendHeartBeat@zone stored from wreg
  1579  002E8A  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1580                           
  1581                           ;vscp_firmware.c: 388: vscp_omsg.flags = 0x80 + 3;
  1582  002E8E  0E83               	movlw	131
  1583  002E90  0100               	movlb	0	; () banked
  1584  002E92  6F83               	movwf	_vscp_omsg& (0+255),b
  1585                           
  1586                           ;vscp_firmware.c: 389: vscp_omsg.priority = 0x07;
  1587  002E94  0E07               	movlw	7
  1588  002E96  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1589                           
  1590                           ;vscp_firmware.c: 390: vscp_omsg.vscp_class = 20;
  1591  002E98  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1592  002E9A  0E14               	movlw	20
  1593  002E9C  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1594                           
  1595                           ;vscp_firmware.c: 391: vscp_omsg.vscp_type = 9;
  1596  002E9E  0E09               	movlw	9
  1597  002EA0  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;vscp_firmware.c: 392: vscp_omsg.data[ 0 ] = 0;
  1601  002EA2  6B89               	clrf	(_vscp_omsg+6)& (0+255),b
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;vscp_firmware.c: 393: vscp_omsg.data[ 1 ] = zone;
  1605  002EA4  C04C  F08A         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+7
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;vscp_firmware.c: 394: vscp_omsg.data[ 2 ] = subzone;
  1609  002EA8  C0A5  F08B         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+8
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;vscp_firmware.c: 397: vscp_sendEvent();
  1613  002EAC  EFD7  F016         	goto	_vscp_sendEvent	;wreg free
  1614  002EB0                     __end_of_vscp_sendHeartBeat:
  1615                           	opt stack 0
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _vscp_getSubzone *****************
  1621 ;; Defined at:
  1622 ;;		line 554 in file "../main.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;		None
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;		None
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      unsigned char 
  1629 ;; Registers used:
  1630 ;;		wreg, status,2, status,0, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : F/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1640 ;;Total ram usage:        0 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    3
  1643 ;; This function calls:
  1644 ;;		_Read_b_eep
  1645 ;; This function is called by:
  1646 ;;		_vscp_doOneSecondWork
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text5
  1651  00312E                     __ptext5:
  1652                           	opt stack 0
  1653  00312E                     _vscp_getSubzone:
  1654                           	opt stack 26
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;main.c: 555: return Read_b_eep(0x22 + 1);
  1658                           
  1659                           ;incstack = 0
  1660                           ;incstack = 0
  1661  00312E  6A09               	clrf	?_Read_b_eep+1,c
  1662  003130  0E23               	movlw	35
  1663  003132  6E08               	movwf	?_Read_b_eep,c
  1664  003134  EF25  F018         	goto	_Read_b_eep	;wreg free
  1665  003138                     __end_of_vscp_getSubzone:
  1666                           	opt stack 0
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _vscp_getZone *****************
  1672 ;; Defined at:
  1673 ;;		line 545 in file "../main.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      unsigned char 
  1680 ;; Registers used:
  1681 ;;		wreg, status,2, status,0, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : F/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    3
  1694 ;; This function calls:
  1695 ;;		_Read_b_eep
  1696 ;; This function is called by:
  1697 ;;		_vscp_doOneSecondWork
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text6
  1702  003138                     __ptext6:
  1703                           	opt stack 0
  1704  003138                     _vscp_getZone:
  1705                           	opt stack 26
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 546: return Read_b_eep(0x22 + 0);
  1709                           
  1710                           ;incstack = 0
  1711                           ;incstack = 0
  1712  003138  6A09               	clrf	?_Read_b_eep+1,c
  1713  00313A  0E22               	movlw	34
  1714  00313C  6E08               	movwf	?_Read_b_eep,c
  1715  00313E  EF25  F018         	goto	_Read_b_eep	;wreg free
  1716  003142                     __end_of_vscp_getZone:
  1717                           	opt stack 0
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _vscp_error *****************
  1723 ;; Defined at:
  1724 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;		None               void
  1731 ;; Registers used:
  1732 ;;		None
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text7
  1753  00316E                     __ptext7:
  1754                           	opt stack 0
  1755  00316E                     _vscp_error:
  1756                           	opt stack 28
  1757                           
  1758                           ;vscp_firmware.c: 203: vscp_initledfunc = 0x00;
  1759                           
  1760                           ;incstack = 0
  1761                           ;incstack = 0
  1762  00316E  6A56               	clrf	_vscp_initledfunc,c
  1763  003170  0012               	return	
  1764  003172                     __end_of_vscp_error:
  1765                           	opt stack 0
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _doDM *****************
  1771 ;; Defined at:
  1772 ;;		line 826 in file "../main.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  class_mask      2   27[BANK0 ] unsigned short 
  1777 ;;  class_filter    2   25[BANK0 ] unsigned short 
  1778 ;;  i               1   36[BANK0 ] unsigned char 
  1779 ;;  dmflags         1   35[BANK0 ] unsigned char 
  1780 ;;  type_mask       1   30[BANK0 ] unsigned char 
  1781 ;;  type_filter     1   29[BANK0 ] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;		None               void
  1784 ;; Registers used:
  1785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : F/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1792 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1793 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1794 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1795 ;;Total ram usage:       15 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    8
  1798 ;; This function calls:
  1799 ;;		_Read_b_eep
  1800 ;;		_actionSet
  1801 ;;		_actionClr
  1802 ;;		_actionSetAll
  1803 ;;		_actionClrAll
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text8
  1810  00155C                     __ptext8:
  1811                           	opt stack 0
  1812  00155C                     _doDM:
  1813                           	opt stack 22
  1814                           
  1815                           ;main.c: 827: unsigned char i;
  1816                           ;main.c: 828: unsigned char dmflags;
  1817                           ;main.c: 829: unsigned short class_filter;
  1818                           ;main.c: 830: unsigned short class_mask;
  1819                           ;main.c: 831: unsigned char type_filter;
  1820                           ;main.c: 832: unsigned char type_mask;
  1821                           ;main.c: 835: if ( 0 == vscp_imsg.vscp_class ) return;
  1822                           
  1823                           ;incstack = 0
  1824                           ;incstack = 0
  1825  00155C  0100               	movlb	0	; () banked
  1826  00155E  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1827  001560  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1828  001562  B4D8               	btfsc	status,2,c
  1829  001564  0012               	return	
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 837: for (i = 0; i < 8; i++) {
  1833  001566  6BB5               	clrf	doDM@i& (0+255),b
  1834  001568                     l7747:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;main.c: 840: dmflags = Read_b_eep(0x22 + 23 + 0 + 1 + (8 * i));
  1838  001568  51B5               	movf	doDM@i& (0+255),w,b
  1839  00156A  6FA7               	movwf	??_doDM& (0+255),b
  1840  00156C  6BA8               	clrf	(??_doDM+1)& (0+255),b
  1841  00156E  90D8               	bcf	status,0,c
  1842  001570  37A7               	rlcf	??_doDM& (0+255),f,b
  1843  001572  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  1844  001574  90D8               	bcf	status,0,c
  1845  001576  37A7               	rlcf	??_doDM& (0+255),f,b
  1846  001578  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  1847  00157A  90D8               	bcf	status,0,c
  1848  00157C  37A7               	rlcf	??_doDM& (0+255),f,b
  1849  00157E  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  1850  001580  0E3A               	movlw	58
  1851  001582  25A7               	addwf	??_doDM& (0+255),w,b
  1852  001584  6E08               	movwf	?_Read_b_eep,c
  1853  001586  0E00               	movlw	0
  1854  001588  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  1855  00158A  6E09               	movwf	?_Read_b_eep+1,c
  1856  00158C  EC25  F018         	call	_Read_b_eep	;wreg free
  1857  001590  0100               	movlb	0	; () banked
  1858  001592  6FB4               	movwf	doDM@dmflags& (0+255),b
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 844: if ( dmflags & 0x80 ) {
  1862  001594  AFB4               	btfss	doDM@dmflags& (0+255),7,b
  1863  001596  D136               	goto	l7801
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;main.c: 847: if ( ( dmflags & 0x40 ) &&
  1867                           ;main.c: 848: ( vscp_imsg.oaddr != Read_b_eep(0x22 + 23 + 0 + (8 * i)) ) ) {
  1868  001598  ADB4               	btfss	doDM@dmflags& (0+255),6,b
  1869  00159A  D018               	goto	l291
  1870                           
  1871                           ; BSR set to: 0
  1872  00159C  51B5               	movf	doDM@i& (0+255),w,b
  1873  00159E  6FA7               	movwf	??_doDM& (0+255),b
  1874  0015A0  6BA8               	clrf	(??_doDM+1)& (0+255),b
  1875  0015A2  90D8               	bcf	status,0,c
  1876  0015A4  37A7               	rlcf	??_doDM& (0+255),f,b
  1877  0015A6  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  1878  0015A8  90D8               	bcf	status,0,c
  1879  0015AA  37A7               	rlcf	??_doDM& (0+255),f,b
  1880  0015AC  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  1881  0015AE  90D8               	bcf	status,0,c
  1882  0015B0  37A7               	rlcf	??_doDM& (0+255),f,b
  1883  0015B2  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  1884  0015B4  0E39               	movlw	57
  1885  0015B6  25A7               	addwf	??_doDM& (0+255),w,b
  1886  0015B8  6E08               	movwf	?_Read_b_eep,c
  1887  0015BA  0E00               	movlw	0
  1888  0015BC  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  1889  0015BE  6E09               	movwf	?_Read_b_eep+1,c
  1890  0015C0  EC25  F018         	call	_Read_b_eep	;wreg free
  1891  0015C4  0100               	movlb	0	; () banked
  1892  0015C6  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  1893  0015C8  E001 D11C          	bnz	l7801
  1894  0015CC                     l291:
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;main.c: 851: }
  1898                           ;main.c: 854: if ( dmflags & 0x10 ) {
  1899  0015CC  A9B4               	btfss	doDM@dmflags& (0+255),4,b
  1900  0015CE  D00B               	goto	l293
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;main.c: 855: if ( 255 != vscp_imsg.data[ 1 ] ) {
  1904  0015D0  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  1905  0015D2  E009               	bz	l293
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 856: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x22 + 0) ) {
  1909  0015D4  6A09               	clrf	?_Read_b_eep+1,c
  1910  0015D6  0E22               	movlw	34
  1911  0015D8  6E08               	movwf	?_Read_b_eep,c
  1912  0015DA  EC25  F018         	call	_Read_b_eep	;wreg free
  1913  0015DE  0100               	movlb	0	; () banked
  1914  0015E0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  1915  0015E2  E001 D10F          	bnz	l7801
  1916  0015E6                     l293:
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;main.c: 858: }
  1920                           ;main.c: 859: }
  1921                           ;main.c: 860: }
  1922                           ;main.c: 863: if ( dmflags & 0x08 ) {
  1923  0015E6  A7B4               	btfss	doDM@dmflags& (0+255),3,b
  1924  0015E8  D00B               	goto	l7769
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 864: if ( 255 != vscp_imsg.data[ 2 ] ) {
  1928  0015EA  297D               	incf	(_vscp_imsg+8)& (0+255),w,b
  1929  0015EC  E009               	bz	l7769
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 865: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x22 + 0) ) {
  1933  0015EE  6A09               	clrf	?_Read_b_eep+1,c
  1934  0015F0  0E22               	movlw	34
  1935  0015F2  6E08               	movwf	?_Read_b_eep,c
  1936  0015F4  EC25  F018         	call	_Read_b_eep	;wreg free
  1937  0015F8  0100               	movlb	0	; () banked
  1938  0015FA  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  1939  0015FC  E001 D102          	bnz	l7801
  1940  001600                     l7769:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 867: }
  1944                           ;main.c: 868: }
  1945                           ;main.c: 869: }
  1946                           ;main.c: 871: class_filter = ( dmflags & 0x01)*256 +
  1947                           ;main.c: 872: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 3);
  1948  001600  51B5               	movf	doDM@i& (0+255),w,b
  1949  001602  0D08               	mullw	8
  1950  001604  0E3C               	movlw	60
  1951  001606  24F3               	addwf	prodl,w,c
  1952  001608  6E08               	movwf	?_Read_b_eep,c
  1953  00160A  0E00               	movlw	0
  1954  00160C  20F4               	addwfc	prodh,w,c
  1955  00160E  6E09               	movwf	?_Read_b_eep+1,c
  1956  001610  EC25  F018         	call	_Read_b_eep	;wreg free
  1957  001614  0100               	movlb	0	; () banked
  1958  001616  6FA7               	movwf	??_doDM& (0+255),b
  1959  001618  51B4               	movf	doDM@dmflags& (0+255),w,b
  1960  00161A  0B01               	andlw	1
  1961  00161C  6FA9               	movwf	(??_doDM+2)& (0+255),b
  1962  00161E  6BA8               	clrf	(??_doDM+1)& (0+255),b
  1963  001620  51A7               	movf	??_doDM& (0+255),w,b
  1964  001622  25A8               	addwf	(??_doDM+1)& (0+255),w,b
  1965  001624  6FAA               	movwf	doDM@class_filter& (0+255),b
  1966  001626  0E00               	movlw	0
  1967  001628  21A9               	addwfc	(??_doDM+2)& (0+255),w,b
  1968  00162A  6FAB               	movwf	(doDM@class_filter+1)& (0+255),b
  1969                           
  1970                           ;main.c: 876: class_mask = ( dmflags & 0x02)*256 +
  1971                           ;main.c: 877: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 2);
  1972  00162C  51B5               	movf	doDM@i& (0+255),w,b
  1973  00162E  0D08               	mullw	8
  1974  001630  0E3B               	movlw	59
  1975  001632  24F3               	addwf	prodl,w,c
  1976  001634  6E08               	movwf	?_Read_b_eep,c
  1977  001636  0E00               	movlw	0
  1978  001638  20F4               	addwfc	prodh,w,c
  1979  00163A  6E09               	movwf	?_Read_b_eep+1,c
  1980  00163C  EC25  F018         	call	_Read_b_eep	;wreg free
  1981  001640  0100               	movlb	0	; () banked
  1982  001642  6FA7               	movwf	??_doDM& (0+255),b
  1983  001644  51B4               	movf	doDM@dmflags& (0+255),w,b
  1984  001646  0B02               	andlw	2
  1985  001648  6FA9               	movwf	(??_doDM+2)& (0+255),b
  1986  00164A  6BA8               	clrf	(??_doDM+1)& (0+255),b
  1987  00164C  51A7               	movf	??_doDM& (0+255),w,b
  1988  00164E  25A8               	addwf	(??_doDM+1)& (0+255),w,b
  1989  001650  6FAC               	movwf	doDM@class_mask& (0+255),b
  1990  001652  0E00               	movlw	0
  1991  001654  21A9               	addwfc	(??_doDM+2)& (0+255),w,b
  1992  001656  6FAD               	movwf	(doDM@class_mask+1)& (0+255),b
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;main.c: 881: type_filter = Read_b_eep(0x22 + 23 + 0 + (8 * i) + 5);
  1996  001658  51B5               	movf	doDM@i& (0+255),w,b
  1997  00165A  6FA7               	movwf	??_doDM& (0+255),b
  1998  00165C  6BA8               	clrf	(??_doDM+1)& (0+255),b
  1999  00165E  90D8               	bcf	status,0,c
  2000  001660  37A7               	rlcf	??_doDM& (0+255),f,b
  2001  001662  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2002  001664  90D8               	bcf	status,0,c
  2003  001666  37A7               	rlcf	??_doDM& (0+255),f,b
  2004  001668  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2005  00166A  90D8               	bcf	status,0,c
  2006  00166C  37A7               	rlcf	??_doDM& (0+255),f,b
  2007  00166E  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2008  001670  0E3E               	movlw	62
  2009  001672  25A7               	addwf	??_doDM& (0+255),w,b
  2010  001674  6E08               	movwf	?_Read_b_eep,c
  2011  001676  0E00               	movlw	0
  2012  001678  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2013  00167A  6E09               	movwf	?_Read_b_eep+1,c
  2014  00167C  EC25  F018         	call	_Read_b_eep	;wreg free
  2015  001680  0100               	movlb	0	; () banked
  2016  001682  6FAE               	movwf	doDM@type_filter& (0+255),b
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;main.c: 885: type_mask = Read_b_eep(0x22 + 23 + 0 + (8 * i) + 4);
  2020  001684  51B5               	movf	doDM@i& (0+255),w,b
  2021  001686  6FA7               	movwf	??_doDM& (0+255),b
  2022  001688  6BA8               	clrf	(??_doDM+1)& (0+255),b
  2023  00168A  90D8               	bcf	status,0,c
  2024  00168C  37A7               	rlcf	??_doDM& (0+255),f,b
  2025  00168E  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2026  001690  90D8               	bcf	status,0,c
  2027  001692  37A7               	rlcf	??_doDM& (0+255),f,b
  2028  001694  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2029  001696  90D8               	bcf	status,0,c
  2030  001698  37A7               	rlcf	??_doDM& (0+255),f,b
  2031  00169A  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2032  00169C  0E3D               	movlw	61
  2033  00169E  25A7               	addwf	??_doDM& (0+255),w,b
  2034  0016A0  6E08               	movwf	?_Read_b_eep,c
  2035  0016A2  0E00               	movlw	0
  2036  0016A4  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2037  0016A6  6E09               	movwf	?_Read_b_eep+1,c
  2038  0016A8  EC25  F018         	call	_Read_b_eep	;wreg free
  2039  0016AC  0100               	movlb	0	; () banked
  2040  0016AE  6FAF               	movwf	doDM@type_mask& (0+255),b
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 890: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2044                           ;main.c: 891: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2045  0016B0  EE20  F077         	lfsr	2,_vscp_imsg+2
  2046  0016B4  CFDE F0A7          	movff	postinc2,??_doDM
  2047  0016B8  CFDD F0A8          	movff	postdec2,??_doDM+1
  2048  0016BC  51AA               	movf	doDM@class_filter& (0+255),w,b
  2049  0016BE  1BA7               	xorwf	??_doDM& (0+255),f,b
  2050  0016C0  51AB               	movf	(doDM@class_filter+1)& (0+255),w,b
  2051  0016C2  1BA8               	xorwf	(??_doDM+1)& (0+255),f,b
  2052  0016C4  51AC               	movf	doDM@class_mask& (0+255),w,b
  2053  0016C6  17A7               	andwf	??_doDM& (0+255),f,b
  2054  0016C8  51AD               	movf	(doDM@class_mask+1)& (0+255),w,b
  2055  0016CA  17A8               	andwf	(??_doDM+1)& (0+255),f,b
  2056  0016CC  51A8               	movf	(??_doDM+1)& (0+255),w,b
  2057  0016CE  11A7               	iorwf	??_doDM& (0+255),w,b
  2058  0016D0  E001 D098          	bnz	l7801
  2059                           
  2060                           ; BSR set to: 0
  2061  0016D4  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2062  0016D6  19AE               	xorwf	doDM@type_filter& (0+255),w,b
  2063  0016D8  15AF               	andwf	doDM@type_mask& (0+255),w,b
  2064  0016DA  E075               	bz	l7799
  2065  0016DC  D093               	goto	l7801
  2066  0016DE                     l7781:
  2067                           
  2068                           ;main.c: 902: actionSet( dmflags,
  2069                           ;main.c: 903: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2070  0016DE  0100               	movlb	0	; () banked
  2071  0016E0  51B5               	movf	doDM@i& (0+255),w,b
  2072  0016E2  6FA7               	movwf	??_doDM& (0+255),b
  2073  0016E4  6BA8               	clrf	(??_doDM+1)& (0+255),b
  2074  0016E6  90D8               	bcf	status,0,c
  2075  0016E8  37A7               	rlcf	??_doDM& (0+255),f,b
  2076  0016EA  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2077  0016EC  90D8               	bcf	status,0,c
  2078  0016EE  37A7               	rlcf	??_doDM& (0+255),f,b
  2079  0016F0  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2080  0016F2  90D8               	bcf	status,0,c
  2081  0016F4  37A7               	rlcf	??_doDM& (0+255),f,b
  2082  0016F6  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2083  0016F8  0E40               	movlw	64
  2084  0016FA  25A7               	addwf	??_doDM& (0+255),w,b
  2085  0016FC  6E08               	movwf	?_Read_b_eep,c
  2086  0016FE  0E00               	movlw	0
  2087  001700  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2088  001702  6E09               	movwf	?_Read_b_eep+1,c
  2089  001704  EC25  F018         	call	_Read_b_eep	;wreg free
  2090  001708  0100               	movlb	0	; () banked
  2091  00170A  6FB0               	movwf	_doDM$1984& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;main.c: 902: actionSet( dmflags,
  2095                           ;main.c: 903: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2096  00170C  C0B0  F04F         	movff	_doDM$1984,?_actionSet
  2097  001710  51B4               	movf	doDM@dmflags& (0+255),w,b
  2098  001712  EC30  F013         	call	_actionSet
  2099                           
  2100                           ;main.c: 906: break;
  2101  001716  D076               	goto	l7801
  2102  001718                     l7785:
  2103                           
  2104                           ;main.c: 909: actionClr( dmflags,
  2105                           ;main.c: 910: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2106  001718  0100               	movlb	0	; () banked
  2107  00171A  51B5               	movf	doDM@i& (0+255),w,b
  2108  00171C  6FA7               	movwf	??_doDM& (0+255),b
  2109  00171E  6BA8               	clrf	(??_doDM+1)& (0+255),b
  2110  001720  90D8               	bcf	status,0,c
  2111  001722  37A7               	rlcf	??_doDM& (0+255),f,b
  2112  001724  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2113  001726  90D8               	bcf	status,0,c
  2114  001728  37A7               	rlcf	??_doDM& (0+255),f,b
  2115  00172A  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2116  00172C  90D8               	bcf	status,0,c
  2117  00172E  37A7               	rlcf	??_doDM& (0+255),f,b
  2118  001730  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2119  001732  0E40               	movlw	64
  2120  001734  25A7               	addwf	??_doDM& (0+255),w,b
  2121  001736  6E08               	movwf	?_Read_b_eep,c
  2122  001738  0E00               	movlw	0
  2123  00173A  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2124  00173C  6E09               	movwf	?_Read_b_eep+1,c
  2125  00173E  EC25  F018         	call	_Read_b_eep	;wreg free
  2126  001742  0100               	movlb	0	; () banked
  2127  001744  6FB1               	movwf	_doDM$1985& (0+255),b
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;main.c: 909: actionClr( dmflags,
  2131                           ;main.c: 910: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2132  001746  C0B1  F04F         	movff	_doDM$1985,?_actionClr
  2133  00174A  51B4               	movf	doDM@dmflags& (0+255),w,b
  2134  00174C  ECC8  F012         	call	_actionClr
  2135                           
  2136                           ;main.c: 913: break;
  2137  001750  D059               	goto	l7801
  2138  001752                     l7789:
  2139                           
  2140                           ;main.c: 916: actionSetAll( dmflags,
  2141                           ;main.c: 917: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2142  001752  0100               	movlb	0	; () banked
  2143  001754  51B5               	movf	doDM@i& (0+255),w,b
  2144  001756  6FA7               	movwf	??_doDM& (0+255),b
  2145  001758  6BA8               	clrf	(??_doDM+1)& (0+255),b
  2146  00175A  90D8               	bcf	status,0,c
  2147  00175C  37A7               	rlcf	??_doDM& (0+255),f,b
  2148  00175E  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2149  001760  90D8               	bcf	status,0,c
  2150  001762  37A7               	rlcf	??_doDM& (0+255),f,b
  2151  001764  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2152  001766  90D8               	bcf	status,0,c
  2153  001768  37A7               	rlcf	??_doDM& (0+255),f,b
  2154  00176A  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2155  00176C  0E40               	movlw	64
  2156  00176E  25A7               	addwf	??_doDM& (0+255),w,b
  2157  001770  6E08               	movwf	?_Read_b_eep,c
  2158  001772  0E00               	movlw	0
  2159  001774  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2160  001776  6E09               	movwf	?_Read_b_eep+1,c
  2161  001778  EC25  F018         	call	_Read_b_eep	;wreg free
  2162  00177C  0100               	movlb	0	; () banked
  2163  00177E  6FB2               	movwf	_doDM$1986& (0+255),b
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;main.c: 916: actionSetAll( dmflags,
  2167                           ;main.c: 917: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2168  001780  C0B2  F04F         	movff	_doDM$1986,?_actionSetAll
  2169  001784  51B4               	movf	doDM@dmflags& (0+255),w,b
  2170  001786  ECA7  F016         	call	_actionSetAll
  2171                           
  2172                           ;main.c: 920: break;
  2173  00178A  D03C               	goto	l7801
  2174  00178C                     l7793:
  2175                           
  2176                           ;main.c: 923: actionClrAll( dmflags,
  2177                           ;main.c: 924: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2178  00178C  0100               	movlb	0	; () banked
  2179  00178E  51B5               	movf	doDM@i& (0+255),w,b
  2180  001790  6FA7               	movwf	??_doDM& (0+255),b
  2181  001792  6BA8               	clrf	(??_doDM+1)& (0+255),b
  2182  001794  90D8               	bcf	status,0,c
  2183  001796  37A7               	rlcf	??_doDM& (0+255),f,b
  2184  001798  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2185  00179A  90D8               	bcf	status,0,c
  2186  00179C  37A7               	rlcf	??_doDM& (0+255),f,b
  2187  00179E  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2188  0017A0  90D8               	bcf	status,0,c
  2189  0017A2  37A7               	rlcf	??_doDM& (0+255),f,b
  2190  0017A4  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2191  0017A6  0E40               	movlw	64
  2192  0017A8  25A7               	addwf	??_doDM& (0+255),w,b
  2193  0017AA  6E08               	movwf	?_Read_b_eep,c
  2194  0017AC  0E00               	movlw	0
  2195  0017AE  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2196  0017B0  6E09               	movwf	?_Read_b_eep+1,c
  2197  0017B2  EC25  F018         	call	_Read_b_eep	;wreg free
  2198  0017B6  0100               	movlb	0	; () banked
  2199  0017B8  6FB3               	movwf	_doDM$1987& (0+255),b
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;main.c: 923: actionClrAll( dmflags,
  2203                           ;main.c: 924: Read_b_eep(0x22 + 23 + 0 + (8 * i) + 7) );
  2204  0017BA  C0B3  F04F         	movff	_doDM$1987,?_actionClrAll
  2205  0017BE  51B4               	movf	doDM@dmflags& (0+255),w,b
  2206  0017C0  EC8F  F016         	call	_actionClrAll
  2207                           
  2208                           ;main.c: 927: break;
  2209  0017C4  D01F               	goto	l7801
  2210  0017C6                     l7799:
  2211                           
  2212                           ; BSR set to: 0
  2213  0017C6  51B5               	movf	doDM@i& (0+255),w,b
  2214  0017C8  6FA7               	movwf	??_doDM& (0+255),b
  2215  0017CA  6BA8               	clrf	(??_doDM+1)& (0+255),b
  2216  0017CC  90D8               	bcf	status,0,c
  2217  0017CE  37A7               	rlcf	??_doDM& (0+255),f,b
  2218  0017D0  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2219  0017D2  90D8               	bcf	status,0,c
  2220  0017D4  37A7               	rlcf	??_doDM& (0+255),f,b
  2221  0017D6  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2222  0017D8  90D8               	bcf	status,0,c
  2223  0017DA  37A7               	rlcf	??_doDM& (0+255),f,b
  2224  0017DC  37A8               	rlcf	(??_doDM+1)& (0+255),f,b
  2225  0017DE  0E3F               	movlw	63
  2226  0017E0  25A7               	addwf	??_doDM& (0+255),w,b
  2227  0017E2  6E08               	movwf	?_Read_b_eep,c
  2228  0017E4  0E00               	movlw	0
  2229  0017E6  21A8               	addwfc	(??_doDM+1)& (0+255),w,b
  2230  0017E8  6E09               	movwf	?_Read_b_eep+1,c
  2231  0017EA  EC25  F018         	call	_Read_b_eep	;wreg free
  2232                           
  2233                           ; Switch size 1, requested type "speed"
  2234                           ; Number of cases is 5, Range of values is 0 to 4
  2235                           ; switch strategies available:
  2236                           ; Name         Instructions Cycles
  2237                           ; simple_byte           16     9 (average)
  2238                           ;	Chosen strategy is simple_byte
  2239  0017EE  0A00               	xorlw	0	; case 0
  2240  0017F0  E009               	bz	l7801
  2241  0017F2  0A01               	xorlw	1	; case 1
  2242  0017F4  E101 D773          	bz	l7781
  2243  0017F8  0A03               	xorlw	3	; case 2
  2244  0017FA  E08E               	bz	l7785
  2245  0017FC  0A01               	xorlw	1	; case 3
  2246  0017FE  E0A9               	bz	l7789
  2247  001800  0A07               	xorlw	7	; case 4
  2248  001802  E0C4               	bz	l7793
  2249  001804                     l7801:
  2250  001804  0100               	movlb	0	; () banked
  2251  001806  2BB5               	incf	doDM@i& (0+255),f,b
  2252                           
  2253                           ; BSR set to: 0
  2254  001808  0E07               	movlw	7
  2255  00180A  65B5               	cpfsgt	doDM@i& (0+255),b
  2256  00180C  D6AD               	goto	l7747
  2257  00180E  0C07               	retlw	7
  2258  001810                     __end_of_doDM:
  2259                           	opt stack 0
  2260                           prodh	equ	0xFF4
  2261                           prodl	equ	0xFF3
  2262                           postinc0	equ	0xFEE
  2263                           wreg	equ	0xFE8
  2264                           postinc2	equ	0xFDE
  2265                           postdec2	equ	0xFDD
  2266                           status	equ	0xFD8
  2267                           
  2268 ;; *************** function _actionClrAll *****************
  2269 ;; Defined at:
  2270 ;;		line 1170 in file "../main.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  dmflags         1    wreg     unsigned char 
  2273 ;;  param           1   78[COMRAM] unsigned char 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  dmflags         1    0[COMRAM] unsigned char 
  2276 ;;  i               2   79[COMRAM] int 
  2277 ;; Return value:  Size  Location     Type
  2278 ;;		None               void
  2279 ;; Registers used:
  2280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : F/0
  2283 ;;		On exit  : F/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2286 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2287 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2290 ;;Total ram usage:        3 bytes
  2291 ;; Hardware stack levels used:    1
  2292 ;; Hardware stack levels required when called:    7
  2293 ;; This function calls:
  2294 ;;		_SendInformationEvent
  2295 ;; This function is called by:
  2296 ;;		_doDM
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299                           
  2300                           	psect	text9
  2301  002D1E                     __ptext9:
  2302                           	opt stack 0
  2303  002D1E                     _actionClrAll:
  2304                           	opt stack 22
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 1171: PORTA = 0x00;
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;incstack = 0
  2311                           ;incstack = 0
  2312  002D1E  6A80               	clrf	3968,c	;volatile
  2313                           
  2314                           ;main.c: 1172: PORTB = 0x00;
  2315  002D20  6A81               	clrf	3969,c	;volatile
  2316                           
  2317                           ;main.c: 1173: PORTC = 0x00;
  2318  002D22  6A82               	clrf	3970,c	;volatile
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;main.c: 1175: for ( int i=3; i<21; i++ ) {
  2322  002D24  6A51               	clrf	actionClrAll@i+1,c
  2323  002D26  0E03               	movlw	3
  2324  002D28  6E50               	movwf	actionClrAll@i,c
  2325  002D2A                     l6835:
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;main.c: 1176: SendInformationEvent( i,
  2329                           ;main.c: 1177: 20,
  2330                           ;main.c: 1178: 4 );
  2331  002D2A  0E14               	movlw	20
  2332  002D2C  6FA5               	movwf	?_SendInformationEvent& (0+255),b
  2333  002D2E  0E04               	movlw	4
  2334  002D30  6FA6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2335  002D32  5050               	movf	actionClrAll@i,w,c
  2336  002D34  ECBF  F015         	call	_SendInformationEvent
  2337                           
  2338                           ; BSR set to: 0
  2339  002D38  4A50               	infsnz	actionClrAll@i,f,c
  2340  002D3A  2A51               	incf	actionClrAll@i+1,f,c
  2341                           
  2342                           ; BSR set to: 0
  2343  002D3C  5051               	movf	actionClrAll@i+1,w,c
  2344  002D3E  0A80               	xorlw	128
  2345  002D40  0F80               	addlw	-128
  2346  002D42  0E15               	movlw	21
  2347  002D44  B4D8               	btfsc	status,2,c
  2348  002D46  5C50               	subwf	actionClrAll@i,w,c
  2349  002D48  B0D8               	btfsc	status,0,c
  2350  002D4A  0012               	return	
  2351  002D4C  D7EE               	goto	l6835
  2352  002D4E                     __end_of_actionClrAll:
  2353                           	opt stack 0
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           postinc2	equ	0xFDE
  2359                           postdec2	equ	0xFDD
  2360                           status	equ	0xFD8
  2361                           
  2362 ;; *************** function _actionSetAll *****************
  2363 ;; Defined at:
  2364 ;;		line 1151 in file "../main.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  dmflags         1    wreg     unsigned char 
  2367 ;;  param           1   78[COMRAM] unsigned char 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  dmflags         1    0[COMRAM] unsigned char 
  2370 ;;  i               2   79[COMRAM] int 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;		None               void
  2373 ;; Registers used:
  2374 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : F/0
  2377 ;;		On exit  : F/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2380 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2383 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2384 ;;Total ram usage:        3 bytes
  2385 ;; Hardware stack levels used:    1
  2386 ;; Hardware stack levels required when called:    7
  2387 ;; This function calls:
  2388 ;;		_SendInformationEvent
  2389 ;; This function is called by:
  2390 ;;		_doDM
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text10
  2395  002D4E                     __ptext10:
  2396                           	opt stack 0
  2397  002D4E                     _actionSetAll:
  2398                           	opt stack 22
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 1152: PORTA = 0xff;
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;incstack = 0
  2405                           ;incstack = 0
  2406  002D4E  6880               	setf	3968,c	;volatile
  2407                           
  2408                           ;main.c: 1153: PORTB = 0xff;
  2409  002D50  6881               	setf	3969,c	;volatile
  2410                           
  2411                           ;main.c: 1154: PORTC = 0xff;
  2412  002D52  6882               	setf	3970,c	;volatile
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;main.c: 1156: for ( int i=3; i<21; i++ ) {
  2416  002D54  6A51               	clrf	actionSetAll@i+1,c
  2417  002D56  0E03               	movlw	3
  2418  002D58  6E50               	movwf	actionSetAll@i,c
  2419  002D5A                     l6821:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;main.c: 1157: SendInformationEvent( i,
  2423                           ;main.c: 1158: 20,
  2424                           ;main.c: 1159: 3 );
  2425  002D5A  0E14               	movlw	20
  2426  002D5C  6FA5               	movwf	?_SendInformationEvent& (0+255),b
  2427  002D5E  0E03               	movlw	3
  2428  002D60  6FA6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2429  002D62  5050               	movf	actionSetAll@i,w,c
  2430  002D64  ECBF  F015         	call	_SendInformationEvent
  2431                           
  2432                           ; BSR set to: 0
  2433  002D68  4A50               	infsnz	actionSetAll@i,f,c
  2434  002D6A  2A51               	incf	actionSetAll@i+1,f,c
  2435                           
  2436                           ; BSR set to: 0
  2437  002D6C  5051               	movf	actionSetAll@i+1,w,c
  2438  002D6E  0A80               	xorlw	128
  2439  002D70  0F80               	addlw	-128
  2440  002D72  0E15               	movlw	21
  2441  002D74  B4D8               	btfsc	status,2,c
  2442  002D76  5C50               	subwf	actionSetAll@i,w,c
  2443  002D78  B0D8               	btfsc	status,0,c
  2444  002D7A  0012               	return	
  2445  002D7C  D7EE               	goto	l6821
  2446  002D7E                     __end_of_actionSetAll:
  2447                           	opt stack 0
  2448                           prodh	equ	0xFF4
  2449                           prodl	equ	0xFF3
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           postinc2	equ	0xFDE
  2453                           postdec2	equ	0xFDD
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function _actionClr *****************
  2457 ;; Defined at:
  2458 ;;		line 1047 in file "../main.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  dmflags         1    wreg     unsigned char 
  2461 ;;  param           1   78[COMRAM] unsigned char 
  2462 ;; Auto vars:     Size  Location     Type
  2463 ;;  dmflags         1    0[COMRAM] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;		None               void
  2466 ;; Registers used:
  2467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : F/0
  2470 ;;		On exit  : F/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2473 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2477 ;;Total ram usage:        1 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    7
  2480 ;; This function calls:
  2481 ;;		_Read_b_eep
  2482 ;;		_SendInformationEvent
  2483 ;; This function is called by:
  2484 ;;		_doDM
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text11
  2489  002590                     __ptext11:
  2490                           	opt stack 0
  2491  002590                     _actionClr:
  2492                           	opt stack 22
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 1049: if ( param & 0x80 ) {
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;incstack = 0
  2499                           ;incstack = 0
  2500  002590  AE4F               	btfss	actionClr@param,7,c
  2501  002592  D00D               	goto	l6799
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;main.c: 1051: param &= 0x7f;
  2505  002594  9E4F               	bcf	actionClr@param,7,c
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 1053: if ( Read_b_eep(0x22 + 5 + (param - 3))
  2509                           ;main.c: 1054: != vscp_imsg.data[ 2 ] ) {
  2510  002596  0E24               	movlw	36
  2511  002598  244F               	addwf	actionClr@param,w,c
  2512  00259A  6E08               	movwf	?_Read_b_eep,c
  2513  00259C  6A09               	clrf	?_Read_b_eep+1,c
  2514  00259E  0E00               	movlw	0
  2515  0025A0  2209               	addwfc	?_Read_b_eep+1,f,c
  2516  0025A2  EC25  F018         	call	_Read_b_eep	;wreg free
  2517  0025A6  0100               	movlb	0	; () banked
  2518  0025A8  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2519  0025AA  A4D8               	btfss	status,2,c
  2520  0025AC  0012               	return	
  2521  0025AE                     l6799:
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;main.c: 1056: }
  2525                           ;main.c: 1057: }
  2526                           ;main.c: 1059: if ( param < 3) return;
  2527  0025AE  0E03               	movlw	3
  2528  0025B0  604F               	cpfslt	actionClr@param,c
  2529  0025B2  D001               	goto	l6803
  2530  0025B4  0C03               	retlw	3
  2531  0025B6                     l6803:
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 1060: if ( param > 20 ) return;
  2535  0025B6  0E14               	movlw	20
  2536  0025B8  644F               	cpfsgt	actionClr@param,c
  2537  0025BA  D001               	goto	l6807
  2538  0025BC  0C14               	retlw	20
  2539  0025BE                     l6807:
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;main.c: 1062: SendInformationEvent( param,
  2543                           ;main.c: 1063: 20,
  2544                           ;main.c: 1064: 4 );
  2545  0025BE  0E14               	movlw	20
  2546  0025C0  6FA5               	movwf	?_SendInformationEvent& (0+255),b
  2547  0025C2  0E04               	movlw	4
  2548  0025C4  6FA6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2549  0025C6  504F               	movf	actionClr@param,w,c
  2550  0025C8  ECBF  F015         	call	_SendInformationEvent
  2551                           
  2552                           ;main.c: 1066: switch ( param ) {
  2553  0025CC  D020               	goto	l6811
  2554  0025CE                     l342:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;main.c: 1069: PORTCbits.RC7 = 0;
  2558  0025CE  9E82               	bcf	3970,7,c	;volatile
  2559                           
  2560                           ;main.c: 1070: break;
  2561  0025D0  0012               	return	
  2562  0025D2                     l344:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 1073: PORTCbits.RC6 = 0;
  2566  0025D2  9C82               	bcf	3970,6,c	;volatile
  2567                           
  2568                           ;main.c: 1074: break;
  2569  0025D4  0012               	return	
  2570  0025D6                     l345:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 1077: PORTCbits.RC3 = 0;
  2574  0025D6  9682               	bcf	3970,3,c	;volatile
  2575                           
  2576                           ;main.c: 1078: break;
  2577  0025D8  0012               	return	
  2578  0025DA                     l346:
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;main.c: 1081: PORTCbits.RC4 = 0;
  2582  0025DA  9882               	bcf	3970,4,c	;volatile
  2583                           
  2584                           ;main.c: 1082: break;
  2585  0025DC  0012               	return	
  2586  0025DE                     l347:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 1085: PORTCbits.RC5 = 0;
  2590  0025DE  9A82               	bcf	3970,5,c	;volatile
  2591                           
  2592                           ;main.c: 1086: break;
  2593  0025E0  0012               	return	
  2594  0025E2                     l348:
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 1089: PORTAbits.RA0 = 0;
  2598  0025E2  9080               	bcf	3968,0,c	;volatile
  2599                           
  2600                           ;main.c: 1090: break;
  2601  0025E4  0012               	return	
  2602  0025E6                     l349:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 1093: PORTAbits.RA1 = 0;
  2606  0025E6  9280               	bcf	3968,1,c	;volatile
  2607                           
  2608                           ;main.c: 1094: break;
  2609  0025E8  0012               	return	
  2610  0025EA                     l350:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 1097: PORTAbits.RA2 = 0;
  2614  0025EA  9480               	bcf	3968,2,c	;volatile
  2615                           
  2616                           ;main.c: 1098: break;
  2617  0025EC  0012               	return	
  2618  0025EE                     l351:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 1101: PORTAbits.RA3 = 0;
  2622  0025EE  9680               	bcf	3968,3,c	;volatile
  2623                           
  2624                           ;main.c: 1102: break;
  2625  0025F0  0012               	return	
  2626  0025F2                     l352:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;main.c: 1105: PORTAbits.RA5 = 0;
  2630  0025F2  9A80               	bcf	3968,5,c	;volatile
  2631                           
  2632                           ;main.c: 1106: break;
  2633  0025F4  0012               	return	
  2634  0025F6                     l355:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 1117: PORTBbits.RB4 = 0;
  2638  0025F6  9881               	bcf	3969,4,c	;volatile
  2639                           
  2640                           ;main.c: 1118: break;
  2641  0025F8  0012               	return	
  2642  0025FA                     l356:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;main.c: 1121: PORTCbits.RC2 = 0;
  2646  0025FA  9482               	bcf	3970,2,c	;volatile
  2647                           
  2648                           ;main.c: 1122: break;
  2649  0025FC  0012               	return	
  2650  0025FE                     l357:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;main.c: 1125: PORTBbits.RB1 = 0;
  2654  0025FE  9281               	bcf	3969,1,c	;volatile
  2655                           
  2656                           ;main.c: 1126: break;
  2657  002600  0012               	return	
  2658  002602                     l358:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 1129: PORTBbits.RB0 = 0;
  2662  002602  9081               	bcf	3969,0,c	;volatile
  2663                           
  2664                           ;main.c: 1130: break;
  2665  002604  0012               	return	
  2666  002606                     l359:
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 1133: PORTBbits.RB6 = 0;
  2670  002606  9C81               	bcf	3969,6,c	;volatile
  2671                           
  2672                           ;main.c: 1134: break;
  2673  002608  0012               	return	
  2674  00260A                     l360:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 1137: PORTBbits.RB5 = 0;
  2678  00260A  9A81               	bcf	3969,5,c	;volatile
  2679                           
  2680                           ;main.c: 1138: break;
  2681  00260C  0012               	return	
  2682  00260E                     l6811:
  2683                           
  2684                           ; BSR set to: 0
  2685  00260E  504F               	movf	actionClr@param,w,c
  2686                           
  2687                           ; Switch size 1, requested type "speed"
  2688                           ; Number of cases is 18, Range of values is 3 to 20
  2689                           ; switch strategies available:
  2690                           ; Name         Instructions Cycles
  2691                           ; simple_byte           55    28 (average)
  2692                           ;	Chosen strategy is simple_byte
  2693  002610  0A03               	xorlw	3	; case 3
  2694  002612  E0DD               	bz	l342
  2695  002614  0A07               	xorlw	7	; case 4
  2696  002616  E0DD               	bz	l344
  2697  002618  0A01               	xorlw	1	; case 5
  2698  00261A  E0DD               	bz	l345
  2699  00261C  0A03               	xorlw	3	; case 6
  2700  00261E  E0DD               	bz	l346
  2701  002620  0A01               	xorlw	1	; case 7
  2702  002622  E0DD               	bz	l347
  2703  002624  0A0F               	xorlw	15	; case 8
  2704  002626  E0DD               	bz	l348
  2705  002628  0A01               	xorlw	1	; case 9
  2706  00262A  E0DD               	bz	l349
  2707  00262C  0A03               	xorlw	3	; case 10
  2708  00262E  E0DD               	bz	l350
  2709  002630  0A01               	xorlw	1	; case 11
  2710  002632  E0DD               	bz	l351
  2711  002634  0A07               	xorlw	7	; case 12
  2712  002636  E0DD               	bz	l352
  2713  002638  0A01               	xorlw	1	; case 13
  2714  00263A  B4D8               	btfsc	status,2,c
  2715  00263C  0012               	return	
  2716  00263E  0A03               	xorlw	3	; case 14
  2717  002640  B4D8               	btfsc	status,2,c
  2718  002642  0012               	return	
  2719  002644  0A01               	xorlw	1	; case 15
  2720  002646  E0D7               	bz	l355
  2721  002648  0A1F               	xorlw	31	; case 16
  2722  00264A  E0D7               	bz	l356
  2723  00264C  0A01               	xorlw	1	; case 17
  2724  00264E  E0D7               	bz	l357
  2725  002650  0A03               	xorlw	3	; case 18
  2726  002652  E0D7               	bz	l358
  2727  002654  0A01               	xorlw	1	; case 19
  2728  002656  E0D7               	bz	l359
  2729  002658  0A07               	xorlw	7	; case 20
  2730  00265A  A4D8               	btfss	status,2,c
  2731  00265C  0012               	return	
  2732  00265E  D7D5               	goto	l360
  2733  002660                     __end_of_actionClr:
  2734                           	opt stack 0
  2735                           prodh	equ	0xFF4
  2736                           prodl	equ	0xFF3
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postinc2	equ	0xFDE
  2740                           postdec2	equ	0xFDD
  2741                           status	equ	0xFD8
  2742                           
  2743 ;; *************** function _actionSet *****************
  2744 ;; Defined at:
  2745 ;;		line 944 in file "../main.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;  dmflags         1    wreg     unsigned char 
  2748 ;;  param           1   78[COMRAM] unsigned char 
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;  dmflags         1    0[COMRAM] unsigned char 
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : F/0
  2757 ;;		On exit  : F/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2760 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2763 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2764 ;;Total ram usage:        1 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    7
  2767 ;; This function calls:
  2768 ;;		_Read_b_eep
  2769 ;;		_SendInformationEvent
  2770 ;; This function is called by:
  2771 ;;		_doDM
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text12
  2776  002660                     __ptext12:
  2777                           	opt stack 0
  2778  002660                     _actionSet:
  2779                           	opt stack 22
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;main.c: 946: if ( param & 0x80 ) {
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;incstack = 0
  2786                           ;incstack = 0
  2787  002660  AE4F               	btfss	actionSet@param,7,c
  2788  002662  D00D               	goto	l6777
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;main.c: 948: param &= 0x7f;
  2792  002664  9E4F               	bcf	actionSet@param,7,c
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 950: if ( Read_b_eep(0x22 + 5 + (param - 3))
  2796                           ;main.c: 951: != vscp_imsg.data[ 2 ] ) {
  2797  002666  0E24               	movlw	36
  2798  002668  244F               	addwf	actionSet@param,w,c
  2799  00266A  6E08               	movwf	?_Read_b_eep,c
  2800  00266C  6A09               	clrf	?_Read_b_eep+1,c
  2801  00266E  0E00               	movlw	0
  2802  002670  2209               	addwfc	?_Read_b_eep+1,f,c
  2803  002672  EC25  F018         	call	_Read_b_eep	;wreg free
  2804  002676  0100               	movlb	0	; () banked
  2805  002678  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2806  00267A  A4D8               	btfss	status,2,c
  2807  00267C  0012               	return	
  2808  00267E                     l6777:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 953: }
  2812                           ;main.c: 954: }
  2813                           ;main.c: 956: if ( param < 3) return;
  2814  00267E  0E03               	movlw	3
  2815  002680  604F               	cpfslt	actionSet@param,c
  2816  002682  D001               	goto	l6781
  2817  002684  0C03               	retlw	3
  2818  002686                     l6781:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 957: if ( param > 20 ) return;
  2822  002686  0E14               	movlw	20
  2823  002688  644F               	cpfsgt	actionSet@param,c
  2824  00268A  D001               	goto	l6785
  2825  00268C  0C14               	retlw	20
  2826  00268E                     l6785:
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 959: SendInformationEvent( param,
  2830                           ;main.c: 960: 20,
  2831                           ;main.c: 961: 3 );
  2832  00268E  0E14               	movlw	20
  2833  002690  6FA5               	movwf	?_SendInformationEvent& (0+255),b
  2834  002692  0E03               	movlw	3
  2835  002694  6FA6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2836  002696  504F               	movf	actionSet@param,w,c
  2837  002698  ECBF  F015         	call	_SendInformationEvent
  2838                           
  2839                           ;main.c: 963: switch ( param ) {
  2840  00269C  D020               	goto	l6789
  2841  00269E                     l315:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 966: PORTCbits.RC7 = 1;
  2845  00269E  8E82               	bsf	3970,7,c	;volatile
  2846                           
  2847                           ;main.c: 967: break;
  2848  0026A0  0012               	return	
  2849  0026A2                     l317:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 970: PORTCbits.RC6 = 1;
  2853  0026A2  8C82               	bsf	3970,6,c	;volatile
  2854                           
  2855                           ;main.c: 971: break;
  2856  0026A4  0012               	return	
  2857  0026A6                     l318:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 974: PORTCbits.RC3 = 1;
  2861  0026A6  8682               	bsf	3970,3,c	;volatile
  2862                           
  2863                           ;main.c: 975: break;
  2864  0026A8  0012               	return	
  2865  0026AA                     l319:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;main.c: 978: PORTCbits.RC4 = 1;
  2869  0026AA  8882               	bsf	3970,4,c	;volatile
  2870                           
  2871                           ;main.c: 979: break;
  2872  0026AC  0012               	return	
  2873  0026AE                     l320:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 982: PORTCbits.RC5 = 1;
  2877  0026AE  8A82               	bsf	3970,5,c	;volatile
  2878                           
  2879                           ;main.c: 983: break;
  2880  0026B0  0012               	return	
  2881  0026B2                     l321:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 986: PORTAbits.RA0 = 1;
  2885  0026B2  8080               	bsf	3968,0,c	;volatile
  2886                           
  2887                           ;main.c: 987: break;
  2888  0026B4  0012               	return	
  2889  0026B6                     l322:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 990: PORTAbits.RA1 = 1;
  2893  0026B6  8280               	bsf	3968,1,c	;volatile
  2894                           
  2895                           ;main.c: 991: break;
  2896  0026B8  0012               	return	
  2897  0026BA                     l323:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 994: PORTAbits.RA2 = 1;
  2901  0026BA  8480               	bsf	3968,2,c	;volatile
  2902                           
  2903                           ;main.c: 995: break;
  2904  0026BC  0012               	return	
  2905  0026BE                     l324:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 998: PORTAbits.RA3 = 1;
  2909  0026BE  8680               	bsf	3968,3,c	;volatile
  2910                           
  2911                           ;main.c: 999: break;
  2912  0026C0  0012               	return	
  2913  0026C2                     l325:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;main.c: 1002: PORTAbits.RA5 = 1;
  2917  0026C2  8A80               	bsf	3968,5,c	;volatile
  2918                           
  2919                           ;main.c: 1003: break;
  2920  0026C4  0012               	return	
  2921  0026C6                     l328:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 1014: PORTBbits.RB4 = 1;
  2925  0026C6  8881               	bsf	3969,4,c	;volatile
  2926                           
  2927                           ;main.c: 1015: break;
  2928  0026C8  0012               	return	
  2929  0026CA                     l329:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 1018: PORTCbits.RC2 = 1;
  2933  0026CA  8482               	bsf	3970,2,c	;volatile
  2934                           
  2935                           ;main.c: 1019: break;
  2936  0026CC  0012               	return	
  2937  0026CE                     l330:
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 1022: PORTBbits.RB1 = 1;
  2941  0026CE  8281               	bsf	3969,1,c	;volatile
  2942                           
  2943                           ;main.c: 1023: break;
  2944  0026D0  0012               	return	
  2945  0026D2                     l331:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 1026: PORTBbits.RB0 = 1;
  2949  0026D2  8081               	bsf	3969,0,c	;volatile
  2950                           
  2951                           ;main.c: 1027: break;
  2952  0026D4  0012               	return	
  2953  0026D6                     l332:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;main.c: 1030: PORTBbits.RB6 = 1;
  2957  0026D6  8C81               	bsf	3969,6,c	;volatile
  2958                           
  2959                           ;main.c: 1031: break;
  2960  0026D8  0012               	return	
  2961  0026DA                     l333:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;main.c: 1034: PORTBbits.RB5 = 1;
  2965  0026DA  8A81               	bsf	3969,5,c	;volatile
  2966                           
  2967                           ;main.c: 1035: break;
  2968  0026DC  0012               	return	
  2969  0026DE                     l6789:
  2970                           
  2971                           ; BSR set to: 0
  2972  0026DE  504F               	movf	actionSet@param,w,c
  2973                           
  2974                           ; Switch size 1, requested type "speed"
  2975                           ; Number of cases is 18, Range of values is 3 to 20
  2976                           ; switch strategies available:
  2977                           ; Name         Instructions Cycles
  2978                           ; simple_byte           55    28 (average)
  2979                           ;	Chosen strategy is simple_byte
  2980  0026E0  0A03               	xorlw	3	; case 3
  2981  0026E2  E0DD               	bz	l315
  2982  0026E4  0A07               	xorlw	7	; case 4
  2983  0026E6  E0DD               	bz	l317
  2984  0026E8  0A01               	xorlw	1	; case 5
  2985  0026EA  E0DD               	bz	l318
  2986  0026EC  0A03               	xorlw	3	; case 6
  2987  0026EE  E0DD               	bz	l319
  2988  0026F0  0A01               	xorlw	1	; case 7
  2989  0026F2  E0DD               	bz	l320
  2990  0026F4  0A0F               	xorlw	15	; case 8
  2991  0026F6  E0DD               	bz	l321
  2992  0026F8  0A01               	xorlw	1	; case 9
  2993  0026FA  E0DD               	bz	l322
  2994  0026FC  0A03               	xorlw	3	; case 10
  2995  0026FE  E0DD               	bz	l323
  2996  002700  0A01               	xorlw	1	; case 11
  2997  002702  E0DD               	bz	l324
  2998  002704  0A07               	xorlw	7	; case 12
  2999  002706  E0DD               	bz	l325
  3000  002708  0A01               	xorlw	1	; case 13
  3001  00270A  B4D8               	btfsc	status,2,c
  3002  00270C  0012               	return	
  3003  00270E  0A03               	xorlw	3	; case 14
  3004  002710  B4D8               	btfsc	status,2,c
  3005  002712  0012               	return	
  3006  002714  0A01               	xorlw	1	; case 15
  3007  002716  E0D7               	bz	l328
  3008  002718  0A1F               	xorlw	31	; case 16
  3009  00271A  E0D7               	bz	l329
  3010  00271C  0A01               	xorlw	1	; case 17
  3011  00271E  E0D7               	bz	l330
  3012  002720  0A03               	xorlw	3	; case 18
  3013  002722  E0D7               	bz	l331
  3014  002724  0A01               	xorlw	1	; case 19
  3015  002726  E0D7               	bz	l332
  3016  002728  0A07               	xorlw	7	; case 20
  3017  00272A  A4D8               	btfss	status,2,c
  3018  00272C  0012               	return	
  3019  00272E  D7D5               	goto	l333
  3020  002730                     __end_of_actionSet:
  3021                           	opt stack 0
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postinc2	equ	0xFDE
  3027                           postdec2	equ	0xFDD
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _SendInformationEvent *****************
  3031 ;; Defined at:
  3032 ;;		line 804 in file "../main.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  idx             1    wreg     unsigned char 
  3035 ;;  eventClass      1   20[BANK0 ] unsigned char 
  3036 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  idx             1   77[COMRAM] unsigned char 
  3039 ;;  data            3   74[COMRAM] unsigned char [3]
  3040 ;; Return value:  Size  Location     Type
  3041 ;;		None               void
  3042 ;; Registers used:
  3043 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : F/0
  3046 ;;		On exit  : F/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3050 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;Total ram usage:        6 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    6
  3056 ;; This function calls:
  3057 ;;		_Read_b_eep
  3058 ;;		_sendVSCPFrame
  3059 ;; This function is called by:
  3060 ;;		_actionSet
  3061 ;;		_actionClr
  3062 ;;		_actionSetAll
  3063 ;;		_actionClrAll
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text13
  3068  002B7E                     __ptext13:
  3069                           	opt stack 0
  3070  002B7E                     _SendInformationEvent:
  3071                           	opt stack 22
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;incstack = 0
  3075                           ;incstack = 0
  3076                           ;SendInformationEvent@idx stored from wreg
  3077  002B7E  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;main.c: 805: uint8_t data[3];
  3081                           ;main.c: 806: idx -= 3;
  3082  002B82  0E03               	movlw	3
  3083  002B84  5E4E               	subwf	SendInformationEvent@idx,f,c
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;main.c: 808: data[ 0 ] = idx;
  3087  002B86  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;main.c: 809: data[ 1 ] = Read_b_eep(0x22 + 0);
  3091  002B8A  6A09               	clrf	?_Read_b_eep+1,c
  3092  002B8C  0E22               	movlw	34
  3093  002B8E  6E08               	movwf	?_Read_b_eep,c
  3094  002B90  EC25  F018         	call	_Read_b_eep	;wreg free
  3095  002B94  6E4C               	movwf	SendInformationEvent@data+1,c
  3096                           
  3097                           ;main.c: 810: data[ 2 ] = Read_b_eep(0x22 + 5 + idx);
  3098  002B96  0E27               	movlw	39
  3099  002B98  244E               	addwf	SendInformationEvent@idx,w,c
  3100  002B9A  6E08               	movwf	?_Read_b_eep,c
  3101  002B9C  6A09               	clrf	?_Read_b_eep+1,c
  3102  002B9E  0E00               	movlw	0
  3103  002BA0  2209               	addwfc	?_Read_b_eep+1,f,c
  3104  002BA2  EC25  F018         	call	_Read_b_eep	;wreg free
  3105  002BA6  6E4D               	movwf	SendInformationEvent@data+2,c
  3106                           
  3107                           ;main.c: 811: sendVSCPFrame( eventClass,
  3108                           ;main.c: 812: eventTypeId,
  3109                           ;main.c: 813: vscp_nickname,
  3110                           ;main.c: 814: 0x03,
  3111                           ;main.c: 815: 3,
  3112                           ;main.c: 816: data );
  3113  002BA8  0100               	movlb	0	; () banked
  3114  002BAA  C0A5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  3115  002BAE  6A40               	clrf	?_sendVSCPFrame+1,c
  3116  002BB0  C0A6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  3117  002BB4  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3118  002BB8  0E03               	movlw	3
  3119  002BBA  6E43               	movwf	?_sendVSCPFrame+4,c
  3120  002BBC  6E44               	movwf	?_sendVSCPFrame+5,c
  3121  002BBE  0E4B               	movlw	low SendInformationEvent@data
  3122  002BC0  6E45               	movwf	?_sendVSCPFrame+6,c
  3123  002BC2  0E00               	movlw	high SendInformationEvent@data
  3124  002BC4  6E46               	movwf	?_sendVSCPFrame+7,c
  3125  002BC6  0E0F               	movlw	15
  3126  002BC8  6E46               	movwf	?_sendVSCPFrame+7,c
  3127  002BCA  0E5F               	movlw	__accesstop+-1
  3128  002BCC  6445               	cpfsgt	?_sendVSCPFrame+6,c
  3129  002BCE  6A46               	clrf	?_sendVSCPFrame+7,c
  3130  002BD0  EF59  F014         	goto	_sendVSCPFrame	;wreg free
  3131  002BD4                     __end_of_SendInformationEvent:
  3132                           	opt stack 0
  3133                           prodh	equ	0xFF4
  3134                           prodl	equ	0xFF3
  3135                           postinc0	equ	0xFEE
  3136                           wreg	equ	0xFE8
  3137                           postinc2	equ	0xFDE
  3138                           postdec2	equ	0xFDD
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _vscp_handleProtocolEvent *****************
  3142 ;; Defined at:
  3143 ;;		line 794 in file "../../vscp_firmware/common/vscp_firmware.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;  bytes           1   33[BANK0 ] unsigned char 
  3148 ;;  page_save       2   29[BANK0 ] unsigned short 
  3149 ;;  i               1   39[BANK0 ] unsigned char 
  3150 ;;  bytes           2   43[BANK0 ] unsigned short 
  3151 ;;  page_save       2   27[BANK0 ] unsigned short 
  3152 ;;  byte            1   42[BANK0 ] unsigned char 
  3153 ;;  cb              1   38[BANK0 ] unsigned char 
  3154 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3155 ;;  j               1   47[BANK0 ] unsigned char 
  3156 ;;  i               1   45[BANK0 ] unsigned char 
  3157 ;;  k               1   40[BANK0 ] unsigned char 
  3158 ;;  i               1   41[BANK0 ] unsigned char 
  3159 ;;  len             1   36[BANK0 ] unsigned char 
  3160 ;;  pos             1   35[BANK0 ] unsigned char 
  3161 ;;  i               1   46[BANK0 ] unsigned char 
  3162 ;;  len             1   34[BANK0 ] unsigned char 
  3163 ;;  pos             1   32[BANK0 ] unsigned char 
  3164 ;;  offset          1   31[BANK0 ] unsigned char 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;		None               void
  3167 ;; Registers used:
  3168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : F/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3175 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3176 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3177 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3178 ;;Total ram usage:       28 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    8
  3181 ;; This function calls:
  3182 ;;		_vscp_init
  3183 ;;		_vscp_readAppReg
  3184 ;;		_vscp_writeAppReg
  3185 ;;		_vscp_sendEvent
  3186 ;;		_vscp_getGUID
  3187 ;;		_vscp_getMDF_URL
  3188 ;;		_vscp_goBootloaderMode
  3189 ;;		_vscp_getMatrixInfo
  3190 ;;		_vscp_handleHeartbeat
  3191 ;;		_vscp_handleSetNickname
  3192 ;;		_vscp_handleDropNickname
  3193 ;;		_vscp_newNodeOnline
  3194 ;;		_vscp_readRegister
  3195 ;;		_vscp_readStdReg
  3196 ;;		_vscp_writeRegister
  3197 ;;		_vscp_writeStdReg
  3198 ;;		___lbmod
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text14
  3205  000F22                     __ptext14:
  3206                           	opt stack 0
  3207  000F22                     _vscp_handleProtocolEvent:
  3208                           	opt stack 22
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;vscp_firmware.c: 796: if (0 == vscp_imsg.vscp_class) {
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;incstack = 0
  3215                           ;incstack = 0
  3216  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  3217  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3218  000F26  A4D8               	btfss	status,2,c
  3219  000F28  0012               	return	
  3220  000F2A  D2E6               	goto	l7731
  3221  000F2C                     l7313:
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;vscp_firmware.c: 803: vscp_handleHeartbeat();
  3225  000F2C  0012               	return		;wreg free
  3226  000F2E                     l7315:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;vscp_firmware.c: 808: vscp_newNodeOnline();
  3230  000F2E  EF1C  F017         	goto	_vscp_newNodeOnline	;wreg free
  3231  000F32                     l7317:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;vscp_firmware.c: 813: vscp_handleSetNickname();
  3235  000F32  EFBF  F017         	goto	_vscp_handleSetNickname	;wreg free
  3236  000F36                     l7319:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;vscp_firmware.c: 818: vscp_handleDropNickname();
  3240  000F36  EFBF  F016         	goto	_vscp_handleDropNickname	;wreg free
  3241  000F3A                     l7321:
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;vscp_firmware.c: 823: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  3245                           ;vscp_firmware.c: 824: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3246  000F3A  5175               	movf	_vscp_imsg& (0+255),w,b
  3247  000F3C  0B0F               	andlw	15
  3248  000F3E  0A02               	xorlw	2
  3249  000F40  A4D8               	btfss	status,2,c
  3250  000F42  0012               	return	
  3251                           
  3252                           ; BSR set to: 0
  3253  000F44  5170               	movf	_vscp_nickname& (0+255),w,b
  3254  000F46  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3255  000F4A  62DF               	cpfseq	indf2,c
  3256  000F4C  0012               	return	
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;vscp_firmware.c: 826: if (vscp_imsg.data[ 1 ] < 0x80) {
  3260  000F4E  0E80               	movlw	128
  3261  000F50  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3262  000F52  D011               	goto	l7341
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;vscp_firmware.c: 829: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3266  000F54  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3267  000F56  ECB3  F014         	call	_vscp_readAppReg
  3268  000F5A                     L1:
  3269  000F5A  0100               	movlb	0	; () banked
  3270  000F5C  6F8A               	movwf	(_vscp_omsg+7)& (0+255),b
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;vscp_firmware.c: 832: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3274  000F5E  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;vscp_firmware.c: 834: vscp_omsg.priority = 0x03;
  3278  000F62  0E03               	movlw	3
  3279  000F64  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;vscp_firmware.c: 835: vscp_omsg.flags = 0x80 + 2;
  3283  000F66  0E82               	movlw	130
  3284  000F68  6F83               	movwf	_vscp_omsg& (0+255),b
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;vscp_firmware.c: 836: vscp_omsg.vscp_class = 0;
  3288  000F6A  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3289  000F6C  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;vscp_firmware.c: 837: vscp_omsg.vscp_type = 10;
  3293  000F6E  0E0A               	movlw	10
  3294  000F70  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;vscp_firmware.c: 840: vscp_sendEvent();
  3298  000F72  EFD7  F016         	goto	_vscp_sendEvent	;wreg free
  3299  000F76                     l7341:
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;vscp_firmware.c: 842: else {
  3303                           ;vscp_firmware.c: 845: vscp_omsg.data[ 1 ] =
  3304                           ;vscp_firmware.c: 846: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3305  000F76  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3306  000F78  EC04  F00D         	call	_vscp_readStdReg
  3307  000F7C  D7EE               	goto	L1
  3308  000F7E                     l7355:
  3309                           
  3310                           ; BSR set to: 0
  3311                           ;vscp_firmware.c: 864: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3312                           ;vscp_firmware.c: 865: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3313  000F7E  5175               	movf	_vscp_imsg& (0+255),w,b
  3314  000F80  0B0F               	andlw	15
  3315  000F82  0A03               	xorlw	3
  3316  000F84  A4D8               	btfss	status,2,c
  3317  000F86  0012               	return	
  3318                           
  3319                           ; BSR set to: 0
  3320  000F88  5170               	movf	_vscp_nickname& (0+255),w,b
  3321  000F8A  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3322  000F8E  62DF               	cpfseq	indf2,c
  3323  000F90  0012               	return	
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;vscp_firmware.c: 867: if (vscp_imsg.data[ 1 ] < 0x80) {
  3327  000F92  0E80               	movlw	128
  3328  000F94  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3329  000F96  D006               	goto	l7375
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;vscp_firmware.c: 870: vscp_omsg.data[ 1 ] =
  3333                           ;vscp_firmware.c: 871: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3334  000F98  C07D  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3335  000F9C  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3336  000F9E  ECAE  F010         	call	_vscp_writeAppReg
  3337  000FA2  D7DB               	goto	L1
  3338  000FA4                     l7375:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;vscp_firmware.c: 885: else {
  3342                           ;vscp_firmware.c: 888: vscp_omsg.data[ 1 ] =
  3343                           ;vscp_firmware.c: 889: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3344  000FA4  C07D  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3345  000FA8  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3346  000FAA  ECD4  F011         	call	_vscp_writeStdReg
  3347  000FAE  D7D5               	goto	L1
  3348  000FB0                     l7389:
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;vscp_firmware.c: 907: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3352                           ;vscp_firmware.c: 909: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3353                           ;vscp_firmware.c: 910: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3354                           ;vscp_firmware.c: 911: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3355                           ;vscp_firmware.c: 912: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3356                           ;vscp_firmware.c: 913: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3357                           ;vscp_firmware.c: 914: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3358  000FB0  5170               	movf	_vscp_nickname& (0+255),w,b
  3359  000FB2  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3360  000FB6  62DF               	cpfseq	indf2,c
  3361  000FB8  0012               	return	
  3362                           
  3363                           ; BSR set to: 0
  3364  000FBA  0E00               	movlw	0
  3365  000FBC  EC72  F018         	call	_vscp_getGUID
  3366  000FC0  0100               	movlb	0	; () banked
  3367  000FC2  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3368  000FC4  A4D8               	btfss	status,2,c
  3369  000FC6  0012               	return	
  3370                           
  3371                           ; BSR set to: 0
  3372  000FC8  0E03               	movlw	3
  3373  000FCA  EC72  F018         	call	_vscp_getGUID
  3374  000FCE  0100               	movlb	0	; () banked
  3375  000FD0  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3376  000FD2  A4D8               	btfss	status,2,c
  3377  000FD4  0012               	return	
  3378                           
  3379                           ; BSR set to: 0
  3380  000FD6  0E05               	movlw	5
  3381  000FD8  EC72  F018         	call	_vscp_getGUID
  3382  000FDC  0100               	movlb	0	; () banked
  3383  000FDE  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3384  000FE0  A4D8               	btfss	status,2,c
  3385  000FE2  0012               	return	
  3386                           
  3387                           ; BSR set to: 0
  3388  000FE4  0E07               	movlw	7
  3389  000FE6  EC72  F018         	call	_vscp_getGUID
  3390  000FEA  0100               	movlb	0	; () banked
  3391  000FEC  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3392  000FEE  A4D8               	btfss	status,2,c
  3393  000FF0  0012               	return	
  3394                           
  3395                           ; BSR set to: 0
  3396  000FF2  5053               	movf	_vscp_page_select+1,w,c
  3397  000FF4  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3398  000FF6  A4D8               	btfss	status,2,c
  3399  000FF8  0012               	return	
  3400                           
  3401                           ; BSR set to: 0
  3402  000FFA  5052               	movf	_vscp_page_select,w,c
  3403  000FFC  EE20  F082         	lfsr	2,_vscp_imsg+13
  3404  001000  62DF               	cpfseq	indf2,c
  3405  001002  0012               	return	
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;vscp_firmware.c: 916: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3409  001004  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3410  001006  EFCE  F017         	goto	_vscp_goBootloaderMode
  3411  00100A                     l7405:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;vscp_firmware.c: 925: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3415                           ;vscp_firmware.c: 926: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3416                           ;vscp_firmware.c: 927: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3417                           ;vscp_firmware.c: 928: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3418  00100A  0E00               	movlw	0
  3419  00100C  EC72  F018         	call	_vscp_getGUID
  3420  001010  0100               	movlb	0	; () banked
  3421  001012  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3422  001014  E173               	bnz	l7449
  3423                           
  3424                           ; BSR set to: 0
  3425  001016  0E01               	movlw	1
  3426  001018  EC72  F018         	call	_vscp_getGUID
  3427  00101C  0100               	movlb	0	; () banked
  3428  00101E  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3429  001020  E16D               	bnz	l7449
  3430                           
  3431                           ; BSR set to: 0
  3432  001022  0E02               	movlw	2
  3433  001024  EC72  F018         	call	_vscp_getGUID
  3434  001028  0100               	movlb	0	; () banked
  3435  00102A  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3436  00102C  E167               	bnz	l7449
  3437                           
  3438                           ; BSR set to: 0
  3439  00102E  0E03               	movlw	3
  3440  001030  EC72  F018         	call	_vscp_getGUID
  3441  001034  0100               	movlb	0	; () banked
  3442  001036  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3443  001038  E161               	bnz	l7449
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;vscp_firmware.c: 929: vscp_guid_reset |= 0x10;
  3447  00103A  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  3448  00103C  D05F               	goto	l7449
  3449  00103E                     l7415:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;vscp_firmware.c: 934: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3453                           ;vscp_firmware.c: 935: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3454                           ;vscp_firmware.c: 936: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3455                           ;vscp_firmware.c: 937: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3456  00103E  0E04               	movlw	4
  3457  001040  EC72  F018         	call	_vscp_getGUID
  3458  001044  0100               	movlb	0	; () banked
  3459  001046  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3460  001048  E159               	bnz	l7449
  3461                           
  3462                           ; BSR set to: 0
  3463  00104A  0E05               	movlw	5
  3464  00104C  EC72  F018         	call	_vscp_getGUID
  3465  001050  0100               	movlb	0	; () banked
  3466  001052  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3467  001054  E153               	bnz	l7449
  3468                           
  3469                           ; BSR set to: 0
  3470  001056  0E06               	movlw	6
  3471  001058  EC72  F018         	call	_vscp_getGUID
  3472  00105C  0100               	movlb	0	; () banked
  3473  00105E  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3474  001060  E14D               	bnz	l7449
  3475                           
  3476                           ; BSR set to: 0
  3477  001062  0E07               	movlw	7
  3478  001064  EC72  F018         	call	_vscp_getGUID
  3479  001068  0100               	movlb	0	; () banked
  3480  00106A  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3481  00106C  E147               	bnz	l7449
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;vscp_firmware.c: 938: vscp_guid_reset |= 0x20;
  3485  00106E  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  3486  001070  D045               	goto	l7449
  3487  001072                     l7425:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;vscp_firmware.c: 943: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3491                           ;vscp_firmware.c: 944: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3492                           ;vscp_firmware.c: 945: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3493                           ;vscp_firmware.c: 946: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3494  001072  0E08               	movlw	8
  3495  001074  EC72  F018         	call	_vscp_getGUID
  3496  001078  0100               	movlb	0	; () banked
  3497  00107A  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3498  00107C  E13F               	bnz	l7449
  3499                           
  3500                           ; BSR set to: 0
  3501  00107E  0E09               	movlw	9
  3502  001080  EC72  F018         	call	_vscp_getGUID
  3503  001084  0100               	movlb	0	; () banked
  3504  001086  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3505  001088  E139               	bnz	l7449
  3506                           
  3507                           ; BSR set to: 0
  3508  00108A  0E0A               	movlw	10
  3509  00108C  EC72  F018         	call	_vscp_getGUID
  3510  001090  0100               	movlb	0	; () banked
  3511  001092  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3512  001094  E133               	bnz	l7449
  3513                           
  3514                           ; BSR set to: 0
  3515  001096  0E0B               	movlw	11
  3516  001098  EC72  F018         	call	_vscp_getGUID
  3517  00109C  0100               	movlb	0	; () banked
  3518  00109E  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3519  0010A0  E12D               	bnz	l7449
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;vscp_firmware.c: 947: vscp_guid_reset |= 0x40;
  3523  0010A2  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  3524  0010A4  D02B               	goto	l7449
  3525  0010A6                     l7435:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;vscp_firmware.c: 952: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3529                           ;vscp_firmware.c: 953: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3530                           ;vscp_firmware.c: 954: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3531                           ;vscp_firmware.c: 955: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3532  0010A6  0E0C               	movlw	12
  3533  0010A8  EC72  F018         	call	_vscp_getGUID
  3534  0010AC  0100               	movlb	0	; () banked
  3535  0010AE  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3536  0010B0  E125               	bnz	l7449
  3537                           
  3538                           ; BSR set to: 0
  3539  0010B2  0E0D               	movlw	13
  3540  0010B4  EC72  F018         	call	_vscp_getGUID
  3541  0010B8  0100               	movlb	0	; () banked
  3542  0010BA  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3543  0010BC  E11F               	bnz	l7449
  3544                           
  3545                           ; BSR set to: 0
  3546  0010BE  0E0E               	movlw	14
  3547  0010C0  EC72  F018         	call	_vscp_getGUID
  3548  0010C4  0100               	movlb	0	; () banked
  3549  0010C6  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3550  0010C8  E119               	bnz	l7449
  3551                           
  3552                           ; BSR set to: 0
  3553  0010CA  0E0F               	movlw	15
  3554  0010CC  EC72  F018         	call	_vscp_getGUID
  3555  0010D0  0100               	movlb	0	; () banked
  3556  0010D2  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3557  0010D4  E113               	bnz	l7449
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;vscp_firmware.c: 956: vscp_guid_reset |= 0x80;
  3561  0010D6  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  3562  0010D8  D011               	goto	l7449
  3563  0010DA                     l1013:
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;vscp_firmware.c: 961: vscp_guid_reset = 0;
  3567  0010DA  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  3568                           
  3569                           ;vscp_firmware.c: 962: break;
  3570  0010DC  D00F               	goto	l7449
  3571  0010DE                     l7447:
  3572                           
  3573                           ; BSR set to: 0
  3574  0010DE  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3575  0010E0  0B0F               	andlw	15
  3576  0010E2  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3577  0010E4  6BA6               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3578                           
  3579                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3580                           ; Switch size 1, requested type "speed"
  3581                           ; Number of cases is 1, Range of values is 0 to 0
  3582                           ; switch strategies available:
  3583                           ; Name         Instructions Cycles
  3584                           ; simple_byte            4     3 (average)
  3585                           ;	Chosen strategy is simple_byte
  3586  0010E6  51A6               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3587  0010E8  E1F8               	bnz	l1013
  3588                           
  3589                           ; BSR set to: 0
  3590                           ; Switch size 1, requested type "speed"
  3591                           ; Number of cases is 4, Range of values is 0 to 3
  3592                           ; switch strategies available:
  3593                           ; Name         Instructions Cycles
  3594                           ; simple_byte           13     7 (average)
  3595                           ;	Chosen strategy is simple_byte
  3596  0010EA  51A5               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3597  0010EC  E08E               	bz	l7405
  3598  0010EE  0A01               	xorlw	1	; case 1
  3599  0010F0  E0A6               	bz	l7415
  3600  0010F2  0A03               	xorlw	3	; case 2
  3601  0010F4  E0BE               	bz	l7425
  3602  0010F6  0A01               	xorlw	1	; case 3
  3603  0010F8  E0D6               	bz	l7435
  3604  0010FA  D7EF               	goto	l1013
  3605  0010FC                     l7449:
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;vscp_firmware.c: 965: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3609  0010FC  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3610  0010FE  0BF0               	andlw	240
  3611  001100  0AF0               	xorlw	240
  3612  001102  B4D8               	btfsc	status,2,c
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;vscp_firmware.c: 967: vscp_init();
  3616  001104  EC13  F016         	call	_vscp_init	;wreg free
  3617  001108  0012               	return	
  3618  00110A                     l7453:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;vscp_firmware.c: 973: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3622  00110A  5170               	movf	_vscp_nickname& (0+255),w,b
  3623  00110C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3624  001110  62DF               	cpfseq	indf2,c
  3625  001112  0012               	return	
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;vscp_firmware.c: 975: uint8_t i;
  3629                           ;vscp_firmware.c: 976: uint8_t pos = 0;
  3630  001114  6BB1               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3631                           
  3632                           ;vscp_firmware.c: 977: uint8_t offset = vscp_imsg.data[ 1 ];
  3633  001116  C07C  F0B0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3634                           
  3635                           ;vscp_firmware.c: 978: uint8_t len = vscp_imsg.data[ 2 ];
  3636  00111A  C07D  F0B3         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3637                           
  3638                           ;vscp_firmware.c: 980: for (i = 0; i < len; i++) {
  3639  00111E  6BBF               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3640  001120  D048               	goto	l7485
  3641  001122                     l7457:
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;vscp_firmware.c: 981: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3645  001122  0E07               	movlw	7
  3646  001124  6E08               	movwf	?___lbmod,c
  3647  001126  51BF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3648  001128  EC31  F017         	call	___lbmod
  3649  00112C  0100               	movlb	0	; () banked
  3650  00112E  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3651  001130  51A5               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3652  001132  0F8A               	addlw	low (_vscp_omsg+7)
  3653  001134  6ED9               	movwf	fsr2l,c
  3654  001136  6ADA               	clrf	fsr2h,c
  3655  001138  51B0               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3656  00113A  25BF               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3657  00113C  EC3D  F018         	call	_vscp_readRegister
  3658  001140  6EDF               	movwf	indf2,c
  3659                           
  3660                           ;vscp_firmware.c: 983: if ( (i % 7) == 6 || i == (len - 1) ) {
  3661  001142  0E07               	movlw	7
  3662  001144  6E08               	movwf	?___lbmod,c
  3663  001146  0100               	movlb	0	; () banked
  3664  001148  51BF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3665  00114A  EC31  F017         	call	___lbmod
  3666  00114E  0A06               	xorlw	6
  3667  001150  E00B               	bz	l7463
  3668  001152  0EFF               	movlw	255
  3669  001154  0100               	movlb	0	; () banked
  3670  001156  25B3               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3671  001158  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3672  00115A  6BA6               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3673  00115C  0EFF               	movlw	255
  3674  00115E  23A6               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3675  001160  51BF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3676  001162  19A5               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3677  001164  11A6               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3678  001166  E124               	bnz	l7483
  3679  001168                     l7463:
  3680                           
  3681                           ;vscp_firmware.c: 985: uint8_t bytes;
  3682                           ;vscp_firmware.c: 987: if ( ( i % 7 ) == 6 ) {
  3683  001168  0E07               	movlw	7
  3684  00116A  6E08               	movwf	?___lbmod,c
  3685  00116C  0100               	movlb	0	; () banked
  3686  00116E  51BF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3687  001170  EC31  F017         	call	___lbmod
  3688  001174  0A06               	xorlw	6
  3689  001176  E103               	bnz	l7467
  3690                           
  3691                           ;vscp_firmware.c: 988: bytes = 7;
  3692  001178  0E07               	movlw	7
  3693  00117A  0100               	movlb	0	; () banked
  3694  00117C  D009               	goto	L2
  3695  00117E                     l7467:
  3696                           
  3697                           ;vscp_firmware.c: 990: else {
  3698                           ;vscp_firmware.c: 991: bytes = ( i % 7 ) + 1;
  3699  00117E  0E07               	movlw	7
  3700  001180  6E08               	movwf	?___lbmod,c
  3701  001182  0100               	movlb	0	; () banked
  3702  001184  51BF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3703  001186  EC31  F017         	call	___lbmod
  3704  00118A  0100               	movlb	0	; () banked
  3705  00118C  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3706  00118E  29A5               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3707  001190                     L2:
  3708  001190  6FB2               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;vscp_firmware.c: 992: }
  3712                           ;vscp_firmware.c: 994: vscp_omsg.flags = 0x80 + bytes + 1;
  3713  001192  51B2               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3714  001194  0F81               	addlw	129
  3715  001196  6F83               	movwf	_vscp_omsg& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;vscp_firmware.c: 995: vscp_omsg.priority = 0x07;
  3719  001198  0E07               	movlw	7
  3720  00119A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;vscp_firmware.c: 996: vscp_omsg.vscp_class = 0;
  3724  00119C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3725  00119E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;vscp_firmware.c: 997: vscp_omsg.vscp_type = 26;
  3729  0011A0  0E1A               	movlw	26
  3730  0011A2  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;vscp_firmware.c: 998: vscp_omsg.data[ 0 ] = pos;
  3734  0011A4  C0B1  F089         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+6
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;vscp_firmware.c: 1001: vscp_sendEvent();
  3738  0011A8  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  3739                           
  3740                           ;vscp_firmware.c: 1002: pos++;
  3741  0011AC  0100               	movlb	0	; () banked
  3742  0011AE  2BB1               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3743  0011B0                     l7483:
  3744                           
  3745                           ; BSR set to: 0
  3746  0011B0  2BBF               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3747  0011B2                     l7485:
  3748                           
  3749                           ; BSR set to: 0
  3750  0011B2  51B3               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3751  0011B4  5DBF               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3752  0011B6  B0D8               	btfsc	status,0,c
  3753  0011B8  0012               	return	
  3754  0011BA  D7B3               	goto	l7457
  3755  0011BC                     l7487:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;vscp_firmware.c: 1010: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3759  0011BC  5170               	movf	_vscp_nickname& (0+255),w,b
  3760  0011BE  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3761  0011C2  62DF               	cpfseq	indf2,c
  3762  0011C4  0012               	return	
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;vscp_firmware.c: 1011: uint8_t i;
  3766                           ;vscp_firmware.c: 1012: uint8_t pos = vscp_imsg.data[ 1 ];
  3767  0011C6  C07C  F0B4         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1122
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;vscp_firmware.c: 1013: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  3771  0011CA  5175               	movf	_vscp_imsg& (0+255),w,b
  3772  0011CC  0FFE               	addlw	254
  3773  0011CE  0B07               	andlw	7
  3774  0011D0  6FB5               	movwf	vscp_handleProtocolEvent@len_1123& (0+255),b
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;vscp_firmware.c: 1015: for (i = 0; i < len; i++) {
  3778  0011D2  6BBA               	clrf	vscp_handleProtocolEvent@i_1121& (0+255),b
  3779  0011D4  D016               	goto	l7501
  3780  0011D6                     l7495:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;vscp_firmware.c: 1017: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  3784  0011D6  51BA               	movf	vscp_handleProtocolEvent@i_1121& (0+255),w,b
  3785  0011D8  0F7D               	addlw	low (_vscp_imsg+8)
  3786  0011DA  6ED9               	movwf	fsr2l,c
  3787  0011DC  6ADA               	clrf	fsr2h,c
  3788  0011DE  50DF               	movf	indf2,w,c
  3789  0011E0  6E18               	movwf	?_vscp_writeRegister,c
  3790  0011E2  51B4               	movf	vscp_handleProtocolEvent@pos_1122& (0+255),w,b
  3791  0011E4  25BA               	addwf	vscp_handleProtocolEvent@i_1121& (0+255),w,b
  3792  0011E6  ECB0  F017         	call	_vscp_writeRegister
  3793                           
  3794                           ;vscp_firmware.c: 1018: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  3795  0011EA  0100               	movlb	0	; () banked
  3796  0011EC  51BA               	movf	vscp_handleProtocolEvent@i_1121& (0+255),w,b
  3797  0011EE  0F8A               	addlw	low (_vscp_omsg+7)
  3798  0011F0  6ED9               	movwf	fsr2l,c
  3799  0011F2  6ADA               	clrf	fsr2h,c
  3800  0011F4  51B4               	movf	vscp_handleProtocolEvent@pos_1122& (0+255),w,b
  3801  0011F6  25BA               	addwf	vscp_handleProtocolEvent@i_1121& (0+255),w,b
  3802  0011F8  EC3D  F018         	call	_vscp_readRegister
  3803  0011FC  6EDF               	movwf	indf2,c
  3804  0011FE  0100               	movlb	0	; () banked
  3805  001200  2BBA               	incf	vscp_handleProtocolEvent@i_1121& (0+255),f,b
  3806  001202                     l7501:
  3807                           
  3808                           ; BSR set to: 0
  3809  001202  51B5               	movf	vscp_handleProtocolEvent@len_1123& (0+255),w,b
  3810  001204  5DBA               	subwf	vscp_handleProtocolEvent@i_1121& (0+255),w,b
  3811  001206  E3E7               	bnc	l7495
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;vscp_firmware.c: 1019: }
  3815                           ;vscp_firmware.c: 1021: vscp_omsg.priority = 0x07;
  3816  001208  0E07               	movlw	7
  3817  00120A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;vscp_firmware.c: 1022: vscp_omsg.vscp_class = 0;
  3821  00120C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3822  00120E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3823                           
  3824                           ;vscp_firmware.c: 1023: vscp_omsg.vscp_type = 26;
  3825  001210  0E1A               	movlw	26
  3826  001212  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;vscp_firmware.c: 1024: vscp_omsg.data[ 0 ] = 0;
  3830  001214  6B89               	clrf	(_vscp_omsg+6)& (0+255),b
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;vscp_firmware.c: 1025: vscp_omsg.flags = 0x80 + len + 1;
  3834  001216  51B5               	movf	vscp_handleProtocolEvent@len_1123& (0+255),w,b
  3835  001218  0F81               	addlw	129
  3836  00121A  6F83               	movwf	_vscp_omsg& (0+255),b
  3837  00121C  EFD7  F016         	goto	_vscp_sendEvent
  3838  001220                     l7513:
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;vscp_firmware.c: 1035: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3842  001220  5170               	movf	_vscp_nickname& (0+255),w,b
  3843  001222  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3844  001226  62DF               	cpfseq	indf2,c
  3845  001228  0012               	return	
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;vscp_firmware.c: 1037: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3849                           ;vscp_firmware.c: 1038: vscp_imsg.data[ 1 ],
  3850                           ;vscp_firmware.c: 1039: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  3851  00122A  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3852  00122C  ECB3  F014         	call	_vscp_readAppReg
  3853  001230  0100               	movlb	0	; () banked
  3854  001232  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3855  001234  29A5               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3856  001236  6E15               	movwf	?_vscp_writeAppReg,c
  3857  001238  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3858  00123A  ECAE  F010         	call	_vscp_writeAppReg
  3859  00123E  D68D               	goto	L1
  3860  001240                     l7529:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;vscp_firmware.c: 1055: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3864  001240  5170               	movf	_vscp_nickname& (0+255),w,b
  3865  001242  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3866  001246  62DF               	cpfseq	indf2,c
  3867  001248  0012               	return	
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;vscp_firmware.c: 1057: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3871                           ;vscp_firmware.c: 1058: vscp_imsg.data[ 1 ],
  3872                           ;vscp_firmware.c: 1059: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  3873  00124A  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3874  00124C  ECB3  F014         	call	_vscp_readAppReg
  3875  001250  0100               	movlb	0	; () banked
  3876  001252  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3877  001254  05A5               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  3878  001256  6E15               	movwf	?_vscp_writeAppReg,c
  3879  001258  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3880  00125A  ECAE  F010         	call	_vscp_writeAppReg
  3881  00125E  D67D               	goto	L1
  3882  001260                     l7545:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;vscp_firmware.c: 1075: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  3886                           ;vscp_firmware.c: 1076: (0xff == vscp_imsg.data[ 0 ])) {
  3887  001260  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  3888  001262  1970               	xorwf	_vscp_nickname& (0+255),w,b
  3889  001264  E003               	bz	l1037
  3890                           
  3891                           ; BSR set to: 0
  3892  001266  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  3893  001268  A4D8               	btfss	status,2,c
  3894  00126A  0012               	return	
  3895  00126C                     l1037:
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;vscp_firmware.c: 1078: uint8_t i, j, k = 0;
  3899  00126C  6BB9               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;vscp_firmware.c: 1082: vscp_omsg.priority = 0x03;
  3903  00126E  0E03               	movlw	3
  3904  001270  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3905                           
  3906                           ;vscp_firmware.c: 1083: vscp_omsg.flags = 0x80 + 8;
  3907  001272  0E88               	movlw	136
  3908  001274  6F83               	movwf	_vscp_omsg& (0+255),b
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;vscp_firmware.c: 1084: vscp_omsg.vscp_class = 0;
  3912  001276  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3913  001278  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3914                           
  3915                           ;vscp_firmware.c: 1085: vscp_omsg.vscp_type = 32;
  3916  00127A  0E20               	movlw	32
  3917  00127C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;vscp_firmware.c: 1087: for (i = 0; i < 3; i++)
  3921  00127E  6BBE               	clrf	vscp_handleProtocolEvent@i_1124& (0+255),b
  3922  001280                     l1038:
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;vscp_firmware.c: 1088: {
  3926                           ;vscp_firmware.c: 1089: vscp_omsg.data[0] = i;
  3927  001280  C0BE  F089         	movff	vscp_handleProtocolEvent@i_1124,_vscp_omsg+6
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;vscp_firmware.c: 1091: for (j = 1; j < 8; j++) {
  3931  001284  0E01               	movlw	1
  3932  001286  6FC0               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  3933  001288                     l7565:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;vscp_firmware.c: 1092: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  3937  001288  51C0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3938  00128A  0F89               	addlw	low (_vscp_omsg+6)
  3939  00128C  6ED9               	movwf	fsr2l,c
  3940  00128E  6ADA               	clrf	fsr2h,c
  3941  001290  51B9               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3942  001292  080F               	sublw	15
  3943  001294  EC72  F018         	call	_vscp_getGUID
  3944  001298  6EDF               	movwf	indf2,c
  3945  00129A  0100               	movlb	0	; () banked
  3946  00129C  2BB9               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;vscp_firmware.c: 1093: if (k > 16)
  3950  00129E  0E10               	movlw	16
  3951  0012A0  65B9               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3952  0012A2  D001               	goto	l7573
  3953  0012A4  D004               	goto	l7577
  3954  0012A6                     l7573:
  3955                           
  3956                           ; BSR set to: 0
  3957  0012A6  2BC0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3958                           
  3959                           ; BSR set to: 0
  3960  0012A8  0E07               	movlw	7
  3961  0012AA  65C0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3962  0012AC  D7ED               	goto	l7565
  3963  0012AE                     l7577:
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;vscp_firmware.c: 1095: }
  3967                           ;vscp_firmware.c: 1097: if (k > 16)
  3968  0012AE  0E10               	movlw	16
  3969  0012B0  65B9               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3970  0012B2  D001               	goto	l7581
  3971  0012B4  D007               	goto	l1039
  3972  0012B6                     l7581:
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;vscp_firmware.c: 1100: vscp_sendEvent();
  3976  0012B6  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  3977  0012BA  0100               	movlb	0	; () banked
  3978  0012BC  2BBE               	incf	vscp_handleProtocolEvent@i_1124& (0+255),f,b
  3979                           
  3980                           ; BSR set to: 0
  3981  0012BE  0E02               	movlw	2
  3982  0012C0  65BE               	cpfsgt	vscp_handleProtocolEvent@i_1124& (0+255),b
  3983  0012C2  D7DE               	goto	l1038
  3984  0012C4                     l1039:
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;vscp_firmware.c: 1101: }
  3988                           ;vscp_firmware.c: 1103: for (j = 0; j < 5; j++)
  3989  0012C4  6BC0               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  3990  0012C6                     l7591:
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;vscp_firmware.c: 1104: {
  3994                           ;vscp_firmware.c: 1105: if (vscp_getMDF_URL(j) > 0)
  3995  0012C6  51C0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3996  0012C8  EC09  F018         	call	_vscp_getMDF_URL
  3997  0012CC  0900               	iorlw	0
  3998  0012CE  E008               	bz	l7595
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;vscp_firmware.c: 1106: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  4002  0012D0  51C0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4003  0012D2  0F8C               	addlw	low (_vscp_omsg+9)
  4004  0012D4  6ED9               	movwf	fsr2l,c
  4005  0012D6  6ADA               	clrf	fsr2h,c
  4006  0012D8  51C0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4007  0012DA  EC09  F018         	call	_vscp_getMDF_URL
  4008  0012DE  D005               	goto	L3
  4009  0012E0                     l7595:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;vscp_firmware.c: 1107: else
  4013                           ;vscp_firmware.c: 1108: vscp_omsg.data[3 + j] = 0;
  4014  0012E0  51C0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4015  0012E2  0F8C               	addlw	low (_vscp_omsg+9)
  4016  0012E4  6ED9               	movwf	fsr2l,c
  4017  0012E6  6ADA               	clrf	fsr2h,c
  4018  0012E8  0E00               	movlw	0
  4019  0012EA                     L3:
  4020  0012EA  6EDF               	movwf	indf2,c
  4021                           
  4022                           ; BSR set to: 0
  4023  0012EC  2BC0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4024                           
  4025                           ; BSR set to: 0
  4026  0012EE  0E04               	movlw	4
  4027  0012F0  65C0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4028  0012F2  D7E9               	goto	l7591
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;vscp_firmware.c: 1109: }
  4032                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  4033  0012F4  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  4034                           
  4035                           ;vscp_firmware.c: 1113: k = 5;
  4036  0012F8  0E05               	movlw	5
  4037  0012FA  0100               	movlb	0	; () banked
  4038  0012FC  6FB9               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;vscp_firmware.c: 1114: for (i = 3; i < 7; i++)
  4042  0012FE  0E03               	movlw	3
  4043  001300  6FBE               	movwf	vscp_handleProtocolEvent@i_1124& (0+255),b
  4044  001302                     l1048:
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;vscp_firmware.c: 1115: {
  4048                           ;vscp_firmware.c: 1116: vscp_omsg.data[0] = i;
  4049  001302  C0BE  F089         	movff	vscp_handleProtocolEvent@i_1124,_vscp_omsg+6
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;vscp_firmware.c: 1118: for (j = 1; j < 8; j++) {
  4053  001306  0E01               	movlw	1
  4054  001308  6FC0               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4055  00130A                     l7617:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;vscp_firmware.c: 1119: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  4059  00130A  51C0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4060  00130C  0F89               	addlw	low (_vscp_omsg+6)
  4061  00130E  6ED9               	movwf	fsr2l,c
  4062  001310  6ADA               	clrf	fsr2h,c
  4063  001312  51B9               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4064  001314  EC09  F018         	call	_vscp_getMDF_URL
  4065  001318  6EDF               	movwf	indf2,c
  4066                           
  4067                           ; BSR set to: 0
  4068  00131A  2BB9               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4069                           
  4070                           ; BSR set to: 0
  4071  00131C  2BC0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4072                           
  4073                           ; BSR set to: 0
  4074  00131E  0E07               	movlw	7
  4075  001320  65C0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4076  001322  D7F3               	goto	l7617
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;vscp_firmware.c: 1120: }
  4080                           ;vscp_firmware.c: 1121: vscp_sendEvent();
  4081  001324  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  4082  001328  0100               	movlb	0	; () banked
  4083  00132A  2BBE               	incf	vscp_handleProtocolEvent@i_1124& (0+255),f,b
  4084                           
  4085                           ; BSR set to: 0
  4086  00132C  0E06               	movlw	6
  4087  00132E  65BE               	cpfsgt	vscp_handleProtocolEvent@i_1124& (0+255),b
  4088  001330  D7E8               	goto	l1048
  4089  001332  0C06               	retlw	6
  4090  001334                     l7631:
  4091                           
  4092                           ; BSR set to: 0
  4093                           ;vscp_firmware.c: 1130: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4094  001334  5170               	movf	_vscp_nickname& (0+255),w,b
  4095  001336  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4096  00133A  62DF               	cpfseq	indf2,c
  4097  00133C  0012               	return	
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;vscp_firmware.c: 1132: vscp_omsg.priority = 0x03;
  4101  00133E  0E03               	movlw	3
  4102  001340  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4103                           
  4104                           ;vscp_firmware.c: 1133: vscp_omsg.flags = 0x80 + 7;
  4105  001342  0E87               	movlw	135
  4106  001344  6F83               	movwf	_vscp_omsg& (0+255),b
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;vscp_firmware.c: 1134: vscp_omsg.vscp_class = 0;
  4110  001346  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4111  001348  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4112                           
  4113                           ;vscp_firmware.c: 1135: vscp_omsg.vscp_type = 34;
  4114  00134A  0E22               	movlw	34
  4115  00134C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;vscp_firmware.c: 1137: vscp_getMatrixInfo((char *) vscp_omsg.data);
  4119  00134E  0E89               	movlw	(_vscp_omsg+6)& (0+255)
  4120  001350  EC48  F018         	call	_vscp_getMatrixInfo
  4121  001354  EFD7  F016         	goto	_vscp_sendEvent
  4122  001358                     l7641:
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;vscp_firmware.c: 1153: if ( vscp_nickname == vscp_imsg.data[0] ) {
  4126  001358  5170               	movf	_vscp_nickname& (0+255),w,b
  4127  00135A  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4128  00135E  62DF               	cpfseq	indf2,c
  4129  001360  0012               	return	
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;vscp_firmware.c: 1156: uint8_t byte = 0;
  4133  001362  6BBB               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;vscp_firmware.c: 1157: uint8_t bytes_this_time, cb;
  4137                           ;vscp_firmware.c: 1161: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  4138  001364  C075  F0A5         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  4139  001368  0E0F               	movlw	15
  4140  00136A  17A5               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4141  00136C  0E04               	movlw	4
  4142  00136E  5DA5               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4143  001370  E312               	bnc	l7657
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;vscp_firmware.c: 1164: bytes = (uint16_t)vscp_imsg.data[4];
  4147  001372  C07F  F0BC         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1128
  4148  001376  6BBD               	clrf	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),b
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;vscp_firmware.c: 1166: if (bytes == 0) bytes = 256;
  4152  001378  51BD               	movf	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),w,b
  4153  00137A  11BC               	iorwf	vscp_handleProtocolEvent@bytes_1128& (0+255),w,b
  4154  00137C  E103               	bnz	l7653
  4155                           
  4156                           ; BSR set to: 0
  4157  00137E  0E01               	movlw	1
  4158  001380  6FBD               	movwf	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),b
  4159  001382  6BBC               	clrf	vscp_handleProtocolEvent@bytes_1128& (0+255),b
  4160  001384                     l7653:
  4161                           
  4162                           ; BSR set to: 0
  4163                           ;vscp_firmware.c: 1168: if (bytes > 256) bytes = 256;
  4164  001384  0E01               	movlw	1
  4165  001386  5DBC               	subwf	vscp_handleProtocolEvent@bytes_1128& (0+255),w,b
  4166  001388  0E01               	movlw	1
  4167  00138A  59BD               	subwfb	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),w,b
  4168  00138C  E307               	bnc	l7659
  4169                           
  4170                           ; BSR set to: 0
  4171  00138E  0E01               	movlw	1
  4172  001390  6FBD               	movwf	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),b
  4173  001392  0E00               	movlw	0
  4174  001394  D002               	goto	L4
  4175  001396                     l7657:
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;vscp_firmware.c: 1170: else {
  4179                           ;vscp_firmware.c: 1171: bytes = 1;
  4180  001396  6BBD               	clrf	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),b
  4181  001398  0E01               	movlw	1
  4182  00139A                     L4:
  4183  00139A  6FBC               	movwf	vscp_handleProtocolEvent@bytes_1128& (0+255),b
  4184  00139C                     l7659:
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;vscp_firmware.c: 1172: }
  4188                           ;vscp_firmware.c: 1175: page_save = vscp_page_select;
  4189  00139C  C052  F0AC         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4190  0013A0  C053  F0AD         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;vscp_firmware.c: 1180: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4194  0013A4  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4195  0013A6  C07C  F0A5         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4196  0013AA  6BA6               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4197  0013AC  C0A5  F0A6         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4198  0013B0  6BA5               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4199  0013B2  11A5               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4200  0013B4  6E52               	movwf	_vscp_page_select,c
  4201  0013B6  51A6               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4202  0013B8  6E53               	movwf	_vscp_page_select+1,c
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;vscp_firmware.c: 1183: vscp_omsg.priority = 0x07;
  4206  0013BA  0E07               	movlw	7
  4207  0013BC  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;vscp_firmware.c: 1184: vscp_omsg.vscp_class = 0;
  4211  0013BE  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4212  0013C0  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;vscp_firmware.c: 1185: vscp_omsg.vscp_type = 39;
  4216  0013C2  0E27               	movlw	39
  4217  0013C4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;vscp_firmware.c: 1186: vscp_omsg.data[0] = 0;
  4221  0013C6  6B89               	clrf	(_vscp_omsg+6)& (0+255),b
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;vscp_firmware.c: 1187: vscp_omsg.data[1] = vscp_imsg.data[1];
  4225  0013C8  C07C  F08A         	movff	_vscp_imsg+7,_vscp_omsg+7
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;vscp_firmware.c: 1188: vscp_omsg.data[2] = vscp_imsg.data[2];
  4229  0013CC  C07D  F08B         	movff	_vscp_imsg+8,_vscp_omsg+8
  4230  0013D0                     l7675:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;vscp_firmware.c: 1192: if ( ( bytes - byte ) >= 4 ) {
  4234  0013D0  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4235  0013D2  5DBC               	subwf	vscp_handleProtocolEvent@bytes_1128& (0+255),w,b
  4236  0013D4  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4237  0013D6  0E00               	movlw	0
  4238  0013D8  59BD               	subwfb	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),w,b
  4239  0013DA  6FA6               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4240  0013DC  0E04               	movlw	4
  4241  0013DE  5DA5               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4242  0013E0  0E00               	movlw	0
  4243  0013E2  59A6               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4244  0013E4  E302               	bnc	l7679
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;vscp_firmware.c: 1193: bytes_this_time = 4;
  4248  0013E6  0E04               	movlw	4
  4249  0013E8  D002               	goto	L5
  4250  0013EA                     l7679:
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;vscp_firmware.c: 1195: else {
  4254                           ;vscp_firmware.c: 1196: bytes_this_time = (bytes - byte);
  4255  0013EA  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4256  0013EC  5DBC               	subwf	vscp_handleProtocolEvent@bytes_1128& (0+255),w,b
  4257  0013EE                     L5:
  4258  0013EE  6FB6               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;vscp_firmware.c: 1197: }
  4262                           ;vscp_firmware.c: 1200: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4263  0013F0  51B6               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4264  0013F2  0F84               	addlw	132
  4265  0013F4  6F83               	movwf	_vscp_omsg& (0+255),b
  4266                           
  4267                           ;vscp_firmware.c: 1201: vscp_omsg.data[3] =
  4268                           ;vscp_firmware.c: 1202: vscp_imsg.data[3] + byte;
  4269  0013F6  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4270  0013F8  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4271  0013FA  6F8C               	movwf	(_vscp_omsg+9)& (0+255),b
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;vscp_firmware.c: 1205: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4275  0013FC  6BB7               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4276  0013FE  D00C               	goto	l7687
  4277  001400                     l7683:
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;vscp_firmware.c: 1206: vscp_omsg.data[ (4 + cb) ] =
  4281                           ;vscp_firmware.c: 1207: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4282  001400  51B7               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4283  001402  0F8D               	addlw	low (_vscp_omsg+10)
  4284  001404  6ED9               	movwf	fsr2l,c
  4285  001406  6ADA               	clrf	fsr2h,c
  4286  001408  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4287  00140A  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4288  00140C  25B7               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4289  00140E  EC3D  F018         	call	_vscp_readRegister
  4290  001412  6EDF               	movwf	indf2,c
  4291  001414  0100               	movlb	0	; () banked
  4292  001416  2BB7               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4293  001418                     l7687:
  4294                           
  4295                           ; BSR set to: 0
  4296  001418  51B6               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4297  00141A  5DB7               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4298  00141C  E3F1               	bnc	l7683
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;vscp_firmware.c: 1208: }
  4302                           ;vscp_firmware.c: 1211: vscp_sendEvent();
  4303  00141E  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  4304                           
  4305                           ;vscp_firmware.c: 1214: byte += bytes_this_time;
  4306  001422  0100               	movlb	0	; () banked
  4307  001424  51B6               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4308  001426  27BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;vscp_firmware.c: 1217: vscp_omsg.data[0] += 1;
  4312  001428  2B89               	incf	(_vscp_omsg+6)& (0+255),f,b
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;vscp_firmware.c: 1219: } while (byte < bytes);
  4316  00142A  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4317  00142C  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4318  00142E  6BA6               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4319  001430  51BC               	movf	vscp_handleProtocolEvent@bytes_1128& (0+255),w,b
  4320  001432  5DA5               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4321  001434  51BD               	movf	(vscp_handleProtocolEvent@bytes_1128+1)& (0+255),w,b
  4322  001436  59A6               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4323  001438  E3CB               	bnc	l7675
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;vscp_firmware.c: 1222: vscp_page_select = page_save;
  4327  00143A  C0AC  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4328  00143E  C0AD  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4329  001442  0012               	return	
  4330  001444                     l7697:
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;vscp_firmware.c: 1229: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4334  001444  5170               	movf	_vscp_nickname& (0+255),w,b
  4335  001446  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4336  00144A  62DF               	cpfseq	indf2,c
  4337  00144C  0012               	return	
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;vscp_firmware.c: 1231: uint8_t i;
  4341                           ;vscp_firmware.c: 1232: uint16_t page_save;
  4342                           ;vscp_firmware.c: 1235: page_save = vscp_page_select;
  4343  00144E  C052  F0AE         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1133
  4344  001452  C053  F0AF         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1133+1
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;vscp_firmware.c: 1239: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4348  001456  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4349  001458  C07C  F0A5         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4350  00145C  6BA6               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4351  00145E  C0A5  F0A6         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4352  001462  6BA5               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4353  001464  11A5               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4354  001466  6E52               	movwf	_vscp_page_select,c
  4355  001468  51A6               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4356  00146A  6E53               	movwf	_vscp_page_select+1,c
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;vscp_firmware.c: 1241: for (i = vscp_imsg.data[ 3 ];
  4360  00146C  C07E  F0B8         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1132
  4361                           
  4362                           ;vscp_firmware.c: 1244: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4363                           ;vscp_firmware.c: 1245: i++) {
  4364  001470  D012               	goto	l7709
  4365  001472                     l7705:
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;vscp_firmware.c: 1246: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4369                           ;vscp_firmware.c: 1247: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4370  001472  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4371  001474  088D               	sublw	low (_vscp_omsg+10)
  4372  001476  25B8               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4373  001478  6ED9               	movwf	fsr2l,c
  4374  00147A  6ADA               	clrf	fsr2h,c
  4375  00147C  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4376  00147E  087F               	sublw	low (_vscp_imsg+10)
  4377  001480  25B8               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4378  001482  6EE1               	movwf	fsr1l,c
  4379  001484  6AE2               	clrf	fsr1h,c
  4380  001486  50E7               	movf	indf1,w,c
  4381  001488  6E18               	movwf	?_vscp_writeRegister,c
  4382  00148A  51B8               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4383  00148C  ECB0  F017         	call	_vscp_writeRegister
  4384  001490  6EDF               	movwf	indf2,c
  4385  001492  0100               	movlb	0	; () banked
  4386  001494  2BB8               	incf	vscp_handleProtocolEvent@i_1132& (0+255),f,b
  4387  001496                     l7709:
  4388                           
  4389                           ; BSR set to: 0
  4390  001496  5175               	movf	_vscp_imsg& (0+255),w,b
  4391  001498  0B0F               	andlw	15
  4392  00149A  6FA5               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4393  00149C  6BA6               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4394  00149E  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4395  0014A0  27A5               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4396  0014A2  0E00               	movlw	0
  4397  0014A4  23A6               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4398  0014A6  0EFC               	movlw	252
  4399  0014A8  25A5               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4400  0014AA  6FA7               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4401  0014AC  0EFF               	movlw	255
  4402  0014AE  21A6               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4403  0014B0  6FA8               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4404  0014B2  51B8               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4405  0014B4  6FA9               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4406  0014B6  6BAA               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4407  0014B8  51AA               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4408  0014BA  0A80               	xorlw	128
  4409  0014BC  6FAB               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4410  0014BE  51A7               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4411  0014C0  5DA9               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4412  0014C2  51A8               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4413  0014C4  0A80               	xorlw	128
  4414  0014C6  59AB               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4415  0014C8  E3D4               	bnc	l7705
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;vscp_firmware.c: 1248: }
  4419                           ;vscp_firmware.c: 1251: vscp_page_select = page_save;
  4420  0014CA  C0AE  F052         	movff	vscp_handleProtocolEvent@page_save_1133,_vscp_page_select
  4421  0014CE  C0AF  F053         	movff	vscp_handleProtocolEvent@page_save_1133+1,_vscp_page_select+1
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;vscp_firmware.c: 1253: vscp_omsg.priority = 0x07;
  4425  0014D2  0E07               	movlw	7
  4426  0014D4  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;vscp_firmware.c: 1254: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4430  0014D6  5175               	movf	_vscp_imsg& (0+255),w,b
  4431  0014D8  0B0F               	andlw	15
  4432  0014DA  0F80               	addlw	128
  4433  0014DC  6F83               	movwf	_vscp_omsg& (0+255),b
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;vscp_firmware.c: 1255: vscp_omsg.vscp_class = 0;
  4437  0014DE  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4438  0014E0  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;vscp_firmware.c: 1256: vscp_omsg.vscp_type = 39;
  4442  0014E2  0E27               	movlw	39
  4443  0014E4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;vscp_firmware.c: 1257: vscp_omsg.data[0] = 0;
  4447  0014E6  6B89               	clrf	(_vscp_omsg+6)& (0+255),b
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;vscp_firmware.c: 1258: vscp_omsg.data[1] = vscp_imsg.data[1];
  4451  0014E8  C07C  F08A         	movff	_vscp_imsg+7,_vscp_omsg+7
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;vscp_firmware.c: 1259: vscp_omsg.data[2] = vscp_imsg.data[2];
  4455  0014EC  C07D  F08B         	movff	_vscp_imsg+8,_vscp_omsg+8
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;vscp_firmware.c: 1260: vscp_omsg.data[3] = vscp_imsg.data[3];
  4459  0014F0  C07E  F08C         	movff	_vscp_imsg+9,_vscp_omsg+9
  4460  0014F4  EFD7  F016         	goto	_vscp_sendEvent
  4461  0014F8                     l7731:
  4462                           
  4463                           ; BSR set to: 0
  4464  0014F8  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  4465                           
  4466                           ; Switch size 1, requested type "speed"
  4467                           ; Number of cases is 16, Range of values is 1 to 38
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte           49    25 (average)
  4471                           ;	Chosen strategy is simple_byte
  4472  0014FA  0A01               	xorlw	1	; case 1
  4473  0014FC  E101 D516          	bz	l7313
  4474  001500  0A03               	xorlw	3	; case 2
  4475  001502  E101 D514          	bz	l7315
  4476  001506  0A04               	xorlw	4	; case 6
  4477  001508  E101 D513          	bz	l7317
  4478  00150C  0A0E               	xorlw	14	; case 8
  4479  00150E  E101 D512          	bz	l7319
  4480  001512  0A01               	xorlw	1	; case 9
  4481  001514  E101 D511          	bz	l7321
  4482  001518  0A02               	xorlw	2	; case 11
  4483  00151A  E101 D530          	bz	l7355
  4484  00151E  0A07               	xorlw	7	; case 12
  4485  001520  E101 D546          	bz	l7389
  4486  001524  0A1B               	xorlw	27	; case 23
  4487  001526  E101 D5DA          	bz	l7447
  4488  00152A  0A0F               	xorlw	15	; case 24
  4489  00152C  E101 D5ED          	bz	l7453
  4490  001530  0A01               	xorlw	1	; case 25
  4491  001532  E101 D643          	bz	l7487
  4492  001536  0A04               	xorlw	4	; case 29
  4493  001538  E101 D672          	bz	l7513
  4494  00153C  0A03               	xorlw	3	; case 30
  4495  00153E  E101 D67F          	bz	l7529
  4496  001542  0A01               	xorlw	1	; case 31
  4497  001544  E101 D68C          	bz	l7545
  4498  001548  0A3E               	xorlw	62	; case 33
  4499  00154A  E101 D6F3          	bz	l7631
  4500  00154E  0A04               	xorlw	4	; case 37
  4501  001550  E101 D702          	bz	l7641
  4502  001554  0A03               	xorlw	3	; case 38
  4503  001556  A4D8               	btfss	status,2,c
  4504  001558  0012               	return	
  4505  00155A  D774               	goto	l7697
  4506  00155C                     __end_of_vscp_handleProtocolEvent:
  4507                           	opt stack 0
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           indf1	equ	0xFE7
  4513                           fsr1h	equ	0xFE2
  4514                           fsr1l	equ	0xFE1
  4515                           indf2	equ	0xFDF
  4516                           postinc2	equ	0xFDE
  4517                           postdec2	equ	0xFDD
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function ___lbmod *****************
  4523 ;; Defined at:
  4524 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  dividend        1    wreg     unsigned char 
  4527 ;;  divisor         1    7[COMRAM] unsigned char 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  dividend        1    8[COMRAM] unsigned char 
  4530 ;;  rem             1   10[COMRAM] unsigned char 
  4531 ;;  counter         1    9[COMRAM] unsigned char 
  4532 ;; Return value:  Size  Location     Type
  4533 ;;                  1    wreg      unsigned char 
  4534 ;; Registers used:
  4535 ;;		wreg, status,2, status,0
  4536 ;; Tracked objects:
  4537 ;;		On entry : F/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4541 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4542 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4544 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4545 ;;Total ram usage:        4 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    2
  4548 ;; This function calls:
  4549 ;;		Nothing
  4550 ;; This function is called by:
  4551 ;;		_vscp_handleProtocolEvent
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text15
  4556  002E62                     __ptext15:
  4557                           	opt stack 0
  4558  002E62                     ___lbmod:
  4559                           	opt stack 27
  4560                           
  4561                           ;incstack = 0
  4562                           ;incstack = 0
  4563                           ;___lbmod@dividend stored from wreg
  4564  002E62  CFE8 F009          	movff	wreg,___lbmod@dividend
  4565                           
  4566                           ; BSR set to: 0
  4567  002E66  0E08               	movlw	8
  4568  002E68  6E0A               	movwf	___lbmod@counter,c
  4569                           
  4570                           ; BSR set to: 0
  4571  002E6A  6A0B               	clrf	___lbmod@rem,c
  4572  002E6C                     l5767:
  4573  002E6C  90D8               	bcf	status,0,c
  4574  002E6E  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4575  002E70  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4576  002E72  6E0B               	movwf	___lbmod@rem,c
  4577  002E74  90D8               	bcf	status,0,c
  4578  002E76  3609               	rlcf	___lbmod@dividend,f,c
  4579  002E78  5008               	movf	___lbmod@divisor,w,c
  4580  002E7A  5C0B               	subwf	___lbmod@rem,w,c
  4581  002E7C  E302               	bnc	l5775
  4582  002E7E  5008               	movf	___lbmod@divisor,w,c
  4583  002E80  5E0B               	subwf	___lbmod@rem,f,c
  4584  002E82                     l5775:
  4585  002E82  2E0A               	decfsz	___lbmod@counter,f,c
  4586  002E84  D7F3               	goto	l5767
  4587  002E86  500B               	movf	___lbmod@rem,w,c
  4588  002E88  0012               	return	
  4589  002E8A                     __end_of___lbmod:
  4590                           	opt stack 0
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           indf1	equ	0xFE7
  4596                           fsr1h	equ	0xFE2
  4597                           fsr1l	equ	0xFE1
  4598                           indf2	equ	0xFDF
  4599                           postinc2	equ	0xFDE
  4600                           postdec2	equ	0xFDD
  4601                           fsr2h	equ	0xFDA
  4602                           fsr2l	equ	0xFD9
  4603                           status	equ	0xFD8
  4604                           
  4605 ;; *************** function _vscp_writeRegister *****************
  4606 ;; Defined at:
  4607 ;;		line 695 in file "../../vscp_firmware/common/vscp_firmware.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  reg             1    wreg     unsigned char 
  4610 ;;  value           1   23[COMRAM] unsigned char 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  reg             1   24[COMRAM] unsigned char 
  4613 ;; Return value:  Size  Location     Type
  4614 ;;                  1    wreg      unsigned char 
  4615 ;; Registers used:
  4616 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4617 ;; Tracked objects:
  4618 ;;		On entry : F/0
  4619 ;;		On exit  : 0/0
  4620 ;;		Unchanged: 0/0
  4621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4622 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4625 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4626 ;;Total ram usage:        2 bytes
  4627 ;; Hardware stack levels used:    1
  4628 ;; Hardware stack levels required when called:    6
  4629 ;; This function calls:
  4630 ;;		_vscp_writeAppReg
  4631 ;;		_vscp_writeStdReg
  4632 ;; This function is called by:
  4633 ;;		_vscp_handleProtocolEvent
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text16
  4638  002F60                     __ptext16:
  4639                           	opt stack 0
  4640  002F60                     _vscp_writeRegister:
  4641                           	opt stack 23
  4642                           
  4643                           ;incstack = 0
  4644                           ;incstack = 0
  4645                           ;vscp_writeRegister@reg stored from wreg
  4646  002F60  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;vscp_firmware.c: 696: if (reg >= 0x80) {
  4650  002F64  0E7F               	movlw	127
  4651  002F66  6419               	cpfsgt	vscp_writeRegister@reg,c
  4652  002F68  D005               	goto	l7127
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;vscp_firmware.c: 697: return vscp_writeStdReg(reg, value);
  4656  002F6A  C018  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4657  002F6E  5019               	movf	vscp_writeRegister@reg,w,c
  4658  002F70  EFD4  F011         	goto	_vscp_writeStdReg
  4659  002F74                     l7127:
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;vscp_firmware.c: 699: else {
  4663                           ;vscp_firmware.c: 700: return vscp_writeAppReg(reg, value);
  4664  002F74  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4665  002F78  5019               	movf	vscp_writeRegister@reg,w,c
  4666  002F7A  EFAE  F010         	goto	_vscp_writeAppReg
  4667  002F7E                     __end_of_vscp_writeRegister:
  4668                           	opt stack 0
  4669                           prodh	equ	0xFF4
  4670                           prodl	equ	0xFF3
  4671                           postinc0	equ	0xFEE
  4672                           wreg	equ	0xFE8
  4673                           indf1	equ	0xFE7
  4674                           fsr1h	equ	0xFE2
  4675                           fsr1l	equ	0xFE1
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           postdec2	equ	0xFDD
  4679                           fsr2h	equ	0xFDA
  4680                           fsr2l	equ	0xFD9
  4681                           status	equ	0xFD8
  4682                           
  4683 ;; *************** function _vscp_writeStdReg *****************
  4684 ;; Defined at:
  4685 ;;		line 709 in file "../../vscp_firmware/common/vscp_firmware.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  reg             1    wreg     unsigned char 
  4688 ;;  value           1   15[COMRAM] unsigned char 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;  reg             1   21[COMRAM] unsigned char 
  4691 ;;  rv              1   20[COMRAM] unsigned char 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      unsigned char 
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : F/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4701 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4702 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4703 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4704 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4705 ;;Total ram usage:        7 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    5
  4708 ;; This function calls:
  4709 ;;		_vscp_setGUID
  4710 ;;		_vscp_setManufacturerId
  4711 ;;		_vscp_getGUID
  4712 ;;		_vscp_getUserID
  4713 ;;		_vscp_setUserID
  4714 ;;		_vscp_getManufacturerId
  4715 ;;		_vscp_restoreDefaults
  4716 ;; This function is called by:
  4717 ;;		_vscp_writeRegister
  4718 ;;		_vscp_handleProtocolEvent
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           	psect	text17
  4723  0023A8                     __ptext17:
  4724                           	opt stack 0
  4725  0023A8                     _vscp_writeStdReg:
  4726                           	opt stack 24
  4727                           
  4728                           ;incstack = 0
  4729                           ;incstack = 0
  4730                           ;vscp_writeStdReg@reg stored from wreg
  4731  0023A8  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;vscp_firmware.c: 710: uint8_t rv = ~value;
  4735  0023AC  1C10               	comf	vscp_writeStdReg@value,w,c
  4736  0023AE  6E15               	movwf	vscp_writeStdReg@rv,c
  4737                           
  4738                           ;vscp_firmware.c: 712: if ( reg == 0x83 ) {
  4739  0023B0  5016               	movf	vscp_writeStdReg@reg,w,c
  4740  0023B2  0A83               	xorlw	131
  4741  0023B4  E102               	bnz	l7135
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;vscp_firmware.c: 713: rv = vscp_errorcnt = 0;
  4745  0023B6  6A55               	clrf	_vscp_errorcnt,c
  4746  0023B8  D07C               	goto	l979
  4747  0023BA                     l7135:
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;vscp_firmware.c: 715: else if ((reg >= (0x84)) &&
  4751                           ;vscp_firmware.c: 716: (reg < 0x89)) {
  4752  0023BA  0E83               	movlw	131
  4753  0023BC  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4754  0023BE  D00E               	goto	l7141
  4755                           
  4756                           ; BSR set to: 0
  4757  0023C0  0E89               	movlw	137
  4758  0023C2  6016               	cpfslt	vscp_writeStdReg@reg,c
  4759  0023C4  D00B               	goto	l7141
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;vscp_firmware.c: 719: vscp_setUserID((reg - 0x84), value);
  4763  0023C6  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  4764  0023CA  5016               	movf	vscp_writeStdReg@reg,w,c
  4765  0023CC  0F7C               	addlw	124
  4766  0023CE  ECFB  F017         	call	_vscp_setUserID
  4767                           
  4768                           ;vscp_firmware.c: 720: rv = vscp_getUserID((reg - 0x84));
  4769  0023D2  5016               	movf	vscp_writeStdReg@reg,w,c
  4770  0023D4  0F7C               	addlw	124
  4771  0023D6  EC68  F018         	call	_vscp_getUserID
  4772  0023DA  D069               	goto	L11
  4773  0023DC                     l7141:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;vscp_firmware.c: 723: else if (0x92 == reg) {
  4777  0023DC  5016               	movf	vscp_writeStdReg@reg,w,c
  4778  0023DE  0A92               	xorlw	146
  4779  0023E0  E10D               	bnz	l7147
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;vscp_firmware.c: 726: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  4783  0023E2  5010               	movf	vscp_writeStdReg@value,w,c
  4784  0023E4  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4785  0023E6  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  4786  0023E8  5052               	movf	_vscp_page_select,w,c
  4787  0023EA  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  4788  0023EC  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  4789  0023EE  1011               	iorwf	??_vscp_writeStdReg,w,c
  4790  0023F0  6E52               	movwf	_vscp_page_select,c
  4791  0023F2  5012               	movf	??_vscp_writeStdReg+1,w,c
  4792  0023F4  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  4793  0023F6  6E53               	movwf	_vscp_page_select+1,c
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;vscp_firmware.c: 727: rv = (vscp_page_select >> 8) & 0xff;
  4797  0023F8  5053               	movf	_vscp_page_select+1,w,c
  4798  0023FA  D059               	goto	L11
  4799  0023FC                     l7147:
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;vscp_firmware.c: 729: else if (0x93 == reg) {
  4803  0023FC  5016               	movf	vscp_writeStdReg@reg,w,c
  4804  0023FE  0A93               	xorlw	147
  4805  002400  E10B               	bnz	l7153
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;vscp_firmware.c: 732: vscp_page_select = (vscp_page_select & 0xff00) | value;
  4809  002402  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  4810  002404  5053               	movf	_vscp_page_select+1,w,c
  4811  002406  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4812  002408  5010               	movf	vscp_writeStdReg@value,w,c
  4813  00240A  1011               	iorwf	??_vscp_writeStdReg,w,c
  4814  00240C  6E52               	movwf	_vscp_page_select,c
  4815  00240E  5012               	movf	??_vscp_writeStdReg+1,w,c
  4816  002410  6E53               	movwf	_vscp_page_select+1,c
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;vscp_firmware.c: 733: rv = (vscp_page_select & 0xff);
  4820  002412  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  4821                           
  4822                           ;vscp_firmware.c: 734: }
  4823  002416  D04E               	goto	l7195
  4824  002418                     l7153:
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;vscp_firmware.c: 739: else if ((reg > 0x88) && (reg < 0x91)) {
  4828  002418  0E88               	movlw	136
  4829  00241A  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4830  00241C  D019               	goto	l7165
  4831                           
  4832                           ; BSR set to: 0
  4833  00241E  0E91               	movlw	145
  4834  002420  6016               	cpfslt	vscp_writeStdReg@reg,c
  4835  002422  D016               	goto	l7165
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;vscp_firmware.c: 741: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4839                           ;vscp_firmware.c: 742: (0xff != (vscp_page_select & 0xff))) {
  4840  002424  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4841  002428  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4842  00242C  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4843  00242E  2812               	incf	??_vscp_writeStdReg+1,w,c
  4844  002430  E102               	bnz	l7161
  4845                           
  4846                           ; BSR set to: 0
  4847  002432  2852               	incf	_vscp_page_select,w,c
  4848  002434  E002               	bz	l7163
  4849  002436                     l7161:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;vscp_firmware.c: 744: rv = ~value;
  4853  002436  1C10               	comf	vscp_writeStdReg@value,w,c
  4854  002438  D03A               	goto	L11
  4855  00243A                     l7163:
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;vscp_firmware.c: 746: else {
  4859                           ;vscp_firmware.c: 748: vscp_setManufacturerId(reg - 0x89, value);
  4860  00243A  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  4861  00243E  5016               	movf	vscp_writeStdReg@reg,w,c
  4862  002440  0F77               	addlw	119
  4863  002442  EC6B  F017         	call	_vscp_setManufacturerId
  4864                           
  4865                           ;vscp_firmware.c: 749: rv = vscp_getManufacturerId(reg - 0x89);
  4866  002446  5016               	movf	vscp_writeStdReg@reg,w,c
  4867  002448  0F77               	addlw	119
  4868  00244A  EC5E  F018         	call	_vscp_getManufacturerId
  4869  00244E  D02F               	goto	L11
  4870  002450                     l7165:
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;vscp_firmware.c: 752: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  4874  002450  0ECF               	movlw	207
  4875  002452  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4876  002454  D017               	goto	l7177
  4877                           
  4878                           ; BSR set to: 0
  4879  002456  0EE0               	movlw	224
  4880  002458  6016               	cpfslt	vscp_writeStdReg@reg,c
  4881  00245A  D014               	goto	l7177
  4882                           
  4883                           ; BSR set to: 0
  4884                           ;vscp_firmware.c: 754: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4885                           ;vscp_firmware.c: 755: (0xff != (vscp_page_select & 0xff))) {
  4886  00245C  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4887  002460  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4888  002464  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4889  002466  2812               	incf	??_vscp_writeStdReg+1,w,c
  4890  002468  E1E6               	bnz	l7161
  4891                           
  4892                           ; BSR set to: 0
  4893  00246A  2852               	incf	_vscp_page_select,w,c
  4894  00246C  E1E4               	bnz	l7161
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;vscp_firmware.c: 759: else {
  4898                           ;vscp_firmware.c: 760: vscp_setGUID(reg - 0xD0, value);
  4899  00246E  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  4900  002472  5016               	movf	vscp_writeStdReg@reg,w,c
  4901  002474  0F30               	addlw	48
  4902  002476  EC7D  F017         	call	_vscp_setGUID
  4903                           
  4904                           ;vscp_firmware.c: 761: rv = vscp_getGUID(reg - 0xD0);
  4905  00247A  5016               	movf	vscp_writeStdReg@reg,w,c
  4906  00247C  0F30               	addlw	48
  4907  00247E  EC72  F018         	call	_vscp_getGUID
  4908  002482  D015               	goto	L11
  4909  002484                     l7177:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;vscp_firmware.c: 765: else if ( 0xA2 == reg ) {
  4913  002484  5016               	movf	vscp_writeStdReg@reg,w,c
  4914  002486  0AA2               	xorlw	162
  4915  002488  E1D6               	bnz	l7161
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;vscp_firmware.c: 766: if ( 0x55 == value ) {
  4919  00248A  5010               	movf	vscp_writeStdReg@value,w,c
  4920  00248C  0A55               	xorlw	85
  4921  00248E  E104               	bnz	l7185
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;vscp_firmware.c: 767: vscp_configtimer = 0;
  4925  002490  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  4926  002492  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;vscp_firmware.c: 768: rv = 0x55;
  4930  002494  0E55               	movlw	85
  4931  002496  D00B               	goto	L11
  4932  002498                     l7185:
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;vscp_firmware.c: 770: else if ( 0xaa == value ) {
  4936  002498  5010               	movf	vscp_writeStdReg@value,w,c
  4937  00249A  0AAA               	xorlw	170
  4938  00249C  E10B               	bnz	l7195
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;vscp_firmware.c: 771: if ( vscp_configtimer < 1000 ) {
  4942  00249E  0EE8               	movlw	232
  4943  0024A0  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  4944  0024A2  0E03               	movlw	3
  4945  0024A4  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  4946  0024A6  E205               	bc	l979
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;vscp_firmware.c: 772: vscp_restoreDefaults();
  4950  0024A8  ECB0  F018         	call	_vscp_restoreDefaults	;wreg free
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;vscp_firmware.c: 773: rv = 0xaa;
  4954  0024AC  0EAA               	movlw	170
  4955  0024AE                     L11:
  4956  0024AE  6E15               	movwf	vscp_writeStdReg@rv,c
  4957                           
  4958                           ;vscp_firmware.c: 774: }
  4959  0024B0  D001               	goto	l7195
  4960  0024B2                     l979:
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;vscp_firmware.c: 775: else {
  4964                           ;vscp_firmware.c: 776: rv = 0;
  4965  0024B2  6A15               	clrf	vscp_writeStdReg@rv,c
  4966  0024B4                     l7195:
  4967                           
  4968                           ;vscp_firmware.c: 784: }
  4969                           ;vscp_firmware.c: 786: return rv;
  4970  0024B4  5015               	movf	vscp_writeStdReg@rv,w,c
  4971  0024B6  0012               	return	
  4972  0024B8                     __end_of_vscp_writeStdReg:
  4973                           	opt stack 0
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           fsr1h	equ	0xFE2
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function _vscp_restoreDefaults *****************
  4989 ;; Defined at:
  4990 ;;		line 1430 in file "../main.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : F/0
  5001 ;;		On exit  : F/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5008 ;;Total ram usage:        0 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    4
  5011 ;; This function calls:
  5012 ;;		_init_app_eeprom
  5013 ;;		_init_app_ram
  5014 ;; This function is called by:
  5015 ;;		_vscp_writeStdReg
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text18
  5020  003160                     __ptext18:
  5021                           	opt stack 0
  5022  003160                     _vscp_restoreDefaults:
  5023                           	opt stack 24
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;main.c: 1431: init_app_eeprom();
  5027                           
  5028                           ;incstack = 0
  5029                           ;incstack = 0
  5030  003160  EC98  F013         	call	_init_app_eeprom	;wreg free
  5031                           
  5032                           ;main.c: 1432: init_app_ram();
  5033  003164  EF7C  F018         	goto	_init_app_ram	;wreg free
  5034  003168                     __end_of_vscp_restoreDefaults:
  5035                           	opt stack 0
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           indf1	equ	0xFE7
  5041                           fsr1h	equ	0xFE2
  5042                           fsr1l	equ	0xFE1
  5043                           indf2	equ	0xFDF
  5044                           postinc2	equ	0xFDE
  5045                           postdec2	equ	0xFDD
  5046                           fsr2h	equ	0xFDA
  5047                           fsr2l	equ	0xFD9
  5048                           status	equ	0xFD8
  5049                           
  5050 ;; *************** function _vscp_setUserID *****************
  5051 ;; Defined at:
  5052 ;;		line 1253 in file "../main.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  idx             1    wreg     unsigned char 
  5055 ;;  data            1   11[COMRAM] unsigned char 
  5056 ;; Auto vars:     Size  Location     Type
  5057 ;;  idx             1   12[COMRAM] unsigned char 
  5058 ;; Return value:  Size  Location     Type
  5059 ;;		None               void
  5060 ;; Registers used:
  5061 ;;		wreg, status,2, status,0, cstack
  5062 ;; Tracked objects:
  5063 ;;		On entry : F/0
  5064 ;;		On exit  : 0/0
  5065 ;;		Unchanged: 0/0
  5066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5067 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5071 ;;Total ram usage:        2 bytes
  5072 ;; Hardware stack levels used:    1
  5073 ;; Hardware stack levels required when called:    3
  5074 ;; This function calls:
  5075 ;;		_Busy_eep
  5076 ;;		_Write_b_eep
  5077 ;; This function is called by:
  5078 ;;		_vscp_writeStdReg
  5079 ;; This function uses a non-reentrant model
  5080 ;;
  5081                           
  5082                           	psect	text19
  5083  002FF6                     __ptext19:
  5084                           	opt stack 0
  5085  002FF6                     _vscp_setUserID:
  5086                           	opt stack 25
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;incstack = 0
  5090                           ;incstack = 0
  5091                           ;vscp_setUserID@idx stored from wreg
  5092  002FF6  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;main.c: 1254: (Busy_eep(), Write_b_eep(idx + 0x05,data));
  5096  002FFA  ECB4  F018         	call	_Busy_eep	;wreg free
  5097  002FFE  0E05               	movlw	5
  5098  003000  240D               	addwf	vscp_setUserID@idx,w,c
  5099  003002  6E08               	movwf	?_Write_b_eep,c
  5100  003004  6A09               	clrf	?_Write_b_eep+1,c
  5101  003006  0E00               	movlw	0
  5102  003008  2209               	addwfc	?_Write_b_eep+1,f,c
  5103  00300A  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  5104  00300E  EF57  F016         	goto	_Write_b_eep	;wreg free
  5105  003012                     __end_of_vscp_setUserID:
  5106                           	opt stack 0
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           postinc0	equ	0xFEE
  5110                           wreg	equ	0xFE8
  5111                           indf1	equ	0xFE7
  5112                           fsr1h	equ	0xFE2
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _vscp_setManufacturerId *****************
  5122 ;; Defined at:
  5123 ;;		line 498 in file "../main.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  idx             1    wreg     unsigned char 
  5126 ;;  data            1   11[COMRAM] unsigned char 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  idx             1   12[COMRAM] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;		None               void
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : F/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5138 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5142 ;;Total ram usage:        2 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    3
  5145 ;; This function calls:
  5146 ;;		_Busy_eep
  5147 ;;		_Write_b_eep
  5148 ;; This function is called by:
  5149 ;;		_vscp_writeStdReg
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text20
  5154  002ED6                     __ptext20:
  5155                           	opt stack 0
  5156  002ED6                     _vscp_setManufacturerId:
  5157                           	opt stack 25
  5158                           
  5159                           ;incstack = 0
  5160                           ;incstack = 0
  5161                           ;vscp_setManufacturerId@idx stored from wreg
  5162  002ED6  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;main.c: 499: if ( idx>7 ) return;
  5166  002EDA  0E07               	movlw	7
  5167  002EDC  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  5168  002EDE  D001               	goto	l4847
  5169  002EE0  0C07               	retlw	7
  5170  002EE2                     l4847:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;main.c: 500: (Busy_eep(), Write_b_eep(0x0A + idx,data));
  5174  002EE2  ECB4  F018         	call	_Busy_eep	;wreg free
  5175  002EE6  0E0A               	movlw	10
  5176  002EE8  240D               	addwf	vscp_setManufacturerId@idx,w,c
  5177  002EEA  6E08               	movwf	?_Write_b_eep,c
  5178  002EEC  6A09               	clrf	?_Write_b_eep+1,c
  5179  002EEE  0E00               	movlw	0
  5180  002EF0  2209               	addwfc	?_Write_b_eep+1,f,c
  5181  002EF2  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  5182  002EF6  EF57  F016         	goto	_Write_b_eep	;wreg free
  5183  002EFA                     __end_of_vscp_setManufacturerId:
  5184                           	opt stack 0
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           postinc0	equ	0xFEE
  5188                           wreg	equ	0xFE8
  5189                           indf1	equ	0xFE7
  5190                           fsr1h	equ	0xFE2
  5191                           fsr1l	equ	0xFE1
  5192                           indf2	equ	0xFDF
  5193                           postinc2	equ	0xFDE
  5194                           postdec2	equ	0xFDD
  5195                           fsr2h	equ	0xFDA
  5196                           fsr2l	equ	0xFD9
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _vscp_setGUID *****************
  5200 ;; Defined at:
  5201 ;;		line 486 in file "../main.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  idx             1    wreg     unsigned char 
  5204 ;;  data            1   11[COMRAM] unsigned char 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  idx             1   12[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : F/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5216 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5219 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5220 ;;Total ram usage:        2 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    3
  5223 ;; This function calls:
  5224 ;;		_Busy_eep
  5225 ;;		_Write_b_eep
  5226 ;; This function is called by:
  5227 ;;		_vscp_writeStdReg
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	text21
  5232  002EFA                     __ptext21:
  5233                           	opt stack 0
  5234  002EFA                     _vscp_setGUID:
  5235                           	opt stack 25
  5236                           
  5237                           ;incstack = 0
  5238                           ;incstack = 0
  5239                           ;vscp_setGUID@idx stored from wreg
  5240  002EFA  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;main.c: 487: if ( idx>15 ) return;
  5244  002EFE  0E0F               	movlw	15
  5245  002F00  640D               	cpfsgt	vscp_setGUID@idx,c
  5246  002F02  D001               	goto	l4839
  5247  002F04  0C0F               	retlw	15
  5248  002F06                     l4839:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;main.c: 488: (Busy_eep(), Write_b_eep(0x12 + idx,data));
  5252  002F06  ECB4  F018         	call	_Busy_eep	;wreg free
  5253  002F0A  0E12               	movlw	18
  5254  002F0C  240D               	addwf	vscp_setGUID@idx,w,c
  5255  002F0E  6E08               	movwf	?_Write_b_eep,c
  5256  002F10  6A09               	clrf	?_Write_b_eep+1,c
  5257  002F12  0E00               	movlw	0
  5258  002F14  2209               	addwfc	?_Write_b_eep+1,f,c
  5259  002F16  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  5260  002F1A  EF57  F016         	goto	_Write_b_eep	;wreg free
  5261  002F1E                     __end_of_vscp_setGUID:
  5262                           	opt stack 0
  5263                           prodh	equ	0xFF4
  5264                           prodl	equ	0xFF3
  5265                           postinc0	equ	0xFEE
  5266                           wreg	equ	0xFE8
  5267                           indf1	equ	0xFE7
  5268                           fsr1h	equ	0xFE2
  5269                           fsr1l	equ	0xFE1
  5270                           indf2	equ	0xFDF
  5271                           postinc2	equ	0xFDE
  5272                           postdec2	equ	0xFDD
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _vscp_writeAppReg *****************
  5278 ;; Defined at:
  5279 ;;		line 632 in file "../main.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  reg             1    wreg     unsigned char 
  5282 ;;  val             1   20[COMRAM] unsigned char 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  reg             1   22[COMRAM] unsigned char 
  5285 ;;  rv              1   21[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  1    wreg      unsigned char 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : F/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5295 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5298 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5299 ;;Total ram usage:        3 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:    4
  5302 ;; This function calls:
  5303 ;;		_Read_b_eep
  5304 ;;		_writeControlReg
  5305 ;;		_Busy_eep
  5306 ;;		_Write_b_eep
  5307 ;; This function is called by:
  5308 ;;		_vscp_writeRegister
  5309 ;;		_vscp_handleProtocolEvent
  5310 ;; This function uses a non-reentrant model
  5311 ;;
  5312                           
  5313                           	psect	text22
  5314  00215C                     __ptext22:
  5315                           	opt stack 0
  5316  00215C                     _vscp_writeAppReg:
  5317                           	opt stack 24
  5318                           
  5319                           ;incstack = 0
  5320                           ;incstack = 0
  5321                           ;vscp_writeAppReg@reg stored from wreg
  5322  00215C  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;main.c: 633: uint8_t rv;
  5326                           ;main.c: 635: rv = ~val;
  5327  002160  1C15               	comf	vscp_writeAppReg@val,w,c
  5328  002162  6E16               	movwf	vscp_writeAppReg@rv,c
  5329                           
  5330                           ;main.c: 638: if ( 0 == vscp_page_select ) {
  5331  002164  5053               	movf	_vscp_page_select+1,w,c
  5332  002166  1052               	iorwf	_vscp_page_select,w,c
  5333  002168  E176               	bnz	l6727
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;main.c: 641: if ( reg == 0 ) {
  5337  00216A  6617               	tstfsz	vscp_writeAppReg@reg,c
  5338  00216C  D00F               	goto	l6683
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;main.c: 642: (Busy_eep(), Write_b_eep(0x22 + 0,val));
  5342  00216E  ECB4  F018         	call	_Busy_eep	;wreg free
  5343  002172  6A09               	clrf	?_Write_b_eep+1,c
  5344  002174  0E22               	movlw	34
  5345  002176  6E08               	movwf	?_Write_b_eep,c
  5346  002178  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5347  00217C  EC57  F016         	call	_Write_b_eep	;wreg free
  5348                           
  5349                           ;main.c: 643: rv = Read_b_eep(0x22 + 0);
  5350  002180  6A09               	clrf	?_Read_b_eep+1,c
  5351  002182  0E22               	movlw	34
  5352  002184  6E08               	movwf	?_Read_b_eep,c
  5353  002186  EC25  F018         	call	_Read_b_eep	;wreg free
  5354  00218A  D07F               	goto	L12
  5355  00218C                     l6683:
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;main.c: 645: else if ( reg == 1 ) {
  5359  00218C  0417               	decf	vscp_writeAppReg@reg,w,c
  5360  00218E  E10F               	bnz	l6691
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;main.c: 647: (Busy_eep(), Write_b_eep(0x22 + 1,val));
  5364  002190  ECB4  F018         	call	_Busy_eep	;wreg free
  5365  002194  6A09               	clrf	?_Write_b_eep+1,c
  5366  002196  0E23               	movlw	35
  5367  002198  6E08               	movwf	?_Write_b_eep,c
  5368  00219A  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5369  00219E  EC57  F016         	call	_Write_b_eep	;wreg free
  5370                           
  5371                           ;main.c: 648: rv = Read_b_eep(0x22 + 1);
  5372  0021A2  6A09               	clrf	?_Read_b_eep+1,c
  5373  0021A4  0E23               	movlw	35
  5374  0021A6  6E08               	movwf	?_Read_b_eep,c
  5375  0021A8  EC25  F018         	call	_Read_b_eep	;wreg free
  5376  0021AC  D06E               	goto	L12
  5377  0021AE                     l6691:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;main.c: 651: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5381  0021AE  0E04               	movlw	4
  5382  0021B0  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5383  0021B2  D018               	goto	l6701
  5384                           
  5385                           ; BSR set to: 0
  5386  0021B4  0E17               	movlw	23
  5387  0021B6  6017               	cpfslt	vscp_writeAppReg@reg,c
  5388  0021B8  D015               	goto	l6701
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;main.c: 652: (Busy_eep(), Write_b_eep(0x22 + 5 + ( reg - 5 ),val));
  5392  0021BA  ECB4  F018         	call	_Busy_eep	;wreg free
  5393  0021BE  0E22               	movlw	34
  5394  0021C0  2417               	addwf	vscp_writeAppReg@reg,w,c
  5395  0021C2  6E08               	movwf	?_Write_b_eep,c
  5396  0021C4  6A09               	clrf	?_Write_b_eep+1,c
  5397  0021C6  0E00               	movlw	0
  5398  0021C8  2209               	addwfc	?_Write_b_eep+1,f,c
  5399  0021CA  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5400  0021CE  EC57  F016         	call	_Write_b_eep	;wreg free
  5401                           
  5402                           ;main.c: 654: rv = Read_b_eep(0x22 + 5 + ( reg - 5 ));
  5403  0021D2  0E22               	movlw	34
  5404  0021D4  2417               	addwf	vscp_writeAppReg@reg,w,c
  5405  0021D6  6E08               	movwf	?_Read_b_eep,c
  5406  0021D8  6A09               	clrf	?_Read_b_eep+1,c
  5407  0021DA  0E00               	movlw	0
  5408  0021DC  2209               	addwfc	?_Read_b_eep+1,f,c
  5409  0021DE  EC25  F018         	call	_Read_b_eep	;wreg free
  5410  0021E2  D053               	goto	L12
  5411  0021E4                     l6701:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;main.c: 658: else if ( reg == 2 ) {
  5415  0021E4  5017               	movf	vscp_writeAppReg@reg,w,c
  5416  0021E6  0A02               	xorlw	2
  5417  0021E8  E10F               	bnz	l6709
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;main.c: 659: (Busy_eep(), Write_b_eep(0x22 + 2,val));
  5421  0021EA  ECB4  F018         	call	_Busy_eep	;wreg free
  5422  0021EE  6A09               	clrf	?_Write_b_eep+1,c
  5423  0021F0  0E24               	movlw	36
  5424  0021F2  6E08               	movwf	?_Write_b_eep,c
  5425  0021F4  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5426  0021F8  EC57  F016         	call	_Write_b_eep	;wreg free
  5427                           
  5428                           ;main.c: 660: rv = writeControlReg( 0, val );
  5429  0021FC  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5430  002200  0E00               	movlw	0
  5431  002202  ECDC  F00D         	call	_writeControlReg
  5432  002206  D041               	goto	L12
  5433  002208                     l6709:
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;main.c: 663: else if ( reg == 3 ) {
  5437  002208  5017               	movf	vscp_writeAppReg@reg,w,c
  5438  00220A  0A03               	xorlw	3
  5439  00220C  E10F               	bnz	l6717
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;main.c: 664: (Busy_eep(), Write_b_eep(0x22 + 3,val));
  5443  00220E  ECB4  F018         	call	_Busy_eep	;wreg free
  5444  002212  6A09               	clrf	?_Write_b_eep+1,c
  5445  002214  0E25               	movlw	37
  5446  002216  6E08               	movwf	?_Write_b_eep,c
  5447  002218  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5448  00221C  EC57  F016         	call	_Write_b_eep	;wreg free
  5449                           
  5450                           ;main.c: 665: rv = writeControlReg( 1, val );
  5451  002220  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5452  002224  0E01               	movlw	1
  5453  002226  ECDC  F00D         	call	_writeControlReg
  5454  00222A  D02F               	goto	L12
  5455  00222C                     l6717:
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;main.c: 668: else if ( reg == 4 ) {
  5459  00222C  5017               	movf	vscp_writeAppReg@reg,w,c
  5460  00222E  0A04               	xorlw	4
  5461  002230  E12D               	bnz	l6737
  5462                           
  5463                           ; BSR set to: 0
  5464                           ;main.c: 669: (Busy_eep(), Write_b_eep(0x22 + 4,val));
  5465  002232  ECB4  F018         	call	_Busy_eep	;wreg free
  5466  002236  6A09               	clrf	?_Write_b_eep+1,c
  5467  002238  0E26               	movlw	38
  5468  00223A  6E08               	movwf	?_Write_b_eep,c
  5469  00223C  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5470  002240  EC57  F016         	call	_Write_b_eep	;wreg free
  5471                           
  5472                           ;main.c: 670: rv = writeControlReg( 2, val );
  5473  002244  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5474  002248  0E02               	movlw	2
  5475  00224A  ECDC  F00D         	call	_writeControlReg
  5476  00224E  6E16               	movwf	vscp_writeAppReg@rv,c
  5477                           
  5478                           ;main.c: 671: rv &= 0x03;
  5479  002250  0E03               	movlw	3
  5480  002252  1616               	andwf	vscp_writeAppReg@rv,f,c
  5481  002254  D01B               	goto	l6737
  5482  002256                     l6727:
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;main.c: 676: else if ( 1 == vscp_page_select ) {
  5486  002256  0452               	decf	_vscp_page_select,w,c
  5487  002258  1053               	iorwf	_vscp_page_select+1,w,c
  5488  00225A  E118               	bnz	l6737
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;main.c: 679: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5492                           ;main.c: 680: ( 8 * 8 ) ) ) ) {
  5493  00225C  0E41               	movlw	65
  5494  00225E  6017               	cpfslt	vscp_writeAppReg@reg,c
  5495  002260  D015               	goto	l6737
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;main.c: 681: (Busy_eep(), Write_b_eep(0x22 + 23 + ( reg - 0 ),val));
  5499  002262  ECB4  F018         	call	_Busy_eep	;wreg free
  5500  002266  0E39               	movlw	57
  5501  002268  2417               	addwf	vscp_writeAppReg@reg,w,c
  5502  00226A  6E08               	movwf	?_Write_b_eep,c
  5503  00226C  6A09               	clrf	?_Write_b_eep+1,c
  5504  00226E  0E00               	movlw	0
  5505  002270  2209               	addwfc	?_Write_b_eep+1,f,c
  5506  002272  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5507  002276  EC57  F016         	call	_Write_b_eep	;wreg free
  5508                           
  5509                           ;main.c: 683: rv = Read_b_eep(0x22 + 23 + ( reg - 0 ));
  5510  00227A  0E39               	movlw	57
  5511  00227C  2417               	addwf	vscp_writeAppReg@reg,w,c
  5512  00227E  6E08               	movwf	?_Read_b_eep,c
  5513  002280  6A09               	clrf	?_Read_b_eep+1,c
  5514  002282  0E00               	movlw	0
  5515  002284  2209               	addwfc	?_Read_b_eep+1,f,c
  5516  002286  EC25  F018         	call	_Read_b_eep	;wreg free
  5517  00228A                     L12:
  5518  00228A  6E16               	movwf	vscp_writeAppReg@rv,c
  5519  00228C                     l6737:
  5520                           
  5521                           ;main.c: 685: }
  5522                           ;main.c: 687: }
  5523                           ;main.c: 689: return rv;
  5524  00228C  5016               	movf	vscp_writeAppReg@rv,w,c
  5525  00228E  0012               	return	
  5526  002290                     __end_of_vscp_writeAppReg:
  5527                           	opt stack 0
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           postinc0	equ	0xFEE
  5531                           wreg	equ	0xFE8
  5532                           indf1	equ	0xFE7
  5533                           fsr1h	equ	0xFE2
  5534                           fsr1l	equ	0xFE1
  5535                           indf2	equ	0xFDF
  5536                           postinc2	equ	0xFDE
  5537                           postdec2	equ	0xFDD
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function _writeControlReg *****************
  5543 ;; Defined at:
  5544 ;;		line 697 in file "../main.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  ctrlreg         1    wreg     unsigned char 
  5547 ;;  val             1   16[COMRAM] unsigned char 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  5550 ;;  rv              1   19[COMRAM] unsigned char 
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      unsigned char 
  5553 ;; Registers used:
  5554 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5560 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5562 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5563 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5564 ;;Total ram usage:        4 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    3
  5567 ;; This function calls:
  5568 ;;		_readControlReg
  5569 ;; This function is called by:
  5570 ;;		_main
  5571 ;;		_vscp_writeAppReg
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text23
  5576  001BB8                     __ptext23:
  5577                           	opt stack 0
  5578  001BB8                     _writeControlReg:
  5579                           	opt stack 24
  5580                           
  5581                           ;incstack = 0
  5582                           ;incstack = 0
  5583                           ;writeControlReg@ctrlreg stored from wreg
  5584  001BB8  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  5585                           
  5586                           ;main.c: 698: uint8_t rv = 0;
  5587  001BBC  6A14               	clrf	writeControlReg@rv,c
  5588                           
  5589                           ;main.c: 700: switch ( ctrlreg ) {
  5590  001BBE  D0B9               	goto	l4073
  5591  001BC0                     l4059:
  5592  001BC0  0E01               	movlw	1
  5593                           
  5594                           ;main.c: 703: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  5595  001BC2  A011               	btfss	writeControlReg@val,0,c
  5596  001BC4  0E00               	movlw	0
  5597  001BC6  6E12               	movwf	??_writeControlReg& (0+255),c
  5598  001BC8  3212               	rrcf	??_writeControlReg,f,c
  5599  001BCA  3212               	rrcf	??_writeControlReg,f,c
  5600  001BCC  5082               	movf	3970,w,c	;volatile
  5601  001BCE  1812               	xorwf	??_writeControlReg,w,c
  5602  001BD0  0B7F               	andlw	-129
  5603  001BD2  1812               	xorwf	??_writeControlReg,w,c
  5604  001BD4  6E82               	movwf	3970,c	;volatile
  5605  001BD6  0E01               	movlw	1
  5606                           
  5607                           ;main.c: 704: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  5608  001BD8  A211               	btfss	writeControlReg@val,1,c
  5609  001BDA  0E00               	movlw	0
  5610  001BDC  6E12               	movwf	??_writeControlReg& (0+255),c
  5611  001BDE  3A12               	swapf	??_writeControlReg,f,c
  5612  001BE0  4612               	rlncf	??_writeControlReg,f,c
  5613  001BE2  4612               	rlncf	??_writeControlReg,f,c
  5614  001BE4  5082               	movf	3970,w,c	;volatile
  5615  001BE6  1812               	xorwf	??_writeControlReg,w,c
  5616  001BE8  0BBF               	andlw	-65
  5617  001BEA  1812               	xorwf	??_writeControlReg,w,c
  5618  001BEC  6E82               	movwf	3970,c	;volatile
  5619  001BEE  0E01               	movlw	1
  5620                           
  5621                           ;main.c: 705: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  5622  001BF0  A411               	btfss	writeControlReg@val,2,c
  5623  001BF2  0E00               	movlw	0
  5624  001BF4  6E12               	movwf	??_writeControlReg& (0+255),c
  5625  001BF6  4612               	rlncf	??_writeControlReg,f,c
  5626  001BF8  4612               	rlncf	??_writeControlReg,f,c
  5627  001BFA  4612               	rlncf	??_writeControlReg,f,c
  5628  001BFC  5082               	movf	3970,w,c	;volatile
  5629  001BFE  1812               	xorwf	??_writeControlReg,w,c
  5630  001C00  0BF7               	andlw	-9
  5631  001C02  1812               	xorwf	??_writeControlReg,w,c
  5632  001C04  6E82               	movwf	3970,c	;volatile
  5633  001C06  0E01               	movlw	1
  5634                           
  5635                           ;main.c: 706: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  5636  001C08  A611               	btfss	writeControlReg@val,3,c
  5637  001C0A  0E00               	movlw	0
  5638  001C0C  6E12               	movwf	??_writeControlReg& (0+255),c
  5639  001C0E  3A12               	swapf	??_writeControlReg,f,c
  5640  001C10  5082               	movf	3970,w,c	;volatile
  5641  001C12  1812               	xorwf	??_writeControlReg,w,c
  5642  001C14  0BEF               	andlw	-17
  5643  001C16  1812               	xorwf	??_writeControlReg,w,c
  5644  001C18  6E82               	movwf	3970,c	;volatile
  5645  001C1A  0E01               	movlw	1
  5646                           
  5647                           ;main.c: 707: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  5648  001C1C  A811               	btfss	writeControlReg@val,4,c
  5649  001C1E  0E00               	movlw	0
  5650  001C20  6E12               	movwf	??_writeControlReg& (0+255),c
  5651  001C22  3A12               	swapf	??_writeControlReg,f,c
  5652  001C24  4612               	rlncf	??_writeControlReg,f,c
  5653  001C26  5082               	movf	3970,w,c	;volatile
  5654  001C28  1812               	xorwf	??_writeControlReg,w,c
  5655  001C2A  0BDF               	andlw	-33
  5656  001C2C  1812               	xorwf	??_writeControlReg,w,c
  5657  001C2E  6E82               	movwf	3970,c	;volatile
  5658  001C30  0E01               	movlw	1
  5659                           
  5660                           ;main.c: 708: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  5661  001C32  AA11               	btfss	writeControlReg@val,5,c
  5662  001C34  0E00               	movlw	0
  5663  001C36  6E12               	movwf	??_writeControlReg& (0+255),c
  5664  001C38  5080               	movf	3968,w,c	;volatile
  5665  001C3A  1812               	xorwf	??_writeControlReg,w,c
  5666  001C3C  0BFE               	andlw	-2
  5667  001C3E  1812               	xorwf	??_writeControlReg,w,c
  5668  001C40  6E80               	movwf	3968,c	;volatile
  5669  001C42  0E01               	movlw	1
  5670                           
  5671                           ;main.c: 709: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  5672  001C44  AC11               	btfss	writeControlReg@val,6,c
  5673  001C46  0E00               	movlw	0
  5674  001C48  6E12               	movwf	??_writeControlReg& (0+255),c
  5675  001C4A  4612               	rlncf	??_writeControlReg,f,c
  5676  001C4C  5080               	movf	3968,w,c	;volatile
  5677  001C4E  1812               	xorwf	??_writeControlReg,w,c
  5678  001C50  0BFD               	andlw	-3
  5679  001C52  1812               	xorwf	??_writeControlReg,w,c
  5680  001C54  6E80               	movwf	3968,c	;volatile
  5681  001C56  0E01               	movlw	1
  5682                           
  5683                           ;main.c: 710: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  5684  001C58  AE11               	btfss	writeControlReg@val,7,c
  5685  001C5A  0E00               	movlw	0
  5686  001C5C  6E12               	movwf	??_writeControlReg& (0+255),c
  5687  001C5E  4612               	rlncf	??_writeControlReg,f,c
  5688  001C60  4612               	rlncf	??_writeControlReg,f,c
  5689  001C62  5080               	movf	3968,w,c	;volatile
  5690  001C64  1812               	xorwf	??_writeControlReg,w,c
  5691  001C66  0BFB               	andlw	-5
  5692  001C68  1812               	xorwf	??_writeControlReg,w,c
  5693  001C6A  6E80               	movwf	3968,c	;volatile
  5694                           
  5695                           ;main.c: 711: rv = readControlReg( 0 );
  5696  001C6C  0E00               	movlw	0
  5697  001C6E  EC5C  F012         	call	_readControlReg
  5698  001C72  D05D               	goto	L14
  5699  001C74                     l4063:
  5700  001C74  0E01               	movlw	1
  5701                           
  5702                           ;main.c: 715: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  5703  001C76  A011               	btfss	writeControlReg@val,0,c
  5704  001C78  0E00               	movlw	0
  5705  001C7A  6E12               	movwf	??_writeControlReg& (0+255),c
  5706  001C7C  4612               	rlncf	??_writeControlReg,f,c
  5707  001C7E  4612               	rlncf	??_writeControlReg,f,c
  5708  001C80  4612               	rlncf	??_writeControlReg,f,c
  5709  001C82  5080               	movf	3968,w,c	;volatile
  5710  001C84  1812               	xorwf	??_writeControlReg,w,c
  5711  001C86  0BF7               	andlw	-9
  5712  001C88  1812               	xorwf	??_writeControlReg,w,c
  5713  001C8A  6E80               	movwf	3968,c	;volatile
  5714  001C8C  0E01               	movlw	1
  5715                           
  5716                           ;main.c: 716: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  5717  001C8E  A211               	btfss	writeControlReg@val,1,c
  5718  001C90  0E00               	movlw	0
  5719  001C92  6E12               	movwf	??_writeControlReg& (0+255),c
  5720  001C94  3A12               	swapf	??_writeControlReg,f,c
  5721  001C96  4612               	rlncf	??_writeControlReg,f,c
  5722  001C98  5080               	movf	3968,w,c	;volatile
  5723  001C9A  1812               	xorwf	??_writeControlReg,w,c
  5724  001C9C  0BDF               	andlw	-33
  5725  001C9E  1812               	xorwf	??_writeControlReg,w,c
  5726  001CA0  6E80               	movwf	3968,c	;volatile
  5727  001CA2  0E01               	movlw	1
  5728                           
  5729                           ;main.c: 719: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  5730  001CA4  A811               	btfss	writeControlReg@val,4,c
  5731  001CA6  0E00               	movlw	0
  5732  001CA8  6E12               	movwf	??_writeControlReg& (0+255),c
  5733  001CAA  3A12               	swapf	??_writeControlReg,f,c
  5734  001CAC  5081               	movf	3969,w,c	;volatile
  5735  001CAE  1812               	xorwf	??_writeControlReg,w,c
  5736  001CB0  0BEF               	andlw	-17
  5737  001CB2  1812               	xorwf	??_writeControlReg,w,c
  5738  001CB4  6E81               	movwf	3969,c	;volatile
  5739  001CB6  0E01               	movlw	1
  5740                           
  5741                           ;main.c: 720: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  5742  001CB8  AA11               	btfss	writeControlReg@val,5,c
  5743  001CBA  0E00               	movlw	0
  5744  001CBC  6E12               	movwf	??_writeControlReg& (0+255),c
  5745  001CBE  4612               	rlncf	??_writeControlReg,f,c
  5746  001CC0  4612               	rlncf	??_writeControlReg,f,c
  5747  001CC2  5082               	movf	3970,w,c	;volatile
  5748  001CC4  1812               	xorwf	??_writeControlReg,w,c
  5749  001CC6  0BFB               	andlw	-5
  5750  001CC8  1812               	xorwf	??_writeControlReg,w,c
  5751  001CCA  6E82               	movwf	3970,c	;volatile
  5752  001CCC  0E01               	movlw	1
  5753                           
  5754                           ;main.c: 721: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  5755  001CCE  AC11               	btfss	writeControlReg@val,6,c
  5756  001CD0  0E00               	movlw	0
  5757  001CD2  6E12               	movwf	??_writeControlReg& (0+255),c
  5758  001CD4  4612               	rlncf	??_writeControlReg,f,c
  5759  001CD6  5081               	movf	3969,w,c	;volatile
  5760  001CD8  1812               	xorwf	??_writeControlReg,w,c
  5761  001CDA  0BFD               	andlw	-3
  5762  001CDC  1812               	xorwf	??_writeControlReg,w,c
  5763  001CDE  6E81               	movwf	3969,c	;volatile
  5764  001CE0  0E01               	movlw	1
  5765                           
  5766                           ;main.c: 722: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  5767  001CE2  AE11               	btfss	writeControlReg@val,7,c
  5768  001CE4  0E00               	movlw	0
  5769  001CE6  6E12               	movwf	??_writeControlReg& (0+255),c
  5770  001CE8  5081               	movf	3969,w,c	;volatile
  5771  001CEA  1812               	xorwf	??_writeControlReg,w,c
  5772  001CEC  0BFE               	andlw	-2
  5773  001CEE  1812               	xorwf	??_writeControlReg,w,c
  5774  001CF0  6E81               	movwf	3969,c	;volatile
  5775                           
  5776                           ;main.c: 723: rv = readControlReg( 1 );
  5777  001CF2  0E01               	movlw	1
  5778  001CF4  EC5C  F012         	call	_readControlReg
  5779  001CF8  D01A               	goto	L14
  5780  001CFA                     l4067:
  5781  001CFA  0E01               	movlw	1
  5782                           
  5783                           ;main.c: 727: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  5784  001CFC  A011               	btfss	writeControlReg@val,0,c
  5785  001CFE  0E00               	movlw	0
  5786  001D00  6E12               	movwf	??_writeControlReg& (0+255),c
  5787  001D02  3A12               	swapf	??_writeControlReg,f,c
  5788  001D04  4612               	rlncf	??_writeControlReg,f,c
  5789  001D06  4612               	rlncf	??_writeControlReg,f,c
  5790  001D08  5081               	movf	3969,w,c	;volatile
  5791  001D0A  1812               	xorwf	??_writeControlReg,w,c
  5792  001D0C  0BBF               	andlw	-65
  5793  001D0E  1812               	xorwf	??_writeControlReg,w,c
  5794  001D10  6E81               	movwf	3969,c	;volatile
  5795  001D12  0E01               	movlw	1
  5796                           
  5797                           ;main.c: 728: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  5798  001D14  A211               	btfss	writeControlReg@val,1,c
  5799  001D16  0E00               	movlw	0
  5800  001D18  6E12               	movwf	??_writeControlReg& (0+255),c
  5801  001D1A  3A12               	swapf	??_writeControlReg,f,c
  5802  001D1C  4612               	rlncf	??_writeControlReg,f,c
  5803  001D1E  5081               	movf	3969,w,c	;volatile
  5804  001D20  1812               	xorwf	??_writeControlReg,w,c
  5805  001D22  0BDF               	andlw	-33
  5806  001D24  1812               	xorwf	??_writeControlReg,w,c
  5807  001D26  6E81               	movwf	3969,c	;volatile
  5808                           
  5809                           ;main.c: 729: rv = readControlReg( 2 );
  5810  001D28  0E02               	movlw	2
  5811  001D2A  EC5C  F012         	call	_readControlReg
  5812  001D2E                     L14:
  5813  001D2E  6E14               	movwf	writeControlReg@rv,c
  5814                           
  5815                           ;main.c: 730: break;
  5816  001D30  D007               	goto	l4075
  5817  001D32                     l4073:
  5818  001D32  5013               	movf	writeControlReg@ctrlreg,w,c
  5819                           
  5820                           ; Switch size 1, requested type "speed"
  5821                           ; Number of cases is 3, Range of values is 0 to 2
  5822                           ; switch strategies available:
  5823                           ; Name         Instructions Cycles
  5824                           ; simple_byte           10     6 (average)
  5825                           ;	Chosen strategy is simple_byte
  5826  001D34  E101 D744          	bz	l4059
  5827  001D38  0A01               	xorlw	1	; case 1
  5828  001D3A  E09C               	bz	l4063
  5829  001D3C  0A03               	xorlw	3	; case 2
  5830  001D3E  E0DD               	bz	l4067
  5831  001D40                     l4075:
  5832                           
  5833                           ;main.c: 733: return rv;
  5834  001D40  5014               	movf	writeControlReg@rv,w,c
  5835  001D42  0012               	return	
  5836  001D44                     __end_of_writeControlReg:
  5837                           	opt stack 0
  5838                           prodh	equ	0xFF4
  5839                           prodl	equ	0xFF3
  5840                           postinc0	equ	0xFEE
  5841                           wreg	equ	0xFE8
  5842                           indf1	equ	0xFE7
  5843                           fsr1h	equ	0xFE2
  5844                           fsr1l	equ	0xFE1
  5845                           indf2	equ	0xFDF
  5846                           postinc2	equ	0xFDE
  5847                           postdec2	equ	0xFDD
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _vscp_readRegister *****************
  5853 ;; Defined at:
  5854 ;;		line 555 in file "../../vscp_firmware/common/vscp_firmware.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  reg             1    wreg     unsigned char 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  reg             1   28[COMRAM] unsigned char 
  5859 ;; Return value:  Size  Location     Type
  5860 ;;                  1    wreg      unsigned char 
  5861 ;; Registers used:
  5862 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5863 ;; Tracked objects:
  5864 ;;		On entry : F/0
  5865 ;;		On exit  : 0/0
  5866 ;;		Unchanged: 0/0
  5867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5872 ;;Total ram usage:        1 bytes
  5873 ;; Hardware stack levels used:    1
  5874 ;; Hardware stack levels required when called:    5
  5875 ;; This function calls:
  5876 ;;		_vscp_readAppReg
  5877 ;;		_vscp_readStdReg
  5878 ;; This function is called by:
  5879 ;;		_vscp_handleProtocolEvent
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text24
  5884  00307A                     __ptext24:
  5885                           	opt stack 0
  5886  00307A                     _vscp_readRegister:
  5887                           	opt stack 24
  5888                           
  5889                           ;incstack = 0
  5890                           ;incstack = 0
  5891                           ;vscp_readRegister@reg stored from wreg
  5892  00307A  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;vscp_firmware.c: 556: if (reg >= 0x80) {
  5896  00307E  0E7F               	movlw	127
  5897  003080  641D               	cpfsgt	vscp_readRegister@reg,c
  5898  003082  D003               	goto	l7017
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;vscp_firmware.c: 557: return vscp_readStdReg(reg);
  5902  003084  501D               	movf	vscp_readRegister@reg,w,c
  5903  003086  EF04  F00D         	goto	_vscp_readStdReg
  5904  00308A                     l7017:
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;vscp_firmware.c: 559: else {
  5908                           ;vscp_firmware.c: 560: return vscp_readAppReg(reg);
  5909  00308A  501D               	movf	vscp_readRegister@reg,w,c
  5910  00308C  EFB3  F014         	goto	_vscp_readAppReg
  5911  003090                     __end_of_vscp_readRegister:
  5912                           	opt stack 0
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           postinc0	equ	0xFEE
  5916                           wreg	equ	0xFE8
  5917                           indf1	equ	0xFE7
  5918                           fsr1h	equ	0xFE2
  5919                           fsr1l	equ	0xFE1
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           fsr2h	equ	0xFDA
  5924                           fsr2l	equ	0xFD9
  5925                           status	equ	0xFD8
  5926                           
  5927 ;; *************** function _vscp_readStdReg *****************
  5928 ;; Defined at:
  5929 ;;		line 569 in file "../../vscp_firmware/common/vscp_firmware.c"
  5930 ;; Parameters:    Size  Location     Type
  5931 ;;  reg             1    wreg     unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  reg             1   27[COMRAM] unsigned char 
  5934 ;;  code            4   20[COMRAM] unsigned long 
  5935 ;;  idx             1   25[COMRAM] unsigned char 
  5936 ;;  code            4   16[COMRAM] unsigned long 
  5937 ;;  idx             1   24[COMRAM] unsigned char 
  5938 ;;  rv              1   26[COMRAM] unsigned char 
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      unsigned char 
  5941 ;; Registers used:
  5942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5943 ;; Tracked objects:
  5944 ;;		On entry : F/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5949 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5950 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5951 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5952 ;;Total ram usage:       17 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    4
  5955 ;; This function calls:
  5956 ;;		_vscp_getMajorVersion
  5957 ;;		_vscp_getMinorVersion
  5958 ;;		_vscp_getSubMinorVersion
  5959 ;;		_vscp_getGUID
  5960 ;;		_vscp_getMDF_URL
  5961 ;;		_vscp_getUserID
  5962 ;;		_vscp_getManufacturerId
  5963 ;;		_vscp_getBootLoaderAlgorithm
  5964 ;;		_vscp_getBufferSize
  5965 ;;		_vscp_getFamilyCode
  5966 ;;		_vscp_getFamilyType
  5967 ;;		_vscp_getRegisterPagesUsed
  5968 ;; This function is called by:
  5969 ;;		_vscp_readRegister
  5970 ;;		_vscp_handleProtocolEvent
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text25
  5975  001A08                     __ptext25:
  5976                           	opt stack 0
  5977  001A08                     _vscp_readStdReg:
  5978                           	opt stack 25
  5979                           
  5980                           ;incstack = 0
  5981                           ;incstack = 0
  5982                           ;vscp_readStdReg@reg stored from wreg
  5983  001A08  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;vscp_firmware.c: 570: uint8_t rv = 0;
  5987  001A0C  6A1B               	clrf	vscp_readStdReg@rv,c
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;vscp_firmware.c: 572: if (0x80 == reg) {
  5991  001A0E  501C               	movf	vscp_readStdReg@reg,w,c
  5992  001A10  0A80               	xorlw	128
  5993  001A12  E104               	bnz	l7027
  5994                           
  5995                           ; BSR set to: 0
  5996                           ;vscp_firmware.c: 575: rv = vscp_alarmstatus;
  5997  001A14  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  5998                           
  5999                           ;vscp_firmware.c: 576: vscp_alarmstatus = 0x00;
  6000  001A18  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6001                           
  6002                           ;vscp_firmware.c: 578: }
  6003  001A1A  D0CC               	goto	l7115
  6004  001A1C                     l7027:
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;vscp_firmware.c: 579: else if (0x81 == reg) {
  6008  001A1C  501C               	movf	vscp_readStdReg@reg,w,c
  6009  001A1E  0A81               	xorlw	129
  6010  001A20  E102               	bnz	l7031
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 582: rv = 1;
  6014  001A22  0E01               	movlw	1
  6015  001A24  D082               	goto	L25
  6016  001A26                     l7031:
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;vscp_firmware.c: 585: else if (0x82 == reg) {
  6020  001A26  501C               	movf	vscp_readStdReg@reg,w,c
  6021  001A28  0A82               	xorlw	130
  6022  001A2A  E102               	bnz	l7035
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;vscp_firmware.c: 588: rv = 6;
  6026  001A2C  0E06               	movlw	6
  6027  001A2E  D07D               	goto	L25
  6028  001A30                     l7035:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;vscp_firmware.c: 591: else if (0x83 == reg) {
  6032  001A30  501C               	movf	vscp_readStdReg@reg,w,c
  6033  001A32  0A83               	xorlw	131
  6034  001A34  E103               	bnz	l7039
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;vscp_firmware.c: 594: rv = vscp_errorcnt;
  6038  001A36  C055  F01B         	movff	_vscp_errorcnt,vscp_readStdReg@rv
  6039                           
  6040                           ;vscp_firmware.c: 596: }
  6041  001A3A  D0BC               	goto	l7115
  6042  001A3C                     l7039:
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;vscp_firmware.c: 597: else if (0x94 == reg) {
  6046  001A3C  501C               	movf	vscp_readStdReg@reg,w,c
  6047  001A3E  0A94               	xorlw	148
  6048  001A40  E103               	bnz	l7043
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;vscp_firmware.c: 600: rv = vscp_getMajorVersion();
  6052  001A42  ECC2  F018         	call	_vscp_getMajorVersion	;wreg free
  6053  001A46  D071               	goto	L25
  6054  001A48                     l7043:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;vscp_firmware.c: 603: else if (0x95 == reg) {
  6058  001A48  501C               	movf	vscp_readStdReg@reg,w,c
  6059  001A4A  0A95               	xorlw	149
  6060  001A4C  E103               	bnz	l7047
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;vscp_firmware.c: 606: rv = vscp_getMinorVersion();
  6064  001A4E  ECC1  F018         	call	_vscp_getMinorVersion	;wreg free
  6065  001A52  D06B               	goto	L25
  6066  001A54                     l7047:
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;vscp_firmware.c: 609: else if (0x96 == reg) {
  6070  001A54  501C               	movf	vscp_readStdReg@reg,w,c
  6071  001A56  0A96               	xorlw	150
  6072  001A58  E103               	bnz	l7051
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;vscp_firmware.c: 612: rv = vscp_getSubMinorVersion();
  6076  001A5A  ECC0  F018         	call	_vscp_getSubMinorVersion	;wreg free
  6077  001A5E  D065               	goto	L25
  6078  001A60                     l7051:
  6079                           
  6080                           ; BSR set to: 0
  6081                           ;vscp_firmware.c: 615: else if (reg < 0x89) {
  6082  001A60  0E89               	movlw	137
  6083  001A62  601C               	cpfslt	vscp_readStdReg@reg,c
  6084  001A64  D005               	goto	l7055
  6085                           
  6086                           ; BSR set to: 0
  6087                           ;vscp_firmware.c: 618: rv = vscp_getUserID(reg - 0x84);
  6088  001A66  501C               	movf	vscp_readStdReg@reg,w,c
  6089  001A68  0F7C               	addlw	124
  6090  001A6A  EC68  F018         	call	_vscp_getUserID
  6091  001A6E  D05D               	goto	L25
  6092  001A70                     l7055:
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;vscp_firmware.c: 621: else if ((reg > 0x88) &&
  6096                           ;vscp_firmware.c: 622: (reg < 0x91)) {
  6097  001A70  0E88               	movlw	136
  6098  001A72  641C               	cpfsgt	vscp_readStdReg@reg,c
  6099  001A74  D008               	goto	l7061
  6100                           
  6101                           ; BSR set to: 0
  6102  001A76  0E91               	movlw	145
  6103  001A78  601C               	cpfslt	vscp_readStdReg@reg,c
  6104  001A7A  D005               	goto	l7061
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;vscp_firmware.c: 625: rv = vscp_getManufacturerId(reg - 0x89);
  6108  001A7C  501C               	movf	vscp_readStdReg@reg,w,c
  6109  001A7E  0F77               	addlw	119
  6110  001A80  EC5E  F018         	call	_vscp_getManufacturerId
  6111  001A84  D052               	goto	L25
  6112  001A86                     l7061:
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;vscp_firmware.c: 628: else if (0x91 == reg) {
  6116  001A86  501C               	movf	vscp_readStdReg@reg,w,c
  6117  001A88  0A91               	xorlw	145
  6118  001A8A  E103               	bnz	l7065
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;vscp_firmware.c: 631: rv = vscp_nickname;
  6122  001A8C  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6123                           
  6124                           ;vscp_firmware.c: 633: }
  6125  001A90  D091               	goto	l7115
  6126  001A92                     l7065:
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;vscp_firmware.c: 634: else if (0x93 == reg) {
  6130  001A92  501C               	movf	vscp_readStdReg@reg,w,c
  6131  001A94  0A93               	xorlw	147
  6132  001A96  E103               	bnz	l7069
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;vscp_firmware.c: 637: rv = (vscp_page_select & 0xff);
  6136  001A98  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6137                           
  6138                           ;vscp_firmware.c: 639: }
  6139  001A9C  D08B               	goto	l7115
  6140  001A9E                     l7069:
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;vscp_firmware.c: 641: else if (0x92 == reg) {
  6144  001A9E  501C               	movf	vscp_readStdReg@reg,w,c
  6145  001AA0  0A92               	xorlw	146
  6146  001AA2  E102               	bnz	l7073
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;vscp_firmware.c: 644: rv = (vscp_page_select >> 8) & 0xff;
  6150  001AA4  5053               	movf	_vscp_page_select+1,w,c
  6151  001AA6  D041               	goto	L25
  6152  001AA8                     l7073:
  6153                           
  6154                           ; BSR set to: 0
  6155                           ;vscp_firmware.c: 647: else if (0x97 == reg) {
  6156  001AA8  501C               	movf	vscp_readStdReg@reg,w,c
  6157  001AAA  0A97               	xorlw	151
  6158  001AAC  E103               	bnz	l7077
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;vscp_firmware.c: 649: rv = vscp_getBootLoaderAlgorithm();
  6162  001AAE  ECBF  F018         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6163  001AB2  D03B               	goto	L25
  6164  001AB4                     l7077:
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;vscp_firmware.c: 651: else if (0x98 == reg) {
  6168  001AB4  501C               	movf	vscp_readStdReg@reg,w,c
  6169  001AB6  0A98               	xorlw	152
  6170  001AB8  E103               	bnz	l7081
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;vscp_firmware.c: 653: rv = vscp_getBufferSize();
  6174  001ABA  ECBE  F018         	call	_vscp_getBufferSize	;wreg free
  6175  001ABE  D035               	goto	L25
  6176  001AC0                     l7081:
  6177                           
  6178                           ; BSR set to: 0
  6179                           ;vscp_firmware.c: 655: else if (0x99 == reg) {
  6180  001AC0  501C               	movf	vscp_readStdReg@reg,w,c
  6181  001AC2  0A99               	xorlw	153
  6182  001AC4  E103               	bnz	l7085
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;vscp_firmware.c: 657: rv = vscp_getRegisterPagesUsed();
  6186  001AC6  ECBD  F018         	call	_vscp_getRegisterPagesUsed	;wreg free
  6187  001ACA  D02F               	goto	L25
  6188  001ACC                     l7085:
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;vscp_firmware.c: 659: else if ( ( reg >= 0x9A ) &&
  6192                           ;vscp_firmware.c: 660: ( reg < ( 0x9A + 4 ) ) ) {
  6193  001ACC  0E99               	movlw	153
  6194  001ACE  641C               	cpfsgt	vscp_readStdReg@reg,c
  6195  001AD0  D02E               	goto	l7095
  6196                           
  6197                           ; BSR set to: 0
  6198  001AD2  0E9E               	movlw	158
  6199  001AD4  601C               	cpfslt	vscp_readStdReg@reg,c
  6200  001AD6  D02B               	goto	l7095
  6201                           
  6202                           ; BSR set to: 0
  6203                           ;vscp_firmware.c: 662: uint32_t code = vscp_getFamilyCode();
  6204  001AD8  ECA6  F018         	call	_vscp_getFamilyCode	;wreg free
  6205  001ADC  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6206  001AE0  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6207  001AE4  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6208  001AE8  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;vscp_firmware.c: 663: uint8_t idx = reg - 0x9A;
  6212  001AEC  501C               	movf	vscp_readStdReg@reg,w,c
  6213  001AEE  0F66               	addlw	102
  6214  001AF0  6E19               	movwf	vscp_readStdReg@idx,c
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;vscp_firmware.c: 664: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6218  001AF2  5019               	movf	vscp_readStdReg@idx,w,c
  6219  001AF4  0803               	sublw	3
  6220  001AF6  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6221  001AF8  90D8               	bcf	status,0,c
  6222  001AFA  360C               	rlcf	??_vscp_readStdReg,f,c
  6223  001AFC  90D8               	bcf	status,0,c
  6224  001AFE  360C               	rlcf	??_vscp_readStdReg,f,c
  6225  001B00  90D8               	bcf	status,0,c
  6226  001B02  360C               	rlcf	??_vscp_readStdReg,f,c
  6227  001B04  500C               	movf	??_vscp_readStdReg,w,c
  6228  001B06  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6229  001B0A  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6230  001B0E  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6231  001B12  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6232  001B16  2AE8               	incf	wreg,f,c
  6233  001B18  D005               	goto	u7370
  6234  001B1A                     u7375:
  6235  001B1A  90D8               	bcf	status,0,c
  6236  001B1C  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6237  001B1E  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6238  001B20  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6239  001B22  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6240  001B24                     u7370:
  6241  001B24  2EE8               	decfsz	wreg,f,c
  6242  001B26  D7F9               	goto	u7375
  6243  001B28  D030               	goto	L26
  6244  001B2A                     L25:
  6245  001B2A  6E1B               	movwf	vscp_readStdReg@rv,c
  6246                           
  6247                           ;vscp_firmware.c: 665: }
  6248  001B2C  D043               	goto	l7115
  6249  001B2E                     l7095:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;vscp_firmware.c: 666: else if ( ( reg >= 0x9E ) &&
  6253                           ;vscp_firmware.c: 667: ( reg < ( 0x9E + 4 ) ) ) {
  6254  001B2E  0E9D               	movlw	157
  6255  001B30  641C               	cpfsgt	vscp_readStdReg@reg,c
  6256  001B32  D02D               	goto	l7105
  6257                           
  6258                           ; BSR set to: 0
  6259  001B34  0EA2               	movlw	162
  6260  001B36  601C               	cpfslt	vscp_readStdReg@reg,c
  6261  001B38  D02A               	goto	l7105
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;vscp_firmware.c: 669: uint32_t code = vscp_getFamilyType();
  6265  001B3A  ECA1  F018         	call	_vscp_getFamilyType	;wreg free
  6266  001B3E  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1106+3
  6267  001B42  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1106+2
  6268  001B46  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1106+1
  6269  001B4A  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1106
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;vscp_firmware.c: 670: uint8_t idx = reg - 0x9E;
  6273  001B4E  501C               	movf	vscp_readStdReg@reg,w,c
  6274  001B50  0F62               	addlw	98
  6275  001B52  6E1A               	movwf	vscp_readStdReg@idx_1107,c
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;vscp_firmware.c: 671: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6279  001B54  501A               	movf	vscp_readStdReg@idx_1107,w,c
  6280  001B56  0803               	sublw	3
  6281  001B58  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6282  001B5A  90D8               	bcf	status,0,c
  6283  001B5C  360C               	rlcf	??_vscp_readStdReg,f,c
  6284  001B5E  90D8               	bcf	status,0,c
  6285  001B60  360C               	rlcf	??_vscp_readStdReg,f,c
  6286  001B62  90D8               	bcf	status,0,c
  6287  001B64  360C               	rlcf	??_vscp_readStdReg,f,c
  6288  001B66  500C               	movf	??_vscp_readStdReg,w,c
  6289  001B68  C015  F00D         	movff	vscp_readStdReg@code_1106,??_vscp_readStdReg+1
  6290  001B6C  C016  F00E         	movff	vscp_readStdReg@code_1106+1,??_vscp_readStdReg+2
  6291  001B70  C017  F00F         	movff	vscp_readStdReg@code_1106+2,??_vscp_readStdReg+3
  6292  001B74  C018  F010         	movff	vscp_readStdReg@code_1106+3,??_vscp_readStdReg+4
  6293  001B78  2AE8               	incf	wreg,f,c
  6294  001B7A  D005               	goto	u7400
  6295  001B7C                     u7405:
  6296  001B7C  90D8               	bcf	status,0,c
  6297  001B7E  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6298  001B80  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6299  001B82  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6300  001B84  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6301  001B86                     u7400:
  6302  001B86  2EE8               	decfsz	wreg,f,c
  6303  001B88  D7F9               	goto	u7405
  6304  001B8A                     L26:
  6305  001B8A  500D               	movf	??_vscp_readStdReg+1,w,c
  6306  001B8C  D7CE               	goto	L25
  6307  001B8E                     l7105:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;vscp_firmware.c: 673: else if ((reg > (0xD0 - 1)) &&
  6311                           ;vscp_firmware.c: 674: (reg < 0xE0)) {
  6312  001B8E  0ECF               	movlw	207
  6313  001B90  641C               	cpfsgt	vscp_readStdReg@reg,c
  6314  001B92  D008               	goto	l7111
  6315                           
  6316                           ; BSR set to: 0
  6317  001B94  0EE0               	movlw	224
  6318  001B96  601C               	cpfslt	vscp_readStdReg@reg,c
  6319  001B98  D005               	goto	l7111
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;vscp_firmware.c: 677: rv = vscp_getGUID(reg - 0xD0);
  6323  001B9A  501C               	movf	vscp_readStdReg@reg,w,c
  6324  001B9C  0F30               	addlw	48
  6325  001B9E  EC72  F018         	call	_vscp_getGUID
  6326  001BA2  D7C3               	goto	L25
  6327  001BA4                     l7111:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;vscp_firmware.c: 680: else if ( reg >= 0xE0 ) {
  6331  001BA4  0EDF               	movlw	223
  6332  001BA6  641C               	cpfsgt	vscp_readStdReg@reg,c
  6333  001BA8  D005               	goto	l7115
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;vscp_firmware.c: 683: rv = vscp_getMDF_URL(reg - 0xE0);
  6337  001BAA  501C               	movf	vscp_readStdReg@reg,w,c
  6338  001BAC  0F20               	addlw	32
  6339  001BAE  EC09  F018         	call	_vscp_getMDF_URL
  6340  001BB2  D7BB               	goto	L25
  6341  001BB4                     l7115:
  6342                           
  6343                           ;vscp_firmware.c: 685: }
  6344                           ;vscp_firmware.c: 687: return rv;
  6345  001BB4  501B               	movf	vscp_readStdReg@rv,w,c
  6346  001BB6  0012               	return	
  6347  001BB8                     __end_of_vscp_readStdReg:
  6348                           	opt stack 0
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           postinc0	equ	0xFEE
  6352                           wreg	equ	0xFE8
  6353                           indf1	equ	0xFE7
  6354                           fsr1h	equ	0xFE2
  6355                           fsr1l	equ	0xFE1
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           postdec2	equ	0xFDD
  6359                           fsr2h	equ	0xFDA
  6360                           fsr2l	equ	0xFD9
  6361                           status	equ	0xFD8
  6362                           
  6363 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6364 ;; Defined at:
  6365 ;;		line 1441 in file "../main.c"
  6366 ;; Parameters:    Size  Location     Type
  6367 ;;		None
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      unsigned char 
  6372 ;; Registers used:
  6373 ;;		wreg
  6374 ;; Tracked objects:
  6375 ;;		On entry : F/0
  6376 ;;		On exit  : F/0
  6377 ;;		Unchanged: F/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6383 ;;Total ram usage:        0 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    2
  6386 ;; This function calls:
  6387 ;;		Nothing
  6388 ;; This function is called by:
  6389 ;;		_vscp_readStdReg
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text26
  6394  00317A                     __ptext26:
  6395                           	opt stack 0
  6396  00317A                     _vscp_getRegisterPagesUsed:
  6397                           	opt stack 26
  6398                           
  6399                           ; BSR set to: 0
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;main.c: 1442: return 1;
  6403                           
  6404                           ;incstack = 0
  6405                           ;incstack = 0
  6406  00317A  0C01               	retlw	1
  6407  00317C                     __end_of_vscp_getRegisterPagesUsed:
  6408                           	opt stack 0
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           postinc0	equ	0xFEE
  6412                           wreg	equ	0xFE8
  6413                           indf1	equ	0xFE7
  6414                           fsr1h	equ	0xFE2
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _vscp_getFamilyType *****************
  6424 ;; Defined at:
  6425 ;;		line 1422 in file "../main.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;		None
  6428 ;; Auto vars:     Size  Location     Type
  6429 ;;		None
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  4    7[COMRAM] unsigned long 
  6432 ;; Registers used:
  6433 ;;		None
  6434 ;; Tracked objects:
  6435 ;;		On entry : F/0
  6436 ;;		On exit  : F/0
  6437 ;;		Unchanged: F/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6439 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6442 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6443 ;;Total ram usage:        4 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    2
  6446 ;; This function calls:
  6447 ;;		Nothing
  6448 ;; This function is called by:
  6449 ;;		_vscp_readStdReg
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text27
  6454  003142                     __ptext27:
  6455                           	opt stack 0
  6456  003142                     _vscp_getFamilyType:
  6457                           	opt stack 26
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 1423: return 0;
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;incstack = 0
  6464                           ;incstack = 0
  6465  003142  6A08               	clrf	?_vscp_getFamilyType,c
  6466  003144  6A09               	clrf	?_vscp_getFamilyType+1,c
  6467  003146  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6468  003148  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6469                           
  6470                           ; BSR set to: 0
  6471  00314A  0012               	return	
  6472  00314C                     __end_of_vscp_getFamilyType:
  6473                           	opt stack 0
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           indf1	equ	0xFE7
  6479                           fsr1h	equ	0xFE2
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _vscp_getFamilyCode *****************
  6489 ;; Defined at:
  6490 ;;		line 1413 in file "../main.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  4    7[COMRAM] unsigned long 
  6497 ;; Registers used:
  6498 ;;		None
  6499 ;; Tracked objects:
  6500 ;;		On entry : F/0
  6501 ;;		On exit  : F/0
  6502 ;;		Unchanged: F/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6507 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6508 ;;Total ram usage:        4 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    2
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_vscp_readStdReg
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text28
  6519  00314C                     __ptext28:
  6520                           	opt stack 0
  6521  00314C                     _vscp_getFamilyCode:
  6522                           	opt stack 26
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;main.c: 1414: return 0L;
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;incstack = 0
  6529                           ;incstack = 0
  6530  00314C  6A08               	clrf	?_vscp_getFamilyCode,c
  6531  00314E  6A09               	clrf	?_vscp_getFamilyCode+1,c
  6532  003150  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  6533  003152  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  6534                           
  6535                           ; BSR set to: 0
  6536  003154  0012               	return	
  6537  003156                     __end_of_vscp_getFamilyCode:
  6538                           	opt stack 0
  6539                           prodh	equ	0xFF4
  6540                           prodl	equ	0xFF3
  6541                           postinc0	equ	0xFEE
  6542                           wreg	equ	0xFE8
  6543                           indf1	equ	0xFE7
  6544                           fsr1h	equ	0xFE2
  6545                           fsr1l	equ	0xFE1
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           postdec2	equ	0xFDD
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function _vscp_getBufferSize *****************
  6554 ;; Defined at:
  6555 ;;		line 1282 in file "../main.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      unsigned char 
  6562 ;; Registers used:
  6563 ;;		wreg
  6564 ;; Tracked objects:
  6565 ;;		On entry : F/0
  6566 ;;		On exit  : F/0
  6567 ;;		Unchanged: F/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:    2
  6576 ;; This function calls:
  6577 ;;		Nothing
  6578 ;; This function is called by:
  6579 ;;		_vscp_readStdReg
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           	psect	text29
  6584  00317C                     __ptext29:
  6585                           	opt stack 0
  6586  00317C                     _vscp_getBufferSize:
  6587                           	opt stack 26
  6588                           
  6589                           ; BSR set to: 0
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;main.c: 1283: return 8;
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;incstack = 0
  6596                           ;incstack = 0
  6597  00317C  0C08               	retlw	8
  6598  00317E                     __end_of_vscp_getBufferSize:
  6599                           	opt stack 0
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           postinc0	equ	0xFEE
  6603                           wreg	equ	0xFE8
  6604                           indf1	equ	0xFE7
  6605                           fsr1h	equ	0xFE2
  6606                           fsr1l	equ	0xFE1
  6607                           indf2	equ	0xFDF
  6608                           postinc2	equ	0xFDE
  6609                           postdec2	equ	0xFDD
  6610                           fsr2h	equ	0xFDA
  6611                           fsr2l	equ	0xFD9
  6612                           status	equ	0xFD8
  6613                           
  6614 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  6615 ;; Defined at:
  6616 ;;		line 1273 in file "../main.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      unsigned char 
  6623 ;; Registers used:
  6624 ;;		wreg
  6625 ;; Tracked objects:
  6626 ;;		On entry : F/0
  6627 ;;		On exit  : F/0
  6628 ;;		Unchanged: F/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    2
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		_vscp_readStdReg
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text30
  6645  00317E                     __ptext30:
  6646                           	opt stack 0
  6647  00317E                     _vscp_getBootLoaderAlgorithm:
  6648                           	opt stack 26
  6649                           
  6650                           ; BSR set to: 0
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;main.c: 1274: return 0x01;
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;incstack = 0
  6657                           ;incstack = 0
  6658  00317E  0C01               	retlw	1
  6659  003180                     __end_of_vscp_getBootLoaderAlgorithm:
  6660                           	opt stack 0
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           indf1	equ	0xFE7
  6666                           fsr1h	equ	0xFE2
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function _vscp_getManufacturerId *****************
  6676 ;; Defined at:
  6677 ;;		line 1264 in file "../main.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  idx             1    wreg     unsigned char 
  6680 ;; Auto vars:     Size  Location     Type
  6681 ;;  idx             1    9[COMRAM] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;                  1    wreg      unsigned char 
  6684 ;; Registers used:
  6685 ;;		wreg, status,2, status,0, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : 0/0
  6688 ;;		On exit  : 0/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6694 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6695 ;;Total ram usage:        1 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    3
  6698 ;; This function calls:
  6699 ;;		_Read_b_eep
  6700 ;; This function is called by:
  6701 ;;		_vscp_readStdReg
  6702 ;;		_vscp_writeStdReg
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text31
  6707  0030BC                     __ptext31:
  6708                           	opt stack 0
  6709  0030BC                     _vscp_getManufacturerId:
  6710                           	opt stack 25
  6711                           
  6712                           ; BSR set to: 0
  6713                           ;incstack = 0
  6714                           ;incstack = 0
  6715                           ;vscp_getManufacturerId@idx stored from wreg
  6716  0030BC  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
  6717                           
  6718                           ;main.c: 1265: return Read_b_eep(0x0A + idx);
  6719  0030C0  0E0A               	movlw	10
  6720  0030C2  240A               	addwf	vscp_getManufacturerId@idx,w,c
  6721  0030C4  6E08               	movwf	?_Read_b_eep,c
  6722  0030C6  6A09               	clrf	?_Read_b_eep+1,c
  6723  0030C8  0E00               	movlw	0
  6724  0030CA  2209               	addwfc	?_Read_b_eep+1,f,c
  6725  0030CC  EF25  F018         	goto	_Read_b_eep	;wreg free
  6726  0030D0                     __end_of_vscp_getManufacturerId:
  6727                           	opt stack 0
  6728                           prodh	equ	0xFF4
  6729                           prodl	equ	0xFF3
  6730                           postinc0	equ	0xFEE
  6731                           wreg	equ	0xFE8
  6732                           indf1	equ	0xFE7
  6733                           fsr1h	equ	0xFE2
  6734                           fsr1l	equ	0xFE1
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           fsr2h	equ	0xFDA
  6739                           fsr2l	equ	0xFD9
  6740                           status	equ	0xFD8
  6741                           
  6742 ;; *************** function _vscp_getUserID *****************
  6743 ;; Defined at:
  6744 ;;		line 1244 in file "../main.c"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;  idx             1    wreg     unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  idx             1    9[COMRAM] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      unsigned char 
  6751 ;; Registers used:
  6752 ;;		wreg, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6759 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6762 ;;Total ram usage:        1 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    3
  6765 ;; This function calls:
  6766 ;;		_Read_b_eep
  6767 ;; This function is called by:
  6768 ;;		_vscp_readStdReg
  6769 ;;		_vscp_writeStdReg
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text32
  6774  0030D0                     __ptext32:
  6775                           	opt stack 0
  6776  0030D0                     _vscp_getUserID:
  6777                           	opt stack 25
  6778                           
  6779                           ;incstack = 0
  6780                           ;incstack = 0
  6781                           ;vscp_getUserID@idx stored from wreg
  6782  0030D0  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
  6783                           
  6784                           ;main.c: 1245: return Read_b_eep(0x05 + idx);
  6785  0030D4  0E05               	movlw	5
  6786  0030D6  240A               	addwf	vscp_getUserID@idx,w,c
  6787  0030D8  6E08               	movwf	?_Read_b_eep,c
  6788  0030DA  6A09               	clrf	?_Read_b_eep+1,c
  6789  0030DC  0E00               	movlw	0
  6790  0030DE  2209               	addwfc	?_Read_b_eep+1,f,c
  6791  0030E0  EF25  F018         	goto	_Read_b_eep	;wreg free
  6792  0030E4                     __end_of_vscp_getUserID:
  6793                           	opt stack 0
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           postinc0	equ	0xFEE
  6797                           wreg	equ	0xFE8
  6798                           indf1	equ	0xFE7
  6799                           fsr1h	equ	0xFE2
  6800                           fsr1l	equ	0xFE1
  6801                           indf2	equ	0xFDF
  6802                           postinc2	equ	0xFDE
  6803                           postdec2	equ	0xFDD
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _vscp_getMDF_URL *****************
  6809 ;; Defined at:
  6810 ;;		line 1235 in file "../main.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  idx             1    wreg     unsigned char 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  idx             1    8[COMRAM] unsigned char 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      unsigned char 
  6817 ;; Registers used:
  6818 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6819 ;; Tracked objects:
  6820 ;;		On entry : F/0
  6821 ;;		On exit  : F/0
  6822 ;;		Unchanged: F/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6825 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6826 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6827 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6828 ;;Total ram usage:        2 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    2
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_vscp_readStdReg
  6835 ;;		_vscp_handleProtocolEvent
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text33
  6840  003012                     __ptext33:
  6841                           	opt stack 0
  6842  003012                     _vscp_getMDF_URL:
  6843                           	opt stack 26
  6844                           
  6845                           ;incstack = 0
  6846                           ;incstack = 0
  6847                           ;vscp_getMDF_URL@idx stored from wreg
  6848  003012  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;main.c: 1236: return vscp_deviceURL[ idx ];
  6852  003016  5009               	movf	vscp_getMDF_URL@idx,w,c
  6853  003018  0F00               	addlw	low _vscp_deviceURL
  6854  00301A  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  6855  00301C  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  6856  003020  0E0F               	movlw	high __smallconst
  6857  003022  6EF7               	movwf	tblptrh,c
  6858  003024  0E00               	movlw	low (__smallconst shr (0+16))
  6859  003026  6EF8               	movwf	tblptru,c
  6860  003028  0008               	tblrd		*
  6861  00302A  50F5               	movf	tablat,w,c
  6862                           
  6863                           ; BSR set to: 0
  6864  00302C  0012               	return	
  6865  00302E                     __end_of_vscp_getMDF_URL:
  6866                           	opt stack 0
  6867                           tblptru	equ	0xFF8
  6868                           tblptrh	equ	0xFF7
  6869                           tblptrl	equ	0xFF6
  6870                           tablat	equ	0xFF5
  6871                           prodh	equ	0xFF4
  6872                           prodl	equ	0xFF3
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           indf1	equ	0xFE7
  6876                           fsr1h	equ	0xFE2
  6877                           fsr1l	equ	0xFE1
  6878                           indf2	equ	0xFDF
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _vscp_getGUID *****************
  6886 ;; Defined at:
  6887 ;;		line 1223 in file "../main.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  idx             1    wreg     unsigned char 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  idx             1    9[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      unsigned char 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6905 ;;Total ram usage:        1 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    3
  6908 ;; This function calls:
  6909 ;;		_Read_b_eep
  6910 ;; This function is called by:
  6911 ;;		_vscp_readStdReg
  6912 ;;		_vscp_writeStdReg
  6913 ;;		_vscp_handleProtocolEvent
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text34
  6918  0030E4                     __ptext34:
  6919                           	opt stack 0
  6920  0030E4                     _vscp_getGUID:
  6921                           	opt stack 25
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;incstack = 0
  6925                           ;incstack = 0
  6926                           ;vscp_getGUID@idx stored from wreg
  6927  0030E4  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
  6928                           
  6929                           ;main.c: 1224: return Read_b_eep(0x12 + idx);
  6930  0030E8  0E12               	movlw	18
  6931  0030EA  240A               	addwf	vscp_getGUID@idx,w,c
  6932  0030EC  6E08               	movwf	?_Read_b_eep,c
  6933  0030EE  6A09               	clrf	?_Read_b_eep+1,c
  6934  0030F0  0E00               	movlw	0
  6935  0030F2  2209               	addwfc	?_Read_b_eep+1,f,c
  6936  0030F4  EF25  F018         	goto	_Read_b_eep	;wreg free
  6937  0030F8                     __end_of_vscp_getGUID:
  6938                           	opt stack 0
  6939                           tblptru	equ	0xFF8
  6940                           tblptrh	equ	0xFF7
  6941                           tblptrl	equ	0xFF6
  6942                           tablat	equ	0xFF5
  6943                           prodh	equ	0xFF4
  6944                           prodl	equ	0xFF3
  6945                           postinc0	equ	0xFEE
  6946                           wreg	equ	0xFE8
  6947                           indf1	equ	0xFE7
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _vscp_getSubMinorVersion *****************
  6958 ;; Defined at:
  6959 ;;		line 1212 in file "../main.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;		None
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      unsigned char 
  6966 ;; Registers used:
  6967 ;;		wreg
  6968 ;; Tracked objects:
  6969 ;;		On entry : F/0
  6970 ;;		On exit  : F/0
  6971 ;;		Unchanged: F/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6977 ;;Total ram usage:        0 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    2
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_vscp_readStdReg
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text35
  6988  003180                     __ptext35:
  6989                           	opt stack 0
  6990  003180                     _vscp_getSubMinorVersion:
  6991                           	opt stack 26
  6992                           
  6993                           ; BSR set to: 0
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;main.c: 1213: return 2;
  6997                           
  6998                           ;incstack = 0
  6999                           ;incstack = 0
  7000  003180  0C02               	retlw	2
  7001  003182                     __end_of_vscp_getSubMinorVersion:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           postinc0	equ	0xFEE
  7010                           wreg	equ	0xFE8
  7011                           indf1	equ	0xFE7
  7012                           fsr1h	equ	0xFE2
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _vscp_getMinorVersion *****************
  7022 ;; Defined at:
  7023 ;;		line 1203 in file "../main.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;		None
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;		None
  7028 ;; Return value:  Size  Location     Type
  7029 ;;                  1    wreg      unsigned char 
  7030 ;; Registers used:
  7031 ;;		wreg
  7032 ;; Tracked objects:
  7033 ;;		On entry : F/0
  7034 ;;		On exit  : F/0
  7035 ;;		Unchanged: F/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;Total ram usage:        0 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; Hardware stack levels required when called:    2
  7044 ;; This function calls:
  7045 ;;		Nothing
  7046 ;; This function is called by:
  7047 ;;		_vscp_readStdReg
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text36
  7052  003182                     __ptext36:
  7053                           	opt stack 0
  7054  003182                     _vscp_getMinorVersion:
  7055                           	opt stack 26
  7056                           
  7057                           ; BSR set to: 0
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;main.c: 1204: return 0;
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;incstack = 0
  7064                           ;incstack = 0
  7065  003182  0C00               	retlw	0
  7066  003184                     __end_of_vscp_getMinorVersion:
  7067                           	opt stack 0
  7068                           tblptru	equ	0xFF8
  7069                           tblptrh	equ	0xFF7
  7070                           tblptrl	equ	0xFF6
  7071                           tablat	equ	0xFF5
  7072                           prodh	equ	0xFF4
  7073                           prodl	equ	0xFF3
  7074                           postinc0	equ	0xFEE
  7075                           wreg	equ	0xFE8
  7076                           indf1	equ	0xFE7
  7077                           fsr1h	equ	0xFE2
  7078                           fsr1l	equ	0xFE1
  7079                           indf2	equ	0xFDF
  7080                           postinc2	equ	0xFDE
  7081                           postdec2	equ	0xFDD
  7082                           fsr2h	equ	0xFDA
  7083                           fsr2l	equ	0xFD9
  7084                           status	equ	0xFD8
  7085                           
  7086 ;; *************** function _vscp_getMajorVersion *****************
  7087 ;; Defined at:
  7088 ;;		line 1194 in file "../main.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      unsigned char 
  7095 ;; Registers used:
  7096 ;;		wreg
  7097 ;; Tracked objects:
  7098 ;;		On entry : F/0
  7099 ;;		On exit  : F/0
  7100 ;;		Unchanged: F/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7106 ;;Total ram usage:        0 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:    2
  7109 ;; This function calls:
  7110 ;;		Nothing
  7111 ;; This function is called by:
  7112 ;;		_vscp_readStdReg
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text37
  7117  003184                     __ptext37:
  7118                           	opt stack 0
  7119  003184                     _vscp_getMajorVersion:
  7120                           	opt stack 26
  7121                           
  7122                           ; BSR set to: 0
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 1195: return 1;
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;incstack = 0
  7129                           ;incstack = 0
  7130  003184  0C01               	retlw	1
  7131  003186                     __end_of_vscp_getMajorVersion:
  7132                           	opt stack 0
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           indf1	equ	0xFE7
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _vscp_newNodeOnline *****************
  7152 ;; Defined at:
  7153 ;;		line 496 in file "../../vscp_firmware/common/vscp_firmware.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;		None               void
  7160 ;; Registers used:
  7161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : F/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7169 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7170 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7171 ;;Total ram usage:        1 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    7
  7174 ;; This function calls:
  7175 ;;		_vscp_sendEvent
  7176 ;; This function is called by:
  7177 ;;		_vscp_handleProtocolEvent
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text38
  7182  002E38                     __ptext38:
  7183                           	opt stack 0
  7184  002E38                     _vscp_newNodeOnline:
  7185                           	opt stack 22
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;vscp_firmware.c: 497: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
  7189                           ;vscp_firmware.c: 498: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7190                           
  7191                           ; BSR set to: 0
  7192                           ;incstack = 0
  7193                           ;incstack = 0
  7194  002E38  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7195  002E3C  0E0F               	movlw	15
  7196  002E3E  164C               	andwf	??_vscp_newNodeOnline,f,c
  7197  002E40  044C               	decf	??_vscp_newNodeOnline,w,c
  7198  002E42  A4D8               	btfss	status,2,c
  7199  002E44  0012               	return	
  7200                           
  7201                           ; BSR set to: 0
  7202  002E46  5170               	movf	_vscp_nickname& (0+255),w,b
  7203  002E48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7204  002E4C  62DF               	cpfseq	indf2,c
  7205  002E4E  0012               	return	
  7206                           
  7207                           ; BSR set to: 0
  7208                           ;vscp_firmware.c: 504: vscp_omsg.flags = 0x80;
  7209  002E50  0E80               	movlw	128
  7210  002E52  6F83               	movwf	_vscp_omsg& (0+255),b
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;vscp_firmware.c: 505: vscp_omsg.priority = 0x00;
  7214  002E54  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;vscp_firmware.c: 506: vscp_omsg.vscp_class = 0;
  7218  002E56  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7219  002E58  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7220                           
  7221                           ;vscp_firmware.c: 507: vscp_omsg.vscp_type = 3;
  7222  002E5A  0E03               	movlw	3
  7223  002E5C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;vscp_firmware.c: 508: vscp_sendEvent();
  7227  002E5E  EFD7  F016         	goto	_vscp_sendEvent	;wreg free
  7228  002E62                     __end_of_vscp_newNodeOnline:
  7229                           	opt stack 0
  7230                           tblptru	equ	0xFF8
  7231                           tblptrh	equ	0xFF7
  7232                           tblptrl	equ	0xFF6
  7233                           tablat	equ	0xFF5
  7234                           prodh	equ	0xFF4
  7235                           prodl	equ	0xFF3
  7236                           postinc0	equ	0xFEE
  7237                           wreg	equ	0xFE8
  7238                           indf1	equ	0xFE7
  7239                           fsr1h	equ	0xFE2
  7240                           fsr1l	equ	0xFE1
  7241                           indf2	equ	0xFDF
  7242                           postinc2	equ	0xFDE
  7243                           postdec2	equ	0xFDD
  7244                           fsr2h	equ	0xFDA
  7245                           fsr2l	equ	0xFD9
  7246                           status	equ	0xFD8
  7247                           
  7248 ;; *************** function _vscp_handleDropNickname *****************
  7249 ;; Defined at:
  7250 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;		None
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  bytes           1   12[COMRAM] unsigned char 
  7255 ;; Return value:  Size  Location     Type
  7256 ;;		None               void
  7257 ;; Registers used:
  7258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7259 ;; Tracked objects:
  7260 ;;		On entry : F/0
  7261 ;;		On exit  : F/0
  7262 ;;		Unchanged: 0/0
  7263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7268 ;;Total ram usage:        1 bytes
  7269 ;; Hardware stack levels used:    1
  7270 ;; Hardware stack levels required when called:    5
  7271 ;; This function calls:
  7272 ;;		_vscp_init
  7273 ;;		_vscp_writeNicknamePermanent
  7274 ;; This function is called by:
  7275 ;;		_vscp_handleProtocolEvent
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           	psect	text39
  7280  002D7E                     __ptext39:
  7281                           	opt stack 0
  7282  002D7E                     _vscp_handleDropNickname:
  7283                           	opt stack 24
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7287                           
  7288                           ;incstack = 0
  7289                           ;incstack = 0
  7290  002D7E  5175               	movf	_vscp_imsg& (0+255),w,b
  7291  002D80  0B0F               	andlw	15
  7292  002D82  6E0D               	movwf	vscp_handleDropNickname@bytes,c
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7296  002D84  500D               	movf	vscp_handleDropNickname@bytes,w,c
  7297  002D86  B4D8               	btfsc	status,2,c
  7298  002D88  0012               	return	
  7299                           
  7300                           ; BSR set to: 0
  7301  002D8A  5170               	movf	_vscp_nickname& (0+255),w,b
  7302  002D8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7303  002D90  62DF               	cpfseq	indf2,c
  7304  002D92  0012               	return	
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;vscp_firmware.c: 470: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7308  002D94  040D               	decf	vscp_handleDropNickname@bytes,w,c
  7309  002D96  E005               	bz	l888
  7310                           
  7311                           ; BSR set to: 0
  7312  002D98  0E01               	movlw	1
  7313  002D9A  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
  7314  002D9C  0C01               	retlw	1
  7315                           
  7316                           ; BSR set to: 0
  7317  002D9E  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7318  002DA0  0C01               	retlw	1
  7319  002DA2                     l888:
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;vscp_firmware.c: 472: vscp_nickname = 0xff;
  7323  002DA2  6970               	setf	_vscp_nickname& (0+255),b
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;vscp_firmware.c: 473: vscp_writeNicknamePermanent(0xff);
  7327  002DA4  0EFF               	movlw	255
  7328  002DA6  EC53  F018         	call	_vscp_writeNicknamePermanent
  7329                           
  7330                           ;vscp_firmware.c: 474: vscp_init();
  7331  002DAA  EF13  F016         	goto	_vscp_init	;wreg free
  7332  002DAE                     __end_of_vscp_handleDropNickname:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           postinc0	equ	0xFEE
  7341                           wreg	equ	0xFE8
  7342                           indf1	equ	0xFE7
  7343                           fsr1h	equ	0xFE2
  7344                           fsr1l	equ	0xFE1
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _vscp_init *****************
  7353 ;; Defined at:
  7354 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;		None               void
  7361 ;; Registers used:
  7362 ;;		wreg, status,2, status,0, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/E
  7365 ;;		On exit  : F/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7372 ;;Total ram usage:        0 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    4
  7375 ;; This function calls:
  7376 ;;		_vscp_readNicknamePermanent
  7377 ;; This function is called by:
  7378 ;;		_main
  7379 ;;		_vscp_handleDropNickname
  7380 ;;		_vscp_handleProtocolEvent
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text40
  7385  002C26                     __ptext40:
  7386                           	opt stack 0
  7387  002C26                     _vscp_init:
  7388                           	opt stack 24
  7389                           
  7390                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x01;
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;incstack = 0
  7394                           ;incstack = 0
  7395  002C26  0E01               	movlw	1
  7396  002C28  6E56               	movwf	_vscp_initledfunc,c
  7397                           
  7398                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
  7399  002C2A  ECAB  F018         	call	_vscp_readNicknamePermanent	;wreg free
  7400  002C2E  0100               	movlb	0	; () banked
  7401  002C30  6F70               	movwf	_vscp_nickname& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;vscp_firmware.c: 126: if ( 0 == vscp_nickname) vscp_nickname = 0xff;
  7405  002C32  6770               	tstfsz	_vscp_nickname& (0+255),b
  7406  002C34  D001               	goto	l5951
  7407                           
  7408                           ; BSR set to: 0
  7409  002C36  6970               	setf	_vscp_nickname& (0+255),b
  7410  002C38                     l5951:
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;vscp_firmware.c: 129: if ( 0xff == vscp_nickname ) vscp_initledfunc = 0x02;
  7414  002C38  2970               	incf	_vscp_nickname& (0+255),w,b
  7415  002C3A  E102               	bnz	l5955
  7416                           
  7417                           ; BSR set to: 0
  7418  002C3C  0E02               	movlw	2
  7419  002C3E  6E56               	movwf	_vscp_initledfunc,c
  7420  002C40                     l5955:
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;vscp_firmware.c: 132: vscp_imsg.flags = 0;
  7424  002C40  6B75               	clrf	_vscp_imsg& (0+255),b
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;vscp_firmware.c: 133: vscp_imsg.priority = 0;
  7428  002C42  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;vscp_firmware.c: 134: vscp_imsg.vscp_class = 0;
  7432  002C44  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  7433  002C46  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;vscp_firmware.c: 135: vscp_imsg.vscp_type = 0;
  7437  002C48  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;vscp_firmware.c: 138: vscp_omsg.flags = 0;
  7441  002C4A  6B83               	clrf	_vscp_omsg& (0+255),b
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;vscp_firmware.c: 139: vscp_omsg.priority = 0;
  7445  002C4C  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;vscp_firmware.c: 140: vscp_omsg.vscp_class = 0;
  7449  002C4E  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7450  002C50  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;vscp_firmware.c: 141: vscp_omsg.vscp_type = 0;
  7454  002C52  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;vscp_firmware.c: 143: vscp_errorcnt = 0;
  7458  002C54  6A55               	clrf	_vscp_errorcnt,c
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;vscp_firmware.c: 144: vscp_alarmstatus = 0;
  7462  002C56  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;vscp_firmware.c: 146: vscp_probe_address = 0;
  7466  002C58  6A57               	clrf	_vscp_probe_address,c
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;vscp_firmware.c: 149: vscp_node_state = 0x00;
  7470  002C5A  6B71               	clrf	_vscp_node_state& (0+255),b
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;vscp_firmware.c: 150: vscp_node_substate = 0x00;
  7474  002C5C  6B72               	clrf	_vscp_node_substate& (0+255),b
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;vscp_firmware.c: 152: vscp_probe_cnt = 0;
  7478  002C5E  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;vscp_firmware.c: 153: vscp_page_select = 0;
  7482  002C60  6A52               	clrf	_vscp_page_select,c
  7483  002C62  6A53               	clrf	_vscp_page_select+1,c
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;vscp_firmware.c: 156: vscp_timer = 0;
  7487  002C64  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7488  002C66  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;vscp_firmware.c: 157: vscp_configtimer = 0;
  7492  002C68  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7493  002C6A  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;vscp_firmware.c: 158: vscp_second = 0;
  7497  002C6C  6B74               	clrf	_vscp_second& (0+255),b
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;vscp_firmware.c: 159: vscp_minute = 0;
  7501  002C6E  6B6F               	clrf	_vscp_minute& (0+255),b
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;vscp_firmware.c: 160: vscp_hour = 0;
  7505  002C70  6B6D               	clrf	_vscp_hour& (0+255),b
  7506                           
  7507                           ; BSR set to: 0
  7508  002C72  0012               	return	
  7509  002C74                     __end_of_vscp_init:
  7510                           	opt stack 0
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           postinc0	equ	0xFEE
  7518                           wreg	equ	0xFE8
  7519                           indf1	equ	0xFE7
  7520                           fsr1h	equ	0xFE2
  7521                           fsr1l	equ	0xFE1
  7522                           indf2	equ	0xFDF
  7523                           postinc2	equ	0xFDE
  7524                           postdec2	equ	0xFDD
  7525                           fsr2h	equ	0xFDA
  7526                           fsr2l	equ	0xFD9
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _vscp_readNicknamePermanent *****************
  7530 ;; Defined at:
  7531 ;;		line 527 in file "../main.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      unsigned char 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2, status,0, cstack
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/E
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; Hardware stack levels required when called:    3
  7552 ;; This function calls:
  7553 ;;		_Read_b_eep
  7554 ;; This function is called by:
  7555 ;;		_vscp_init
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text41
  7560  003156                     __ptext41:
  7561                           	opt stack 0
  7562  003156                     _vscp_readNicknamePermanent:
  7563                           	opt stack 24
  7564                           
  7565                           ;main.c: 528: return Read_b_eep(0x01);
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;incstack = 0
  7569                           ;incstack = 0
  7570  003156  6A09               	clrf	?_Read_b_eep+1,c
  7571  003158  0E01               	movlw	1
  7572  00315A  6E08               	movwf	?_Read_b_eep,c
  7573  00315C  EF25  F018         	goto	_Read_b_eep	;wreg free
  7574  003160                     __end_of_vscp_readNicknamePermanent:
  7575                           	opt stack 0
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           postinc0	equ	0xFEE
  7583                           wreg	equ	0xFE8
  7584                           indf1	equ	0xFE7
  7585                           fsr1h	equ	0xFE2
  7586                           fsr1l	equ	0xFE1
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           postdec2	equ	0xFDD
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function _vscp_handleSetNickname *****************
  7595 ;; Defined at:
  7596 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;		None
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;		None
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : F/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7614 ;;Total ram usage:        0 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    4
  7617 ;; This function calls:
  7618 ;;		_vscp_writeNicknamePermanent
  7619 ;; This function is called by:
  7620 ;;		_vscp_handleProtocolEvent
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text42
  7625  002F7E                     __ptext42:
  7626                           	opt stack 0
  7627  002F7E                     _vscp_handleSetNickname:
  7628                           	opt stack 25
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;vscp_firmware.c: 415: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
  7632                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7633                           
  7634                           ;incstack = 0
  7635                           ;incstack = 0
  7636  002F7E  5175               	movf	_vscp_imsg& (0+255),w,b
  7637  002F80  0B0F               	andlw	15
  7638  002F82  0A02               	xorlw	2
  7639  002F84  A4D8               	btfss	status,2,c
  7640  002F86  0012               	return	
  7641                           
  7642                           ; BSR set to: 0
  7643  002F88  5170               	movf	_vscp_nickname& (0+255),w,b
  7644  002F8A  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7645  002F8E  62DF               	cpfseq	indf2,c
  7646  002F90  0012               	return	
  7647                           
  7648                           ; BSR set to: 0
  7649                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
  7650  002F92  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
  7654  002F96  5170               	movf	_vscp_nickname& (0+255),w,b
  7655  002F98  EF53  F018         	goto	_vscp_writeNicknamePermanent
  7656  002F9C                     __end_of_vscp_handleSetNickname:
  7657                           	opt stack 0
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           postinc0	equ	0xFEE
  7665                           wreg	equ	0xFE8
  7666                           indf1	equ	0xFE7
  7667                           fsr1h	equ	0xFE2
  7668                           fsr1l	equ	0xFE1
  7669                           indf2	equ	0xFDF
  7670                           postinc2	equ	0xFDE
  7671                           postdec2	equ	0xFDD
  7672                           fsr2h	equ	0xFDA
  7673                           fsr2l	equ	0xFD9
  7674                           status	equ	0xFD8
  7675                           
  7676 ;; *************** function _vscp_handleHeartbeat *****************
  7677 ;; Defined at:
  7678 ;;		line 405 in file "../../vscp_firmware/common/vscp_firmware.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;		None
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;		None               void
  7685 ;; Registers used:
  7686 ;;		None
  7687 ;; Tracked objects:
  7688 ;;		On entry : F/0
  7689 ;;		On exit  : F/0
  7690 ;;		Unchanged: F/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7696 ;;Total ram usage:        0 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    2
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_vscp_handleProtocolEvent
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text43
  7707  003186                     __ptext43:
  7708                           	opt stack 0
  7709  003186                     _vscp_handleHeartbeat:
  7710                           	opt stack 27
  7711                           
  7712                           ; BSR set to: 0
  7713                           
  7714                           ;incstack = 0
  7715                           ;incstack = 0
  7716  003186  0012               	return	
  7717  003188                     __end_of_vscp_handleHeartbeat:
  7718                           	opt stack 0
  7719                           tblptru	equ	0xFF8
  7720                           tblptrh	equ	0xFF7
  7721                           tblptrl	equ	0xFF6
  7722                           tablat	equ	0xFF5
  7723                           prodh	equ	0xFF4
  7724                           prodl	equ	0xFF3
  7725                           postinc0	equ	0xFEE
  7726                           wreg	equ	0xFE8
  7727                           indf1	equ	0xFE7
  7728                           fsr1h	equ	0xFE2
  7729                           fsr1l	equ	0xFE1
  7730                           indf2	equ	0xFDF
  7731                           postinc2	equ	0xFDE
  7732                           postdec2	equ	0xFDD
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737 ;; *************** function _vscp_getMatrixInfo *****************
  7738 ;; Defined at:
  7739 ;;		line 1397 in file "../main.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  pData           1    wreg     PTR unsigned char 
  7742 ;;		 -> vscp_omsg(14), 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;  pData           1    0[COMRAM] PTR unsigned char 
  7745 ;;		 -> vscp_omsg(14), 
  7746 ;;  i               1    0        unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;		None               void
  7749 ;; Registers used:
  7750 ;;		wreg, status,2
  7751 ;; Tracked objects:
  7752 ;;		On entry : F/0
  7753 ;;		On exit  : F/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7760 ;;Total ram usage:        0 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; Hardware stack levels required when called:    2
  7763 ;; This function calls:
  7764 ;;		Nothing
  7765 ;; This function is called by:
  7766 ;;		_vscp_handleProtocolEvent
  7767 ;; This function uses a non-reentrant model
  7768 ;;
  7769                           
  7770                           	psect	text44
  7771  003090                     __ptext44:
  7772                           	opt stack 0
  7773  003090                     _vscp_getMatrixInfo:
  7774                           	opt stack 27
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;main.c: 1398: uint8_t i;
  7778                           ;main.c: 1400: vscp_omsg.data[ 0 ] = 8;
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;incstack = 0
  7782                           ;incstack = 0
  7783  003090  0E08               	movlw	8
  7784  003092  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;main.c: 1401: vscp_omsg.data[ 1 ] = 0;
  7788  003094  6B8A               	clrf	(_vscp_omsg+7)& (0+255),b
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;main.c: 1402: vscp_omsg.data[ 2 ] = 0;
  7792  003096  6B8B               	clrf	(_vscp_omsg+8)& (0+255),b
  7793                           
  7794                           ;main.c: 1403: vscp_omsg.data[ 3 ] = 1;
  7795  003098  0E01               	movlw	1
  7796  00309A  6F8C               	movwf	(_vscp_omsg+9)& (0+255),b
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;main.c: 1404: vscp_omsg.data[ 4 ] = 0;
  7800  00309C  6B8D               	clrf	(_vscp_omsg+10)& (0+255),b
  7801                           
  7802                           ;main.c: 1405: vscp_omsg.data[ 5 ] = 1;
  7803  00309E  0E01               	movlw	1
  7804  0030A0  6F8E               	movwf	(_vscp_omsg+11)& (0+255),b
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;main.c: 1406: vscp_omsg.data[ 6 ] = 0;
  7808  0030A2  6B8F               	clrf	(_vscp_omsg+12)& (0+255),b
  7809                           
  7810                           ; BSR set to: 0
  7811  0030A4  0012               	return	
  7812  0030A6                     __end_of_vscp_getMatrixInfo:
  7813                           	opt stack 0
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           postinc0	equ	0xFEE
  7821                           wreg	equ	0xFE8
  7822                           indf1	equ	0xFE7
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function _vscp_goBootloaderMode *****************
  7833 ;; Defined at:
  7834 ;;		line 1381 in file "../main.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  algorithm       1    wreg     unsigned char 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;  algorithm       1   11[COMRAM] unsigned char 
  7839 ;; Return value:  Size  Location     Type
  7840 ;;		None               void
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0, cstack
  7843 ;; Tracked objects:
  7844 ;;		On entry : F/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7851 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7852 ;;Total ram usage:        1 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; Hardware stack levels required when called:    3
  7855 ;; This function calls:
  7856 ;;		_Busy_eep
  7857 ;;		_Write_b_eep
  7858 ;; This function is called by:
  7859 ;;		_vscp_handleProtocolEvent
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text45
  7864  002F9C                     __ptext45:
  7865                           	opt stack 0
  7866  002F9C                     _vscp_goBootloaderMode:
  7867                           	opt stack 26
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;incstack = 0
  7871                           ;incstack = 0
  7872                           ;vscp_goBootloaderMode@algorithm stored from wreg
  7873  002F9C  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;main.c: 1382: if ( 0x01 != algorithm ) return;
  7877  002FA0  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
  7878  002FA2  A4D8               	btfss	status,2,c
  7879  002FA4  0012               	return	
  7880                           
  7881                           ; BSR set to: 0
  7882                           ;main.c: 1386: (Busy_eep(), Write_b_eep(0x00,0xff));
  7883  002FA6  ECB4  F018         	call	_Busy_eep	;wreg free
  7884  002FAA  6A09               	clrf	?_Write_b_eep+1,c
  7885  002FAC  6A08               	clrf	?_Write_b_eep,c
  7886  002FAE  0EFF               	movlw	255
  7887  002FB0  680A               	setf	?_Write_b_eep+2,c
  7888  002FB2  EC57  F016         	call	_Write_b_eep	;wreg free
  7889  002FB6  00FF               	reset		;# 
  7890  002FB8  0012               	return	
  7891  002FBA                     __end_of_vscp_goBootloaderMode:
  7892                           	opt stack 0
  7893                           tblptru	equ	0xFF8
  7894                           tblptrh	equ	0xFF7
  7895                           tblptrl	equ	0xFF6
  7896                           tablat	equ	0xFF5
  7897                           prodh	equ	0xFF4
  7898                           prodl	equ	0xFF3
  7899                           postinc0	equ	0xFEE
  7900                           wreg	equ	0xFE8
  7901                           indf1	equ	0xFE7
  7902                           fsr1h	equ	0xFE2
  7903                           fsr1l	equ	0xFE1
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _vscp_handleProbeState *****************
  7912 ;; Defined at:
  7913 ;;		line 211 in file "../../vscp_firmware/common/vscp_firmware.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;		None
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;		None
  7918 ;; Return value:  Size  Location     Type
  7919 ;;		None               void
  7920 ;; Registers used:
  7921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : F/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7931 ;;Total ram usage:        0 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    8
  7934 ;; This function calls:
  7935 ;;		_vscp_goActiveState
  7936 ;;		_vscp_writeNicknamePermanent
  7937 ;;		_vscp_sendEvent
  7938 ;; This function is called by:
  7939 ;;		_main
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text46
  7944  0027FA                     __ptext46:
  7945                           	opt stack 0
  7946  0027FA                     _vscp_handleProbeState:
  7947                           	opt stack 22
  7948                           
  7949                           ;vscp_firmware.c: 212: switch (vscp_node_substate) {
  7950                           
  7951                           ;incstack = 0
  7952                           ;incstack = 0
  7953  0027FA  D051               	goto	l6091
  7954  0027FC                     l6023:
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;vscp_firmware.c: 216: if (0xff != vscp_probe_address) {
  7958  0027FC  2857               	incf	_vscp_probe_address,w,c
  7959  0027FE  E011               	bz	l6039
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;vscp_firmware.c: 218: vscp_omsg.flags = 0x80 + 1;
  7963  002800  0E81               	movlw	129
  7964  002802  6F83               	movwf	_vscp_omsg& (0+255),b
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;vscp_firmware.c: 219: vscp_omsg.priority = 0x00;
  7968  002804  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;vscp_firmware.c: 220: vscp_omsg.vscp_class = 0;
  7972  002806  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7973  002808  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7974                           
  7975                           ;vscp_firmware.c: 221: vscp_omsg.vscp_type = 2;
  7976  00280A  0E02               	movlw	2
  7977  00280C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;vscp_firmware.c: 222: vscp_omsg.data[ 0 ] = vscp_probe_address;
  7981  00280E  C057  F089         	movff	_vscp_probe_address,_vscp_omsg+6
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;vscp_firmware.c: 225: vscp_sendEvent();
  7985  002812  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  7986                           
  7987                           ;vscp_firmware.c: 227: vscp_node_substate = 0x01;
  7988  002816  0E01               	movlw	1
  7989  002818  0100               	movlb	0	; () banked
  7990  00281A  6F72               	movwf	_vscp_node_substate& (0+255),b
  7991  00281C                     l6037:
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;vscp_firmware.c: 228: vscp_timer = 0;
  7995  00281C  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7996  00281E  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7997                           
  7998                           ;vscp_firmware.c: 230: }
  7999  002820  D045               	goto	l848
  8000  002822                     l6039:
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;vscp_firmware.c: 231: else {
  8004                           ;vscp_firmware.c: 234: vscp_node_state = 0x04;
  8005  002822  0E04               	movlw	4
  8006  002824  6F71               	movwf	_vscp_node_state& (0+255),b
  8007                           
  8008                           ;vscp_firmware.c: 237: vscp_omsg.flags = 0x80 + 1;
  8009  002826  0E81               	movlw	129
  8010  002828  6F83               	movwf	_vscp_omsg& (0+255),b
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;vscp_firmware.c: 238: vscp_omsg.data[ 0 ] = 0xff;
  8014  00282A  6989               	setf	(_vscp_omsg+6)& (0+255),b
  8015                           
  8016                           ;vscp_firmware.c: 239: vscp_omsg.priority = 0x07;
  8017  00282C  0E07               	movlw	7
  8018  00282E  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  8019                           
  8020                           ; BSR set to: 0
  8021                           ;vscp_firmware.c: 240: vscp_omsg.vscp_class = 0;
  8022  002830  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8023  002832  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8024                           
  8025                           ;vscp_firmware.c: 241: vscp_omsg.vscp_type = 3;
  8026  002834  0E03               	movlw	3
  8027  002836  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;vscp_firmware.c: 244: vscp_sendEvent();
  8031  002838  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  8032  00283C  D037               	goto	l848
  8033  00283E                     l849:
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;vscp_firmware.c: 251: if (vscp_imsg.flags & 0x80) {
  8037  00283E  AF75               	btfss	_vscp_imsg& (0+255),7,b
  8038  002840  D00F               	goto	l6063
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;vscp_firmware.c: 254: if ((0 == vscp_imsg.vscp_class) &&
  8042                           ;vscp_firmware.c: 255: (3 == vscp_imsg.vscp_type)) {
  8043  002842  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  8044  002844  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8045  002846  E132               	bnz	l848
  8046                           
  8047                           ; BSR set to: 0
  8048  002848  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  8049  00284A  0A03               	xorlw	3
  8050  00284C  E12F               	bnz	l848
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;vscp_firmware.c: 258: if (0 == vscp_probe_address) {
  8054  00284E  6657               	tstfsz	_vscp_probe_address,c
  8055  002850  D003               	goto	l6057
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;vscp_firmware.c: 262: vscp_node_state = 0x02;
  8059  002852  0E02               	movlw	2
  8060  002854  6F71               	movwf	_vscp_node_state& (0+255),b
  8061  002856  D7E2               	goto	l6037
  8062  002858                     l6057:
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;vscp_firmware.c: 266: else {
  8066                           ;vscp_firmware.c: 269: vscp_probe_address++;
  8067  002858  2A57               	incf	_vscp_probe_address,f,c
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;vscp_firmware.c: 270: vscp_node_substate = 0x00;
  8071  00285A  6B72               	clrf	_vscp_node_substate& (0+255),b
  8072  00285C                     l6061:
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;vscp_firmware.c: 271: vscp_probe_cnt = 0;
  8076  00285C  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8077  00285E  D026               	goto	l848
  8078  002860                     l6063:
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;vscp_firmware.c: 276: else {
  8082                           ;vscp_firmware.c: 278: if (vscp_timer > 1000) {
  8083  002860  0EE9               	movlw	233
  8084  002862  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8085  002864  0E03               	movlw	3
  8086  002866  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8087  002868  E321               	bnc	l848
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;vscp_firmware.c: 280: vscp_probe_cnt++;
  8091  00286A  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;vscp_firmware.c: 282: if (vscp_probe_cnt >= 3) {
  8095  00286C  0E02               	movlw	2
  8096  00286E  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8097  002870  D014               	goto	l856
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;vscp_firmware.c: 285: if (0 == vscp_probe_address) {
  8101  002872  6657               	tstfsz	_vscp_probe_address,c
  8102  002874  D005               	goto	l857
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;vscp_firmware.c: 288: vscp_probe_address++;
  8106  002876  2A57               	incf	_vscp_probe_address,f,c
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;vscp_firmware.c: 289: vscp_node_substate = 0x00;
  8110  002878  6B72               	clrf	_vscp_node_substate& (0+255),b
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;vscp_firmware.c: 290: vscp_timer = 0;
  8114  00287A  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8115  00287C  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8116  00287E  D7EE               	goto	l6061
  8117  002880                     l857:
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;vscp_firmware.c: 294: else {
  8121                           ;vscp_firmware.c: 297: vscp_nickname = vscp_probe_address;
  8122  002880  C057  F070         	movff	_vscp_probe_address,_vscp_nickname
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;vscp_firmware.c: 298: vscp_node_state = 0x03;
  8126  002884  0E03               	movlw	3
  8127  002886  6F71               	movwf	_vscp_node_state& (0+255),b
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;vscp_firmware.c: 299: vscp_node_substate = 0x00;
  8131  002888  6B72               	clrf	_vscp_node_substate& (0+255),b
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;vscp_firmware.c: 300: vscp_writeNicknamePermanent(vscp_nickname);
  8135  00288A  5170               	movf	_vscp_nickname& (0+255),w,b
  8136  00288C  EC53  F018         	call	_vscp_writeNicknamePermanent
  8137                           
  8138                           ;vscp_firmware.c: 303: vscp_probe_cnt = 0;
  8139  002890  0100               	movlb	0	; () banked
  8140  002892  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;vscp_firmware.c: 304: vscp_goActiveState();
  8144  002894  ECDD  F017         	call	_vscp_goActiveState	;wreg free
  8145  002898  D009               	goto	l848
  8146  00289A                     l856:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;vscp_firmware.c: 308: else {
  8150                           ;vscp_firmware.c: 309: vscp_node_substate = 0x00;
  8151  00289A  6B72               	clrf	_vscp_node_substate& (0+255),b
  8152  00289C  D007               	goto	l848
  8153  00289E                     l6091:
  8154  00289E  0100               	movlb	0	; () banked
  8155  0028A0  5172               	movf	_vscp_node_substate& (0+255),w,b
  8156                           
  8157                           ; Switch size 1, requested type "speed"
  8158                           ; Number of cases is 3, Range of values is 0 to 2
  8159                           ; switch strategies available:
  8160                           ; Name         Instructions Cycles
  8161                           ; simple_byte           10     6 (average)
  8162                           ;	Chosen strategy is simple_byte
  8163  0028A2  E0AC               	bz	l6023
  8164  0028A4  0A01               	xorlw	1	; case 1
  8165  0028A6  E0CB               	bz	l849
  8166  0028A8  0A03               	xorlw	3	; case 2
  8167  0028AA  E1F7               	bnz	l856
  8168  0028AC                     l848:
  8169                           
  8170                           ;vscp_firmware.c: 324: vscp_imsg.flags = 0;
  8171  0028AC  0100               	movlb	0	; () banked
  8172  0028AE  6B75               	clrf	_vscp_imsg& (0+255),b
  8173                           
  8174                           ; BSR set to: 0
  8175  0028B0  0012               	return	
  8176  0028B2                     __end_of_vscp_handleProbeState:
  8177                           	opt stack 0
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           postinc0	equ	0xFEE
  8185                           wreg	equ	0xFE8
  8186                           indf1	equ	0xFE7
  8187                           fsr1h	equ	0xFE2
  8188                           fsr1l	equ	0xFE1
  8189                           indf2	equ	0xFDF
  8190                           postinc2	equ	0xFDE
  8191                           postdec2	equ	0xFDD
  8192                           fsr2h	equ	0xFDA
  8193                           fsr2l	equ	0xFD9
  8194                           status	equ	0xFD8
  8195                           
  8196 ;; *************** function _vscp_goActiveState *****************
  8197 ;; Defined at:
  8198 ;;		line 367 in file "../../vscp_firmware/common/vscp_firmware.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;		None
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;		None
  8203 ;; Return value:  Size  Location     Type
  8204 ;;		None               void
  8205 ;; Registers used:
  8206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8207 ;; Tracked objects:
  8208 ;;		On entry : 0/0
  8209 ;;		On exit  : 0/0
  8210 ;;		Unchanged: 0/0
  8211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8216 ;;Total ram usage:        0 bytes
  8217 ;; Hardware stack levels used:    1
  8218 ;; Hardware stack levels required when called:    7
  8219 ;; This function calls:
  8220 ;;		_vscp_sendEvent
  8221 ;; This function is called by:
  8222 ;;		_main
  8223 ;;		_vscp_handleProbeState
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text47
  8228  002FBA                     __ptext47:
  8229                           	opt stack 0
  8230  002FBA                     _vscp_goActiveState:
  8231                           	opt stack 22
  8232                           
  8233                           ;vscp_firmware.c: 368: vscp_omsg.flags = 0x80 + 1;
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;incstack = 0
  8237                           ;incstack = 0
  8238  002FBA  0E81               	movlw	129
  8239  002FBC  0100               	movlb	0	; () banked
  8240  002FBE  6F83               	movwf	_vscp_omsg& (0+255),b
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;vscp_firmware.c: 369: vscp_omsg.priority = 0x00;
  8244  002FC0  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;vscp_firmware.c: 370: vscp_omsg.vscp_class = 0;
  8248  002FC2  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8249  002FC4  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8250                           
  8251                           ;vscp_firmware.c: 371: vscp_omsg.vscp_type = 2;
  8252  002FC6  0E02               	movlw	2
  8253  002FC8  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;vscp_firmware.c: 372: vscp_omsg.data[ 0 ] = vscp_nickname;
  8257  002FCA  C070  F089         	movff	_vscp_nickname,_vscp_omsg+6
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;vscp_firmware.c: 375: vscp_sendEvent();
  8261  002FCE  ECD7  F016         	call	_vscp_sendEvent	;wreg free
  8262                           
  8263                           ;vscp_firmware.c: 377: vscp_initledfunc = 0x01;
  8264  002FD2  0E01               	movlw	1
  8265  002FD4  6E56               	movwf	_vscp_initledfunc,c
  8266  002FD6  0C01               	retlw	1
  8267  002FD8                     __end_of_vscp_goActiveState:
  8268                           	opt stack 0
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           postinc0	equ	0xFEE
  8276                           wreg	equ	0xFE8
  8277                           indf1	equ	0xFE7
  8278                           fsr1h	equ	0xFE2
  8279                           fsr1l	equ	0xFE1
  8280                           indf2	equ	0xFDF
  8281                           postinc2	equ	0xFDE
  8282                           postdec2	equ	0xFDD
  8283                           fsr2h	equ	0xFDA
  8284                           fsr2l	equ	0xFD9
  8285                           status	equ	0xFD8
  8286                           
  8287 ;; *************** function _vscp_sendEvent *****************
  8288 ;; Defined at:
  8289 ;;		line 1285 in file "../../vscp_firmware/common/vscp_firmware.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;  rv              1   74[COMRAM] unsigned char 
  8294 ;; Return value:  Size  Location     Type
  8295 ;;                  1    wreg      unsigned char 
  8296 ;; Registers used:
  8297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : F/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8306 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8307 ;;Total ram usage:        1 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    6
  8310 ;; This function calls:
  8311 ;;		_sendVSCPFrame
  8312 ;; This function is called by:
  8313 ;;		_vscp_handleProbeState
  8314 ;;		_vscp_goActiveState
  8315 ;;		_vscp_sendHeartBeat
  8316 ;;		_vscp_newNodeOnline
  8317 ;;		_vscp_handleProtocolEvent
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text48
  8322  002DAE                     __ptext48:
  8323                           	opt stack 0
  8324  002DAE                     _vscp_sendEvent:
  8325                           	opt stack 22
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;vscp_firmware.c: 1286: int8_t rv;
  8329                           ;vscp_firmware.c: 1288: if ( !(rv = sendVSCPFrame( vscp_omsg.vscp_class,
  8330                           ;vscp_firmware.c: 1289: vscp_omsg.vscp_type,
  8331                           ;vscp_firmware.c: 1290: vscp_nickname,
  8332                           ;vscp_firmware.c: 1291: vscp_omsg.priority,
  8333                           ;vscp_firmware.c: 1292: (vscp_omsg.flags & 0x0f),
  8334                           ;vscp_firmware.c: 1293: vscp_omsg.data ) ) ) {
  8335                           
  8336                           ;incstack = 0
  8337                           ;incstack = 0
  8338  002DAE  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8339  002DB2  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8340  002DB6  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8341  002DBA  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8342  002DBE  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8343  002DC2  5183               	movf	_vscp_omsg& (0+255),w,b
  8344  002DC4  0B0F               	andlw	15
  8345  002DC6  6E44               	movwf	?_sendVSCPFrame+5,c
  8346  002DC8  0E00               	movlw	high (_vscp_omsg+6)
  8347  002DCA  6E46               	movwf	?_sendVSCPFrame+7,c
  8348  002DCC  0E89               	movlw	low (_vscp_omsg+6)
  8349  002DCE  6E45               	movwf	?_sendVSCPFrame+6,c
  8350  002DD0  EC59  F014         	call	_sendVSCPFrame	;wreg free
  8351  002DD4  6E4B               	movwf	vscp_sendEvent@rv,c
  8352  002DD6  664B               	tstfsz	vscp_sendEvent@rv& (0+255),c
  8353  002DD8  0012               	return	
  8354                           
  8355                           ;vscp_firmware.c: 1294: vscp_errorcnt++;
  8356  002DDA  2A55               	incf	_vscp_errorcnt,f,c
  8357  002DDC  0012               	return	
  8358  002DDE                     __end_of_vscp_sendEvent:
  8359                           	opt stack 0
  8360                           tblptru	equ	0xFF8
  8361                           tblptrh	equ	0xFF7
  8362                           tblptrl	equ	0xFF6
  8363                           tablat	equ	0xFF5
  8364                           prodh	equ	0xFF4
  8365                           prodl	equ	0xFF3
  8366                           postinc0	equ	0xFEE
  8367                           wreg	equ	0xFE8
  8368                           indf1	equ	0xFE7
  8369                           fsr1h	equ	0xFE2
  8370                           fsr1l	equ	0xFE1
  8371                           indf2	equ	0xFDF
  8372                           postinc2	equ	0xFDE
  8373                           postdec2	equ	0xFDD
  8374                           fsr2h	equ	0xFDA
  8375                           fsr2l	equ	0xFD9
  8376                           status	equ	0xFD8
  8377                           
  8378 ;; *************** function _sendVSCPFrame *****************
  8379 ;; Defined at:
  8380 ;;		line 1455 in file "../main.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8383 ;;  vscptype        1   64[COMRAM] unsigned char 
  8384 ;;  nodeid          1   65[COMRAM] unsigned char 
  8385 ;;  priority        1   66[COMRAM] unsigned char 
  8386 ;;  size            1   67[COMRAM] unsigned char 
  8387 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8388 ;;		 -> SendInformationEvent@data(3), vscp_omsg(14), 
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  id              4   70[COMRAM] unsigned long 
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  1    wreg      unsigned char 
  8393 ;; Registers used:
  8394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8395 ;; Tracked objects:
  8396 ;;		On entry : F/0
  8397 ;;		On exit  : F/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8400 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8401 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8402 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8403 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8404 ;;Total ram usage:       32 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; Hardware stack levels required when called:    5
  8407 ;; This function calls:
  8408 ;;		_sendCANFrame
  8409 ;; This function is called by:
  8410 ;;		_SendInformationEvent
  8411 ;;		_vscp_sendEvent
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           	psect	text49
  8416  0028B2                     __ptext49:
  8417                           	opt stack 0
  8418  0028B2                     _sendVSCPFrame:
  8419                           	opt stack 22
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;main.c: 1456: uint32_t id = ( (uint32_t)priority << 26 ) |
  8423                           ;main.c: 1457: ( (uint32_t)vscpclass << 16 ) |
  8424                           ;main.c: 1458: ( (uint32_t)vscptype << 8 ) |
  8425                           ;main.c: 1459: nodeid;
  8426                           
  8427                           ;incstack = 0
  8428                           ;incstack = 0
  8429  0028B2  C041  F091         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  8430  0028B6  6B92               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  8431  0028B8  6B93               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  8432  0028BA  6B94               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  8433  0028BC  C093  F094         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  8434  0028C0  C092  F093         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  8435  0028C4  C091  F092         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  8436  0028C8  6B91               	clrf	??_sendVSCPFrame& (0+255),b
  8437  0028CA  503F               	movf	sendVSCPFrame@vscpclass,w,c
  8438  0028CC  6F95               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  8439  0028CE  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  8440  0028D0  6F96               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  8441  0028D2  6B97               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  8442  0028D4  6B98               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  8443  0028D6  C096  F098         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  8444  0028DA  C095  F097         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  8445  0028DE  6B96               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  8446  0028E0  6B95               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  8447  0028E2  C043  F099         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  8448  0028E6  6B9A               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  8449  0028E8  6B9B               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  8450  0028EA  6B9C               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  8451  0028EC  0E1A               	movlw	26
  8452  0028EE                     u6845:
  8453  0028EE  90D8               	bcf	status,0,c
  8454  0028F0  3799               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  8455  0028F2  379A               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  8456  0028F4  379B               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  8457  0028F6  379C               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  8458  0028F8  2EE8               	decfsz	wreg,f,c
  8459  0028FA  D7F9               	goto	u6845
  8460  0028FC  5195               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  8461  0028FE  1199               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  8462  002900  6F9D               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  8463  002902  5196               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  8464  002904  119A               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  8465  002906  6F9E               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  8466  002908  5197               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  8467  00290A  119B               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  8468  00290C  6F9F               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  8469  00290E  5198               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  8470  002910  119C               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  8471  002912  6FA0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  8472  002914  5191               	movf	??_sendVSCPFrame& (0+255),w,b
  8473  002916  119D               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  8474  002918  6FA1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  8475  00291A  5192               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  8476  00291C  119E               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  8477  00291E  6FA2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  8478  002920  5193               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  8479  002922  119F               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  8480  002924  6FA3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  8481  002926  5194               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  8482  002928  11A0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  8483  00292A  6FA4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  8484  00292C  5042               	movf	sendVSCPFrame@nodeid,w,c
  8485  00292E  11A1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  8486  002930  6E47               	movwf	sendVSCPFrame@id,c
  8487  002932  51A2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  8488  002934  6E48               	movwf	sendVSCPFrame@id+1,c
  8489  002936  51A3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  8490  002938  6E49               	movwf	sendVSCPFrame@id+2,c
  8491  00293A  51A4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  8492  00293C  6E4A               	movwf	sendVSCPFrame@id+3,c
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;main.c: 1461: if ( !sendCANFrame( id, size, pData ) ) {
  8496  00293E  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  8497  002942  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  8498  002946  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  8499  00294A  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  8500  00294E  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  8501  002952  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  8502  002956  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  8503  00295A  ECEF  F016         	call	_sendCANFrame	;wreg free
  8504  00295E  0900               	iorlw	0
  8505  002960  E101               	bnz	l6765
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;main.c: 1462: return 0;
  8509  002962  0C00               	retlw	0
  8510  002964                     l6765:
  8511                           
  8512                           ; BSR set to: 0
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1463: }
  8516                           ;main.c: 1465: return 1;
  8517  002964  0C01               	retlw	1
  8518  002966                     __end_of_sendVSCPFrame:
  8519                           	opt stack 0
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           postinc0	equ	0xFEE
  8527                           wreg	equ	0xFE8
  8528                           indf1	equ	0xFE7
  8529                           fsr1h	equ	0xFE2
  8530                           fsr1l	equ	0xFE1
  8531                           indf2	equ	0xFDF
  8532                           postinc2	equ	0xFDE
  8533                           postdec2	equ	0xFDD
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538 ;; *************** function _sendCANFrame *****************
  8539 ;; Defined at:
  8540 ;;		line 1500 in file "../main.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  id              4   54[COMRAM] unsigned long 
  8543 ;;  dlc             1   58[COMRAM] unsigned char 
  8544 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  8545 ;;		 -> SendInformationEvent@data(3), vscp_omsg(14), 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  rv              1    0        unsigned char 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      unsigned char 
  8550 ;; Registers used:
  8551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : F/0
  8554 ;;		On exit  : F/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8557 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8560 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8561 ;;Total ram usage:        8 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    4
  8564 ;; This function calls:
  8565 ;;		_ECANSendMessage
  8566 ;; This function is called by:
  8567 ;;		_sendVSCPFrame
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text50
  8572  002DDE                     __ptext50:
  8573                           	opt stack 0
  8574  002DDE                     _sendCANFrame:
  8575                           	opt stack 22
  8576  002DDE                     l6865:
  8577                           
  8578                           ;main.c: 1505: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  8579  002DDE  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  8580  002DE2  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  8581  002DE6  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  8582  002DEA  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  8583  002DEE  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  8584  002DF2  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  8585  002DF6  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  8586  002DFA  0E20               	movlw	32
  8587  002DFC  6E19               	movwf	?_ECANSendMessage+7,c
  8588  002DFE  ECA2  F00E         	call	_ECANSendMessage	;wreg free
  8589  002E02  0900               	iorlw	0
  8590  002E04  E0EC               	bz	l6865
  8591                           
  8592                           ;main.c: 1508: }
  8593                           ;main.c: 1509: }
  8594                           ;main.c: 1511: vscp_omsg.flags = 0;
  8595                           
  8596                           ;main.c: 1507: break;
  8597  002E06  0100               	movlb	0	; () banked
  8598  002E08  6B83               	clrf	_vscp_omsg& (0+255),b
  8599                           
  8600                           ; BSR set to: 0
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;main.c: 1513: return rv;
  8604  002E0A  0C01               	retlw	1
  8605  002E0C                     __end_of_sendCANFrame:
  8606                           	opt stack 0
  8607                           tblptru	equ	0xFF8
  8608                           tblptrh	equ	0xFF7
  8609                           tblptrl	equ	0xFF6
  8610                           tablat	equ	0xFF5
  8611                           prodh	equ	0xFF4
  8612                           prodl	equ	0xFF3
  8613                           postinc0	equ	0xFEE
  8614                           wreg	equ	0xFE8
  8615                           indf1	equ	0xFE7
  8616                           fsr1h	equ	0xFE2
  8617                           fsr1l	equ	0xFE1
  8618                           indf2	equ	0xFDF
  8619                           postinc2	equ	0xFDE
  8620                           postdec2	equ	0xFDD
  8621                           fsr2h	equ	0xFDA
  8622                           fsr2l	equ	0xFD9
  8623                           status	equ	0xFD8
  8624                           
  8625 ;; *************** function _ECANSendMessage *****************
  8626 ;; Defined at:
  8627 ;;		line 617 in file "../ECAN.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  id              4   17[COMRAM] unsigned long 
  8630 ;;  data            2   21[COMRAM] PTR unsigned char 
  8631 ;;		 -> SendInformationEvent@data(3), vscp_omsg(14), 
  8632 ;;  dataLen         1   23[COMRAM] unsigned char 
  8633 ;;  msgFlags        1   24[COMRAM] enum E18958
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  8636 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8637 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8638 ;;		 -> B0CON(1), 
  8639 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  8640 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8641 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8642 ;;		 -> B0CON(1), 
  8643 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  8644 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8645 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8646 ;;		 -> B0CON(1), 
  8647 ;;  i               1   51[COMRAM] unsigned char 
  8648 ;;  temp            1   50[COMRAM] unsigned char 
  8649 ;;  tempBSEL0       1   47[COMRAM] struct .
  8650 ;;  j               1   46[COMRAM] unsigned char 
  8651 ;;  buffers         1   45[COMRAM] unsigned char 
  8652 ;;  mode            1   44[COMRAM] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  1    wreg      enum E18242
  8655 ;; Registers used:
  8656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8662 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8663 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8664 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8665 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8666 ;;Total ram usage:       37 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    3
  8669 ;; This function calls:
  8670 ;;		__CANIDToRegs
  8671 ;; This function is called by:
  8672 ;;		_sendCANFrame
  8673 ;; This function uses a non-reentrant model
  8674 ;;
  8675                           
  8676                           	psect	text51
  8677  001D44                     __ptext51:
  8678                           	opt stack 0
  8679  001D44                     _ECANSendMessage:
  8680                           	opt stack 22
  8681                           
  8682                           ;ECAN.c: 619: BYTE mode;
  8683                           ;ECAN.c: 620: BYTE buffers;
  8684                           ;ECAN.c: 628: BYTE i,j;
  8685                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  8686                           ;ECAN.c: 630: BYTE* pb[9];
  8687                           ;ECAN.c: 631: BYTE temp;
  8688                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  8689                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;incstack = 0
  8693                           ;incstack = 0
  8694  001D44  0E0F               	movlw	15	;volatile
  8695  001D46  6E1C               	movwf	ECANSendMessage@pb+1,c
  8696  001D48  0E20               	movlw	32	;volatile
  8697  001D4A  6E1B               	movwf	ECANSendMessage@pb,c
  8698                           
  8699                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  8700  001D4C  0E0F               	movlw	15	;volatile
  8701  001D4E  6E1E               	movwf	ECANSendMessage@pb+3,c
  8702  001D50  0E10               	movlw	16	;volatile
  8703  001D52  6E1D               	movwf	ECANSendMessage@pb+2,c
  8704                           
  8705                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  8706  001D54  0E0F               	movlw	15	;volatile
  8707  001D56  6E20               	movwf	ECANSendMessage@pb+5,c
  8708  001D58  6A1F               	clrf	ECANSendMessage@pb+4,c
  8709                           
  8710                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  8711  001D5A  010E               	movlb	14	; () banked
  8712  001D5C  0E0E               	movlw	14	;volatile
  8713  001D5E  6E22               	movwf	ECANSendMessage@pb+7,c
  8714  001D60  0E80               	movlw	128	;volatile
  8715  001D62  6E21               	movwf	ECANSendMessage@pb+6,c
  8716                           
  8717                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  8718  001D64  0E0E               	movlw	14	;volatile
  8719  001D66  6E24               	movwf	ECANSendMessage@pb+9,c
  8720  001D68  0E90               	movlw	144	;volatile
  8721  001D6A  6E23               	movwf	ECANSendMessage@pb+8,c
  8722                           
  8723                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  8724  001D6C  0E0E               	movlw	14	;volatile
  8725  001D6E  6E26               	movwf	ECANSendMessage@pb+11,c
  8726  001D70  0EA0               	movlw	160	;volatile
  8727  001D72  6E25               	movwf	ECANSendMessage@pb+10,c
  8728                           
  8729                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  8730  001D74  0E0E               	movlw	14	;volatile
  8731  001D76  6E28               	movwf	ECANSendMessage@pb+13,c
  8732  001D78  0EB0               	movlw	176	;volatile
  8733  001D7A  6E27               	movwf	ECANSendMessage@pb+12,c
  8734                           
  8735                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  8736  001D7C  0E0E               	movlw	14	;volatile
  8737  001D7E  6E2A               	movwf	ECANSendMessage@pb+15,c
  8738  001D80  0EC0               	movlw	192	;volatile
  8739  001D82  6E29               	movwf	ECANSendMessage@pb+14,c
  8740                           
  8741                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  8742  001D84  0E0E               	movlw	14	;volatile
  8743  001D86  6E2C               	movwf	ECANSendMessage@pb+17,c
  8744  001D88  0ED0               	movlw	208	;volatile
  8745  001D8A  6E2B               	movwf	ECANSendMessage@pb+16,c
  8746                           
  8747                           ; BSR set to: 14
  8748                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  8749  001D8C  5072               	movf	3954,w,c	;volatile
  8750  001D8E  0BC0               	andlw	192
  8751  001D90  6E2D               	movwf	ECANSendMessage@mode,c
  8752                           
  8753                           ; BSR set to: 14
  8754                           ;ECAN.c: 660: if ( mode == 0x00 )
  8755  001D92  662D               	tstfsz	ECANSendMessage@mode,c
  8756  001D94  D002               	goto	l6881
  8757                           
  8758                           ; BSR set to: 14
  8759                           ;ECAN.c: 661: buffers = 2;
  8760  001D96  0E02               	movlw	2
  8761  001D98  D001               	goto	L27
  8762  001D9A                     l6881:
  8763                           
  8764                           ; BSR set to: 14
  8765                           ;ECAN.c: 662: else
  8766                           ;ECAN.c: 663: buffers = 8;
  8767  001D9A  0E08               	movlw	8
  8768  001D9C                     L27:
  8769  001D9C  6E2E               	movwf	ECANSendMessage@buffers,c
  8770                           
  8771                           ; BSR set to: 14
  8772                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  8773  001D9E  90D8               	bcf	status,0,c
  8774  001DA0  317D               	rrcf	125,w,b	;volatile
  8775  001DA2  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  8776                           
  8777                           ; BSR set to: 14
  8778                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  8779  001DA4  6A34               	clrf	ECANSendMessage@i,c
  8780  001DA6  D07C               	goto	l6941
  8781  001DA8                     l6887:
  8782                           
  8783                           ;ECAN.c: 688: {
  8784                           ;ECAN.c: 693: ptr = pb[i];
  8785  001DA8  5034               	movf	ECANSendMessage@i,w,c
  8786  001DAA  0D02               	mullw	2
  8787  001DAC  50F3               	movf	prodl,w,c
  8788  001DAE  0F1B               	addlw	low ECANSendMessage@pb
  8789  001DB0  6ED9               	movwf	fsr2l,c
  8790  001DB2  6ADA               	clrf	fsr2h,c
  8791  001DB4  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  8792  001DB8  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  8793                           
  8794                           ;ECAN.c: 694: tempPtr = ptr;
  8795  001DBC  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  8796  001DC0  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  8797                           
  8798                           ;ECAN.c: 702: if ( i > 2 )
  8799  001DC4  0E02               	movlw	2
  8800  001DC6  6434               	cpfsgt	ECANSendMessage@i,c
  8801  001DC8  D004               	goto	l6899
  8802                           
  8803                           ;ECAN.c: 703: {
  8804                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  8805  001DCA  90D8               	bcf	status,0,c
  8806  001DCC  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  8807                           
  8808                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  8809  001DCE  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  8810  001DD0  D066               	goto	l6939
  8811  001DD2                     l6899:
  8812                           
  8813                           ;ECAN.c: 714: }
  8814                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  8815  001DD2  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8816  001DD6  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8817  001DDA  50DF               	movf	indf2,w,c
  8818  001DDC  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  8819  001DDE  B61A               	btfsc	??_ECANSendMessage,3,c
  8820  001DE0  D05E               	goto	l6939
  8821                           
  8822                           ;ECAN.c: 721: {
  8823                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  8824  001DE2  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8825  001DE6  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8826  001DEA  0EFC               	movlw	252
  8827  001DEC  16DF               	andwf	indf2,f,c
  8828                           
  8829                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  8830  001DEE  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  8831  001DF2  0E03               	movlw	3
  8832  001DF4  161A               	andwf	??_ECANSendMessage,f,c
  8833  001DF6  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8834  001DFA  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8835  001DFE  501A               	movf	??_ECANSendMessage,w,c
  8836  001E00  12DF               	iorwf	indf2,f,c
  8837                           
  8838                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  8839  001E02  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  8840  001E04  D004               	goto	l645
  8841                           
  8842                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  8843  001E06  5018               	movf	ECANSendMessage@dataLen,w,c
  8844  001E08  0940               	iorlw	64
  8845  001E0A  6E33               	movwf	ECANSendMessage@temp,c
  8846  001E0C  D002               	goto	l6909
  8847  001E0E                     l645:
  8848                           
  8849                           ;ECAN.c: 729: else
  8850                           ;ECAN.c: 730: temp = dataLen;
  8851  001E0E  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  8852  001E12                     l6909:
  8853                           
  8854                           ;ECAN.c: 732: *(ptr+5) = temp;
  8855  001E12  EE20 F005          	lfsr	2,5
  8856  001E16  5035               	movf	ECANSendMessage@ptr,w,c
  8857  001E18  26D9               	addwf	fsr2l,f,c
  8858  001E1A  5036               	movf	ECANSendMessage@ptr+1,w,c
  8859  001E1C  22DA               	addwfc	fsr2h,f,c
  8860  001E1E  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  8861                           
  8862                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  8863  001E22  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  8864  001E24  D003               	goto	l647
  8865                           
  8866                           ;ECAN.c: 736: temp = 1;
  8867  001E26  0E01               	movlw	1
  8868  001E28  6E33               	movwf	ECANSendMessage@temp,c
  8869  001E2A  D001               	goto	l6915
  8870  001E2C                     l647:
  8871                           
  8872                           ;ECAN.c: 738: else
  8873                           ;ECAN.c: 739: temp = 0;
  8874  001E2C  6A33               	clrf	ECANSendMessage@temp,c
  8875  001E2E                     l6915:
  8876                           
  8877                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  8878  001E2E  2835               	incf	ECANSendMessage@ptr,w,c
  8879  001E30  6E08               	movwf	?__CANIDToRegs,c
  8880  001E32  0E00               	movlw	0
  8881  001E34  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  8882  001E36  6E09               	movwf	?__CANIDToRegs+1,c
  8883  001E38  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  8884  001E3C  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  8885  001E40  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  8886  001E44  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  8887  001E48  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  8888  001E4C  EC06  F010         	call	__CANIDToRegs	;wreg free
  8889                           
  8890                           ;ECAN.c: 745: ptr += 6;
  8891  001E50  0E06               	movlw	6
  8892  001E52  2635               	addwf	ECANSendMessage@ptr,f,c
  8893  001E54  0E00               	movlw	0
  8894  001E56  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  8895                           
  8896                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  8897  001E58  6A2F               	clrf	ECANSendMessage@j,c
  8898  001E5A  D00F               	goto	l6929
  8899  001E5C                     l6921:
  8900                           
  8901                           ;ECAN.c: 748: *ptr++ = *data++;
  8902  001E5C  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  8903  001E60  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  8904  001E64  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  8905  001E68  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  8906  001E6C  CFDF FFE7          	movff	indf2,indf1
  8907  001E70  4A16               	infsnz	ECANSendMessage@data,f,c
  8908  001E72  2A17               	incf	ECANSendMessage@data+1,f,c
  8909  001E74  4A35               	infsnz	ECANSendMessage@ptr,f,c
  8910  001E76  2A36               	incf	ECANSendMessage@ptr+1,f,c
  8911  001E78  2A2F               	incf	ECANSendMessage@j,f,c
  8912  001E7A                     l6929:
  8913  001E7A  5018               	movf	ECANSendMessage@dataLen,w,c
  8914  001E7C  5C2F               	subwf	ECANSendMessage@j,w,c
  8915  001E7E  E3EE               	bnc	l6921
  8916                           
  8917                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  8918  001E80  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  8919  001E84  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  8920  001E88  50DF               	movf	indf2,w,c
  8921  001E8A  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  8922  001E8C  B41A               	btfsc	??_ECANSendMessage,2,c
  8923  001E8E  0C01               	retlw	1
  8924                           
  8925                           ;ECAN.c: 753: *tempPtr |= 0x08;
  8926  001E90  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  8927  001E94  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  8928  001E98  0E00               	movlw	0
  8929  001E9A  86DB               	bsf	plusw2,3,c
  8930                           
  8931                           ;ECAN.c: 755: return TRUE;
  8932  001E9C  0C01               	retlw	1
  8933  001E9E                     l6939:
  8934  001E9E  2A34               	incf	ECANSendMessage@i,f,c
  8935  001EA0                     l6941:
  8936  001EA0  502E               	movf	ECANSendMessage@buffers,w,c
  8937  001EA2  5C34               	subwf	ECANSendMessage@i,w,c
  8938  001EA4  E381               	bnc	l6887
  8939                           
  8940                           ;ECAN.c: 756: }
  8941                           ;ECAN.c: 757: }
  8942                           ;ECAN.c: 760: return FALSE;
  8943  001EA6  0C00               	retlw	0
  8944  001EA8                     __end_of_ECANSendMessage:
  8945                           	opt stack 0
  8946                           tblptru	equ	0xFF8
  8947                           tblptrh	equ	0xFF7
  8948                           tblptrl	equ	0xFF6
  8949                           tablat	equ	0xFF5
  8950                           prodh	equ	0xFF4
  8951                           prodl	equ	0xFF3
  8952                           postinc0	equ	0xFEE
  8953                           wreg	equ	0xFE8
  8954                           indf1	equ	0xFE7
  8955                           fsr1h	equ	0xFE2
  8956                           fsr1l	equ	0xFE1
  8957                           indf2	equ	0xFDF
  8958                           postinc2	equ	0xFDE
  8959                           postdec2	equ	0xFDD
  8960                           plusw2	equ	0xFDB
  8961                           fsr2h	equ	0xFDA
  8962                           fsr2l	equ	0xFD9
  8963                           status	equ	0xFD8
  8964                           
  8965 ;; *************** function __CANIDToRegs *****************
  8966 ;; Defined at:
  8967 ;;		line 1099 in file "../ECAN.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  8970 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8971 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8972 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  8973 ;;  val             4    9[COMRAM] unsigned long 
  8974 ;;  type            1   13[COMRAM] unsigned char 
  8975 ;; Auto vars:     Size  Location     Type
  8976 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  8977 ;;		 -> _CANIDToRegs@val(4), 
  8978 ;; Return value:  Size  Location     Type
  8979 ;;		None               void
  8980 ;; Registers used:
  8981 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/E
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8987 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8989 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8990 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8991 ;;Total ram usage:       10 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    2
  8994 ;; This function calls:
  8995 ;;		Nothing
  8996 ;; This function is called by:
  8997 ;;		_ECANSendMessage
  8998 ;; This function uses a non-reentrant model
  8999 ;;
  9000                           
  9001                           	psect	text52
  9002  00200C                     __ptext52:
  9003                           	opt stack 0
  9004  00200C                     __CANIDToRegs:
  9005                           	opt stack 22
  9006                           
  9007                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9008                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9009                           
  9010                           ;incstack = 0
  9011                           ;incstack = 0
  9012  00200C  0E0A               	movlw	low __CANIDToRegs@val
  9013  00200E  6E11               	movwf	__CANIDToRegs@Value,c
  9014                           
  9015                           ;ECAN.c: 1104: if ( type == 0 )
  9016  002010  660E               	tstfsz	__CANIDToRegs@type,c
  9017  002012  D037               	goto	l6957
  9018                           
  9019                           ;ECAN.c: 1105: {
  9020                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9021  002014  5011               	movf	__CANIDToRegs@Value,w,c
  9022  002016  6ED9               	movwf	fsr2l,c
  9023  002018  6ADA               	clrf	fsr2h,c
  9024  00201A  50DF               	movf	indf2,w,c
  9025  00201C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9026  00201E  90D8               	bcf	status,0,c
  9027  002020  320F               	rrcf	??__CANIDToRegs,f,c
  9028  002022  90D8               	bcf	status,0,c
  9029  002024  320F               	rrcf	??__CANIDToRegs,f,c
  9030  002026  90D8               	bcf	status,0,c
  9031  002028  300F               	rrcf	??__CANIDToRegs,w,c
  9032  00202A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9033  00202E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9034  002032  6EDF               	movwf	indf2,c
  9035                           
  9036                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9037  002034  5011               	movf	__CANIDToRegs@Value,w,c
  9038  002036  6ED9               	movwf	fsr2l,c
  9039  002038  6ADA               	clrf	fsr2h,c
  9040  00203A  2AD9               	incf	fsr2l,f,c
  9041  00203C  6ADA               	clrf	fsr2h,c
  9042  00203E  50DF               	movf	indf2,w,c
  9043  002040  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9044  002042  0E05               	movlw	5
  9045  002044  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9046  002046                     u7085:
  9047  002046  90D8               	bcf	status,0,c
  9048  002048  360F               	rlcf	??__CANIDToRegs,f,c
  9049  00204A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9050  00204C  D7FC               	goto	u7085
  9051  00204E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9052  002052  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9053  002056  500F               	movf	??__CANIDToRegs,w,c
  9054  002058  12DF               	iorwf	indf2,f,c
  9055                           
  9056                           ;ECAN.c: 1109: ptr++;
  9057  00205A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9058  00205C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9059                           
  9060                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9061  00205E  5011               	movf	__CANIDToRegs@Value,w,c
  9062  002060  6ED9               	movwf	fsr2l,c
  9063  002062  6ADA               	clrf	fsr2h,c
  9064  002064  50DF               	movf	indf2,w,c
  9065  002066  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9066  002068  0E05               	movlw	5
  9067  00206A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9068  00206C                     u7095:
  9069  00206C  90D8               	bcf	status,0,c
  9070  00206E  360F               	rlcf	??__CANIDToRegs,f,c
  9071  002070  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9072  002072  D7FC               	goto	u7095
  9073  002074  500F               	movf	??__CANIDToRegs,w,c
  9074  002076  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9075  00207A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9076  00207E  6EDF               	movwf	indf2,c
  9077                           
  9078                           ;ECAN.c: 1111: }
  9079  002080  0012               	return	
  9080  002082                     l6957:
  9081                           
  9082                           ;ECAN.c: 1112: else
  9083                           ;ECAN.c: 1113: {
  9084                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9085  002082  5011               	movf	__CANIDToRegs@Value,w,c
  9086  002084  6ED9               	movwf	fsr2l,c
  9087  002086  6ADA               	clrf	fsr2h,c
  9088  002088  0E02               	movlw	2
  9089  00208A  26D9               	addwf	fsr2l,f,c
  9090  00208C  6ADA               	clrf	fsr2h,c
  9091  00208E  50DF               	movf	indf2,w,c
  9092  002090  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9093  002092  0E05               	movlw	5
  9094  002094  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9095  002096                     u7105:
  9096  002096  90D8               	bcf	status,0,c
  9097  002098  320F               	rrcf	??__CANIDToRegs,f,c
  9098  00209A  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9099  00209C  D7FC               	goto	u7105
  9100  00209E  500F               	movf	??__CANIDToRegs,w,c
  9101  0020A0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9102  0020A4  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9103  0020A8  6EDF               	movwf	indf2,c
  9104                           
  9105                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9106  0020AA  5011               	movf	__CANIDToRegs@Value,w,c
  9107  0020AC  6ED9               	movwf	fsr2l,c
  9108  0020AE  6ADA               	clrf	fsr2h,c
  9109  0020B0  0E03               	movlw	3
  9110  0020B2  26D9               	addwf	fsr2l,f,c
  9111  0020B4  6ADA               	clrf	fsr2h,c
  9112  0020B6  50DF               	movf	indf2,w,c
  9113  0020B8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9114  0020BA  90D8               	bcf	status,0,c
  9115  0020BC  360F               	rlcf	??__CANIDToRegs,f,c
  9116  0020BE  90D8               	bcf	status,0,c
  9117  0020C0  360F               	rlcf	??__CANIDToRegs,f,c
  9118  0020C2  90D8               	bcf	status,0,c
  9119  0020C4  360F               	rlcf	??__CANIDToRegs,f,c
  9120  0020C6  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9121  0020CA  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9122  0020CE  500F               	movf	??__CANIDToRegs,w,c
  9123  0020D0  12DF               	iorwf	indf2,f,c
  9124                           
  9125                           ;ECAN.c: 1117: ptr++;
  9126  0020D2  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9127  0020D4  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9128                           
  9129                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9130  0020D6  5011               	movf	__CANIDToRegs@Value,w,c
  9131  0020D8  6ED9               	movwf	fsr2l,c
  9132  0020DA  6ADA               	clrf	fsr2h,c
  9133  0020DC  0E02               	movlw	2
  9134  0020DE  26D9               	addwf	fsr2l,f,c
  9135  0020E0  6ADA               	clrf	fsr2h,c
  9136  0020E2  50DF               	movf	indf2,w,c
  9137  0020E4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9138  0020E6  90D8               	bcf	status,0,c
  9139  0020E8  360F               	rlcf	??__CANIDToRegs,f,c
  9140  0020EA  90D8               	bcf	status,0,c
  9141  0020EC  360F               	rlcf	??__CANIDToRegs,f,c
  9142  0020EE  90D8               	bcf	status,0,c
  9143  0020F0  340F               	rlcf	??__CANIDToRegs,w,c
  9144  0020F2  0BE0               	andlw	224
  9145  0020F4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9146  0020F8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9147  0020FC  6EDF               	movwf	indf2,c
  9148                           
  9149                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9150  0020FE  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9151  002102  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9152  002106  0E00               	movlw	0
  9153  002108  86DB               	bsf	plusw2,3,c
  9154                           
  9155                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9156  00210A  5011               	movf	__CANIDToRegs@Value,w,c
  9157  00210C  6ED9               	movwf	fsr2l,c
  9158  00210E  6ADA               	clrf	fsr2h,c
  9159  002110  0E02               	movlw	2
  9160  002112  26D9               	addwf	fsr2l,f,c
  9161  002114  6ADA               	clrf	fsr2h,c
  9162  002116  50DF               	movf	indf2,w,c
  9163  002118  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9164  00211A  0E03               	movlw	3
  9165  00211C  160F               	andwf	??__CANIDToRegs,f,c
  9166  00211E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9167  002122  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9168  002126  500F               	movf	??__CANIDToRegs,w,c
  9169  002128  12DF               	iorwf	indf2,f,c
  9170                           
  9171                           ;ECAN.c: 1122: ptr++;
  9172  00212A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9173  00212C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9174                           
  9175                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9176  00212E  5011               	movf	__CANIDToRegs@Value,w,c
  9177  002130  6ED9               	movwf	fsr2l,c
  9178  002132  6ADA               	clrf	fsr2h,c
  9179  002134  2AD9               	incf	fsr2l,f,c
  9180  002136  6ADA               	clrf	fsr2h,c
  9181  002138  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9182  00213C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9183  002140  CFDF FFE7          	movff	indf2,indf1
  9184                           
  9185                           ;ECAN.c: 1124: ptr++;
  9186  002144  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9187  002146  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9188                           
  9189                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9190  002148  5011               	movf	__CANIDToRegs@Value,w,c
  9191  00214A  6ED9               	movwf	fsr2l,c
  9192  00214C  6ADA               	clrf	fsr2h,c
  9193  00214E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9194  002152  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9195  002156  CFDF FFE7          	movff	indf2,indf1
  9196  00215A  0012               	return	
  9197  00215C                     __end_of__CANIDToRegs:
  9198                           	opt stack 0
  9199                           tblptru	equ	0xFF8
  9200                           tblptrh	equ	0xFF7
  9201                           tblptrl	equ	0xFF6
  9202                           tablat	equ	0xFF5
  9203                           prodh	equ	0xFF4
  9204                           prodl	equ	0xFF3
  9205                           postinc0	equ	0xFEE
  9206                           wreg	equ	0xFE8
  9207                           indf1	equ	0xFE7
  9208                           fsr1h	equ	0xFE2
  9209                           fsr1l	equ	0xFE1
  9210                           indf2	equ	0xFDF
  9211                           postinc2	equ	0xFDE
  9212                           postdec2	equ	0xFDD
  9213                           plusw2	equ	0xFDB
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function _vscp_getEvent *****************
  9219 ;; Defined at:
  9220 ;;		line 1305 in file "../../vscp_firmware/common/vscp_firmware.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;  rv              1   43[COMRAM] unsigned char 
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  1    wreg      unsigned char 
  9227 ;; Registers used:
  9228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9229 ;; Tracked objects:
  9230 ;;		On entry : F/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9235 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9237 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9238 ;;Total ram usage:        1 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    6
  9241 ;; This function calls:
  9242 ;;		_getVSCPFrame
  9243 ;; This function is called by:
  9244 ;;		_main
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text53
  9249  002E0C                     __ptext53:
  9250                           	opt stack 0
  9251  002E0C                     _vscp_getEvent:
  9252                           	opt stack 24
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;vscp_firmware.c: 1306: int8_t rv;
  9256                           ;vscp_firmware.c: 1312: if (vscp_imsg.flags & 0x80) return !0;
  9257                           
  9258                           ;incstack = 0
  9259                           ;incstack = 0
  9260  002E0C  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9261  002E0E  0012               	return	
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;vscp_firmware.c: 1315: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
  9265                           ;vscp_firmware.c: 1316: &vscp_imsg.vscp_type,
  9266                           ;vscp_firmware.c: 1317: &vscp_imsg.oaddr,
  9267                           ;vscp_firmware.c: 1318: &vscp_imsg.priority,
  9268                           ;vscp_firmware.c: 1319: &vscp_imsg.flags,
  9269                           ;vscp_firmware.c: 1320: vscp_imsg.data ) ) ) {
  9270  002E10  0E79               	movlw	low (_vscp_imsg+4)
  9271  002E12  6E1E               	movwf	?_getVSCPFrame,c
  9272  002E14  0E7A               	movlw	low (_vscp_imsg+5)
  9273  002E16  6E1F               	movwf	?_getVSCPFrame+1,c
  9274  002E18  0E76               	movlw	low (_vscp_imsg+1)
  9275  002E1A  6E20               	movwf	?_getVSCPFrame+2,c
  9276  002E1C  0E75               	movlw	low _vscp_imsg
  9277  002E1E  6E21               	movwf	?_getVSCPFrame+3,c
  9278  002E20  0E7B               	movlw	low (_vscp_imsg+6)
  9279  002E22  6E22               	movwf	?_getVSCPFrame+4,c
  9280  002E24  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  9281  002E26  EC85  F015         	call	_getVSCPFrame
  9282  002E2A  6E2C               	movwf	vscp_getEvent@rv,c
  9283  002E2C  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9284  002E2E  B4D8               	btfsc	status,2,c
  9285  002E30  0012               	return	
  9286                           
  9287                           ;vscp_firmware.c: 1322: vscp_imsg.flags |= 0x80;
  9288  002E32  0100               	movlb	0	; () banked
  9289  002E34  8F75               	bsf	_vscp_imsg& (0+255),7,b
  9290  002E36  0012               	return	
  9291  002E38                     __end_of_vscp_getEvent:
  9292                           	opt stack 0
  9293                           tblptru	equ	0xFF8
  9294                           tblptrh	equ	0xFF7
  9295                           tblptrl	equ	0xFF6
  9296                           tablat	equ	0xFF5
  9297                           prodh	equ	0xFF4
  9298                           prodl	equ	0xFF3
  9299                           postinc0	equ	0xFEE
  9300                           wreg	equ	0xFE8
  9301                           indf1	equ	0xFE7
  9302                           fsr1h	equ	0xFE2
  9303                           fsr1l	equ	0xFE1
  9304                           indf2	equ	0xFDF
  9305                           postinc2	equ	0xFDE
  9306                           postdec2	equ	0xFDD
  9307                           plusw2	equ	0xFDB
  9308                           fsr2h	equ	0xFDA
  9309                           fsr2l	equ	0xFD9
  9310                           status	equ	0xFD8
  9311                           
  9312 ;; *************** function _getVSCPFrame *****************
  9313 ;; Defined at:
  9314 ;;		line 1479 in file "../main.c"
  9315 ;; Parameters:    Size  Location     Type
  9316 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9317 ;;		 -> vscp_imsg(14), 
  9318 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9319 ;;		 -> vscp_imsg(14), 
  9320 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9321 ;;		 -> vscp_imsg(14), 
  9322 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9323 ;;		 -> vscp_imsg(14), 
  9324 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9325 ;;		 -> vscp_imsg(14), 
  9326 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9327 ;;		 -> vscp_imsg(14), 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9330 ;;		 -> vscp_imsg(14), 
  9331 ;;  id              4   39[COMRAM] unsigned long 
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  1    wreg      unsigned char 
  9334 ;; Registers used:
  9335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9336 ;; Tracked objects:
  9337 ;;		On entry : F/0
  9338 ;;		On exit  : 0/0
  9339 ;;		Unchanged: 0/0
  9340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9341 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9342 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9343 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9344 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9345 ;;Total ram usage:       14 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    5
  9348 ;; This function calls:
  9349 ;;		_getCANFrame
  9350 ;; This function is called by:
  9351 ;;		_vscp_getEvent
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           	psect	text54
  9356  002B0A                     __ptext54:
  9357                           	opt stack 0
  9358  002B0A                     _getVSCPFrame:
  9359                           	opt stack 24
  9360                           
  9361                           ;incstack = 0
  9362                           ;incstack = 0
  9363                           ;getVSCPFrame@pvscpclass stored from wreg
  9364  002B0A  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;main.c: 1480: uint32_t id;
  9368                           ;main.c: 1482: if ( !getCANFrame(&id, pSize, pData) ) {
  9369  002B0E  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9370  002B12  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9371  002B16  0E28               	movlw	getVSCPFrame@id& (0+255)
  9372  002B18  EC58  F017         	call	_getCANFrame
  9373  002B1C  0900               	iorlw	0
  9374  002B1E  E101               	bnz	l5199
  9375                           
  9376                           ;main.c: 1483: return 0;
  9377  002B20  0C00               	retlw	0
  9378  002B22                     l5199:
  9379                           
  9380                           ;main.c: 1484: }
  9381                           ;main.c: 1486: *pNodeId = id & 0x0ff;
  9382  002B22  501F               	movf	getVSCPFrame@pNodeId,w,c
  9383  002B24  6ED9               	movwf	fsr2l,c
  9384  002B26  6ADA               	clrf	fsr2h,c
  9385  002B28  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9386                           
  9387                           ;main.c: 1487: *pvscptype = (id >> 8) & 0xff;
  9388  002B2C  501E               	movf	getVSCPFrame@pvscptype,w,c
  9389  002B2E  6ED9               	movwf	fsr2l,c
  9390  002B30  6ADA               	clrf	fsr2h,c
  9391  002B32  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9392                           
  9393                           ;main.c: 1488: *pvscpclass = (id >> 16) & 0x1ff;
  9394  002B36  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9395  002B38  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9396  002B3A  0E01               	movlw	1
  9397  002B3C  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9398  002B3E  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9399  002B40  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9400  002B42  6ED9               	movwf	fsr2l,c
  9401  002B44  6ADA               	clrf	fsr2h,c
  9402  002B46  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9403  002B4A  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  9404                           
  9405                           ;main.c: 1489: *pPriority = (uint16_t) (0x07 & (id >> 26));
  9406  002B4E  5020               	movf	getVSCPFrame@pPriority,w,c
  9407  002B50  6ED9               	movwf	fsr2l,c
  9408  002B52  6ADA               	clrf	fsr2h,c
  9409  002B54  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  9410  002B58  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  9411  002B5C  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  9412  002B60  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  9413  002B64  0E1B               	movlw	27
  9414  002B66  D005               	goto	u4480
  9415  002B68                     u4485:
  9416  002B68  90D8               	bcf	status,0,c
  9417  002B6A  3226               	rrcf	??_getVSCPFrame+3,f,c
  9418  002B6C  3225               	rrcf	??_getVSCPFrame+2,f,c
  9419  002B6E  3224               	rrcf	??_getVSCPFrame+1,f,c
  9420  002B70  3223               	rrcf	??_getVSCPFrame,f,c
  9421  002B72                     u4480:
  9422  002B72  2EE8               	decfsz	wreg,f,c
  9423  002B74  D7F9               	goto	u4485
  9424  002B76  5023               	movf	??_getVSCPFrame,w,c
  9425  002B78  0B07               	andlw	7
  9426  002B7A  6EDF               	movwf	indf2,c
  9427                           
  9428                           ;main.c: 1491: return 1;
  9429  002B7C  0C01               	retlw	1
  9430  002B7E                     __end_of_getVSCPFrame:
  9431                           	opt stack 0
  9432                           tblptru	equ	0xFF8
  9433                           tblptrh	equ	0xFF7
  9434                           tblptrl	equ	0xFF6
  9435                           tablat	equ	0xFF5
  9436                           prodh	equ	0xFF4
  9437                           prodl	equ	0xFF3
  9438                           postinc0	equ	0xFEE
  9439                           wreg	equ	0xFE8
  9440                           indf1	equ	0xFE7
  9441                           fsr1h	equ	0xFE2
  9442                           fsr1l	equ	0xFE1
  9443                           indf2	equ	0xFDF
  9444                           postinc2	equ	0xFDE
  9445                           postdec2	equ	0xFDD
  9446                           plusw2	equ	0xFDB
  9447                           fsr2h	equ	0xFDA
  9448                           fsr2l	equ	0xFD9
  9449                           status	equ	0xFD8
  9450                           
  9451 ;; *************** function _getCANFrame *****************
  9452 ;; Defined at:
  9453 ;;		line 1521 in file "../main.c"
  9454 ;; Parameters:    Size  Location     Type
  9455 ;;  pid             1    wreg     PTR unsigned long 
  9456 ;;		 -> getVSCPFrame@id(4), 
  9457 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
  9458 ;;		 -> vscp_imsg(14), 
  9459 ;;  pdata           1   26[COMRAM] PTR unsigned char 
  9460 ;;		 -> vscp_imsg(14), 
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  pid             1   27[COMRAM] PTR unsigned long 
  9463 ;;		 -> getVSCPFrame@id(4), 
  9464 ;;  flags           1   28[COMRAM] enum E18984
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      unsigned char 
  9467 ;; Registers used:
  9468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9469 ;; Tracked objects:
  9470 ;;		On entry : F/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9474 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9475 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9477 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9478 ;;Total ram usage:        4 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    4
  9481 ;; This function calls:
  9482 ;;		_ECANReceiveMessage
  9483 ;; This function is called by:
  9484 ;;		_getVSCPFrame
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           	psect	text55
  9489  002EB0                     __ptext55:
  9490                           	opt stack 0
  9491  002EB0                     _getCANFrame:
  9492                           	opt stack 24
  9493                           
  9494                           ;incstack = 0
  9495                           ;incstack = 0
  9496                           ;getCANFrame@pid stored from wreg
  9497  002EB0  CFE8 F01C          	movff	wreg,getCANFrame@pid
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;main.c: 1522: ECAN_RX_MSG_FLAGS flags;
  9501                           ;main.c: 1526: if (vscp_imsg.flags & 0x80) return 0;
  9502  002EB4  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9503  002EB6                     l5211:
  9504  002EB6  0C00               	retlw	0
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;main.c: 1528: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
  9508  002EB8  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
  9509  002EBC  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
  9510  002EC0  0E1D               	movlw	low getCANFrame@flags
  9511  002EC2  6E11               	movwf	?_ECANReceiveMessage+2,c
  9512  002EC4  501C               	movf	getCANFrame@pid,w,c
  9513  002EC6  EC08  F00C         	call	_ECANReceiveMessage
  9514  002ECA  0900               	iorlw	0
  9515  002ECC  E0F4               	bz	l5211
  9516                           
  9517                           ;main.c: 1531: if (flags & ECAN_RX_RTR_FRAME) return 0;
  9518  002ECE  AC1D               	btfss	getCANFrame@flags,6,c
  9519                           
  9520                           ;main.c: 1534: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
  9521  002ED0  AA1D               	btfss	getCANFrame@flags,5,c
  9522  002ED2  0C00               	retlw	0
  9523                           
  9524                           ;main.c: 1536: return 1;
  9525  002ED4  0C01               	retlw	1
  9526  002ED6                     __end_of_getCANFrame:
  9527                           	opt stack 0
  9528                           tblptru	equ	0xFF8
  9529                           tblptrh	equ	0xFF7
  9530                           tblptrl	equ	0xFF6
  9531                           tablat	equ	0xFF5
  9532                           prodh	equ	0xFF4
  9533                           prodl	equ	0xFF3
  9534                           postinc0	equ	0xFEE
  9535                           wreg	equ	0xFE8
  9536                           indf1	equ	0xFE7
  9537                           fsr1h	equ	0xFE2
  9538                           fsr1l	equ	0xFE1
  9539                           indf2	equ	0xFDF
  9540                           postinc2	equ	0xFDE
  9541                           postdec2	equ	0xFDD
  9542                           plusw2	equ	0xFDB
  9543                           fsr2h	equ	0xFDA
  9544                           fsr2l	equ	0xFD9
  9545                           status	equ	0xFD8
  9546                           
  9547 ;; *************** function _ECANReceiveMessage *****************
  9548 ;; Defined at:
  9549 ;;		line 803 in file "../ECAN.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;  id              1    wreg     PTR unsigned long 
  9552 ;;		 -> getVSCPFrame@id(4), 
  9553 ;;  data            1   14[COMRAM] PTR unsigned char 
  9554 ;;		 -> vscp_imsg(14), 
  9555 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
  9556 ;;		 -> vscp_imsg(14), 
  9557 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
  9558 ;;		 -> getCANFrame@flags(1), 
  9559 ;; Auto vars:     Size  Location     Type
  9560 ;;  id              1   19[COMRAM] PTR unsigned long 
  9561 ;;		 -> getVSCPFrame@id(4), 
  9562 ;;  ptr             2   23[COMRAM] PTR unsigned char 
  9563 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9564 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9565 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
  9566 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9567 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9568 ;;  temp            1   22[COMRAM] struct .
  9569 ;;  mode            1   21[COMRAM] unsigned char 
  9570 ;;  i               1   20[COMRAM] unsigned char 
  9571 ;; Return value:  Size  Location     Type
  9572 ;;                  1    wreg      enum E18242
  9573 ;; Registers used:
  9574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : F/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9580 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9581 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9583 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9584 ;;Total ram usage:       11 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    3
  9587 ;; This function calls:
  9588 ;;		__ECANPointBuffer
  9589 ;;		__RegsToCANID
  9590 ;; This function is called by:
  9591 ;;		_getCANFrame
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           	psect	text56
  9596  001810                     __ptext56:
  9597                           	opt stack 0
  9598  001810                     _ECANReceiveMessage:
  9599                           	opt stack 24
  9600                           
  9601                           ;incstack = 0
  9602                           ;incstack = 0
  9603                           ;ECANReceiveMessage@id stored from wreg
  9604  001810  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
  9605                           
  9606                           ; BSR set to: 0
  9607                           ;ECAN.c: 805: BYTE mode;
  9608                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  9609                           ;ECAN.c: 809: char i;
  9610                           ;ECAN.c: 810: BYTE_VAL temp;
  9611                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  9612  001814  6A54               	clrf	__ECANRxFilterHitInfo,c
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;ECAN.c: 815: mode = ECANCON&0xC0;
  9616  001816  5072               	movf	3954,w,c	;volatile
  9617  001818  0BC0               	andlw	192
  9618  00181A  6E16               	movwf	ECANReceiveMessage@mode,c
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;ECAN.c: 816: if ( mode == 0x00 )
  9622  00181C  6616               	tstfsz	ECANReceiveMessage@mode,c
  9623  00181E  D030               	goto	l5347
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;ECAN.c: 822: {
  9627                           ;ECAN.c: 824: if ( RXB0FUL )
  9628  001820  AE60               	btfss	3936,7,c	;volatile
  9629  001822  D012               	goto	l658
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;ECAN.c: 825: {
  9633                           ;ECAN.c: 827: RXB0IF = 0;
  9634  001824  9077               	bcf	3959,0,c	;volatile
  9635                           
  9636                           ;ECAN.c: 830: if ( RXB0OVFL )
  9637  001826  AE71               	btfss	3953,7,c	;volatile
  9638  001828  D006               	goto	l5323
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;ECAN.c: 831: {
  9642                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
  9643  00182A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9644  00182C  6ED9               	movwf	fsr2l,c
  9645  00182E  6ADA               	clrf	fsr2h,c
  9646  001830  0E00               	movlw	0
  9647  001832  86DB               	bsf	plusw2,3,c
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;ECAN.c: 833: RXB0OVFL = 0;
  9651  001834  9E71               	bcf	3953,7,c	;volatile
  9652  001836                     l5323:
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;ECAN.c: 834: }
  9656                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  9657  001836  A060               	btfss	3936,0,c	;volatile
  9658  001838  D002               	bra	u4655
  9659  00183A  8054               	bsf	__ECANRxFilterHitInfo,0,c
  9660  00183C  D001               	bra	u4657
  9661  00183E                     u4655:
  9662  00183E  9054               	bcf	__ECANRxFilterHitInfo,0,c
  9663  001840                     u4657:
  9664                           
  9665                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
  9666  001840  0E0F               	movlw	15	;volatile
  9667  001842  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9668  001844  0E60               	movlw	96	;volatile
  9669  001846  D01A               	goto	L28
  9670  001848                     l658:
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
  9674  001848  010F               	movlb	15	; () banked
  9675  00184A  AF30               	btfss	48,7,b	;volatile
  9676  00184C  0C00               	retlw	0
  9677                           
  9678                           ; BSR set to: 15
  9679                           ;ECAN.c: 842: {
  9680                           ;ECAN.c: 844: RXB1IF = 0;
  9681  00184E  9277               	bcf	3959,1,c	;volatile
  9682                           
  9683                           ;ECAN.c: 847: if ( RXB1OVFL )
  9684  001850  AC71               	btfss	3953,6,c	;volatile
  9685  001852  D006               	goto	l5333
  9686                           
  9687                           ; BSR set to: 15
  9688                           ;ECAN.c: 848: {
  9689                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
  9690  001854  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9691  001856  6ED9               	movwf	fsr2l,c
  9692  001858  6ADA               	clrf	fsr2h,c
  9693  00185A  0E00               	movlw	0
  9694  00185C  86DB               	bsf	plusw2,3,c
  9695                           
  9696                           ; BSR set to: 15
  9697                           ;ECAN.c: 850: RXB1OVFL = 0;
  9698  00185E  9C71               	bcf	3953,6,c	;volatile
  9699  001860                     l5333:
  9700                           
  9701                           ; BSR set to: 15
  9702                           ;ECAN.c: 851: }
  9703                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  9704  001860  5130               	movf	48,w,b	;volatile
  9705  001862  0B07               	andlw	7
  9706  001864  6E54               	movwf	__ECANRxFilterHitInfo,c
  9707                           
  9708                           ; BSR set to: 15
  9709                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  9710  001866  0E02               	movlw	2
  9711  001868  6054               	cpfslt	__ECANRxFilterHitInfo,c
  9712  00186A  D005               	goto	l5339
  9713                           
  9714                           ; BSR set to: 15
  9715                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  9716  00186C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9717  00186E  6ED9               	movwf	fsr2l,c
  9718  001870  6ADA               	clrf	fsr2h,c
  9719  001872  0E00               	movlw	0
  9720  001874  8EDB               	bsf	plusw2,7,c
  9721  001876                     l5339:
  9722                           
  9723                           ; BSR set to: 15
  9724                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
  9725  001876  0E0F               	movlw	15	;volatile
  9726  001878  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9727  00187A  0E30               	movlw	48	;volatile
  9728  00187C                     L28:
  9729  00187C  6E18               	movwf	ECANReceiveMessage@ptr,c
  9730                           
  9731                           ;ECAN.c: 860: }
  9732  00187E  D05B               	goto	l5401
  9733  001880                     l5347:
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;ECAN.c: 869: else if ( mode == 0x40 )
  9737  001880  5016               	movf	ECANReceiveMessage@mode,w,c
  9738  001882  0A40               	xorlw	64
  9739  001884  E13E               	bnz	l668
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;ECAN.c: 875: {
  9743                           ;ECAN.c: 876: if ( RXB0FUL )
  9744  001886  AE60               	btfss	3936,7,c	;volatile
  9745  001888  D004               	goto	l669
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
  9749  00188A  0E0F               	movlw	15	;volatile
  9750  00188C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9751  00188E  0E60               	movlw	96	;volatile
  9752  001890  D036               	goto	L35
  9753  001892                     l669:
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
  9757  001892  010F               	movlb	15	; () banked
  9758  001894  AF30               	btfss	48,7,b	;volatile
  9759  001896  D004               	goto	l671
  9760                           
  9761                           ; BSR set to: 15
  9762                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
  9763  001898  0E0F               	movlw	15	;volatile
  9764  00189A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9765  00189C  0E30               	movlw	48	;volatile
  9766  00189E  D02F               	goto	L35
  9767  0018A0                     l671:
  9768                           
  9769                           ; BSR set to: 15
  9770                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
  9771  0018A0  010E               	movlb	14
  9772  0018A2  A57D               	btfss	125,2,b	;volatile
  9773  0018A4  AF80               	btfss	128,7,b	;volatile
  9774  0018A6  D004               	goto	l673
  9775                           
  9776                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
  9777  0018A8  0E0E               	movlw	14	;volatile
  9778  0018AA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9779  0018AC  0E80               	movlw	128	;volatile
  9780  0018AE  D027               	goto	L35
  9781  0018B0                     l673:
  9782                           
  9783                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
  9784  0018B0  010E               	movlb	14
  9785  0018B2  A77D               	btfss	125,3,b	;volatile
  9786  0018B4  AF90               	btfss	144,7,b	;volatile
  9787  0018B6  D004               	goto	l675
  9788                           
  9789                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
  9790  0018B8  0E0E               	movlw	14	;volatile
  9791  0018BA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9792  0018BC  0E90               	movlw	144	;volatile
  9793  0018BE  D01F               	goto	L35
  9794  0018C0                     l675:
  9795                           
  9796                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
  9797  0018C0  010E               	movlb	14
  9798  0018C2  A97D               	btfss	125,4,b	;volatile
  9799  0018C4  AFA0               	btfss	160,7,b	;volatile
  9800  0018C6  D004               	goto	l677
  9801                           
  9802                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
  9803  0018C8  0E0E               	movlw	14	;volatile
  9804  0018CA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9805  0018CC  0EA0               	movlw	160	;volatile
  9806  0018CE  D017               	goto	L35
  9807  0018D0                     l677:
  9808                           
  9809                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
  9810  0018D0  010E               	movlb	14
  9811  0018D2  AB7D               	btfss	125,5,b	;volatile
  9812  0018D4  AFB0               	btfss	176,7,b	;volatile
  9813  0018D6  D004               	goto	l679
  9814                           
  9815                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
  9816  0018D8  0E0E               	movlw	14	;volatile
  9817  0018DA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9818  0018DC  0EB0               	movlw	176	;volatile
  9819  0018DE  D00F               	goto	L35
  9820  0018E0                     l679:
  9821                           
  9822                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
  9823  0018E0  010E               	movlb	14
  9824  0018E2  AD7D               	btfss	125,6,b	;volatile
  9825  0018E4  AFC0               	btfss	192,7,b	;volatile
  9826  0018E6  D004               	goto	l681
  9827                           
  9828                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
  9829  0018E8  0E0E               	movlw	14	;volatile
  9830  0018EA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9831  0018EC  0EC0               	movlw	192	;volatile
  9832  0018EE  D007               	goto	L35
  9833  0018F0                     l681:
  9834                           
  9835                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
  9836  0018F0  010E               	movlb	14
  9837  0018F2  AF7D               	btfss	125,7,b	;volatile
  9838  0018F4  AFD0               	btfss	208,7,b	;volatile
  9839  0018F6  0C00               	retlw	0
  9840                           
  9841                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
  9842  0018F8  0E0E               	movlw	14	;volatile
  9843  0018FA  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9844  0018FC  0ED0               	movlw	208	;volatile
  9845  0018FE                     L35:
  9846  0018FE  6E18               	movwf	ECANReceiveMessage@ptr,c
  9847  001900  D00A               	goto	l5391
  9848  001902                     l668:
  9849                           
  9850                           ; BSR set to: 0
  9851                           ;ECAN.c: 910: else
  9852                           ;ECAN.c: 915: {
  9853                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
  9854  001902  AE71               	btfss	3953,7,c	;volatile
  9855  001904  0C00               	retlw	0
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;ECAN.c: 917: {
  9859                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
  9860  001906  506F               	movf	3951,w,c	;volatile
  9861  001908  0B07               	andlw	7
  9862  00190A  EC46  F015         	call	__ECANPointBuffer
  9863  00190E  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
  9864  001912  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
  9865  001916                     l5391:
  9866                           
  9867                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
  9868  001916  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
  9869  00191A  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
  9870  00191E  50DF               	movf	indf2,w,c
  9871  001920  0B1F               	andlw	31
  9872  001922  6E54               	movwf	__ECANRxFilterHitInfo,c
  9873                           
  9874                           ;ECAN.c: 932: RXB1IF = 0;
  9875  001924  9277               	bcf	3959,1,c	;volatile
  9876                           
  9877                           ;ECAN.c: 934: if ( RXB1OVFL )
  9878  001926  AC71               	btfss	3953,6,c	;volatile
  9879  001928  D006               	goto	l5401
  9880                           
  9881                           ;ECAN.c: 935: {
  9882                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
  9883  00192A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9884  00192C  6ED9               	movwf	fsr2l,c
  9885  00192E  6ADA               	clrf	fsr2h,c
  9886  001930  0E00               	movlw	0
  9887  001932  86DB               	bsf	plusw2,3,c
  9888                           
  9889                           ;ECAN.c: 937: RXB1OVFL = 0;
  9890  001934  9C71               	bcf	3953,6,c	;volatile
  9891  001936                     l5401:
  9892                           
  9893                           ;ECAN.c: 942: savedPtr = ptr;
  9894  001936  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
  9895  00193A  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
  9896                           
  9897                           ;ECAN.c: 943: *msgFlags = 0;
  9898  00193E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9899  001940  6ED9               	movwf	fsr2l,c
  9900  001942  6ADA               	clrf	fsr2h,c
  9901  001944  6ADF               	clrf	indf2,c
  9902                           
  9903                           ;ECAN.c: 946: temp.Val = *(ptr+5);
  9904  001946  EE20 F005          	lfsr	2,5
  9905  00194A  5018               	movf	ECANReceiveMessage@ptr,w,c
  9906  00194C  26D9               	addwf	fsr2l,f,c
  9907  00194E  5019               	movf	ECANReceiveMessage@ptr+1,w,c
  9908  001950  22DA               	addwfc	fsr2h,f,c
  9909  001952  50DF               	movf	indf2,w,c
  9910  001954  6E17               	movwf	ECANReceiveMessage@temp,c
  9911                           
  9912                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
  9913  001956  5010               	movf	ECANReceiveMessage@dataLen,w,c
  9914  001958  6ED9               	movwf	fsr2l,c
  9915  00195A  6ADA               	clrf	fsr2h,c
  9916  00195C  5017               	movf	ECANReceiveMessage@temp,w,c
  9917  00195E  0B0F               	andlw	15
  9918  001960  6EDF               	movwf	indf2,c
  9919                           
  9920                           ;ECAN.c: 950: if ( temp.bits.b6 )
  9921  001962  AC17               	btfss	ECANReceiveMessage@temp,6,c
  9922  001964  D005               	goto	l689
  9923                           
  9924                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
  9925  001966  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9926  001968  6ED9               	movwf	fsr2l,c
  9927  00196A  6ADA               	clrf	fsr2h,c
  9928  00196C  0E00               	movlw	0
  9929  00196E  8CDB               	bsf	plusw2,6,c
  9930  001970                     l689:
  9931                           
  9932                           ;ECAN.c: 954: temp.Val = *(ptr+2);
  9933  001970  EE20 F002          	lfsr	2,2
  9934  001974  5018               	movf	ECANReceiveMessage@ptr,w,c
  9935  001976  26D9               	addwf	fsr2l,f,c
  9936  001978  5019               	movf	ECANReceiveMessage@ptr+1,w,c
  9937  00197A  22DA               	addwfc	fsr2h,f,c
  9938  00197C  50DF               	movf	indf2,w,c
  9939  00197E  6E17               	movwf	ECANReceiveMessage@temp,c
  9940                           
  9941                           ;ECAN.c: 955: if ( temp.bits.b3 )
  9942  001980  A617               	btfss	ECANReceiveMessage@temp,3,c
  9943  001982  D008               	goto	l690
  9944                           
  9945                           ;ECAN.c: 956: {
  9946                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
  9947  001984  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9948  001986  6ED9               	movwf	fsr2l,c
  9949  001988  6ADA               	clrf	fsr2h,c
  9950  00198A  0E00               	movlw	0
  9951  00198C  8ADB               	bsf	plusw2,5,c
  9952                           
  9953                           ;ECAN.c: 958: temp.Val = 1;
  9954  00198E  0E01               	movlw	1
  9955  001990  6E17               	movwf	ECANReceiveMessage@temp,c
  9956                           
  9957                           ;ECAN.c: 959: }
  9958  001992  D001               	goto	l5419
  9959  001994                     l690:
  9960                           
  9961                           ;ECAN.c: 960: else
  9962                           ;ECAN.c: 961: temp.Val = 0;
  9963  001994  6A17               	clrf	ECANReceiveMessage@temp,c
  9964  001996                     l5419:
  9965                           
  9966                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
  9967  001996  2818               	incf	ECANReceiveMessage@ptr,w,c
  9968  001998  6E08               	movwf	?__RegsToCANID,c
  9969  00199A  0E00               	movlw	0
  9970  00199C  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
  9971  00199E  6E09               	movwf	?__RegsToCANID+1,c
  9972  0019A0  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
  9973  0019A4  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
  9974  0019A8  EC54  F00F         	call	__RegsToCANID	;wreg free
  9975                           
  9976                           ;ECAN.c: 966: ptr += 6;
  9977  0019AC  0E06               	movlw	6
  9978  0019AE  2618               	addwf	ECANReceiveMessage@ptr,f,c
  9979  0019B0  0E00               	movlw	0
  9980  0019B2  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
  9981                           
  9982                           ;ECAN.c: 967: temp.Val = *dataLen;
  9983  0019B4  5010               	movf	ECANReceiveMessage@dataLen,w,c
  9984  0019B6  6ED9               	movwf	fsr2l,c
  9985  0019B8  6ADA               	clrf	fsr2h,c
  9986  0019BA  50DF               	movf	indf2,w,c
  9987  0019BC  6E17               	movwf	ECANReceiveMessage@temp,c
  9988                           
  9989                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
  9990  0019BE  6A15               	clrf	ECANReceiveMessage@i,c
  9991  0019C0  D00D               	goto	l5435
  9992  0019C2                     l5427:
  9993                           
  9994                           ;ECAN.c: 969: *data++ = *ptr++;
  9995  0019C2  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
  9996  0019C6  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
  9997  0019CA  500F               	movf	ECANReceiveMessage@data,w,c
  9998  0019CC  6EE1               	movwf	fsr1l,c
  9999  0019CE  6AE2               	clrf	fsr1h,c
 10000  0019D0  CFDF FFE7          	movff	indf2,indf1
 10001  0019D4  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10002  0019D6  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10003  0019D8  2A0F               	incf	ECANReceiveMessage@data,f,c
 10004  0019DA  2A15               	incf	ECANReceiveMessage@i,f,c
 10005  0019DC                     l5435:
 10006  0019DC  5017               	movf	ECANReceiveMessage@temp,w,c
 10007  0019DE  5C15               	subwf	ECANReceiveMessage@i,w,c
 10008  0019E0  E3F0               	bnc	l5427
 10009                           
 10010                           ;ECAN.c: 972: if ( IRXIF )
 10011  0019E2  AE77               	btfss	3959,7,c	;volatile
 10012  0019E4  D006               	goto	l5441
 10013                           
 10014                           ;ECAN.c: 973: {
 10015                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10016  0019E6  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10017  0019E8  6ED9               	movwf	fsr2l,c
 10018  0019EA  6ADA               	clrf	fsr2h,c
 10019  0019EC  0E00               	movlw	0
 10020  0019EE  88DB               	bsf	plusw2,4,c
 10021                           
 10022                           ;ECAN.c: 975: IRXIF = 0;
 10023  0019F0  9E77               	bcf	3959,7,c	;volatile
 10024  0019F2                     l5441:
 10025                           
 10026                           ;ECAN.c: 976: }
 10027                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10028  0019F2  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10029  0019F6  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10030  0019FA  0E7F               	movlw	127
 10031  0019FC  16DF               	andwf	indf2,f,c
 10032                           
 10033                           ;ECAN.c: 983: if ( mode == 0x80 )
 10034  0019FE  5016               	movf	ECANReceiveMessage@mode,w,c
 10035  001A00  0A80               	xorlw	128
 10036  001A02  B4D8               	btfsc	status,2,c
 10037                           
 10038                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10039  001A04  9E71               	bcf	3953,7,c	;volatile
 10040                           
 10041                           ;ECAN.c: 990: return TRUE;
 10042  001A06  0C01               	retlw	1
 10043  001A08                     __end_of_ECANReceiveMessage:
 10044                           	opt stack 0
 10045                           tblptru	equ	0xFF8
 10046                           tblptrh	equ	0xFF7
 10047                           tblptrl	equ	0xFF6
 10048                           tablat	equ	0xFF5
 10049                           prodh	equ	0xFF4
 10050                           prodl	equ	0xFF3
 10051                           postinc0	equ	0xFEE
 10052                           wreg	equ	0xFE8
 10053                           indf1	equ	0xFE7
 10054                           fsr1h	equ	0xFE2
 10055                           fsr1l	equ	0xFE1
 10056                           indf2	equ	0xFDF
 10057                           postinc2	equ	0xFDE
 10058                           postdec2	equ	0xFDD
 10059                           plusw2	equ	0xFDB
 10060                           fsr2h	equ	0xFDA
 10061                           fsr2l	equ	0xFD9
 10062                           status	equ	0xFD8
 10063                           
 10064 ;; *************** function __RegsToCANID *****************
 10065 ;; Defined at:
 10066 ;;		line 1156 in file "../ECAN.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10069 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10070 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10071 ;;  val             1    9[COMRAM] PTR unsigned long 
 10072 ;;		 -> getVSCPFrame@id(4), 
 10073 ;;  type            1   10[COMRAM] unsigned char 
 10074 ;; Auto vars:     Size  Location     Type
 10075 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10076 ;;		 -> getVSCPFrame@id(4), 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;		None               void
 10079 ;; Registers used:
 10080 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10086 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10089 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10090 ;;Total ram usage:        7 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    2
 10093 ;; This function calls:
 10094 ;;		Nothing
 10095 ;; This function is called by:
 10096 ;;		_ECANReceiveMessage
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           	psect	text57
 10101  001EA8                     __ptext57:
 10102                           	opt stack 0
 10103  001EA8                     __RegsToCANID:
 10104                           	opt stack 24
 10105                           
 10106                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10107                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10108                           
 10109                           ;incstack = 0
 10110                           ;incstack = 0
 10111  001EA8  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10112                           
 10113                           ;ECAN.c: 1161: if ( type == 0 )
 10114  001EAC  660B               	tstfsz	__RegsToCANID@type,c
 10115  001EAE  D046               	goto	l5515
 10116                           
 10117                           ;ECAN.c: 1162: {
 10118                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10119  001EB0  500E               	movf	__RegsToCANID@Value,w,c
 10120  001EB2  6ED9               	movwf	fsr2l,c
 10121  001EB4  6ADA               	clrf	fsr2h,c
 10122  001EB6  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10123  001EBA  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10124  001EBE  50E7               	movf	indf1,w,c
 10125  001EC0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10126  001EC2  90D8               	bcf	status,0,c
 10127  001EC4  360C               	rlcf	??__RegsToCANID,f,c
 10128  001EC6  90D8               	bcf	status,0,c
 10129  001EC8  360C               	rlcf	??__RegsToCANID,f,c
 10130  001ECA  90D8               	bcf	status,0,c
 10131  001ECC  340C               	rlcf	??__RegsToCANID,w,c
 10132  001ECE  6EDF               	movwf	indf2,c
 10133                           
 10134                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10135  001ED0  500E               	movf	__RegsToCANID@Value,w,c
 10136  001ED2  6ED9               	movwf	fsr2l,c
 10137  001ED4  6ADA               	clrf	fsr2h,c
 10138  001ED6  2AD9               	incf	fsr2l,f,c
 10139  001ED8  6ADA               	clrf	fsr2h,c
 10140  001EDA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10141  001EDE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10142  001EE2  50E7               	movf	indf1,w,c
 10143  001EE4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10144  001EE6  0E05               	movlw	5
 10145  001EE8  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10146  001EEA                     u4975:
 10147  001EEA  90D8               	bcf	status,0,c
 10148  001EEC  320C               	rrcf	??__RegsToCANID,f,c
 10149  001EEE  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10150  001EF0  D7FC               	goto	u4975
 10151  001EF2  500C               	movf	??__RegsToCANID,w,c
 10152  001EF4  6EDF               	movwf	indf2,c
 10153                           
 10154                           ;ECAN.c: 1166: ptr++;
 10155  001EF6  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10156  001EF8  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10157                           
 10158                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10159  001EFA  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10160  001EFE  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10161  001F02  50DF               	movf	indf2,w,c
 10162  001F04  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10163  001F06  0E05               	movlw	5
 10164  001F08  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10165  001F0A                     u4985:
 10166  001F0A  90D8               	bcf	status,0,c
 10167  001F0C  320C               	rrcf	??__RegsToCANID,f,c
 10168  001F0E  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10169  001F10  D7FC               	goto	u4985
 10170  001F12  500E               	movf	__RegsToCANID@Value,w,c
 10171  001F14  6ED9               	movwf	fsr2l,c
 10172  001F16  6ADA               	clrf	fsr2h,c
 10173  001F18  500C               	movf	??__RegsToCANID,w,c
 10174  001F1A  12DF               	iorwf	indf2,f,c
 10175                           
 10176                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10177  001F1C  500E               	movf	__RegsToCANID@Value,w,c
 10178  001F1E  6ED9               	movwf	fsr2l,c
 10179  001F20  6ADA               	clrf	fsr2h,c
 10180  001F22  0E02               	movlw	2
 10181  001F24  26D9               	addwf	fsr2l,f,c
 10182  001F26  6ADA               	clrf	fsr2h,c
 10183  001F28  6ADF               	clrf	indf2,c
 10184                           
 10185                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10186  001F2A  500E               	movf	__RegsToCANID@Value,w,c
 10187  001F2C  6ED9               	movwf	fsr2l,c
 10188  001F2E  6ADA               	clrf	fsr2h,c
 10189  001F30  0E03               	movlw	3
 10190  001F32  26D9               	addwf	fsr2l,f,c
 10191  001F34  6ADA               	clrf	fsr2h,c
 10192  001F36  0E00               	movlw	0
 10193  001F38  6EDF               	movwf	indf2,c
 10194                           
 10195                           ;ECAN.c: 1170: }
 10196  001F3A  0C00               	retlw	0
 10197  001F3C                     l5515:
 10198                           
 10199                           ;ECAN.c: 1171: else
 10200                           ;ECAN.c: 1172: {
 10201                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10202  001F3C  500E               	movf	__RegsToCANID@Value,w,c
 10203  001F3E  6ED9               	movwf	fsr2l,c
 10204  001F40  6ADA               	clrf	fsr2h,c
 10205  001F42  0E02               	movlw	2
 10206  001F44  26D9               	addwf	fsr2l,f,c
 10207  001F46  6ADA               	clrf	fsr2h,c
 10208  001F48  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10209  001F4C  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10210  001F50  50E7               	movf	indf1,w,c
 10211  001F52  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10212  001F54  0E05               	movlw	5
 10213  001F56  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10214  001F58                     u4995:
 10215  001F58  90D8               	bcf	status,0,c
 10216  001F5A  360C               	rlcf	??__RegsToCANID,f,c
 10217  001F5C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10218  001F5E  D7FC               	goto	u4995
 10219  001F60  500C               	movf	??__RegsToCANID,w,c
 10220  001F62  6EDF               	movwf	indf2,c
 10221                           
 10222                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10223  001F64  500E               	movf	__RegsToCANID@Value,w,c
 10224  001F66  6ED9               	movwf	fsr2l,c
 10225  001F68  6ADA               	clrf	fsr2h,c
 10226  001F6A  0E03               	movlw	3
 10227  001F6C  26D9               	addwf	fsr2l,f,c
 10228  001F6E  6ADA               	clrf	fsr2h,c
 10229  001F70  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10230  001F74  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10231  001F78  50E7               	movf	indf1,w,c
 10232  001F7A  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10233  001F7C  90D8               	bcf	status,0,c
 10234  001F7E  320C               	rrcf	??__RegsToCANID,f,c
 10235  001F80  90D8               	bcf	status,0,c
 10236  001F82  320C               	rrcf	??__RegsToCANID,f,c
 10237  001F84  90D8               	bcf	status,0,c
 10238  001F86  300C               	rrcf	??__RegsToCANID,w,c
 10239  001F88  6EDF               	movwf	indf2,c
 10240                           
 10241                           ;ECAN.c: 1176: ptr++;
 10242  001F8A  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10243  001F8C  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10244                           
 10245                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10246  001F8E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10247  001F92  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10248  001F96  50DF               	movf	indf2,w,c
 10249  001F98  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10250  001F9A  0E03               	movlw	3
 10251  001F9C  160C               	andwf	??__RegsToCANID,f,c
 10252  001F9E  500E               	movf	__RegsToCANID@Value,w,c
 10253  001FA0  6ED9               	movwf	fsr2l,c
 10254  001FA2  6ADA               	clrf	fsr2h,c
 10255  001FA4  0E02               	movlw	2
 10256  001FA6  26D9               	addwf	fsr2l,f,c
 10257  001FA8  6ADA               	clrf	fsr2h,c
 10258  001FAA  500C               	movf	??__RegsToCANID,w,c
 10259  001FAC  12DF               	iorwf	indf2,f,c
 10260                           
 10261                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10262  001FAE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10263  001FB2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10264  001FB6  50DF               	movf	indf2,w,c
 10265  001FB8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10266  001FBA  90D8               	bcf	status,0,c
 10267  001FBC  320C               	rrcf	??__RegsToCANID,f,c
 10268  001FBE  90D8               	bcf	status,0,c
 10269  001FC0  320C               	rrcf	??__RegsToCANID,f,c
 10270  001FC2  90D8               	bcf	status,0,c
 10271  001FC4  320C               	rrcf	??__RegsToCANID,f,c
 10272  001FC6  0E1C               	movlw	28
 10273  001FC8  160C               	andwf	??__RegsToCANID,f,c
 10274  001FCA  500E               	movf	__RegsToCANID@Value,w,c
 10275  001FCC  6ED9               	movwf	fsr2l,c
 10276  001FCE  6ADA               	clrf	fsr2h,c
 10277  001FD0  0E02               	movlw	2
 10278  001FD2  26D9               	addwf	fsr2l,f,c
 10279  001FD4  6ADA               	clrf	fsr2h,c
 10280  001FD6  500C               	movf	??__RegsToCANID,w,c
 10281  001FD8  12DF               	iorwf	indf2,f,c
 10282                           
 10283                           ;ECAN.c: 1180: ptr++;
 10284  001FDA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10285  001FDC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10286                           
 10287                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10288  001FDE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10289  001FE2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10290  001FE6  500E               	movf	__RegsToCANID@Value,w,c
 10291  001FE8  6EE1               	movwf	fsr1l,c
 10292  001FEA  6AE2               	clrf	fsr1h,c
 10293  001FEC  2AE1               	incf	fsr1l,f,c
 10294  001FEE  6AE2               	clrf	fsr1h,c
 10295  001FF0  CFDF FFE7          	movff	indf2,indf1
 10296                           
 10297                           ;ECAN.c: 1182: ptr++;
 10298  001FF4  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10299  001FF6  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10300                           
 10301                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10302  001FF8  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10303  001FFC  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10304  002000  500E               	movf	__RegsToCANID@Value,w,c
 10305  002002  6EE1               	movwf	fsr1l,c
 10306  002004  6AE2               	clrf	fsr1h,c
 10307  002006  CFDF FFE7          	movff	indf2,indf1
 10308  00200A  0012               	return	
 10309  00200C                     __end_of__RegsToCANID:
 10310                           	opt stack 0
 10311                           tblptru	equ	0xFF8
 10312                           tblptrh	equ	0xFF7
 10313                           tblptrl	equ	0xFF6
 10314                           tablat	equ	0xFF5
 10315                           prodh	equ	0xFF4
 10316                           prodl	equ	0xFF3
 10317                           postinc0	equ	0xFEE
 10318                           wreg	equ	0xFE8
 10319                           indf1	equ	0xFE7
 10320                           fsr1h	equ	0xFE2
 10321                           fsr1l	equ	0xFE1
 10322                           indf2	equ	0xFDF
 10323                           postinc2	equ	0xFDE
 10324                           postdec2	equ	0xFDD
 10325                           plusw2	equ	0xFDB
 10326                           fsr2h	equ	0xFDA
 10327                           fsr2l	equ	0xFD9
 10328                           status	equ	0xFD8
 10329                           
 10330 ;; *************** function __ECANPointBuffer *****************
 10331 ;; Defined at:
 10332 ;;		line 1207 in file "../ECAN.c"
 10333 ;; Parameters:    Size  Location     Type
 10334 ;;  b               1    wreg     unsigned char 
 10335 ;; Auto vars:     Size  Location     Type
 10336 ;;  b               1   10[COMRAM] unsigned char 
 10337 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10338 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10339 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10340 ;; Return value:  Size  Location     Type
 10341 ;;                  2    7[COMRAM] PTR unsigned char 
 10342 ;; Registers used:
 10343 ;;		wreg, status,2, status,0
 10344 ;; Tracked objects:
 10345 ;;		On entry : F/0
 10346 ;;		On exit  : 0/0
 10347 ;;		Unchanged: 0/0
 10348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10349 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10350 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10352 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10353 ;;Total ram usage:        6 bytes
 10354 ;; Hardware stack levels used:    1
 10355 ;; Hardware stack levels required when called:    2
 10356 ;; This function calls:
 10357 ;;		Nothing
 10358 ;; This function is called by:
 10359 ;;		_ECANReceiveMessage
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           	psect	text58
 10364  002A8C                     __ptext58:
 10365                           	opt stack 0
 10366  002A8C                     __ECANPointBuffer:
 10367                           	opt stack 24
 10368                           
 10369                           ;incstack = 0
 10370                           ;incstack = 0
 10371                           ;__ECANPointBuffer@b stored from wreg
 10372  002A8C  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10373                           
 10374                           ; BSR set to: 0
 10375                           ;ECAN.c: 1208: BYTE* pt;
 10376                           ;ECAN.c: 1210: switch(b)
 10377  002A90  D028               	goto	l5501
 10378  002A92                     l5483:
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10382  002A92  0E0F               	movlw	15	;volatile
 10383  002A94  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10384  002A96  0E60               	movlw	96	;volatile
 10385  002A98  D022               	goto	L42
 10386  002A9A                     l5485:
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10390  002A9A  010F               	movlb	15	; () banked
 10391  002A9C  0E0F               	movlw	15	;volatile
 10392  002A9E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10393  002AA0  0E30               	movlw	48	;volatile
 10394  002AA2  D01D               	goto	L42
 10395  002AA4                     l5487:
 10396                           
 10397                           ; BSR set to: 0
 10398                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10399  002AA4  010E               	movlb	14	; () banked
 10400  002AA6  0E0E               	movlw	14	;volatile
 10401  002AA8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10402  002AAA  0E80               	movlw	128	;volatile
 10403  002AAC  D018               	goto	L42
 10404  002AAE                     l5489:
 10405                           
 10406                           ; BSR set to: 0
 10407                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 10408  002AAE  010E               	movlb	14	; () banked
 10409  002AB0  0E0E               	movlw	14	;volatile
 10410  002AB2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10411  002AB4  0E90               	movlw	144	;volatile
 10412  002AB6  D013               	goto	L42
 10413  002AB8                     l5491:
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 10417  002AB8  010E               	movlb	14	; () banked
 10418  002ABA  0E0E               	movlw	14	;volatile
 10419  002ABC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10420  002ABE  0EA0               	movlw	160	;volatile
 10421  002AC0  D00E               	goto	L42
 10422  002AC2                     l5493:
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 10426  002AC2  010E               	movlb	14	; () banked
 10427  002AC4  0E0E               	movlw	14	;volatile
 10428  002AC6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10429  002AC8  0EB0               	movlw	176	;volatile
 10430  002ACA  D009               	goto	L42
 10431  002ACC                     l5495:
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 10435  002ACC  010E               	movlb	14	; () banked
 10436  002ACE  0E0E               	movlw	14	;volatile
 10437  002AD0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10438  002AD2  0EC0               	movlw	192	;volatile
 10439  002AD4  D004               	goto	L42
 10440  002AD6                     l5497:
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 10444  002AD6  010E               	movlb	14	; () banked
 10445  002AD8  0E0E               	movlw	14	;volatile
 10446  002ADA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10447  002ADC  0ED0               	movlw	208	;volatile
 10448  002ADE                     L42:
 10449  002ADE  6E0C               	movwf	__ECANPointBuffer@pt,c
 10450                           
 10451                           ;ECAN.c: 1235: break;
 10452  002AE0  D00F               	goto	l717
 10453  002AE2                     l5501:
 10454                           
 10455                           ; BSR set to: 0
 10456  002AE2  500B               	movf	__ECANPointBuffer@b,w,c
 10457                           
 10458                           ; Switch size 1, requested type "speed"
 10459                           ; Number of cases is 7, Range of values is 0 to 6
 10460                           ; switch strategies available:
 10461                           ; Name         Instructions Cycles
 10462                           ; simple_byte           22    12 (average)
 10463                           ;	Chosen strategy is simple_byte
 10464  002AE4  E0D6               	bz	l5483
 10465  002AE6  0A01               	xorlw	1	; case 1
 10466  002AE8  E0D8               	bz	l5485
 10467  002AEA  0A03               	xorlw	3	; case 2
 10468  002AEC  E0DB               	bz	l5487
 10469  002AEE  0A01               	xorlw	1	; case 3
 10470  002AF0  E0DE               	bz	l5489
 10471  002AF2  0A07               	xorlw	7	; case 4
 10472  002AF4  E0E1               	bz	l5491
 10473  002AF6  0A01               	xorlw	1	; case 5
 10474  002AF8  E0E4               	bz	l5493
 10475  002AFA  0A03               	xorlw	3	; case 6
 10476  002AFC  E0E7               	bz	l5495
 10477  002AFE  D7EB               	goto	l5497
 10478  002B00                     l717:
 10479                           
 10480                           ;ECAN.c: 1237: return (pt);
 10481  002B00  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 10482  002B04  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 10483  002B08  0012               	return	
 10484  002B0A                     __end_of__ECANPointBuffer:
 10485                           	opt stack 0
 10486                           tblptru	equ	0xFF8
 10487                           tblptrh	equ	0xFF7
 10488                           tblptrl	equ	0xFF6
 10489                           tablat	equ	0xFF5
 10490                           prodh	equ	0xFF4
 10491                           prodl	equ	0xFF3
 10492                           postinc0	equ	0xFEE
 10493                           wreg	equ	0xFE8
 10494                           indf1	equ	0xFE7
 10495                           fsr1h	equ	0xFE2
 10496                           fsr1l	equ	0xFE1
 10497                           indf2	equ	0xFDF
 10498                           postinc2	equ	0xFDE
 10499                           postdec2	equ	0xFDD
 10500                           plusw2	equ	0xFDB
 10501                           fsr2h	equ	0xFDA
 10502                           fsr2l	equ	0xFD9
 10503                           status	equ	0xFD8
 10504                           
 10505 ;; *************** function _vscp_check_pstorage *****************
 10506 ;; Defined at:
 10507 ;;		line 171 in file "../../vscp_firmware/common/vscp_firmware.c"
 10508 ;; Parameters:    Size  Location     Type
 10509 ;;		None
 10510 ;; Auto vars:     Size  Location     Type
 10511 ;;		None
 10512 ;; Return value:  Size  Location     Type
 10513 ;;                  1    wreg      unsigned char 
 10514 ;; Registers used:
 10515 ;;		wreg, status,2, status,0, cstack
 10516 ;; Tracked objects:
 10517 ;;		On entry : E/E
 10518 ;;		On exit  : 0/0
 10519 ;;		Unchanged: 0/0
 10520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10525 ;;Total ram usage:        0 bytes
 10526 ;; Hardware stack levels used:    1
 10527 ;; Hardware stack levels required when called:    5
 10528 ;; This function calls:
 10529 ;;		_vscp_writeNicknamePermanent
 10530 ;;		_vscp_setControlByte
 10531 ;;		_vscp_getControlByte
 10532 ;;		_vscp_init_pstorage
 10533 ;; This function is called by:
 10534 ;;		_main
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           	psect	text59
 10539  002C74                     __ptext59:
 10540                           	opt stack 0
 10541  002C74                     _vscp_check_pstorage:
 10542                           	opt stack 25
 10543                           
 10544                           ;vscp_firmware.c: 173: if ( ( 0x55 ==
 10545                           ;vscp_firmware.c: 174: vscp_getControlByte( 0 ) ) &&
 10546                           ;vscp_firmware.c: 175: ( 0xAA ==
 10547                           ;vscp_firmware.c: 176: vscp_getControlByte( 1 ) ) ) {
 10548                           
 10549                           ;incstack = 0
 10550                           ;incstack = 0
 10551  002C74  0E00               	movlw	0
 10552  002C76  EC17  F018         	call	_vscp_getControlByte
 10553  002C7A  0A55               	xorlw	85
 10554  002C7C  E106               	bnz	l5929
 10555  002C7E  0E01               	movlw	1
 10556  002C80  EC17  F018         	call	_vscp_getControlByte
 10557  002C84  0AAA               	xorlw	170
 10558  002C86  E101               	bnz	l5929
 10559                           
 10560                           ;vscp_firmware.c: 177: return !0;
 10561  002C88  0C01               	retlw	1
 10562  002C8A                     l5929:
 10563                           
 10564                           ;vscp_firmware.c: 178: }
 10565                           ;vscp_firmware.c: 180: vscp_initledfunc = 0x02;
 10566  002C8A  0E02               	movlw	2
 10567  002C8C  6E56               	movwf	_vscp_initledfunc,c
 10568                           
 10569                           ;vscp_firmware.c: 183: vscp_init_pstorage();
 10570  002C8E  ECB9  F018         	call	_vscp_init_pstorage	;wreg free
 10571                           
 10572                           ;vscp_firmware.c: 186: vscp_writeNicknamePermanent( 0xff );
 10573  002C92  0EFF               	movlw	255
 10574  002C94  EC53  F018         	call	_vscp_writeNicknamePermanent
 10575                           
 10576                           ;vscp_firmware.c: 189: vscp_setControlByte( 0,
 10577                           ;vscp_firmware.c: 190: 0x55 );
 10578  002C98  0E55               	movlw	85
 10579  002C9A  6E0C               	movwf	?_vscp_setControlByte,c
 10580  002C9C  0E00               	movlw	0
 10581  002C9E  EC8F  F017         	call	_vscp_setControlByte
 10582                           
 10583                           ;vscp_firmware.c: 191: vscp_setControlByte( 1,
 10584                           ;vscp_firmware.c: 192: 0xAA );
 10585  002CA2  0EAA               	movlw	170
 10586  002CA4  6E0C               	movwf	?_vscp_setControlByte,c
 10587  002CA6  0E01               	movlw	1
 10588  002CA8  EC8F  F017         	call	_vscp_setControlByte
 10589                           
 10590                           ;vscp_firmware.c: 194: return 0;
 10591  002CAC  0C00               	retlw	0
 10592  002CAE                     __end_of_vscp_check_pstorage:
 10593                           	opt stack 0
 10594                           tblptru	equ	0xFF8
 10595                           tblptrh	equ	0xFF7
 10596                           tblptrl	equ	0xFF6
 10597                           tablat	equ	0xFF5
 10598                           prodh	equ	0xFF4
 10599                           prodl	equ	0xFF3
 10600                           postinc0	equ	0xFEE
 10601                           wreg	equ	0xFE8
 10602                           indf1	equ	0xFE7
 10603                           fsr1h	equ	0xFE2
 10604                           fsr1l	equ	0xFE1
 10605                           indf2	equ	0xFDF
 10606                           postinc2	equ	0xFDE
 10607                           postdec2	equ	0xFDD
 10608                           plusw2	equ	0xFDB
 10609                           fsr2h	equ	0xFDA
 10610                           fsr2l	equ	0xFD9
 10611                           status	equ	0xFD8
 10612                           
 10613 ;; *************** function _vscp_init_pstorage *****************
 10614 ;; Defined at:
 10615 ;;		line 1350 in file "../main.c"
 10616 ;; Parameters:    Size  Location     Type
 10617 ;;		None
 10618 ;; Auto vars:     Size  Location     Type
 10619 ;;		None
 10620 ;; Return value:  Size  Location     Type
 10621 ;;		None               void
 10622 ;; Registers used:
 10623 ;;		wreg, status,2, status,0, cstack
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/E
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10633 ;;Total ram usage:        0 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    4
 10636 ;; This function calls:
 10637 ;;		_init_app_eeprom
 10638 ;; This function is called by:
 10639 ;;		_vscp_check_pstorage
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           	psect	text60
 10644  003172                     __ptext60:
 10645                           	opt stack 0
 10646  003172                     _vscp_init_pstorage:
 10647                           	opt stack 25
 10648                           
 10649                           ;main.c: 1351: init_app_eeprom();
 10650                           
 10651                           ;incstack = 0
 10652                           ;incstack = 0
 10653  003172  EF98  F013         	goto	_init_app_eeprom	;wreg free
 10654  003176                     __end_of_vscp_init_pstorage:
 10655                           	opt stack 0
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           postinc0	equ	0xFEE
 10663                           wreg	equ	0xFE8
 10664                           indf1	equ	0xFE7
 10665                           fsr1h	equ	0xFE2
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           postdec2	equ	0xFDD
 10670                           plusw2	equ	0xFDB
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _init_app_eeprom *****************
 10676 ;; Defined at:
 10677 ;;		line 418 in file "../main.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;  i               1   14[COMRAM] unsigned char 
 10682 ;;  j               1   13[COMRAM] unsigned char 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;		None               void
 10685 ;; Registers used:
 10686 ;;		wreg, status,2, status,0, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/E
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10695 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10696 ;;Total ram usage:        4 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:    3
 10699 ;; This function calls:
 10700 ;;		_Busy_eep
 10701 ;;		_Write_b_eep
 10702 ;; This function is called by:
 10703 ;;		_main
 10704 ;;		_vscp_init_pstorage
 10705 ;;		_vscp_restoreDefaults
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           	psect	text61
 10710  002730                     __ptext61:
 10711                           	opt stack 0
 10712  002730                     _init_app_eeprom:
 10713                           	opt stack 24
 10714                           
 10715                           ;main.c: 419: unsigned char i, j;
 10716                           ;main.c: 421: (Busy_eep(), Write_b_eep(0x22 + 0,0));
 10717                           
 10718                           ;incstack = 0
 10719                           ;incstack = 0
 10720  002730  ECB4  F018         	call	_Busy_eep	;wreg free
 10721  002734  6A09               	clrf	?_Write_b_eep+1,c
 10722  002736  0E22               	movlw	34
 10723  002738  6E08               	movwf	?_Write_b_eep,c
 10724  00273A  0E00               	movlw	0
 10725  00273C  6A0A               	clrf	?_Write_b_eep+2,c
 10726  00273E  EC57  F016         	call	_Write_b_eep	;wreg free
 10727                           
 10728                           ;main.c: 422: (Busy_eep(), Write_b_eep(0x22 + 1,0));
 10729  002742  ECB4  F018         	call	_Busy_eep	;wreg free
 10730  002746  6A09               	clrf	?_Write_b_eep+1,c
 10731  002748  0E23               	movlw	35
 10732  00274A  6E08               	movwf	?_Write_b_eep,c
 10733  00274C  0E00               	movlw	0
 10734  00274E  6A0A               	clrf	?_Write_b_eep+2,c
 10735  002750  EC57  F016         	call	_Write_b_eep	;wreg free
 10736                           
 10737                           ;main.c: 424: for ( i=3; i<21; i++ ) {
 10738  002754  0E03               	movlw	3
 10739  002756  6E0F               	movwf	init_app_eeprom@i,c
 10740  002758                     l3953:
 10741                           
 10742                           ;main.c: 425: (Busy_eep(), Write_b_eep(0x22 + 5 + (i-3),i));
 10743  002758  ECB4  F018         	call	_Busy_eep	;wreg free
 10744  00275C  0E24               	movlw	36
 10745  00275E  240F               	addwf	init_app_eeprom@i,w,c
 10746  002760  6E08               	movwf	?_Write_b_eep,c
 10747  002762  6A09               	clrf	?_Write_b_eep+1,c
 10748  002764  0E00               	movlw	0
 10749  002766  2209               	addwfc	?_Write_b_eep+1,f,c
 10750  002768  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
 10751  00276C  EC57  F016         	call	_Write_b_eep	;wreg free
 10752  002770  2A0F               	incf	init_app_eeprom@i,f,c
 10753  002772  0E14               	movlw	20
 10754  002774  640F               	cpfsgt	init_app_eeprom@i,c
 10755  002776  D7F0               	goto	l3953
 10756                           
 10757                           ;main.c: 426: }
 10758                           ;main.c: 428: (Busy_eep(), Write_b_eep(0x22 + 2,0));
 10759  002778  ECB4  F018         	call	_Busy_eep	;wreg free
 10760  00277C  6A09               	clrf	?_Write_b_eep+1,c
 10761  00277E  0E24               	movlw	36
 10762  002780  6E08               	movwf	?_Write_b_eep,c
 10763  002782  0E00               	movlw	0
 10764  002784  6A0A               	clrf	?_Write_b_eep+2,c
 10765  002786  EC57  F016         	call	_Write_b_eep	;wreg free
 10766                           
 10767                           ;main.c: 429: (Busy_eep(), Write_b_eep(0x22 + 3,0));
 10768  00278A  ECB4  F018         	call	_Busy_eep	;wreg free
 10769  00278E  6A09               	clrf	?_Write_b_eep+1,c
 10770  002790  0E25               	movlw	37
 10771  002792  6E08               	movwf	?_Write_b_eep,c
 10772  002794  0E00               	movlw	0
 10773  002796  6A0A               	clrf	?_Write_b_eep+2,c
 10774  002798  EC57  F016         	call	_Write_b_eep	;wreg free
 10775                           
 10776                           ;main.c: 430: (Busy_eep(), Write_b_eep(0x22 + 4,0));
 10777  00279C  ECB4  F018         	call	_Busy_eep	;wreg free
 10778  0027A0  6A09               	clrf	?_Write_b_eep+1,c
 10779  0027A2  0E26               	movlw	38
 10780  0027A4  6E08               	movwf	?_Write_b_eep,c
 10781  0027A6  0E00               	movlw	0
 10782  0027A8  6A0A               	clrf	?_Write_b_eep+2,c
 10783  0027AA  EC57  F016         	call	_Write_b_eep	;wreg free
 10784                           
 10785                           ;main.c: 434: for ( i = 0; i < 8; i++ ) {
 10786  0027AE  6A0F               	clrf	init_app_eeprom@i,c
 10787  0027B0                     l179:
 10788                           
 10789                           ;main.c: 435: for ( j = 0; j < 8; j++ ) {
 10790  0027B0  6A0E               	clrf	init_app_eeprom@j,c
 10791  0027B2                     l3979:
 10792                           
 10793                           ;main.c: 436: (Busy_eep(), Write_b_eep(0x22 + 23 + 0 + i * 8 + j,0));
 10794  0027B2  ECB4  F018         	call	_Busy_eep	;wreg free
 10795  0027B6  500E               	movf	init_app_eeprom@j,w,c
 10796  0027B8  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
 10797  0027BC  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
 10798  0027BE  90D8               	bcf	status,0,c
 10799  0027C0  360C               	rlcf	??_init_app_eeprom,f,c
 10800  0027C2  360D               	rlcf	??_init_app_eeprom+1,f,c
 10801  0027C4  90D8               	bcf	status,0,c
 10802  0027C6  360C               	rlcf	??_init_app_eeprom,f,c
 10803  0027C8  360D               	rlcf	??_init_app_eeprom+1,f,c
 10804  0027CA  90D8               	bcf	status,0,c
 10805  0027CC  360C               	rlcf	??_init_app_eeprom,f,c
 10806  0027CE  360D               	rlcf	??_init_app_eeprom+1,f,c
 10807  0027D0  260C               	addwf	??_init_app_eeprom,f,c
 10808  0027D2  0E00               	movlw	0
 10809  0027D4  220D               	addwfc	??_init_app_eeprom+1,f,c
 10810  0027D6  0E39               	movlw	57
 10811  0027D8  240C               	addwf	??_init_app_eeprom,w,c
 10812  0027DA  6E08               	movwf	?_Write_b_eep,c
 10813  0027DC  0E00               	movlw	0
 10814  0027DE  200D               	addwfc	??_init_app_eeprom+1,w,c
 10815  0027E0  6E09               	movwf	?_Write_b_eep+1,c
 10816  0027E2  0E00               	movlw	0
 10817  0027E4  6A0A               	clrf	?_Write_b_eep+2,c
 10818  0027E6  EC57  F016         	call	_Write_b_eep	;wreg free
 10819  0027EA  2A0E               	incf	init_app_eeprom@j,f,c
 10820  0027EC  0E07               	movlw	7
 10821  0027EE  640E               	cpfsgt	init_app_eeprom@j,c
 10822  0027F0  D7E0               	goto	l3979
 10823  0027F2  2A0F               	incf	init_app_eeprom@i,f,c
 10824  0027F4  640F               	cpfsgt	init_app_eeprom@i,c
 10825  0027F6  D7DC               	goto	l179
 10826  0027F8  0C07               	retlw	7
 10827  0027FA                     __end_of_init_app_eeprom:
 10828                           	opt stack 0
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           postinc0	equ	0xFEE
 10836                           wreg	equ	0xFE8
 10837                           indf1	equ	0xFE7
 10838                           fsr1h	equ	0xFE2
 10839                           fsr1l	equ	0xFE1
 10840                           indf2	equ	0xFDF
 10841                           postinc2	equ	0xFDE
 10842                           postdec2	equ	0xFDD
 10843                           plusw2	equ	0xFDB
 10844                           fsr2h	equ	0xFDA
 10845                           fsr2l	equ	0xFD9
 10846                           status	equ	0xFD8
 10847                           
 10848 ;; *************** function _vscp_getControlByte *****************
 10849 ;; Defined at:
 10850 ;;		line 1340 in file "../main.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;  idx             1    wreg     unsigned char 
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  idx             1    9[COMRAM] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  1    wreg      unsigned char 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, status,0, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/E
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10868 ;;Total ram usage:        1 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    3
 10871 ;; This function calls:
 10872 ;;		_Read_b_eep
 10873 ;; This function is called by:
 10874 ;;		_vscp_check_pstorage
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text62
 10879  00302E                     __ptext62:
 10880                           	opt stack 0
 10881  00302E                     _vscp_getControlByte:
 10882                           	opt stack 26
 10883                           
 10884                           ;incstack = 0
 10885                           ;incstack = 0
 10886                           ;vscp_getControlByte@idx stored from wreg
 10887  00302E  CFE8 F00A          	movff	wreg,vscp_getControlByte@idx
 10888                           
 10889                           ;main.c: 1341: if ( idx > 1 ) return 0;
 10890  003032  0E01               	movlw	1
 10891  003034  640A               	cpfsgt	vscp_getControlByte@idx,c
 10892  003036  D001               	goto	l6859
 10893  003038  0C00               	retlw	0
 10894  00303A                     l6859:
 10895                           
 10896                           ;main.c: 1342: return Read_b_eep(0x03 + idx);
 10897  00303A  0E03               	movlw	3
 10898  00303C  240A               	addwf	vscp_getControlByte@idx,w,c
 10899  00303E  6E08               	movwf	?_Read_b_eep,c
 10900  003040  6A09               	clrf	?_Read_b_eep+1,c
 10901  003042  0E00               	movlw	0
 10902  003044  2209               	addwfc	?_Read_b_eep+1,f,c
 10903  003046  EF25  F018         	goto	_Read_b_eep	;wreg free
 10904  00304A                     __end_of_vscp_getControlByte:
 10905                           	opt stack 0
 10906                           tblptru	equ	0xFF8
 10907                           tblptrh	equ	0xFF7
 10908                           tblptrl	equ	0xFF6
 10909                           tablat	equ	0xFF5
 10910                           prodh	equ	0xFF4
 10911                           prodl	equ	0xFF3
 10912                           postinc0	equ	0xFEE
 10913                           wreg	equ	0xFE8
 10914                           indf1	equ	0xFE7
 10915                           fsr1h	equ	0xFE2
 10916                           fsr1l	equ	0xFE1
 10917                           indf2	equ	0xFDF
 10918                           postinc2	equ	0xFDE
 10919                           postdec2	equ	0xFDD
 10920                           plusw2	equ	0xFDB
 10921                           fsr2h	equ	0xFDA
 10922                           fsr2l	equ	0xFD9
 10923                           status	equ	0xFD8
 10924                           
 10925 ;; *************** function _Read_b_eep *****************
 10926 ;; Defined at:
 10927 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 10928 ;; Parameters:    Size  Location     Type
 10929 ;;  badd            2    7[COMRAM] unsigned int 
 10930 ;; Auto vars:     Size  Location     Type
 10931 ;;		None
 10932 ;; Return value:  Size  Location     Type
 10933 ;;                  1    wreg      unsigned char 
 10934 ;; Registers used:
 10935 ;;		wreg, status,2, status,0
 10936 ;; Tracked objects:
 10937 ;;		On entry : 0/0
 10938 ;;		On exit  : 0/0
 10939 ;;		Unchanged: 0/0
 10940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10944 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10945 ;;Total ram usage:        2 bytes
 10946 ;; Hardware stack levels used:    1
 10947 ;; Hardware stack levels required when called:    2
 10948 ;; This function calls:
 10949 ;;		Nothing
 10950 ;; This function is called by:
 10951 ;;		_main
 10952 ;;		_vscp_readNicknamePermanent
 10953 ;;		_vscp_getZone
 10954 ;;		_vscp_getSubzone
 10955 ;;		_vscp_readAppReg
 10956 ;;		_vscp_writeAppReg
 10957 ;;		_SendInformationEvent
 10958 ;;		_doDM
 10959 ;;		_actionSet
 10960 ;;		_actionClr
 10961 ;;		_vscp_getGUID
 10962 ;;		_vscp_getUserID
 10963 ;;		_vscp_getManufacturerId
 10964 ;;		_vscp_getControlByte
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           	psect	text63
 10969  00304A                     __ptext63:
 10970                           	opt stack 0
 10971  00304A                     _Read_b_eep:
 10972                           	opt stack 26
 10973                           
 10974                           ;incstack = 0
 10975                           ;incstack = 0
 10976  00304A  5009               	movf	Read_b_eep@badd+1,w,c
 10977  00304C  0B03               	andlw	3
 10978  00304E  6E75               	movwf	3957,c	;volatile
 10979  003050  C008  FF74         	movff	Read_b_eep@badd,3956	;volatile
 10980  003054  9C7F               	bcf	3967,6,c	;volatile
 10981  003056  9E7F               	bcf	3967,7,c	;volatile
 10982  003058  807F               	bsf	3967,0,c	;volatile
 10983  00305A  F000               	nop		;# 
 10984  00305C  F000               	nop		;# 
 10985  00305E  5073               	movf	3955,w,c	;volatile
 10986  003060  0012               	return	
 10987  003062                     __end_of_Read_b_eep:
 10988                           	opt stack 0
 10989                           tblptru	equ	0xFF8
 10990                           tblptrh	equ	0xFF7
 10991                           tblptrl	equ	0xFF6
 10992                           tablat	equ	0xFF5
 10993                           prodh	equ	0xFF4
 10994                           prodl	equ	0xFF3
 10995                           postinc0	equ	0xFEE
 10996                           wreg	equ	0xFE8
 10997                           indf1	equ	0xFE7
 10998                           fsr1h	equ	0xFE2
 10999                           fsr1l	equ	0xFE1
 11000                           indf2	equ	0xFDF
 11001                           postinc2	equ	0xFDE
 11002                           postdec2	equ	0xFDD
 11003                           plusw2	equ	0xFDB
 11004                           fsr2h	equ	0xFDA
 11005                           fsr2l	equ	0xFD9
 11006                           status	equ	0xFD8
 11007                           
 11008 ;; *************** function _vscp_setControlByte *****************
 11009 ;; Defined at:
 11010 ;;		line 1329 in file "../main.c"
 11011 ;; Parameters:    Size  Location     Type
 11012 ;;  idx             1    wreg     unsigned char 
 11013 ;;  ctrl            1   11[COMRAM] unsigned char 
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;  idx             1   12[COMRAM] unsigned char 
 11016 ;; Return value:  Size  Location     Type
 11017 ;;		None               void
 11018 ;; Registers used:
 11019 ;;		wreg, status,2, status,0, cstack
 11020 ;; Tracked objects:
 11021 ;;		On entry : 0/E
 11022 ;;		On exit  : 0/0
 11023 ;;		Unchanged: 0/0
 11024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11025 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11028 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11029 ;;Total ram usage:        2 bytes
 11030 ;; Hardware stack levels used:    1
 11031 ;; Hardware stack levels required when called:    3
 11032 ;; This function calls:
 11033 ;;		_Busy_eep
 11034 ;;		_Write_b_eep
 11035 ;; This function is called by:
 11036 ;;		_vscp_check_pstorage
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           	psect	text64
 11041  002F1E                     __ptext64:
 11042                           	opt stack 0
 11043  002F1E                     _vscp_setControlByte:
 11044                           	opt stack 26
 11045                           
 11046                           ;incstack = 0
 11047                           ;incstack = 0
 11048                           ;vscp_setControlByte@idx stored from wreg
 11049  002F1E  CFE8 F00D          	movff	wreg,vscp_setControlByte@idx
 11050                           
 11051                           ;main.c: 1330: if ( idx > 1 ) return;
 11052  002F22  0E01               	movlw	1
 11053  002F24  640D               	cpfsgt	vscp_setControlByte@idx,c
 11054  002F26  D001               	goto	l5137
 11055  002F28  0C01               	retlw	1
 11056  002F2A                     l5137:
 11057                           
 11058                           ;main.c: 1331: (Busy_eep(), Write_b_eep(0x03 + idx,ctrl));
 11059  002F2A  ECB4  F018         	call	_Busy_eep	;wreg free
 11060  002F2E  0E03               	movlw	3
 11061  002F30  240D               	addwf	vscp_setControlByte@idx,w,c
 11062  002F32  6E08               	movwf	?_Write_b_eep,c
 11063  002F34  6A09               	clrf	?_Write_b_eep+1,c
 11064  002F36  0E00               	movlw	0
 11065  002F38  2209               	addwfc	?_Write_b_eep+1,f,c
 11066  002F3A  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 11067  002F3E  EF57  F016         	goto	_Write_b_eep	;wreg free
 11068  002F42                     __end_of_vscp_setControlByte:
 11069                           	opt stack 0
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           postinc0	equ	0xFEE
 11077                           wreg	equ	0xFE8
 11078                           indf1	equ	0xFE7
 11079                           fsr1h	equ	0xFE2
 11080                           fsr1l	equ	0xFE1
 11081                           indf2	equ	0xFDF
 11082                           postinc2	equ	0xFDE
 11083                           postdec2	equ	0xFDD
 11084                           plusw2	equ	0xFDB
 11085                           fsr2h	equ	0xFDA
 11086                           fsr2l	equ	0xFD9
 11087                           status	equ	0xFD8
 11088                           
 11089 ;; *************** function _vscp_writeNicknamePermanent *****************
 11090 ;; Defined at:
 11091 ;;		line 536 in file "../main.c"
 11092 ;; Parameters:    Size  Location     Type
 11093 ;;  nickname        1    wreg     unsigned char 
 11094 ;; Auto vars:     Size  Location     Type
 11095 ;;  nickname        1   11[COMRAM] unsigned char 
 11096 ;; Return value:  Size  Location     Type
 11097 ;;		None               void
 11098 ;; Registers used:
 11099 ;;		wreg, status,2, status,0, cstack
 11100 ;; Tracked objects:
 11101 ;;		On entry : 0/0
 11102 ;;		On exit  : 0/0
 11103 ;;		Unchanged: 0/0
 11104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11109 ;;Total ram usage:        1 bytes
 11110 ;; Hardware stack levels used:    1
 11111 ;; Hardware stack levels required when called:    3
 11112 ;; This function calls:
 11113 ;;		_Busy_eep
 11114 ;;		_Write_b_eep
 11115 ;; This function is called by:
 11116 ;;		_vscp_check_pstorage
 11117 ;;		_vscp_handleProbeState
 11118 ;;		_vscp_handleSetNickname
 11119 ;;		_vscp_handleDropNickname
 11120 ;; This function uses a non-reentrant model
 11121 ;;
 11122                           
 11123                           	psect	text65
 11124  0030A6                     __ptext65:
 11125                           	opt stack 0
 11126  0030A6                     _vscp_writeNicknamePermanent:
 11127                           	opt stack 25
 11128                           
 11129                           ;incstack = 0
 11130                           ;incstack = 0
 11131                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11132  0030A6  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11133                           
 11134                           ;main.c: 537: (Busy_eep(), Write_b_eep(0x01,nickname));
 11135  0030AA  ECB4  F018         	call	_Busy_eep	;wreg free
 11136  0030AE  6A09               	clrf	?_Write_b_eep+1,c
 11137  0030B0  0E01               	movlw	1
 11138  0030B2  6E08               	movwf	?_Write_b_eep,c
 11139  0030B4  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 11140  0030B8  EF57  F016         	goto	_Write_b_eep	;wreg free
 11141  0030BC                     __end_of_vscp_writeNicknamePermanent:
 11142                           	opt stack 0
 11143                           tblptru	equ	0xFF8
 11144                           tblptrh	equ	0xFF7
 11145                           tblptrl	equ	0xFF6
 11146                           tablat	equ	0xFF5
 11147                           prodh	equ	0xFF4
 11148                           prodl	equ	0xFF3
 11149                           postinc0	equ	0xFEE
 11150                           wreg	equ	0xFE8
 11151                           indf1	equ	0xFE7
 11152                           fsr1h	equ	0xFE2
 11153                           fsr1l	equ	0xFE1
 11154                           indf2	equ	0xFDF
 11155                           postinc2	equ	0xFDE
 11156                           postdec2	equ	0xFDD
 11157                           plusw2	equ	0xFDB
 11158                           fsr2h	equ	0xFDA
 11159                           fsr2l	equ	0xFD9
 11160                           status	equ	0xFD8
 11161                           
 11162 ;; *************** function _Write_b_eep *****************
 11163 ;; Defined at:
 11164 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 11165 ;; Parameters:    Size  Location     Type
 11166 ;;  badd            2    7[COMRAM] unsigned int 
 11167 ;;  bdat            1    9[COMRAM] unsigned char 
 11168 ;; Auto vars:     Size  Location     Type
 11169 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 11170 ;; Return value:  Size  Location     Type
 11171 ;;		None               void
 11172 ;; Registers used:
 11173 ;;		wreg, status,2, status,0
 11174 ;; Tracked objects:
 11175 ;;		On entry : 0/0
 11176 ;;		On exit  : 0/0
 11177 ;;		Unchanged: 0/0
 11178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11179 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11183 ;;Total ram usage:        4 bytes
 11184 ;; Hardware stack levels used:    1
 11185 ;; Hardware stack levels required when called:    2
 11186 ;; This function calls:
 11187 ;;		Nothing
 11188 ;; This function is called by:
 11189 ;;		_main
 11190 ;;		_init_app_eeprom
 11191 ;;		_vscp_setGUID
 11192 ;;		_vscp_setManufacturerId
 11193 ;;		_vscp_writeNicknamePermanent
 11194 ;;		_vscp_writeAppReg
 11195 ;;		_vscp_setUserID
 11196 ;;		_vscp_setControlByte
 11197 ;;		_vscp_goBootloaderMode
 11198 ;; This function uses a non-reentrant model
 11199 ;;
 11200                           
 11201                           	psect	text66
 11202  002CAE                     __ptext66:
 11203                           	opt stack 0
 11204  002CAE                     _Write_b_eep:
 11205                           	opt stack 24
 11206                           
 11207                           ;incstack = 0
 11208                           ;incstack = 0
 11209  002CAE  5009               	movf	Write_b_eep@badd+1,w,c
 11210  002CB0  0B03               	andlw	3
 11211  002CB2  6E75               	movwf	3957,c	;volatile
 11212  002CB4  C008  FF74         	movff	Write_b_eep@badd,3956	;volatile
 11213  002CB8  C00A  FF73         	movff	Write_b_eep@bdat,3955	;volatile
 11214  002CBC  9E7F               	bcf	3967,7,c	;volatile
 11215  002CBE  9C7F               	bcf	3967,6,c	;volatile
 11216  002CC0  847F               	bsf	3967,2,c	;volatile
 11217  002CC2  0E00               	movlw	0
 11218  002CC4  BEF2               	btfsc	intcon,7,c	;volatile
 11219  002CC6  0E01               	movlw	1
 11220  002CC8  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 11221  002CCA  9EF2               	bcf	intcon,7,c	;volatile
 11222  002CCC  0E55               	movlw	85
 11223  002CCE  6E7E               	movwf	3966,c	;volatile
 11224  002CD0  0EAA               	movlw	170
 11225  002CD2  6E7E               	movwf	3966,c	;volatile
 11226  002CD4  827F               	bsf	3967,1,c	;volatile
 11227  002CD6                     l1116:
 11228  002CD6  B27F               	btfsc	3967,1,c	;volatile
 11229  002CD8  D7FE               	goto	l1116
 11230  002CDA  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 11231  002CDC  D002               	bra	u3175
 11232  002CDE  9EF2               	bcf	intcon,7,c	;volatile
 11233  002CE0  D001               	bra	u3176
 11234  002CE2                     u3175:
 11235  002CE2  8EF2               	bsf	intcon,7,c	;volatile
 11236  002CE4                     u3176:
 11237  002CE4  947F               	bcf	3967,2,c	;volatile
 11238  002CE6  0012               	return	
 11239  002CE8                     __end_of_Write_b_eep:
 11240                           	opt stack 0
 11241                           tblptru	equ	0xFF8
 11242                           tblptrh	equ	0xFF7
 11243                           tblptrl	equ	0xFF6
 11244                           tablat	equ	0xFF5
 11245                           prodh	equ	0xFF4
 11246                           prodl	equ	0xFF3
 11247                           intcon	equ	0xFF2
 11248                           postinc0	equ	0xFEE
 11249                           wreg	equ	0xFE8
 11250                           indf1	equ	0xFE7
 11251                           fsr1h	equ	0xFE2
 11252                           fsr1l	equ	0xFE1
 11253                           indf2	equ	0xFDF
 11254                           postinc2	equ	0xFDE
 11255                           postdec2	equ	0xFDD
 11256                           plusw2	equ	0xFDB
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _Busy_eep *****************
 11262 ;; Defined at:
 11263 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;		None
 11268 ;; Return value:  Size  Location     Type
 11269 ;;		None               void
 11270 ;; Registers used:
 11271 ;;		None
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/0
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11281 ;;Total ram usage:        0 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:    2
 11284 ;; This function calls:
 11285 ;;		Nothing
 11286 ;; This function is called by:
 11287 ;;		_main
 11288 ;;		_init_app_eeprom
 11289 ;;		_vscp_setGUID
 11290 ;;		_vscp_setManufacturerId
 11291 ;;		_vscp_writeNicknamePermanent
 11292 ;;		_vscp_writeAppReg
 11293 ;;		_vscp_setUserID
 11294 ;;		_vscp_setControlByte
 11295 ;;		_vscp_goBootloaderMode
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text67
 11300  003168                     __ptext67:
 11301                           	opt stack 0
 11302  003168                     _Busy_eep:
 11303                           	opt stack 24
 11304  003168                     l1087:
 11305  003168  A27F               	btfss	3967,1,c	;volatile
 11306  00316A  0012               	return	
 11307  00316C  D7FD               	goto	l1087
 11308  00316E                     __end_of_Busy_eep:
 11309                           	opt stack 0
 11310                           tblptru	equ	0xFF8
 11311                           tblptrh	equ	0xFF7
 11312                           tblptrl	equ	0xFF6
 11313                           tablat	equ	0xFF5
 11314                           prodh	equ	0xFF4
 11315                           prodl	equ	0xFF3
 11316                           intcon	equ	0xFF2
 11317                           postinc0	equ	0xFEE
 11318                           wreg	equ	0xFE8
 11319                           indf1	equ	0xFE7
 11320                           fsr1h	equ	0xFE2
 11321                           fsr1l	equ	0xFE1
 11322                           indf2	equ	0xFDF
 11323                           postinc2	equ	0xFDE
 11324                           postdec2	equ	0xFDD
 11325                           plusw2	equ	0xFDB
 11326                           fsr2h	equ	0xFDA
 11327                           fsr2l	equ	0xFD9
 11328                           status	equ	0xFD8
 11329                           
 11330 ;; *************** function _init *****************
 11331 ;; Defined at:
 11332 ;;		line 293 in file "../main.c"
 11333 ;; Parameters:    Size  Location     Type
 11334 ;;		None
 11335 ;; Auto vars:     Size  Location     Type
 11336 ;;		None
 11337 ;; Return value:  Size  Location     Type
 11338 ;;		None               void
 11339 ;; Registers used:
 11340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11341 ;; Tracked objects:
 11342 ;;		On entry : 0/0
 11343 ;;		On exit  : E/E
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11350 ;;Total ram usage:        0 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    4
 11353 ;; This function calls:
 11354 ;;		_WriteTimer0
 11355 ;;		_init_app_ram
 11356 ;;		_OpenTimer0
 11357 ;;		_ECANInitialize
 11358 ;; This function is called by:
 11359 ;;		_main
 11360 ;; This function uses a non-reentrant model
 11361 ;;
 11362                           
 11363                           	psect	text68
 11364  002CE8                     __ptext68:
 11365                           	opt stack 0
 11366  002CE8                     _init:
 11367                           	opt stack 26
 11368                           
 11369                           ;main.c: 297: init_app_ram();
 11370                           
 11371                           ;incstack = 0
 11372                           ;incstack = 0
 11373  002CE8  EC7C  F018         	call	_init_app_ram	;wreg free
 11374                           
 11375                           ; BSR set to: 0
 11376                           ;main.c: 302: ANCON0 = 0;
 11377  002CEC  010F               	movlb	15	; () banked
 11378  002CEE  6B5D               	clrf	93,b	;volatile
 11379                           
 11380                           ; BSR set to: 15
 11381                           ;main.c: 303: ANCON1 = 0;
 11382  002CF0  6B5C               	clrf	92,b	;volatile
 11383                           
 11384                           ; BSR set to: 15
 11385                           ;main.c: 312: TRISA = 0x00;
 11386  002CF2  6A92               	clrf	3986,c	;volatile
 11387                           
 11388                           ; BSR set to: 15
 11389                           ;main.c: 313: PORTA = 0x00;
 11390  002CF4  6A80               	clrf	3968,c	;volatile
 11391                           
 11392                           ; BSR set to: 15
 11393                           ;main.c: 325: TRISB = 0b00001100;
 11394  002CF6  0E0C               	movlw	12
 11395  002CF8  6E93               	movwf	3987,c	;volatile
 11396                           
 11397                           ; BSR set to: 15
 11398                           ;main.c: 326: PORTB = 0x00;
 11399  002CFA  6A81               	clrf	3969,c	;volatile
 11400                           
 11401                           ; BSR set to: 15
 11402                           ;main.c: 336: TRISC = 0b00000001;
 11403  002CFC  0E01               	movlw	1
 11404  002CFE  6E94               	movwf	3988,c	;volatile
 11405                           
 11406                           ; BSR set to: 15
 11407                           ;main.c: 337: PORTC = 0x00;
 11408  002D00  6A82               	clrf	3970,c	;volatile
 11409                           
 11410                           ; BSR set to: 15
 11411                           ;main.c: 363: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11412  002D02  0E92               	movlw	146
 11413  002D04  ECEC  F017         	call	_OpenTimer0
 11414                           
 11415                           ; BSR set to: 15
 11416                           ;main.c: 364: WriteTimer0( 0xfb1d );
 11417  002D08  0EFB               	movlw	251
 11418  002D0A  6E09               	movwf	?_WriteTimer0+1,c
 11419  002D0C  0E1D               	movlw	29
 11420  002D0E  6E08               	movwf	?_WriteTimer0,c
 11421  002D10  EC85  F018         	call	_WriteTimer0	;wreg free
 11422                           
 11423                           ; BSR set to: 15
 11424                           ;main.c: 367: ECANInitialize();
 11425  002D14  EC01  F015         	call	_ECANInitialize	;wreg free
 11426                           
 11427                           ;main.c: 388: INTCONbits.PEIE = 1;
 11428  002D18  8CF2               	bsf	intcon,6,c	;volatile
 11429                           
 11430                           ;main.c: 391: INTCONbits.GIE = 1;
 11431  002D1A  8EF2               	bsf	intcon,7,c	;volatile
 11432  002D1C  0012               	return	
 11433  002D1E                     __end_of_init:
 11434                           	opt stack 0
 11435                           tblptru	equ	0xFF8
 11436                           tblptrh	equ	0xFF7
 11437                           tblptrl	equ	0xFF6
 11438                           tablat	equ	0xFF5
 11439                           prodh	equ	0xFF4
 11440                           prodl	equ	0xFF3
 11441                           intcon	equ	0xFF2
 11442                           postinc0	equ	0xFEE
 11443                           wreg	equ	0xFE8
 11444                           indf1	equ	0xFE7
 11445                           fsr1h	equ	0xFE2
 11446                           fsr1l	equ	0xFE1
 11447                           indf2	equ	0xFDF
 11448                           postinc2	equ	0xFDE
 11449                           postdec2	equ	0xFDD
 11450                           plusw2	equ	0xFDB
 11451                           fsr2h	equ	0xFDA
 11452                           fsr2l	equ	0xFD9
 11453                           status	equ	0xFD8
 11454                           
 11455 ;; *************** function _ECANInitialize *****************
 11456 ;; Defined at:
 11457 ;;		line 168 in file "../ECAN.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;		None
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;		None
 11462 ;; Return value:  Size  Location     Type
 11463 ;;		None               void
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : F/F
 11468 ;;		On exit  : E/E
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11475 ;;Total ram usage:        0 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    3
 11478 ;; This function calls:
 11479 ;;		_ECANSetOperationMode
 11480 ;; This function is called by:
 11481 ;;		_init
 11482 ;; This function uses a non-reentrant model
 11483 ;;
 11484                           
 11485                           	psect	text69
 11486  002A02                     __ptext69:
 11487                           	opt stack 0
 11488  002A02                     _ECANInitialize:
 11489                           	opt stack 26
 11490                           
 11491                           ; BSR set to: 15
 11492                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11493                           
 11494                           ;incstack = 0
 11495                           ;incstack = 0
 11496  002A02  0E80               	movlw	128
 11497  002A04  EC31  F018         	call	_ECANSetOperationMode
 11498                           
 11499                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11500  002A08  0E09               	movlw	9
 11501  002A0A  010E               	movlb	14	; () banked
 11502  002A0C  6F43               	movwf	67,b	;volatile
 11503                           
 11504                           ; BSR set to: 14
 11505                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11506  002A0E  0EFC               	movlw	252
 11507  002A10  6F44               	movwf	68,b	;volatile
 11508                           
 11509                           ; BSR set to: 14
 11510                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11511                           ;ECAN.c: 181: (0 << 6) |
 11512                           ;ECAN.c: 182: (2-1);
 11513  002A12  0E01               	movlw	1
 11514  002A14  6F45               	movwf	69,b	;volatile
 11515                           
 11516                           ; BSR set to: 14
 11517                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11518  002A16  0E20               	movlw	32
 11519  002A18  6E70               	movwf	3952,c	;volatile
 11520                           
 11521                           ; BSR set to: 14
 11522                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11523  002A1A  8E72               	bsf	3954,7,c	;volatile
 11524                           
 11525                           ; BSR set to: 14
 11526                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11527  002A1C  9C72               	bcf	3954,6,c	;volatile
 11528                           
 11529                           ; BSR set to: 14
 11530                           ;ECAN.c: 205: RXB0CON = 0;
 11531  002A1E  6A60               	clrf	3936,c	;volatile
 11532                           
 11533                           ; BSR set to: 14
 11534                           ;ECAN.c: 211: RXB1CON = 0;
 11535  002A20  010F               	movlb	15	; () banked
 11536  002A22  6B30               	clrf	48,b	;volatile
 11537                           
 11538                           ; BSR set to: 15
 11539                           ;ECAN.c: 221: B0CON = 0;
 11540  002A24  010E               	movlb	14	; () banked
 11541  002A26  6B80               	clrf	128,b	;volatile
 11542                           
 11543                           ; BSR set to: 14
 11544                           ;ECAN.c: 231: B1CON = 0;
 11545  002A28  6B90               	clrf	144,b	;volatile
 11546                           
 11547                           ; BSR set to: 14
 11548                           ;ECAN.c: 241: B2CON = 0;
 11549  002A2A  6BA0               	clrf	160,b	;volatile
 11550                           
 11551                           ; BSR set to: 14
 11552                           ;ECAN.c: 254: B3CON = 0 << 2;
 11553  002A2C  6BB0               	clrf	176,b	;volatile
 11554                           
 11555                           ; BSR set to: 14
 11556                           ;ECAN.c: 264: B4CON = 0 << 2;
 11557  002A2E  6BC0               	clrf	192,b	;volatile
 11558                           
 11559                           ; BSR set to: 14
 11560                           ;ECAN.c: 274: B5CON = 0 << 2;
 11561  002A30  6BD0               	clrf	208,b	;volatile
 11562                           
 11563                           ; BSR set to: 14
 11564                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11565  002A32  0EE0               	movlw	224
 11566  002A34  6F7D               	movwf	125,b	;volatile
 11567                           
 11568                           ; BSR set to: 14
 11569                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11570  002A36  6BE0               	clrf	224,b	;volatile
 11571                           
 11572                           ; BSR set to: 14
 11573  002A38  0E08               	movlw	8
 11574  002A3A  6FE1               	movwf	225,b	;volatile
 11575                           
 11576                           ; BSR set to: 14
 11577  002A3C  6BE2               	clrf	226,b	;volatile
 11578                           
 11579                           ; BSR set to: 14
 11580  002A3E  6BE3               	clrf	227,b	;volatile
 11581                           
 11582                           ; BSR set to: 14
 11583                           ;ECAN.c: 303: RXF1SIDH = (long)0x00000000L >> 21L;RXF1SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF1EIDH = (long)0x00000000L >> 8L;RXF1E
      +                          IDL = 0x00000000L;;
 11584  002A40  6BE4               	clrf	228,b	;volatile
 11585                           
 11586                           ; BSR set to: 14
 11587  002A42  0E08               	movlw	8
 11588  002A44  6FE5               	movwf	229,b	;volatile
 11589                           
 11590                           ; BSR set to: 14
 11591  002A46  6BE6               	clrf	230,b	;volatile
 11592                           
 11593                           ; BSR set to: 14
 11594  002A48  6BE7               	clrf	231,b	;volatile
 11595                           
 11596                           ; BSR set to: 14
 11597                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11598  002A4A  0E03               	movlw	3
 11599  002A4C  6F46               	movwf	70,b	;volatile
 11600                           
 11601                           ; BSR set to: 14
 11602                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 11603  002A4E  6B47               	clrf	71,b	;volatile
 11604                           
 11605                           ; BSR set to: 14
 11606                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 11607  002A50  6B71               	clrf	113,b	;volatile
 11608                           
 11609                           ; BSR set to: 14
 11610                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 11611  002A52  0E11               	movlw	17
 11612  002A54  6F72               	movwf	114,b	;volatile
 11613                           
 11614                           ; BSR set to: 14
 11615                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 11616  002A56  6F73               	movwf	115,b	;volatile
 11617                           
 11618                           ; BSR set to: 14
 11619                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 11620  002A58  6B74               	clrf	116,b	;volatile
 11621                           
 11622                           ; BSR set to: 14
 11623                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 11624  002A5A  6B75               	clrf	117,b	;volatile
 11625                           
 11626                           ; BSR set to: 14
 11627                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 11628  002A5C  6B76               	clrf	118,b	;volatile
 11629                           
 11630                           ; BSR set to: 14
 11631                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 11632  002A5E  6B77               	clrf	119,b	;volatile
 11633                           
 11634                           ; BSR set to: 14
 11635                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 11636  002A60  6B78               	clrf	120,b	;volatile
 11637                           
 11638                           ; BSR set to: 14
 11639                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 11640  002A62  0E54               	movlw	84
 11641  002A64  6F79               	movwf	121,b	;volatile
 11642                           
 11643                           ; BSR set to: 14
 11644                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 11645  002A66  0E05               	movlw	5
 11646  002A68  6F7A               	movwf	122,b	;volatile
 11647                           
 11648                           ; BSR set to: 14
 11649                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11650  002A6A  6B7B               	clrf	123,b	;volatile
 11651                           
 11652                           ; BSR set to: 14
 11653                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11654  002A6C  6B7B               	clrf	123,b	;volatile
 11655                           
 11656                           ; BSR set to: 14
 11657                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 11658  002A6E  0E0F               	movlw	15
 11659  002A70  6FF8               	movwf	248,b	;volatile
 11660                           
 11661                           ; BSR set to: 14
 11662  002A72  0EE0               	movlw	224
 11663  002A74  6FF9               	movwf	249,b	;volatile
 11664                           
 11665                           ; BSR set to: 14
 11666  002A76  6BFA               	clrf	250,b	;volatile
 11667                           
 11668                           ; BSR set to: 14
 11669  002A78  6BFB               	clrf	251,b	;volatile
 11670                           
 11671                           ; BSR set to: 14
 11672                           ;ECAN.c: 482: RXM0EXIDM = 1;
 11673  002A7A  87F9               	bsf	249,3,b	;volatile
 11674                           
 11675                           ; BSR set to: 14
 11676                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 11677  002A7C  6BFC               	clrf	252,b	;volatile
 11678                           
 11679                           ; BSR set to: 14
 11680  002A7E  6BFD               	clrf	253,b	;volatile
 11681                           
 11682                           ; BSR set to: 14
 11683  002A80  6BFE               	clrf	254,b	;volatile
 11684                           
 11685                           ; BSR set to: 14
 11686  002A82  6BFF               	clrf	255,b	;volatile
 11687                           
 11688                           ; BSR set to: 14
 11689                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 11690  002A84  87FD               	bsf	253,3,b	;volatile
 11691                           
 11692                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 11693  002A86  0E00               	movlw	0
 11694  002A88  EF31  F018         	goto	_ECANSetOperationMode
 11695  002A8C                     __end_of_ECANInitialize:
 11696                           	opt stack 0
 11697                           tblptru	equ	0xFF8
 11698                           tblptrh	equ	0xFF7
 11699                           tblptrl	equ	0xFF6
 11700                           tablat	equ	0xFF5
 11701                           prodh	equ	0xFF4
 11702                           prodl	equ	0xFF3
 11703                           intcon	equ	0xFF2
 11704                           postinc0	equ	0xFEE
 11705                           wreg	equ	0xFE8
 11706                           indf1	equ	0xFE7
 11707                           fsr1h	equ	0xFE2
 11708                           fsr1l	equ	0xFE1
 11709                           indf2	equ	0xFDF
 11710                           postinc2	equ	0xFDE
 11711                           postdec2	equ	0xFDD
 11712                           plusw2	equ	0xFDB
 11713                           fsr2h	equ	0xFDA
 11714                           fsr2l	equ	0xFD9
 11715                           status	equ	0xFD8
 11716                           
 11717 ;; *************** function _ECANSetOperationMode *****************
 11718 ;; Defined at:
 11719 ;;		line 1012 in file "../ECAN.c"
 11720 ;; Parameters:    Size  Location     Type
 11721 ;;  mode            1    wreg     enum E18989
 11722 ;; Auto vars:     Size  Location     Type
 11723 ;;  mode            1    7[COMRAM] enum E18989
 11724 ;; Return value:  Size  Location     Type
 11725 ;;		None               void
 11726 ;; Registers used:
 11727 ;;		wreg, status,2, status,0
 11728 ;; Tracked objects:
 11729 ;;		On entry : E/F
 11730 ;;		On exit  : E/E
 11731 ;;		Unchanged: E/0
 11732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11737 ;;Total ram usage:        1 bytes
 11738 ;; Hardware stack levels used:    1
 11739 ;; Hardware stack levels required when called:    2
 11740 ;; This function calls:
 11741 ;;		Nothing
 11742 ;; This function is called by:
 11743 ;;		_ECANInitialize
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           	psect	text70
 11748  003062                     __ptext70:
 11749                           	opt stack 0
 11750  003062                     _ECANSetOperationMode:
 11751                           	opt stack 26
 11752                           
 11753                           ;incstack = 0
 11754                           ;incstack = 0
 11755                           ;ECANSetOperationMode@mode stored from wreg
 11756  003062  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 11757                           
 11758                           ;ECAN.c: 1013: CANCON &= 0x1F;
 11759  003066  0E1F               	movlw	31
 11760  003068  166F               	andwf	3951,f,c	;volatile
 11761                           
 11762                           ;ECAN.c: 1014: CANCON |= mode;
 11763  00306A  5008               	movf	ECANSetOperationMode@mode,w,c
 11764  00306C  126F               	iorwf	3951,f,c	;volatile
 11765  00306E                     l5453:
 11766  00306E  506F               	movf	3951,w,c	;volatile
 11767  003070  0BE0               	andlw	224
 11768  003072  1808               	xorwf	ECANSetOperationMode@mode,w,c
 11769  003074  B4D8               	btfsc	status,2,c
 11770  003076  0012               	return	
 11771  003078  D7FA               	goto	l5453
 11772  00307A                     __end_of_ECANSetOperationMode:
 11773                           	opt stack 0
 11774                           tblptru	equ	0xFF8
 11775                           tblptrh	equ	0xFF7
 11776                           tblptrl	equ	0xFF6
 11777                           tablat	equ	0xFF5
 11778                           prodh	equ	0xFF4
 11779                           prodl	equ	0xFF3
 11780                           intcon	equ	0xFF2
 11781                           postinc0	equ	0xFEE
 11782                           wreg	equ	0xFE8
 11783                           indf1	equ	0xFE7
 11784                           fsr1h	equ	0xFE2
 11785                           fsr1l	equ	0xFE1
 11786                           indf2	equ	0xFDF
 11787                           postinc2	equ	0xFDE
 11788                           postdec2	equ	0xFDD
 11789                           plusw2	equ	0xFDB
 11790                           fsr2h	equ	0xFDA
 11791                           fsr2l	equ	0xFD9
 11792                           status	equ	0xFD8
 11793                           
 11794 ;; *************** function _OpenTimer0 *****************
 11795 ;; Defined at:
 11796 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  config          1    wreg     unsigned char 
 11799 ;; Auto vars:     Size  Location     Type
 11800 ;;  config          1    7[COMRAM] unsigned char 
 11801 ;; Return value:  Size  Location     Type
 11802 ;;		None               void
 11803 ;; Registers used:
 11804 ;;		wreg, status,2, status,0
 11805 ;; Tracked objects:
 11806 ;;		On entry : F/F
 11807 ;;		On exit  : F/F
 11808 ;;		Unchanged: E/0
 11809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11814 ;;Total ram usage:        1 bytes
 11815 ;; Hardware stack levels used:    1
 11816 ;; Hardware stack levels required when called:    2
 11817 ;; This function calls:
 11818 ;;		Nothing
 11819 ;; This function is called by:
 11820 ;;		_init
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           	psect	text71
 11825  002FD8                     __ptext71:
 11826                           	opt stack 0
 11827  002FD8                     _OpenTimer0:
 11828                           	opt stack 27
 11829                           
 11830                           ;incstack = 0
 11831                           ;incstack = 0
 11832                           ;OpenTimer0@config stored from wreg
 11833  002FD8  CFE8 F008          	movff	wreg,OpenTimer0@config
 11834                           
 11835                           ; BSR set to: 15
 11836  002FDC  5008               	movf	OpenTimer0@config,w,c
 11837  002FDE  0B7F               	andlw	127
 11838  002FE0  6ED5               	movwf	4053,c	;volatile
 11839                           
 11840                           ; BSR set to: 15
 11841  002FE2  6AD7               	clrf	4055,c	;volatile
 11842                           
 11843                           ; BSR set to: 15
 11844  002FE4  6AD6               	clrf	4054,c	;volatile
 11845                           
 11846                           ; BSR set to: 15
 11847  002FE6  94F2               	bcf	intcon,2,c	;volatile
 11848                           
 11849                           ; BSR set to: 15
 11850  002FE8  AE08               	btfss	OpenTimer0@config,7,c
 11851  002FEA  D002               	goto	l1132
 11852                           
 11853                           ; BSR set to: 15
 11854  002FEC  8AF2               	bsf	intcon,5,c	;volatile
 11855  002FEE  D001               	goto	l1133
 11856  002FF0                     l1132:
 11857                           
 11858                           ; BSR set to: 15
 11859  002FF0  9AF2               	bcf	intcon,5,c	;volatile
 11860  002FF2                     l1133:
 11861                           
 11862                           ; BSR set to: 15
 11863  002FF2  8ED5               	bsf	4053,7,c	;volatile
 11864                           
 11865                           ; BSR set to: 15
 11866  002FF4  0012               	return	
 11867  002FF6                     __end_of_OpenTimer0:
 11868                           	opt stack 0
 11869                           tblptru	equ	0xFF8
 11870                           tblptrh	equ	0xFF7
 11871                           tblptrl	equ	0xFF6
 11872                           tablat	equ	0xFF5
 11873                           prodh	equ	0xFF4
 11874                           prodl	equ	0xFF3
 11875                           intcon	equ	0xFF2
 11876                           postinc0	equ	0xFEE
 11877                           wreg	equ	0xFE8
 11878                           indf1	equ	0xFE7
 11879                           fsr1h	equ	0xFE2
 11880                           fsr1l	equ	0xFE1
 11881                           indf2	equ	0xFDF
 11882                           postinc2	equ	0xFDE
 11883                           postdec2	equ	0xFDD
 11884                           plusw2	equ	0xFDB
 11885                           fsr2h	equ	0xFDA
 11886                           fsr2l	equ	0xFD9
 11887                           status	equ	0xFD8
 11888                           
 11889 ;; *************** function _init_app_ram *****************
 11890 ;; Defined at:
 11891 ;;		line 401 in file "../main.c"
 11892 ;; Parameters:    Size  Location     Type
 11893 ;;		None
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;  i               1    0        unsigned char 
 11896 ;; Return value:  Size  Location     Type
 11897 ;;		None               void
 11898 ;; Registers used:
 11899 ;;		None
 11900 ;; Tracked objects:
 11901 ;;		On entry : 0/E
 11902 ;;		On exit  : F/0
 11903 ;;		Unchanged: 0/0
 11904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11909 ;;Total ram usage:        0 bytes
 11910 ;; Hardware stack levels used:    1
 11911 ;; Hardware stack levels required when called:    2
 11912 ;; This function calls:
 11913 ;;		Nothing
 11914 ;; This function is called by:
 11915 ;;		_main
 11916 ;;		_init
 11917 ;;		_vscp_restoreDefaults
 11918 ;; This function uses a non-reentrant model
 11919 ;;
 11920                           
 11921                           	psect	text72
 11922  0030F8                     __ptext72:
 11923                           	opt stack 0
 11924  0030F8                     _init_app_ram:
 11925                           	opt stack 25
 11926                           
 11927                           ;main.c: 402: uint8_t i;
 11928                           ;main.c: 404: measurement_clock = 0;
 11929                           
 11930                           ; BSR set to: 15
 11931                           ;incstack = 0
 11932                           ;incstack = 0
 11933  0030F8  0100               	movlb	0	; () banked
 11934  0030FA  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 11935  0030FC  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 11936  0030FE  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 11937  003100  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 11938                           
 11939                           ;main.c: 406: seconds = 0;
 11940  003102  6B6A               	clrf	_seconds& (0+255),b
 11941                           
 11942                           ;main.c: 407: minutes = 0;
 11943  003104  6B69               	clrf	_minutes& (0+255),b
 11944                           
 11945                           ;main.c: 408: hours = 0;
 11946  003106  6B68               	clrf	_hours& (0+255),b
 11947                           
 11948                           ; BSR set to: 0
 11949  003108  0012               	return	
 11950  00310A                     __end_of_init_app_ram:
 11951                           	opt stack 0
 11952                           tblptru	equ	0xFF8
 11953                           tblptrh	equ	0xFF7
 11954                           tblptrl	equ	0xFF6
 11955                           tablat	equ	0xFF5
 11956                           prodh	equ	0xFF4
 11957                           prodl	equ	0xFF3
 11958                           intcon	equ	0xFF2
 11959                           postinc0	equ	0xFEE
 11960                           wreg	equ	0xFE8
 11961                           indf1	equ	0xFE7
 11962                           fsr1h	equ	0xFE2
 11963                           fsr1l	equ	0xFE1
 11964                           indf2	equ	0xFDF
 11965                           postinc2	equ	0xFDE
 11966                           postdec2	equ	0xFDD
 11967                           plusw2	equ	0xFDB
 11968                           fsr2h	equ	0xFDA
 11969                           fsr2l	equ	0xFD9
 11970                           status	equ	0xFD8
 11971                           
 11972 ;; *************** function _WriteTimer0 *****************
 11973 ;; Defined at:
 11974 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11975 ;; Parameters:    Size  Location     Type
 11976 ;;  timer0          2    7[COMRAM] unsigned int 
 11977 ;; Auto vars:     Size  Location     Type
 11978 ;;  timer           2    9[COMRAM] struct Timers
 11979 ;; Return value:  Size  Location     Type
 11980 ;;		None               void
 11981 ;; Registers used:
 11982 ;;		None
 11983 ;; Tracked objects:
 11984 ;;		On entry : F/F
 11985 ;;		On exit  : F/F
 11986 ;;		Unchanged: E/0
 11987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11989 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11991 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11992 ;;Total ram usage:        4 bytes
 11993 ;; Hardware stack levels used:    1
 11994 ;; Hardware stack levels required when called:    2
 11995 ;; This function calls:
 11996 ;;		Nothing
 11997 ;; This function is called by:
 11998 ;;		_init
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           	psect	text73
 12003  00310A                     __ptext73:
 12004                           	opt stack 0
 12005  00310A                     _WriteTimer0:
 12006                           	opt stack 27
 12007                           
 12008                           ; BSR set to: 15
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;incstack = 0
 12012                           ;incstack = 0
 12013  00310A  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 12014  00310E  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 12015  003112  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 12016  003116  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 12017                           
 12018                           ; BSR set to: 15
 12019  00311A  0012               	return	
 12020  00311C                     __end_of_WriteTimer0:
 12021                           	opt stack 0
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           indf1	equ	0xFE7
 12032                           fsr1h	equ	0xFE2
 12033                           fsr1l	equ	0xFE1
 12034                           indf2	equ	0xFDF
 12035                           postinc2	equ	0xFDE
 12036                           postdec2	equ	0xFDD
 12037                           plusw2	equ	0xFDB
 12038                           fsr2h	equ	0xFDA
 12039                           fsr2l	equ	0xFD9
 12040                           status	equ	0xFD8
 12041                           
 12042 ;; *************** function _readControlReg *****************
 12043 ;; Defined at:
 12044 ;;		line 742 in file "../main.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;  ctrlreg         1    wreg     unsigned char 
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 12049 ;;  rv              1   15[COMRAM] unsigned char 
 12050 ;; Return value:  Size  Location     Type
 12051 ;;                  1    wreg      unsigned char 
 12052 ;; Registers used:
 12053 ;;		wreg, status,2, status,0, prodl, prodh
 12054 ;; Tracked objects:
 12055 ;;		On entry : 0/0
 12056 ;;		On exit  : 0/0
 12057 ;;		Unchanged: 0/0
 12058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12061 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12062 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12063 ;;Total ram usage:        9 bytes
 12064 ;; Hardware stack levels used:    1
 12065 ;; Hardware stack levels required when called:    2
 12066 ;; This function calls:
 12067 ;;		Nothing
 12068 ;; This function is called by:
 12069 ;;		_vscp_readAppReg
 12070 ;;		_writeControlReg
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074                           	psect	text74
 12075  0024B8                     __ptext74:
 12076                           	opt stack 0
 12077  0024B8                     _readControlReg:
 12078                           	opt stack 24
 12079                           
 12080                           ; BSR set to: 15
 12081                           ;incstack = 0
 12082                           ;incstack = 0
 12083                           ;readControlReg@ctrlreg stored from wreg
 12084  0024B8  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 12085                           
 12086                           ;main.c: 743: uint8_t rv = 0;
 12087  0024BC  6A10               	clrf	readControlReg@rv,c
 12088                           
 12089                           ;main.c: 745: switch ( ctrlreg ) {
 12090  0024BE  D060               	goto	l4919
 12091  0024C0                     l4911:
 12092                           
 12093                           ;main.c: 748: rv = ( PORTCbits.RC7 << 0 ) +
 12094                           ;main.c: 749: ( PORTCbits.RC6 << 1 ) +
 12095                           ;main.c: 750: ( PORTCbits.RC3 << 2 ) +
 12096                           ;main.c: 751: ( PORTCbits.RC4 << 3 ) +
 12097                           ;main.c: 752: ( PORTCbits.RC5 << 4 ) +
 12098                           ;main.c: 753: ( PORTAbits.RA0 << 5 ) +
 12099                           ;main.c: 754: ( PORTAbits.RA1 << 6 ) +
 12100                           ;main.c: 755: ( PORTAbits.RA2 << 7 );
 12101  0024C0  3482               	rlcf	3970,w,c	;volatile
 12102  0024C2  36E8               	rlcf	wreg,f,c
 12103  0024C4  0B01               	andlw	1
 12104  0024C6  6E08               	movwf	??_readControlReg& (0+255),c
 12105  0024C8  3882               	swapf	3970,w,c	;volatile
 12106  0024CA  32E8               	rrcf	wreg,f,c
 12107  0024CC  32E8               	rrcf	wreg,f,c
 12108  0024CE  0B01               	andlw	1
 12109  0024D0  0D02               	mullw	2
 12110  0024D2  CFF3 F009          	movff	prodl,??_readControlReg+1
 12111  0024D6  3082               	rrcf	3970,w,c	;volatile
 12112  0024D8  32E8               	rrcf	wreg,f,c
 12113  0024DA  32E8               	rrcf	wreg,f,c
 12114  0024DC  0B01               	andlw	1
 12115  0024DE  0D04               	mullw	4
 12116  0024E0  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12117  0024E4  3882               	swapf	3970,w,c	;volatile
 12118  0024E6  0B01               	andlw	1
 12119  0024E8  0D08               	mullw	8
 12120  0024EA  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12121  0024EE  3882               	swapf	3970,w,c	;volatile
 12122  0024F0  32E8               	rrcf	wreg,f,c
 12123  0024F2  0B01               	andlw	1
 12124  0024F4  0D10               	mullw	16
 12125  0024F6  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12126  0024FA  5080               	movf	3968,w,c	;volatile
 12127  0024FC  0B01               	andlw	1
 12128  0024FE  0D20               	mullw	32
 12129  002500  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12130  002504  3080               	rrcf	3968,w,c	;volatile
 12131  002506  0B01               	andlw	1
 12132  002508  0D40               	mullw	64
 12133  00250A  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12134  00250E  3080               	rrcf	3968,w,c	;volatile
 12135  002510  32E8               	rrcf	wreg,f,c
 12136  002512  0B01               	andlw	1
 12137  002514  0D80               	mullw	128
 12138  002516  50F3               	movf	prodl,w,c
 12139  002518  240E               	addwf	??_readControlReg+6,w,c
 12140  00251A  240D               	addwf	??_readControlReg+5,w,c
 12141  00251C  D01F               	goto	L43
 12142  00251E                     l4913:
 12143                           
 12144                           ;main.c: 759: rv = ( PORTAbits.RA3 << 0 ) +
 12145                           ;main.c: 760: ( PORTAbits.RA5 << 1 ) +
 12146                           ;main.c: 763: ( PORTBbits.RB4 << 4 ) +
 12147                           ;main.c: 764: ( PORTCbits.RC2 << 5 ) +
 12148                           ;main.c: 765: ( PORTBbits.RB1 << 6 ) +
 12149                           ;main.c: 766: ( PORTBbits.RB0 << 7 );
 12150  00251E  3080               	rrcf	3968,w,c	;volatile
 12151  002520  32E8               	rrcf	wreg,f,c
 12152  002522  32E8               	rrcf	wreg,f,c
 12153  002524  0B01               	andlw	1
 12154  002526  6E08               	movwf	??_readControlReg& (0+255),c
 12155  002528  3880               	swapf	3968,w,c	;volatile
 12156  00252A  32E8               	rrcf	wreg,f,c
 12157  00252C  0B01               	andlw	1
 12158  00252E  0D02               	mullw	2
 12159  002530  CFF3 F009          	movff	prodl,??_readControlReg+1
 12160  002534  3881               	swapf	3969,w,c	;volatile
 12161  002536  0B01               	andlw	1
 12162  002538  0D10               	mullw	16
 12163  00253A  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12164  00253E  3082               	rrcf	3970,w,c	;volatile
 12165  002540  32E8               	rrcf	wreg,f,c
 12166  002542  0B01               	andlw	1
 12167  002544  0D20               	mullw	32
 12168  002546  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12169  00254A  3081               	rrcf	3969,w,c	;volatile
 12170  00254C  0B01               	andlw	1
 12171  00254E  0D40               	mullw	64
 12172  002550  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12173  002554  5081               	movf	3969,w,c	;volatile
 12174  002556  0B01               	andlw	1
 12175  002558  0D80               	mullw	128
 12176  00255A  50F3               	movf	prodl,w,c
 12177  00255C                     L43:
 12178  00255C  240C               	addwf	??_readControlReg+4,w,c
 12179  00255E  240B               	addwf	??_readControlReg+3,w,c
 12180  002560  240A               	addwf	??_readControlReg+2,w,c
 12181  002562  2409               	addwf	??_readControlReg+1,w,c
 12182  002564  D00A               	goto	L44
 12183  002566                     l4915:
 12184                           
 12185                           ;main.c: 770: rv = ( PORTBbits.RB6 << 0 ) +
 12186                           ;main.c: 771: ( PORTBbits.RB5 << 1 );
 12187  002566  3881               	swapf	3969,w,c	;volatile
 12188  002568  32E8               	rrcf	wreg,f,c
 12189  00256A  32E8               	rrcf	wreg,f,c
 12190  00256C  0B01               	andlw	1
 12191  00256E  6E08               	movwf	??_readControlReg& (0+255),c
 12192  002570  3881               	swapf	3969,w,c	;volatile
 12193  002572  32E8               	rrcf	wreg,f,c
 12194  002574  0B01               	andlw	1
 12195  002576  0D02               	mullw	2
 12196  002578  50F3               	movf	prodl,w,c
 12197  00257A                     L44:
 12198  00257A  2408               	addwf	??_readControlReg,w,c
 12199  00257C  6E10               	movwf	readControlReg@rv,c
 12200                           
 12201                           ;main.c: 772: break;
 12202  00257E  D006               	goto	l4921
 12203  002580                     l4919:
 12204  002580  500F               	movf	readControlReg@ctrlreg,w,c
 12205                           
 12206                           ; Switch size 1, requested type "speed"
 12207                           ; Number of cases is 3, Range of values is 0 to 2
 12208                           ; switch strategies available:
 12209                           ; Name         Instructions Cycles
 12210                           ; simple_byte           10     6 (average)
 12211                           ;	Chosen strategy is simple_byte
 12212  002582  E09E               	bz	l4911
 12213  002584  0A01               	xorlw	1	; case 1
 12214  002586  E0CB               	bz	l4913
 12215  002588  0A03               	xorlw	3	; case 2
 12216  00258A  E0ED               	bz	l4915
 12217  00258C                     l4921:
 12218                           
 12219                           ;main.c: 775: return rv;
 12220  00258C  5010               	movf	readControlReg@rv,w,c
 12221  00258E  0012               	return	
 12222  002590                     __end_of_readControlReg:
 12223                           	opt stack 0
 12224                           tblptru	equ	0xFF8
 12225                           tblptrh	equ	0xFF7
 12226                           tblptrl	equ	0xFF6
 12227                           tablat	equ	0xFF5
 12228                           prodh	equ	0xFF4
 12229                           prodl	equ	0xFF3
 12230                           intcon	equ	0xFF2
 12231                           postinc0	equ	0xFEE
 12232                           wreg	equ	0xFE8
 12233                           indf1	equ	0xFE7
 12234                           fsr1h	equ	0xFE2
 12235                           fsr1l	equ	0xFE1
 12236                           indf2	equ	0xFDF
 12237                           postinc2	equ	0xFDE
 12238                           postdec2	equ	0xFDD
 12239                           plusw2	equ	0xFDB
 12240                           fsr2h	equ	0xFDA
 12241                           fsr2l	equ	0xFD9
 12242                           status	equ	0xFD8
 12243                           
 12244 ;; *************** function _vscp_readAppReg *****************
 12245 ;; Defined at:
 12246 ;;		line 577 in file "../main.c"
 12247 ;; Parameters:    Size  Location     Type
 12248 ;;  reg             1    wreg     unsigned char 
 12249 ;; Auto vars:     Size  Location     Type
 12250 ;;  reg             1   17[COMRAM] unsigned char 
 12251 ;;  rv              1   16[COMRAM] unsigned char 
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  1    wreg      unsigned char 
 12254 ;; Registers used:
 12255 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12256 ;; Tracked objects:
 12257 ;;		On entry : F/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12265 ;;Total ram usage:        2 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    3
 12268 ;; This function calls:
 12269 ;;		_Read_b_eep
 12270 ;;		_readControlReg
 12271 ;; This function is called by:
 12272 ;;		_vscp_readRegister
 12273 ;;		_vscp_handleProtocolEvent
 12274 ;; This function uses a non-reentrant model
 12275 ;;
 12276                           
 12277                           	psect	text75
 12278  002966                     __ptext75:
 12279                           	opt stack 0
 12280  002966                     _vscp_readAppReg:
 12281                           	opt stack 25
 12282                           
 12283                           ;incstack = 0
 12284                           ;incstack = 0
 12285                           ;vscp_readAppReg@reg stored from wreg
 12286  002966  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;main.c: 578: uint8_t rv;
 12290                           ;main.c: 580: rv = 0x00;
 12291  00296A  6A11               	clrf	vscp_readAppReg@rv,c
 12292                           
 12293                           ; BSR set to: 0
 12294                           ;main.c: 583: if ( 0 == vscp_page_select ) {
 12295  00296C  5053               	movf	_vscp_page_select+1,w,c
 12296  00296E  1052               	iorwf	_vscp_page_select,w,c
 12297  002970  E137               	bnz	l6663
 12298                           
 12299                           ; BSR set to: 0
 12300                           ;main.c: 585: if ( reg == 0x00 ) {
 12301  002972  6612               	tstfsz	vscp_readAppReg@reg,c
 12302  002974  D006               	goto	l6639
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;main.c: 586: rv = Read_b_eep(0x22 + 0);
 12306  002976  6A09               	clrf	?_Read_b_eep+1,c
 12307  002978  0E22               	movlw	34
 12308  00297A  6E08               	movwf	?_Read_b_eep,c
 12309  00297C  EC25  F018         	call	_Read_b_eep	;wreg free
 12310  002980  D03D               	goto	L45
 12311  002982                     l6639:
 12312                           
 12313                           ; BSR set to: 0
 12314                           ;main.c: 589: else if ( reg == 0x01 ) {
 12315  002982  0412               	decf	vscp_readAppReg@reg,w,c
 12316  002984  E106               	bnz	l6643
 12317                           
 12318                           ; BSR set to: 0
 12319                           ;main.c: 590: rv = Read_b_eep(0x22 + 1);
 12320  002986  6A09               	clrf	?_Read_b_eep+1,c
 12321  002988  0E23               	movlw	35
 12322  00298A  6E08               	movwf	?_Read_b_eep,c
 12323  00298C  EC25  F018         	call	_Read_b_eep	;wreg free
 12324  002990  D035               	goto	L45
 12325  002992                     l6643:
 12326                           
 12327                           ; BSR set to: 0
 12328                           ;main.c: 593: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12329  002992  0E04               	movlw	4
 12330  002994  6412               	cpfsgt	vscp_readAppReg@reg,c
 12331  002996  D00C               	goto	l6649
 12332                           
 12333                           ; BSR set to: 0
 12334  002998  0E17               	movlw	23
 12335  00299A  6012               	cpfslt	vscp_readAppReg@reg,c
 12336  00299C  D009               	goto	l6649
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;main.c: 594: rv = Read_b_eep(0x22 + 5 + ( reg - 5 ));
 12340  00299E  0E22               	movlw	34
 12341  0029A0  2412               	addwf	vscp_readAppReg@reg,w,c
 12342  0029A2  6E08               	movwf	?_Read_b_eep,c
 12343  0029A4  6A09               	clrf	?_Read_b_eep+1,c
 12344  0029A6  0E00               	movlw	0
 12345  0029A8  2209               	addwfc	?_Read_b_eep+1,f,c
 12346  0029AA  EC25  F018         	call	_Read_b_eep	;wreg free
 12347  0029AE  D026               	goto	L45
 12348  0029B0                     l6649:
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;main.c: 598: else if ( reg == 2 ) {
 12352  0029B0  5012               	movf	vscp_readAppReg@reg,w,c
 12353  0029B2  0A02               	xorlw	2
 12354  0029B4  E104               	bnz	l6653
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;main.c: 599: rv = readControlReg( 0 );
 12358  0029B6  0E00               	movlw	0
 12359  0029B8  EC5C  F012         	call	_readControlReg
 12360  0029BC  D01F               	goto	L45
 12361  0029BE                     l6653:
 12362                           
 12363                           ; BSR set to: 0
 12364                           ;main.c: 602: else if ( reg == 3 ) {
 12365  0029BE  5012               	movf	vscp_readAppReg@reg,w,c
 12366  0029C0  0A03               	xorlw	3
 12367  0029C2  E104               	bnz	l6657
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;main.c: 603: rv = readControlReg( 1 );
 12371  0029C4  0E01               	movlw	1
 12372  0029C6  EC5C  F012         	call	_readControlReg
 12373  0029CA  D018               	goto	L45
 12374  0029CC                     l6657:
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;main.c: 606: else if ( reg == 4 ) {
 12378  0029CC  5012               	movf	vscp_readAppReg@reg,w,c
 12379  0029CE  0A04               	xorlw	4
 12380  0029D0  E116               	bnz	l6669
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;main.c: 607: rv = readControlReg( 2 );
 12384  0029D2  0E02               	movlw	2
 12385  0029D4  EC5C  F012         	call	_readControlReg
 12386  0029D8  6E11               	movwf	vscp_readAppReg@rv,c
 12387                           
 12388                           ;main.c: 608: rv &= 0x03;
 12389  0029DA  0E03               	movlw	3
 12390  0029DC  1611               	andwf	vscp_readAppReg@rv,f,c
 12391  0029DE  D00F               	goto	l6669
 12392  0029E0                     l6663:
 12393                           
 12394                           ; BSR set to: 0
 12395                           ;main.c: 612: else if ( 1 == vscp_page_select ) {
 12396  0029E0  0452               	decf	_vscp_page_select,w,c
 12397  0029E2  1053               	iorwf	_vscp_page_select+1,w,c
 12398  0029E4  E10C               	bnz	l6669
 12399                           
 12400                           ; BSR set to: 0
 12401                           ;main.c: 615: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12402                           ;main.c: 616: ( 8 * 8 ) ) ) ) {
 12403  0029E6  0E41               	movlw	65
 12404  0029E8  6012               	cpfslt	vscp_readAppReg@reg,c
 12405  0029EA  D009               	goto	l6669
 12406                           
 12407                           ; BSR set to: 0
 12408                           ;main.c: 617: rv = Read_b_eep(0x22 + 23 + ( reg - 0 ));
 12409  0029EC  0E39               	movlw	57
 12410  0029EE  2412               	addwf	vscp_readAppReg@reg,w,c
 12411  0029F0  6E08               	movwf	?_Read_b_eep,c
 12412  0029F2  6A09               	clrf	?_Read_b_eep+1,c
 12413  0029F4  0E00               	movlw	0
 12414  0029F6  2209               	addwfc	?_Read_b_eep+1,f,c
 12415  0029F8  EC25  F018         	call	_Read_b_eep	;wreg free
 12416  0029FC                     L45:
 12417  0029FC  6E11               	movwf	vscp_readAppReg@rv,c
 12418  0029FE                     l6669:
 12419                           
 12420                           ;main.c: 619: }
 12421                           ;main.c: 621: }
 12422                           ;main.c: 623: return rv;
 12423  0029FE  5011               	movf	vscp_readAppReg@rv,w,c
 12424  002A00  0012               	return	
 12425  002A02                     __end_of_vscp_readAppReg:
 12426                           	opt stack 0
 12427                           tblptru	equ	0xFF8
 12428                           tblptrh	equ	0xFF7
 12429                           tblptrl	equ	0xFF6
 12430                           tablat	equ	0xFF5
 12431                           prodh	equ	0xFF4
 12432                           prodl	equ	0xFF3
 12433                           intcon	equ	0xFF2
 12434                           postinc0	equ	0xFEE
 12435                           wreg	equ	0xFE8
 12436                           indf1	equ	0xFE7
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           plusw2	equ	0xFDB
 12443                           fsr2h	equ	0xFDA
 12444                           fsr2l	equ	0xFD9
 12445                           status	equ	0xFD8
 12446                           
 12447 ;; *************** function _interrupt_at_low_vector *****************
 12448 ;; Defined at:
 12449 ;;		line 103 in file "../main.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;		None
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;		None
 12454 ;; Return value:  Size  Location     Type
 12455 ;;		None               void
 12456 ;; Registers used:
 12457 ;;		wreg, status,2, status,0, cstack
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12465 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12467 ;;Total ram usage:        3 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    1
 12470 ;; This function calls:
 12471 ;;		i1_WriteTimer0
 12472 ;; This function is called by:
 12473 ;;		Interrupt level 1
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           	psect	intcodelo
 12478  000818                     __pintcodelo:
 12479                           	opt stack 0
 12480  000818                     _interrupt_at_low_vector:
 12481                           	opt stack 22
 12482                           
 12483                           ;incstack = 0
 12484  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12485  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12486  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12487  000824                     
 12488                           ;main.c: 105: if ( INTCONbits.TMR0IF ) {
 12489  000824  A4F2               	btfss	intcon,2,c	;volatile
 12490  000826  D001               	goto	i1u554_21
 12491  000828  D001               	goto	i1u554_20
 12492  00082A                     i1u554_21:
 12493  00082A  D03E               	goto	i1l143
 12494  00082C                     i1u554_20:
 12495  00082C                     
 12496                           ;main.c: 108: WriteTimer0(0xfb1d);
 12497  00082C  0EFB               	movlw	251
 12498  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 12499  000830  0E1D               	movlw	29
 12500  000832  6E01               	movwf	?i1_WriteTimer0,c
 12501  000834  EC8E  F018         	call	i1_WriteTimer0	;wreg free
 12502  000838                     
 12503                           ;main.c: 110: vscp_timer++;
 12504  000838  0100               	movlb	0	; () banked
 12505  00083A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12506  00083C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12507  00083E                     
 12508                           ; BSR set to: 0
 12509                           ;main.c: 111: vscp_configtimer++;
 12510  00083E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12511  000840  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12512  000842                     
 12513                           ; BSR set to: 0
 12514                           ;main.c: 113: sendTimer++;
 12515  000842  0E01               	movlw	1
 12516  000844  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12517  000846  0E00               	movlw	0
 12518  000848  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12519  00084A  0E00               	movlw	0
 12520  00084C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12521  00084E  0E00               	movlw	0
 12522  000850  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12523  000852                     
 12524                           ; BSR set to: 0
 12525                           ;main.c: 116: if ( PORTCbits.RC0 ) {
 12526  000852  A082               	btfss	3970,0,c	;volatile
 12527  000854  D001               	goto	i1u555_21
 12528  000856  D001               	goto	i1u555_20
 12529  000858                     i1u555_21:
 12530  000858  D002               	goto	i1l5797
 12531  00085A                     i1u555_20:
 12532  00085A                     
 12533                           ; BSR set to: 0
 12534                           ;main.c: 117: vscp_initbtncnt = 0;
 12535  00085A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12536                           
 12537                           ;main.c: 118: } else {
 12538  00085C  D001               	goto	i1l135
 12539  00085E                     i1l5797:
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;main.c: 120: vscp_initbtncnt++;
 12543  00085E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12544  000860                     i1l135:
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;main.c: 121: }
 12548                           ;main.c: 124: vscp_statuscnt++;
 12549  000860  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 12550  000862                     
 12551                           ; BSR set to: 0
 12552                           ;main.c: 125: if ( ( 0x02 == vscp_initledfunc ) &&
 12553                           ;main.c: 126: ( vscp_statuscnt > 100 ) ) {
 12554  000862  5056               	movf	_vscp_initledfunc,w,c
 12555  000864  0A02               	xorlw	2
 12556  000866  A4D8               	btfss	status,2,c
 12557  000868  D001               	goto	i1u556_21
 12558  00086A  D001               	goto	i1u556_20
 12559  00086C                     i1u556_21:
 12560  00086C  D00E               	goto	i1l5807
 12561  00086E                     i1u556_20:
 12562  00086E                     
 12563                           ; BSR set to: 0
 12564  00086E  0E64               	movlw	100
 12565  000870  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 12566  000872  D001               	goto	i1u557_21
 12567  000874  D001               	goto	i1u557_20
 12568  000876                     i1u557_21:
 12569  000876  D009               	goto	i1l5807
 12570  000878                     i1u557_20:
 12571  000878                     
 12572                           ; BSR set to: 0
 12573                           ;main.c: 128: if ( PORTCbits.RC1 ) {
 12574  000878  A282               	btfss	3970,1,c	;volatile
 12575  00087A  D001               	goto	i1u558_21
 12576  00087C  D001               	goto	i1u558_20
 12577  00087E                     i1u558_21:
 12578  00087E  D002               	goto	i1l137
 12579  000880                     i1u558_20:
 12580  000880                     
 12581                           ; BSR set to: 0
 12582                           ;main.c: 129: PORTCbits.RC1 = 0;
 12583  000880  9282               	bcf	3970,1,c	;volatile
 12584                           
 12585                           ;main.c: 130: }
 12586  000882  D001               	goto	i1l138
 12587  000884                     i1l137:
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;main.c: 131: else {
 12591                           ;main.c: 132: PORTCbits.RC1 = 1;
 12592  000884  8282               	bsf	3970,1,c	;volatile
 12593  000886                     i1l138:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;main.c: 133: }
 12597                           ;main.c: 135: vscp_statuscnt = 0;
 12598  000886  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12599                           
 12600                           ;main.c: 137: }
 12601  000888  D00E               	goto	i1l139
 12602  00088A                     i1l5807:
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;main.c: 138: else if (0x01 == vscp_initledfunc) {
 12606  00088A  0456               	decf	_vscp_initledfunc,w,c
 12607  00088C  A4D8               	btfss	status,2,c
 12608  00088E  D001               	goto	i1u559_21
 12609  000890  D001               	goto	i1u559_20
 12610  000892                     i1u559_21:
 12611  000892  D003               	goto	i1l140
 12612  000894                     i1u559_20:
 12613  000894                     
 12614                           ; BSR set to: 0
 12615                           ;main.c: 139: PORTCbits.RC1 = 1;
 12616  000894  8282               	bsf	3970,1,c	;volatile
 12617                           
 12618                           ;main.c: 140: vscp_statuscnt = 0;
 12619  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12620                           
 12621                           ;main.c: 141: }
 12622  000898  D006               	goto	i1l139
 12623  00089A                     i1l140:
 12624                           
 12625                           ; BSR set to: 0
 12626                           ;main.c: 142: else if (0x00 == vscp_initledfunc) {
 12627  00089A  6656               	tstfsz	_vscp_initledfunc,c
 12628  00089C  D001               	goto	i1u560_21
 12629  00089E  D001               	goto	i1u560_20
 12630  0008A0                     i1u560_21:
 12631  0008A0  D002               	goto	i1l139
 12632  0008A2                     i1u560_20:
 12633  0008A2                     
 12634                           ; BSR set to: 0
 12635                           ;main.c: 143: PORTCbits.RC1 = 0;
 12636  0008A2  9282               	bcf	3970,1,c	;volatile
 12637                           
 12638                           ;main.c: 144: vscp_statuscnt = 0;
 12639  0008A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12640  0008A6                     i1l139:
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;main.c: 145: }
 12644                           ;main.c: 147: INTCONbits.TMR0IF = 0;
 12645  0008A6  94F2               	bcf	intcon,2,c	;volatile
 12646  0008A8                     i1l143:
 12647  0008A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 12648  0008AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 12649  0008B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 12650  0008B4  0010               	retfie	
 12651  0008B6                     __end_of_interrupt_at_low_vector:
 12652                           	opt stack 0
 12653                           tblptru	equ	0xFF8
 12654                           tblptrh	equ	0xFF7
 12655                           tblptrl	equ	0xFF6
 12656                           tablat	equ	0xFF5
 12657                           prodh	equ	0xFF4
 12658                           prodl	equ	0xFF3
 12659                           intcon	equ	0xFF2
 12660                           postinc0	equ	0xFEE
 12661                           wreg	equ	0xFE8
 12662                           indf1	equ	0xFE7
 12663                           fsr1h	equ	0xFE2
 12664                           fsr1l	equ	0xFE1
 12665                           bsr	equ	0xFE0
 12666                           indf2	equ	0xFDF
 12667                           postinc2	equ	0xFDE
 12668                           postdec2	equ	0xFDD
 12669                           plusw2	equ	0xFDB
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function i1_WriteTimer0 *****************
 12675 ;; Defined at:
 12676 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;  timer0          2    0[COMRAM] unsigned int 
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 12681 ;; Return value:  Size  Location     Type
 12682 ;;		None               void
 12683 ;; Registers used:
 12684 ;;		None
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12690 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12693 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12694 ;;Total ram usage:        4 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; This function calls:
 12697 ;;		Nothing
 12698 ;; This function is called by:
 12699 ;;		_interrupt_at_low_vector
 12700 ;; This function uses a non-reentrant model
 12701 ;;
 12702                           
 12703                           	psect	text77
 12704  00311C                     __ptext77:
 12705                           	opt stack 0
 12706  00311C                     i1_WriteTimer0:
 12707                           	opt stack 22
 12708                           
 12709                           ;incstack = 0
 12710                           ;incstack = 0
 12711  00311C  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 12712  003120  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 12713  003124  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 12714  003128  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 12715  00312C  0012               	return	
 12716  00312E                     __end_ofi1_WriteTimer0:
 12717                           	opt stack 0
 12718                           tblptru	equ	0xFF8
 12719                           tblptrh	equ	0xFF7
 12720                           tblptrl	equ	0xFF6
 12721                           tablat	equ	0xFF5
 12722                           prodh	equ	0xFF4
 12723                           prodl	equ	0xFF3
 12724                           intcon	equ	0xFF2
 12725                           postinc0	equ	0xFEE
 12726                           wreg	equ	0xFE8
 12727                           indf1	equ	0xFE7
 12728                           fsr1h	equ	0xFE2
 12729                           fsr1l	equ	0xFE1
 12730                           bsr	equ	0xFE0
 12731                           indf2	equ	0xFDF
 12732                           postinc2	equ	0xFDE
 12733                           postdec2	equ	0xFDD
 12734                           plusw2	equ	0xFDB
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           tblptru	equ	0xFF8
 12739                           tblptrh	equ	0xFF7
 12740                           tblptrl	equ	0xFF6
 12741                           tablat	equ	0xFF5
 12742                           prodh	equ	0xFF4
 12743                           prodl	equ	0xFF3
 12744                           intcon	equ	0xFF2
 12745                           postinc0	equ	0xFEE
 12746                           wreg	equ	0xFE8
 12747                           indf1	equ	0xFE7
 12748                           fsr1h	equ	0xFE2
 12749                           fsr1l	equ	0xFE1
 12750                           bsr	equ	0xFE0
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           plusw2	equ	0xFDB
 12755                           fsr2h	equ	0xFDA
 12756                           fsr2l	equ	0xFD9
 12757                           status	equ	0xFD8
 12758                           
 12759                           	psect	rparam
 12760  0000                     tblptru	equ	0xFF8
 12761                           tblptrh	equ	0xFF7
 12762                           tblptrl	equ	0xFF6
 12763                           tablat	equ	0xFF5
 12764                           prodh	equ	0xFF4
 12765                           prodl	equ	0xFF3
 12766                           intcon	equ	0xFF2
 12767                           postinc0	equ	0xFEE
 12768                           wreg	equ	0xFE8
 12769                           indf1	equ	0xFE7
 12770                           fsr1h	equ	0xFE2
 12771                           fsr1l	equ	0xFE1
 12772                           bsr	equ	0xFE0
 12773                           indf2	equ	0xFDF
 12774                           postinc2	equ	0xFDE
 12775                           postdec2	equ	0xFDD
 12776                           plusw2	equ	0xFDB
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     48      97
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_omsg(BANK0[14]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 14
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[14]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 14
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[14]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 14
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[14]), 


Critical Paths under _main in COMRAM

    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_init_pstorage->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_getControlByte->_Read_b_eep
    _vscp_setControlByte->_Write_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   43993
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2432
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                15    15      0   12274
                                             22 BANK0     15    15      0
                         _Read_b_eep
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    2536
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   18994
                                             20 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    3474
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1948
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     316
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1371
                                             20 COMRAM     3     2      1
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _Read_b_eep (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1998
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1427
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     270
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      62
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     112
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4604
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     708
        _vscp_writeNicknamePermanent
                _vscp_setControlByte
                _vscp_getControlByte
                 _vscp_init_pstorage
 ---------------------------------------------------------------------------------
 (2) _vscp_init_pstorage                                   0     0      0     316
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     316
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getControlByte                                  1     1      0     124
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      62
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3      90
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     478
                                             16 COMRAM     2     2      0
                         _Read_b_eep
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
     _vscp_getControlByte
       _Read_b_eep
     _vscp_init_pstorage
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Read_b_eep
   _writeControlReg
     _Read_b_eep (ARG)
     _readControlReg (ARG)
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
       _readControlReg
     _vscp_writeAppReg
       _Read_b_eep
       _writeControlReg
         _Read_b_eep (ARG)
         _readControlReg (ARG)
       _Busy_eep
       _Write_b_eep
       _vscp_readAppReg (ARG)
         _Read_b_eep
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Read_b_eep
         _writeControlReg
           _Read_b_eep (ARG)
           _readControlReg (ARG)
         _Busy_eep
         _Write_b_eep
         _vscp_readAppReg (ARG)
           _Read_b_eep
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
     ___lbmod
   _doDM
     _Read_b_eep
     _actionSet
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClr
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionSetAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClrAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      61       5       60.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B9       6        0.0%
DATA                 0      0      C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Mar 23 11:48:51 2016

                __end_of_vscp_readAppReg 2A02                    __end_of_sendVSCPFrame 2966  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1BB8  
                                    l320 26AE                                      l160 2340  
                                    l321 26B2                                      l330 26CE  
                                    l322 26B6                                      l331 26D2  
                                    l323 26BA                                      l315 269E  
                                    l147 22DE                                      l332 26D6  
                                    l324 26BE                                      l156 2326  
                                    l333 26DA                                      l325 26C2  
                                    l317 26A2                                      l318 26A6  
                                    l350 25EA                                      l342 25CE  
                                    l319 26AA                                      l351 25EE  
                                    l328 26C6                                      l360 260A  
                                    l352 25F2                                      l344 25D2  
                                    l329 26CA                                      l345 25D6  
                     vscp_readStdReg@idx 0019                                      l346 25DA  
                                    l179 27B0                                      l355 25F6  
                                    l347 25DE                                      l291 15CC  
                                    l356 25FA                                      l348 25E2  
                                    l357 25FE                                      l349 25E6  
                                    l293 15E6                                      l358 2602  
                                    l359 2606                                      l717 2B00  
                                    l645 1E0E                                      l671 18A0  
                                    l647 1E2C                                      l681 18F0  
                                    l673 18B0                                      l690 1994  
                                    l658 1848                                      l675 18C0  
                                    l668 1902                                      l677 18D0  
                                    l669 1892                       vscp_readStdReg@reg 001C  
                                    l679 18E0                                      l856 289A  
                                    l848 28AC                                      l689 1970  
                                    l857 2880                                      l849 283E  
                                    l888 2DA2                                      l979 24B2  
         __size_of_vscp_handleProbeState 00B8                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2D4E            __end_of_vscp_handleProbeState 28B2  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 003A             __size_of_vscp_getControlByte 001C  
                                    wreg 000FE8                     __end_of_actionSetAll 2D7E  
            ?_doApplicationOneSecondWork 0001                                     l1013 10DA  
                                   l1132 2FF0                                     l1116 2CD6  
                                   l1133 2FF2                                     l1037 126C  
                                   l1038 1280                                     l1039 12C4  
                                   l1048 1302                                     l1087 3168  
                                   l4063 1C74                                     l4073 1D32  
                                   l5211 2EB6                                     l4067 1CFA  
                                   l4075 1D40                                     l4059 1BC0  
                                   l6023 27FC                                     l5137 2F2A  
                                   l5401 1936                                     l5323 1836  
                    vscp_readStdReg@code 0011                                     l5501 2AE2  
                                   l5333 1860                                     l6061 285C  
                                   l6037 281C                                     l6063 2860  
                                   l6039 2822                                     l7111 1BA4  
                                   l7031 1A26                                     l5441 19F2  
                                   l6057 2858                                     l7105 1B8E  
                                   l7017 308A                                     l5515 1F3C  
                                   l5427 19C2                                     l5435 19DC  
                                   l5419 1996                                     l5339 1876  
                                   l5347 1880                                     l6091 289E  
                                   l7051 1A60                                     l7043 1A48  
                                   l7035 1A30                                     l7115 1BB4  
                                   l7027 1A1C                                     l5453 306E  
                                   l7061 1A86                                     l7141 23DC  
                                   l4911 24C0                                     l5391 1916  
                                   l5199 2B22                                     l7055 1A70  
                                   l7047 1A54                                     l7039 1A3C  
                                   l7135 23BA                                     l7127 2F74  
                                   l7303 239A                vscp_getManufacturerId@idx 000A  
                                   l4913 251E                                     l4921 258C  
                                   l3953 2758                                     l7081 1AC0  
                                   l7073 1AA8                                     l7065 1A92  
                                   l7161 2436                                     l7153 2418  
                                   l7321 0F3A                                     l7313 0F2C  
                                   l6601 2BF6                                     l4915 2566  
                                   l5491 2AB8                                     l5483 2A92  
                                   l7163 243A                                     l7147 23FC  
                                   l7315 0F2E                                     l6611 2C0A  
                                   l7307 23A2                                     l7235 22A4  
                                   l5493 2AC2                                     l5485 2A9A  
                                   l7085 1ACC                                     l7077 1AB4  
                                   l7069 1A9E                                     l6701 21E4  
                                   l7165 2450                                     l7501 1202  
                                   l7405 100A                                     l7341 0F76  
                                   l7317 0F32                                     l4919 2580  
                                   l5495 2ACC                                     l5487 2AA4  
                                   l7095 1B2E                                     l4839 2F06  
                                   l4847 2EE2                                     l7415 103E  
                                   l7319 0F36                                     l6607 2C02  
                                   l7263 2316                                     l7255 2304  
                                   l5497 2AD6                                     l5489 2AAE  
                                   l7185 2498                                     l7177 2484  
                                   l7513 1220                                     l7425 1072  
                                   l7265 231A                                     l7281 235C  
                                   l6643 2992                                     l3979 27B2  
                                   l7195 24B4                                     l7435 10A6  
                                   l7355 0F7E                                     l6811 260E  
                                   l6803 25B6                                     l7291 2386  
                                   l7275 233A                                     l7267 2320  
                                   l7259 230C                                     l6653 29BE  
                                   l6717 222C                                     l6709 2208  
                                   l7453 110A                                     l6821 2D5A  
                                   l6639 2982                                     l6663 29E0  
                                   l5951 2C38                                     l6727 2256  
                                   l5775 2E82                                     l5767 2E6C  
                                   l7631 1334                                     l7463 1168  
                                   l7447 10DE                                     l7375 0FA4  
                                   l6807 25BE                                     l7279 2344  
                                   l6657 29CC                                     l6649 29B0  
                                   l5929 2C8A                                     l6921 1E5C  
                                   l6737 228C                                     l7705 1472  
                                   l7641 1358                                     l7617 130A  
                                   l7545 1260                                     l7529 1240  
                                   l7457 1122                                     l7449 10FC  
                                   l7801 1804                                     l6915 1E2E  
                                   l5955 2C40                                     l6691 21AE  
                                   l6683 218C                                     l7467 117E  
                                   l7483 11B0                                     l7731 14F8  
                                   l6835 2D2A                                     l6669 29FE  
                                   l6909 1E12                                     l6941 1EA0  
                                   l6765 2964                                     l7709 1496  
                                   l7653 1384                                     l7581 12B6  
                                   l7573 12A6                                     l7565 1288  
                                   l7485 11B2                                     l7389 0FB0  
                                   l6781 2686                                     l7591 12C6  
                                   l7495 11D6                                     l7487 11BC  
                                   l6929 1E7A                                     l6881 1D9A  
                                   l6865 2DDE                                     l7657 1396  
                                   l7577 12AE                                     l6785 268E  
                                   l6777 267E                                     l6859 303A  
                                   l6939 1E9E                                     l7683 1400  
                                   l7675 13D0                                     l7659 139C  
                                   l7595 12E0                                     l7747 1568  
                                   l6957 2082                                     l6789 26DE  
                                   l7781 16DE                                     l6887 1DA8  
                                   l7687 1418                                     l7679 13EA  
                                   l6799 25AE                                     l7697 1444  
                                   l7793 178C                                     l7785 1718  
                                   l7769 1600                                     l6899 1DD2  
                                   l7789 1752                                     l7799 17C6  
                                   u3175 2CE2                                     u3176 2CE4  
            __size_of_vscp_getMatrixInfo 0016                           sendCANFrame@id 0037  
                                   u4480 2B72                                     u7105 2096  
                                   u4485 2B68                                     u4655 183E  
                                   u7400 1B86                                     u4657 1840  
                                   u7085 2046                                     u7405 1B7C  
                                   u7095 206C                                     u7370 1B24  
                                   u4975 1EEA                                     u7375 1B1A  
                                   u4985 1F0A                                     u4995 1F58  
                                   u6845 28EE                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 155C  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 2290                                     _init 2CE8  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 215C                              _vscp_minute 006F  
                            _vscp_second 0074                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08B6  
          __size_of_vscp_doOneSecondWork 0052                            __CFG_FOSC$HS2 000000  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0024  
                          __CFG_MCLRE$ON 000000                         _vscp_writeStdReg 23A8  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 2B7E                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 0026  
                                  _B0CON 000E80                                    _B1CON 000E90  
                                  ?_doDM 0001                                    _B2CON 000EA0  
                                  _B3CON 000EB0                                    _B4CON 000EC0  
          __size_of_SendInformationEvent 0056            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000ED0               __end_of_vscp_goActiveState 2FD8  
          ??_vscp_writeNicknamePermanent 000C                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 311C                                    _EEADR 000F74  
                        __end_of___lbmod 2E8A                  _vscp_handleDropNickname 2D7E  
                                  _BSEL0 000E7D                                    _T0CON 000FD5  
                                  i1l140 089A                                    i1l135 0860  
                                  i1l143 08A8                                    i1l137 0884  
                                  i1l138 0886                                    i1l139 08A6  
                          __CFG_WDTEN$ON 000000                          sendCANFrame@dlc 003B  
                                  _MSEL0 000E79                                    _MSEL1 000E7A  
                                  _MSEL2 000E7B                                    _IRXIF 007BBF  
                       readControlReg@rv 0010                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 3160  
             _vscp_readNicknamePermanent 3156                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                           _vscp_getGUID 30E4                                    doDM@i 00B5  
                         Read_b_eep@badd 0008                   Write_b_eep@GIE_BIT_VAL 000B  
                           _vscp_getZone 3138                       vscp_writeAppReg@rv 0016  
                                  _hours 0068                _vscp_getRegisterPagesUsed 317A  
                 __size_of_vscp_getEvent 002C                             _vscp_setGUID 2EFA  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 3180  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 2EB0                     _ECANSetOperationMode 3062  
                        __initialization 2F42                             __end_of_doDM 1810  
                           __end_of_main 23A8                             __end_of_init 2D1E  
                      ??_writeControlReg 0012                         ?_vscp_readAppReg 0001  
                             _Read_b_eep 304A                  _interrupt_at_low_vector 0818  
                       __end_of_Busy_eep 316E                           doDM@class_mask 00AC  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00A7                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 0010  
                                 ??_main 0052                                   ??_init 000C  
          __size_of_vscp_handleHeartbeat 0002                 ??_vscp_getManufacturerId 000A  
               ??_vscp_setManufacturerId 000D                 _vscp_handleProtocolEvent 0F22  
                          __activetblptr 000003                        __RegsToCANID@type 000B  
                         __CFG_PLLCFG$ON 000000                           __CFG_RETEN$OFF 000000  
             ECANReceiveMessage@msgFlags 0011                __size_of__ECANPointBuffer 007E  
                                 _B0TXEN 0073EA                                   _B1TXEN 0073EB  
                                 _B2TXEN 0073EC                                   _B3TXEN 0073ED  
                                 _B4TXEN 0073EE                                   _B5TXEN 0073EF  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEADRH 000F75                                   _EEDATA 000F73  
                                 _EECON2 000F7E                                   _ANCON0 000F5D  
                                 _ANCON1 000F5C                                   _CIOCON 000F70  
                          doDM@type_mask 00AF                       vscp_writeStdReg@rv 0015  
                          ?_init_app_ram 0001                                   _MDSEL0 007B96  
                                 _MDSEL1 007B97                          __CFG_BBSIZ$BB2K 000000  
                                 i1l5801 086E                               _OpenTimer0 2FD8  
                                 i1l5811 08A2                                   i1l5803 0878  
                                 i1l5805 0880                                   i1l5807 088A  
                                 i1l5809 0894                                   i1l5791 0842  
                                 i1l5783 0824                                   i1l5793 0852  
                                 i1l5785 082C                                   i1l5795 085A  
                                 i1l5787 0838                                   i1l5797 085E  
                                 i1l5789 083E                                   i1l5799 0862  
                        _init_app_eeprom 2730                                   _RXB0IF 007BB8  
                                 _RXB1IF 007BB9                                   _RXF1EN 007231  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 2E38  
                 writeControlReg@ctrlreg 0013                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011                           __CFG_XINST$OFF 000000  
 vscp_handleProtocolEvent@page_save_1133 00AE                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 2E0C                                   _doWork 3176  
                       OpenTimer0@config 0008                    __size_of_actionClrAll 0030  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000D  
                    vscp_writeAppReg@reg 0017                      vscp_writeAppReg@val 0015  
                                 clear_0 2F48                                   clear_1 2F54  
                  __size_of_actionSetAll 0030                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00BB                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0070                            _vscp_errorcnt 0055  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                     _vscp_init_pstorage 3172                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0008  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                             __accesstop 0060                  __end_of__initialization 2F5A  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                    ?_vscp_init_pstorage 0001                             _actionClrAll 2D1E  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 2F60  
                    _vscp_getControlByte 302E                ??_interrupt_at_low_vector 0005  
                           _actionSetAll 2D4E                  __size_of_vscp_sendEvent 0030  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
            __end_of_vscp_check_pstorage 2CAE                  __size_of_vscp_setUserID 001C  
                            ?_Read_b_eep 0008                          ??i1_WriteTimer0 0003  
                     __size_of_actionClr 00D0                       __size_of_actionSet 00D0  
                    ?_vscp_writeRegister 0018                           ??_sendCANFrame 003E  
                   ??_vscp_init_pstorage 0010               __end_of_vscp_getFamilyCode 3156  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01F8  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 314C  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0018  
        __size_of_vscp_setManufacturerId 0024                 __end_of_vscp_writeAppReg 2290  
                   ?_vscp_getControlByte 0001                  __size_of_readControlReg 00D8  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 27FA  
            __end_of_vscp_setControlByte 2F42                 __end_of_vscp_writeStdReg 24B8  
                     __RegsToCANID@Value 000E                            actionClrAll@i 0050  
                   ??_vscp_writeRegister 0019          __end_of_vscp_handleDropNickname 2DAE  
                           _getVSCPFrame 2B0A                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 317E  
                              ?_Busy_eep 0001                    vscp_writeRegister@reg 0019  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                          actionSetAll@i 0050          __end_of_vscp_getSubMinorVersion 3182  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007407  
                                _B1RXFUL 007487                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007507                                  _B3RXFUL 007587  
                                _B4RXFUL 007607                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000C                                  _B5RXFUL 007687  
                       WriteTimer0@timer 000A                                  _ECANCON 000F72  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                          ??_Write_b_eep 000B                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000E43                                  _BRGCON2 000E44  
                                _BRGCON3 000E45           SendInformationEvent@eventClass 00A5  
                    vscp_writeStdReg@reg 0016             __end_of_vscp_doOneSecondWork 2C26  
                  ??_vscp_getControlByte 000A                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
        __end_of_interrupt_at_low_vector 08B6                 vscp_readStdReg@code_1106 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 27FA  
                                _RXB0CON 000F60                                  _RXB1CON 000F30  
                                _RXB0FUL 007B07                         __ECANPointBuffer 2A8C  
             __end_of_vscp_getMatrixInfo 30A6                                  _TXB0CON 000F20  
                                _TXB1CON 000F10                                  _TXB2CON 000F00  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                     _vscp_goActiveState 2FBA                        __end_of_actionClr 2660  
                      __end_of_actionSet 2730                   __size_of_sendVSCPFrame 00B4  
           __end_of_SendInformationEvent 2BD4             __end_of_vscp_getMajorVersion 3186  
                    __size_of_Read_b_eep 0018                        writeControlReg@rv 0014  
                        _writeControlReg 1BB8                       __size_of_vscp_init 004E  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 30BC                   _vscp_setManufacturerId 2ED6  
                      actionSetAll@param 004F                          _ECANSendMessage 1D44  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0072               ??_vscp_handleProtocolEvent 00A5  
                          ??_getCANFrame 001C        __end_of_vscp_getRegisterPagesUsed 317C  
               __size_of_vscp_getMDF_URL 001C                                  ___lbmod 2E62  
                        getCANFrame@pdlc 001A                                _FIFOEMPTY 007B8F  
                        __size_of_doWork 0002                             __psmallconst 0F00  
                   __end_of_init_app_ram 310A                       _vscp_sendHeartBeat 2E8A  
                                __pcinit 2F42                           _vscp_deviceURL 0F00  
                                __ramtop 0F00                      __size_of_OpenTimer0 001E  
                                __ptext0 2290                                  __ptext1 3176  
                                __ptext2 3178                                  __ptext3 2BD4  
                                __ptext4 2E8A                                  __ptext5 312E  
                                __ptext6 3138                                  __ptext7 316E  
                                __ptext8 155C                                  __ptext9 2D1E  
                         _vscp_getUserID 30D0                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                    vscp_writeStdReg@value 0010  
                    ?_vscp_sendHeartBeat 00A5                 ??_vscp_handleSetNickname 000D  
                                _minutes 0069                                  _seconds 006A  
                      __CFG_MSSPMSK$MSK7 000000                      __end_of_WriteTimer0 311C  
                       ?_init_app_eeprom 0001                      __end_of_Write_b_eep 2CE8  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00B2                     end_of_initialization 2F5A  
           __end_of_vscp_handleHeartbeat 3188                 __size_of_vscp_getSubzone 000A  
                   __end_of_sendCANFrame 2E0C                vscp_handleProtocolEvent@i 00BF  
              vscp_handleProtocolEvent@j 00C0                vscp_handleProtocolEvent@k 00B9  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 2DAE  
                 vscp_getControlByte@idx 000A                   vscp_setControlByte@idx 000D  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 008A  
                         _vscp_setUserID 2FF6                                  postinc0 000FEE  
                                postinc2 000FDE                         actionClr@dmflags 0001  
                 __end_of_vscp_deviceURL 0F20      __end_of_vscp_writeNicknamePermanent 30BC  
            _vscp_writeNicknamePermanent 30A6                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 28B2                   __end_of_vscp_getUserID 30E4  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0077CB  
                      __end_of_vscp_init 2C74                           _vscp_probe_cnt 0073  
                              _PORTAbits 000F80                                _PORTBbits 000F81  
                              _PORTCbits 000F82                      __end_of_getCANFrame 2ED6  
                         _readControlReg 24B8            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 009C  
                       ___lbmod@dividend 0009                  __end_of_writeControlReg 1D44  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 01B0  
             vscp_handleProtocolEvent@cb 00B7                  __end_of_ECANSendMessage 1EA8  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00B4  
                   __end_of__RegsToCANID 200C                   __end_of_vscp_sendEvent 2DDE  
                             _vscp_error 316E                     _vscp_doOneSecondWork 2BD4  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0066  
                 __end_of_vscp_setUserID 3012                   vscp_sendHeartBeat@zone 004C  
                           ??_Read_b_eep 000A                           ?_sendVSCPFrame 003F  
                        ?_vscp_getUserID 0001                      actionSetAll@dmflags 0001  
                         __end_of_doWork 3178             __end_of_vscp_getMinorVersion 3184  
                            _WriteTimer0 310A                   __end_of_readControlReg 2590  
                   _SendInformationEvent 2B7E                     _vscp_getMajorVersion 3184  
                            _Write_b_eep 2CAE                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0015  
                    start_initialization 2F42          __size_of_vscp_handleSetNickname 001E  
                     ??_vscp_writeAppReg 0016                        ?_vscp_writeStdReg 0010  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0011                       _vscp_getFamilyCode 314C  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 3142  
                       doDM@class_filter 00AA                       __end_of_Read_b_eep 3062  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 307A  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00B6  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 155C  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 0012                                _doDM$1984 00B0  
                              _doDM$1985 00B1                                _doDM$1986 00B2  
                              _doDM$1987 00B3                 ?_vscp_handleDropNickname 0001  
                      ??_vscp_getSubzone 000A                 __end_of__ECANPointBuffer 2B0A  
                      __CANIDToRegs@type 000E                              _getCANFrame 2EB0  
                               ??_doWork 0008                       _vscp_getBufferSize 317C  
            vscp_handleProtocolEvent@len 00B3              vscp_handleProtocolEvent@pos 00B1  
             __end_of_ECANReceiveMessage 1A08                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001E                    ?_SendInformationEvent 00A5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 312E  
          __end_of_vscp_goBootloaderMode 2FBA                          ?_readControlReg 0001  
                         actionClr@param 004F                     _vscp_handleHeartbeat 3186  
            __size_of_vscp_init_pstorage 0004                       __end_of_OpenTimer0 2FF6  
    __size_of_doApplicationOneSecondWork 0002                      ?_vscp_getBufferSize 0001  
           __size_of_vscp_check_pstorage 003A                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0091                         _vscp_alarmstatus 006B  
                       ?_writeControlReg 0011                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 002E                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000C                            ?_vscp_setGUID 000C  
            __size_of_vscp_writeRegister 001E                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 0011                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 3090                             _init_app_ram 30F8  
           __size_of_vscp_setControlByte 0024                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              _actionClr 2590                                _actionSet 2660  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 3090  
                 _vscp_handleSetNickname 2F7E            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0091                           _ECANInitialize 2A02  
                               ?___lbmod 0008                           actionSet@param 004F  
            __end_of_vscp_getControlByte 304A                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 000A                              __pintcodelo 0818  
       vscp_handleProtocolEvent@len_1123 00B5                    ?_vscp_handleHeartbeat 0001  
                vscp_readStdReg@idx_1107 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 2DDE                              __smallconst 0F00  
                      WriteTimer0@timer0 0008                         actionSet@dmflags 0001  
                         ??_vscp_getGUID 000A                           ??_vscp_getZone 000A  
         __end_of_vscp_getManufacturerId 30D0           __end_of_vscp_setManufacturerId 2EFA  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1122 00B4  
                        doDM@type_filter 00AE                           ??_vscp_setGUID 000D  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0064  
        SendInformationEvent@eventTypeId 00A6                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 3182  
                             ?_actionClr 004F                               ?_actionSet 004F  
                 __end_of_ECANInitialize 2A8C                                 i1u560_20 08A2  
                               i1u560_21 08A0                                 i1u554_20 082C  
                               i1u554_21 082A                                 i1u555_20 085A  
                               i1u555_21 0858                                 i1u556_20 086E  
                               i1u556_21 086C                                 i1u557_20 0878  
                               i1u557_21 0876                                 i1u558_20 0880  
                               i1u558_21 087E                                 i1u559_20 0894  
                               i1u559_21 0892                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 2E38  
                               _RXF0EIDH 000EE2                                 _RXF0EIDL 000EE3  
                               _RXB0OVFL 007B8F                                 _RXF1EIDH 000EE6  
                               _RXF1EIDL 000EE7                                 _RXB1OVFL 007B8E  
                               _RXF0SIDH 000EE0                                 _RXF0SIDL 000EE1  
                               _RXF1SIDH 000EE4                                 _RXF1SIDL 000EE5  
                               _RXM0EIDH 000EFA                                 _RXM0EIDL 000EFB  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000EFE  
                               _RXM1EIDL 000EFF                                 _RXFBCON0 000E71  
                               _RXFBCON1 000E72                                 _RXFBCON2 000E73  
                               _RXFBCON3 000E74                                 _RXFBCON4 000E75  
                               _RXFBCON5 000E76                                 _RXFBCON6 000E77  
                               _RXFBCON7 000E78                                 _RXM0SIDH 000EF8  
                               _RXM0SIDL 000EF9                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 215C                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1EA8                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
            __size_of_vscp_goActiveState 001E                       writeControlReg@val 0011  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 2C26  
                              _vscp_imsg 0075                                _vscp_hour 006D  
                              _vscp_omsg 0083                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 063A                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 317A  
             _doApplicationOneSecondWork 3178                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0060  
                               _Busy_eep 3168                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 00CA                      actionClrAll@dmflags 0001  
           __end_of_vscp_restoreDefaults 3168                               _EECON1bits 000F7F  
                          ?_actionClrAll 004F                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                            ?_actionSetAll 004F  
                       ??_vscp_getUserID 000A                          _vscp_getMDF_URL 3012  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                       __CFG_BOREN$SBORDIS 000000  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 0008                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                           ?_Write_b_eep 0008                               ?_vscp_init 0001  
                               __ptext10 2D4E                                 __ptext11 2590  
                               __ptext20 2ED6                                 __ptext12 2660  
                               __ptext21 2EFA                                 __ptext13 2B7E  
                               __ptext30 317E                                 __ptext22 215C  
                               __ptext14 0F22                                 __ptext31 30BC  
                               __ptext23 1BB8                                 __ptext15 2E62  
                               __ptext40 2C26                                 __ptext32 30D0  
                               __ptext24 307A                                 __ptext16 2F60  
                               __ptext41 3156                                 __ptext33 3012  
                               __ptext25 1A08                                 __ptext17 23A8  
                               __ptext50 2DDE                                 __ptext42 2F7E  
                               __ptext34 30E4                                 __ptext26 317A  
                               __ptext18 3160                                 __ptext51 1D44  
                               __ptext43 3186                                 __ptext35 3180  
                               __ptext27 3142                                 __ptext19 2FF6  
                               __ptext60 3172                                 __ptext52 200C  
                               __ptext44 3090                                 __ptext36 3182  
                               __ptext28 314C                                 __ptext61 2730  
                               __ptext53 2E0C                                 __ptext45 2F9C  
                               __ptext37 3184                                 __ptext29 317C  
                               __ptext70 3062                                 __ptext62 302E  
                               __ptext54 2B0A                                 __ptext46 27FA  
                               __ptext38 2E38                                 __ptext71 2FD8  
                               __ptext63 304A                                 __ptext55 2EB0  
                               __ptext47 2FBA                                 __ptext39 2D7E  
                               __ptext72 30F8                                 __ptext64 2F1E  
                               __ptext56 1810                                 __ptext48 2DAE  
                               __ptext73 310A                                 __ptext65 30A6  
                               __ptext57 1EA8                                 __ptext49 28B2  
                               __ptext74 24B8                                 __ptext66 2CAE  
                               __ptext58 2A8C                                 __ptext75 2966  
                               __ptext67 3168                                 __ptext59 2C74  
                               __ptext68 2CE8                                 __ptext77 311C  
                               __ptext69 2A02           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00A5                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 312E  
                       ??_vscp_setUserID 000D                            __size_of_doDM 02B4  
                          __size_of_main 0118                            __size_of_init 0036  
                         ??_actionClrAll 0050                              ??_actionClr 0050  
                            ??_actionSet 0050                __size_of_vscp_writeAppReg 0134  
                    _vscp_check_pstorage 2C74                           ??_actionSetAll 0050  
         vscp_handleProtocolEvent@i_1121 00BA           vscp_handleProtocolEvent@i_1124 00BE  
         vscp_handleProtocolEvent@i_1132 00B8                     __end_of_vscp_getGUID 30F8  
              __size_of_vscp_writeStdReg 0110                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                         ??_readControlReg 0008  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3142                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 2F1E                       vscp_readAppReg@reg 0012  
                       vscp_sendEvent@rv 004B                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00B0                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                      __CFG_INTOSCSEL$HIGH 000000  
                       init_app_eeprom@i 000F                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 2F1E                          _vscp_readAppReg 2966  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 006C                          _vscp_readStdReg 1A08  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 2E62  
                     _ECANReceiveMessage 1810                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 006E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 302E  
                   ?_vscp_setControlByte 000C                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0071                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                  vscp_setControlByte@ctrl 000C  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000C  
                  __size_of__CANIDToRegs 0150                       __CFG_WDTPS$1048576 000000  
    __size_of_vscp_readNicknamePermanent 000A               __end_of_vscp_init_pstorage 3176  
    __end_of_vscp_getBootLoaderAlgorithm 3180              _vscp_getBootLoaderAlgorithm 317E  
                  readControlReg@ctrlreg 000F         __size_of_interrupt_at_low_vector 009E  
                      actionClrAll@param 004F                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 0010                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2F9C             __end_of_ECANSetOperationMode 307A  
                   _vscp_restoreDefaults 3160              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3138  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2F7E                       __end_of_vscp_error 3172  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2F9C  
     vscp_handleProtocolEvent@bytes_1128 00BC                    ??_vscp_setControlByte 000D  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 200C                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00AC  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
