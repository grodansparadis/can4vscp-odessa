

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Apr 24 17:09:33 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    90  0000                     
    91                           	psect	smallconst
    92  000F00                     __psmallconst:
    93                           	opt stack 0
    94  000F00                     _vscp_deviceURL:
    95                           	opt stack 0
    96  000F00  77                 	db	119
    97  000F01  77                 	db	119
    98  000F02  77                 	db	119
    99  000F03  2E                 	db	46
   100  000F04  65                 	db	101
   101  000F05  75                 	db	117
   102  000F06  72                 	db	114
   103  000F07  6F                 	db	111
   104  000F08  73                 	db	115
   105  000F09  6F                 	db	111
   106  000F0A  75                 	db	117
   107  000F0B  72                 	db	114
   108  000F0C  63                 	db	99
   109  000F0D  65                 	db	101
   110  000F0E  2E                 	db	46
   111  000F0F  73                 	db	115
   112  000F10  65                 	db	101
   113  000F11  2F                 	db	47
   114  000F12  6F                 	db	111
   115  000F13  64                 	db	100
   116  000F14  65                 	db	101
   117  000F15  73                 	db	115
   118  000F16  73                 	db	115
   119  000F17  61                 	db	97
   120  000F18  30                 	db	48
   121  000F19  30                 	db	48
   122  000F1A  31                 	db	49
   123  000F1B  2E                 	db	46
   124  000F1C  78                 	db	120
   125  000F1D  6D                 	db	109
   126  000F1E  6C                 	db	108
   127  000F1F  00                 	db	0
   128  000F20                     __end_of_vscp_deviceURL:
   129                           	opt stack 0
   130  0000                     _ANCON0	set	3933
   131  0000                     _ANCON1	set	3932
   132  0000                     _BRGCON1	set	3651
   133  0000                     _BRGCON2	set	3652
   134  0000                     _BRGCON3	set	3653
   135  0000                     _BSEL0	set	3709
   136  0000                     _CANCON	set	3951
   137  0000                     _CIOCON	set	3952
   138  0000                     _ECANCON	set	3954
   139  0000                     _EEADR	set	3956
   140  0000                     _EECON1bits	set	3967
   141  0000                     _EECON2	set	3966
   142  0000                     _EEDATA	set	3955
   143  0000                     _INTCONbits	set	4082
   144  0000                     _MSEL0	set	3705
   145  0000                     _MSEL1	set	3706
   146  0000                     _MSEL2	set	3707
   147  0000                     _PIR4bits	set	4023
   148  0000                     _PORTA	set	3968
   149  0000                     _PORTAbits	set	3968
   150  0000                     _PORTB	set	3969
   151  0000                     _PORTBbits	set	3969
   152  0000                     _PORTC	set	3970
   153  0000                     _PORTCbits	set	3970
   154  0000                     _RXB1CONbits	set	3888
   155  0000                     _RXF0EIDH	set	3810
   156  0000                     _RXF0EIDL	set	3811
   157  0000                     _RXF0SIDH	set	3808
   158  0000                     _RXF0SIDL	set	3809
   159  0000                     _RXF1EIDH	set	3814
   160  0000                     _RXF1EIDL	set	3815
   161  0000                     _RXF1SIDL	set	3813
   162  0000                     _RXFBCON0	set	3697
   163  0000                     _RXFBCON1	set	3698
   164  0000                     _RXFBCON2	set	3699
   165  0000                     _RXFBCON3	set	3700
   166  0000                     _RXFBCON4	set	3701
   167  0000                     _RXFBCON5	set	3702
   168  0000                     _RXFBCON6	set	3703
   169  0000                     _RXFBCON7	set	3704
   170  0000                     _RXFCON0	set	3654
   171  0000                     _RXFCON1	set	3655
   172  0000                     _RXM0EIDH	set	3834
   173  0000                     _RXM0EIDL	set	3835
   174  0000                     _RXM0SIDH	set	3832
   175  0000                     _RXM0SIDL	set	3833
   176  0000                     _RXM1EIDH	set	3838
   177  0000                     _RXM1EIDL	set	3839
   178  0000                     _RXM1SIDL	set	3837
   179  0000                     _T0CON	set	4053
   180  0000                     _T0CONbits	set	4053
   181  0000                     _TMR0H	set	4055
   182  0000                     _TMR0L	set	4054
   183  0000                     _TRISA	set	3986
   184  0000                     _TRISB	set	3987
   185  0000                     _TRISC	set	3988
   186  0000                     _B0RXFUL	set	29703
   187  0000                     _B0TXEN	set	29674
   188  0000                     _B1RXFUL	set	29831
   189  0000                     _B1TXEN	set	29675
   190  0000                     _B2RXFUL	set	29959
   191  0000                     _B2TXEN	set	29676
   192  0000                     _B3RXFUL	set	30087
   193  0000                     _B3TXEN	set	29677
   194  0000                     _B4RXFUL	set	30215
   195  0000                     _B4TXEN	set	29678
   196  0000                     _B5RXFUL	set	30343
   197  0000                     _B5TXEN	set	29679
   198  0000                     _FIFOEMPTY	set	31631
   199  0000                     _IRXIF	set	31679
   200  0000                     _MDSEL0	set	31638
   201  0000                     _MDSEL1	set	31639
   202  0000                     _RXB0FILHIT0	set	31488
   203  0000                     _RXB0FUL	set	31495
   204  0000                     _RXB0IF	set	31672
   205  0000                     _RXB0OVFL	set	31631
   206  0000                     _RXB1IF	set	31673
   207  0000                     _RXB1OVFL	set	31630
   208  0000                     _RXF1EN	set	29233
   209  0000                     _RXM0EXIDM	set	30667
   210  0000                     _RXM1EXIDEN	set	30699
   211  0000                     _B0CON	set	3712
   212  0000                     _B1CON	set	3728
   213  0000                     _B2CON	set	3744
   214  0000                     _B3CON	set	3760
   215  0000                     _B4CON	set	3776
   216  0000                     _B5CON	set	3792
   217  0000                     _RXB0CON	set	3936
   218  0000                     _RXB1CON	set	3888
   219  0000                     _RXF1SIDH	set	3812
   220  0000                     _RXM1SIDH	set	3836
   221  0000                     _TXB0CON	set	3872
   222  0000                     _TXB1CON	set	3856
   223  0000                     _TXB2CON	set	3840
   224                           
   225                           ; #config settings
   226  000F20  00                 	db	0	; dummy byte at the end
   227  0000                     
   228                           	psect	cinit
   229  002EFA                     __pcinit:
   230                           	opt stack 0
   231  002EFA                     start_initialization:
   232                           	opt stack 0
   233  002EFA                     __initialization:
   234                           	opt stack 0
   235                           
   236                           ; Clear objects allocated to BANK0 (48 bytes)
   237  002EFA  EE00  F060         	lfsr	0,__pbssBANK0
   238  002EFE  0E30               	movlw	48
   239  002F00                     clear_0:
   240  002F00  6AEE               	clrf	postinc0,c
   241  002F02  06E8               	decf	wreg,f,c
   242  002F04  E1FD               	bnz	clear_0
   243                           
   244                           ; Clear objects allocated to COMRAM (7 bytes)
   245  002F06  EE00  F052         	lfsr	0,__pbssCOMRAM
   246  002F0A  0E07               	movlw	7
   247  002F0C                     clear_1:
   248  002F0C  6AEE               	clrf	postinc0,c
   249  002F0E  06E8               	decf	wreg,f,c
   250  002F10  E1FD               	bnz	clear_1
   251  002F12                     end_of_initialization:
   252                           	opt stack 0
   253  002F12                     __end_of__initialization:
   254                           	opt stack 0
   255  002F12  0100               	movlb	0
   256  002F14  EF24  F011         	goto	_main	;jump to C main() function
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           
   260                           	psect	bssCOMRAM
   261  000052                     __pbssCOMRAM:
   262                           	opt stack 0
   263  000052                     _vscp_page_select:
   264                           	opt stack 0
   265  000052                     	ds	2
   266  000054                     __ECANRxFilterHitInfo:
   267                           	opt stack 0
   268  000054                     	ds	1
   269  000055                     _sendTimer:
   270                           	opt stack 0
   271  000055                     	ds	1
   272  000056                     _vscp_initledfunc:
   273                           	opt stack 0
   274  000056                     	ds	1
   275  000057                     _vscp_probe_address:
   276                           	opt stack 0
   277  000057                     	ds	1
   278  000058                     _vscp_statuscnt:
   279                           	opt stack 0
   280  000058                     	ds	1
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           
   284                           	psect	bssBANK0
   285  000060                     __pbssBANK0:
   286                           	opt stack 0
   287  000060                     _measurement_clock:
   288                           	opt stack 0
   289  000060                     	ds	4
   290  000064                     _vscp_configtimer:
   291                           	opt stack 0
   292  000064                     	ds	2
   293  000066                     _vscp_timer:
   294                           	opt stack 0
   295  000066                     	ds	2
   296  000068                     _hours:
   297                           	opt stack 0
   298  000068                     	ds	1
   299  000069                     _minutes:
   300                           	opt stack 0
   301  000069                     	ds	1
   302  00006A                     _seconds:
   303                           	opt stack 0
   304  00006A                     	ds	1
   305  00006B                     _vscp_alarmstatus:
   306                           	opt stack 0
   307  00006B                     	ds	1
   308  00006C                     _vscp_guid_reset:
   309                           	opt stack 0
   310  00006C                     	ds	1
   311  00006D                     _vscp_hour:
   312                           	opt stack 0
   313  00006D                     	ds	1
   314  00006E                     _vscp_initbtncnt:
   315                           	opt stack 0
   316  00006E                     	ds	1
   317  00006F                     _vscp_minute:
   318                           	opt stack 0
   319  00006F                     	ds	1
   320  000070                     _vscp_nickname:
   321                           	opt stack 0
   322  000070                     	ds	1
   323  000071                     _vscp_node_state:
   324                           	opt stack 0
   325  000071                     	ds	1
   326  000072                     _vscp_node_substate:
   327                           	opt stack 0
   328  000072                     	ds	1
   329  000073                     _vscp_probe_cnt:
   330                           	opt stack 0
   331  000073                     	ds	1
   332  000074                     _vscp_second:
   333                           	opt stack 0
   334  000074                     	ds	1
   335  000075                     _vscp_imsg:
   336                           	opt stack 0
   337  000075                     	ds	14
   338  000083                     _vscp_omsg:
   339                           	opt stack 0
   340  000083                     	ds	13
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           
   344                           	psect	cstackBANK0
   345  000090                     __pcstackBANK0:
   346                           	opt stack 0
   347  000090                     ??_sendVSCPFrame:
   348                           
   349                           ; 0 bytes @ 0x0
   350  000090                     	ds	20
   351  0000A4                     ??_vscp_handleProtocolEvent:
   352  0000A4                     ?_SendInformationEvent:
   353                           	opt stack 0
   354  0000A4                     ?_vscp_sendHeartBeat:
   355                           	opt stack 0
   356  0000A4                     SendInformationEvent@eventClass:
   357                           	opt stack 0
   358  0000A4                     vscp_sendHeartBeat@subzone:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x14
   362  0000A4                     	ds	1
   363  0000A5                     SendInformationEvent@eventTypeId:
   364                           	opt stack 0
   365                           
   366                           ; 1 bytes @ 0x15
   367  0000A5                     	ds	1
   368  0000A6                     ??_doDM:
   369                           
   370                           ; 0 bytes @ 0x16
   371  0000A6                     	ds	3
   372  0000A9                     doDM@class_filter:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0x19
   376  0000A9                     	ds	2
   377  0000AB                     doDM@class_mask:
   378                           	opt stack 0
   379  0000AB                     vscp_handleProtocolEvent@page_save:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x1B
   383  0000AB                     	ds	2
   384  0000AD                     doDM@type_filter:
   385                           	opt stack 0
   386  0000AD                     vscp_handleProtocolEvent@page_save_1140:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x1D
   390  0000AD                     	ds	1
   391  0000AE                     doDM@type_mask:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x1E
   395  0000AE                     	ds	1
   396  0000AF                     vscp_handleProtocolEvent@offset:
   397                           	opt stack 0
   398  0000AF                     _doDM$1986:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x1F
   402  0000AF                     	ds	1
   403  0000B0                     vscp_handleProtocolEvent@pos:
   404                           	opt stack 0
   405  0000B0                     _doDM$1987:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x20
   409  0000B0                     	ds	1
   410  0000B1                     vscp_handleProtocolEvent@bytes:
   411                           	opt stack 0
   412  0000B1                     _doDM$1988:
   413                           	opt stack 0
   414                           
   415                           ; 1 bytes @ 0x21
   416  0000B1                     	ds	1
   417  0000B2                     vscp_handleProtocolEvent@len:
   418                           	opt stack 0
   419  0000B2                     _doDM$1989:
   420                           	opt stack 0
   421                           
   422                           ; 1 bytes @ 0x22
   423  0000B2                     	ds	1
   424  0000B3                     doDM@dmflags:
   425                           	opt stack 0
   426  0000B3                     vscp_handleProtocolEvent@pos_1129:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x23
   430  0000B3                     	ds	1
   431  0000B4                     doDM@i:
   432                           	opt stack 0
   433  0000B4                     vscp_handleProtocolEvent@len_1130:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x24
   437  0000B4                     	ds	1
   438  0000B5                     vscp_handleProtocolEvent@bytes_this_time:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x25
   442  0000B5                     	ds	1
   443  0000B6                     vscp_handleProtocolEvent@cb:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x26
   447  0000B6                     	ds	1
   448  0000B7                     vscp_handleProtocolEvent@i_1139:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x27
   452  0000B7                     	ds	1
   453  0000B8                     vscp_handleProtocolEvent@k:
   454                           	opt stack 0
   455                           
   456                           ; 1 bytes @ 0x28
   457  0000B8                     	ds	1
   458  0000B9                     vscp_handleProtocolEvent@bytes_1136:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x29
   462  0000B9                     	ds	1
   463  0000BA                     vscp_handleProtocolEvent@i_1128:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x2A
   467  0000BA                     	ds	1
   468  0000BB                     vscp_handleProtocolEvent@byte:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x2B
   472  0000BB                     	ds	1
   473  0000BC                     vscp_handleProtocolEvent@i_1131:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x2C
   477  0000BC                     	ds	1
   478  0000BD                     vscp_handleProtocolEvent@i:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x2D
   482  0000BD                     	ds	1
   483  0000BE                     vscp_handleProtocolEvent@j:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0x2E
   487  0000BE                     	ds	1
   488                           postinc0	equ	0xFEE
   489                           wreg	equ	0xFE8
   490                           
   491                           	psect	cstackCOMRAM
   492  000001                     __pcstackCOMRAM:
   493                           	opt stack 0
   494  000001                     ?i1_WriteTimer0:
   495                           	opt stack 0
   496  000001                     i1WriteTimer0@timer0:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x0
   500  000001                     	ds	2
   501  000003                     i1WriteTimer0@timer:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x2
   505  000003                     	ds	2
   506  000005                     ??_interrupt_at_low_vector:
   507                           
   508                           ; 0 bytes @ 0x4
   509  000005                     	ds	3
   510  000008                     ?_WriteTimer0:
   511                           	opt stack 0
   512  000008                     ?_writeEEPROM:
   513                           	opt stack 0
   514  000008                     ??_readControlReg:
   515  000008                     ?__CANIDToRegs:
   516                           	opt stack 0
   517  000008                     ?__RegsToCANID:
   518                           	opt stack 0
   519  000008                     ??_vscp_getMDF_URL:
   520  000008                     ?_readEEPROM:
   521                           	opt stack 0
   522  000008                     ?___lbmod:
   523                           	opt stack 0
   524  000008                     ?__ECANPointBuffer:
   525                           	opt stack 0
   526  000008                     ?_vscp_getFamilyCode:
   527                           	opt stack 0
   528  000008                     ?_vscp_getFamilyType:
   529                           	opt stack 0
   530  000008                     vscp_getMatrixInfo@i:
   531                           	opt stack 0
   532  000008                     ECANSetOperationMode@mode:
   533                           	opt stack 0
   534  000008                     OpenTimer0@config:
   535                           	opt stack 0
   536  000008                     ___lbmod@divisor:
   537                           	opt stack 0
   538  000008                     __CANIDToRegs@ptr:
   539                           	opt stack 0
   540  000008                     __RegsToCANID@ptr:
   541                           	opt stack 0
   542  000008                     writeEEPROM@address:
   543                           	opt stack 0
   544  000008                     readEEPROM@address:
   545                           	opt stack 0
   546  000008                     WriteTimer0@timer0:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x7
   550  000008                     	ds	1
   551  000009                     vscp_getMDF_URL@idx:
   552                           	opt stack 0
   553  000009                     ___lbmod@dividend:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x8
   557  000009                     	ds	1
   558  00000A                     __RegsToCANID@val:
   559                           	opt stack 0
   560  00000A                     writeEEPROM@data:
   561                           	opt stack 0
   562  00000A                     readEEPROM@data:
   563                           	opt stack 0
   564  00000A                     ___lbmod@counter:
   565                           	opt stack 0
   566  00000A                     WriteTimer0@timer:
   567                           	opt stack 0
   568  00000A                     __CANIDToRegs@val:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x9
   572  00000A                     	ds	1
   573  00000B                     ??_init_app_eeprom:
   574  00000B                     ?_vscp_setGUID:
   575                           	opt stack 0
   576  00000B                     ?_vscp_setManufacturerId:
   577                           	opt stack 0
   578  00000B                     ?_vscp_setUserID:
   579                           	opt stack 0
   580  00000B                     vscp_setGUID@data:
   581                           	opt stack 0
   582  00000B                     vscp_setManufacturerId@data:
   583                           	opt stack 0
   584  00000B                     vscp_writeNicknamePermanent@nickname:
   585                           	opt stack 0
   586  00000B                     vscp_getGUID@idx:
   587                           	opt stack 0
   588  00000B                     vscp_getUserID@idx:
   589                           	opt stack 0
   590  00000B                     vscp_setUserID@data:
   591                           	opt stack 0
   592  00000B                     vscp_getManufacturerId@idx:
   593                           	opt stack 0
   594  00000B                     vscp_setSegmentCRC@crc:
   595                           	opt stack 0
   596  00000B                     vscp_setControlByte@ctrl:
   597                           	opt stack 0
   598  00000B                     vscp_goBootloaderMode@algorithm:
   599                           	opt stack 0
   600  00000B                     __RegsToCANID@type:
   601                           	opt stack 0
   602  00000B                     __ECANPointBuffer@b:
   603                           	opt stack 0
   604  00000B                     ___lbmod@rem:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0xA
   608  00000B                     	ds	1
   609  00000C                     ??__RegsToCANID:
   610  00000C                     ??_vscp_readStdReg:
   611  00000C                     vscp_setGUID@idx:
   612                           	opt stack 0
   613  00000C                     vscp_setManufacturerId@idx:
   614                           	opt stack 0
   615  00000C                     vscp_setUserID@idx:
   616                           	opt stack 0
   617  00000C                     vscp_handleDropNickname@bytes:
   618                           	opt stack 0
   619  00000C                     __ECANPointBuffer@pt:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0xB
   623  00000C                     	ds	1
   624  00000D                     init_app_eeprom@j:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0xC
   628  00000D                     	ds	1
   629  00000E                     init_app_eeprom@i:
   630                           	opt stack 0
   631  00000E                     __CANIDToRegs@type:
   632                           	opt stack 0
   633  00000E                     __RegsToCANID@Value:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0xD
   637  00000E                     	ds	1
   638  00000F                     ??__CANIDToRegs:
   639  00000F                     ?_ECANReceiveMessage:
   640                           	opt stack 0
   641  00000F                     ?_vscp_writeStdReg:
   642                           	opt stack 0
   643  00000F                     readControlReg@ctrlreg:
   644                           	opt stack 0
   645  00000F                     ECANReceiveMessage@data:
   646                           	opt stack 0
   647  00000F                     vscp_writeStdReg@value:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0xE
   651  00000F                     	ds	1
   652  000010                     ??_vscp_writeStdReg:
   653  000010                     readControlReg@rv:
   654                           	opt stack 0
   655  000010                     ECANReceiveMessage@dataLen:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0xF
   659  000010                     	ds	1
   660  000011                     ?_writeControlReg:
   661                           	opt stack 0
   662  000011                     vscp_readAppReg@rv:
   663                           	opt stack 0
   664  000011                     writeControlReg@val:
   665                           	opt stack 0
   666  000011                     ECANReceiveMessage@msgFlags:
   667                           	opt stack 0
   668  000011                     __CANIDToRegs@Value:
   669                           	opt stack 0
   670  000011                     vscp_readStdReg@code:
   671                           	opt stack 0
   672                           
   673                           ; 4 bytes @ 0x10
   674  000011                     	ds	1
   675  000012                     ??_writeControlReg:
   676  000012                     ?_ECANSendMessage:
   677                           	opt stack 0
   678  000012                     vscp_readAppReg@reg:
   679                           	opt stack 0
   680  000012                     ECANReceiveMessage@savedPtr:
   681                           	opt stack 0
   682  000012                     ECANSendMessage@id:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x11
   686  000012                     	ds	1
   687  000013                     writeControlReg@ctrlreg:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x12
   691  000013                     	ds	1
   692  000014                     writeControlReg@rv:
   693                           	opt stack 0
   694  000014                     ECANReceiveMessage@id:
   695                           	opt stack 0
   696  000014                     vscp_writeStdReg@rv:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x13
   700  000014                     	ds	1
   701  000015                     ?_vscp_writeAppReg:
   702                           	opt stack 0
   703  000015                     vscp_writeAppReg@val:
   704                           	opt stack 0
   705  000015                     ECANReceiveMessage@i:
   706                           	opt stack 0
   707  000015                     vscp_writeStdReg@reg:
   708                           	opt stack 0
   709  000015                     vscp_readStdReg@code_1113:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x14
   713  000015                     	ds	1
   714  000016                     vscp_writeAppReg@rv:
   715                           	opt stack 0
   716  000016                     ECANReceiveMessage@mode:
   717                           	opt stack 0
   718  000016                     ECANSendMessage@data:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x15
   722  000016                     	ds	1
   723  000017                     vscp_writeAppReg@reg:
   724                           	opt stack 0
   725  000017                     ECANReceiveMessage@temp:
   726                           	opt stack 0
   727                           
   728                           ; 1 bytes @ 0x16
   729  000017                     	ds	1
   730  000018                     ?_vscp_writeRegister:
   731                           	opt stack 0
   732  000018                     ECANSendMessage@dataLen:
   733                           	opt stack 0
   734  000018                     vscp_writeRegister@value:
   735                           	opt stack 0
   736  000018                     ECANReceiveMessage@ptr:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x17
   740  000018                     	ds	1
   741  000019                     ECANSendMessage@msgFlags:
   742                           	opt stack 0
   743  000019                     vscp_readStdReg@idx:
   744                           	opt stack 0
   745  000019                     vscp_writeRegister@reg:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x18
   749  000019                     	ds	1
   750  00001A                     ??_ECANSendMessage:
   751  00001A                     ?_getCANFrame:
   752                           	opt stack 0
   753  00001A                     getCANFrame@pdlc:
   754                           	opt stack 0
   755  00001A                     vscp_readStdReg@idx_1114:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x19
   759  00001A                     	ds	1
   760  00001B                     getCANFrame@pdata:
   761                           	opt stack 0
   762  00001B                     vscp_readStdReg@rv:
   763                           	opt stack 0
   764  00001B                     ECANSendMessage@pb:
   765                           	opt stack 0
   766                           
   767                           ; 18 bytes @ 0x1A
   768  00001B                     	ds	1
   769  00001C                     getCANFrame@pid:
   770                           	opt stack 0
   771  00001C                     vscp_readStdReg@reg:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x1B
   775  00001C                     	ds	1
   776  00001D                     getCANFrame@flags:
   777                           	opt stack 0
   778  00001D                     vscp_readRegister@reg:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1C
   782  00001D                     	ds	1
   783  00001E                     ?_getVSCPFrame:
   784                           	opt stack 0
   785  00001E                     getVSCPFrame@pvscptype:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1D
   789  00001E                     	ds	1
   790  00001F                     getVSCPFrame@pNodeId:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x1E
   794  00001F                     	ds	1
   795  000020                     getVSCPFrame@pPriority:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x1F
   799  000020                     	ds	1
   800  000021                     getVSCPFrame@pSize:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x20
   804  000021                     	ds	1
   805  000022                     getVSCPFrame@pData:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x21
   809  000022                     	ds	1
   810  000023                     ??_getVSCPFrame:
   811                           
   812                           ; 0 bytes @ 0x22
   813  000023                     	ds	4
   814  000027                     getVSCPFrame@pvscpclass:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x26
   818  000027                     	ds	1
   819  000028                     getVSCPFrame@id:
   820                           	opt stack 0
   821                           
   822                           ; 4 bytes @ 0x27
   823  000028                     	ds	4
   824  00002C                     vscp_getEvent@rv:
   825                           	opt stack 0
   826                           
   827                           ; 1 bytes @ 0x2B
   828  00002C                     	ds	1
   829  00002D                     ECANSendMessage@mode:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x2C
   833  00002D                     	ds	1
   834  00002E                     ECANSendMessage@buffers:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x2D
   838  00002E                     	ds	1
   839  00002F                     ECANSendMessage@j:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x2E
   843  00002F                     	ds	1
   844  000030                     ECANSendMessage@tempBSEL0:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x2F
   848  000030                     	ds	1
   849  000031                     ECANSendMessage@tempPtr:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x30
   853  000031                     	ds	2
   854  000033                     ECANSendMessage@temp:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x32
   858  000033                     	ds	1
   859  000034                     ECANSendMessage@i:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x33
   863  000034                     	ds	1
   864  000035                     ECANSendMessage@ptr:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x34
   868  000035                     	ds	2
   869  000037                     ?_sendCANFrame:
   870                           	opt stack 0
   871  000037                     sendCANFrame@id:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0x36
   875  000037                     	ds	4
   876  00003B                     sendCANFrame@dlc:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x3A
   880  00003B                     	ds	1
   881  00003C                     sendCANFrame@pdata:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0x3B
   885  00003C                     	ds	2
   886  00003E                     sendCANFrame@rv:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x3D
   890  00003E                     	ds	1
   891  00003F                     ?_sendVSCPFrame:
   892                           	opt stack 0
   893  00003F                     sendVSCPFrame@vscpclass:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x3E
   897  00003F                     	ds	2
   898  000041                     sendVSCPFrame@vscptype:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x40
   902  000041                     	ds	1
   903  000042                     sendVSCPFrame@nodeid:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x41
   907  000042                     	ds	1
   908  000043                     sendVSCPFrame@priority:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x42
   912  000043                     	ds	1
   913  000044                     sendVSCPFrame@size:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x43
   917  000044                     	ds	1
   918  000045                     sendVSCPFrame@pData:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x44
   922  000045                     	ds	2
   923  000047                     sendVSCPFrame@id:
   924                           	opt stack 0
   925                           
   926                           ; 4 bytes @ 0x46
   927  000047                     	ds	4
   928  00004B                     SendInformationEvent@data:
   929                           	opt stack 0
   930                           
   931                           ; 3 bytes @ 0x4A
   932  00004B                     	ds	1
   933  00004C                     ??_vscp_newNodeOnline:
   934  00004C                     vscp_sendHeartBeat@zone:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x4B
   938  00004C                     	ds	1
   939  00004D                     ??_vscp_doOneSecondWork:
   940                           
   941                           ; 0 bytes @ 0x4C
   942  00004D                     	ds	1
   943  00004E                     SendInformationEvent@idx:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x4D
   947  00004E                     	ds	1
   948  00004F                     ?_actionSet:
   949                           	opt stack 0
   950  00004F                     ?_actionClr:
   951                           	opt stack 0
   952  00004F                     ?_actionSetAll:
   953                           	opt stack 0
   954  00004F                     ?_actionClrAll:
   955                           	opt stack 0
   956  00004F                     actionSet@param:
   957                           	opt stack 0
   958  00004F                     actionClr@param:
   959                           	opt stack 0
   960  00004F                     
   961                           ; 1 bytes @ 0x4E
   962  00004F                     	ds	1
   963  000050                     actionSetAll@i:
   964                           	opt stack 0
   965  000050                     actionClrAll@i:
   966                           	opt stack 0
   967                           
   968                           ; 2 bytes @ 0x4F
   969  000050                     	ds	2
   970  000052                     postinc0	equ	0xFEE
   971                           wreg	equ	0xFE8
   972                           
   973                           ; 0 bytes @ 0x51
   974 ;;
   975 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   976 ;;
   977 ;; *************** function _main *****************
   978 ;; Defined at:
   979 ;;		line 167 in file "../main.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;		None               void
   986 ;; Registers used:
   987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : F/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   997 ;;Total ram usage:        0 bytes
   998 ;; Hardware stack levels required when called:    9
   999 ;; This function calls:
  1000 ;;		_init
  1001 ;;		_vscp_check_pstorage
  1002 ;;		_init_app_eeprom
  1003 ;;		_init_app_ram
  1004 ;;		_vscp_init
  1005 ;;		_readEEPROM
  1006 ;;		_writeControlReg
  1007 ;;		_writeEEPROM
  1008 ;;		_vscp_getEvent
  1009 ;;		_vscp_goActiveState
  1010 ;;		_vscp_handleProbeState
  1011 ;;		_vscp_handleProtocolEvent
  1012 ;;		_doDM
  1013 ;;		_vscp_error
  1014 ;;		_vscp_doOneSecondWork
  1015 ;;		_doApplicationOneSecondWork
  1016 ;;		_doWork
  1017 ;; This function is called by:
  1018 ;;		Startup code after reset
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           	psect	text0
  1023  002248                     __ptext0:
  1024                           	opt stack 0
  1025  002248                     _main:
  1026                           	opt stack 22
  1027                           
  1028                           ;main.c: 168: init();
  1029                           
  1030                           ;incstack = 0
  1031                           ;incstack = 0
  1032  002248  EC3D  F016         	call	_init	;wreg free
  1033                           
  1034                           ;main.c: 172: if ( !vscp_check_pstorage() ) {
  1035  00224C  EC6D  F017         	call	_vscp_check_pstorage	;wreg free
  1036  002250  0900               	iorlw	0
  1037  002252  E104               	bnz	l6893
  1038                           
  1039                           ;main.c: 175: init_app_eeprom();
  1040  002254  EC25  F014         	call	_init_app_eeprom	;wreg free
  1041                           
  1042                           ;main.c: 176: init_app_ram();
  1043  002258  EC39  F018         	call	_init_app_ram	;wreg free
  1044  00225C                     l6893:
  1045                           
  1046                           ;main.c: 179: }
  1047                           ;main.c: 181: vscp_init();
  1048  00225C  ECDB  F015         	call	_vscp_init	;wreg free
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 184: writeControlReg( 0, readEEPROM( 0x21 + 2 ) );
  1052  002260  6A09               	clrf	?_readEEPROM+1,c
  1053  002262  0E23               	movlw	35
  1054  002264  6E08               	movwf	?_readEEPROM,c
  1055  002266  EC27  F018         	call	_readEEPROM	;wreg free
  1056  00226A  6E11               	movwf	?_writeControlReg,c
  1057  00226C  0E00               	movlw	0
  1058  00226E  ECC6  F00D         	call	_writeControlReg
  1059                           
  1060                           ;main.c: 185: writeControlReg( 1, readEEPROM( 0x21 + 3 ) );
  1061  002272  6A09               	clrf	?_readEEPROM+1,c
  1062  002274  0E24               	movlw	36
  1063  002276  6E08               	movwf	?_readEEPROM,c
  1064  002278  EC27  F018         	call	_readEEPROM	;wreg free
  1065  00227C  6E11               	movwf	?_writeControlReg,c
  1066  00227E  0E01               	movlw	1
  1067  002280  ECC6  F00D         	call	_writeControlReg
  1068                           
  1069                           ;main.c: 186: writeControlReg( 2, readEEPROM( 0x21 + 4 ) );
  1070  002284  6A09               	clrf	?_readEEPROM+1,c
  1071  002286  0E25               	movlw	37
  1072  002288  6E08               	movwf	?_readEEPROM,c
  1073  00228A  EC27  F018         	call	_readEEPROM	;wreg free
  1074  00228E  6E11               	movwf	?_writeControlReg,c
  1075  002290  0E02               	movlw	2
  1076  002292  ECC6  F00D         	call	_writeControlReg
  1077  002296                     l145:
  1078  002296  0004               	clrwdt		;# 
  1079                           
  1080                           ;main.c: 192: if ( ( vscp_initbtncnt > 250 ) &&
  1081                           ;main.c: 193: ( 0x01 != vscp_node_state ) ) {
  1082  002298  0EFA               	movlw	250
  1083  00229A  0100               	movlb	0	; () banked
  1084  00229C  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1085  00229E  D00C               	goto	l6909
  1086                           
  1087                           ; BSR set to: 0
  1088  0022A0  0571               	decf	_vscp_node_state& (0+255),w,b
  1089  0022A2  E00A               	bz	l6909
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 196: vscp_nickname = 0xff;
  1093  0022A4  6970               	setf	_vscp_nickname& (0+255),b
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;main.c: 197: writeEEPROM( 0x01, 0xff );
  1097  0022A6  6A09               	clrf	?_writeEEPROM+1,c
  1098  0022A8  0E01               	movlw	1
  1099  0022AA  6E08               	movwf	?_writeEEPROM,c
  1100  0022AC  0EFF               	movlw	255
  1101  0022AE  680A               	setf	?_writeEEPROM+2,c
  1102  0022B0  EC18  F017         	call	_writeEEPROM	;wreg free
  1103                           
  1104                           ;main.c: 198: vscp_init();
  1105  0022B4  ECDB  F015         	call	_vscp_init	;wreg free
  1106  0022B8                     l6909:
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;main.c: 200: }
  1110                           ;main.c: 203: vscp_imsg.flags = 0;
  1111  0022B8  6B75               	clrf	_vscp_imsg& (0+255),b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main.c: 204: vscp_getEvent();
  1115  0022BA  ECA0  F016         	call	_vscp_getEvent	;wreg free
  1116                           
  1117                           ;main.c: 206: switch ( vscp_node_state ) {
  1118  0022BE  D01C               	goto	l6933
  1119  0022C0                     l6913:
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 211: if (0xff == vscp_nickname) {
  1123  0022C0  2970               	incf	_vscp_nickname& (0+255),w,b
  1124  0022C2  E103               	bnz	l6917
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 213: vscp_node_state = 0x01;
  1128  0022C4  0E01               	movlw	1
  1129  0022C6  6F71               	movwf	_vscp_node_state& (0+255),b
  1130                           
  1131                           ;main.c: 214: } else {
  1132  0022C8  D023               	goto	l6935
  1133  0022CA                     l6917:
  1134                           
  1135                           ; BSR set to: 0
  1136                           ;main.c: 216: vscp_node_state = 0x03;
  1137  0022CA  0E03               	movlw	3
  1138  0022CC  6F71               	movwf	_vscp_node_state& (0+255),b
  1139  0022CE                     l6919:
  1140                           
  1141                           ; BSR set to: 0
  1142                           ;main.c: 217: vscp_goActiveState();
  1143  0022CE  EC9B  F017         	call	_vscp_goActiveState	;wreg free
  1144  0022D2  D01E               	goto	l6935
  1145  0022D4                     l6921:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;main.c: 222: vscp_handleProbeState();
  1149  0022D4  EC6E  F013         	call	_vscp_handleProbeState	;wreg free
  1150                           
  1151                           ;main.c: 223: break;
  1152  0022D8  D01B               	goto	l6935
  1153  0022DA                     l154:
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;main.c: 232: if (vscp_imsg.flags & 0x80) {
  1157  0022DA  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1158  0022DC  D019               	goto	l6935
  1159                           
  1160                           ; BSR set to: 0
  1161                           ;main.c: 234: if ( 0 == vscp_imsg.vscp_class ) {
  1162  0022DE  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1163  0022E0  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1164  0022E2  B4D8               	btfsc	status,2,c
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;main.c: 237: vscp_handleProtocolEvent();
  1168  0022E4  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1169                           
  1170                           ;main.c: 239: }
  1171                           ;main.c: 241: doDM();
  1172  0022E8  EC99  F00A         	call	_doDM	;wreg free
  1173  0022EC  D011               	goto	l6935
  1174  0022EE                     l6929:
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;main.c: 247: vscp_error();
  1178  0022EE  EC76  F018         	call	_vscp_error	;wreg free
  1179                           
  1180                           ;main.c: 248: break;
  1181  0022F2  D00E               	goto	l6935
  1182  0022F4                     l158:
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 251: vscp_node_state = 0x00;
  1186  0022F4  6B71               	clrf	_vscp_node_state& (0+255),b
  1187                           
  1188                           ;main.c: 252: break;
  1189  0022F6  D00C               	goto	l6935
  1190  0022F8                     l6933:
  1191  0022F8  0100               	movlb	0	; () banked
  1192  0022FA  5171               	movf	_vscp_node_state& (0+255),w,b
  1193                           
  1194                           ; Switch size 1, requested type "speed"
  1195                           ; Number of cases is 5, Range of values is 0 to 4
  1196                           ; switch strategies available:
  1197                           ; Name         Instructions Cycles
  1198                           ; simple_byte           16     9 (average)
  1199                           ;	Chosen strategy is simple_byte
  1200  0022FC  E0E1               	bz	l6913
  1201  0022FE  0A01               	xorlw	1	; case 1
  1202  002300  E0E9               	bz	l6921
  1203  002302  0A03               	xorlw	3	; case 2
  1204  002304  E0E4               	bz	l6919
  1205  002306  0A01               	xorlw	1	; case 3
  1206  002308  E0E8               	bz	l154
  1207  00230A  0A07               	xorlw	7	; case 4
  1208  00230C  E0F0               	bz	l6929
  1209  00230E  D7F2               	goto	l158
  1210  002310                     l6935:
  1211                           
  1212                           ;main.c: 257: if ( measurement_clock > 1000 ) {
  1213  002310  0EE9               	movlw	233
  1214  002312  0100               	movlb	0	; () banked
  1215  002314  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1216  002316  0E03               	movlw	3
  1217  002318  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1218  00231A  0E00               	movlw	0
  1219  00231C  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1220  00231E  0E00               	movlw	0
  1221  002320  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1222  002322  E30C               	bnc	l6947
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 259: measurement_clock = 0;
  1226  002324  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1227  002326  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1228  002328  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1229  00232A  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;main.c: 261: sendTimer++;
  1233  00232C  2A55               	incf	_sendTimer,f,c
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 264: vscp_doOneSecondWork();
  1237  00232E  ECB3  F015         	call	_vscp_doOneSecondWork	;wreg free
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 268: if ( 0x03 == vscp_node_state ) {
  1241  002332  5171               	movf	_vscp_node_state& (0+255),w,b
  1242  002334  0A03               	xorlw	3
  1243  002336  B4D8               	btfsc	status,2,c
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 271: doApplicationOneSecondWork();
  1247  002338  EC79  F018         	call	_doApplicationOneSecondWork	;wreg free
  1248  00233C                     l6947:
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 273: }
  1252                           ;main.c: 275: }
  1253                           ;main.c: 278: if ( seconds > 59 ) {
  1254  00233C  0E3B               	movlw	59
  1255  00233E  656A               	cpfsgt	_seconds& (0+255),b
  1256  002340  D00B               	goto	l6963
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 280: seconds = 0;
  1260  002342  6B6A               	clrf	_seconds& (0+255),b
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 281: minutes++;
  1264  002344  2B69               	incf	_minutes& (0+255),f,b
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 283: if ( minutes > 59 ) {
  1268  002346  0E3B               	movlw	59
  1269  002348  6569               	cpfsgt	_minutes& (0+255),b
  1270  00234A  D002               	goto	l6959
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;main.c: 284: minutes = 0;
  1274  00234C  6B69               	clrf	_minutes& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;main.c: 285: hours++;
  1278  00234E  2B68               	incf	_hours& (0+255),f,b
  1279  002350                     l6959:
  1280                           
  1281                           ; BSR set to: 0
  1282                           ;main.c: 286: }
  1283                           ;main.c: 288: if ( hours > 23 ) hours = 0;
  1284  002350  0E17               	movlw	23
  1285  002352  6568               	cpfsgt	_hours& (0+255),b
  1286  002354  D001               	goto	l6963
  1287                           
  1288                           ; BSR set to: 0
  1289  002356  6B68               	clrf	_hours& (0+255),b
  1290  002358                     l6963:
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;main.c: 290: }
  1294                           ;main.c: 292: doWork();
  1295  002358  EC78  F018         	call	_doWork	;wreg free
  1296  00235C  D79C               	goto	l145
  1297  00235E                     __end_of_main:
  1298                           	opt stack 0
  1299                           postinc0	equ	0xFEE
  1300                           wreg	equ	0xFE8
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _doWork *****************
  1304 ;; Defined at:
  1305 ;;		line 574 in file "../main.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;		None               void
  1312 ;; Registers used:
  1313 ;;		wreg, status,2, status,0
  1314 ;; Tracked objects:
  1315 ;;		On entry : F/0
  1316 ;;		On exit  : F/0
  1317 ;;		Unchanged: F/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1323 ;;Total ram usage:        0 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    2
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		_main
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text1
  1334  0030F0                     __ptext1:
  1335                           	opt stack 0
  1336  0030F0                     _doWork:
  1337                           	opt stack 28
  1338                           
  1339                           ; BSR set to: 0
  1340                           
  1341                           ; BSR set to: 0
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;incstack = 0
  1345                           ;incstack = 0
  1346  0030F0  0012               	return	
  1347  0030F2                     __end_of_doWork:
  1348                           	opt stack 0
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           status	equ	0xFD8
  1352                           
  1353 ;; *************** function _doApplicationOneSecondWork *****************
  1354 ;; Defined at:
  1355 ;;		line 456 in file "../main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;		None               void
  1362 ;; Registers used:
  1363 ;;		None
  1364 ;; Tracked objects:
  1365 ;;		On entry : F/0
  1366 ;;		On exit  : F/0
  1367 ;;		Unchanged: F/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1373 ;;Total ram usage:        0 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    2
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text2
  1384  0030F2                     __ptext2:
  1385                           	opt stack 0
  1386  0030F2                     _doApplicationOneSecondWork:
  1387                           	opt stack 28
  1388                           
  1389                           ; BSR set to: 0
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;incstack = 0
  1393                           ;incstack = 0
  1394  0030F2  0012               	return	
  1395  0030F4                     __end_of_doApplicationOneSecondWork:
  1396                           	opt stack 0
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           status	equ	0xFD8
  1400                           
  1401 ;; *************** function _vscp_doOneSecondWork *****************
  1402 ;; Defined at:
  1403 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;		None
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;		None
  1408 ;; Return value:  Size  Location     Type
  1409 ;;		None               void
  1410 ;; Registers used:
  1411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : F/0
  1414 ;;		On exit  : F/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1419 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1420 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1421 ;;Total ram usage:        1 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    8
  1424 ;; This function calls:
  1425 ;;		_vscp_getZone
  1426 ;;		_vscp_getSubzone
  1427 ;;		_vscp_sendHeartBeat
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           	psect	text3
  1434  002B66                     __ptext3:
  1435                           	opt stack 0
  1436  002B66                     _vscp_doOneSecondWork:
  1437                           	opt stack 22
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;vscp_firmware.c: 518: ++vscp_second;
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;incstack = 0
  1444                           ;incstack = 0
  1445  002B66  2B74               	incf	_vscp_second& (0+255),f,b
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  1449  002B68  0E3B               	movlw	59
  1450  002B6A  6574               	cpfsgt	_vscp_second& (0+255),b
  1451  002B6C  D00D               	goto	l6277
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;vscp_firmware.c: 521: vscp_second = 0;
  1455  002B6E  6B74               	clrf	_vscp_second& (0+255),b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;vscp_firmware.c: 522: vscp_minute++;
  1459  002B70  2B6F               	incf	_vscp_minute& (0+255),f,b
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  1463  002B72  5171               	movf	_vscp_node_state& (0+255),w,b
  1464  002B74  0A03               	xorlw	3
  1465  002B76  E108               	bnz	l6277
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  1469                           ;vscp_firmware.c: 527: vscp_getSubzone());
  1470  002B78  EC54  F018         	call	_vscp_getSubzone	;wreg free
  1471  002B7C  0100               	movlb	0	; () banked
  1472  002B7E  6FA4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1473  002B80  EC59  F018         	call	_vscp_getZone	;wreg free
  1474  002B84  ECDF  F016         	call	_vscp_sendHeartBeat
  1475  002B88                     l6277:
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;vscp_firmware.c: 528: }
  1479                           ;vscp_firmware.c: 529: }
  1480                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  1481  002B88  0E3B               	movlw	59
  1482  002B8A  656F               	cpfsgt	_vscp_minute& (0+255),b
  1483  002B8C  D002               	goto	l6283
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;vscp_firmware.c: 532: vscp_minute = 0;
  1487  002B8E  6B6F               	clrf	_vscp_minute& (0+255),b
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;vscp_firmware.c: 533: vscp_hour++;
  1491  002B90  2B6D               	incf	_vscp_hour& (0+255),f,b
  1492  002B92                     l6283:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;vscp_firmware.c: 534: }
  1496                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  1497  002B92  0E17               	movlw	23
  1498  002B94  656D               	cpfsgt	_vscp_hour& (0+255),b
  1499  002B96  D001               	goto	l6287
  1500                           
  1501                           ; BSR set to: 0
  1502  002B98  6B6D               	clrf	_vscp_hour& (0+255),b
  1503  002B9A                     l6287:
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  1507  002B9A  5171               	movf	_vscp_node_state& (0+255),w,b
  1508  002B9C  0A03               	xorlw	3
  1509  002B9E  A4D8               	btfss	status,2,c
  1510  002BA0  0012               	return	
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  1514  002BA2  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  1518  002BA4  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1519  002BA8  0E0F               	movlw	15
  1520  002BAA  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1521  002BAC  0E02               	movlw	2
  1522  002BAE  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1523  002BB0  B0D8               	btfsc	status,0,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  1527  002BB2  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1528                           
  1529                           ; BSR set to: 0
  1530  002BB4  0012               	return	
  1531  002BB6                     __end_of_vscp_doOneSecondWork:
  1532                           	opt stack 0
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function _vscp_sendHeartBeat *****************
  1538 ;; Defined at:
  1539 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;  zone            1    wreg     unsigned char 
  1542 ;;  subzone         1   20[BANK0 ] unsigned char 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  zone            1   75[COMRAM] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;		None               void
  1547 ;; Registers used:
  1548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : F/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1554 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1555 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1557 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1558 ;;Total ram usage:        2 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    7
  1561 ;; This function calls:
  1562 ;;		_vscp_sendEvent
  1563 ;; This function is called by:
  1564 ;;		_vscp_doOneSecondWork
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text4
  1569  002DBE                     __ptext4:
  1570                           	opt stack 0
  1571  002DBE                     _vscp_sendHeartBeat:
  1572                           	opt stack 22
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;incstack = 0
  1576                           ;incstack = 0
  1577                           ;vscp_sendHeartBeat@zone stored from wreg
  1578  002DBE  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1579                           
  1580                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  1581  002DC2  0E83               	movlw	131
  1582  002DC4  0100               	movlb	0	; () banked
  1583  002DC6  6F83               	movwf	_vscp_omsg& (0+255),b
  1584                           
  1585                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  1586  002DC8  0E07               	movlw	7
  1587  002DCA  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1588                           
  1589                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  1590  002DCC  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1591  002DCE  0E14               	movlw	20
  1592  002DD0  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1593                           
  1594                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  1595  002DD2  0E09               	movlw	9
  1596  002DD4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  1600  002DD6  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  1604  002DD8  C04C  F089         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  1608  002DDC  C0A4  F08A         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;vscp_firmware.c: 380: vscp_sendEvent();
  1612  002DE0  EFF2  F016         	goto	_vscp_sendEvent	;wreg free
  1613  002DE4                     __end_of_vscp_sendHeartBeat:
  1614                           	opt stack 0
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _vscp_getSubzone *****************
  1620 ;; Defined at:
  1621 ;;		line 563 in file "../main.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      unsigned char 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2, cstack
  1630 ;; Tracked objects:
  1631 ;;		On entry : F/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    3
  1642 ;; This function calls:
  1643 ;;		_readEEPROM
  1644 ;; This function is called by:
  1645 ;;		_vscp_doOneSecondWork
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text5
  1650  0030A8                     __ptext5:
  1651                           	opt stack 0
  1652  0030A8                     _vscp_getSubzone:
  1653                           	opt stack 26
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;main.c: 564: return readEEPROM( 0x21 + 1 );
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;incstack = 0
  1660                           ;incstack = 0
  1661  0030A8  6A09               	clrf	?_readEEPROM+1,c
  1662  0030AA  0E22               	movlw	34
  1663  0030AC  6E08               	movwf	?_readEEPROM,c
  1664  0030AE  EF27  F018         	goto	_readEEPROM	;wreg free
  1665  0030B2                     __end_of_vscp_getSubzone:
  1666                           	opt stack 0
  1667                           postinc0	equ	0xFEE
  1668                           wreg	equ	0xFE8
  1669                           status	equ	0xFD8
  1670                           
  1671 ;; *************** function _vscp_getZone *****************
  1672 ;; Defined at:
  1673 ;;		line 554 in file "../main.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      unsigned char 
  1680 ;; Registers used:
  1681 ;;		wreg, status,2, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : F/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    3
  1694 ;; This function calls:
  1695 ;;		_readEEPROM
  1696 ;; This function is called by:
  1697 ;;		_vscp_doOneSecondWork
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text6
  1702  0030B2                     __ptext6:
  1703                           	opt stack 0
  1704  0030B2                     _vscp_getZone:
  1705                           	opt stack 26
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 555: return readEEPROM( 0x21 + 0 );
  1709                           
  1710                           ;incstack = 0
  1711                           ;incstack = 0
  1712  0030B2  6A09               	clrf	?_readEEPROM+1,c
  1713  0030B4  0E21               	movlw	33
  1714  0030B6  6E08               	movwf	?_readEEPROM,c
  1715  0030B8  EF27  F018         	goto	_readEEPROM	;wreg free
  1716  0030BC                     __end_of_vscp_getZone:
  1717                           	opt stack 0
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _vscp_error *****************
  1723 ;; Defined at:
  1724 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;		None
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;		None
  1729 ;; Return value:  Size  Location     Type
  1730 ;;		None               void
  1731 ;; Registers used:
  1732 ;;		None
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1742 ;;Total ram usage:        0 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    2
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text7
  1753  0030EC                     __ptext7:
  1754                           	opt stack 0
  1755  0030EC                     _vscp_error:
  1756                           	opt stack 28
  1757                           
  1758                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  1759                           
  1760                           ;incstack = 0
  1761                           ;incstack = 0
  1762  0030EC  6A56               	clrf	_vscp_initledfunc,c
  1763  0030EE  0012               	return	
  1764  0030F0                     __end_of_vscp_error:
  1765                           	opt stack 0
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _doDM *****************
  1771 ;; Defined at:
  1772 ;;		line 835 in file "../main.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  class_mask      2   27[BANK0 ] unsigned short 
  1777 ;;  class_filter    2   25[BANK0 ] unsigned short 
  1778 ;;  i               1   36[BANK0 ] unsigned char 
  1779 ;;  dmflags         1   35[BANK0 ] unsigned char 
  1780 ;;  type_mask       1   30[BANK0 ] unsigned char 
  1781 ;;  type_filter     1   29[BANK0 ] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;		None               void
  1784 ;; Registers used:
  1785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : F/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1792 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1793 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1794 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1795 ;;Total ram usage:       15 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    8
  1798 ;; This function calls:
  1799 ;;		_readEEPROM
  1800 ;;		_actionSet
  1801 ;;		_actionClr
  1802 ;;		_actionSetAll
  1803 ;;		_actionClrAll
  1804 ;; This function is called by:
  1805 ;;		_main
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text8
  1810  001532                     __ptext8:
  1811                           	opt stack 0
  1812  001532                     _doDM:
  1813                           	opt stack 22
  1814                           
  1815                           ;main.c: 836: unsigned char i;
  1816                           ;main.c: 837: unsigned char dmflags;
  1817                           ;main.c: 838: unsigned short class_filter;
  1818                           ;main.c: 839: unsigned short class_mask;
  1819                           ;main.c: 840: unsigned char type_filter;
  1820                           ;main.c: 841: unsigned char type_mask;
  1821                           ;main.c: 844: if ( 0 == vscp_imsg.vscp_class ) return;
  1822                           
  1823                           ;incstack = 0
  1824                           ;incstack = 0
  1825  001532  0100               	movlb	0	; () banked
  1826  001534  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1827  001536  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1828  001538  B4D8               	btfsc	status,2,c
  1829  00153A  0012               	return	
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 846: for (i = 0; i < 8; i++) {
  1833  00153C  6BB4               	clrf	doDM@i& (0+255),b
  1834  00153E                     l7397:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;main.c: 849: dmflags = readEEPROM( 0x21 + 23 +
  1838                           ;main.c: 850: 0 + 1 + (8 * i) );
  1839  00153E  51B4               	movf	doDM@i& (0+255),w,b
  1840  001540  6FA6               	movwf	??_doDM& (0+255),b
  1841  001542  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1842  001544  90D8               	bcf	status,0,c
  1843  001546  37A6               	rlcf	??_doDM& (0+255),f,b
  1844  001548  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1845  00154A  90D8               	bcf	status,0,c
  1846  00154C  37A6               	rlcf	??_doDM& (0+255),f,b
  1847  00154E  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1848  001550  90D8               	bcf	status,0,c
  1849  001552  37A6               	rlcf	??_doDM& (0+255),f,b
  1850  001554  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1851  001556  0E39               	movlw	57
  1852  001558  25A6               	addwf	??_doDM& (0+255),w,b
  1853  00155A  6E08               	movwf	?_readEEPROM,c
  1854  00155C  0E00               	movlw	0
  1855  00155E  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  1856  001560  6E09               	movwf	?_readEEPROM+1,c
  1857  001562  EC27  F018         	call	_readEEPROM	;wreg free
  1858  001566  0100               	movlb	0	; () banked
  1859  001568  6FB3               	movwf	doDM@dmflags& (0+255),b
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 853: if ( dmflags & 0x80 ) {
  1863  00156A  AFB3               	btfss	doDM@dmflags& (0+255),7,b
  1864  00156C  D136               	goto	l7451
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;main.c: 856: if ( ( dmflags & 0x40 ) &&
  1868                           ;main.c: 857: ( vscp_imsg.oaddr != readEEPROM( 0x21 + 23 +
  1869                           ;main.c: 858: 0 + (8 * i) ) ) ) {
  1870  00156E  ADB3               	btfss	doDM@dmflags& (0+255),6,b
  1871  001570  D018               	goto	l289
  1872                           
  1873                           ; BSR set to: 0
  1874  001572  51B4               	movf	doDM@i& (0+255),w,b
  1875  001574  6FA6               	movwf	??_doDM& (0+255),b
  1876  001576  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1877  001578  90D8               	bcf	status,0,c
  1878  00157A  37A6               	rlcf	??_doDM& (0+255),f,b
  1879  00157C  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1880  00157E  90D8               	bcf	status,0,c
  1881  001580  37A6               	rlcf	??_doDM& (0+255),f,b
  1882  001582  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1883  001584  90D8               	bcf	status,0,c
  1884  001586  37A6               	rlcf	??_doDM& (0+255),f,b
  1885  001588  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1886  00158A  0E38               	movlw	56
  1887  00158C  25A6               	addwf	??_doDM& (0+255),w,b
  1888  00158E  6E08               	movwf	?_readEEPROM,c
  1889  001590  0E00               	movlw	0
  1890  001592  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  1891  001594  6E09               	movwf	?_readEEPROM+1,c
  1892  001596  EC27  F018         	call	_readEEPROM	;wreg free
  1893  00159A  0100               	movlb	0	; () banked
  1894  00159C  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  1895  00159E  E001 D11C          	bnz	l7451
  1896  0015A2                     l289:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 860: }
  1900                           ;main.c: 863: if ( dmflags & 0x10 ) {
  1901  0015A2  A9B3               	btfss	doDM@dmflags& (0+255),4,b
  1902  0015A4  D00B               	goto	l291
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 864: if ( 255 != vscp_imsg.data[ 1 ] ) {
  1906  0015A6  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  1907  0015A8  E009               	bz	l291
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 865: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  1911  0015AA  6A09               	clrf	?_readEEPROM+1,c
  1912  0015AC  0E21               	movlw	33
  1913  0015AE  6E08               	movwf	?_readEEPROM,c
  1914  0015B0  EC27  F018         	call	_readEEPROM	;wreg free
  1915  0015B4  0100               	movlb	0	; () banked
  1916  0015B6  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  1917  0015B8  E001 D10F          	bnz	l7451
  1918  0015BC                     l291:
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 867: }
  1922                           ;main.c: 868: }
  1923                           ;main.c: 869: }
  1924                           ;main.c: 872: if ( dmflags & 0x08 ) {
  1925  0015BC  A7B3               	btfss	doDM@dmflags& (0+255),3,b
  1926  0015BE  D00B               	goto	l7419
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;main.c: 873: if ( 255 != vscp_imsg.data[ 1 ] ) {
  1930  0015C0  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  1931  0015C2  E009               	bz	l7419
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;main.c: 874: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  1935  0015C4  6A09               	clrf	?_readEEPROM+1,c
  1936  0015C6  0E21               	movlw	33
  1937  0015C8  6E08               	movwf	?_readEEPROM,c
  1938  0015CA  EC27  F018         	call	_readEEPROM	;wreg free
  1939  0015CE  0100               	movlb	0	; () banked
  1940  0015D0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  1941  0015D2  E001 D102          	bnz	l7451
  1942  0015D6                     l7419:
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 876: }
  1946                           ;main.c: 877: }
  1947                           ;main.c: 878: }
  1948                           ;main.c: 880: class_filter = ( dmflags & 0x01)*256 +
  1949                           ;main.c: 881: readEEPROM( 0x21 + 23 +
  1950                           ;main.c: 882: 0 +
  1951                           ;main.c: 883: (8 * i) +
  1952                           ;main.c: 884: 3);
  1953  0015D6  51B4               	movf	doDM@i& (0+255),w,b
  1954  0015D8  0D08               	mullw	8
  1955  0015DA  0E3B               	movlw	59
  1956  0015DC  24F3               	addwf	prodl,w,c
  1957  0015DE  6E08               	movwf	?_readEEPROM,c
  1958  0015E0  0E00               	movlw	0
  1959  0015E2  20F4               	addwfc	prodh,w,c
  1960  0015E4  6E09               	movwf	?_readEEPROM+1,c
  1961  0015E6  EC27  F018         	call	_readEEPROM	;wreg free
  1962  0015EA  0100               	movlb	0	; () banked
  1963  0015EC  6FA6               	movwf	??_doDM& (0+255),b
  1964  0015EE  51B3               	movf	doDM@dmflags& (0+255),w,b
  1965  0015F0  0B01               	andlw	1
  1966  0015F2  6FA8               	movwf	(??_doDM+2)& (0+255),b
  1967  0015F4  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1968  0015F6  51A6               	movf	??_doDM& (0+255),w,b
  1969  0015F8  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  1970  0015FA  6FA9               	movwf	doDM@class_filter& (0+255),b
  1971  0015FC  0E00               	movlw	0
  1972  0015FE  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  1973  001600  6FAA               	movwf	(doDM@class_filter+1)& (0+255),b
  1974                           
  1975                           ;main.c: 885: class_mask = ( dmflags & 0x02)*256 +
  1976                           ;main.c: 886: readEEPROM( 0x21 + 23 +
  1977                           ;main.c: 887: 0 +
  1978                           ;main.c: 888: (8 * i) +
  1979                           ;main.c: 889: 2);
  1980  001602  51B4               	movf	doDM@i& (0+255),w,b
  1981  001604  0D08               	mullw	8
  1982  001606  0E3A               	movlw	58
  1983  001608  24F3               	addwf	prodl,w,c
  1984  00160A  6E08               	movwf	?_readEEPROM,c
  1985  00160C  0E00               	movlw	0
  1986  00160E  20F4               	addwfc	prodh,w,c
  1987  001610  6E09               	movwf	?_readEEPROM+1,c
  1988  001612  EC27  F018         	call	_readEEPROM	;wreg free
  1989  001616  0100               	movlb	0	; () banked
  1990  001618  6FA6               	movwf	??_doDM& (0+255),b
  1991  00161A  51B3               	movf	doDM@dmflags& (0+255),w,b
  1992  00161C  0B02               	andlw	2
  1993  00161E  6FA8               	movwf	(??_doDM+2)& (0+255),b
  1994  001620  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1995  001622  51A6               	movf	??_doDM& (0+255),w,b
  1996  001624  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  1997  001626  6FAB               	movwf	doDM@class_mask& (0+255),b
  1998  001628  0E00               	movlw	0
  1999  00162A  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  2000  00162C  6FAC               	movwf	(doDM@class_mask+1)& (0+255),b
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 890: type_filter = readEEPROM( 0x21 + 23 +
  2004                           ;main.c: 891: 0 +
  2005                           ;main.c: 892: (8 * i) +
  2006                           ;main.c: 893: 5);
  2007  00162E  51B4               	movf	doDM@i& (0+255),w,b
  2008  001630  6FA6               	movwf	??_doDM& (0+255),b
  2009  001632  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2010  001634  90D8               	bcf	status,0,c
  2011  001636  37A6               	rlcf	??_doDM& (0+255),f,b
  2012  001638  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2013  00163A  90D8               	bcf	status,0,c
  2014  00163C  37A6               	rlcf	??_doDM& (0+255),f,b
  2015  00163E  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2016  001640  90D8               	bcf	status,0,c
  2017  001642  37A6               	rlcf	??_doDM& (0+255),f,b
  2018  001644  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2019  001646  0E3D               	movlw	61
  2020  001648  25A6               	addwf	??_doDM& (0+255),w,b
  2021  00164A  6E08               	movwf	?_readEEPROM,c
  2022  00164C  0E00               	movlw	0
  2023  00164E  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2024  001650  6E09               	movwf	?_readEEPROM+1,c
  2025  001652  EC27  F018         	call	_readEEPROM	;wreg free
  2026  001656  0100               	movlb	0	; () banked
  2027  001658  6FAD               	movwf	doDM@type_filter& (0+255),b
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;main.c: 894: type_mask = readEEPROM( 0x21 + 23 +
  2031                           ;main.c: 895: 0 +
  2032                           ;main.c: 896: (8 * i) +
  2033                           ;main.c: 897: 4);
  2034  00165A  51B4               	movf	doDM@i& (0+255),w,b
  2035  00165C  6FA6               	movwf	??_doDM& (0+255),b
  2036  00165E  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2037  001660  90D8               	bcf	status,0,c
  2038  001662  37A6               	rlcf	??_doDM& (0+255),f,b
  2039  001664  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2040  001666  90D8               	bcf	status,0,c
  2041  001668  37A6               	rlcf	??_doDM& (0+255),f,b
  2042  00166A  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2043  00166C  90D8               	bcf	status,0,c
  2044  00166E  37A6               	rlcf	??_doDM& (0+255),f,b
  2045  001670  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2046  001672  0E3C               	movlw	60
  2047  001674  25A6               	addwf	??_doDM& (0+255),w,b
  2048  001676  6E08               	movwf	?_readEEPROM,c
  2049  001678  0E00               	movlw	0
  2050  00167A  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2051  00167C  6E09               	movwf	?_readEEPROM+1,c
  2052  00167E  EC27  F018         	call	_readEEPROM	;wreg free
  2053  001682  0100               	movlb	0	; () banked
  2054  001684  6FAE               	movwf	doDM@type_mask& (0+255),b
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;main.c: 899: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2058                           ;main.c: 900: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2059  001686  EE20  F077         	lfsr	2,_vscp_imsg+2
  2060  00168A  CFDE F0A6          	movff	postinc2,??_doDM
  2061  00168E  CFDD F0A7          	movff	postdec2,??_doDM+1
  2062  001692  51A9               	movf	doDM@class_filter& (0+255),w,b
  2063  001694  1BA6               	xorwf	??_doDM& (0+255),f,b
  2064  001696  51AA               	movf	(doDM@class_filter+1)& (0+255),w,b
  2065  001698  1BA7               	xorwf	(??_doDM+1)& (0+255),f,b
  2066  00169A  51AB               	movf	doDM@class_mask& (0+255),w,b
  2067  00169C  17A6               	andwf	??_doDM& (0+255),f,b
  2068  00169E  51AC               	movf	(doDM@class_mask+1)& (0+255),w,b
  2069  0016A0  17A7               	andwf	(??_doDM+1)& (0+255),f,b
  2070  0016A2  51A7               	movf	(??_doDM+1)& (0+255),w,b
  2071  0016A4  11A6               	iorwf	??_doDM& (0+255),w,b
  2072  0016A6  E001 D098          	bnz	l7451
  2073                           
  2074                           ; BSR set to: 0
  2075  0016AA  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2076  0016AC  19AD               	xorwf	doDM@type_filter& (0+255),w,b
  2077  0016AE  15AE               	andwf	doDM@type_mask& (0+255),w,b
  2078  0016B0  E075               	bz	l7449
  2079  0016B2  D093               	goto	l7451
  2080  0016B4                     l7431:
  2081                           
  2082                           ;main.c: 911: actionSet( dmflags,
  2083                           ;main.c: 912: readEEPROM( 0x21 + 23 +
  2084                           ;main.c: 913: 0 + (8 * i) +
  2085                           ;main.c: 914: 7 ) );
  2086  0016B4  0100               	movlb	0	; () banked
  2087  0016B6  51B4               	movf	doDM@i& (0+255),w,b
  2088  0016B8  6FA6               	movwf	??_doDM& (0+255),b
  2089  0016BA  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2090  0016BC  90D8               	bcf	status,0,c
  2091  0016BE  37A6               	rlcf	??_doDM& (0+255),f,b
  2092  0016C0  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2093  0016C2  90D8               	bcf	status,0,c
  2094  0016C4  37A6               	rlcf	??_doDM& (0+255),f,b
  2095  0016C6  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2096  0016C8  90D8               	bcf	status,0,c
  2097  0016CA  37A6               	rlcf	??_doDM& (0+255),f,b
  2098  0016CC  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2099  0016CE  0E3F               	movlw	63
  2100  0016D0  25A6               	addwf	??_doDM& (0+255),w,b
  2101  0016D2  6E08               	movwf	?_readEEPROM,c
  2102  0016D4  0E00               	movlw	0
  2103  0016D6  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2104  0016D8  6E09               	movwf	?_readEEPROM+1,c
  2105  0016DA  EC27  F018         	call	_readEEPROM	;wreg free
  2106  0016DE  0100               	movlb	0	; () banked
  2107  0016E0  6FAF               	movwf	_doDM$1986& (0+255),b
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;main.c: 911: actionSet( dmflags,
  2111                           ;main.c: 912: readEEPROM( 0x21 + 23 +
  2112                           ;main.c: 913: 0 + (8 * i) +
  2113                           ;main.c: 914: 7 ) );
  2114  0016E2  C0AF  F04F         	movff	_doDM$1986,?_actionSet
  2115  0016E6  51B3               	movf	doDM@dmflags& (0+255),w,b
  2116  0016E8  EC06  F013         	call	_actionSet
  2117                           
  2118                           ;main.c: 915: break;
  2119  0016EC  D076               	goto	l7451
  2120  0016EE                     l7435:
  2121                           
  2122                           ;main.c: 918: actionClr( dmflags,
  2123                           ;main.c: 919: readEEPROM( 0x21 + 23 +
  2124                           ;main.c: 920: 0 + (8 * i) +
  2125                           ;main.c: 921: 7 ) );
  2126  0016EE  0100               	movlb	0	; () banked
  2127  0016F0  51B4               	movf	doDM@i& (0+255),w,b
  2128  0016F2  6FA6               	movwf	??_doDM& (0+255),b
  2129  0016F4  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2130  0016F6  90D8               	bcf	status,0,c
  2131  0016F8  37A6               	rlcf	??_doDM& (0+255),f,b
  2132  0016FA  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2133  0016FC  90D8               	bcf	status,0,c
  2134  0016FE  37A6               	rlcf	??_doDM& (0+255),f,b
  2135  001700  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2136  001702  90D8               	bcf	status,0,c
  2137  001704  37A6               	rlcf	??_doDM& (0+255),f,b
  2138  001706  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2139  001708  0E3F               	movlw	63
  2140  00170A  25A6               	addwf	??_doDM& (0+255),w,b
  2141  00170C  6E08               	movwf	?_readEEPROM,c
  2142  00170E  0E00               	movlw	0
  2143  001710  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2144  001712  6E09               	movwf	?_readEEPROM+1,c
  2145  001714  EC27  F018         	call	_readEEPROM	;wreg free
  2146  001718  0100               	movlb	0	; () banked
  2147  00171A  6FB0               	movwf	_doDM$1987& (0+255),b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;main.c: 918: actionClr( dmflags,
  2151                           ;main.c: 919: readEEPROM( 0x21 + 23 +
  2152                           ;main.c: 920: 0 + (8 * i) +
  2153                           ;main.c: 921: 7 ) );
  2154  00171C  C0B0  F04F         	movff	_doDM$1987,?_actionClr
  2155  001720  51B3               	movf	doDM@dmflags& (0+255),w,b
  2156  001722  EC9E  F012         	call	_actionClr
  2157                           
  2158                           ;main.c: 922: break;
  2159  001726  D059               	goto	l7451
  2160  001728                     l7439:
  2161                           
  2162                           ;main.c: 925: actionSetAll( dmflags,
  2163                           ;main.c: 926: readEEPROM( 0x21 + 23 +
  2164                           ;main.c: 927: 0 + (8 * i) +
  2165                           ;main.c: 928: 7 ) );
  2166  001728  0100               	movlb	0	; () banked
  2167  00172A  51B4               	movf	doDM@i& (0+255),w,b
  2168  00172C  6FA6               	movwf	??_doDM& (0+255),b
  2169  00172E  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2170  001730  90D8               	bcf	status,0,c
  2171  001732  37A6               	rlcf	??_doDM& (0+255),f,b
  2172  001734  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2173  001736  90D8               	bcf	status,0,c
  2174  001738  37A6               	rlcf	??_doDM& (0+255),f,b
  2175  00173A  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2176  00173C  90D8               	bcf	status,0,c
  2177  00173E  37A6               	rlcf	??_doDM& (0+255),f,b
  2178  001740  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2179  001742  0E3F               	movlw	63
  2180  001744  25A6               	addwf	??_doDM& (0+255),w,b
  2181  001746  6E08               	movwf	?_readEEPROM,c
  2182  001748  0E00               	movlw	0
  2183  00174A  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2184  00174C  6E09               	movwf	?_readEEPROM+1,c
  2185  00174E  EC27  F018         	call	_readEEPROM	;wreg free
  2186  001752  0100               	movlb	0	; () banked
  2187  001754  6FB1               	movwf	_doDM$1988& (0+255),b
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;main.c: 925: actionSetAll( dmflags,
  2191                           ;main.c: 926: readEEPROM( 0x21 + 23 +
  2192                           ;main.c: 927: 0 + (8 * i) +
  2193                           ;main.c: 928: 7 ) );
  2194  001756  C0B1  F04F         	movff	_doDM$1988,?_actionSetAll
  2195  00175A  51B3               	movf	doDM@dmflags& (0+255),w,b
  2196  00175C  EC70  F016         	call	_actionSetAll
  2197                           
  2198                           ;main.c: 929: break;
  2199  001760  D03C               	goto	l7451
  2200  001762                     l7443:
  2201                           
  2202                           ;main.c: 932: actionClrAll( dmflags,
  2203                           ;main.c: 933: readEEPROM( 0x21 + 23 +
  2204                           ;main.c: 934: 0 + (8 * i) +
  2205                           ;main.c: 935: 7 ) );
  2206  001762  0100               	movlb	0	; () banked
  2207  001764  51B4               	movf	doDM@i& (0+255),w,b
  2208  001766  6FA6               	movwf	??_doDM& (0+255),b
  2209  001768  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2210  00176A  90D8               	bcf	status,0,c
  2211  00176C  37A6               	rlcf	??_doDM& (0+255),f,b
  2212  00176E  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2213  001770  90D8               	bcf	status,0,c
  2214  001772  37A6               	rlcf	??_doDM& (0+255),f,b
  2215  001774  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2216  001776  90D8               	bcf	status,0,c
  2217  001778  37A6               	rlcf	??_doDM& (0+255),f,b
  2218  00177A  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2219  00177C  0E3F               	movlw	63
  2220  00177E  25A6               	addwf	??_doDM& (0+255),w,b
  2221  001780  6E08               	movwf	?_readEEPROM,c
  2222  001782  0E00               	movlw	0
  2223  001784  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2224  001786  6E09               	movwf	?_readEEPROM+1,c
  2225  001788  EC27  F018         	call	_readEEPROM	;wreg free
  2226  00178C  0100               	movlb	0	; () banked
  2227  00178E  6FB2               	movwf	_doDM$1989& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;main.c: 932: actionClrAll( dmflags,
  2231                           ;main.c: 933: readEEPROM( 0x21 + 23 +
  2232                           ;main.c: 934: 0 + (8 * i) +
  2233                           ;main.c: 935: 7 ) );
  2234  001790  C0B2  F04F         	movff	_doDM$1989,?_actionClrAll
  2235  001794  51B3               	movf	doDM@dmflags& (0+255),w,b
  2236  001796  EC58  F016         	call	_actionClrAll
  2237                           
  2238                           ;main.c: 936: break;
  2239  00179A  D01F               	goto	l7451
  2240  00179C                     l7449:
  2241                           
  2242                           ; BSR set to: 0
  2243  00179C  51B4               	movf	doDM@i& (0+255),w,b
  2244  00179E  6FA6               	movwf	??_doDM& (0+255),b
  2245  0017A0  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2246  0017A2  90D8               	bcf	status,0,c
  2247  0017A4  37A6               	rlcf	??_doDM& (0+255),f,b
  2248  0017A6  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2249  0017A8  90D8               	bcf	status,0,c
  2250  0017AA  37A6               	rlcf	??_doDM& (0+255),f,b
  2251  0017AC  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2252  0017AE  90D8               	bcf	status,0,c
  2253  0017B0  37A6               	rlcf	??_doDM& (0+255),f,b
  2254  0017B2  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2255  0017B4  0E3E               	movlw	62
  2256  0017B6  25A6               	addwf	??_doDM& (0+255),w,b
  2257  0017B8  6E08               	movwf	?_readEEPROM,c
  2258  0017BA  0E00               	movlw	0
  2259  0017BC  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2260  0017BE  6E09               	movwf	?_readEEPROM+1,c
  2261  0017C0  EC27  F018         	call	_readEEPROM	;wreg free
  2262                           
  2263                           ; Switch size 1, requested type "speed"
  2264                           ; Number of cases is 5, Range of values is 0 to 4
  2265                           ; switch strategies available:
  2266                           ; Name         Instructions Cycles
  2267                           ; simple_byte           16     9 (average)
  2268                           ;	Chosen strategy is simple_byte
  2269  0017C4  0A00               	xorlw	0	; case 0
  2270  0017C6  E009               	bz	l7451
  2271  0017C8  0A01               	xorlw	1	; case 1
  2272  0017CA  E101 D773          	bz	l7431
  2273  0017CE  0A03               	xorlw	3	; case 2
  2274  0017D0  E08E               	bz	l7435
  2275  0017D2  0A01               	xorlw	1	; case 3
  2276  0017D4  E0A9               	bz	l7439
  2277  0017D6  0A07               	xorlw	7	; case 4
  2278  0017D8  E0C4               	bz	l7443
  2279  0017DA                     l7451:
  2280  0017DA  0100               	movlb	0	; () banked
  2281  0017DC  2BB4               	incf	doDM@i& (0+255),f,b
  2282                           
  2283                           ; BSR set to: 0
  2284  0017DE  0E07               	movlw	7
  2285  0017E0  65B4               	cpfsgt	doDM@i& (0+255),b
  2286  0017E2  D6AD               	goto	l7397
  2287  0017E4  0C07               	retlw	7
  2288  0017E6                     __end_of_doDM:
  2289                           	opt stack 0
  2290                           prodh	equ	0xFF4
  2291                           prodl	equ	0xFF3
  2292                           postinc0	equ	0xFEE
  2293                           wreg	equ	0xFE8
  2294                           postinc2	equ	0xFDE
  2295                           postdec2	equ	0xFDD
  2296                           status	equ	0xFD8
  2297                           
  2298 ;; *************** function _actionClrAll *****************
  2299 ;; Defined at:
  2300 ;;		line 1179 in file "../main.c"
  2301 ;; Parameters:    Size  Location     Type
  2302 ;;  dmflags         1    wreg     unsigned char 
  2303 ;;  param           1   78[COMRAM] unsigned char 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  dmflags         1    0[COMRAM] unsigned char 
  2306 ;;  i               2   79[COMRAM] int 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;		None               void
  2309 ;; Registers used:
  2310 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : F/0
  2313 ;;		On exit  : F/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2316 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2320 ;;Total ram usage:        3 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    7
  2323 ;; This function calls:
  2324 ;;		_SendInformationEvent
  2325 ;; This function is called by:
  2326 ;;		_doDM
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text9
  2331  002CB0                     __ptext9:
  2332                           	opt stack 0
  2333  002CB0                     _actionClrAll:
  2334                           	opt stack 22
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 1180: PORTA = 0x00;
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;incstack = 0
  2341                           ;incstack = 0
  2342  002CB0  6A80               	clrf	3968,c	;volatile
  2343                           
  2344                           ;main.c: 1181: PORTB = 0x00;
  2345  002CB2  6A81               	clrf	3969,c	;volatile
  2346                           
  2347                           ;main.c: 1182: PORTC = 0x00;
  2348  002CB4  6A82               	clrf	3970,c	;volatile
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;main.c: 1184: for ( int i=3; i<21; i++ ) {
  2352  002CB6  6A51               	clrf	actionClrAll@i+1,c
  2353  002CB8  0E03               	movlw	3
  2354  002CBA  6E50               	movwf	actionClrAll@i,c
  2355  002CBC                     l6485:
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 1185: SendInformationEvent( i,
  2359                           ;main.c: 1186: 20,
  2360                           ;main.c: 1187: 4 );
  2361  002CBC  0E14               	movlw	20
  2362  002CBE  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2363  002CC0  0E04               	movlw	4
  2364  002CC2  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2365  002CC4  5050               	movf	actionClrAll@i,w,c
  2366  002CC6  EC88  F015         	call	_SendInformationEvent
  2367                           
  2368                           ; BSR set to: 0
  2369  002CCA  4A50               	infsnz	actionClrAll@i,f,c
  2370  002CCC  2A51               	incf	actionClrAll@i+1,f,c
  2371                           
  2372                           ; BSR set to: 0
  2373  002CCE  5051               	movf	actionClrAll@i+1,w,c
  2374  002CD0  0A80               	xorlw	128
  2375  002CD2  0F80               	addlw	-128
  2376  002CD4  0E15               	movlw	21
  2377  002CD6  B4D8               	btfsc	status,2,c
  2378  002CD8  5C50               	subwf	actionClrAll@i,w,c
  2379  002CDA  B0D8               	btfsc	status,0,c
  2380  002CDC  0012               	return	
  2381  002CDE  D7EE               	goto	l6485
  2382  002CE0                     __end_of_actionClrAll:
  2383                           	opt stack 0
  2384                           prodh	equ	0xFF4
  2385                           prodl	equ	0xFF3
  2386                           postinc0	equ	0xFEE
  2387                           wreg	equ	0xFE8
  2388                           postinc2	equ	0xFDE
  2389                           postdec2	equ	0xFDD
  2390                           status	equ	0xFD8
  2391                           
  2392 ;; *************** function _actionSetAll *****************
  2393 ;; Defined at:
  2394 ;;		line 1160 in file "../main.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  dmflags         1    wreg     unsigned char 
  2397 ;;  param           1   78[COMRAM] unsigned char 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  dmflags         1    0[COMRAM] unsigned char 
  2400 ;;  i               2   79[COMRAM] int 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;		None               void
  2403 ;; Registers used:
  2404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : F/0
  2407 ;;		On exit  : F/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2410 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2411 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2413 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2414 ;;Total ram usage:        3 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    7
  2417 ;; This function calls:
  2418 ;;		_SendInformationEvent
  2419 ;; This function is called by:
  2420 ;;		_doDM
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text10
  2425  002CE0                     __ptext10:
  2426                           	opt stack 0
  2427  002CE0                     _actionSetAll:
  2428                           	opt stack 22
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;main.c: 1161: PORTA = 0xff;
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;incstack = 0
  2435                           ;incstack = 0
  2436  002CE0  6880               	setf	3968,c	;volatile
  2437                           
  2438                           ;main.c: 1162: PORTB = 0xff;
  2439  002CE2  6881               	setf	3969,c	;volatile
  2440                           
  2441                           ;main.c: 1163: PORTC = 0xff;
  2442  002CE4  6882               	setf	3970,c	;volatile
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;main.c: 1165: for ( int i=3; i<21; i++ ) {
  2446  002CE6  6A51               	clrf	actionSetAll@i+1,c
  2447  002CE8  0E03               	movlw	3
  2448  002CEA  6E50               	movwf	actionSetAll@i,c
  2449  002CEC                     l6471:
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 1166: SendInformationEvent( i,
  2453                           ;main.c: 1167: 20,
  2454                           ;main.c: 1168: 3 );
  2455  002CEC  0E14               	movlw	20
  2456  002CEE  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2457  002CF0  0E03               	movlw	3
  2458  002CF2  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2459  002CF4  5050               	movf	actionSetAll@i,w,c
  2460  002CF6  EC88  F015         	call	_SendInformationEvent
  2461                           
  2462                           ; BSR set to: 0
  2463  002CFA  4A50               	infsnz	actionSetAll@i,f,c
  2464  002CFC  2A51               	incf	actionSetAll@i+1,f,c
  2465                           
  2466                           ; BSR set to: 0
  2467  002CFE  5051               	movf	actionSetAll@i+1,w,c
  2468  002D00  0A80               	xorlw	128
  2469  002D02  0F80               	addlw	-128
  2470  002D04  0E15               	movlw	21
  2471  002D06  B4D8               	btfsc	status,2,c
  2472  002D08  5C50               	subwf	actionSetAll@i,w,c
  2473  002D0A  B0D8               	btfsc	status,0,c
  2474  002D0C  0012               	return	
  2475  002D0E  D7EE               	goto	l6471
  2476  002D10                     __end_of_actionSetAll:
  2477                           	opt stack 0
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           postinc2	equ	0xFDE
  2483                           postdec2	equ	0xFDD
  2484                           status	equ	0xFD8
  2485                           
  2486 ;; *************** function _actionClr *****************
  2487 ;; Defined at:
  2488 ;;		line 1056 in file "../main.c"
  2489 ;; Parameters:    Size  Location     Type
  2490 ;;  dmflags         1    wreg     unsigned char 
  2491 ;;  param           1   78[COMRAM] unsigned char 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  dmflags         1    0[COMRAM] unsigned char 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : F/0
  2500 ;;		On exit  : F/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2503 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2506 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2507 ;;Total ram usage:        1 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    7
  2510 ;; This function calls:
  2511 ;;		_readEEPROM
  2512 ;;		_SendInformationEvent
  2513 ;; This function is called by:
  2514 ;;		_doDM
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text11
  2519  00253C                     __ptext11:
  2520                           	opt stack 0
  2521  00253C                     _actionClr:
  2522                           	opt stack 22
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;main.c: 1058: if ( param & 0x80 ) {
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;incstack = 0
  2529                           ;incstack = 0
  2530  00253C  AE4F               	btfss	actionClr@param,7,c
  2531  00253E  D00D               	goto	l6449
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 1060: param &= 0x7f;
  2535  002540  9E4F               	bcf	actionClr@param,7,c
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 1062: if ( readEEPROM( 0x21 + 5 + (param - 3) )
  2539                           ;main.c: 1063: != vscp_imsg.data[ 2 ] ) {
  2540  002542  0E23               	movlw	35
  2541  002544  244F               	addwf	actionClr@param,w,c
  2542  002546  6E08               	movwf	?_readEEPROM,c
  2543  002548  6A09               	clrf	?_readEEPROM+1,c
  2544  00254A  0E00               	movlw	0
  2545  00254C  2209               	addwfc	?_readEEPROM+1,f,c
  2546  00254E  EC27  F018         	call	_readEEPROM	;wreg free
  2547  002552  0100               	movlb	0	; () banked
  2548  002554  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2549  002556  A4D8               	btfss	status,2,c
  2550  002558  0012               	return	
  2551  00255A                     l6449:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;main.c: 1065: }
  2555                           ;main.c: 1066: }
  2556                           ;main.c: 1068: if ( param < 3) return;
  2557  00255A  0E03               	movlw	3
  2558  00255C  604F               	cpfslt	actionClr@param,c
  2559  00255E  D001               	goto	l6453
  2560  002560  0C03               	retlw	3
  2561  002562                     l6453:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 1069: if ( param > 20 ) return;
  2565  002562  0E14               	movlw	20
  2566  002564  644F               	cpfsgt	actionClr@param,c
  2567  002566  D001               	goto	l6457
  2568  002568  0C14               	retlw	20
  2569  00256A                     l6457:
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 1071: SendInformationEvent( param,
  2573                           ;main.c: 1072: 20,
  2574                           ;main.c: 1073: 4 );
  2575  00256A  0E14               	movlw	20
  2576  00256C  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2577  00256E  0E04               	movlw	4
  2578  002570  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2579  002572  504F               	movf	actionClr@param,w,c
  2580  002574  EC88  F015         	call	_SendInformationEvent
  2581                           
  2582                           ;main.c: 1075: switch ( param ) {
  2583  002578  D020               	goto	l6461
  2584  00257A                     l340:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;main.c: 1078: PORTCbits.RC7 = 0;
  2588  00257A  9E82               	bcf	3970,7,c	;volatile
  2589                           
  2590                           ;main.c: 1079: break;
  2591  00257C  0012               	return	
  2592  00257E                     l342:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 1082: PORTCbits.RC6 = 0;
  2596  00257E  9C82               	bcf	3970,6,c	;volatile
  2597                           
  2598                           ;main.c: 1083: break;
  2599  002580  0012               	return	
  2600  002582                     l343:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 1086: PORTCbits.RC3 = 0;
  2604  002582  9682               	bcf	3970,3,c	;volatile
  2605                           
  2606                           ;main.c: 1087: break;
  2607  002584  0012               	return	
  2608  002586                     l344:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 1090: PORTCbits.RC4 = 0;
  2612  002586  9882               	bcf	3970,4,c	;volatile
  2613                           
  2614                           ;main.c: 1091: break;
  2615  002588  0012               	return	
  2616  00258A                     l345:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;main.c: 1094: PORTCbits.RC5 = 0;
  2620  00258A  9A82               	bcf	3970,5,c	;volatile
  2621                           
  2622                           ;main.c: 1095: break;
  2623  00258C  0012               	return	
  2624  00258E                     l346:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 1098: PORTAbits.RA0 = 0;
  2628  00258E  9080               	bcf	3968,0,c	;volatile
  2629                           
  2630                           ;main.c: 1099: break;
  2631  002590  0012               	return	
  2632  002592                     l347:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 1102: PORTAbits.RA1 = 0;
  2636  002592  9280               	bcf	3968,1,c	;volatile
  2637                           
  2638                           ;main.c: 1103: break;
  2639  002594  0012               	return	
  2640  002596                     l348:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 1106: PORTAbits.RA2 = 0;
  2644  002596  9480               	bcf	3968,2,c	;volatile
  2645                           
  2646                           ;main.c: 1107: break;
  2647  002598  0012               	return	
  2648  00259A                     l349:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 1110: PORTAbits.RA3 = 0;
  2652  00259A  9680               	bcf	3968,3,c	;volatile
  2653                           
  2654                           ;main.c: 1111: break;
  2655  00259C  0012               	return	
  2656  00259E                     l350:
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 1114: PORTAbits.RA5 = 0;
  2660  00259E  9A80               	bcf	3968,5,c	;volatile
  2661                           
  2662                           ;main.c: 1115: break;
  2663  0025A0  0012               	return	
  2664  0025A2                     l353:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 1126: PORTBbits.RB4 = 0;
  2668  0025A2  9881               	bcf	3969,4,c	;volatile
  2669                           
  2670                           ;main.c: 1127: break;
  2671  0025A4  0012               	return	
  2672  0025A6                     l354:
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 1130: PORTCbits.RC2 = 0;
  2676  0025A6  9482               	bcf	3970,2,c	;volatile
  2677                           
  2678                           ;main.c: 1131: break;
  2679  0025A8  0012               	return	
  2680  0025AA                     l355:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 1134: PORTBbits.RB1 = 0;
  2684  0025AA  9281               	bcf	3969,1,c	;volatile
  2685                           
  2686                           ;main.c: 1135: break;
  2687  0025AC  0012               	return	
  2688  0025AE                     l356:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 1138: PORTBbits.RB0 = 0;
  2692  0025AE  9081               	bcf	3969,0,c	;volatile
  2693                           
  2694                           ;main.c: 1139: break;
  2695  0025B0  0012               	return	
  2696  0025B2                     l357:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 1142: PORTBbits.RB6 = 0;
  2700  0025B2  9C81               	bcf	3969,6,c	;volatile
  2701                           
  2702                           ;main.c: 1143: break;
  2703  0025B4  0012               	return	
  2704  0025B6                     l358:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;main.c: 1146: PORTBbits.RB5 = 0;
  2708  0025B6  9A81               	bcf	3969,5,c	;volatile
  2709                           
  2710                           ;main.c: 1147: break;
  2711  0025B8  0012               	return	
  2712  0025BA                     l6461:
  2713                           
  2714                           ; BSR set to: 0
  2715  0025BA  504F               	movf	actionClr@param,w,c
  2716                           
  2717                           ; Switch size 1, requested type "speed"
  2718                           ; Number of cases is 18, Range of values is 3 to 20
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte           55    28 (average)
  2722                           ;	Chosen strategy is simple_byte
  2723  0025BC  0A03               	xorlw	3	; case 3
  2724  0025BE  E0DD               	bz	l340
  2725  0025C0  0A07               	xorlw	7	; case 4
  2726  0025C2  E0DD               	bz	l342
  2727  0025C4  0A01               	xorlw	1	; case 5
  2728  0025C6  E0DD               	bz	l343
  2729  0025C8  0A03               	xorlw	3	; case 6
  2730  0025CA  E0DD               	bz	l344
  2731  0025CC  0A01               	xorlw	1	; case 7
  2732  0025CE  E0DD               	bz	l345
  2733  0025D0  0A0F               	xorlw	15	; case 8
  2734  0025D2  E0DD               	bz	l346
  2735  0025D4  0A01               	xorlw	1	; case 9
  2736  0025D6  E0DD               	bz	l347
  2737  0025D8  0A03               	xorlw	3	; case 10
  2738  0025DA  E0DD               	bz	l348
  2739  0025DC  0A01               	xorlw	1	; case 11
  2740  0025DE  E0DD               	bz	l349
  2741  0025E0  0A07               	xorlw	7	; case 12
  2742  0025E2  E0DD               	bz	l350
  2743  0025E4  0A01               	xorlw	1	; case 13
  2744  0025E6  B4D8               	btfsc	status,2,c
  2745  0025E8  0012               	return	
  2746  0025EA  0A03               	xorlw	3	; case 14
  2747  0025EC  B4D8               	btfsc	status,2,c
  2748  0025EE  0012               	return	
  2749  0025F0  0A01               	xorlw	1	; case 15
  2750  0025F2  E0D7               	bz	l353
  2751  0025F4  0A1F               	xorlw	31	; case 16
  2752  0025F6  E0D7               	bz	l354
  2753  0025F8  0A01               	xorlw	1	; case 17
  2754  0025FA  E0D7               	bz	l355
  2755  0025FC  0A03               	xorlw	3	; case 18
  2756  0025FE  E0D7               	bz	l356
  2757  002600  0A01               	xorlw	1	; case 19
  2758  002602  E0D7               	bz	l357
  2759  002604  0A07               	xorlw	7	; case 20
  2760  002606  A4D8               	btfss	status,2,c
  2761  002608  0012               	return	
  2762  00260A  D7D5               	goto	l358
  2763  00260C                     __end_of_actionClr:
  2764                           	opt stack 0
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           postinc0	equ	0xFEE
  2768                           wreg	equ	0xFE8
  2769                           postinc2	equ	0xFDE
  2770                           postdec2	equ	0xFDD
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _actionSet *****************
  2774 ;; Defined at:
  2775 ;;		line 953 in file "../main.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  dmflags         1    wreg     unsigned char 
  2778 ;;  param           1   78[COMRAM] unsigned char 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  dmflags         1    0[COMRAM] unsigned char 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;		None               void
  2783 ;; Registers used:
  2784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : F/0
  2787 ;;		On exit  : F/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2790 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2793 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2794 ;;Total ram usage:        1 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    7
  2797 ;; This function calls:
  2798 ;;		_readEEPROM
  2799 ;;		_SendInformationEvent
  2800 ;; This function is called by:
  2801 ;;		_doDM
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805                           	psect	text12
  2806  00260C                     __ptext12:
  2807                           	opt stack 0
  2808  00260C                     _actionSet:
  2809                           	opt stack 22
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;main.c: 955: if ( param & 0x80 ) {
  2813                           
  2814                           ; BSR set to: 0
  2815                           ;incstack = 0
  2816                           ;incstack = 0
  2817  00260C  AE4F               	btfss	actionSet@param,7,c
  2818  00260E  D00D               	goto	l6427
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 957: param &= 0x7f;
  2822  002610  9E4F               	bcf	actionSet@param,7,c
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 959: if ( readEEPROM( 0x21 + 5 + (param - 3) )
  2826                           ;main.c: 960: != vscp_imsg.data[ 2 ] ) {
  2827  002612  0E23               	movlw	35
  2828  002614  244F               	addwf	actionSet@param,w,c
  2829  002616  6E08               	movwf	?_readEEPROM,c
  2830  002618  6A09               	clrf	?_readEEPROM+1,c
  2831  00261A  0E00               	movlw	0
  2832  00261C  2209               	addwfc	?_readEEPROM+1,f,c
  2833  00261E  EC27  F018         	call	_readEEPROM	;wreg free
  2834  002622  0100               	movlb	0	; () banked
  2835  002624  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2836  002626  A4D8               	btfss	status,2,c
  2837  002628  0012               	return	
  2838  00262A                     l6427:
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;main.c: 962: }
  2842                           ;main.c: 963: }
  2843                           ;main.c: 965: if ( param < 3) return;
  2844  00262A  0E03               	movlw	3
  2845  00262C  604F               	cpfslt	actionSet@param,c
  2846  00262E  D001               	goto	l6431
  2847  002630  0C03               	retlw	3
  2848  002632                     l6431:
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;main.c: 966: if ( param > 20 ) return;
  2852  002632  0E14               	movlw	20
  2853  002634  644F               	cpfsgt	actionSet@param,c
  2854  002636  D001               	goto	l6435
  2855  002638  0C14               	retlw	20
  2856  00263A                     l6435:
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;main.c: 968: SendInformationEvent( param,
  2860                           ;main.c: 969: 20,
  2861                           ;main.c: 970: 3 );
  2862  00263A  0E14               	movlw	20
  2863  00263C  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2864  00263E  0E03               	movlw	3
  2865  002640  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2866  002642  504F               	movf	actionSet@param,w,c
  2867  002644  EC88  F015         	call	_SendInformationEvent
  2868                           
  2869                           ;main.c: 972: switch ( param ) {
  2870  002648  D020               	goto	l6439
  2871  00264A                     l313:
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;main.c: 975: PORTCbits.RC7 = 1;
  2875  00264A  8E82               	bsf	3970,7,c	;volatile
  2876                           
  2877                           ;main.c: 976: break;
  2878  00264C  0012               	return	
  2879  00264E                     l315:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 979: PORTCbits.RC6 = 1;
  2883  00264E  8C82               	bsf	3970,6,c	;volatile
  2884                           
  2885                           ;main.c: 980: break;
  2886  002650  0012               	return	
  2887  002652                     l316:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;main.c: 983: PORTCbits.RC3 = 1;
  2891  002652  8682               	bsf	3970,3,c	;volatile
  2892                           
  2893                           ;main.c: 984: break;
  2894  002654  0012               	return	
  2895  002656                     l317:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;main.c: 987: PORTCbits.RC4 = 1;
  2899  002656  8882               	bsf	3970,4,c	;volatile
  2900                           
  2901                           ;main.c: 988: break;
  2902  002658  0012               	return	
  2903  00265A                     l318:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;main.c: 991: PORTCbits.RC5 = 1;
  2907  00265A  8A82               	bsf	3970,5,c	;volatile
  2908                           
  2909                           ;main.c: 992: break;
  2910  00265C  0012               	return	
  2911  00265E                     l319:
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;main.c: 995: PORTAbits.RA0 = 1;
  2915  00265E  8080               	bsf	3968,0,c	;volatile
  2916                           
  2917                           ;main.c: 996: break;
  2918  002660  0012               	return	
  2919  002662                     l320:
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 999: PORTAbits.RA1 = 1;
  2923  002662  8280               	bsf	3968,1,c	;volatile
  2924                           
  2925                           ;main.c: 1000: break;
  2926  002664  0012               	return	
  2927  002666                     l321:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;main.c: 1003: PORTAbits.RA2 = 1;
  2931  002666  8480               	bsf	3968,2,c	;volatile
  2932                           
  2933                           ;main.c: 1004: break;
  2934  002668  0012               	return	
  2935  00266A                     l322:
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;main.c: 1007: PORTAbits.RA3 = 1;
  2939  00266A  8680               	bsf	3968,3,c	;volatile
  2940                           
  2941                           ;main.c: 1008: break;
  2942  00266C  0012               	return	
  2943  00266E                     l323:
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;main.c: 1011: PORTAbits.RA5 = 1;
  2947  00266E  8A80               	bsf	3968,5,c	;volatile
  2948                           
  2949                           ;main.c: 1012: break;
  2950  002670  0012               	return	
  2951  002672                     l326:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;main.c: 1023: PORTBbits.RB4 = 1;
  2955  002672  8881               	bsf	3969,4,c	;volatile
  2956                           
  2957                           ;main.c: 1024: break;
  2958  002674  0012               	return	
  2959  002676                     l327:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 1027: PORTCbits.RC2 = 1;
  2963  002676  8482               	bsf	3970,2,c	;volatile
  2964                           
  2965                           ;main.c: 1028: break;
  2966  002678  0012               	return	
  2967  00267A                     l328:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 1031: PORTBbits.RB1 = 1;
  2971  00267A  8281               	bsf	3969,1,c	;volatile
  2972                           
  2973                           ;main.c: 1032: break;
  2974  00267C  0012               	return	
  2975  00267E                     l329:
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;main.c: 1035: PORTBbits.RB0 = 1;
  2979  00267E  8081               	bsf	3969,0,c	;volatile
  2980                           
  2981                           ;main.c: 1036: break;
  2982  002680  0012               	return	
  2983  002682                     l330:
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;main.c: 1039: PORTBbits.RB6 = 1;
  2987  002682  8C81               	bsf	3969,6,c	;volatile
  2988                           
  2989                           ;main.c: 1040: break;
  2990  002684  0012               	return	
  2991  002686                     l331:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;main.c: 1043: PORTBbits.RB5 = 1;
  2995  002686  8A81               	bsf	3969,5,c	;volatile
  2996                           
  2997                           ;main.c: 1044: break;
  2998  002688  0012               	return	
  2999  00268A                     l6439:
  3000                           
  3001                           ; BSR set to: 0
  3002  00268A  504F               	movf	actionSet@param,w,c
  3003                           
  3004                           ; Switch size 1, requested type "speed"
  3005                           ; Number of cases is 18, Range of values is 3 to 20
  3006                           ; switch strategies available:
  3007                           ; Name         Instructions Cycles
  3008                           ; simple_byte           55    28 (average)
  3009                           ;	Chosen strategy is simple_byte
  3010  00268C  0A03               	xorlw	3	; case 3
  3011  00268E  E0DD               	bz	l313
  3012  002690  0A07               	xorlw	7	; case 4
  3013  002692  E0DD               	bz	l315
  3014  002694  0A01               	xorlw	1	; case 5
  3015  002696  E0DD               	bz	l316
  3016  002698  0A03               	xorlw	3	; case 6
  3017  00269A  E0DD               	bz	l317
  3018  00269C  0A01               	xorlw	1	; case 7
  3019  00269E  E0DD               	bz	l318
  3020  0026A0  0A0F               	xorlw	15	; case 8
  3021  0026A2  E0DD               	bz	l319
  3022  0026A4  0A01               	xorlw	1	; case 9
  3023  0026A6  E0DD               	bz	l320
  3024  0026A8  0A03               	xorlw	3	; case 10
  3025  0026AA  E0DD               	bz	l321
  3026  0026AC  0A01               	xorlw	1	; case 11
  3027  0026AE  E0DD               	bz	l322
  3028  0026B0  0A07               	xorlw	7	; case 12
  3029  0026B2  E0DD               	bz	l323
  3030  0026B4  0A01               	xorlw	1	; case 13
  3031  0026B6  B4D8               	btfsc	status,2,c
  3032  0026B8  0012               	return	
  3033  0026BA  0A03               	xorlw	3	; case 14
  3034  0026BC  B4D8               	btfsc	status,2,c
  3035  0026BE  0012               	return	
  3036  0026C0  0A01               	xorlw	1	; case 15
  3037  0026C2  E0D7               	bz	l326
  3038  0026C4  0A1F               	xorlw	31	; case 16
  3039  0026C6  E0D7               	bz	l327
  3040  0026C8  0A01               	xorlw	1	; case 17
  3041  0026CA  E0D7               	bz	l328
  3042  0026CC  0A03               	xorlw	3	; case 18
  3043  0026CE  E0D7               	bz	l329
  3044  0026D0  0A01               	xorlw	1	; case 19
  3045  0026D2  E0D7               	bz	l330
  3046  0026D4  0A07               	xorlw	7	; case 20
  3047  0026D6  A4D8               	btfss	status,2,c
  3048  0026D8  0012               	return	
  3049  0026DA  D7D5               	goto	l331
  3050  0026DC                     __end_of_actionSet:
  3051                           	opt stack 0
  3052                           prodh	equ	0xFF4
  3053                           prodl	equ	0xFF3
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           status	equ	0xFD8
  3059                           
  3060 ;; *************** function _SendInformationEvent *****************
  3061 ;; Defined at:
  3062 ;;		line 813 in file "../main.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;  idx             1    wreg     unsigned char 
  3065 ;;  eventClass      1   20[BANK0 ] unsigned char 
  3066 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;  idx             1   77[COMRAM] unsigned char 
  3069 ;;  data            3   74[COMRAM] unsigned char [3]
  3070 ;; Return value:  Size  Location     Type
  3071 ;;		None               void
  3072 ;; Registers used:
  3073 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : F/0
  3076 ;;		On exit  : F/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3080 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3082 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3083 ;;Total ram usage:        6 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    6
  3086 ;; This function calls:
  3087 ;;		_readEEPROM
  3088 ;;		_sendVSCPFrame
  3089 ;; This function is called by:
  3090 ;;		_actionSet
  3091 ;;		_actionClr
  3092 ;;		_actionSetAll
  3093 ;;		_actionClrAll
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text13
  3098  002B10                     __ptext13:
  3099                           	opt stack 0
  3100  002B10                     _SendInformationEvent:
  3101                           	opt stack 22
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;incstack = 0
  3105                           ;incstack = 0
  3106                           ;SendInformationEvent@idx stored from wreg
  3107  002B10  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 814: uint8_t data[3];
  3111                           ;main.c: 815: idx -= 3;
  3112  002B14  0E03               	movlw	3
  3113  002B16  5E4E               	subwf	SendInformationEvent@idx,f,c
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 817: data[ 0 ] = idx;
  3117  002B18  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 818: data[ 1 ] = readEEPROM( 0x21 + 0 );
  3121  002B1C  6A09               	clrf	?_readEEPROM+1,c
  3122  002B1E  0E21               	movlw	33
  3123  002B20  6E08               	movwf	?_readEEPROM,c
  3124  002B22  EC27  F018         	call	_readEEPROM	;wreg free
  3125  002B26  6E4C               	movwf	SendInformationEvent@data+1,c
  3126                           
  3127                           ;main.c: 819: data[ 2 ] = readEEPROM( 0x21 + 5 + idx );
  3128  002B28  0E26               	movlw	38
  3129  002B2A  244E               	addwf	SendInformationEvent@idx,w,c
  3130  002B2C  6E08               	movwf	?_readEEPROM,c
  3131  002B2E  6A09               	clrf	?_readEEPROM+1,c
  3132  002B30  0E00               	movlw	0
  3133  002B32  2209               	addwfc	?_readEEPROM+1,f,c
  3134  002B34  EC27  F018         	call	_readEEPROM	;wreg free
  3135  002B38  6E4D               	movwf	SendInformationEvent@data+2,c
  3136                           
  3137                           ;main.c: 820: sendVSCPFrame( eventClass,
  3138                           ;main.c: 821: eventTypeId,
  3139                           ;main.c: 822: vscp_nickname,
  3140                           ;main.c: 823: 0x03,
  3141                           ;main.c: 824: 3,
  3142                           ;main.c: 825: data );
  3143  002B3A  0100               	movlb	0	; () banked
  3144  002B3C  C0A4  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  3145  002B40  6A40               	clrf	?_sendVSCPFrame+1,c
  3146  002B42  C0A5  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  3147  002B46  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3148  002B4A  0E03               	movlw	3
  3149  002B4C  6E43               	movwf	?_sendVSCPFrame+4,c
  3150  002B4E  6E44               	movwf	?_sendVSCPFrame+5,c
  3151  002B50  0E4B               	movlw	low SendInformationEvent@data
  3152  002B52  6E45               	movwf	?_sendVSCPFrame+6,c
  3153  002B54  0E00               	movlw	high SendInformationEvent@data
  3154  002B56  6E46               	movwf	?_sendVSCPFrame+7,c
  3155  002B58  0E0F               	movlw	15
  3156  002B5A  6E46               	movwf	?_sendVSCPFrame+7,c
  3157  002B5C  0E5F               	movlw	__accesstop+-1
  3158  002B5E  6445               	cpfsgt	?_sendVSCPFrame+6,c
  3159  002B60  6A46               	clrf	?_sendVSCPFrame+7,c
  3160  002B62  EFCB  F013         	goto	_sendVSCPFrame	;wreg free
  3161  002B66                     __end_of_SendInformationEvent:
  3162                           	opt stack 0
  3163                           prodh	equ	0xFF4
  3164                           prodl	equ	0xFF3
  3165                           postinc0	equ	0xFEE
  3166                           wreg	equ	0xFE8
  3167                           postinc2	equ	0xFDE
  3168                           postdec2	equ	0xFDD
  3169                           status	equ	0xFD8
  3170                           
  3171 ;; *************** function _vscp_handleProtocolEvent *****************
  3172 ;; Defined at:
  3173 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;  bytes           1   33[BANK0 ] unsigned char 
  3178 ;;  page_save       2   29[BANK0 ] unsigned short 
  3179 ;;  i               1   39[BANK0 ] unsigned char 
  3180 ;;  page_save       2   27[BANK0 ] unsigned short 
  3181 ;;  byte            1   43[BANK0 ] unsigned char 
  3182 ;;  bytes           1   41[BANK0 ] unsigned char 
  3183 ;;  cb              1   38[BANK0 ] unsigned char 
  3184 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3185 ;;  j               1   46[BANK0 ] unsigned char 
  3186 ;;  i               1   44[BANK0 ] unsigned char 
  3187 ;;  k               1   40[BANK0 ] unsigned char 
  3188 ;;  i               1   42[BANK0 ] unsigned char 
  3189 ;;  len             1   36[BANK0 ] unsigned char 
  3190 ;;  pos             1   35[BANK0 ] unsigned char 
  3191 ;;  i               1   45[BANK0 ] unsigned char 
  3192 ;;  len             1   34[BANK0 ] unsigned char 
  3193 ;;  pos             1   32[BANK0 ] unsigned char 
  3194 ;;  offset          1   31[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : F/0
  3201 ;;		On exit  : 0/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3205 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3206 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3207 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3208 ;;Total ram usage:       27 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    8
  3211 ;; This function calls:
  3212 ;;		_vscp_init
  3213 ;;		_vscp_readAppReg
  3214 ;;		_vscp_writeAppReg
  3215 ;;		_vscp_sendEvent
  3216 ;;		_vscp_getGUID
  3217 ;;		_vscp_getMDF_URL
  3218 ;;		_vscp_goBootloaderMode
  3219 ;;		_vscp_getMatrixInfo
  3220 ;;		_vscp_handleHeartbeat
  3221 ;;		_vscp_handleSetNickname
  3222 ;;		_vscp_handleDropNickname
  3223 ;;		_vscp_newNodeOnline
  3224 ;;		_vscp_readRegister
  3225 ;;		_vscp_readStdReg
  3226 ;;		_vscp_writeRegister
  3227 ;;		_vscp_writeStdReg
  3228 ;;		___lbmod
  3229 ;; This function is called by:
  3230 ;;		_main
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text14
  3235  000F22                     __ptext14:
  3236                           	opt stack 0
  3237  000F22                     _vscp_handleProtocolEvent:
  3238                           	opt stack 22
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  3242                           
  3243                           ; BSR set to: 0
  3244                           ;incstack = 0
  3245                           ;incstack = 0
  3246  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  3247  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3248  000F26  A4D8               	btfss	status,2,c
  3249  000F28  0012               	return	
  3250  000F2A  D2D1               	goto	l7381
  3251  000F2C                     l6969:
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  3255  000F2C  EFFD  F015         	goto	_vscp_handleHeartbeat	;wreg free
  3256  000F30                     l6971:
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  3260  000F30  EFB6  F016         	goto	_vscp_newNodeOnline	;wreg free
  3261  000F34                     l6973:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  3265  000F34  EF2B  F017         	goto	_vscp_handleSetNickname	;wreg free
  3266  000F38                     l6975:
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  3270  000F38  EF88  F016         	goto	_vscp_handleDropNickname	;wreg free
  3271  000F3C                     l6977:
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  3275                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3276  000F3C  5175               	movf	_vscp_imsg& (0+255),w,b
  3277  000F3E  0B0F               	andlw	15
  3278  000F40  0A02               	xorlw	2
  3279  000F42  A4D8               	btfss	status,2,c
  3280  000F44  0012               	return	
  3281                           
  3282                           ; BSR set to: 0
  3283  000F46  5170               	movf	_vscp_nickname& (0+255),w,b
  3284  000F48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3285  000F4C  62DF               	cpfseq	indf2,c
  3286  000F4E  0012               	return	
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  3290  000F50  0E80               	movlw	128
  3291  000F52  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3292  000F54  D011               	goto	l6997
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3296  000F56  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3297  000F58  EC7C  F014         	call	_vscp_readAppReg
  3298  000F5C                     L1:
  3299  000F5C  0100               	movlb	0	; () banked
  3300  000F5E  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3304  000F60  C07C  F088         	movff	_vscp_imsg+7,_vscp_omsg+5
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  3308  000F64  0E03               	movlw	3
  3309  000F66  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  3313  000F68  0E82               	movlw	130
  3314  000F6A  6F83               	movwf	_vscp_omsg& (0+255),b
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  3318  000F6C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3319  000F6E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  3323  000F70  0E0A               	movlw	10
  3324  000F72  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;vscp_firmware.c: 832: vscp_sendEvent();
  3328  000F74  EFF2  F016         	goto	_vscp_sendEvent	;wreg free
  3329  000F78                     l6997:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  3333                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3334  000F78  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3335  000F7A  ECEF  F00C         	call	_vscp_readStdReg
  3336  000F7E  D7EE               	goto	L1
  3337  000F80                     l7011:
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3341                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3342  000F80  5175               	movf	_vscp_imsg& (0+255),w,b
  3343  000F82  0B0F               	andlw	15
  3344  000F84  0A03               	xorlw	3
  3345  000F86  A4D8               	btfss	status,2,c
  3346  000F88  0012               	return	
  3347                           
  3348                           ; BSR set to: 0
  3349  000F8A  5170               	movf	_vscp_nickname& (0+255),w,b
  3350  000F8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3351  000F90  62DF               	cpfseq	indf2,c
  3352  000F92  0012               	return	
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  3356  000F94  0E80               	movlw	128
  3357  000F96  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3358  000F98  D006               	goto	l7031
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  3362                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3363  000F9A  C07D  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3364  000F9E  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3365  000FA0  EC98  F010         	call	_vscp_writeAppReg
  3366  000FA4  D7DB               	goto	L1
  3367  000FA6                     l7031:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  3371                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3372  000FA6  C07D  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3373  000FAA  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3374  000FAC  ECAF  F011         	call	_vscp_writeStdReg
  3375  000FB0  D7D5               	goto	L1
  3376  000FB2                     l7045:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3380                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3381                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3382                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3383                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3384                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3385                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3386  000FB2  5170               	movf	_vscp_nickname& (0+255),w,b
  3387  000FB4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3388  000FB8  62DF               	cpfseq	indf2,c
  3389  000FBA  0012               	return	
  3390                           
  3391                           ; BSR set to: 0
  3392  000FBC  0E00               	movlw	0
  3393  000FBE  EC0B  F018         	call	_vscp_getGUID
  3394  000FC2  0100               	movlb	0	; () banked
  3395  000FC4  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3396  000FC6  A4D8               	btfss	status,2,c
  3397  000FC8  0012               	return	
  3398                           
  3399                           ; BSR set to: 0
  3400  000FCA  0E03               	movlw	3
  3401  000FCC  EC0B  F018         	call	_vscp_getGUID
  3402  000FD0  0100               	movlb	0	; () banked
  3403  000FD2  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3404  000FD4  A4D8               	btfss	status,2,c
  3405  000FD6  0012               	return	
  3406                           
  3407                           ; BSR set to: 0
  3408  000FD8  0E05               	movlw	5
  3409  000FDA  EC0B  F018         	call	_vscp_getGUID
  3410  000FDE  0100               	movlb	0	; () banked
  3411  000FE0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3412  000FE2  A4D8               	btfss	status,2,c
  3413  000FE4  0012               	return	
  3414                           
  3415                           ; BSR set to: 0
  3416  000FE6  0E07               	movlw	7
  3417  000FE8  EC0B  F018         	call	_vscp_getGUID
  3418  000FEC  0100               	movlb	0	; () banked
  3419  000FEE  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3420  000FF0  A4D8               	btfss	status,2,c
  3421  000FF2  0012               	return	
  3422                           
  3423                           ; BSR set to: 0
  3424  000FF4  5053               	movf	_vscp_page_select+1,w,c
  3425  000FF6  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3426  000FF8  A4D8               	btfss	status,2,c
  3427  000FFA  0012               	return	
  3428                           
  3429                           ; BSR set to: 0
  3430  000FFC  5052               	movf	_vscp_page_select,w,c
  3431  000FFE  EE20  F082         	lfsr	2,_vscp_imsg+13
  3432  001002  62DF               	cpfseq	indf2,c
  3433  001004  0012               	return	
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3437  001006  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3438  001008  EFC7  F017         	goto	_vscp_goBootloaderMode
  3439  00100C                     l7061:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3443                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3444                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3445                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3446  00100C  0E00               	movlw	0
  3447  00100E  EC0B  F018         	call	_vscp_getGUID
  3448  001012  0100               	movlb	0	; () banked
  3449  001014  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3450  001016  E173               	bnz	l7105
  3451                           
  3452                           ; BSR set to: 0
  3453  001018  0E01               	movlw	1
  3454  00101A  EC0B  F018         	call	_vscp_getGUID
  3455  00101E  0100               	movlb	0	; () banked
  3456  001020  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3457  001022  E16D               	bnz	l7105
  3458                           
  3459                           ; BSR set to: 0
  3460  001024  0E02               	movlw	2
  3461  001026  EC0B  F018         	call	_vscp_getGUID
  3462  00102A  0100               	movlb	0	; () banked
  3463  00102C  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3464  00102E  E167               	bnz	l7105
  3465                           
  3466                           ; BSR set to: 0
  3467  001030  0E03               	movlw	3
  3468  001032  EC0B  F018         	call	_vscp_getGUID
  3469  001036  0100               	movlb	0	; () banked
  3470  001038  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3471  00103A  E161               	bnz	l7105
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  3475  00103C  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  3476  00103E  D05F               	goto	l7105
  3477  001040                     l7071:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3481                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3482                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3483                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3484  001040  0E04               	movlw	4
  3485  001042  EC0B  F018         	call	_vscp_getGUID
  3486  001046  0100               	movlb	0	; () banked
  3487  001048  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3488  00104A  E159               	bnz	l7105
  3489                           
  3490                           ; BSR set to: 0
  3491  00104C  0E05               	movlw	5
  3492  00104E  EC0B  F018         	call	_vscp_getGUID
  3493  001052  0100               	movlb	0	; () banked
  3494  001054  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3495  001056  E153               	bnz	l7105
  3496                           
  3497                           ; BSR set to: 0
  3498  001058  0E06               	movlw	6
  3499  00105A  EC0B  F018         	call	_vscp_getGUID
  3500  00105E  0100               	movlb	0	; () banked
  3501  001060  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3502  001062  E14D               	bnz	l7105
  3503                           
  3504                           ; BSR set to: 0
  3505  001064  0E07               	movlw	7
  3506  001066  EC0B  F018         	call	_vscp_getGUID
  3507  00106A  0100               	movlb	0	; () banked
  3508  00106C  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3509  00106E  E147               	bnz	l7105
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  3513  001070  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  3514  001072  D045               	goto	l7105
  3515  001074                     l7081:
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3519                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3520                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3521                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3522  001074  0E08               	movlw	8
  3523  001076  EC0B  F018         	call	_vscp_getGUID
  3524  00107A  0100               	movlb	0	; () banked
  3525  00107C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3526  00107E  E13F               	bnz	l7105
  3527                           
  3528                           ; BSR set to: 0
  3529  001080  0E09               	movlw	9
  3530  001082  EC0B  F018         	call	_vscp_getGUID
  3531  001086  0100               	movlb	0	; () banked
  3532  001088  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3533  00108A  E139               	bnz	l7105
  3534                           
  3535                           ; BSR set to: 0
  3536  00108C  0E0A               	movlw	10
  3537  00108E  EC0B  F018         	call	_vscp_getGUID
  3538  001092  0100               	movlb	0	; () banked
  3539  001094  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3540  001096  E133               	bnz	l7105
  3541                           
  3542                           ; BSR set to: 0
  3543  001098  0E0B               	movlw	11
  3544  00109A  EC0B  F018         	call	_vscp_getGUID
  3545  00109E  0100               	movlb	0	; () banked
  3546  0010A0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3547  0010A2  E12D               	bnz	l7105
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  3551  0010A4  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  3552  0010A6  D02B               	goto	l7105
  3553  0010A8                     l7091:
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3557                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3558                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3559                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3560  0010A8  0E0C               	movlw	12
  3561  0010AA  EC0B  F018         	call	_vscp_getGUID
  3562  0010AE  0100               	movlb	0	; () banked
  3563  0010B0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3564  0010B2  E125               	bnz	l7105
  3565                           
  3566                           ; BSR set to: 0
  3567  0010B4  0E0D               	movlw	13
  3568  0010B6  EC0B  F018         	call	_vscp_getGUID
  3569  0010BA  0100               	movlb	0	; () banked
  3570  0010BC  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3571  0010BE  E11F               	bnz	l7105
  3572                           
  3573                           ; BSR set to: 0
  3574  0010C0  0E0E               	movlw	14
  3575  0010C2  EC0B  F018         	call	_vscp_getGUID
  3576  0010C6  0100               	movlb	0	; () banked
  3577  0010C8  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3578  0010CA  E119               	bnz	l7105
  3579                           
  3580                           ; BSR set to: 0
  3581  0010CC  0E0F               	movlw	15
  3582  0010CE  EC0B  F018         	call	_vscp_getGUID
  3583  0010D2  0100               	movlb	0	; () banked
  3584  0010D4  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3585  0010D6  E113               	bnz	l7105
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  3589  0010D8  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  3590  0010DA  D011               	goto	l7105
  3591  0010DC                     l1014:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  3595  0010DC  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  3596                           
  3597                           ;vscp_firmware.c: 952: break;
  3598  0010DE  D00F               	goto	l7105
  3599  0010E0                     l7103:
  3600                           
  3601                           ; BSR set to: 0
  3602  0010E0  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3603  0010E2  0B0F               	andlw	15
  3604  0010E4  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3605  0010E6  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3606                           
  3607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3608                           ; Switch size 1, requested type "speed"
  3609                           ; Number of cases is 1, Range of values is 0 to 0
  3610                           ; switch strategies available:
  3611                           ; Name         Instructions Cycles
  3612                           ; simple_byte            4     3 (average)
  3613                           ;	Chosen strategy is simple_byte
  3614  0010E8  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3615  0010EA  E1F8               	bnz	l1014
  3616                           
  3617                           ; BSR set to: 0
  3618                           ; Switch size 1, requested type "speed"
  3619                           ; Number of cases is 4, Range of values is 0 to 3
  3620                           ; switch strategies available:
  3621                           ; Name         Instructions Cycles
  3622                           ; simple_byte           13     7 (average)
  3623                           ;	Chosen strategy is simple_byte
  3624  0010EC  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3625  0010EE  E08E               	bz	l7061
  3626  0010F0  0A01               	xorlw	1	; case 1
  3627  0010F2  E0A6               	bz	l7071
  3628  0010F4  0A03               	xorlw	3	; case 2
  3629  0010F6  E0BE               	bz	l7081
  3630  0010F8  0A01               	xorlw	1	; case 3
  3631  0010FA  E0D6               	bz	l7091
  3632  0010FC  D7EF               	goto	l1014
  3633  0010FE                     l7105:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3637  0010FE  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3638  001100  0BF0               	andlw	240
  3639  001102  0AF0               	xorlw	240
  3640  001104  B4D8               	btfsc	status,2,c
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;vscp_firmware.c: 957: vscp_init();
  3644  001106  ECDB  F015         	call	_vscp_init	;wreg free
  3645  00110A  0012               	return	
  3646  00110C                     l7109:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3650  00110C  5170               	movf	_vscp_nickname& (0+255),w,b
  3651  00110E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3652  001112  62DF               	cpfseq	indf2,c
  3653  001114  0012               	return	
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;vscp_firmware.c: 965: uint8_t i;
  3657                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  3658  001116  6BB0               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3659                           
  3660                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  3661  001118  C07C  F0AF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3662                           
  3663                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  3664  00111C  C07D  F0B2         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3665                           
  3666                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  3667  001120  6BBD               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3668  001122  D047               	goto	l7141
  3669  001124                     l7113:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3673  001124  0E07               	movlw	7
  3674  001126  6E08               	movwf	?___lbmod,c
  3675  001128  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3676  00112A  ECCB  F016         	call	___lbmod
  3677  00112E  0100               	movlb	0	; () banked
  3678  001130  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3679  001132  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3680  001134  0F89               	addlw	low (_vscp_omsg+6)
  3681  001136  6ED9               	movwf	fsr2l,c
  3682  001138  6ADA               	clrf	fsr2h,c
  3683  00113A  51AF               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3684  00113C  25BD               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3685  00113E  ECEC  F017         	call	_vscp_readRegister
  3686  001142  6EDF               	movwf	indf2,c
  3687                           
  3688                           ;vscp_firmware.c: 973: if ( (i % 7) == 6 || i == (len - 1) ) {
  3689  001144  0E07               	movlw	7
  3690  001146  6E08               	movwf	?___lbmod,c
  3691  001148  0100               	movlb	0	; () banked
  3692  00114A  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3693  00114C  ECCB  F016         	call	___lbmod
  3694  001150  0A06               	xorlw	6
  3695  001152  E00B               	bz	l7119
  3696  001154  0EFF               	movlw	255
  3697  001156  0100               	movlb	0	; () banked
  3698  001158  25B2               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3699  00115A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3700  00115C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3701  00115E  0EFF               	movlw	255
  3702  001160  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3703  001162  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3704  001164  19A4               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3705  001166  11A5               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3706  001168  E123               	bnz	l7139
  3707  00116A                     l7119:
  3708                           
  3709                           ;vscp_firmware.c: 975: uint8_t bytes;
  3710                           ;vscp_firmware.c: 977: if ( ( i % 7 ) == 6 ) {
  3711  00116A  0E07               	movlw	7
  3712  00116C  6E08               	movwf	?___lbmod,c
  3713  00116E  0100               	movlb	0	; () banked
  3714  001170  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3715  001172  ECCB  F016         	call	___lbmod
  3716  001176  0A06               	xorlw	6
  3717  001178  E103               	bnz	l7123
  3718                           
  3719                           ;vscp_firmware.c: 978: bytes = 7;
  3720  00117A  0E07               	movlw	7
  3721  00117C  0100               	movlb	0	; () banked
  3722  00117E  D009               	goto	L2
  3723  001180                     l7123:
  3724                           
  3725                           ;vscp_firmware.c: 980: else {
  3726                           ;vscp_firmware.c: 981: bytes = ( i % 7 ) + 1;
  3727  001180  0E07               	movlw	7
  3728  001182  6E08               	movwf	?___lbmod,c
  3729  001184  0100               	movlb	0	; () banked
  3730  001186  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3731  001188  ECCB  F016         	call	___lbmod
  3732  00118C  0100               	movlb	0	; () banked
  3733  00118E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3734  001190  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3735  001192                     L2:
  3736  001192  6FB1               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;vscp_firmware.c: 982: }
  3740                           ;vscp_firmware.c: 984: vscp_omsg.flags = 0x80 + bytes + 1;
  3741  001194  51B1               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3742  001196  0F81               	addlw	129
  3743  001198  6F83               	movwf	_vscp_omsg& (0+255),b
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;vscp_firmware.c: 985: vscp_omsg.priority = 0x03;
  3747  00119A  0E03               	movlw	3
  3748  00119C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;vscp_firmware.c: 986: vscp_omsg.vscp_class = 0;
  3752  00119E  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3753  0011A0  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;vscp_firmware.c: 987: vscp_omsg.vscp_type = 26;
  3757  0011A2  0E1A               	movlw	26
  3758  0011A4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;vscp_firmware.c: 988: vscp_omsg.data[ 0 ] = pos;
  3762  0011A6  C0B0  F088         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;vscp_firmware.c: 991: vscp_sendEvent();
  3766  0011AA  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;vscp_firmware.c: 992: pos++;
  3770  0011AE  2BB0               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3771  0011B0                     l7139:
  3772                           
  3773                           ; BSR set to: 0
  3774  0011B0  2BBD               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3775  0011B2                     l7141:
  3776                           
  3777                           ; BSR set to: 0
  3778  0011B2  51B2               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3779  0011B4  5DBD               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3780  0011B6  B0D8               	btfsc	status,0,c
  3781  0011B8  0012               	return	
  3782  0011BA  D7B4               	goto	l7113
  3783  0011BC                     l7143:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;vscp_firmware.c: 1000: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3787  0011BC  5170               	movf	_vscp_nickname& (0+255),w,b
  3788  0011BE  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3789  0011C2  62DF               	cpfseq	indf2,c
  3790  0011C4  0012               	return	
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;vscp_firmware.c: 1001: uint8_t i;
  3794                           ;vscp_firmware.c: 1002: uint8_t pos = vscp_imsg.data[ 1 ];
  3795  0011C6  C07C  F0B3         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1129
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;vscp_firmware.c: 1003: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  3799  0011CA  5175               	movf	_vscp_imsg& (0+255),w,b
  3800  0011CC  0FFE               	addlw	254
  3801  0011CE  0B07               	andlw	7
  3802  0011D0  6FB4               	movwf	vscp_handleProtocolEvent@len_1130& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;vscp_firmware.c: 1005: for (i = 0; i < len; i++) {
  3806  0011D2  6BBA               	clrf	vscp_handleProtocolEvent@i_1128& (0+255),b
  3807  0011D4  D016               	goto	l7157
  3808  0011D6                     l7151:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;vscp_firmware.c: 1007: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  3812  0011D6  51BA               	movf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  3813  0011D8  0F7D               	addlw	low (_vscp_imsg+8)
  3814  0011DA  6ED9               	movwf	fsr2l,c
  3815  0011DC  6ADA               	clrf	fsr2h,c
  3816  0011DE  50DF               	movf	indf2,w,c
  3817  0011E0  6E18               	movwf	?_vscp_writeRegister,c
  3818  0011E2  51B3               	movf	vscp_handleProtocolEvent@pos_1129& (0+255),w,b
  3819  0011E4  25BA               	addwf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  3820  0011E6  EC8C  F017         	call	_vscp_writeRegister
  3821                           
  3822                           ;vscp_firmware.c: 1008: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  3823  0011EA  0100               	movlb	0	; () banked
  3824  0011EC  51BA               	movf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  3825  0011EE  0F89               	addlw	low (_vscp_omsg+6)
  3826  0011F0  6ED9               	movwf	fsr2l,c
  3827  0011F2  6ADA               	clrf	fsr2h,c
  3828  0011F4  51B3               	movf	vscp_handleProtocolEvent@pos_1129& (0+255),w,b
  3829  0011F6  25BA               	addwf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  3830  0011F8  ECEC  F017         	call	_vscp_readRegister
  3831  0011FC  6EDF               	movwf	indf2,c
  3832  0011FE  0100               	movlb	0	; () banked
  3833  001200  2BBA               	incf	vscp_handleProtocolEvent@i_1128& (0+255),f,b
  3834  001202                     l7157:
  3835                           
  3836                           ; BSR set to: 0
  3837  001202  51B4               	movf	vscp_handleProtocolEvent@len_1130& (0+255),w,b
  3838  001204  5DBA               	subwf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  3839  001206  E3E7               	bnc	l7151
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;vscp_firmware.c: 1009: }
  3843                           ;vscp_firmware.c: 1011: vscp_omsg.priority = 0x03;
  3844  001208  0E03               	movlw	3
  3845  00120A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;vscp_firmware.c: 1012: vscp_omsg.vscp_class = 0;
  3849  00120C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3850  00120E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3851                           
  3852                           ;vscp_firmware.c: 1013: vscp_omsg.vscp_type = 26;
  3853  001210  0E1A               	movlw	26
  3854  001212  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;vscp_firmware.c: 1014: vscp_omsg.data[ 0 ] = 0;
  3858  001214  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;vscp_firmware.c: 1015: vscp_omsg.flags = 0x80 + len + 1;
  3862  001216  51B4               	movf	vscp_handleProtocolEvent@len_1130& (0+255),w,b
  3863  001218  0F81               	addlw	129
  3864  00121A  6F83               	movwf	_vscp_omsg& (0+255),b
  3865  00121C  EFF2  F016         	goto	_vscp_sendEvent
  3866  001220                     l7169:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;vscp_firmware.c: 1025: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3870  001220  5170               	movf	_vscp_nickname& (0+255),w,b
  3871  001222  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3872  001226  62DF               	cpfseq	indf2,c
  3873  001228  0012               	return	
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3877                           ;vscp_firmware.c: 1028: vscp_imsg.data[ 1 ],
  3878                           ;vscp_firmware.c: 1029: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  3879  00122A  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3880  00122C  EC7C  F014         	call	_vscp_readAppReg
  3881  001230  0100               	movlb	0	; () banked
  3882  001232  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3883  001234  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3884  001236  6E15               	movwf	?_vscp_writeAppReg,c
  3885  001238  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3886  00123A  EC98  F010         	call	_vscp_writeAppReg
  3887  00123E  D68E               	goto	L1
  3888  001240                     l7185:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;vscp_firmware.c: 1045: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3892  001240  5170               	movf	_vscp_nickname& (0+255),w,b
  3893  001242  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3894  001246  62DF               	cpfseq	indf2,c
  3895  001248  0012               	return	
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;vscp_firmware.c: 1047: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3899                           ;vscp_firmware.c: 1048: vscp_imsg.data[ 1 ],
  3900                           ;vscp_firmware.c: 1049: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  3901  00124A  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3902  00124C  EC7C  F014         	call	_vscp_readAppReg
  3903  001250  0100               	movlb	0	; () banked
  3904  001252  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3905  001254  05A4               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  3906  001256  6E15               	movwf	?_vscp_writeAppReg,c
  3907  001258  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3908  00125A  EC98  F010         	call	_vscp_writeAppReg
  3909  00125E  D67E               	goto	L1
  3910  001260                     l7201:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;vscp_firmware.c: 1065: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  3914                           ;vscp_firmware.c: 1066: (0xff == vscp_imsg.data[ 0 ])) {
  3915  001260  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  3916  001262  1970               	xorwf	_vscp_nickname& (0+255),w,b
  3917  001264  E003               	bz	l1038
  3918                           
  3919                           ; BSR set to: 0
  3920  001266  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  3921  001268  A4D8               	btfss	status,2,c
  3922  00126A  0012               	return	
  3923  00126C                     l1038:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;vscp_firmware.c: 1068: uint8_t i, j, k = 0;
  3927  00126C  6BB8               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;vscp_firmware.c: 1072: vscp_omsg.priority = 0x03;
  3931  00126E  0E03               	movlw	3
  3932  001270  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3933                           
  3934                           ;vscp_firmware.c: 1073: vscp_omsg.flags = 0x80 + 8;
  3935  001272  0E88               	movlw	136
  3936  001274  6F83               	movwf	_vscp_omsg& (0+255),b
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;vscp_firmware.c: 1074: vscp_omsg.vscp_class = 0;
  3940  001276  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3941  001278  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3942                           
  3943                           ;vscp_firmware.c: 1075: vscp_omsg.vscp_type = 32;
  3944  00127A  0E20               	movlw	32
  3945  00127C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;vscp_firmware.c: 1077: for (i = 0; i < 3; i++)
  3949  00127E  6BBC               	clrf	vscp_handleProtocolEvent@i_1131& (0+255),b
  3950  001280                     l1039:
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;vscp_firmware.c: 1078: {
  3954                           ;vscp_firmware.c: 1079: vscp_omsg.data[0] = i;
  3955  001280  C0BC  F088         	movff	vscp_handleProtocolEvent@i_1131,_vscp_omsg+5
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;vscp_firmware.c: 1081: for (j = 1; j < 8; j++) {
  3959  001284  0E01               	movlw	1
  3960  001286  6FBE               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  3961  001288                     l7221:
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;vscp_firmware.c: 1082: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  3965  001288  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3966  00128A  0F88               	addlw	low (_vscp_omsg+5)
  3967  00128C  6ED9               	movwf	fsr2l,c
  3968  00128E  6ADA               	clrf	fsr2h,c
  3969  001290  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3970  001292  080F               	sublw	15
  3971  001294  EC0B  F018         	call	_vscp_getGUID
  3972  001298  6EDF               	movwf	indf2,c
  3973  00129A  0100               	movlb	0	; () banked
  3974  00129C  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;vscp_firmware.c: 1083: if (k > 16)
  3978  00129E  0E10               	movlw	16
  3979  0012A0  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3980  0012A2  D001               	goto	l7229
  3981  0012A4  D004               	goto	l7233
  3982  0012A6                     l7229:
  3983                           
  3984                           ; BSR set to: 0
  3985  0012A6  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3986                           
  3987                           ; BSR set to: 0
  3988  0012A8  0E07               	movlw	7
  3989  0012AA  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3990  0012AC  D7ED               	goto	l7221
  3991  0012AE                     l7233:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;vscp_firmware.c: 1085: }
  3995                           ;vscp_firmware.c: 1087: if (k > 16)
  3996  0012AE  0E10               	movlw	16
  3997  0012B0  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3998  0012B2  D001               	goto	l7237
  3999  0012B4  D006               	goto	l1040
  4000  0012B6                     l7237:
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;vscp_firmware.c: 1090: vscp_sendEvent();
  4004  0012B6  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  4005                           
  4006                           ; BSR set to: 0
  4007  0012BA  2BBC               	incf	vscp_handleProtocolEvent@i_1131& (0+255),f,b
  4008                           
  4009                           ; BSR set to: 0
  4010  0012BC  0E02               	movlw	2
  4011  0012BE  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1131& (0+255),b
  4012  0012C0  D7DF               	goto	l1039
  4013  0012C2                     l1040:
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;vscp_firmware.c: 1091: }
  4017                           ;vscp_firmware.c: 1093: for (j = 0; j < 5; j++)
  4018  0012C2  6BBE               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  4019  0012C4                     l7247:
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;vscp_firmware.c: 1094: {
  4023                           ;vscp_firmware.c: 1095: if (vscp_getMDF_URL(j) > 0)
  4024  0012C4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4025  0012C6  ECB9  F017         	call	_vscp_getMDF_URL
  4026  0012CA  0900               	iorlw	0
  4027  0012CC  E008               	bz	l7251
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;vscp_firmware.c: 1096: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  4031  0012CE  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4032  0012D0  0F8B               	addlw	low (_vscp_omsg+8)
  4033  0012D2  6ED9               	movwf	fsr2l,c
  4034  0012D4  6ADA               	clrf	fsr2h,c
  4035  0012D6  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4036  0012D8  ECB9  F017         	call	_vscp_getMDF_URL
  4037  0012DC  D005               	goto	L3
  4038  0012DE                     l7251:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;vscp_firmware.c: 1097: else
  4042                           ;vscp_firmware.c: 1098: vscp_omsg.data[3 + j] = 0;
  4043  0012DE  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4044  0012E0  0F8B               	addlw	low (_vscp_omsg+8)
  4045  0012E2  6ED9               	movwf	fsr2l,c
  4046  0012E4  6ADA               	clrf	fsr2h,c
  4047  0012E6  0E00               	movlw	0
  4048  0012E8                     L3:
  4049  0012E8  6EDF               	movwf	indf2,c
  4050                           
  4051                           ; BSR set to: 0
  4052  0012EA  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4053                           
  4054                           ; BSR set to: 0
  4055  0012EC  0E04               	movlw	4
  4056  0012EE  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4057  0012F0  D7E9               	goto	l7247
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;vscp_firmware.c: 1099: }
  4061                           ;vscp_firmware.c: 1101: vscp_sendEvent();
  4062  0012F2  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;vscp_firmware.c: 1103: k = 5;
  4066  0012F6  0E05               	movlw	5
  4067  0012F8  6FB8               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;vscp_firmware.c: 1104: for (i = 3; i < 7; i++)
  4071  0012FA  0E03               	movlw	3
  4072  0012FC  6FBC               	movwf	vscp_handleProtocolEvent@i_1131& (0+255),b
  4073  0012FE                     l1049:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;vscp_firmware.c: 1105: {
  4077                           ;vscp_firmware.c: 1106: vscp_omsg.data[0] = i;
  4078  0012FE  C0BC  F088         	movff	vscp_handleProtocolEvent@i_1131,_vscp_omsg+5
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;vscp_firmware.c: 1108: for (j = 1; j < 8; j++) {
  4082  001302  0E01               	movlw	1
  4083  001304  6FBE               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4084  001306                     l7273:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;vscp_firmware.c: 1109: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  4088  001306  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4089  001308  0F88               	addlw	low (_vscp_omsg+5)
  4090  00130A  6ED9               	movwf	fsr2l,c
  4091  00130C  6ADA               	clrf	fsr2h,c
  4092  00130E  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4093  001310  ECB9  F017         	call	_vscp_getMDF_URL
  4094  001314  6EDF               	movwf	indf2,c
  4095                           
  4096                           ; BSR set to: 0
  4097  001316  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4098                           
  4099                           ; BSR set to: 0
  4100  001318  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4101                           
  4102                           ; BSR set to: 0
  4103  00131A  0E07               	movlw	7
  4104  00131C  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4105  00131E  D7F3               	goto	l7273
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;vscp_firmware.c: 1110: }
  4109                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  4110  001320  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  4111                           
  4112                           ; BSR set to: 0
  4113  001324  2BBC               	incf	vscp_handleProtocolEvent@i_1131& (0+255),f,b
  4114                           
  4115                           ; BSR set to: 0
  4116  001326  0E06               	movlw	6
  4117  001328  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1131& (0+255),b
  4118  00132A  D7E9               	goto	l1049
  4119  00132C  0C06               	retlw	6
  4120  00132E                     l7287:
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;vscp_firmware.c: 1120: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4124  00132E  5170               	movf	_vscp_nickname& (0+255),w,b
  4125  001330  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4126  001334  62DF               	cpfseq	indf2,c
  4127  001336  0012               	return	
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;vscp_firmware.c: 1122: vscp_omsg.priority = 0x03;
  4131  001338  0E03               	movlw	3
  4132  00133A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4133                           
  4134                           ;vscp_firmware.c: 1123: vscp_omsg.flags = 0x80 + 7;
  4135  00133C  0E87               	movlw	135
  4136  00133E  6F83               	movwf	_vscp_omsg& (0+255),b
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;vscp_firmware.c: 1124: vscp_omsg.vscp_class = 0;
  4140  001340  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4141  001342  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4142                           
  4143                           ;vscp_firmware.c: 1125: vscp_omsg.vscp_type = 34;
  4144  001344  0E22               	movlw	34
  4145  001346  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;vscp_firmware.c: 1127: vscp_getMatrixInfo((char *) vscp_omsg.data);
  4149  001348  0E88               	movlw	(_vscp_omsg+5)& (0+255)
  4150  00134A  EC5D  F017         	call	_vscp_getMatrixInfo
  4151  00134E  EFF2  F016         	goto	_vscp_sendEvent
  4152  001352                     l7297:
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;vscp_firmware.c: 1143: if ( vscp_nickname == vscp_imsg.data[0] ) {
  4156  001352  5170               	movf	_vscp_nickname& (0+255),w,b
  4157  001354  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4158  001358  62DF               	cpfseq	indf2,c
  4159  00135A  0012               	return	
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;vscp_firmware.c: 1145: uint16_t page_save;
  4163                           ;vscp_firmware.c: 1146: uint8_t byte = 0, bytes = 0;
  4164  00135C  6BBB               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;vscp_firmware.c: 1147: uint8_t bytes_this_time, cb;
  4168                           ;vscp_firmware.c: 1151: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  4169  00135E  C075  F0A4         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  4170  001362  0E0F               	movlw	15
  4171  001364  17A4               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4172  001366  0E04               	movlw	4
  4173  001368  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4174  00136A  E304               	bnc	l7305
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;vscp_firmware.c: 1154: bytes = vscp_imsg.data[4];
  4178  00136C  C07F  F0B9         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1136
  4179                           
  4180                           ;vscp_firmware.c: 1156: if ( 0 == bytes ) {
  4181  001370  67B9               	tstfsz	vscp_handleProtocolEvent@bytes_1136& (0+255),b
  4182  001372  D002               	goto	l7309
  4183  001374                     l7305:
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;vscp_firmware.c: 1157: bytes = 1;
  4187  001374  0E01               	movlw	1
  4188  001376  6FB9               	movwf	vscp_handleProtocolEvent@bytes_1136& (0+255),b
  4189  001378                     l7309:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;vscp_firmware.c: 1162: }
  4193                           ;vscp_firmware.c: 1165: page_save = vscp_page_select;
  4194  001378  C052  F0AB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4195  00137C  C053  F0AC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;vscp_firmware.c: 1170: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4199  001380  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4200  001382  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4201  001386  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4202  001388  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4203  00138C  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4204  00138E  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4205  001390  6E52               	movwf	_vscp_page_select,c
  4206  001392  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4207  001394  6E53               	movwf	_vscp_page_select+1,c
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;vscp_firmware.c: 1173: vscp_omsg.priority = 0x03;
  4211  001396  0E03               	movlw	3
  4212  001398  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;vscp_firmware.c: 1174: vscp_omsg.vscp_class = 0;
  4216  00139A  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4217  00139C  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;vscp_firmware.c: 1175: vscp_omsg.vscp_type = 39;
  4221  00139E  0E27               	movlw	39
  4222  0013A0  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;vscp_firmware.c: 1176: vscp_omsg.data[0] = 0;
  4226  0013A2  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;vscp_firmware.c: 1177: vscp_omsg.data[1] = vscp_imsg.data[1];
  4230  0013A4  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;vscp_firmware.c: 1178: vscp_omsg.data[2] = vscp_imsg.data[2];
  4234  0013A8  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4235  0013AC                     l7325:
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;vscp_firmware.c: 1182: if ( ( bytes - byte ) >= 4 ) {
  4239  0013AC  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4240  0013AE  C0B9  F0A4         	movff	vscp_handleProtocolEvent@bytes_1136,??_vscp_handleProtocolEvent
  4241  0013B2  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4242  0013B4  5FA4               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4243  0013B6  0E00               	movlw	0
  4244  0013B8  5BA5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4245  0013BA  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4246  0013BC  0A80               	xorlw	128
  4247  0013BE  0F80               	addlw	-128
  4248  0013C0  0E04               	movlw	4
  4249  0013C2  B4D8               	btfsc	status,2,c
  4250  0013C4  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4251  0013C6  E302               	bnc	l7329
  4252                           
  4253                           ; BSR set to: 0
  4254                           ;vscp_firmware.c: 1183: bytes_this_time = 4;
  4255  0013C8  0E04               	movlw	4
  4256  0013CA  D002               	goto	L4
  4257  0013CC                     l7329:
  4258                           
  4259                           ; BSR set to: 0
  4260                           ;vscp_firmware.c: 1185: else {
  4261                           ;vscp_firmware.c: 1186: bytes_this_time = (bytes - byte);
  4262  0013CC  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4263  0013CE  5DB9               	subwf	vscp_handleProtocolEvent@bytes_1136& (0+255),w,b
  4264  0013D0                     L4:
  4265  0013D0  6FB5               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;vscp_firmware.c: 1187: }
  4269                           ;vscp_firmware.c: 1190: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4270  0013D2  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4271  0013D4  0F84               	addlw	132
  4272  0013D6  6F83               	movwf	_vscp_omsg& (0+255),b
  4273                           
  4274                           ;vscp_firmware.c: 1191: vscp_omsg.data[3] =
  4275                           ;vscp_firmware.c: 1192: vscp_imsg.data[3] + byte;
  4276  0013D8  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4277  0013DA  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4278  0013DC  6F8B               	movwf	(_vscp_omsg+8)& (0+255),b
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;vscp_firmware.c: 1195: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4282  0013DE  6BB6               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4283  0013E0  D00C               	goto	l7337
  4284  0013E2                     l7333:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;vscp_firmware.c: 1196: vscp_omsg.data[ (4 + cb) ] =
  4288                           ;vscp_firmware.c: 1197: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4289  0013E2  51B6               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4290  0013E4  0F8C               	addlw	low (_vscp_omsg+9)
  4291  0013E6  6ED9               	movwf	fsr2l,c
  4292  0013E8  6ADA               	clrf	fsr2h,c
  4293  0013EA  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4294  0013EC  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4295  0013EE  25B6               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4296  0013F0  ECEC  F017         	call	_vscp_readRegister
  4297  0013F4  6EDF               	movwf	indf2,c
  4298  0013F6  0100               	movlb	0	; () banked
  4299  0013F8  2BB6               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4300  0013FA                     l7337:
  4301                           
  4302                           ; BSR set to: 0
  4303  0013FA  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4304  0013FC  5DB6               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4305  0013FE  E3F1               	bnc	l7333
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;vscp_firmware.c: 1198: }
  4309                           ;vscp_firmware.c: 1201: vscp_sendEvent();
  4310  001400  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;vscp_firmware.c: 1204: byte += bytes_this_time;
  4314  001404  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4315  001406  27BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;vscp_firmware.c: 1207: vscp_omsg.data[0] += 1;
  4319  001408  2B88               	incf	(_vscp_omsg+5)& (0+255),f,b
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;vscp_firmware.c: 1209: } while (byte < bytes);
  4323  00140A  51B9               	movf	vscp_handleProtocolEvent@bytes_1136& (0+255),w,b
  4324  00140C  5DBB               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4325  00140E  E3CE               	bnc	l7325
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;vscp_firmware.c: 1212: vscp_page_select = page_save;
  4329  001410  C0AB  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4330  001414  C0AC  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4331  001418  0012               	return	
  4332  00141A                     l7347:
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;vscp_firmware.c: 1219: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4336  00141A  5170               	movf	_vscp_nickname& (0+255),w,b
  4337  00141C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4338  001420  62DF               	cpfseq	indf2,c
  4339  001422  0012               	return	
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;vscp_firmware.c: 1221: uint8_t i;
  4343                           ;vscp_firmware.c: 1222: uint16_t page_save;
  4344                           ;vscp_firmware.c: 1225: page_save = vscp_page_select;
  4345  001424  C052  F0AD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1140
  4346  001428  C053  F0AE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1140+1
  4347                           
  4348                           ; BSR set to: 0
  4349                           ;vscp_firmware.c: 1229: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4350  00142C  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4351  00142E  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4352  001432  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4353  001434  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4354  001438  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4355  00143A  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4356  00143C  6E52               	movwf	_vscp_page_select,c
  4357  00143E  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4358  001440  6E53               	movwf	_vscp_page_select+1,c
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;vscp_firmware.c: 1231: for (i = vscp_imsg.data[ 3 ];
  4362  001442  C07E  F0B7         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1139
  4363                           
  4364                           ;vscp_firmware.c: 1234: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4365                           ;vscp_firmware.c: 1235: i++) {
  4366  001446  D012               	goto	l7359
  4367  001448                     l7355:
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;vscp_firmware.c: 1236: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4371                           ;vscp_firmware.c: 1237: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4372  001448  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4373  00144A  088C               	sublw	low (_vscp_omsg+9)
  4374  00144C  25B7               	addwf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4375  00144E  6ED9               	movwf	fsr2l,c
  4376  001450  6ADA               	clrf	fsr2h,c
  4377  001452  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4378  001454  087F               	sublw	low (_vscp_imsg+10)
  4379  001456  25B7               	addwf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4380  001458  6EE1               	movwf	fsr1l,c
  4381  00145A  6AE2               	clrf	fsr1h,c
  4382  00145C  50E7               	movf	indf1,w,c
  4383  00145E  6E18               	movwf	?_vscp_writeRegister,c
  4384  001460  51B7               	movf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4385  001462  EC8C  F017         	call	_vscp_writeRegister
  4386  001466  6EDF               	movwf	indf2,c
  4387  001468  0100               	movlb	0	; () banked
  4388  00146A  2BB7               	incf	vscp_handleProtocolEvent@i_1139& (0+255),f,b
  4389  00146C                     l7359:
  4390                           
  4391                           ; BSR set to: 0
  4392  00146C  5175               	movf	_vscp_imsg& (0+255),w,b
  4393  00146E  0B0F               	andlw	15
  4394  001470  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4395  001472  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4396  001474  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4397  001476  27A4               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4398  001478  0E00               	movlw	0
  4399  00147A  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4400  00147C  0EFC               	movlw	252
  4401  00147E  25A4               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4402  001480  6FA6               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4403  001482  0EFF               	movlw	255
  4404  001484  21A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4405  001486  6FA7               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4406  001488  51B7               	movf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4407  00148A  6FA8               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4408  00148C  6BA9               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4409  00148E  51A9               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4410  001490  0A80               	xorlw	128
  4411  001492  6FAA               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4412  001494  51A6               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4413  001496  5DA8               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4414  001498  51A7               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4415  00149A  0A80               	xorlw	128
  4416  00149C  59AA               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4417  00149E  E3D4               	bnc	l7355
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;vscp_firmware.c: 1238: }
  4421                           ;vscp_firmware.c: 1241: vscp_page_select = page_save;
  4422  0014A0  C0AD  F052         	movff	vscp_handleProtocolEvent@page_save_1140,_vscp_page_select
  4423  0014A4  C0AE  F053         	movff	vscp_handleProtocolEvent@page_save_1140+1,_vscp_page_select+1
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;vscp_firmware.c: 1243: vscp_omsg.priority = 0x03;
  4427  0014A8  0E03               	movlw	3
  4428  0014AA  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;vscp_firmware.c: 1244: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4432  0014AC  5175               	movf	_vscp_imsg& (0+255),w,b
  4433  0014AE  0B0F               	andlw	15
  4434  0014B0  0F80               	addlw	128
  4435  0014B2  6F83               	movwf	_vscp_omsg& (0+255),b
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;vscp_firmware.c: 1245: vscp_omsg.vscp_class = 0;
  4439  0014B4  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4440  0014B6  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;vscp_firmware.c: 1246: vscp_omsg.vscp_type = 39;
  4444  0014B8  0E27               	movlw	39
  4445  0014BA  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;vscp_firmware.c: 1247: vscp_omsg.data[0] = 0;
  4449  0014BC  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;vscp_firmware.c: 1248: vscp_omsg.data[1] = vscp_imsg.data[1];
  4453  0014BE  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;vscp_firmware.c: 1249: vscp_omsg.data[2] = vscp_imsg.data[2];
  4457  0014C2  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;vscp_firmware.c: 1250: vscp_omsg.data[3] = vscp_imsg.data[3];
  4461  0014C6  C07E  F08B         	movff	_vscp_imsg+9,_vscp_omsg+8
  4462  0014CA  EFF2  F016         	goto	_vscp_sendEvent
  4463  0014CE                     l7381:
  4464                           
  4465                           ; BSR set to: 0
  4466  0014CE  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  4467                           
  4468                           ; Switch size 1, requested type "speed"
  4469                           ; Number of cases is 16, Range of values is 1 to 38
  4470                           ; switch strategies available:
  4471                           ; Name         Instructions Cycles
  4472                           ; simple_byte           49    25 (average)
  4473                           ;	Chosen strategy is simple_byte
  4474  0014D0  0A01               	xorlw	1	; case 1
  4475  0014D2  E101 D52B          	bz	l6969
  4476  0014D6  0A03               	xorlw	3	; case 2
  4477  0014D8  E101 D52A          	bz	l6971
  4478  0014DC  0A04               	xorlw	4	; case 6
  4479  0014DE  E101 D529          	bz	l6973
  4480  0014E2  0A0E               	xorlw	14	; case 8
  4481  0014E4  E101 D528          	bz	l6975
  4482  0014E8  0A01               	xorlw	1	; case 9
  4483  0014EA  E101 D527          	bz	l6977
  4484  0014EE  0A02               	xorlw	2	; case 11
  4485  0014F0  E101 D546          	bz	l7011
  4486  0014F4  0A07               	xorlw	7	; case 12
  4487  0014F6  E101 D55C          	bz	l7045
  4488  0014FA  0A1B               	xorlw	27	; case 23
  4489  0014FC  E101 D5F0          	bz	l7103
  4490  001500  0A0F               	xorlw	15	; case 24
  4491  001502  E101 D603          	bz	l7109
  4492  001506  0A01               	xorlw	1	; case 25
  4493  001508  E101 D658          	bz	l7143
  4494  00150C  0A04               	xorlw	4	; case 29
  4495  00150E  E101 D687          	bz	l7169
  4496  001512  0A03               	xorlw	3	; case 30
  4497  001514  E101 D694          	bz	l7185
  4498  001518  0A01               	xorlw	1	; case 31
  4499  00151A  E101 D6A1          	bz	l7201
  4500  00151E  0A3E               	xorlw	62	; case 33
  4501  001520  E101 D705          	bz	l7287
  4502  001524  0A04               	xorlw	4	; case 37
  4503  001526  E101 D714          	bz	l7297
  4504  00152A  0A03               	xorlw	3	; case 38
  4505  00152C  A4D8               	btfss	status,2,c
  4506  00152E  0012               	return	
  4507  001530  D774               	goto	l7347
  4508  001532                     __end_of_vscp_handleProtocolEvent:
  4509                           	opt stack 0
  4510                           prodh	equ	0xFF4
  4511                           prodl	equ	0xFF3
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           indf1	equ	0xFE7
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function ___lbmod *****************
  4525 ;; Defined at:
  4526 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  dividend        1    wreg     unsigned char 
  4529 ;;  divisor         1    7[COMRAM] unsigned char 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  dividend        1    8[COMRAM] unsigned char 
  4532 ;;  rem             1   10[COMRAM] unsigned char 
  4533 ;;  counter         1    9[COMRAM] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      unsigned char 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0
  4538 ;; Tracked objects:
  4539 ;;		On entry : F/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4543 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4544 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4546 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4547 ;;Total ram usage:        4 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    2
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_vscp_handleProtocolEvent
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           	psect	text15
  4558  002D96                     __ptext15:
  4559                           	opt stack 0
  4560  002D96                     ___lbmod:
  4561                           	opt stack 27
  4562                           
  4563                           ;incstack = 0
  4564                           ;incstack = 0
  4565                           ;___lbmod@dividend stored from wreg
  4566  002D96  CFE8 F009          	movff	wreg,___lbmod@dividend
  4567                           
  4568                           ; BSR set to: 0
  4569  002D9A  0E08               	movlw	8
  4570  002D9C  6E0A               	movwf	___lbmod@counter,c
  4571                           
  4572                           ; BSR set to: 0
  4573  002D9E  6A0B               	clrf	___lbmod@rem,c
  4574  002DA0                     l5509:
  4575  002DA0  90D8               	bcf	status,0,c
  4576  002DA2  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4577  002DA4  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4578  002DA6  6E0B               	movwf	___lbmod@rem,c
  4579  002DA8  90D8               	bcf	status,0,c
  4580  002DAA  3609               	rlcf	___lbmod@dividend,f,c
  4581  002DAC  5008               	movf	___lbmod@divisor,w,c
  4582  002DAE  5C0B               	subwf	___lbmod@rem,w,c
  4583  002DB0  E302               	bnc	l5517
  4584  002DB2  5008               	movf	___lbmod@divisor,w,c
  4585  002DB4  5E0B               	subwf	___lbmod@rem,f,c
  4586  002DB6                     l5517:
  4587  002DB6  2E0A               	decfsz	___lbmod@counter,f,c
  4588  002DB8  D7F3               	goto	l5509
  4589  002DBA  500B               	movf	___lbmod@rem,w,c
  4590  002DBC  0012               	return	
  4591  002DBE                     __end_of___lbmod:
  4592                           	opt stack 0
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           postinc0	equ	0xFEE
  4596                           wreg	equ	0xFE8
  4597                           indf1	equ	0xFE7
  4598                           fsr1h	equ	0xFE2
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _vscp_writeRegister *****************
  4608 ;; Defined at:
  4609 ;;		line 692 in file "../../vscp_firmware/common/vscp_firmware.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  reg             1    wreg     unsigned char 
  4612 ;;  value           1   23[COMRAM] unsigned char 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  reg             1   24[COMRAM] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      unsigned char 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : F/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4624 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4628 ;;Total ram usage:        2 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    6
  4631 ;; This function calls:
  4632 ;;		_vscp_writeAppReg
  4633 ;;		_vscp_writeStdReg
  4634 ;; This function is called by:
  4635 ;;		_vscp_handleProtocolEvent
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text16
  4640  002F18                     __ptext16:
  4641                           	opt stack 0
  4642  002F18                     _vscp_writeRegister:
  4643                           	opt stack 23
  4644                           
  4645                           ;incstack = 0
  4646                           ;incstack = 0
  4647                           ;vscp_writeRegister@reg stored from wreg
  4648  002F18  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;vscp_firmware.c: 693: if (reg >= 0x80) {
  4652  002F1C  0E7F               	movlw	127
  4653  002F1E  6419               	cpfsgt	vscp_writeRegister@reg,c
  4654  002F20  D005               	goto	l6787
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;vscp_firmware.c: 694: return vscp_writeStdReg(reg, value);
  4658  002F22  C018  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4659  002F26  5019               	movf	vscp_writeRegister@reg,w,c
  4660  002F28  EFAF  F011         	goto	_vscp_writeStdReg
  4661  002F2C                     l6787:
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;vscp_firmware.c: 696: return vscp_writeAppReg(reg, value);
  4665  002F2C  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4666  002F30  5019               	movf	vscp_writeRegister@reg,w,c
  4667  002F32  EF98  F010         	goto	_vscp_writeAppReg
  4668  002F36                     __end_of_vscp_writeRegister:
  4669                           	opt stack 0
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           postinc0	equ	0xFEE
  4673                           wreg	equ	0xFE8
  4674                           indf1	equ	0xFE7
  4675                           fsr1h	equ	0xFE2
  4676                           fsr1l	equ	0xFE1
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _vscp_writeStdReg *****************
  4685 ;; Defined at:
  4686 ;;		line 705 in file "../../vscp_firmware/common/vscp_firmware.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  reg             1    wreg     unsigned char 
  4689 ;;  value           1   14[COMRAM] unsigned char 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  reg             1   20[COMRAM] unsigned char 
  4692 ;;  rv              1   19[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      unsigned char 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : F/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4702 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4704 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4706 ;;Total ram usage:        7 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    5
  4709 ;; This function calls:
  4710 ;;		_vscp_setGUID
  4711 ;;		_vscp_setManufacturerId
  4712 ;;		_vscp_getGUID
  4713 ;;		_vscp_getUserID
  4714 ;;		_vscp_setUserID
  4715 ;;		_vscp_getManufacturerId
  4716 ;;		_vscp_restoreDefaults
  4717 ;; This function is called by:
  4718 ;;		_vscp_writeRegister
  4719 ;;		_vscp_handleProtocolEvent
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text17
  4724  00235E                     __ptext17:
  4725                           	opt stack 0
  4726  00235E                     _vscp_writeStdReg:
  4727                           	opt stack 24
  4728                           
  4729                           ;incstack = 0
  4730                           ;incstack = 0
  4731                           ;vscp_writeStdReg@reg stored from wreg
  4732  00235E  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;vscp_firmware.c: 706: uint8_t rv = ~value;
  4736  002362  1C0F               	comf	vscp_writeStdReg@value,w,c
  4737  002364  6E14               	movwf	vscp_writeStdReg@rv,c
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;vscp_firmware.c: 708: if ((reg > (0x82 + 1)) &&
  4741                           ;vscp_firmware.c: 709: (reg < 0x89)) {
  4742  002366  0E83               	movlw	131
  4743  002368  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4744  00236A  D00E               	goto	l6799
  4745                           
  4746                           ; BSR set to: 0
  4747  00236C  0E89               	movlw	137
  4748  00236E  6015               	cpfslt	vscp_writeStdReg@reg,c
  4749  002370  D00B               	goto	l6799
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;vscp_firmware.c: 712: vscp_setUserID((reg - 0x84), value);
  4753  002372  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  4754  002376  5015               	movf	vscp_writeStdReg@reg,w,c
  4755  002378  0F7C               	addlw	124
  4756  00237A  ECD4  F017         	call	_vscp_setUserID
  4757                           
  4758                           ;vscp_firmware.c: 713: rv = vscp_getUserID((reg - 0x84));
  4759  00237E  5015               	movf	vscp_writeStdReg@reg,w,c
  4760  002380  0F7C               	addlw	124
  4761  002382  EC01  F018         	call	_vscp_getUserID
  4762  002386  D069               	goto	L10
  4763  002388                     l6799:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;vscp_firmware.c: 716: else if (0x92 == reg) {
  4767  002388  5015               	movf	vscp_writeStdReg@reg,w,c
  4768  00238A  0A92               	xorlw	146
  4769  00238C  E10D               	bnz	l6805
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;vscp_firmware.c: 719: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  4773  00238E  500F               	movf	vscp_writeStdReg@value,w,c
  4774  002390  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4775  002392  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  4776  002394  5052               	movf	_vscp_page_select,w,c
  4777  002396  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  4778  002398  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  4779  00239A  1010               	iorwf	??_vscp_writeStdReg,w,c
  4780  00239C  6E52               	movwf	_vscp_page_select,c
  4781  00239E  5011               	movf	??_vscp_writeStdReg+1,w,c
  4782  0023A0  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  4783  0023A2  6E53               	movwf	_vscp_page_select+1,c
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;vscp_firmware.c: 720: rv = (vscp_page_select >> 8) & 0xff;
  4787  0023A4  5053               	movf	_vscp_page_select+1,w,c
  4788  0023A6  D059               	goto	L10
  4789  0023A8                     l6805:
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;vscp_firmware.c: 722: else if (0x93 == reg) {
  4793  0023A8  5015               	movf	vscp_writeStdReg@reg,w,c
  4794  0023AA  0A93               	xorlw	147
  4795  0023AC  E10B               	bnz	l6811
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;vscp_firmware.c: 725: vscp_page_select = (vscp_page_select & 0xff00) | value;
  4799  0023AE  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  4800  0023B0  5053               	movf	_vscp_page_select+1,w,c
  4801  0023B2  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4802  0023B4  500F               	movf	vscp_writeStdReg@value,w,c
  4803  0023B6  1010               	iorwf	??_vscp_writeStdReg,w,c
  4804  0023B8  6E52               	movwf	_vscp_page_select,c
  4805  0023BA  5011               	movf	??_vscp_writeStdReg+1,w,c
  4806  0023BC  6E53               	movwf	_vscp_page_select+1,c
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;vscp_firmware.c: 726: rv = (vscp_page_select & 0xff);
  4810  0023BE  C052  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  4811                           
  4812                           ;vscp_firmware.c: 727: }
  4813  0023C2  D04E               	goto	l6853
  4814  0023C4                     l6811:
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;vscp_firmware.c: 732: else if ((reg > 0x88) && (reg < 0x91)) {
  4818  0023C4  0E88               	movlw	136
  4819  0023C6  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4820  0023C8  D019               	goto	l6823
  4821                           
  4822                           ; BSR set to: 0
  4823  0023CA  0E91               	movlw	145
  4824  0023CC  6015               	cpfslt	vscp_writeStdReg@reg,c
  4825  0023CE  D016               	goto	l6823
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;vscp_firmware.c: 734: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4829                           ;vscp_firmware.c: 735: (0xff != (vscp_page_select & 0xff))) {
  4830  0023D0  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4831  0023D4  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4832  0023D8  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4833  0023DA  2811               	incf	??_vscp_writeStdReg+1,w,c
  4834  0023DC  E102               	bnz	l6819
  4835                           
  4836                           ; BSR set to: 0
  4837  0023DE  2852               	incf	_vscp_page_select,w,c
  4838  0023E0  E002               	bz	l6821
  4839  0023E2                     l6819:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;vscp_firmware.c: 737: rv = ~value;
  4843  0023E2  1C0F               	comf	vscp_writeStdReg@value,w,c
  4844  0023E4  D03A               	goto	L10
  4845  0023E6                     l6821:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;vscp_firmware.c: 740: vscp_setManufacturerId(reg - 0x89, value);
  4849  0023E6  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  4850  0023EA  5015               	movf	vscp_writeStdReg@reg,w,c
  4851  0023EC  0F77               	addlw	119
  4852  0023EE  EC3D  F017         	call	_vscp_setManufacturerId
  4853                           
  4854                           ;vscp_firmware.c: 741: rv = vscp_getManufacturerId(reg - 0x89);
  4855  0023F2  5015               	movf	vscp_writeStdReg@reg,w,c
  4856  0023F4  0F77               	addlw	119
  4857  0023F6  ECF7  F017         	call	_vscp_getManufacturerId
  4858  0023FA  D02F               	goto	L10
  4859  0023FC                     l6823:
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;vscp_firmware.c: 744: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  4863  0023FC  0ECF               	movlw	207
  4864  0023FE  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4865  002400  D017               	goto	l6835
  4866                           
  4867                           ; BSR set to: 0
  4868  002402  0EE0               	movlw	224
  4869  002404  6015               	cpfslt	vscp_writeStdReg@reg,c
  4870  002406  D014               	goto	l6835
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;vscp_firmware.c: 746: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4874                           ;vscp_firmware.c: 747: (0xff != (vscp_page_select & 0xff))) {
  4875  002408  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4876  00240C  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4877  002410  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4878  002412  2811               	incf	??_vscp_writeStdReg+1,w,c
  4879  002414  E1E6               	bnz	l6819
  4880                           
  4881                           ; BSR set to: 0
  4882  002416  2852               	incf	_vscp_page_select,w,c
  4883  002418  E1E4               	bnz	l6819
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;vscp_firmware.c: 751: else {
  4887                           ;vscp_firmware.c: 752: vscp_setGUID(reg - 0xD0, value);
  4888  00241A  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  4889  00241E  5015               	movf	vscp_writeStdReg@reg,w,c
  4890  002420  0F30               	addlw	48
  4891  002422  EC4D  F017         	call	_vscp_setGUID
  4892                           
  4893                           ;vscp_firmware.c: 753: rv = vscp_getGUID(reg - 0xD0);
  4894  002426  5015               	movf	vscp_writeStdReg@reg,w,c
  4895  002428  0F30               	addlw	48
  4896  00242A  EC0B  F018         	call	_vscp_getGUID
  4897  00242E  D015               	goto	L10
  4898  002430                     l6835:
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  4902  002430  5015               	movf	vscp_writeStdReg@reg,w,c
  4903  002432  0AA2               	xorlw	162
  4904  002434  E1D6               	bnz	l6819
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  4908  002436  500F               	movf	vscp_writeStdReg@value,w,c
  4909  002438  0A55               	xorlw	85
  4910  00243A  E104               	bnz	l6843
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  4914  00243C  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  4915  00243E  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;vscp_firmware.c: 760: rv = 0x55;
  4919  002440  0E55               	movlw	85
  4920  002442  D00B               	goto	L10
  4921  002444                     l6843:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  4925  002444  500F               	movf	vscp_writeStdReg@value,w,c
  4926  002446  0AAA               	xorlw	170
  4927  002448  E10B               	bnz	l6853
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  4931  00244A  0EE8               	movlw	232
  4932  00244C  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  4933  00244E  0E03               	movlw	3
  4934  002450  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  4935  002452  E205               	bc	l980
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  4939  002454  EC72  F018         	call	_vscp_restoreDefaults	;wreg free
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;vscp_firmware.c: 765: rv = 0xaa;
  4943  002458  0EAA               	movlw	170
  4944  00245A                     L10:
  4945  00245A  6E14               	movwf	vscp_writeStdReg@rv,c
  4946                           
  4947                           ;vscp_firmware.c: 766: }
  4948  00245C  D001               	goto	l6853
  4949  00245E                     l980:
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;vscp_firmware.c: 767: else {
  4953                           ;vscp_firmware.c: 768: rv = 0;
  4954  00245E  6A14               	clrf	vscp_writeStdReg@rv,c
  4955  002460                     l6853:
  4956                           
  4957                           ;vscp_firmware.c: 776: }
  4958                           ;vscp_firmware.c: 778: return rv;
  4959  002460  5014               	movf	vscp_writeStdReg@rv,w,c
  4960  002462  0012               	return	
  4961  002464                     __end_of_vscp_writeStdReg:
  4962                           	opt stack 0
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           indf1	equ	0xFE7
  4968                           fsr1h	equ	0xFE2
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           fsr2h	equ	0xFDA
  4974                           fsr2l	equ	0xFD9
  4975                           status	equ	0xFD8
  4976                           
  4977 ;; *************** function _vscp_restoreDefaults *****************
  4978 ;; Defined at:
  4979 ;;		line 1428 in file "../main.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;		None               void
  4986 ;; Registers used:
  4987 ;;		wreg, status,2, status,0, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : F/0
  4990 ;;		On exit  : F/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4997 ;;Total ram usage:        0 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    4
  5000 ;; This function calls:
  5001 ;;		_init_app_eeprom
  5002 ;;		_init_app_ram
  5003 ;; This function is called by:
  5004 ;;		_vscp_writeStdReg
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           	psect	text18
  5009  0030E4                     __ptext18:
  5010                           	opt stack 0
  5011  0030E4                     _vscp_restoreDefaults:
  5012                           	opt stack 24
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;main.c: 1429: init_app_eeprom();
  5016                           
  5017                           ;incstack = 0
  5018                           ;incstack = 0
  5019  0030E4  EC25  F014         	call	_init_app_eeprom	;wreg free
  5020                           
  5021                           ;main.c: 1430: init_app_ram();
  5022  0030E8  EF39  F018         	goto	_init_app_ram	;wreg free
  5023  0030EC                     __end_of_vscp_restoreDefaults:
  5024                           	opt stack 0
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           postinc0	equ	0xFEE
  5028                           wreg	equ	0xFE8
  5029                           indf1	equ	0xFE7
  5030                           fsr1h	equ	0xFE2
  5031                           fsr1l	equ	0xFE1
  5032                           indf2	equ	0xFDF
  5033                           postinc2	equ	0xFDE
  5034                           postdec2	equ	0xFDD
  5035                           fsr2h	equ	0xFDA
  5036                           fsr2l	equ	0xFD9
  5037                           status	equ	0xFD8
  5038                           
  5039 ;; *************** function _init_app_eeprom *****************
  5040 ;; Defined at:
  5041 ;;		line 427 in file "../main.c"
  5042 ;; Parameters:    Size  Location     Type
  5043 ;;		None
  5044 ;; Auto vars:     Size  Location     Type
  5045 ;;  i               1   13[COMRAM] unsigned char 
  5046 ;;  j               1   12[COMRAM] unsigned char 
  5047 ;; Return value:  Size  Location     Type
  5048 ;;		None               void
  5049 ;; Registers used:
  5050 ;;		wreg, status,2, status,0, cstack
  5051 ;; Tracked objects:
  5052 ;;		On entry : 0/E
  5053 ;;		On exit  : 0/0
  5054 ;;		Unchanged: 0/0
  5055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5057 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5058 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5059 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5060 ;;Total ram usage:        4 bytes
  5061 ;; Hardware stack levels used:    1
  5062 ;; Hardware stack levels required when called:    3
  5063 ;; This function calls:
  5064 ;;		_writeEEPROM
  5065 ;; This function is called by:
  5066 ;;		_main
  5067 ;;		_vscp_restoreDefaults
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text19
  5072  00284A                     __ptext19:
  5073                           	opt stack 0
  5074  00284A                     _init_app_eeprom:
  5075                           	opt stack 24
  5076                           
  5077                           ;main.c: 428: unsigned char i, j;
  5078                           ;main.c: 430: writeEEPROM( 0x21 + 0, 0 );
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;incstack = 0
  5082                           ;incstack = 0
  5083  00284A  6A09               	clrf	?_writeEEPROM+1,c
  5084  00284C  0E21               	movlw	33
  5085  00284E  6E08               	movwf	?_writeEEPROM,c
  5086  002850  0E00               	movlw	0
  5087  002852  6A0A               	clrf	?_writeEEPROM+2,c
  5088  002854  EC18  F017         	call	_writeEEPROM	;wreg free
  5089                           
  5090                           ;main.c: 431: writeEEPROM( 0x21 + 1, 0 );
  5091  002858  6A09               	clrf	?_writeEEPROM+1,c
  5092  00285A  0E22               	movlw	34
  5093  00285C  6E08               	movwf	?_writeEEPROM,c
  5094  00285E  0E00               	movlw	0
  5095  002860  6A0A               	clrf	?_writeEEPROM+2,c
  5096  002862  EC18  F017         	call	_writeEEPROM	;wreg free
  5097                           
  5098                           ;main.c: 433: for ( i=3; i<21; i++ ) {
  5099  002866  0E03               	movlw	3
  5100  002868  6E0E               	movwf	init_app_eeprom@i,c
  5101  00286A                     l3809:
  5102                           
  5103                           ;main.c: 434: writeEEPROM( 0x21 + 5 + (i-3), i );
  5104  00286A  0E23               	movlw	35
  5105  00286C  240E               	addwf	init_app_eeprom@i,w,c
  5106  00286E  6E08               	movwf	?_writeEEPROM,c
  5107  002870  6A09               	clrf	?_writeEEPROM+1,c
  5108  002872  0E00               	movlw	0
  5109  002874  2209               	addwfc	?_writeEEPROM+1,f,c
  5110  002876  C00E  F00A         	movff	init_app_eeprom@i,?_writeEEPROM+2
  5111  00287A  EC18  F017         	call	_writeEEPROM	;wreg free
  5112  00287E  2A0E               	incf	init_app_eeprom@i,f,c
  5113  002880  0E14               	movlw	20
  5114  002882  640E               	cpfsgt	init_app_eeprom@i,c
  5115  002884  D7F2               	goto	l3809
  5116                           
  5117                           ;main.c: 435: }
  5118                           ;main.c: 437: writeEEPROM( 0x21 + 2, 0 );
  5119  002886  6A09               	clrf	?_writeEEPROM+1,c
  5120  002888  0E23               	movlw	35
  5121  00288A  6E08               	movwf	?_writeEEPROM,c
  5122  00288C  0E00               	movlw	0
  5123  00288E  6A0A               	clrf	?_writeEEPROM+2,c
  5124  002890  EC18  F017         	call	_writeEEPROM	;wreg free
  5125                           
  5126                           ;main.c: 438: writeEEPROM( 0x21 + 3, 0 );
  5127  002894  6A09               	clrf	?_writeEEPROM+1,c
  5128  002896  0E24               	movlw	36
  5129  002898  6E08               	movwf	?_writeEEPROM,c
  5130  00289A  0E00               	movlw	0
  5131  00289C  6A0A               	clrf	?_writeEEPROM+2,c
  5132  00289E  EC18  F017         	call	_writeEEPROM	;wreg free
  5133                           
  5134                           ;main.c: 439: writeEEPROM( 0x21 + 4, 0 );
  5135  0028A2  6A09               	clrf	?_writeEEPROM+1,c
  5136  0028A4  0E25               	movlw	37
  5137  0028A6  6E08               	movwf	?_writeEEPROM,c
  5138  0028A8  0E00               	movlw	0
  5139  0028AA  6A0A               	clrf	?_writeEEPROM+2,c
  5140  0028AC  EC18  F017         	call	_writeEEPROM	;wreg free
  5141                           
  5142                           ;main.c: 443: for ( i = 0; i < 8; i++ ) {
  5143  0028B0  6A0E               	clrf	init_app_eeprom@i,c
  5144  0028B2                     l177:
  5145                           
  5146                           ;main.c: 444: for ( j = 0; j < 8; j++ ) {
  5147  0028B2  6A0D               	clrf	init_app_eeprom@j,c
  5148  0028B4                     l3827:
  5149                           
  5150                           ;main.c: 445: writeEEPROM( 0x21 + 23 + 0 + i * 8 + j, 0 );
  5151  0028B4  500D               	movf	init_app_eeprom@j,w,c
  5152  0028B6  C00E  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  5153  0028BA  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  5154  0028BC  90D8               	bcf	status,0,c
  5155  0028BE  360B               	rlcf	??_init_app_eeprom,f,c
  5156  0028C0  360C               	rlcf	??_init_app_eeprom+1,f,c
  5157  0028C2  90D8               	bcf	status,0,c
  5158  0028C4  360B               	rlcf	??_init_app_eeprom,f,c
  5159  0028C6  360C               	rlcf	??_init_app_eeprom+1,f,c
  5160  0028C8  90D8               	bcf	status,0,c
  5161  0028CA  360B               	rlcf	??_init_app_eeprom,f,c
  5162  0028CC  360C               	rlcf	??_init_app_eeprom+1,f,c
  5163  0028CE  260B               	addwf	??_init_app_eeprom,f,c
  5164  0028D0  0E00               	movlw	0
  5165  0028D2  220C               	addwfc	??_init_app_eeprom+1,f,c
  5166  0028D4  0E38               	movlw	56
  5167  0028D6  240B               	addwf	??_init_app_eeprom,w,c
  5168  0028D8  6E08               	movwf	?_writeEEPROM,c
  5169  0028DA  0E00               	movlw	0
  5170  0028DC  200C               	addwfc	??_init_app_eeprom+1,w,c
  5171  0028DE  6E09               	movwf	?_writeEEPROM+1,c
  5172  0028E0  0E00               	movlw	0
  5173  0028E2  6A0A               	clrf	?_writeEEPROM+2,c
  5174  0028E4  EC18  F017         	call	_writeEEPROM	;wreg free
  5175  0028E8  2A0D               	incf	init_app_eeprom@j,f,c
  5176  0028EA  0E07               	movlw	7
  5177  0028EC  640D               	cpfsgt	init_app_eeprom@j,c
  5178  0028EE  D7E2               	goto	l3827
  5179  0028F0  2A0E               	incf	init_app_eeprom@i,f,c
  5180  0028F2  640E               	cpfsgt	init_app_eeprom@i,c
  5181  0028F4  D7DE               	goto	l177
  5182  0028F6  0C07               	retlw	7
  5183  0028F8                     __end_of_init_app_eeprom:
  5184                           	opt stack 0
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           postinc0	equ	0xFEE
  5188                           wreg	equ	0xFE8
  5189                           indf1	equ	0xFE7
  5190                           fsr1h	equ	0xFE2
  5191                           fsr1l	equ	0xFE1
  5192                           indf2	equ	0xFDF
  5193                           postinc2	equ	0xFDE
  5194                           postdec2	equ	0xFDD
  5195                           fsr2h	equ	0xFDA
  5196                           fsr2l	equ	0xFD9
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _vscp_setUserID *****************
  5200 ;; Defined at:
  5201 ;;		line 1262 in file "../main.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  idx             1    wreg     unsigned char 
  5204 ;;  data            1   10[COMRAM] unsigned char 
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  idx             1   11[COMRAM] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : F/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5216 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5219 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5220 ;;Total ram usage:        2 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    3
  5223 ;; This function calls:
  5224 ;;		_writeEEPROM
  5225 ;; This function is called by:
  5226 ;;		_vscp_writeStdReg
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text20
  5231  002FA8                     __ptext20:
  5232                           	opt stack 0
  5233  002FA8                     _vscp_setUserID:
  5234                           	opt stack 25
  5235                           
  5236                           ;incstack = 0
  5237                           ;incstack = 0
  5238                           ;vscp_setUserID@idx stored from wreg
  5239  002FA8  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;main.c: 1263: writeEEPROM( idx + 0x04, data );
  5243  002FAC  0E04               	movlw	4
  5244  002FAE  240C               	addwf	vscp_setUserID@idx,w,c
  5245  002FB0  6E08               	movwf	?_writeEEPROM,c
  5246  002FB2  6A09               	clrf	?_writeEEPROM+1,c
  5247  002FB4  0E00               	movlw	0
  5248  002FB6  2209               	addwfc	?_writeEEPROM+1,f,c
  5249  002FB8  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  5250  002FBC  EF18  F017         	goto	_writeEEPROM	;wreg free
  5251  002FC0                     __end_of_vscp_setUserID:
  5252                           	opt stack 0
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           postinc0	equ	0xFEE
  5256                           wreg	equ	0xFE8
  5257                           indf1	equ	0xFE7
  5258                           fsr1h	equ	0xFE2
  5259                           fsr1l	equ	0xFE1
  5260                           indf2	equ	0xFDF
  5261                           postinc2	equ	0xFDE
  5262                           postdec2	equ	0xFDD
  5263                           fsr2h	equ	0xFDA
  5264                           fsr2l	equ	0xFD9
  5265                           status	equ	0xFD8
  5266                           
  5267 ;; *************** function _vscp_setManufacturerId *****************
  5268 ;; Defined at:
  5269 ;;		line 507 in file "../main.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  idx             1    wreg     unsigned char 
  5272 ;;  data            1   10[COMRAM] unsigned char 
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;  idx             1   11[COMRAM] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : F/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5284 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5285 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5287 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5288 ;;Total ram usage:        2 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    3
  5291 ;; This function calls:
  5292 ;;		_writeEEPROM
  5293 ;; This function is called by:
  5294 ;;		_vscp_writeStdReg
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           	psect	text21
  5299  002E7A                     __ptext21:
  5300                           	opt stack 0
  5301  002E7A                     _vscp_setManufacturerId:
  5302                           	opt stack 25
  5303                           
  5304                           ;incstack = 0
  5305                           ;incstack = 0
  5306                           ;vscp_setManufacturerId@idx stored from wreg
  5307  002E7A  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;main.c: 508: if ( idx>7 ) return;
  5311  002E7E  0E07               	movlw	7
  5312  002E80  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  5313  002E82  D001               	goto	l4619
  5314  002E84  0C07               	retlw	7
  5315  002E86                     l4619:
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;main.c: 509: writeEEPROM(0x09 + idx, data);
  5319  002E86  0E09               	movlw	9
  5320  002E88  240C               	addwf	vscp_setManufacturerId@idx,w,c
  5321  002E8A  6E08               	movwf	?_writeEEPROM,c
  5322  002E8C  6A09               	clrf	?_writeEEPROM+1,c
  5323  002E8E  0E00               	movlw	0
  5324  002E90  2209               	addwfc	?_writeEEPROM+1,f,c
  5325  002E92  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  5326  002E96  EF18  F017         	goto	_writeEEPROM	;wreg free
  5327  002E9A                     __end_of_vscp_setManufacturerId:
  5328                           	opt stack 0
  5329                           prodh	equ	0xFF4
  5330                           prodl	equ	0xFF3
  5331                           postinc0	equ	0xFEE
  5332                           wreg	equ	0xFE8
  5333                           indf1	equ	0xFE7
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _vscp_setGUID *****************
  5344 ;; Defined at:
  5345 ;;		line 495 in file "../main.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  idx             1    wreg     unsigned char 
  5348 ;;  data            1   10[COMRAM] unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  idx             1   11[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;		None               void
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : F/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5360 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5361 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5363 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5364 ;;Total ram usage:        2 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    3
  5367 ;; This function calls:
  5368 ;;		_writeEEPROM
  5369 ;; This function is called by:
  5370 ;;		_vscp_writeStdReg
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text22
  5375  002E9A                     __ptext22:
  5376                           	opt stack 0
  5377  002E9A                     _vscp_setGUID:
  5378                           	opt stack 25
  5379                           
  5380                           ;incstack = 0
  5381                           ;incstack = 0
  5382                           ;vscp_setGUID@idx stored from wreg
  5383  002E9A  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;main.c: 496: if ( idx>15 ) return;
  5387  002E9E  0E0F               	movlw	15
  5388  002EA0  640C               	cpfsgt	vscp_setGUID@idx,c
  5389  002EA2  D001               	goto	l4613
  5390  002EA4  0C0F               	retlw	15
  5391  002EA6                     l4613:
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;main.c: 497: writeEEPROM(0x11 + idx, data);
  5395  002EA6  0E11               	movlw	17
  5396  002EA8  240C               	addwf	vscp_setGUID@idx,w,c
  5397  002EAA  6E08               	movwf	?_writeEEPROM,c
  5398  002EAC  6A09               	clrf	?_writeEEPROM+1,c
  5399  002EAE  0E00               	movlw	0
  5400  002EB0  2209               	addwfc	?_writeEEPROM+1,f,c
  5401  002EB2  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  5402  002EB6  EF18  F017         	goto	_writeEEPROM	;wreg free
  5403  002EBA                     __end_of_vscp_setGUID:
  5404                           	opt stack 0
  5405                           prodh	equ	0xFF4
  5406                           prodl	equ	0xFF3
  5407                           postinc0	equ	0xFEE
  5408                           wreg	equ	0xFE8
  5409                           indf1	equ	0xFE7
  5410                           fsr1h	equ	0xFE2
  5411                           fsr1l	equ	0xFE1
  5412                           indf2	equ	0xFDF
  5413                           postinc2	equ	0xFDE
  5414                           postdec2	equ	0xFDD
  5415                           fsr2h	equ	0xFDA
  5416                           fsr2l	equ	0xFD9
  5417                           status	equ	0xFD8
  5418                           
  5419 ;; *************** function _vscp_writeAppReg *****************
  5420 ;; Defined at:
  5421 ;;		line 641 in file "../main.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  reg             1    wreg     unsigned char 
  5424 ;;  val             1   20[COMRAM] unsigned char 
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;  reg             1   22[COMRAM] unsigned char 
  5427 ;;  rv              1   21[COMRAM] unsigned char 
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      unsigned char 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : F/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5437 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5438 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5440 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5441 ;;Total ram usage:        3 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    4
  5444 ;; This function calls:
  5445 ;;		_readEEPROM
  5446 ;;		_writeControlReg
  5447 ;;		_writeEEPROM
  5448 ;; This function is called by:
  5449 ;;		_vscp_writeRegister
  5450 ;;		_vscp_handleProtocolEvent
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           	psect	text23
  5455  002130                     __ptext23:
  5456                           	opt stack 0
  5457  002130                     _vscp_writeAppReg:
  5458                           	opt stack 24
  5459                           
  5460                           ;incstack = 0
  5461                           ;incstack = 0
  5462                           ;vscp_writeAppReg@reg stored from wreg
  5463  002130  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;main.c: 642: uint8_t rv;
  5467                           ;main.c: 644: rv = ~val;
  5468  002134  1C15               	comf	vscp_writeAppReg@val,w,c
  5469  002136  6E16               	movwf	vscp_writeAppReg@rv,c
  5470                           
  5471                           ;main.c: 647: if ( 0 == vscp_page_select ) {
  5472  002138  5053               	movf	_vscp_page_select+1,w,c
  5473  00213A  1052               	iorwf	_vscp_page_select,w,c
  5474  00213C  E16A               	bnz	l6385
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;main.c: 650: if ( reg == 0 ) {
  5478  00213E  6617               	tstfsz	vscp_writeAppReg@reg,c
  5479  002140  D00D               	goto	l6355
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;main.c: 651: writeEEPROM(0x21 + 0, val);
  5483  002142  6A09               	clrf	?_writeEEPROM+1,c
  5484  002144  0E21               	movlw	33
  5485  002146  6E08               	movwf	?_writeEEPROM,c
  5486  002148  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5487  00214C  EC18  F017         	call	_writeEEPROM	;wreg free
  5488                           
  5489                           ;main.c: 652: rv = readEEPROM(0x21 + 0);
  5490  002150  6A09               	clrf	?_readEEPROM+1,c
  5491  002152  0E21               	movlw	33
  5492  002154  6E08               	movwf	?_readEEPROM,c
  5493  002156  EC27  F018         	call	_readEEPROM	;wreg free
  5494  00215A  D073               	goto	L11
  5495  00215C                     l6355:
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;main.c: 654: else if ( reg == 1 ) {
  5499  00215C  0417               	decf	vscp_writeAppReg@reg,w,c
  5500  00215E  E10D               	bnz	l6359
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;main.c: 656: writeEEPROM(0x21 + 1, val);
  5504  002160  6A09               	clrf	?_writeEEPROM+1,c
  5505  002162  0E22               	movlw	34
  5506  002164  6E08               	movwf	?_writeEEPROM,c
  5507  002166  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5508  00216A  EC18  F017         	call	_writeEEPROM	;wreg free
  5509                           
  5510                           ;main.c: 657: rv = readEEPROM(0x21 + 1);
  5511  00216E  6A09               	clrf	?_readEEPROM+1,c
  5512  002170  0E22               	movlw	34
  5513  002172  6E08               	movwf	?_readEEPROM,c
  5514  002174  EC27  F018         	call	_readEEPROM	;wreg free
  5515  002178  D064               	goto	L11
  5516  00217A                     l6359:
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;main.c: 660: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5520  00217A  0E04               	movlw	4
  5521  00217C  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5522  00217E  D016               	goto	l6365
  5523                           
  5524                           ; BSR set to: 0
  5525  002180  0E17               	movlw	23
  5526  002182  6017               	cpfslt	vscp_writeAppReg@reg,c
  5527  002184  D013               	goto	l6365
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;main.c: 661: writeEEPROM(0x21 + 5 +
  5531                           ;main.c: 662: ( reg - 5 ), val);
  5532  002186  0E21               	movlw	33
  5533  002188  2417               	addwf	vscp_writeAppReg@reg,w,c
  5534  00218A  6E08               	movwf	?_writeEEPROM,c
  5535  00218C  6A09               	clrf	?_writeEEPROM+1,c
  5536  00218E  0E00               	movlw	0
  5537  002190  2209               	addwfc	?_writeEEPROM+1,f,c
  5538  002192  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5539  002196  EC18  F017         	call	_writeEEPROM	;wreg free
  5540                           
  5541                           ;main.c: 663: rv = readEEPROM( 0x21 + 5 +
  5542                           ;main.c: 664: ( reg - 5 ) );
  5543  00219A  0E21               	movlw	33
  5544  00219C  2417               	addwf	vscp_writeAppReg@reg,w,c
  5545  00219E  6E08               	movwf	?_readEEPROM,c
  5546  0021A0  6A09               	clrf	?_readEEPROM+1,c
  5547  0021A2  0E00               	movlw	0
  5548  0021A4  2209               	addwfc	?_readEEPROM+1,f,c
  5549  0021A6  EC27  F018         	call	_readEEPROM	;wreg free
  5550  0021AA  D04B               	goto	L11
  5551  0021AC                     l6365:
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;main.c: 667: else if ( reg == 2 ) {
  5555  0021AC  5017               	movf	vscp_writeAppReg@reg,w,c
  5556  0021AE  0A02               	xorlw	2
  5557  0021B0  E10D               	bnz	l6371
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;main.c: 668: writeEEPROM(0x21 + 2, val);
  5561  0021B2  6A09               	clrf	?_writeEEPROM+1,c
  5562  0021B4  0E23               	movlw	35
  5563  0021B6  6E08               	movwf	?_writeEEPROM,c
  5564  0021B8  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5565  0021BC  EC18  F017         	call	_writeEEPROM	;wreg free
  5566                           
  5567                           ;main.c: 669: rv = writeControlReg( 0, val );
  5568  0021C0  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5569  0021C4  0E00               	movlw	0
  5570  0021C6  ECC6  F00D         	call	_writeControlReg
  5571  0021CA  D03B               	goto	L11
  5572  0021CC                     l6371:
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;main.c: 672: else if ( reg == 3 ) {
  5576  0021CC  5017               	movf	vscp_writeAppReg@reg,w,c
  5577  0021CE  0A03               	xorlw	3
  5578  0021D0  E10D               	bnz	l6377
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;main.c: 673: writeEEPROM(0x21 + 3, val);
  5582  0021D2  6A09               	clrf	?_writeEEPROM+1,c
  5583  0021D4  0E24               	movlw	36
  5584  0021D6  6E08               	movwf	?_writeEEPROM,c
  5585  0021D8  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5586  0021DC  EC18  F017         	call	_writeEEPROM	;wreg free
  5587                           
  5588                           ;main.c: 674: rv = writeControlReg( 1, val );
  5589  0021E0  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5590  0021E4  0E01               	movlw	1
  5591  0021E6  ECC6  F00D         	call	_writeControlReg
  5592  0021EA  D02B               	goto	L11
  5593  0021EC                     l6377:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;main.c: 677: else if ( reg == 4 ) {
  5597  0021EC  5017               	movf	vscp_writeAppReg@reg,w,c
  5598  0021EE  0A04               	xorlw	4
  5599  0021F0  E129               	bnz	l6391
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;main.c: 678: writeEEPROM(0x21 + 4, val);
  5603  0021F2  6A09               	clrf	?_writeEEPROM+1,c
  5604  0021F4  0E25               	movlw	37
  5605  0021F6  6E08               	movwf	?_writeEEPROM,c
  5606  0021F8  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5607  0021FC  EC18  F017         	call	_writeEEPROM	;wreg free
  5608                           
  5609                           ;main.c: 679: rv = writeControlReg( 2, val );
  5610  002200  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5611  002204  0E02               	movlw	2
  5612  002206  ECC6  F00D         	call	_writeControlReg
  5613  00220A  6E16               	movwf	vscp_writeAppReg@rv,c
  5614                           
  5615                           ;main.c: 680: rv &= 0x03;
  5616  00220C  0E03               	movlw	3
  5617  00220E  1616               	andwf	vscp_writeAppReg@rv,f,c
  5618  002210  D019               	goto	l6391
  5619  002212                     l6385:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;main.c: 685: else if ( 1 == vscp_page_select ) {
  5623  002212  0452               	decf	_vscp_page_select,w,c
  5624  002214  1053               	iorwf	_vscp_page_select+1,w,c
  5625  002216  E116               	bnz	l6391
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;main.c: 688: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5629                           ;main.c: 689: ( 8 * 8 ) ) ) ) {
  5630  002218  0E41               	movlw	65
  5631  00221A  6017               	cpfslt	vscp_writeAppReg@reg,c
  5632  00221C  D013               	goto	l6391
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;main.c: 690: writeEEPROM(0x21 + 23 +
  5636                           ;main.c: 691: ( reg - 0 ), val);
  5637  00221E  0E38               	movlw	56
  5638  002220  2417               	addwf	vscp_writeAppReg@reg,w,c
  5639  002222  6E08               	movwf	?_writeEEPROM,c
  5640  002224  6A09               	clrf	?_writeEEPROM+1,c
  5641  002226  0E00               	movlw	0
  5642  002228  2209               	addwfc	?_writeEEPROM+1,f,c
  5643  00222A  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5644  00222E  EC18  F017         	call	_writeEEPROM	;wreg free
  5645                           
  5646                           ;main.c: 692: rv = readEEPROM(0x21 + 23 +
  5647                           ;main.c: 693: ( reg - 0 ) );
  5648  002232  0E38               	movlw	56
  5649  002234  2417               	addwf	vscp_writeAppReg@reg,w,c
  5650  002236  6E08               	movwf	?_readEEPROM,c
  5651  002238  6A09               	clrf	?_readEEPROM+1,c
  5652  00223A  0E00               	movlw	0
  5653  00223C  2209               	addwfc	?_readEEPROM+1,f,c
  5654  00223E  EC27  F018         	call	_readEEPROM	;wreg free
  5655  002242                     L11:
  5656  002242  6E16               	movwf	vscp_writeAppReg@rv,c
  5657  002244                     l6391:
  5658                           
  5659                           ;main.c: 694: }
  5660                           ;main.c: 696: }
  5661                           ;main.c: 698: return rv;
  5662  002244  5016               	movf	vscp_writeAppReg@rv,w,c
  5663  002246  0012               	return	
  5664  002248                     __end_of_vscp_writeAppReg:
  5665                           	opt stack 0
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           postinc0	equ	0xFEE
  5669                           wreg	equ	0xFE8
  5670                           indf1	equ	0xFE7
  5671                           fsr1h	equ	0xFE2
  5672                           fsr1l	equ	0xFE1
  5673                           indf2	equ	0xFDF
  5674                           postinc2	equ	0xFDE
  5675                           postdec2	equ	0xFDD
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _writeControlReg *****************
  5681 ;; Defined at:
  5682 ;;		line 706 in file "../main.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  ctrlreg         1    wreg     unsigned char 
  5685 ;;  val             1   16[COMRAM] unsigned char 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  5688 ;;  rv              1   19[COMRAM] unsigned char 
  5689 ;; Return value:  Size  Location     Type
  5690 ;;                  1    wreg      unsigned char 
  5691 ;; Registers used:
  5692 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5693 ;; Tracked objects:
  5694 ;;		On entry : 0/0
  5695 ;;		On exit  : 0/0
  5696 ;;		Unchanged: 0/0
  5697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5698 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5700 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5701 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5702 ;;Total ram usage:        4 bytes
  5703 ;; Hardware stack levels used:    1
  5704 ;; Hardware stack levels required when called:    3
  5705 ;; This function calls:
  5706 ;;		_readControlReg
  5707 ;; This function is called by:
  5708 ;;		_main
  5709 ;;		_vscp_writeAppReg
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           	psect	text24
  5714  001B8C                     __ptext24:
  5715                           	opt stack 0
  5716  001B8C                     _writeControlReg:
  5717                           	opt stack 24
  5718                           
  5719                           ;incstack = 0
  5720                           ;incstack = 0
  5721                           ;writeControlReg@ctrlreg stored from wreg
  5722  001B8C  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  5723                           
  5724                           ;main.c: 707: uint8_t rv = 0;
  5725  001B90  6A14               	clrf	writeControlReg@rv,c
  5726                           
  5727                           ;main.c: 709: switch ( ctrlreg ) {
  5728  001B92  D0B9               	goto	l3869
  5729  001B94                     l3855:
  5730  001B94  0E01               	movlw	1
  5731                           
  5732                           ;main.c: 712: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  5733  001B96  A011               	btfss	writeControlReg@val,0,c
  5734  001B98  0E00               	movlw	0
  5735  001B9A  6E12               	movwf	??_writeControlReg& (0+255),c
  5736  001B9C  3212               	rrcf	??_writeControlReg,f,c
  5737  001B9E  3212               	rrcf	??_writeControlReg,f,c
  5738  001BA0  5082               	movf	3970,w,c	;volatile
  5739  001BA2  1812               	xorwf	??_writeControlReg,w,c
  5740  001BA4  0B7F               	andlw	-129
  5741  001BA6  1812               	xorwf	??_writeControlReg,w,c
  5742  001BA8  6E82               	movwf	3970,c	;volatile
  5743  001BAA  0E01               	movlw	1
  5744                           
  5745                           ;main.c: 713: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  5746  001BAC  A211               	btfss	writeControlReg@val,1,c
  5747  001BAE  0E00               	movlw	0
  5748  001BB0  6E12               	movwf	??_writeControlReg& (0+255),c
  5749  001BB2  3A12               	swapf	??_writeControlReg,f,c
  5750  001BB4  4612               	rlncf	??_writeControlReg,f,c
  5751  001BB6  4612               	rlncf	??_writeControlReg,f,c
  5752  001BB8  5082               	movf	3970,w,c	;volatile
  5753  001BBA  1812               	xorwf	??_writeControlReg,w,c
  5754  001BBC  0BBF               	andlw	-65
  5755  001BBE  1812               	xorwf	??_writeControlReg,w,c
  5756  001BC0  6E82               	movwf	3970,c	;volatile
  5757  001BC2  0E01               	movlw	1
  5758                           
  5759                           ;main.c: 714: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  5760  001BC4  A411               	btfss	writeControlReg@val,2,c
  5761  001BC6  0E00               	movlw	0
  5762  001BC8  6E12               	movwf	??_writeControlReg& (0+255),c
  5763  001BCA  4612               	rlncf	??_writeControlReg,f,c
  5764  001BCC  4612               	rlncf	??_writeControlReg,f,c
  5765  001BCE  4612               	rlncf	??_writeControlReg,f,c
  5766  001BD0  5082               	movf	3970,w,c	;volatile
  5767  001BD2  1812               	xorwf	??_writeControlReg,w,c
  5768  001BD4  0BF7               	andlw	-9
  5769  001BD6  1812               	xorwf	??_writeControlReg,w,c
  5770  001BD8  6E82               	movwf	3970,c	;volatile
  5771  001BDA  0E01               	movlw	1
  5772                           
  5773                           ;main.c: 715: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  5774  001BDC  A611               	btfss	writeControlReg@val,3,c
  5775  001BDE  0E00               	movlw	0
  5776  001BE0  6E12               	movwf	??_writeControlReg& (0+255),c
  5777  001BE2  3A12               	swapf	??_writeControlReg,f,c
  5778  001BE4  5082               	movf	3970,w,c	;volatile
  5779  001BE6  1812               	xorwf	??_writeControlReg,w,c
  5780  001BE8  0BEF               	andlw	-17
  5781  001BEA  1812               	xorwf	??_writeControlReg,w,c
  5782  001BEC  6E82               	movwf	3970,c	;volatile
  5783  001BEE  0E01               	movlw	1
  5784                           
  5785                           ;main.c: 716: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  5786  001BF0  A811               	btfss	writeControlReg@val,4,c
  5787  001BF2  0E00               	movlw	0
  5788  001BF4  6E12               	movwf	??_writeControlReg& (0+255),c
  5789  001BF6  3A12               	swapf	??_writeControlReg,f,c
  5790  001BF8  4612               	rlncf	??_writeControlReg,f,c
  5791  001BFA  5082               	movf	3970,w,c	;volatile
  5792  001BFC  1812               	xorwf	??_writeControlReg,w,c
  5793  001BFE  0BDF               	andlw	-33
  5794  001C00  1812               	xorwf	??_writeControlReg,w,c
  5795  001C02  6E82               	movwf	3970,c	;volatile
  5796  001C04  0E01               	movlw	1
  5797                           
  5798                           ;main.c: 717: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  5799  001C06  AA11               	btfss	writeControlReg@val,5,c
  5800  001C08  0E00               	movlw	0
  5801  001C0A  6E12               	movwf	??_writeControlReg& (0+255),c
  5802  001C0C  5080               	movf	3968,w,c	;volatile
  5803  001C0E  1812               	xorwf	??_writeControlReg,w,c
  5804  001C10  0BFE               	andlw	-2
  5805  001C12  1812               	xorwf	??_writeControlReg,w,c
  5806  001C14  6E80               	movwf	3968,c	;volatile
  5807  001C16  0E01               	movlw	1
  5808                           
  5809                           ;main.c: 718: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  5810  001C18  AC11               	btfss	writeControlReg@val,6,c
  5811  001C1A  0E00               	movlw	0
  5812  001C1C  6E12               	movwf	??_writeControlReg& (0+255),c
  5813  001C1E  4612               	rlncf	??_writeControlReg,f,c
  5814  001C20  5080               	movf	3968,w,c	;volatile
  5815  001C22  1812               	xorwf	??_writeControlReg,w,c
  5816  001C24  0BFD               	andlw	-3
  5817  001C26  1812               	xorwf	??_writeControlReg,w,c
  5818  001C28  6E80               	movwf	3968,c	;volatile
  5819  001C2A  0E01               	movlw	1
  5820                           
  5821                           ;main.c: 719: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  5822  001C2C  AE11               	btfss	writeControlReg@val,7,c
  5823  001C2E  0E00               	movlw	0
  5824  001C30  6E12               	movwf	??_writeControlReg& (0+255),c
  5825  001C32  4612               	rlncf	??_writeControlReg,f,c
  5826  001C34  4612               	rlncf	??_writeControlReg,f,c
  5827  001C36  5080               	movf	3968,w,c	;volatile
  5828  001C38  1812               	xorwf	??_writeControlReg,w,c
  5829  001C3A  0BFB               	andlw	-5
  5830  001C3C  1812               	xorwf	??_writeControlReg,w,c
  5831  001C3E  6E80               	movwf	3968,c	;volatile
  5832                           
  5833                           ;main.c: 720: rv = readControlReg( 0 );
  5834  001C40  0E00               	movlw	0
  5835  001C42  EC32  F012         	call	_readControlReg
  5836  001C46  D05D               	goto	L13
  5837  001C48                     l3859:
  5838  001C48  0E01               	movlw	1
  5839                           
  5840                           ;main.c: 724: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  5841  001C4A  A011               	btfss	writeControlReg@val,0,c
  5842  001C4C  0E00               	movlw	0
  5843  001C4E  6E12               	movwf	??_writeControlReg& (0+255),c
  5844  001C50  4612               	rlncf	??_writeControlReg,f,c
  5845  001C52  4612               	rlncf	??_writeControlReg,f,c
  5846  001C54  4612               	rlncf	??_writeControlReg,f,c
  5847  001C56  5080               	movf	3968,w,c	;volatile
  5848  001C58  1812               	xorwf	??_writeControlReg,w,c
  5849  001C5A  0BF7               	andlw	-9
  5850  001C5C  1812               	xorwf	??_writeControlReg,w,c
  5851  001C5E  6E80               	movwf	3968,c	;volatile
  5852  001C60  0E01               	movlw	1
  5853                           
  5854                           ;main.c: 725: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  5855  001C62  A211               	btfss	writeControlReg@val,1,c
  5856  001C64  0E00               	movlw	0
  5857  001C66  6E12               	movwf	??_writeControlReg& (0+255),c
  5858  001C68  3A12               	swapf	??_writeControlReg,f,c
  5859  001C6A  4612               	rlncf	??_writeControlReg,f,c
  5860  001C6C  5080               	movf	3968,w,c	;volatile
  5861  001C6E  1812               	xorwf	??_writeControlReg,w,c
  5862  001C70  0BDF               	andlw	-33
  5863  001C72  1812               	xorwf	??_writeControlReg,w,c
  5864  001C74  6E80               	movwf	3968,c	;volatile
  5865  001C76  0E01               	movlw	1
  5866                           
  5867                           ;main.c: 728: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  5868  001C78  A811               	btfss	writeControlReg@val,4,c
  5869  001C7A  0E00               	movlw	0
  5870  001C7C  6E12               	movwf	??_writeControlReg& (0+255),c
  5871  001C7E  3A12               	swapf	??_writeControlReg,f,c
  5872  001C80  5081               	movf	3969,w,c	;volatile
  5873  001C82  1812               	xorwf	??_writeControlReg,w,c
  5874  001C84  0BEF               	andlw	-17
  5875  001C86  1812               	xorwf	??_writeControlReg,w,c
  5876  001C88  6E81               	movwf	3969,c	;volatile
  5877  001C8A  0E01               	movlw	1
  5878                           
  5879                           ;main.c: 729: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  5880  001C8C  AA11               	btfss	writeControlReg@val,5,c
  5881  001C8E  0E00               	movlw	0
  5882  001C90  6E12               	movwf	??_writeControlReg& (0+255),c
  5883  001C92  4612               	rlncf	??_writeControlReg,f,c
  5884  001C94  4612               	rlncf	??_writeControlReg,f,c
  5885  001C96  5082               	movf	3970,w,c	;volatile
  5886  001C98  1812               	xorwf	??_writeControlReg,w,c
  5887  001C9A  0BFB               	andlw	-5
  5888  001C9C  1812               	xorwf	??_writeControlReg,w,c
  5889  001C9E  6E82               	movwf	3970,c	;volatile
  5890  001CA0  0E01               	movlw	1
  5891                           
  5892                           ;main.c: 730: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  5893  001CA2  AC11               	btfss	writeControlReg@val,6,c
  5894  001CA4  0E00               	movlw	0
  5895  001CA6  6E12               	movwf	??_writeControlReg& (0+255),c
  5896  001CA8  4612               	rlncf	??_writeControlReg,f,c
  5897  001CAA  5081               	movf	3969,w,c	;volatile
  5898  001CAC  1812               	xorwf	??_writeControlReg,w,c
  5899  001CAE  0BFD               	andlw	-3
  5900  001CB0  1812               	xorwf	??_writeControlReg,w,c
  5901  001CB2  6E81               	movwf	3969,c	;volatile
  5902  001CB4  0E01               	movlw	1
  5903                           
  5904                           ;main.c: 731: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  5905  001CB6  AE11               	btfss	writeControlReg@val,7,c
  5906  001CB8  0E00               	movlw	0
  5907  001CBA  6E12               	movwf	??_writeControlReg& (0+255),c
  5908  001CBC  5081               	movf	3969,w,c	;volatile
  5909  001CBE  1812               	xorwf	??_writeControlReg,w,c
  5910  001CC0  0BFE               	andlw	-2
  5911  001CC2  1812               	xorwf	??_writeControlReg,w,c
  5912  001CC4  6E81               	movwf	3969,c	;volatile
  5913                           
  5914                           ;main.c: 732: rv = readControlReg( 1 );
  5915  001CC6  0E01               	movlw	1
  5916  001CC8  EC32  F012         	call	_readControlReg
  5917  001CCC  D01A               	goto	L13
  5918  001CCE                     l3863:
  5919  001CCE  0E01               	movlw	1
  5920                           
  5921                           ;main.c: 736: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  5922  001CD0  A011               	btfss	writeControlReg@val,0,c
  5923  001CD2  0E00               	movlw	0
  5924  001CD4  6E12               	movwf	??_writeControlReg& (0+255),c
  5925  001CD6  3A12               	swapf	??_writeControlReg,f,c
  5926  001CD8  4612               	rlncf	??_writeControlReg,f,c
  5927  001CDA  4612               	rlncf	??_writeControlReg,f,c
  5928  001CDC  5081               	movf	3969,w,c	;volatile
  5929  001CDE  1812               	xorwf	??_writeControlReg,w,c
  5930  001CE0  0BBF               	andlw	-65
  5931  001CE2  1812               	xorwf	??_writeControlReg,w,c
  5932  001CE4  6E81               	movwf	3969,c	;volatile
  5933  001CE6  0E01               	movlw	1
  5934                           
  5935                           ;main.c: 737: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  5936  001CE8  A211               	btfss	writeControlReg@val,1,c
  5937  001CEA  0E00               	movlw	0
  5938  001CEC  6E12               	movwf	??_writeControlReg& (0+255),c
  5939  001CEE  3A12               	swapf	??_writeControlReg,f,c
  5940  001CF0  4612               	rlncf	??_writeControlReg,f,c
  5941  001CF2  5081               	movf	3969,w,c	;volatile
  5942  001CF4  1812               	xorwf	??_writeControlReg,w,c
  5943  001CF6  0BDF               	andlw	-33
  5944  001CF8  1812               	xorwf	??_writeControlReg,w,c
  5945  001CFA  6E81               	movwf	3969,c	;volatile
  5946                           
  5947                           ;main.c: 738: rv = readControlReg( 2 );
  5948  001CFC  0E02               	movlw	2
  5949  001CFE  EC32  F012         	call	_readControlReg
  5950  001D02                     L13:
  5951  001D02  6E14               	movwf	writeControlReg@rv,c
  5952                           
  5953                           ;main.c: 739: break;
  5954  001D04  D007               	goto	l3871
  5955  001D06                     l3869:
  5956  001D06  5013               	movf	writeControlReg@ctrlreg,w,c
  5957                           
  5958                           ; Switch size 1, requested type "speed"
  5959                           ; Number of cases is 3, Range of values is 0 to 2
  5960                           ; switch strategies available:
  5961                           ; Name         Instructions Cycles
  5962                           ; simple_byte           10     6 (average)
  5963                           ;	Chosen strategy is simple_byte
  5964  001D08  E101 D744          	bz	l3855
  5965  001D0C  0A01               	xorlw	1	; case 1
  5966  001D0E  E09C               	bz	l3859
  5967  001D10  0A03               	xorlw	3	; case 2
  5968  001D12  E0DD               	bz	l3863
  5969  001D14                     l3871:
  5970                           
  5971                           ;main.c: 742: return rv;
  5972  001D14  5014               	movf	writeControlReg@rv,w,c
  5973  001D16  0012               	return	
  5974  001D18                     __end_of_writeControlReg:
  5975                           	opt stack 0
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           postinc0	equ	0xFEE
  5979                           wreg	equ	0xFE8
  5980                           indf1	equ	0xFE7
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           fsr2h	equ	0xFDA
  5987                           fsr2l	equ	0xFD9
  5988                           status	equ	0xFD8
  5989                           
  5990 ;; *************** function _vscp_readRegister *****************
  5991 ;; Defined at:
  5992 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  reg             1    wreg     unsigned char 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  reg             1   28[COMRAM] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      unsigned char 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : F/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6009 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6010 ;;Total ram usage:        1 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    5
  6013 ;; This function calls:
  6014 ;;		_vscp_readAppReg
  6015 ;;		_vscp_readStdReg
  6016 ;; This function is called by:
  6017 ;;		_vscp_handleProtocolEvent
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text25
  6022  002FD8                     __ptext25:
  6023                           	opt stack 0
  6024  002FD8                     _vscp_readRegister:
  6025                           	opt stack 24
  6026                           
  6027                           ;incstack = 0
  6028                           ;incstack = 0
  6029                           ;vscp_readRegister@reg stored from wreg
  6030  002FD8  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
  6034  002FDC  0E7F               	movlw	127
  6035  002FDE  641D               	cpfsgt	vscp_readRegister@reg,c
  6036  002FE0  D003               	goto	l6677
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
  6040  002FE2  501D               	movf	vscp_readRegister@reg,w,c
  6041  002FE4  EFEF  F00C         	goto	_vscp_readStdReg
  6042  002FE8                     l6677:
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
  6046  002FE8  501D               	movf	vscp_readRegister@reg,w,c
  6047  002FEA  EF7C  F014         	goto	_vscp_readAppReg
  6048  002FEE                     __end_of_vscp_readRegister:
  6049                           	opt stack 0
  6050                           prodh	equ	0xFF4
  6051                           prodl	equ	0xFF3
  6052                           postinc0	equ	0xFEE
  6053                           wreg	equ	0xFE8
  6054                           indf1	equ	0xFE7
  6055                           fsr1h	equ	0xFE2
  6056                           fsr1l	equ	0xFE1
  6057                           indf2	equ	0xFDF
  6058                           postinc2	equ	0xFDE
  6059                           postdec2	equ	0xFDD
  6060                           fsr2h	equ	0xFDA
  6061                           fsr2l	equ	0xFD9
  6062                           status	equ	0xFD8
  6063                           
  6064 ;; *************** function _vscp_readStdReg *****************
  6065 ;; Defined at:
  6066 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  reg             1    wreg     unsigned char 
  6069 ;; Auto vars:     Size  Location     Type
  6070 ;;  reg             1   27[COMRAM] unsigned char 
  6071 ;;  code            4   20[COMRAM] unsigned long 
  6072 ;;  idx             1   25[COMRAM] unsigned char 
  6073 ;;  code            4   16[COMRAM] unsigned long 
  6074 ;;  idx             1   24[COMRAM] unsigned char 
  6075 ;;  rv              1   26[COMRAM] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      unsigned char 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : F/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6086 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6087 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6088 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6089 ;;Total ram usage:       17 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    4
  6092 ;; This function calls:
  6093 ;;		_vscp_getMajorVersion
  6094 ;;		_vscp_getMinorVersion
  6095 ;;		_vscp_getSubMinorVersion
  6096 ;;		_vscp_getGUID
  6097 ;;		_vscp_getMDF_URL
  6098 ;;		_vscp_getUserID
  6099 ;;		_vscp_getManufacturerId
  6100 ;;		_vscp_getBootLoaderAlgorithm
  6101 ;;		_vscp_getBufferSize
  6102 ;;		_vscp_getFamilyCode
  6103 ;;		_vscp_getFamilyType
  6104 ;;		_vscp_getRegisterPagesUsed
  6105 ;; This function is called by:
  6106 ;;		_vscp_readRegister
  6107 ;;		_vscp_handleProtocolEvent
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           	psect	text26
  6112  0019DE                     __ptext26:
  6113                           	opt stack 0
  6114  0019DE                     _vscp_readStdReg:
  6115                           	opt stack 25
  6116                           
  6117                           ;incstack = 0
  6118                           ;incstack = 0
  6119                           ;vscp_readStdReg@reg stored from wreg
  6120  0019DE  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;vscp_firmware.c: 567: uint8_t rv = 0;
  6124  0019E2  6A1B               	clrf	vscp_readStdReg@rv,c
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;vscp_firmware.c: 569: if (0x80 == reg) {
  6128  0019E4  501C               	movf	vscp_readStdReg@reg,w,c
  6129  0019E6  0A80               	xorlw	128
  6130  0019E8  E104               	bnz	l6687
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
  6134  0019EA  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  6135                           
  6136                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
  6137  0019EE  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6138                           
  6139                           ;vscp_firmware.c: 575: }
  6140  0019F0  D0CB               	goto	l6775
  6141  0019F2                     l6687:
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
  6145  0019F2  501C               	movf	vscp_readStdReg@reg,w,c
  6146  0019F4  0A81               	xorlw	129
  6147  0019F6  E102               	bnz	l6691
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;vscp_firmware.c: 579: rv = 1;
  6151  0019F8  0E01               	movlw	1
  6152  0019FA  D081               	goto	L24
  6153  0019FC                     l6691:
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
  6157  0019FC  501C               	movf	vscp_readStdReg@reg,w,c
  6158  0019FE  0A82               	xorlw	130
  6159  001A00  E102               	bnz	l6695
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;vscp_firmware.c: 585: rv = 5;
  6163  001A02  0E05               	movlw	5
  6164  001A04  D07C               	goto	L24
  6165  001A06                     l6695:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
  6169  001A06  501C               	movf	vscp_readStdReg@reg,w,c
  6170  001A08  0A83               	xorlw	131
  6171  001A0A  E102               	bnz	l6699
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;vscp_firmware.c: 591: rv = 0;
  6175  001A0C  6A1B               	clrf	vscp_readStdReg@rv,c
  6176                           
  6177                           ;vscp_firmware.c: 593: }
  6178  001A0E  D0BC               	goto	l6775
  6179  001A10                     l6699:
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
  6183  001A10  501C               	movf	vscp_readStdReg@reg,w,c
  6184  001A12  0A94               	xorlw	148
  6185  001A14  E103               	bnz	l6703
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
  6189  001A16  EC7F  F018         	call	_vscp_getMajorVersion	;wreg free
  6190  001A1A  D071               	goto	L24
  6191  001A1C                     l6703:
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
  6195  001A1C  501C               	movf	vscp_readStdReg@reg,w,c
  6196  001A1E  0A95               	xorlw	149
  6197  001A20  E103               	bnz	l6707
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
  6201  001A22  EC7E  F018         	call	_vscp_getMinorVersion	;wreg free
  6202  001A26  D06B               	goto	L24
  6203  001A28                     l6707:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
  6207  001A28  501C               	movf	vscp_readStdReg@reg,w,c
  6208  001A2A  0A96               	xorlw	150
  6209  001A2C  E103               	bnz	l6711
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
  6213  001A2E  EC7D  F018         	call	_vscp_getSubMinorVersion	;wreg free
  6214  001A32  D065               	goto	L24
  6215  001A34                     l6711:
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
  6219  001A34  0E89               	movlw	137
  6220  001A36  601C               	cpfslt	vscp_readStdReg@reg,c
  6221  001A38  D005               	goto	l6715
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
  6225  001A3A  501C               	movf	vscp_readStdReg@reg,w,c
  6226  001A3C  0F7C               	addlw	124
  6227  001A3E  EC01  F018         	call	_vscp_getUserID
  6228  001A42  D05D               	goto	L24
  6229  001A44                     l6715:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
  6233                           ;vscp_firmware.c: 619: (reg < 0x91)) {
  6234  001A44  0E88               	movlw	136
  6235  001A46  641C               	cpfsgt	vscp_readStdReg@reg,c
  6236  001A48  D008               	goto	l6721
  6237                           
  6238                           ; BSR set to: 0
  6239  001A4A  0E91               	movlw	145
  6240  001A4C  601C               	cpfslt	vscp_readStdReg@reg,c
  6241  001A4E  D005               	goto	l6721
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
  6245  001A50  501C               	movf	vscp_readStdReg@reg,w,c
  6246  001A52  0F77               	addlw	119
  6247  001A54  ECF7  F017         	call	_vscp_getManufacturerId
  6248  001A58  D052               	goto	L24
  6249  001A5A                     l6721:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
  6253  001A5A  501C               	movf	vscp_readStdReg@reg,w,c
  6254  001A5C  0A91               	xorlw	145
  6255  001A5E  E103               	bnz	l6725
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;vscp_firmware.c: 628: rv = vscp_nickname;
  6259  001A60  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6260                           
  6261                           ;vscp_firmware.c: 630: }
  6262  001A64  D091               	goto	l6775
  6263  001A66                     l6725:
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
  6267  001A66  501C               	movf	vscp_readStdReg@reg,w,c
  6268  001A68  0A93               	xorlw	147
  6269  001A6A  E103               	bnz	l6729
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
  6273  001A6C  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6274                           
  6275                           ;vscp_firmware.c: 636: }
  6276  001A70  D08B               	goto	l6775
  6277  001A72                     l6729:
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
  6281  001A72  501C               	movf	vscp_readStdReg@reg,w,c
  6282  001A74  0A92               	xorlw	146
  6283  001A76  E102               	bnz	l6733
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
  6287  001A78  5053               	movf	_vscp_page_select+1,w,c
  6288  001A7A  D041               	goto	L24
  6289  001A7C                     l6733:
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
  6293  001A7C  501C               	movf	vscp_readStdReg@reg,w,c
  6294  001A7E  0A97               	xorlw	151
  6295  001A80  E103               	bnz	l6737
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
  6299  001A82  EC7C  F018         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6300  001A86  D03B               	goto	L24
  6301  001A88                     l6737:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
  6305  001A88  501C               	movf	vscp_readStdReg@reg,w,c
  6306  001A8A  0A98               	xorlw	152
  6307  001A8C  E103               	bnz	l6741
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
  6311  001A8E  EC7B  F018         	call	_vscp_getBufferSize	;wreg free
  6312  001A92  D035               	goto	L24
  6313  001A94                     l6741:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
  6317  001A94  501C               	movf	vscp_readStdReg@reg,w,c
  6318  001A96  0A99               	xorlw	153
  6319  001A98  E103               	bnz	l6745
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
  6323  001A9A  EC7A  F018         	call	_vscp_getRegisterPagesUsed	;wreg free
  6324  001A9E  D02F               	goto	L24
  6325  001AA0                     l6745:
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;vscp_firmware.c: 656: else if ( ( reg >= 0x9A ) &&
  6329                           ;vscp_firmware.c: 657: ( reg < ( 0x9A + 4 ) ) ) {
  6330  001AA0  0E99               	movlw	153
  6331  001AA2  641C               	cpfsgt	vscp_readStdReg@reg,c
  6332  001AA4  D02E               	goto	l6755
  6333                           
  6334                           ; BSR set to: 0
  6335  001AA6  0E9E               	movlw	158
  6336  001AA8  601C               	cpfslt	vscp_readStdReg@reg,c
  6337  001AAA  D02B               	goto	l6755
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;vscp_firmware.c: 659: uint32_t code = vscp_getFamilyCode();
  6341  001AAC  EC63  F018         	call	_vscp_getFamilyCode	;wreg free
  6342  001AB0  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6343  001AB4  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6344  001AB8  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6345  001ABC  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;vscp_firmware.c: 660: uint8_t idx = reg - 0x9A;
  6349  001AC0  501C               	movf	vscp_readStdReg@reg,w,c
  6350  001AC2  0F66               	addlw	102
  6351  001AC4  6E19               	movwf	vscp_readStdReg@idx,c
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;vscp_firmware.c: 661: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6355  001AC6  5019               	movf	vscp_readStdReg@idx,w,c
  6356  001AC8  0803               	sublw	3
  6357  001ACA  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6358  001ACC  90D8               	bcf	status,0,c
  6359  001ACE  360C               	rlcf	??_vscp_readStdReg,f,c
  6360  001AD0  90D8               	bcf	status,0,c
  6361  001AD2  360C               	rlcf	??_vscp_readStdReg,f,c
  6362  001AD4  90D8               	bcf	status,0,c
  6363  001AD6  360C               	rlcf	??_vscp_readStdReg,f,c
  6364  001AD8  500C               	movf	??_vscp_readStdReg,w,c
  6365  001ADA  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6366  001ADE  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6367  001AE2  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6368  001AE6  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6369  001AEA  2AE8               	incf	wreg,f,c
  6370  001AEC  D005               	goto	u7280
  6371  001AEE                     u7285:
  6372  001AEE  90D8               	bcf	status,0,c
  6373  001AF0  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6374  001AF2  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6375  001AF4  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6376  001AF6  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6377  001AF8                     u7280:
  6378  001AF8  2EE8               	decfsz	wreg,f,c
  6379  001AFA  D7F9               	goto	u7285
  6380  001AFC  D030               	goto	L25
  6381  001AFE                     L24:
  6382  001AFE  6E1B               	movwf	vscp_readStdReg@rv,c
  6383                           
  6384                           ;vscp_firmware.c: 662: }
  6385  001B00  D043               	goto	l6775
  6386  001B02                     l6755:
  6387                           
  6388                           ; BSR set to: 0
  6389                           ;vscp_firmware.c: 663: else if ( ( reg >= 0x9E ) &&
  6390                           ;vscp_firmware.c: 664: ( reg < ( 0x9E + 4 ) ) ) {
  6391  001B02  0E9D               	movlw	157
  6392  001B04  641C               	cpfsgt	vscp_readStdReg@reg,c
  6393  001B06  D02D               	goto	l6765
  6394                           
  6395                           ; BSR set to: 0
  6396  001B08  0EA2               	movlw	162
  6397  001B0A  601C               	cpfslt	vscp_readStdReg@reg,c
  6398  001B0C  D02A               	goto	l6765
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;vscp_firmware.c: 666: uint32_t code = vscp_getFamilyType();
  6402  001B0E  EC5E  F018         	call	_vscp_getFamilyType	;wreg free
  6403  001B12  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1113+3
  6404  001B16  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1113+2
  6405  001B1A  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1113+1
  6406  001B1E  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1113
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;vscp_firmware.c: 667: uint8_t idx = reg - 0x9E;
  6410  001B22  501C               	movf	vscp_readStdReg@reg,w,c
  6411  001B24  0F62               	addlw	98
  6412  001B26  6E1A               	movwf	vscp_readStdReg@idx_1114,c
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;vscp_firmware.c: 668: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6416  001B28  501A               	movf	vscp_readStdReg@idx_1114,w,c
  6417  001B2A  0803               	sublw	3
  6418  001B2C  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6419  001B2E  90D8               	bcf	status,0,c
  6420  001B30  360C               	rlcf	??_vscp_readStdReg,f,c
  6421  001B32  90D8               	bcf	status,0,c
  6422  001B34  360C               	rlcf	??_vscp_readStdReg,f,c
  6423  001B36  90D8               	bcf	status,0,c
  6424  001B38  360C               	rlcf	??_vscp_readStdReg,f,c
  6425  001B3A  500C               	movf	??_vscp_readStdReg,w,c
  6426  001B3C  C015  F00D         	movff	vscp_readStdReg@code_1113,??_vscp_readStdReg+1
  6427  001B40  C016  F00E         	movff	vscp_readStdReg@code_1113+1,??_vscp_readStdReg+2
  6428  001B44  C017  F00F         	movff	vscp_readStdReg@code_1113+2,??_vscp_readStdReg+3
  6429  001B48  C018  F010         	movff	vscp_readStdReg@code_1113+3,??_vscp_readStdReg+4
  6430  001B4C  2AE8               	incf	wreg,f,c
  6431  001B4E  D005               	goto	u7310
  6432  001B50                     u7315:
  6433  001B50  90D8               	bcf	status,0,c
  6434  001B52  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6435  001B54  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6436  001B56  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6437  001B58  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6438  001B5A                     u7310:
  6439  001B5A  2EE8               	decfsz	wreg,f,c
  6440  001B5C  D7F9               	goto	u7315
  6441  001B5E                     L25:
  6442  001B5E  500D               	movf	??_vscp_readStdReg+1,w,c
  6443  001B60  D7CE               	goto	L24
  6444  001B62                     l6765:
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;vscp_firmware.c: 670: else if ((reg > (0xD0 - 1)) &&
  6448                           ;vscp_firmware.c: 671: (reg < 0xE0)) {
  6449  001B62  0ECF               	movlw	207
  6450  001B64  641C               	cpfsgt	vscp_readStdReg@reg,c
  6451  001B66  D008               	goto	l6771
  6452                           
  6453                           ; BSR set to: 0
  6454  001B68  0EE0               	movlw	224
  6455  001B6A  601C               	cpfslt	vscp_readStdReg@reg,c
  6456  001B6C  D005               	goto	l6771
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;vscp_firmware.c: 674: rv = vscp_getGUID(reg - 0xD0);
  6460  001B6E  501C               	movf	vscp_readStdReg@reg,w,c
  6461  001B70  0F30               	addlw	48
  6462  001B72  EC0B  F018         	call	_vscp_getGUID
  6463  001B76  D7C3               	goto	L24
  6464  001B78                     l6771:
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;vscp_firmware.c: 677: else if ( reg >= 0xE0 ) {
  6468  001B78  0EDF               	movlw	223
  6469  001B7A  641C               	cpfsgt	vscp_readStdReg@reg,c
  6470  001B7C  D005               	goto	l6775
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;vscp_firmware.c: 680: rv = vscp_getMDF_URL(reg - 0xE0);
  6474  001B7E  501C               	movf	vscp_readStdReg@reg,w,c
  6475  001B80  0F20               	addlw	32
  6476  001B82  ECB9  F017         	call	_vscp_getMDF_URL
  6477  001B86  D7BB               	goto	L24
  6478  001B88                     l6775:
  6479                           
  6480                           ;vscp_firmware.c: 682: }
  6481                           ;vscp_firmware.c: 684: return rv;
  6482  001B88  501B               	movf	vscp_readStdReg@rv,w,c
  6483  001B8A  0012               	return	
  6484  001B8C                     __end_of_vscp_readStdReg:
  6485                           	opt stack 0
  6486                           prodh	equ	0xFF4
  6487                           prodl	equ	0xFF3
  6488                           postinc0	equ	0xFEE
  6489                           wreg	equ	0xFE8
  6490                           indf1	equ	0xFE7
  6491                           fsr1h	equ	0xFE2
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           fsr2h	equ	0xFDA
  6497                           fsr2l	equ	0xFD9
  6498                           status	equ	0xFD8
  6499                           
  6500 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6501 ;; Defined at:
  6502 ;;		line 1439 in file "../main.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;		None
  6505 ;; Auto vars:     Size  Location     Type
  6506 ;;		None
  6507 ;; Return value:  Size  Location     Type
  6508 ;;                  1    wreg      unsigned char 
  6509 ;; Registers used:
  6510 ;;		wreg
  6511 ;; Tracked objects:
  6512 ;;		On entry : F/0
  6513 ;;		On exit  : F/0
  6514 ;;		Unchanged: F/0
  6515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6520 ;;Total ram usage:        0 bytes
  6521 ;; Hardware stack levels used:    1
  6522 ;; Hardware stack levels required when called:    2
  6523 ;; This function calls:
  6524 ;;		Nothing
  6525 ;; This function is called by:
  6526 ;;		_vscp_readStdReg
  6527 ;; This function uses a non-reentrant model
  6528 ;;
  6529                           
  6530                           	psect	text27
  6531  0030F4                     __ptext27:
  6532                           	opt stack 0
  6533  0030F4                     _vscp_getRegisterPagesUsed:
  6534                           	opt stack 26
  6535                           
  6536                           ; BSR set to: 0
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;main.c: 1440: return 1;
  6540                           
  6541                           ;incstack = 0
  6542                           ;incstack = 0
  6543  0030F4  0C01               	retlw	1
  6544  0030F6                     __end_of_vscp_getRegisterPagesUsed:
  6545                           	opt stack 0
  6546                           prodh	equ	0xFF4
  6547                           prodl	equ	0xFF3
  6548                           postinc0	equ	0xFEE
  6549                           wreg	equ	0xFE8
  6550                           indf1	equ	0xFE7
  6551                           fsr1h	equ	0xFE2
  6552                           fsr1l	equ	0xFE1
  6553                           indf2	equ	0xFDF
  6554                           postinc2	equ	0xFDE
  6555                           postdec2	equ	0xFDD
  6556                           fsr2h	equ	0xFDA
  6557                           fsr2l	equ	0xFD9
  6558                           status	equ	0xFD8
  6559                           
  6560 ;; *************** function _vscp_getFamilyType *****************
  6561 ;; Defined at:
  6562 ;;		line 1420 in file "../main.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;		None
  6567 ;; Return value:  Size  Location     Type
  6568 ;;                  4    7[COMRAM] unsigned long 
  6569 ;; Registers used:
  6570 ;;		None
  6571 ;; Tracked objects:
  6572 ;;		On entry : F/0
  6573 ;;		On exit  : F/0
  6574 ;;		Unchanged: F/0
  6575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6576 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6579 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6580 ;;Total ram usage:        4 bytes
  6581 ;; Hardware stack levels used:    1
  6582 ;; Hardware stack levels required when called:    2
  6583 ;; This function calls:
  6584 ;;		Nothing
  6585 ;; This function is called by:
  6586 ;;		_vscp_readStdReg
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text28
  6591  0030BC                     __ptext28:
  6592                           	opt stack 0
  6593  0030BC                     _vscp_getFamilyType:
  6594                           	opt stack 26
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;main.c: 1421: return 0;
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;incstack = 0
  6601                           ;incstack = 0
  6602  0030BC  6A08               	clrf	?_vscp_getFamilyType,c
  6603  0030BE  6A09               	clrf	?_vscp_getFamilyType+1,c
  6604  0030C0  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6605  0030C2  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6606                           
  6607                           ; BSR set to: 0
  6608  0030C4  0012               	return	
  6609  0030C6                     __end_of_vscp_getFamilyType:
  6610                           	opt stack 0
  6611                           prodh	equ	0xFF4
  6612                           prodl	equ	0xFF3
  6613                           postinc0	equ	0xFEE
  6614                           wreg	equ	0xFE8
  6615                           indf1	equ	0xFE7
  6616                           fsr1h	equ	0xFE2
  6617                           fsr1l	equ	0xFE1
  6618                           indf2	equ	0xFDF
  6619                           postinc2	equ	0xFDE
  6620                           postdec2	equ	0xFDD
  6621                           fsr2h	equ	0xFDA
  6622                           fsr2l	equ	0xFD9
  6623                           status	equ	0xFD8
  6624                           
  6625 ;; *************** function _vscp_getFamilyCode *****************
  6626 ;; Defined at:
  6627 ;;		line 1411 in file "../main.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;		None
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;		None
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  4    7[COMRAM] unsigned long 
  6634 ;; Registers used:
  6635 ;;		None
  6636 ;; Tracked objects:
  6637 ;;		On entry : F/0
  6638 ;;		On exit  : F/0
  6639 ;;		Unchanged: F/0
  6640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6641 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6644 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6645 ;;Total ram usage:        4 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    2
  6648 ;; This function calls:
  6649 ;;		Nothing
  6650 ;; This function is called by:
  6651 ;;		_vscp_readStdReg
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text29
  6656  0030C6                     __ptext29:
  6657                           	opt stack 0
  6658  0030C6                     _vscp_getFamilyCode:
  6659                           	opt stack 26
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;main.c: 1412: return 0L;
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;incstack = 0
  6666                           ;incstack = 0
  6667  0030C6  6A08               	clrf	?_vscp_getFamilyCode,c
  6668  0030C8  6A09               	clrf	?_vscp_getFamilyCode+1,c
  6669  0030CA  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  6670  0030CC  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  6671                           
  6672                           ; BSR set to: 0
  6673  0030CE  0012               	return	
  6674  0030D0                     __end_of_vscp_getFamilyCode:
  6675                           	opt stack 0
  6676                           prodh	equ	0xFF4
  6677                           prodl	equ	0xFF3
  6678                           postinc0	equ	0xFEE
  6679                           wreg	equ	0xFE8
  6680                           indf1	equ	0xFE7
  6681                           fsr1h	equ	0xFE2
  6682                           fsr1l	equ	0xFE1
  6683                           indf2	equ	0xFDF
  6684                           postinc2	equ	0xFDE
  6685                           postdec2	equ	0xFDD
  6686                           fsr2h	equ	0xFDA
  6687                           fsr2l	equ	0xFD9
  6688                           status	equ	0xFD8
  6689                           
  6690 ;; *************** function _vscp_getBufferSize *****************
  6691 ;; Defined at:
  6692 ;;		line 1291 in file "../main.c"
  6693 ;; Parameters:    Size  Location     Type
  6694 ;;		None
  6695 ;; Auto vars:     Size  Location     Type
  6696 ;;		None
  6697 ;; Return value:  Size  Location     Type
  6698 ;;                  1    wreg      unsigned char 
  6699 ;; Registers used:
  6700 ;;		wreg
  6701 ;; Tracked objects:
  6702 ;;		On entry : F/0
  6703 ;;		On exit  : F/0
  6704 ;;		Unchanged: F/0
  6705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6710 ;;Total ram usage:        0 bytes
  6711 ;; Hardware stack levels used:    1
  6712 ;; Hardware stack levels required when called:    2
  6713 ;; This function calls:
  6714 ;;		Nothing
  6715 ;; This function is called by:
  6716 ;;		_vscp_readStdReg
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text30
  6721  0030F6                     __ptext30:
  6722                           	opt stack 0
  6723  0030F6                     _vscp_getBufferSize:
  6724                           	opt stack 26
  6725                           
  6726                           ; BSR set to: 0
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;main.c: 1292: return 8;
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;incstack = 0
  6733                           ;incstack = 0
  6734  0030F6  0C08               	retlw	8
  6735  0030F8                     __end_of_vscp_getBufferSize:
  6736                           	opt stack 0
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           indf1	equ	0xFE7
  6742                           fsr1h	equ	0xFE2
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           fsr2h	equ	0xFDA
  6748                           fsr2l	equ	0xFD9
  6749                           status	equ	0xFD8
  6750                           
  6751 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  6752 ;; Defined at:
  6753 ;;		line 1282 in file "../main.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      unsigned char 
  6760 ;; Registers used:
  6761 ;;		wreg
  6762 ;; Tracked objects:
  6763 ;;		On entry : F/0
  6764 ;;		On exit  : F/0
  6765 ;;		Unchanged: F/0
  6766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:    2
  6774 ;; This function calls:
  6775 ;;		Nothing
  6776 ;; This function is called by:
  6777 ;;		_vscp_readStdReg
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           	psect	text31
  6782  0030F8                     __ptext31:
  6783                           	opt stack 0
  6784  0030F8                     _vscp_getBootLoaderAlgorithm:
  6785                           	opt stack 26
  6786                           
  6787                           ; BSR set to: 0
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;main.c: 1283: return 0x01;
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;incstack = 0
  6794                           ;incstack = 0
  6795  0030F8  0C01               	retlw	1
  6796  0030FA                     __end_of_vscp_getBootLoaderAlgorithm:
  6797                           	opt stack 0
  6798                           prodh	equ	0xFF4
  6799                           prodl	equ	0xFF3
  6800                           postinc0	equ	0xFEE
  6801                           wreg	equ	0xFE8
  6802                           indf1	equ	0xFE7
  6803                           fsr1h	equ	0xFE2
  6804                           fsr1l	equ	0xFE1
  6805                           indf2	equ	0xFDF
  6806                           postinc2	equ	0xFDE
  6807                           postdec2	equ	0xFDD
  6808                           fsr2h	equ	0xFDA
  6809                           fsr2l	equ	0xFD9
  6810                           status	equ	0xFD8
  6811                           
  6812 ;; *************** function _vscp_getManufacturerId *****************
  6813 ;; Defined at:
  6814 ;;		line 1273 in file "../main.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;  idx             1    wreg     unsigned char 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;  idx             1   10[COMRAM] unsigned char 
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      unsigned char 
  6821 ;; Registers used:
  6822 ;;		wreg, status,2, status,0, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6832 ;;Total ram usage:        1 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    3
  6835 ;; This function calls:
  6836 ;;		_readEEPROM
  6837 ;; This function is called by:
  6838 ;;		_vscp_readStdReg
  6839 ;;		_vscp_writeStdReg
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text32
  6844  002FEE                     __ptext32:
  6845                           	opt stack 0
  6846  002FEE                     _vscp_getManufacturerId:
  6847                           	opt stack 25
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;incstack = 0
  6851                           ;incstack = 0
  6852                           ;vscp_getManufacturerId@idx stored from wreg
  6853  002FEE  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
  6854                           
  6855                           ;main.c: 1274: return readEEPROM( 0x09 + idx );
  6856  002FF2  0E09               	movlw	9
  6857  002FF4  240B               	addwf	vscp_getManufacturerId@idx,w,c
  6858  002FF6  6E08               	movwf	?_readEEPROM,c
  6859  002FF8  6A09               	clrf	?_readEEPROM+1,c
  6860  002FFA  0E00               	movlw	0
  6861  002FFC  2209               	addwfc	?_readEEPROM+1,f,c
  6862  002FFE  EF27  F018         	goto	_readEEPROM	;wreg free
  6863  003002                     __end_of_vscp_getManufacturerId:
  6864                           	opt stack 0
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           postinc0	equ	0xFEE
  6868                           wreg	equ	0xFE8
  6869                           indf1	equ	0xFE7
  6870                           fsr1h	equ	0xFE2
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _vscp_getUserID *****************
  6880 ;; Defined at:
  6881 ;;		line 1253 in file "../main.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  idx             1    wreg     unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  idx             1   10[COMRAM] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      unsigned char 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6899 ;;Total ram usage:        1 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    3
  6902 ;; This function calls:
  6903 ;;		_readEEPROM
  6904 ;; This function is called by:
  6905 ;;		_vscp_readStdReg
  6906 ;;		_vscp_writeStdReg
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text33
  6911  003002                     __ptext33:
  6912                           	opt stack 0
  6913  003002                     _vscp_getUserID:
  6914                           	opt stack 25
  6915                           
  6916                           ;incstack = 0
  6917                           ;incstack = 0
  6918                           ;vscp_getUserID@idx stored from wreg
  6919  003002  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
  6920                           
  6921                           ;main.c: 1254: return readEEPROM( 0x04 + idx );
  6922  003006  0E04               	movlw	4
  6923  003008  240B               	addwf	vscp_getUserID@idx,w,c
  6924  00300A  6E08               	movwf	?_readEEPROM,c
  6925  00300C  6A09               	clrf	?_readEEPROM+1,c
  6926  00300E  0E00               	movlw	0
  6927  003010  2209               	addwfc	?_readEEPROM+1,f,c
  6928  003012  EF27  F018         	goto	_readEEPROM	;wreg free
  6929  003016                     __end_of_vscp_getUserID:
  6930                           	opt stack 0
  6931                           prodh	equ	0xFF4
  6932                           prodl	equ	0xFF3
  6933                           postinc0	equ	0xFEE
  6934                           wreg	equ	0xFE8
  6935                           indf1	equ	0xFE7
  6936                           fsr1h	equ	0xFE2
  6937                           fsr1l	equ	0xFE1
  6938                           indf2	equ	0xFDF
  6939                           postinc2	equ	0xFDE
  6940                           postdec2	equ	0xFDD
  6941                           fsr2h	equ	0xFDA
  6942                           fsr2l	equ	0xFD9
  6943                           status	equ	0xFD8
  6944                           
  6945 ;; *************** function _vscp_getMDF_URL *****************
  6946 ;; Defined at:
  6947 ;;		line 1244 in file "../main.c"
  6948 ;; Parameters:    Size  Location     Type
  6949 ;;  idx             1    wreg     unsigned char 
  6950 ;; Auto vars:     Size  Location     Type
  6951 ;;  idx             1    8[COMRAM] unsigned char 
  6952 ;; Return value:  Size  Location     Type
  6953 ;;                  1    wreg      unsigned char 
  6954 ;; Registers used:
  6955 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6956 ;; Tracked objects:
  6957 ;;		On entry : F/0
  6958 ;;		On exit  : F/0
  6959 ;;		Unchanged: F/0
  6960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6964 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6965 ;;Total ram usage:        2 bytes
  6966 ;; Hardware stack levels used:    1
  6967 ;; Hardware stack levels required when called:    2
  6968 ;; This function calls:
  6969 ;;		Nothing
  6970 ;; This function is called by:
  6971 ;;		_vscp_readStdReg
  6972 ;;		_vscp_handleProtocolEvent
  6973 ;; This function uses a non-reentrant model
  6974 ;;
  6975                           
  6976                           	psect	text34
  6977  002F72                     __ptext34:
  6978                           	opt stack 0
  6979  002F72                     _vscp_getMDF_URL:
  6980                           	opt stack 26
  6981                           
  6982                           ;incstack = 0
  6983                           ;incstack = 0
  6984                           ;vscp_getMDF_URL@idx stored from wreg
  6985  002F72  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;main.c: 1245: return vscp_deviceURL[ idx ];
  6989  002F76  5009               	movf	vscp_getMDF_URL@idx,w,c
  6990  002F78  0F00               	addlw	low _vscp_deviceURL
  6991  002F7A  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  6992  002F7C  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  6993  002F80  0E0F               	movlw	high __smallconst
  6994  002F82  6EF7               	movwf	tblptrh,c
  6995  002F84  0E00               	movlw	low (__smallconst shr (0+16))
  6996  002F86  6EF8               	movwf	tblptru,c
  6997  002F88  0008               	tblrd		*
  6998  002F8A  50F5               	movf	tablat,w,c
  6999                           
  7000                           ; BSR set to: 0
  7001  002F8C  0012               	return	
  7002  002F8E                     __end_of_vscp_getMDF_URL:
  7003                           	opt stack 0
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           postinc0	equ	0xFEE
  7011                           wreg	equ	0xFE8
  7012                           indf1	equ	0xFE7
  7013                           fsr1h	equ	0xFE2
  7014                           fsr1l	equ	0xFE1
  7015                           indf2	equ	0xFDF
  7016                           postinc2	equ	0xFDE
  7017                           postdec2	equ	0xFDD
  7018                           fsr2h	equ	0xFDA
  7019                           fsr2l	equ	0xFD9
  7020                           status	equ	0xFD8
  7021                           
  7022 ;; *************** function _vscp_getGUID *****************
  7023 ;; Defined at:
  7024 ;;		line 1232 in file "../main.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  idx             1    wreg     unsigned char 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  idx             1   10[COMRAM] unsigned char 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      unsigned char 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;Total ram usage:        1 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    3
  7045 ;; This function calls:
  7046 ;;		_readEEPROM
  7047 ;; This function is called by:
  7048 ;;		_vscp_readStdReg
  7049 ;;		_vscp_writeStdReg
  7050 ;;		_vscp_handleProtocolEvent
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           	psect	text35
  7055  003016                     __ptext35:
  7056                           	opt stack 0
  7057  003016                     _vscp_getGUID:
  7058                           	opt stack 25
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;incstack = 0
  7062                           ;incstack = 0
  7063                           ;vscp_getGUID@idx stored from wreg
  7064  003016  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
  7065                           
  7066                           ;main.c: 1233: return readEEPROM( 0x11 + idx );
  7067  00301A  0E11               	movlw	17
  7068  00301C  240B               	addwf	vscp_getGUID@idx,w,c
  7069  00301E  6E08               	movwf	?_readEEPROM,c
  7070  003020  6A09               	clrf	?_readEEPROM+1,c
  7071  003022  0E00               	movlw	0
  7072  003024  2209               	addwfc	?_readEEPROM+1,f,c
  7073  003026  EF27  F018         	goto	_readEEPROM	;wreg free
  7074  00302A                     __end_of_vscp_getGUID:
  7075                           	opt stack 0
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           postinc0	equ	0xFEE
  7083                           wreg	equ	0xFE8
  7084                           indf1	equ	0xFE7
  7085                           fsr1h	equ	0xFE2
  7086                           fsr1l	equ	0xFE1
  7087                           indf2	equ	0xFDF
  7088                           postinc2	equ	0xFDE
  7089                           postdec2	equ	0xFDD
  7090                           fsr2h	equ	0xFDA
  7091                           fsr2l	equ	0xFD9
  7092                           status	equ	0xFD8
  7093                           
  7094 ;; *************** function _vscp_getSubMinorVersion *****************
  7095 ;; Defined at:
  7096 ;;		line 1221 in file "../main.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;		None
  7099 ;; Auto vars:     Size  Location     Type
  7100 ;;		None
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      unsigned char 
  7103 ;; Registers used:
  7104 ;;		wreg
  7105 ;; Tracked objects:
  7106 ;;		On entry : F/0
  7107 ;;		On exit  : F/0
  7108 ;;		Unchanged: F/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7114 ;;Total ram usage:        0 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    2
  7117 ;; This function calls:
  7118 ;;		Nothing
  7119 ;; This function is called by:
  7120 ;;		_vscp_readStdReg
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text36
  7125  0030FA                     __ptext36:
  7126                           	opt stack 0
  7127  0030FA                     _vscp_getSubMinorVersion:
  7128                           	opt stack 26
  7129                           
  7130                           ; BSR set to: 0
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;main.c: 1222: return 0;
  7134                           
  7135                           ;incstack = 0
  7136                           ;incstack = 0
  7137  0030FA  0C00               	retlw	0
  7138  0030FC                     __end_of_vscp_getSubMinorVersion:
  7139                           	opt stack 0
  7140                           tblptru	equ	0xFF8
  7141                           tblptrh	equ	0xFF7
  7142                           tblptrl	equ	0xFF6
  7143                           tablat	equ	0xFF5
  7144                           prodh	equ	0xFF4
  7145                           prodl	equ	0xFF3
  7146                           postinc0	equ	0xFEE
  7147                           wreg	equ	0xFE8
  7148                           indf1	equ	0xFE7
  7149                           fsr1h	equ	0xFE2
  7150                           fsr1l	equ	0xFE1
  7151                           indf2	equ	0xFDF
  7152                           postinc2	equ	0xFDE
  7153                           postdec2	equ	0xFDD
  7154                           fsr2h	equ	0xFDA
  7155                           fsr2l	equ	0xFD9
  7156                           status	equ	0xFD8
  7157                           
  7158 ;; *************** function _vscp_getMinorVersion *****************
  7159 ;; Defined at:
  7160 ;;		line 1212 in file "../main.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;		None
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  1    wreg      unsigned char 
  7167 ;; Registers used:
  7168 ;;		wreg
  7169 ;; Tracked objects:
  7170 ;;		On entry : F/0
  7171 ;;		On exit  : F/0
  7172 ;;		Unchanged: F/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7178 ;;Total ram usage:        0 bytes
  7179 ;; Hardware stack levels used:    1
  7180 ;; Hardware stack levels required when called:    2
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_vscp_readStdReg
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text37
  7189  0030FC                     __ptext37:
  7190                           	opt stack 0
  7191  0030FC                     _vscp_getMinorVersion:
  7192                           	opt stack 26
  7193                           
  7194                           ; BSR set to: 0
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;main.c: 1213: return 0;
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;incstack = 0
  7201                           ;incstack = 0
  7202  0030FC  0C00               	retlw	0
  7203  0030FE                     __end_of_vscp_getMinorVersion:
  7204                           	opt stack 0
  7205                           tblptru	equ	0xFF8
  7206                           tblptrh	equ	0xFF7
  7207                           tblptrl	equ	0xFF6
  7208                           tablat	equ	0xFF5
  7209                           prodh	equ	0xFF4
  7210                           prodl	equ	0xFF3
  7211                           postinc0	equ	0xFEE
  7212                           wreg	equ	0xFE8
  7213                           indf1	equ	0xFE7
  7214                           fsr1h	equ	0xFE2
  7215                           fsr1l	equ	0xFE1
  7216                           indf2	equ	0xFDF
  7217                           postinc2	equ	0xFDE
  7218                           postdec2	equ	0xFDD
  7219                           fsr2h	equ	0xFDA
  7220                           fsr2l	equ	0xFD9
  7221                           status	equ	0xFD8
  7222                           
  7223 ;; *************** function _vscp_getMajorVersion *****************
  7224 ;; Defined at:
  7225 ;;		line 1203 in file "../main.c"
  7226 ;; Parameters:    Size  Location     Type
  7227 ;;		None
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;		None
  7230 ;; Return value:  Size  Location     Type
  7231 ;;                  1    wreg      unsigned char 
  7232 ;; Registers used:
  7233 ;;		wreg
  7234 ;; Tracked objects:
  7235 ;;		On entry : F/0
  7236 ;;		On exit  : F/0
  7237 ;;		Unchanged: F/0
  7238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7243 ;;Total ram usage:        0 bytes
  7244 ;; Hardware stack levels used:    1
  7245 ;; Hardware stack levels required when called:    2
  7246 ;; This function calls:
  7247 ;;		Nothing
  7248 ;; This function is called by:
  7249 ;;		_vscp_readStdReg
  7250 ;; This function uses a non-reentrant model
  7251 ;;
  7252                           
  7253                           	psect	text38
  7254  0030FE                     __ptext38:
  7255                           	opt stack 0
  7256  0030FE                     _vscp_getMajorVersion:
  7257                           	opt stack 26
  7258                           
  7259                           ; BSR set to: 0
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;main.c: 1204: return 1;
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;incstack = 0
  7266                           ;incstack = 0
  7267  0030FE  0C01               	retlw	1
  7268  003100                     __end_of_vscp_getMajorVersion:
  7269                           	opt stack 0
  7270                           tblptru	equ	0xFF8
  7271                           tblptrh	equ	0xFF7
  7272                           tblptrl	equ	0xFF6
  7273                           tablat	equ	0xFF5
  7274                           prodh	equ	0xFF4
  7275                           prodl	equ	0xFF3
  7276                           postinc0	equ	0xFEE
  7277                           wreg	equ	0xFE8
  7278                           indf1	equ	0xFE7
  7279                           fsr1h	equ	0xFE2
  7280                           fsr1l	equ	0xFE1
  7281                           indf2	equ	0xFDF
  7282                           postinc2	equ	0xFDE
  7283                           postdec2	equ	0xFDD
  7284                           fsr2h	equ	0xFDA
  7285                           fsr2l	equ	0xFD9
  7286                           status	equ	0xFD8
  7287                           
  7288 ;; *************** function _vscp_newNodeOnline *****************
  7289 ;; Defined at:
  7290 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
  7291 ;; Parameters:    Size  Location     Type
  7292 ;;		None
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;		None               void
  7297 ;; Registers used:
  7298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : F/0
  7301 ;;		On exit  : F/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7307 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7308 ;;Total ram usage:        1 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    7
  7311 ;; This function calls:
  7312 ;;		_vscp_sendEvent
  7313 ;; This function is called by:
  7314 ;;		_vscp_handleProtocolEvent
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text39
  7319  002D6C                     __ptext39:
  7320                           	opt stack 0
  7321  002D6C                     _vscp_newNodeOnline:
  7322                           	opt stack 22
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
  7326                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;incstack = 0
  7330                           ;incstack = 0
  7331  002D6C  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7332  002D70  0E0F               	movlw	15
  7333  002D72  164C               	andwf	??_vscp_newNodeOnline,f,c
  7334  002D74  044C               	decf	??_vscp_newNodeOnline,w,c
  7335  002D76  A4D8               	btfss	status,2,c
  7336  002D78  0012               	return	
  7337                           
  7338                           ; BSR set to: 0
  7339  002D7A  5170               	movf	_vscp_nickname& (0+255),w,b
  7340  002D7C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7341  002D80  62DF               	cpfseq	indf2,c
  7342  002D82  0012               	return	
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
  7346  002D84  0E80               	movlw	128
  7347  002D86  6F83               	movwf	_vscp_omsg& (0+255),b
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
  7351  002D88  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
  7355  002D8A  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7356  002D8C  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7357                           
  7358                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
  7359  002D8E  0E03               	movlw	3
  7360  002D90  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;vscp_firmware.c: 506: vscp_sendEvent();
  7364  002D92  EFF2  F016         	goto	_vscp_sendEvent	;wreg free
  7365  002D96                     __end_of_vscp_newNodeOnline:
  7366                           	opt stack 0
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           prodh	equ	0xFF4
  7372                           prodl	equ	0xFF3
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           indf1	equ	0xFE7
  7376                           fsr1h	equ	0xFE2
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           fsr2h	equ	0xFDA
  7382                           fsr2l	equ	0xFD9
  7383                           status	equ	0xFD8
  7384                           
  7385 ;; *************** function _vscp_handleDropNickname *****************
  7386 ;; Defined at:
  7387 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  bytes           1   11[COMRAM] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;		None               void
  7394 ;; Registers used:
  7395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : F/0
  7398 ;;		On exit  : F/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7404 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7405 ;;Total ram usage:        1 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    5
  7408 ;; This function calls:
  7409 ;;		_vscp_init
  7410 ;;		_vscp_writeNicknamePermanent
  7411 ;; This function is called by:
  7412 ;;		_vscp_handleProtocolEvent
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text40
  7417  002D10                     __ptext40:
  7418                           	opt stack 0
  7419  002D10                     _vscp_handleDropNickname:
  7420                           	opt stack 24
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;incstack = 0
  7427                           ;incstack = 0
  7428  002D10  5175               	movf	_vscp_imsg& (0+255),w,b
  7429  002D12  0B0F               	andlw	15
  7430  002D14  6E0C               	movwf	vscp_handleDropNickname@bytes,c
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7434  002D16  500C               	movf	vscp_handleDropNickname@bytes,w,c
  7435  002D18  B4D8               	btfsc	status,2,c
  7436  002D1A  0012               	return	
  7437                           
  7438                           ; BSR set to: 0
  7439  002D1C  5170               	movf	_vscp_nickname& (0+255),w,b
  7440  002D1E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7441  002D22  62DF               	cpfseq	indf2,c
  7442  002D24  0012               	return	
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7446  002D26  040C               	decf	vscp_handleDropNickname@bytes,w,c
  7447  002D28  E005               	bz	l891
  7448                           
  7449                           ; BSR set to: 0
  7450  002D2A  0E01               	movlw	1
  7451  002D2C  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
  7452  002D2E  0C01               	retlw	1
  7453                           
  7454                           ; BSR set to: 0
  7455  002D30  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7456  002D32  0C01               	retlw	1
  7457  002D34                     l891:
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
  7461  002D34  6970               	setf	_vscp_nickname& (0+255),b
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
  7465  002D36  0EFF               	movlw	255
  7466  002D38  EC30  F018         	call	_vscp_writeNicknamePermanent
  7467                           
  7468                           ;vscp_firmware.c: 473: vscp_init();
  7469  002D3C  EFDB  F015         	goto	_vscp_init	;wreg free
  7470  002D40                     __end_of_vscp_handleDropNickname:
  7471                           	opt stack 0
  7472                           tblptru	equ	0xFF8
  7473                           tblptrh	equ	0xFF7
  7474                           tblptrl	equ	0xFF6
  7475                           tablat	equ	0xFF5
  7476                           prodh	equ	0xFF4
  7477                           prodl	equ	0xFF3
  7478                           postinc0	equ	0xFEE
  7479                           wreg	equ	0xFE8
  7480                           indf1	equ	0xFE7
  7481                           fsr1h	equ	0xFE2
  7482                           fsr1l	equ	0xFE1
  7483                           indf2	equ	0xFDF
  7484                           postinc2	equ	0xFDE
  7485                           postdec2	equ	0xFDD
  7486                           fsr2h	equ	0xFDA
  7487                           fsr2l	equ	0xFD9
  7488                           status	equ	0xFD8
  7489                           
  7490 ;; *************** function _vscp_init *****************
  7491 ;; Defined at:
  7492 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;		None
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;		None
  7497 ;; Return value:  Size  Location     Type
  7498 ;;		None               void
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 0/E
  7503 ;;		On exit  : F/0
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7510 ;;Total ram usage:        0 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    4
  7513 ;; This function calls:
  7514 ;;		_vscp_readNicknamePermanent
  7515 ;; This function is called by:
  7516 ;;		_main
  7517 ;;		_vscp_handleDropNickname
  7518 ;;		_vscp_handleProtocolEvent
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           	psect	text41
  7523  002BB6                     __ptext41:
  7524                           	opt stack 0
  7525  002BB6                     _vscp_init:
  7526                           	opt stack 24
  7527                           
  7528                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;incstack = 0
  7532                           ;incstack = 0
  7533  002BB6  0E02               	movlw	2
  7534  002BB8  6E56               	movwf	_vscp_initledfunc,c
  7535                           
  7536                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
  7537  002BBA  EC68  F018         	call	_vscp_readNicknamePermanent	;wreg free
  7538  002BBE  0100               	movlb	0	; () banked
  7539  002BC0  6F70               	movwf	_vscp_nickname& (0+255),b
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
  7543  002BC2  6770               	tstfsz	_vscp_nickname& (0+255),b
  7544  002BC4  D001               	goto	l833
  7545                           
  7546                           ; BSR set to: 0
  7547  002BC6  6970               	setf	_vscp_nickname& (0+255),b
  7548  002BC8                     l833:
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
  7552  002BC8  6B75               	clrf	_vscp_imsg& (0+255),b
  7553                           
  7554                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
  7555  002BCA  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  7556                           
  7557                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
  7558  002BCC  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  7559  002BCE  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  7560                           
  7561                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
  7562  002BD0  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  7563                           
  7564                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
  7565  002BD2  6B83               	clrf	_vscp_omsg& (0+255),b
  7566                           
  7567                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
  7568  002BD4  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7569                           
  7570                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
  7571  002BD6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7572  002BD8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7573                           
  7574                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
  7575  002BDA  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  7576                           
  7577                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
  7578  002BDC  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  7579                           
  7580                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
  7581  002BDE  6A57               	clrf	_vscp_probe_address,c
  7582                           
  7583                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
  7584  002BE0  6B71               	clrf	_vscp_node_state& (0+255),b
  7585                           
  7586                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
  7587  002BE2  6B72               	clrf	_vscp_node_substate& (0+255),b
  7588                           
  7589                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
  7590  002BE4  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7591                           
  7592                           ;vscp_firmware.c: 148: vscp_page_select = 0;
  7593  002BE6  6A52               	clrf	_vscp_page_select,c
  7594  002BE8  6A53               	clrf	_vscp_page_select+1,c
  7595                           
  7596                           ;vscp_firmware.c: 151: vscp_timer = 0;
  7597  002BEA  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7598  002BEC  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7599                           
  7600                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
  7601  002BEE  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7602  002BF0  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7603                           
  7604                           ;vscp_firmware.c: 153: vscp_second = 0;
  7605  002BF2  6B74               	clrf	_vscp_second& (0+255),b
  7606                           
  7607                           ;vscp_firmware.c: 154: vscp_minute = 0;
  7608  002BF4  6B6F               	clrf	_vscp_minute& (0+255),b
  7609                           
  7610                           ;vscp_firmware.c: 155: vscp_hour = 0;
  7611  002BF6  6B6D               	clrf	_vscp_hour& (0+255),b
  7612                           
  7613                           ; BSR set to: 0
  7614  002BF8  0012               	return	
  7615  002BFA                     __end_of_vscp_init:
  7616                           	opt stack 0
  7617                           tblptru	equ	0xFF8
  7618                           tblptrh	equ	0xFF7
  7619                           tblptrl	equ	0xFF6
  7620                           tablat	equ	0xFF5
  7621                           prodh	equ	0xFF4
  7622                           prodl	equ	0xFF3
  7623                           postinc0	equ	0xFEE
  7624                           wreg	equ	0xFE8
  7625                           indf1	equ	0xFE7
  7626                           fsr1h	equ	0xFE2
  7627                           fsr1l	equ	0xFE1
  7628                           indf2	equ	0xFDF
  7629                           postinc2	equ	0xFDE
  7630                           postdec2	equ	0xFDD
  7631                           fsr2h	equ	0xFDA
  7632                           fsr2l	equ	0xFD9
  7633                           status	equ	0xFD8
  7634                           
  7635 ;; *************** function _vscp_readNicknamePermanent *****************
  7636 ;; Defined at:
  7637 ;;		line 536 in file "../main.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;		None
  7640 ;; Auto vars:     Size  Location     Type
  7641 ;;		None
  7642 ;; Return value:  Size  Location     Type
  7643 ;;                  1    wreg      unsigned char 
  7644 ;; Registers used:
  7645 ;;		wreg, status,2, cstack
  7646 ;; Tracked objects:
  7647 ;;		On entry : 0/E
  7648 ;;		On exit  : 0/0
  7649 ;;		Unchanged: 0/0
  7650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7655 ;;Total ram usage:        0 bytes
  7656 ;; Hardware stack levels used:    1
  7657 ;; Hardware stack levels required when called:    3
  7658 ;; This function calls:
  7659 ;;		_readEEPROM
  7660 ;; This function is called by:
  7661 ;;		_vscp_init
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           	psect	text42
  7666  0030D0                     __ptext42:
  7667                           	opt stack 0
  7668  0030D0                     _vscp_readNicknamePermanent:
  7669                           	opt stack 24
  7670                           
  7671                           ;main.c: 537: return readEEPROM( 0x01 );
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;incstack = 0
  7675                           ;incstack = 0
  7676  0030D0  6A09               	clrf	?_readEEPROM+1,c
  7677  0030D2  0E01               	movlw	1
  7678  0030D4  6E08               	movwf	?_readEEPROM,c
  7679  0030D6  EF27  F018         	goto	_readEEPROM	;wreg free
  7680  0030DA                     __end_of_vscp_readNicknamePermanent:
  7681                           	opt stack 0
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           postinc0	equ	0xFEE
  7689                           wreg	equ	0xFE8
  7690                           indf1	equ	0xFE7
  7691                           fsr1h	equ	0xFE2
  7692                           fsr1l	equ	0xFE1
  7693                           indf2	equ	0xFDF
  7694                           postinc2	equ	0xFDE
  7695                           postdec2	equ	0xFDD
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _vscp_handleSetNickname *****************
  7701 ;; Defined at:
  7702 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;		None
  7707 ;; Return value:  Size  Location     Type
  7708 ;;		None               void
  7709 ;; Registers used:
  7710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7711 ;; Tracked objects:
  7712 ;;		On entry : F/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7720 ;;Total ram usage:        0 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    4
  7723 ;; This function calls:
  7724 ;;		_vscp_writeNicknamePermanent
  7725 ;;		_vscp_setSegmentCRC
  7726 ;; This function is called by:
  7727 ;;		_vscp_handleProtocolEvent
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           	psect	text43
  7732  002E56                     __ptext43:
  7733                           	opt stack 0
  7734  002E56                     _vscp_handleSetNickname:
  7735                           	opt stack 25
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7739                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7740                           
  7741                           ;incstack = 0
  7742                           ;incstack = 0
  7743  002E56  5175               	movf	_vscp_imsg& (0+255),w,b
  7744  002E58  0B0F               	andlw	15
  7745  002E5A  0A02               	xorlw	2
  7746  002E5C  A4D8               	btfss	status,2,c
  7747  002E5E  0012               	return	
  7748                           
  7749                           ; BSR set to: 0
  7750  002E60  5170               	movf	_vscp_nickname& (0+255),w,b
  7751  002E62  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7752  002E66  62DF               	cpfseq	indf2,c
  7753  002E68  0012               	return	
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
  7757  002E6A  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
  7761  002E6E  5170               	movf	_vscp_nickname& (0+255),w,b
  7762  002E70  EC30  F018         	call	_vscp_writeNicknamePermanent
  7763                           
  7764                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
  7765  002E74  0E40               	movlw	64
  7766  002E76  EF1E  F018         	goto	_vscp_setSegmentCRC
  7767  002E7A                     __end_of_vscp_handleSetNickname:
  7768                           	opt stack 0
  7769                           tblptru	equ	0xFF8
  7770                           tblptrh	equ	0xFF7
  7771                           tblptrl	equ	0xFF6
  7772                           tablat	equ	0xFF5
  7773                           prodh	equ	0xFF4
  7774                           prodl	equ	0xFF3
  7775                           postinc0	equ	0xFEE
  7776                           wreg	equ	0xFE8
  7777                           indf1	equ	0xFE7
  7778                           fsr1h	equ	0xFE2
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           fsr2h	equ	0xFDA
  7784                           fsr2l	equ	0xFD9
  7785                           status	equ	0xFD8
  7786                           
  7787 ;; *************** function _vscp_handleHeartbeat *****************
  7788 ;; Defined at:
  7789 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;		None
  7792 ;; Auto vars:     Size  Location     Type
  7793 ;;		None
  7794 ;; Return value:  Size  Location     Type
  7795 ;;		None               void
  7796 ;; Registers used:
  7797 ;;		wreg, status,2, status,0, cstack
  7798 ;; Tracked objects:
  7799 ;;		On entry : F/0
  7800 ;;		On exit  : 0/0
  7801 ;;		Unchanged: 0/0
  7802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7807 ;;Total ram usage:        0 bytes
  7808 ;; Hardware stack levels used:    1
  7809 ;; Hardware stack levels required when called:    4
  7810 ;; This function calls:
  7811 ;;		_vscp_writeNicknamePermanent
  7812 ;;		_vscp_getSegmentCRC
  7813 ;;		_vscp_setSegmentCRC
  7814 ;; This function is called by:
  7815 ;;		_vscp_handleProtocolEvent
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text44
  7820  002BFA                     __ptext44:
  7821                           	opt stack 0
  7822  002BFA                     _vscp_handleHeartbeat:
  7823                           	opt stack 25
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
  7827                           
  7828                           ;incstack = 0
  7829                           ;incstack = 0
  7830  002BFA  EC6D  F018         	call	_vscp_getSegmentCRC	;wreg free
  7831  002BFE  0900               	iorlw	0
  7832  002C00  E118               	bnz	l6641
  7833                           
  7834                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  7835                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  7836  002C02  0100               	movlb	0	; () banked
  7837  002C04  5175               	movf	_vscp_imsg& (0+255),w,b
  7838  002C06  0B0F               	andlw	15
  7839  002C08  0A05               	xorlw	5
  7840  002C0A  A4D8               	btfss	status,2,c
  7841  002C0C  0012               	return	
  7842                           
  7843                           ; BSR set to: 0
  7844  002C0E  EC6D  F018         	call	_vscp_getSegmentCRC	;wreg free
  7845  002C12  0100               	movlb	0	; () banked
  7846  002C14  197B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  7847  002C16  B4D8               	btfsc	status,2,c
  7848  002C18  0012               	return	
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7852  002C1A  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7853  002C1C  EC1E  F018         	call	_vscp_setSegmentCRC
  7854                           
  7855                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
  7856  002C20  0100               	movlb	0	; () banked
  7857  002C22  6970               	setf	_vscp_nickname& (0+255),b
  7858                           
  7859                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
  7860  002C24  0EFF               	movlw	255
  7861  002C26  EC30  F018         	call	_vscp_writeNicknamePermanent
  7862                           
  7863                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
  7864  002C2A  0E01               	movlw	1
  7865  002C2C  0100               	movlb	0	; () banked
  7866  002C2E  6F71               	movwf	_vscp_node_state& (0+255),b
  7867  002C30  0C01               	retlw	1
  7868  002C32                     l6641:
  7869                           
  7870                           ;vscp_firmware.c: 403: else {
  7871                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7872  002C32  0100               	movlb	0	; () banked
  7873  002C34  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7874  002C36  EF1E  F018         	goto	_vscp_setSegmentCRC
  7875  002C3A                     __end_of_vscp_handleHeartbeat:
  7876                           	opt stack 0
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           indf1	equ	0xFE7
  7886                           fsr1h	equ	0xFE2
  7887                           fsr1l	equ	0xFE1
  7888                           indf2	equ	0xFDF
  7889                           postinc2	equ	0xFDE
  7890                           postdec2	equ	0xFDD
  7891                           fsr2h	equ	0xFDA
  7892                           fsr2l	equ	0xFD9
  7893                           status	equ	0xFD8
  7894                           
  7895 ;; *************** function _vscp_getMatrixInfo *****************
  7896 ;; Defined at:
  7897 ;;		line 1394 in file "../main.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  pData           1    wreg     PTR unsigned char 
  7900 ;;		 -> vscp_omsg(13), 
  7901 ;; Auto vars:     Size  Location     Type
  7902 ;;  pData           1    0[COMRAM] PTR unsigned char 
  7903 ;;		 -> vscp_omsg(13), 
  7904 ;;  i               1    7[COMRAM] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;		None               void
  7907 ;; Registers used:
  7908 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7909 ;; Tracked objects:
  7910 ;;		On entry : F/0
  7911 ;;		On exit  : F/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7918 ;;Total ram usage:        1 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    2
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		_vscp_handleProtocolEvent
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text45
  7929  002EBA                     __ptext45:
  7930                           	opt stack 0
  7931  002EBA                     _vscp_getMatrixInfo:
  7932                           	opt stack 27
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;main.c: 1395: uint8_t i;
  7936                           ;main.c: 1397: vscp_omsg.data[ 0 ] = 7;
  7937                           
  7938                           ;incstack = 0
  7939                           ;incstack = 0
  7940  002EBA  0E07               	movlw	7
  7941  002EBC  6F88               	movwf	(_vscp_omsg+5)& (0+255),b
  7942                           
  7943                           ;main.c: 1398: vscp_omsg.data[ 1 ] = 72;
  7944  002EBE  0E48               	movlw	72
  7945  002EC0  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  7946                           
  7947                           ;main.c: 1401: for ( i = 2; i < 8; i++ ) {
  7948  002EC2  0E02               	movlw	2
  7949  002EC4  6E08               	movwf	vscp_getMatrixInfo@i,c
  7950  002EC6                     l4893:
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;main.c: 1402: vscp_omsg.data[ i ] = 0;
  7954  002EC6  5008               	movf	vscp_getMatrixInfo@i,w,c
  7955  002EC8  0F88               	addlw	low (_vscp_omsg+5)
  7956  002ECA  6ED9               	movwf	fsr2l,c
  7957  002ECC  6ADA               	clrf	fsr2h,c
  7958  002ECE  6ADF               	clrf	indf2,c
  7959                           
  7960                           ; BSR set to: 0
  7961  002ED0  2A08               	incf	vscp_getMatrixInfo@i,f,c
  7962                           
  7963                           ; BSR set to: 0
  7964  002ED2  0E07               	movlw	7
  7965  002ED4  6408               	cpfsgt	vscp_getMatrixInfo@i,c
  7966  002ED6  D7F7               	goto	l4893
  7967  002ED8  0C07               	retlw	7
  7968  002EDA                     __end_of_vscp_getMatrixInfo:
  7969                           	opt stack 0
  7970                           tblptru	equ	0xFF8
  7971                           tblptrh	equ	0xFF7
  7972                           tblptrl	equ	0xFF6
  7973                           tablat	equ	0xFF5
  7974                           prodh	equ	0xFF4
  7975                           prodl	equ	0xFF3
  7976                           postinc0	equ	0xFEE
  7977                           wreg	equ	0xFE8
  7978                           indf1	equ	0xFE7
  7979                           fsr1h	equ	0xFE2
  7980                           fsr1l	equ	0xFE1
  7981                           indf2	equ	0xFDF
  7982                           postinc2	equ	0xFDE
  7983                           postdec2	equ	0xFDD
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function _vscp_goBootloaderMode *****************
  7989 ;; Defined at:
  7990 ;;		line 1378 in file "../main.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  algorithm       1    wreg     unsigned char 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  algorithm       1   10[COMRAM] unsigned char 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;		None               void
  7997 ;; Registers used:
  7998 ;;		wreg, status,2, status,0, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : F/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8007 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8008 ;;Total ram usage:        1 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    3
  8011 ;; This function calls:
  8012 ;;		_writeEEPROM
  8013 ;; This function is called by:
  8014 ;;		_vscp_handleProtocolEvent
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           	psect	text46
  8019  002F8E                     __ptext46:
  8020                           	opt stack 0
  8021  002F8E                     _vscp_goBootloaderMode:
  8022                           	opt stack 26
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;incstack = 0
  8026                           ;incstack = 0
  8027                           ;vscp_goBootloaderMode@algorithm stored from wreg
  8028  002F8E  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;main.c: 1379: if ( 0x01 != algorithm ) return;
  8032  002F92  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
  8033  002F94  A4D8               	btfss	status,2,c
  8034  002F96  0012               	return	
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;main.c: 1383: writeEEPROM(0x00, 0xff);
  8038  002F98  6A09               	clrf	?_writeEEPROM+1,c
  8039  002F9A  6A08               	clrf	?_writeEEPROM,c
  8040  002F9C  0EFF               	movlw	255
  8041  002F9E  680A               	setf	?_writeEEPROM+2,c
  8042  002FA0  EC18  F017         	call	_writeEEPROM	;wreg free
  8043  002FA4  00FF               	reset		;# 
  8044  002FA6  0012               	return	
  8045  002FA8                     __end_of_vscp_goBootloaderMode:
  8046                           	opt stack 0
  8047                           tblptru	equ	0xFF8
  8048                           tblptrh	equ	0xFF7
  8049                           tblptrl	equ	0xFF6
  8050                           tablat	equ	0xFF5
  8051                           prodh	equ	0xFF4
  8052                           prodl	equ	0xFF3
  8053                           postinc0	equ	0xFEE
  8054                           wreg	equ	0xFE8
  8055                           indf1	equ	0xFE7
  8056                           fsr1h	equ	0xFE2
  8057                           fsr1l	equ	0xFE1
  8058                           indf2	equ	0xFDF
  8059                           postinc2	equ	0xFDE
  8060                           postdec2	equ	0xFDD
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _vscp_handleProbeState *****************
  8066 ;; Defined at:
  8067 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;		None               void
  8074 ;; Registers used:
  8075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : F/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    8
  8088 ;; This function calls:
  8089 ;;		_vscp_goActiveState
  8090 ;;		_vscp_writeNicknamePermanent
  8091 ;;		_vscp_sendEvent
  8092 ;;		_vscp_setSegmentCRC
  8093 ;; This function is called by:
  8094 ;;		_main
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text47
  8099  0026DC                     __ptext47:
  8100                           	opt stack 0
  8101  0026DC                     _vscp_handleProbeState:
  8102                           	opt stack 22
  8103                           
  8104                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
  8105                           
  8106                           ;incstack = 0
  8107                           ;incstack = 0
  8108  0026DC  D053               	goto	l5773
  8109  0026DE                     l5703:
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
  8113  0026DE  2857               	incf	_vscp_probe_address,w,c
  8114  0026E0  E010               	bz	l5719
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
  8118  0026E2  0E81               	movlw	129
  8119  0026E4  6F83               	movwf	_vscp_omsg& (0+255),b
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
  8123  0026E6  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
  8127  0026E8  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8128  0026EA  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8129                           
  8130                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
  8131  0026EC  0E02               	movlw	2
  8132  0026EE  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
  8136  0026F0  C057  F088         	movff	_vscp_probe_address,_vscp_omsg+5
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;vscp_firmware.c: 214: vscp_sendEvent();
  8140  0026F4  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
  8144  0026F8  0E01               	movlw	1
  8145  0026FA  6F72               	movwf	_vscp_node_substate& (0+255),b
  8146  0026FC                     l5717:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;vscp_firmware.c: 217: vscp_timer = 0;
  8150  0026FC  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8151  0026FE  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8152                           
  8153                           ;vscp_firmware.c: 219: } else {
  8154  002700  D048               	goto	l848
  8155  002702                     l5719:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
  8159  002702  0E04               	movlw	4
  8160  002704  6F71               	movwf	_vscp_node_state& (0+255),b
  8161                           
  8162                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
  8163  002706  0E81               	movlw	129
  8164  002708  6F83               	movwf	_vscp_omsg& (0+255),b
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
  8168  00270A  6988               	setf	(_vscp_omsg+5)& (0+255),b
  8169                           
  8170                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
  8171  00270C  0E07               	movlw	7
  8172  00270E  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
  8176  002710  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8177  002712  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8178                           
  8179                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
  8180  002714  0E03               	movlw	3
  8181  002716  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;vscp_firmware.c: 232: vscp_sendEvent();
  8185  002718  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  8186  00271C  D03A               	goto	l848
  8187  00271E                     l849:
  8188                           
  8189                           ; BSR set to: 0
  8190                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
  8191  00271E  AF75               	btfss	_vscp_imsg& (0+255),7,b
  8192  002720  D00F               	goto	l5743
  8193                           
  8194                           ; BSR set to: 0
  8195                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
  8196                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
  8197  002722  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  8198  002724  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8199  002726  E135               	bnz	l848
  8200                           
  8201                           ; BSR set to: 0
  8202  002728  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  8203  00272A  0A03               	xorlw	3
  8204  00272C  E132               	bnz	l848
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
  8208  00272E  6657               	tstfsz	_vscp_probe_address,c
  8209  002730  D003               	goto	l5737
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
  8213  002732  0E02               	movlw	2
  8214  002734  6F71               	movwf	_vscp_node_state& (0+255),b
  8215  002736  D7E2               	goto	l5717
  8216  002738                     l5737:
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;vscp_firmware.c: 256: vscp_probe_address++;
  8220  002738  2A57               	incf	_vscp_probe_address,f,c
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
  8224  00273A  6B72               	clrf	_vscp_node_substate& (0+255),b
  8225  00273C                     l5741:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
  8229  00273C  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8230  00273E  D029               	goto	l848
  8231  002740                     l5743:
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
  8235  002740  0EE9               	movlw	233
  8236  002742  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8237  002744  0E03               	movlw	3
  8238  002746  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8239  002748  E324               	bnc	l848
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
  8243  00274A  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
  8247  00274C  0E02               	movlw	2
  8248  00274E  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8249  002750  D017               	goto	l856
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
  8253  002752  6657               	tstfsz	_vscp_probe_address,c
  8254  002754  D005               	goto	l857
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;vscp_firmware.c: 274: vscp_probe_address++;
  8258  002756  2A57               	incf	_vscp_probe_address,f,c
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
  8262  002758  6B72               	clrf	_vscp_node_substate& (0+255),b
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;vscp_firmware.c: 276: vscp_timer = 0;
  8266  00275A  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8267  00275C  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8268  00275E  D7EE               	goto	l5741
  8269  002760                     l857:
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
  8273  002760  C057  F070         	movff	_vscp_probe_address,_vscp_nickname
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
  8277  002764  0E03               	movlw	3
  8278  002766  6F71               	movwf	_vscp_node_state& (0+255),b
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
  8282  002768  6B72               	clrf	_vscp_node_substate& (0+255),b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
  8286  00276A  5170               	movf	_vscp_nickname& (0+255),w,b
  8287  00276C  EC30  F018         	call	_vscp_writeNicknamePermanent
  8288                           
  8289                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
  8290  002770  0E40               	movlw	64
  8291  002772  EC1E  F018         	call	_vscp_setSegmentCRC
  8292                           
  8293                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
  8294  002776  0100               	movlb	0	; () banked
  8295  002778  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;vscp_firmware.c: 290: vscp_goActiveState();
  8299  00277A  EC9B  F017         	call	_vscp_goActiveState	;wreg free
  8300  00277E  D009               	goto	l848
  8301  002780                     l856:
  8302                           
  8303                           ; BSR set to: 0
  8304                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
  8305  002780  6B72               	clrf	_vscp_node_substate& (0+255),b
  8306  002782  D007               	goto	l848
  8307  002784                     l5773:
  8308  002784  0100               	movlb	0	; () banked
  8309  002786  5172               	movf	_vscp_node_substate& (0+255),w,b
  8310                           
  8311                           ; Switch size 1, requested type "speed"
  8312                           ; Number of cases is 3, Range of values is 0 to 2
  8313                           ; switch strategies available:
  8314                           ; Name         Instructions Cycles
  8315                           ; simple_byte           10     6 (average)
  8316                           ;	Chosen strategy is simple_byte
  8317  002788  E0AA               	bz	l5703
  8318  00278A  0A01               	xorlw	1	; case 1
  8319  00278C  E0C8               	bz	l849
  8320  00278E  0A03               	xorlw	3	; case 2
  8321  002790  E1F7               	bnz	l856
  8322  002792                     l848:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
  8326  002792  6B75               	clrf	_vscp_imsg& (0+255),b
  8327                           
  8328                           ; BSR set to: 0
  8329  002794  0012               	return	
  8330  002796                     __end_of_vscp_handleProbeState:
  8331                           	opt stack 0
  8332                           tblptru	equ	0xFF8
  8333                           tblptrh	equ	0xFF7
  8334                           tblptrl	equ	0xFF6
  8335                           tablat	equ	0xFF5
  8336                           prodh	equ	0xFF4
  8337                           prodl	equ	0xFF3
  8338                           postinc0	equ	0xFEE
  8339                           wreg	equ	0xFE8
  8340                           indf1	equ	0xFE7
  8341                           fsr1h	equ	0xFE2
  8342                           fsr1l	equ	0xFE1
  8343                           indf2	equ	0xFDF
  8344                           postinc2	equ	0xFDE
  8345                           postdec2	equ	0xFDD
  8346                           fsr2h	equ	0xFDA
  8347                           fsr2l	equ	0xFD9
  8348                           status	equ	0xFD8
  8349                           
  8350 ;; *************** function _vscp_goActiveState *****************
  8351 ;; Defined at:
  8352 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;		None
  8357 ;; Return value:  Size  Location     Type
  8358 ;;		None               void
  8359 ;; Registers used:
  8360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : F/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8370 ;;Total ram usage:        0 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    7
  8373 ;; This function calls:
  8374 ;;		_vscp_sendEvent
  8375 ;; This function is called by:
  8376 ;;		_main
  8377 ;;		_vscp_handleProbeState
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           	psect	text48
  8382  002F36                     __ptext48:
  8383                           	opt stack 0
  8384  002F36                     _vscp_goActiveState:
  8385                           	opt stack 22
  8386                           
  8387                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;incstack = 0
  8391                           ;incstack = 0
  8392  002F36  0E81               	movlw	129
  8393  002F38  0100               	movlb	0	; () banked
  8394  002F3A  6F83               	movwf	_vscp_omsg& (0+255),b
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
  8398  002F3C  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
  8402  002F3E  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8403  002F40  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8404                           
  8405                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
  8406  002F42  0E02               	movlw	2
  8407  002F44  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
  8411  002F46  C070  F088         	movff	_vscp_nickname,_vscp_omsg+5
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;vscp_firmware.c: 358: vscp_sendEvent();
  8415  002F4A  ECF2  F016         	call	_vscp_sendEvent	;wreg free
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
  8419  002F4E  0E01               	movlw	1
  8420  002F50  6E56               	movwf	_vscp_initledfunc,c
  8421                           
  8422                           ; BSR set to: 0
  8423  002F52  0C01               	retlw	1
  8424  002F54                     __end_of_vscp_goActiveState:
  8425                           	opt stack 0
  8426                           tblptru	equ	0xFF8
  8427                           tblptrh	equ	0xFF7
  8428                           tblptrl	equ	0xFF6
  8429                           tablat	equ	0xFF5
  8430                           prodh	equ	0xFF4
  8431                           prodl	equ	0xFF3
  8432                           postinc0	equ	0xFEE
  8433                           wreg	equ	0xFE8
  8434                           indf1	equ	0xFE7
  8435                           fsr1h	equ	0xFE2
  8436                           fsr1l	equ	0xFE1
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           postdec2	equ	0xFDD
  8440                           fsr2h	equ	0xFDA
  8441                           fsr2l	equ	0xFD9
  8442                           status	equ	0xFD8
  8443                           
  8444 ;; *************** function _vscp_sendEvent *****************
  8445 ;; Defined at:
  8446 ;;		line 1275 in file "../../vscp_firmware/common/vscp_firmware.c"
  8447 ;; Parameters:    Size  Location     Type
  8448 ;;		None
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  rv              1    0        unsigned char 
  8451 ;; Return value:  Size  Location     Type
  8452 ;;                  1    wreg      unsigned char 
  8453 ;; Registers used:
  8454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8455 ;; Tracked objects:
  8456 ;;		On entry : F/0
  8457 ;;		On exit  : F/0
  8458 ;;		Unchanged: 0/0
  8459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8464 ;;Total ram usage:        1 bytes
  8465 ;; Hardware stack levels used:    1
  8466 ;; Hardware stack levels required when called:    6
  8467 ;; This function calls:
  8468 ;;		_sendVSCPFrame
  8469 ;; This function is called by:
  8470 ;;		_vscp_handleProbeState
  8471 ;;		_vscp_goActiveState
  8472 ;;		_vscp_sendHeartBeat
  8473 ;;		_vscp_newNodeOnline
  8474 ;;		_vscp_handleProtocolEvent
  8475 ;; This function uses a non-reentrant model
  8476 ;;
  8477                           
  8478                           	psect	text49
  8479  002DE4                     __ptext49:
  8480                           	opt stack 0
  8481  002DE4                     _vscp_sendEvent:
  8482                           	opt stack 22
  8483                           
  8484                           ; BSR set to: 0
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;incstack = 0
  8488                           ;incstack = 0
  8489  002DE4  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8490  002DE8  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8491  002DEC  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8492  002DF0  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8493  002DF4  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8494  002DF8  5183               	movf	_vscp_omsg& (0+255),w,b
  8495  002DFA  0B0F               	andlw	15
  8496  002DFC  6E44               	movwf	?_sendVSCPFrame+5,c
  8497  002DFE  0E00               	movlw	high (_vscp_omsg+5)
  8498  002E00  6E46               	movwf	?_sendVSCPFrame+7,c
  8499  002E02  0E88               	movlw	low (_vscp_omsg+5)
  8500  002E04  6E45               	movwf	?_sendVSCPFrame+6,c
  8501  002E06  EFCB  F013         	goto	_sendVSCPFrame	;wreg free
  8502  002E0A                     __end_of_vscp_sendEvent:
  8503                           	opt stack 0
  8504                           tblptru	equ	0xFF8
  8505                           tblptrh	equ	0xFF7
  8506                           tblptrl	equ	0xFF6
  8507                           tablat	equ	0xFF5
  8508                           prodh	equ	0xFF4
  8509                           prodl	equ	0xFF3
  8510                           postinc0	equ	0xFEE
  8511                           wreg	equ	0xFE8
  8512                           indf1	equ	0xFE7
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           fsr2h	equ	0xFDA
  8519                           fsr2l	equ	0xFD9
  8520                           status	equ	0xFD8
  8521                           
  8522 ;; *************** function _sendVSCPFrame *****************
  8523 ;; Defined at:
  8524 ;;		line 1453 in file "../main.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8527 ;;  vscptype        1   64[COMRAM] unsigned char 
  8528 ;;  nodeid          1   65[COMRAM] unsigned char 
  8529 ;;  priority        1   66[COMRAM] unsigned char 
  8530 ;;  size            1   67[COMRAM] unsigned char 
  8531 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8532 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  id              4   70[COMRAM] unsigned long 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      unsigned char 
  8537 ;; Registers used:
  8538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : F/0
  8541 ;;		On exit  : F/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8544 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8545 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8546 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8547 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8548 ;;Total ram usage:       32 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    5
  8551 ;; This function calls:
  8552 ;;		_sendCANFrame
  8553 ;; This function is called by:
  8554 ;;		_SendInformationEvent
  8555 ;;		_vscp_sendEvent
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text50
  8560  002796                     __ptext50:
  8561                           	opt stack 0
  8562  002796                     _sendVSCPFrame:
  8563                           	opt stack 22
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;main.c: 1454: uint32_t id = ( (uint32_t)priority << 26 ) |
  8567                           ;main.c: 1455: ( (uint32_t)vscpclass << 16 ) |
  8568                           ;main.c: 1456: ( (uint32_t)vscptype << 8 ) |
  8569                           ;main.c: 1457: nodeid;
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;incstack = 0
  8573                           ;incstack = 0
  8574  002796  C041  F090         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  8575  00279A  6B91               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  8576  00279C  6B92               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  8577  00279E  6B93               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  8578  0027A0  C092  F093         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  8579  0027A4  C091  F092         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  8580  0027A8  C090  F091         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  8581  0027AC  6B90               	clrf	??_sendVSCPFrame& (0+255),b
  8582  0027AE  503F               	movf	sendVSCPFrame@vscpclass,w,c
  8583  0027B0  6F94               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  8584  0027B2  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  8585  0027B4  6F95               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  8586  0027B6  6B96               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  8587  0027B8  6B97               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  8588  0027BA  C095  F097         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  8589  0027BE  C094  F096         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  8590  0027C2  6B95               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  8591  0027C4  6B94               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  8592  0027C6  C043  F098         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  8593  0027CA  6B99               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  8594  0027CC  6B9A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  8595  0027CE  6B9B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  8596  0027D0  0E1A               	movlw	26
  8597  0027D2                     u6725:
  8598  0027D2  90D8               	bcf	status,0,c
  8599  0027D4  3798               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  8600  0027D6  3799               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  8601  0027D8  379A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  8602  0027DA  379B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  8603  0027DC  2EE8               	decfsz	wreg,f,c
  8604  0027DE  D7F9               	goto	u6725
  8605  0027E0  5194               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  8606  0027E2  1198               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  8607  0027E4  6F9C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  8608  0027E6  5195               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  8609  0027E8  1199               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  8610  0027EA  6F9D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  8611  0027EC  5196               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  8612  0027EE  119A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  8613  0027F0  6F9E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  8614  0027F2  5197               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  8615  0027F4  119B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  8616  0027F6  6F9F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  8617  0027F8  5190               	movf	??_sendVSCPFrame& (0+255),w,b
  8618  0027FA  119C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  8619  0027FC  6FA0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  8620  0027FE  5191               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  8621  002800  119D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  8622  002802  6FA1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  8623  002804  5192               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  8624  002806  119E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  8625  002808  6FA2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  8626  00280A  5193               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  8627  00280C  119F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  8628  00280E  6FA3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  8629  002810  5042               	movf	sendVSCPFrame@nodeid,w,c
  8630  002812  11A0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  8631  002814  6E47               	movwf	sendVSCPFrame@id,c
  8632  002816  51A1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  8633  002818  6E48               	movwf	sendVSCPFrame@id+1,c
  8634  00281A  51A2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  8635  00281C  6E49               	movwf	sendVSCPFrame@id+2,c
  8636  00281E  51A3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  8637  002820  6E4A               	movwf	sendVSCPFrame@id+3,c
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;main.c: 1459: if ( !sendCANFrame( id, size, pData ) ) {
  8641  002822  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  8642  002826  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  8643  00282A  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  8644  00282E  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  8645  002832  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  8646  002836  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  8647  00283A  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  8648  00283E  EC1D  F016         	call	_sendCANFrame	;wreg free
  8649  002842  0900               	iorlw	0
  8650  002844  E101               	bnz	l6415
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 1460: return 0;
  8654  002846  0C00               	retlw	0
  8655  002848                     l6415:
  8656                           
  8657                           ; BSR set to: 0
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;main.c: 1461: }
  8661                           ;main.c: 1463: return 1;
  8662  002848  0C01               	retlw	1
  8663  00284A                     __end_of_sendVSCPFrame:
  8664                           	opt stack 0
  8665                           tblptru	equ	0xFF8
  8666                           tblptrh	equ	0xFF7
  8667                           tblptrl	equ	0xFF6
  8668                           tablat	equ	0xFF5
  8669                           prodh	equ	0xFF4
  8670                           prodl	equ	0xFF3
  8671                           postinc0	equ	0xFEE
  8672                           wreg	equ	0xFE8
  8673                           indf1	equ	0xFE7
  8674                           fsr1h	equ	0xFE2
  8675                           fsr1l	equ	0xFE1
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           
  8683 ;; *************** function _sendCANFrame *****************
  8684 ;; Defined at:
  8685 ;;		line 1498 in file "../main.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;  id              4   54[COMRAM] unsigned long 
  8688 ;;  dlc             1   58[COMRAM] unsigned char 
  8689 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  8690 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;  rv              1   61[COMRAM] unsigned char 
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      unsigned char 
  8695 ;; Registers used:
  8696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : F/0
  8699 ;;		On exit  : F/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8702 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8705 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8706 ;;Total ram usage:        8 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    4
  8709 ;; This function calls:
  8710 ;;		_ECANSendMessage
  8711 ;; This function is called by:
  8712 ;;		_sendVSCPFrame
  8713 ;; This function uses a non-reentrant model
  8714 ;;
  8715                           
  8716                           	psect	text51
  8717  002C3A                     __ptext51:
  8718                           	opt stack 0
  8719  002C3A                     _sendCANFrame:
  8720                           	opt stack 22
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;main.c: 1499: uint8_t rv = 0;
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;incstack = 0
  8727                           ;incstack = 0
  8728  002C3A  6A3E               	clrf	sendCANFrame@rv,c
  8729                           
  8730                           ;main.c: 1500: sendTimer = 0;
  8731  002C3C  6A55               	clrf	_sendTimer,c
  8732                           
  8733                           ;main.c: 1502: while ( sendTimer < 1 ) {
  8734  002C3E  D017               	goto	l6513
  8735  002C40                     l6509:
  8736                           
  8737                           ;main.c: 1503: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  8738  002C40  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  8739  002C44  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  8740  002C48  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  8741  002C4C  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  8742  002C50  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  8743  002C54  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  8744  002C58  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  8745  002C5C  0E20               	movlw	32
  8746  002C5E  6E19               	movwf	?_ECANSendMessage+7,c
  8747  002C60  EC8C  F00E         	call	_ECANSendMessage	;wreg free
  8748  002C64  0900               	iorlw	0
  8749  002C66  E003               	bz	l6513
  8750                           
  8751                           ;main.c: 1504: rv = 1;
  8752  002C68  0E01               	movlw	1
  8753  002C6A  6E3E               	movwf	sendCANFrame@rv,c
  8754                           
  8755                           ;main.c: 1505: break;
  8756  002C6C  D002               	goto	l454
  8757  002C6E                     l6513:
  8758  002C6E  5055               	movf	_sendTimer,w,c
  8759  002C70  E0E7               	bz	l6509
  8760  002C72                     l454:
  8761                           
  8762                           ;main.c: 1506: }
  8763                           ;main.c: 1507: }
  8764                           ;main.c: 1509: vscp_omsg.flags = 0;
  8765  002C72  0100               	movlb	0	; () banked
  8766  002C74  6B83               	clrf	_vscp_omsg& (0+255),b
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;main.c: 1511: return rv;
  8770  002C76  503E               	movf	sendCANFrame@rv,w,c
  8771                           
  8772                           ; BSR set to: 0
  8773  002C78  0012               	return	
  8774  002C7A                     __end_of_sendCANFrame:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           indf1	equ	0xFE7
  8785                           fsr1h	equ	0xFE2
  8786                           fsr1l	equ	0xFE1
  8787                           indf2	equ	0xFDF
  8788                           postinc2	equ	0xFDE
  8789                           postdec2	equ	0xFDD
  8790                           fsr2h	equ	0xFDA
  8791                           fsr2l	equ	0xFD9
  8792                           status	equ	0xFD8
  8793                           
  8794 ;; *************** function _ECANSendMessage *****************
  8795 ;; Defined at:
  8796 ;;		line 617 in file "../ECAN.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;  id              4   17[COMRAM] unsigned long 
  8799 ;;  data            2   21[COMRAM] PTR unsigned char 
  8800 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8801 ;;  dataLen         1   23[COMRAM] unsigned char 
  8802 ;;  msgFlags        1   24[COMRAM] enum E18958
  8803 ;; Auto vars:     Size  Location     Type
  8804 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  8805 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8806 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8807 ;;		 -> B0CON(1), 
  8808 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  8809 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8810 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8811 ;;		 -> B0CON(1), 
  8812 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  8813 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8814 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8815 ;;		 -> B0CON(1), 
  8816 ;;  i               1   51[COMRAM] unsigned char 
  8817 ;;  temp            1   50[COMRAM] unsigned char 
  8818 ;;  tempBSEL0       1   47[COMRAM] struct .
  8819 ;;  j               1   46[COMRAM] unsigned char 
  8820 ;;  buffers         1   45[COMRAM] unsigned char 
  8821 ;;  mode            1   44[COMRAM] unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  1    wreg      enum E18242
  8824 ;; Registers used:
  8825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8831 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8832 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8834 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8835 ;;Total ram usage:       37 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    3
  8838 ;; This function calls:
  8839 ;;		__CANIDToRegs
  8840 ;; This function is called by:
  8841 ;;		_sendCANFrame
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text52
  8846  001D18                     __ptext52:
  8847                           	opt stack 0
  8848  001D18                     _ECANSendMessage:
  8849                           	opt stack 22
  8850                           
  8851                           ;ECAN.c: 619: BYTE mode;
  8852                           ;ECAN.c: 620: BYTE buffers;
  8853                           ;ECAN.c: 628: BYTE i,j;
  8854                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  8855                           ;ECAN.c: 630: BYTE* pb[9];
  8856                           ;ECAN.c: 631: BYTE temp;
  8857                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  8858                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;incstack = 0
  8862                           ;incstack = 0
  8863  001D18  0E0F               	movlw	15	;volatile
  8864  001D1A  6E1C               	movwf	ECANSendMessage@pb+1,c
  8865  001D1C  0E20               	movlw	32	;volatile
  8866  001D1E  6E1B               	movwf	ECANSendMessage@pb,c
  8867                           
  8868                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  8869  001D20  0E0F               	movlw	15	;volatile
  8870  001D22  6E1E               	movwf	ECANSendMessage@pb+3,c
  8871  001D24  0E10               	movlw	16	;volatile
  8872  001D26  6E1D               	movwf	ECANSendMessage@pb+2,c
  8873                           
  8874                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  8875  001D28  0E0F               	movlw	15	;volatile
  8876  001D2A  6E20               	movwf	ECANSendMessage@pb+5,c
  8877  001D2C  6A1F               	clrf	ECANSendMessage@pb+4,c
  8878                           
  8879                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  8880  001D2E  010E               	movlb	14	; () banked
  8881  001D30  0E0E               	movlw	14	;volatile
  8882  001D32  6E22               	movwf	ECANSendMessage@pb+7,c
  8883  001D34  0E80               	movlw	128	;volatile
  8884  001D36  6E21               	movwf	ECANSendMessage@pb+6,c
  8885                           
  8886                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  8887  001D38  0E0E               	movlw	14	;volatile
  8888  001D3A  6E24               	movwf	ECANSendMessage@pb+9,c
  8889  001D3C  0E90               	movlw	144	;volatile
  8890  001D3E  6E23               	movwf	ECANSendMessage@pb+8,c
  8891                           
  8892                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  8893  001D40  0E0E               	movlw	14	;volatile
  8894  001D42  6E26               	movwf	ECANSendMessage@pb+11,c
  8895  001D44  0EA0               	movlw	160	;volatile
  8896  001D46  6E25               	movwf	ECANSendMessage@pb+10,c
  8897                           
  8898                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  8899  001D48  0E0E               	movlw	14	;volatile
  8900  001D4A  6E28               	movwf	ECANSendMessage@pb+13,c
  8901  001D4C  0EB0               	movlw	176	;volatile
  8902  001D4E  6E27               	movwf	ECANSendMessage@pb+12,c
  8903                           
  8904                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  8905  001D50  0E0E               	movlw	14	;volatile
  8906  001D52  6E2A               	movwf	ECANSendMessage@pb+15,c
  8907  001D54  0EC0               	movlw	192	;volatile
  8908  001D56  6E29               	movwf	ECANSendMessage@pb+14,c
  8909                           
  8910                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  8911  001D58  0E0E               	movlw	14	;volatile
  8912  001D5A  6E2C               	movwf	ECANSendMessage@pb+17,c
  8913  001D5C  0ED0               	movlw	208	;volatile
  8914  001D5E  6E2B               	movwf	ECANSendMessage@pb+16,c
  8915                           
  8916                           ; BSR set to: 14
  8917                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  8918  001D60  5072               	movf	3954,w,c	;volatile
  8919  001D62  0BC0               	andlw	192
  8920  001D64  6E2D               	movwf	ECANSendMessage@mode,c
  8921                           
  8922                           ; BSR set to: 14
  8923                           ;ECAN.c: 660: if ( mode == 0x00 )
  8924  001D66  662D               	tstfsz	ECANSendMessage@mode,c
  8925  001D68  D002               	goto	l6527
  8926                           
  8927                           ; BSR set to: 14
  8928                           ;ECAN.c: 661: buffers = 2;
  8929  001D6A  0E02               	movlw	2
  8930  001D6C  D001               	goto	L26
  8931  001D6E                     l6527:
  8932                           
  8933                           ; BSR set to: 14
  8934                           ;ECAN.c: 662: else
  8935                           ;ECAN.c: 663: buffers = 8;
  8936  001D6E  0E08               	movlw	8
  8937  001D70                     L26:
  8938  001D70  6E2E               	movwf	ECANSendMessage@buffers,c
  8939                           
  8940                           ; BSR set to: 14
  8941                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  8942  001D72  90D8               	bcf	status,0,c
  8943  001D74  317D               	rrcf	125,w,b	;volatile
  8944  001D76  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  8945                           
  8946                           ; BSR set to: 14
  8947                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  8948  001D78  6A34               	clrf	ECANSendMessage@i,c
  8949  001D7A  D07C               	goto	l6587
  8950  001D7C                     l6533:
  8951                           
  8952                           ;ECAN.c: 688: {
  8953                           ;ECAN.c: 693: ptr = pb[i];
  8954  001D7C  5034               	movf	ECANSendMessage@i,w,c
  8955  001D7E  0D02               	mullw	2
  8956  001D80  50F3               	movf	prodl,w,c
  8957  001D82  0F1B               	addlw	low ECANSendMessage@pb
  8958  001D84  6ED9               	movwf	fsr2l,c
  8959  001D86  6ADA               	clrf	fsr2h,c
  8960  001D88  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  8961  001D8C  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  8962                           
  8963                           ;ECAN.c: 694: tempPtr = ptr;
  8964  001D90  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  8965  001D94  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  8966                           
  8967                           ;ECAN.c: 702: if ( i > 2 )
  8968  001D98  0E02               	movlw	2
  8969  001D9A  6434               	cpfsgt	ECANSendMessage@i,c
  8970  001D9C  D004               	goto	l6545
  8971                           
  8972                           ;ECAN.c: 703: {
  8973                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  8974  001D9E  90D8               	bcf	status,0,c
  8975  001DA0  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  8976                           
  8977                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  8978  001DA2  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  8979  001DA4  D066               	goto	l6585
  8980  001DA6                     l6545:
  8981                           
  8982                           ;ECAN.c: 714: }
  8983                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  8984  001DA6  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8985  001DAA  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8986  001DAE  50DF               	movf	indf2,w,c
  8987  001DB0  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  8988  001DB2  B61A               	btfsc	??_ECANSendMessage,3,c
  8989  001DB4  D05E               	goto	l6585
  8990                           
  8991                           ;ECAN.c: 721: {
  8992                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  8993  001DB6  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8994  001DBA  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8995  001DBE  0EFC               	movlw	252
  8996  001DC0  16DF               	andwf	indf2,f,c
  8997                           
  8998                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  8999  001DC2  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  9000  001DC6  0E03               	movlw	3
  9001  001DC8  161A               	andwf	??_ECANSendMessage,f,c
  9002  001DCA  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9003  001DCE  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9004  001DD2  501A               	movf	??_ECANSendMessage,w,c
  9005  001DD4  12DF               	iorwf	indf2,f,c
  9006                           
  9007                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  9008  001DD6  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  9009  001DD8  D004               	goto	l646
  9010                           
  9011                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  9012  001DDA  5018               	movf	ECANSendMessage@dataLen,w,c
  9013  001DDC  0940               	iorlw	64
  9014  001DDE  6E33               	movwf	ECANSendMessage@temp,c
  9015  001DE0  D002               	goto	l6555
  9016  001DE2                     l646:
  9017                           
  9018                           ;ECAN.c: 729: else
  9019                           ;ECAN.c: 730: temp = dataLen;
  9020  001DE2  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  9021  001DE6                     l6555:
  9022                           
  9023                           ;ECAN.c: 732: *(ptr+5) = temp;
  9024  001DE6  EE20 F005          	lfsr	2,5
  9025  001DEA  5035               	movf	ECANSendMessage@ptr,w,c
  9026  001DEC  26D9               	addwf	fsr2l,f,c
  9027  001DEE  5036               	movf	ECANSendMessage@ptr+1,w,c
  9028  001DF0  22DA               	addwfc	fsr2h,f,c
  9029  001DF2  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  9030                           
  9031                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  9032  001DF6  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  9033  001DF8  D003               	goto	l648
  9034                           
  9035                           ;ECAN.c: 736: temp = 1;
  9036  001DFA  0E01               	movlw	1
  9037  001DFC  6E33               	movwf	ECANSendMessage@temp,c
  9038  001DFE  D001               	goto	l6561
  9039  001E00                     l648:
  9040                           
  9041                           ;ECAN.c: 738: else
  9042                           ;ECAN.c: 739: temp = 0;
  9043  001E00  6A33               	clrf	ECANSendMessage@temp,c
  9044  001E02                     l6561:
  9045                           
  9046                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  9047  001E02  2835               	incf	ECANSendMessage@ptr,w,c
  9048  001E04  6E08               	movwf	?__CANIDToRegs,c
  9049  001E06  0E00               	movlw	0
  9050  001E08  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  9051  001E0A  6E09               	movwf	?__CANIDToRegs+1,c
  9052  001E0C  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  9053  001E10  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  9054  001E14  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  9055  001E18  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  9056  001E1C  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  9057  001E20  ECF0  F00F         	call	__CANIDToRegs	;wreg free
  9058                           
  9059                           ;ECAN.c: 745: ptr += 6;
  9060  001E24  0E06               	movlw	6
  9061  001E26  2635               	addwf	ECANSendMessage@ptr,f,c
  9062  001E28  0E00               	movlw	0
  9063  001E2A  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  9064                           
  9065                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  9066  001E2C  6A2F               	clrf	ECANSendMessage@j,c
  9067  001E2E  D00F               	goto	l6575
  9068  001E30                     l6567:
  9069                           
  9070                           ;ECAN.c: 748: *ptr++ = *data++;
  9071  001E30  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  9072  001E34  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  9073  001E38  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  9074  001E3C  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  9075  001E40  CFDF FFE7          	movff	indf2,indf1
  9076  001E44  4A16               	infsnz	ECANSendMessage@data,f,c
  9077  001E46  2A17               	incf	ECANSendMessage@data+1,f,c
  9078  001E48  4A35               	infsnz	ECANSendMessage@ptr,f,c
  9079  001E4A  2A36               	incf	ECANSendMessage@ptr+1,f,c
  9080  001E4C  2A2F               	incf	ECANSendMessage@j,f,c
  9081  001E4E                     l6575:
  9082  001E4E  5018               	movf	ECANSendMessage@dataLen,w,c
  9083  001E50  5C2F               	subwf	ECANSendMessage@j,w,c
  9084  001E52  E3EE               	bnc	l6567
  9085                           
  9086                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  9087  001E54  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9088  001E58  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9089  001E5C  50DF               	movf	indf2,w,c
  9090  001E5E  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9091  001E60  B41A               	btfsc	??_ECANSendMessage,2,c
  9092  001E62  0C01               	retlw	1
  9093                           
  9094                           ;ECAN.c: 753: *tempPtr |= 0x08;
  9095  001E64  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9096  001E68  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9097  001E6C  0E00               	movlw	0
  9098  001E6E  86DB               	bsf	plusw2,3,c
  9099                           
  9100                           ;ECAN.c: 755: return TRUE;
  9101  001E70  0C01               	retlw	1
  9102  001E72                     l6585:
  9103  001E72  2A34               	incf	ECANSendMessage@i,f,c
  9104  001E74                     l6587:
  9105  001E74  502E               	movf	ECANSendMessage@buffers,w,c
  9106  001E76  5C34               	subwf	ECANSendMessage@i,w,c
  9107  001E78  E381               	bnc	l6533
  9108                           
  9109                           ;ECAN.c: 756: }
  9110                           ;ECAN.c: 757: }
  9111                           ;ECAN.c: 760: return FALSE;
  9112  001E7A  0C00               	retlw	0
  9113  001E7C                     __end_of_ECANSendMessage:
  9114                           	opt stack 0
  9115                           tblptru	equ	0xFF8
  9116                           tblptrh	equ	0xFF7
  9117                           tblptrl	equ	0xFF6
  9118                           tablat	equ	0xFF5
  9119                           prodh	equ	0xFF4
  9120                           prodl	equ	0xFF3
  9121                           postinc0	equ	0xFEE
  9122                           wreg	equ	0xFE8
  9123                           indf1	equ	0xFE7
  9124                           fsr1h	equ	0xFE2
  9125                           fsr1l	equ	0xFE1
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           plusw2	equ	0xFDB
  9130                           fsr2h	equ	0xFDA
  9131                           fsr2l	equ	0xFD9
  9132                           status	equ	0xFD8
  9133                           
  9134 ;; *************** function __CANIDToRegs *****************
  9135 ;; Defined at:
  9136 ;;		line 1099 in file "../ECAN.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9139 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9140 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9141 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  9142 ;;  val             4    9[COMRAM] unsigned long 
  9143 ;;  type            1   13[COMRAM] unsigned char 
  9144 ;; Auto vars:     Size  Location     Type
  9145 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  9146 ;;		 -> _CANIDToRegs@val(4), 
  9147 ;; Return value:  Size  Location     Type
  9148 ;;		None               void
  9149 ;; Registers used:
  9150 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/E
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9156 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9157 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9158 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9159 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9160 ;;Total ram usage:       10 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:    2
  9163 ;; This function calls:
  9164 ;;		Nothing
  9165 ;; This function is called by:
  9166 ;;		_ECANSendMessage
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text53
  9171  001FE0                     __ptext53:
  9172                           	opt stack 0
  9173  001FE0                     __CANIDToRegs:
  9174                           	opt stack 22
  9175                           
  9176                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9177                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9178                           
  9179                           ;incstack = 0
  9180                           ;incstack = 0
  9181  001FE0  0E0A               	movlw	low __CANIDToRegs@val
  9182  001FE2  6E11               	movwf	__CANIDToRegs@Value,c
  9183                           
  9184                           ;ECAN.c: 1104: if ( type == 0 )
  9185  001FE4  660E               	tstfsz	__CANIDToRegs@type,c
  9186  001FE6  D037               	goto	l6603
  9187                           
  9188                           ;ECAN.c: 1105: {
  9189                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9190  001FE8  5011               	movf	__CANIDToRegs@Value,w,c
  9191  001FEA  6ED9               	movwf	fsr2l,c
  9192  001FEC  6ADA               	clrf	fsr2h,c
  9193  001FEE  50DF               	movf	indf2,w,c
  9194  001FF0  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9195  001FF2  90D8               	bcf	status,0,c
  9196  001FF4  320F               	rrcf	??__CANIDToRegs,f,c
  9197  001FF6  90D8               	bcf	status,0,c
  9198  001FF8  320F               	rrcf	??__CANIDToRegs,f,c
  9199  001FFA  90D8               	bcf	status,0,c
  9200  001FFC  300F               	rrcf	??__CANIDToRegs,w,c
  9201  001FFE  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9202  002002  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9203  002006  6EDF               	movwf	indf2,c
  9204                           
  9205                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9206  002008  5011               	movf	__CANIDToRegs@Value,w,c
  9207  00200A  6ED9               	movwf	fsr2l,c
  9208  00200C  6ADA               	clrf	fsr2h,c
  9209  00200E  2AD9               	incf	fsr2l,f,c
  9210  002010  6ADA               	clrf	fsr2h,c
  9211  002012  50DF               	movf	indf2,w,c
  9212  002014  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9213  002016  0E05               	movlw	5
  9214  002018  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9215  00201A                     u6965:
  9216  00201A  90D8               	bcf	status,0,c
  9217  00201C  360F               	rlcf	??__CANIDToRegs,f,c
  9218  00201E  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9219  002020  D7FC               	goto	u6965
  9220  002022  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9221  002026  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9222  00202A  500F               	movf	??__CANIDToRegs,w,c
  9223  00202C  12DF               	iorwf	indf2,f,c
  9224                           
  9225                           ;ECAN.c: 1109: ptr++;
  9226  00202E  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9227  002030  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9228                           
  9229                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9230  002032  5011               	movf	__CANIDToRegs@Value,w,c
  9231  002034  6ED9               	movwf	fsr2l,c
  9232  002036  6ADA               	clrf	fsr2h,c
  9233  002038  50DF               	movf	indf2,w,c
  9234  00203A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9235  00203C  0E05               	movlw	5
  9236  00203E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9237  002040                     u6975:
  9238  002040  90D8               	bcf	status,0,c
  9239  002042  360F               	rlcf	??__CANIDToRegs,f,c
  9240  002044  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9241  002046  D7FC               	goto	u6975
  9242  002048  500F               	movf	??__CANIDToRegs,w,c
  9243  00204A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9244  00204E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9245  002052  6EDF               	movwf	indf2,c
  9246                           
  9247                           ;ECAN.c: 1111: }
  9248  002054  0012               	return	
  9249  002056                     l6603:
  9250                           
  9251                           ;ECAN.c: 1112: else
  9252                           ;ECAN.c: 1113: {
  9253                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9254  002056  5011               	movf	__CANIDToRegs@Value,w,c
  9255  002058  6ED9               	movwf	fsr2l,c
  9256  00205A  6ADA               	clrf	fsr2h,c
  9257  00205C  0E02               	movlw	2
  9258  00205E  26D9               	addwf	fsr2l,f,c
  9259  002060  6ADA               	clrf	fsr2h,c
  9260  002062  50DF               	movf	indf2,w,c
  9261  002064  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9262  002066  0E05               	movlw	5
  9263  002068  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9264  00206A                     u6985:
  9265  00206A  90D8               	bcf	status,0,c
  9266  00206C  320F               	rrcf	??__CANIDToRegs,f,c
  9267  00206E  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9268  002070  D7FC               	goto	u6985
  9269  002072  500F               	movf	??__CANIDToRegs,w,c
  9270  002074  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9271  002078  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9272  00207C  6EDF               	movwf	indf2,c
  9273                           
  9274                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9275  00207E  5011               	movf	__CANIDToRegs@Value,w,c
  9276  002080  6ED9               	movwf	fsr2l,c
  9277  002082  6ADA               	clrf	fsr2h,c
  9278  002084  0E03               	movlw	3
  9279  002086  26D9               	addwf	fsr2l,f,c
  9280  002088  6ADA               	clrf	fsr2h,c
  9281  00208A  50DF               	movf	indf2,w,c
  9282  00208C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9283  00208E  90D8               	bcf	status,0,c
  9284  002090  360F               	rlcf	??__CANIDToRegs,f,c
  9285  002092  90D8               	bcf	status,0,c
  9286  002094  360F               	rlcf	??__CANIDToRegs,f,c
  9287  002096  90D8               	bcf	status,0,c
  9288  002098  360F               	rlcf	??__CANIDToRegs,f,c
  9289  00209A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9290  00209E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9291  0020A2  500F               	movf	??__CANIDToRegs,w,c
  9292  0020A4  12DF               	iorwf	indf2,f,c
  9293                           
  9294                           ;ECAN.c: 1117: ptr++;
  9295  0020A6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9296  0020A8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9297                           
  9298                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9299  0020AA  5011               	movf	__CANIDToRegs@Value,w,c
  9300  0020AC  6ED9               	movwf	fsr2l,c
  9301  0020AE  6ADA               	clrf	fsr2h,c
  9302  0020B0  0E02               	movlw	2
  9303  0020B2  26D9               	addwf	fsr2l,f,c
  9304  0020B4  6ADA               	clrf	fsr2h,c
  9305  0020B6  50DF               	movf	indf2,w,c
  9306  0020B8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9307  0020BA  90D8               	bcf	status,0,c
  9308  0020BC  360F               	rlcf	??__CANIDToRegs,f,c
  9309  0020BE  90D8               	bcf	status,0,c
  9310  0020C0  360F               	rlcf	??__CANIDToRegs,f,c
  9311  0020C2  90D8               	bcf	status,0,c
  9312  0020C4  340F               	rlcf	??__CANIDToRegs,w,c
  9313  0020C6  0BE0               	andlw	224
  9314  0020C8  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9315  0020CC  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9316  0020D0  6EDF               	movwf	indf2,c
  9317                           
  9318                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9319  0020D2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9320  0020D6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9321  0020DA  0E00               	movlw	0
  9322  0020DC  86DB               	bsf	plusw2,3,c
  9323                           
  9324                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9325  0020DE  5011               	movf	__CANIDToRegs@Value,w,c
  9326  0020E0  6ED9               	movwf	fsr2l,c
  9327  0020E2  6ADA               	clrf	fsr2h,c
  9328  0020E4  0E02               	movlw	2
  9329  0020E6  26D9               	addwf	fsr2l,f,c
  9330  0020E8  6ADA               	clrf	fsr2h,c
  9331  0020EA  50DF               	movf	indf2,w,c
  9332  0020EC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9333  0020EE  0E03               	movlw	3
  9334  0020F0  160F               	andwf	??__CANIDToRegs,f,c
  9335  0020F2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9336  0020F6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9337  0020FA  500F               	movf	??__CANIDToRegs,w,c
  9338  0020FC  12DF               	iorwf	indf2,f,c
  9339                           
  9340                           ;ECAN.c: 1122: ptr++;
  9341  0020FE  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9342  002100  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9343                           
  9344                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9345  002102  5011               	movf	__CANIDToRegs@Value,w,c
  9346  002104  6ED9               	movwf	fsr2l,c
  9347  002106  6ADA               	clrf	fsr2h,c
  9348  002108  2AD9               	incf	fsr2l,f,c
  9349  00210A  6ADA               	clrf	fsr2h,c
  9350  00210C  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9351  002110  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9352  002114  CFDF FFE7          	movff	indf2,indf1
  9353                           
  9354                           ;ECAN.c: 1124: ptr++;
  9355  002118  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9356  00211A  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9357                           
  9358                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9359  00211C  5011               	movf	__CANIDToRegs@Value,w,c
  9360  00211E  6ED9               	movwf	fsr2l,c
  9361  002120  6ADA               	clrf	fsr2h,c
  9362  002122  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9363  002126  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9364  00212A  CFDF FFE7          	movff	indf2,indf1
  9365  00212E  0012               	return	
  9366  002130                     __end_of__CANIDToRegs:
  9367                           	opt stack 0
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           postinc0	equ	0xFEE
  9375                           wreg	equ	0xFE8
  9376                           indf1	equ	0xFE7
  9377                           fsr1h	equ	0xFE2
  9378                           fsr1l	equ	0xFE1
  9379                           indf2	equ	0xFDF
  9380                           postinc2	equ	0xFDE
  9381                           postdec2	equ	0xFDD
  9382                           plusw2	equ	0xFDB
  9383                           fsr2h	equ	0xFDA
  9384                           fsr2l	equ	0xFD9
  9385                           status	equ	0xFD8
  9386                           
  9387 ;; *************** function _vscp_getEvent *****************
  9388 ;; Defined at:
  9389 ;;		line 1295 in file "../../vscp_firmware/common/vscp_firmware.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;		None
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  rv              1   43[COMRAM] unsigned char 
  9394 ;; Return value:  Size  Location     Type
  9395 ;;                  1    wreg      unsigned char 
  9396 ;; Registers used:
  9397 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9398 ;; Tracked objects:
  9399 ;;		On entry : F/0
  9400 ;;		On exit  : 0/0
  9401 ;;		Unchanged: 0/0
  9402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9407 ;;Total ram usage:        1 bytes
  9408 ;; Hardware stack levels used:    1
  9409 ;; Hardware stack levels required when called:    6
  9410 ;; This function calls:
  9411 ;;		_getVSCPFrame
  9412 ;; This function is called by:
  9413 ;;		_main
  9414 ;; This function uses a non-reentrant model
  9415 ;;
  9416                           
  9417                           	psect	text54
  9418  002D40                     __ptext54:
  9419                           	opt stack 0
  9420  002D40                     _vscp_getEvent:
  9421                           	opt stack 24
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;vscp_firmware.c: 1296: int8_t rv;
  9425                           ;vscp_firmware.c: 1302: if (vscp_imsg.flags & 0x80) return !0;
  9426                           
  9427                           ;incstack = 0
  9428                           ;incstack = 0
  9429  002D40  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9430  002D42  0012               	return	
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;vscp_firmware.c: 1305: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
  9434                           ;vscp_firmware.c: 1306: &vscp_imsg.vscp_type,
  9435                           ;vscp_firmware.c: 1307: &vscp_imsg.oaddr,
  9436                           ;vscp_firmware.c: 1308: &vscp_imsg.priority,
  9437                           ;vscp_firmware.c: 1309: &vscp_imsg.flags,
  9438                           ;vscp_firmware.c: 1310: vscp_imsg.data))) {
  9439  002D44  0E79               	movlw	low (_vscp_imsg+4)
  9440  002D46  6E1E               	movwf	?_getVSCPFrame,c
  9441  002D48  0E7A               	movlw	low (_vscp_imsg+5)
  9442  002D4A  6E1F               	movwf	?_getVSCPFrame+1,c
  9443  002D4C  0E76               	movlw	low (_vscp_imsg+1)
  9444  002D4E  6E20               	movwf	?_getVSCPFrame+2,c
  9445  002D50  0E75               	movlw	low _vscp_imsg
  9446  002D52  6E21               	movwf	?_getVSCPFrame+3,c
  9447  002D54  0E7B               	movlw	low (_vscp_imsg+6)
  9448  002D56  6E22               	movwf	?_getVSCPFrame+4,c
  9449  002D58  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  9450  002D5A  EC4E  F015         	call	_getVSCPFrame
  9451  002D5E  6E2C               	movwf	vscp_getEvent@rv,c
  9452  002D60  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9453  002D62  B4D8               	btfsc	status,2,c
  9454  002D64  0012               	return	
  9455                           
  9456                           ;vscp_firmware.c: 1312: vscp_imsg.flags |= 0x80;
  9457  002D66  0100               	movlb	0	; () banked
  9458  002D68  8F75               	bsf	_vscp_imsg& (0+255),7,b
  9459  002D6A  0012               	return	
  9460  002D6C                     __end_of_vscp_getEvent:
  9461                           	opt stack 0
  9462                           tblptru	equ	0xFF8
  9463                           tblptrh	equ	0xFF7
  9464                           tblptrl	equ	0xFF6
  9465                           tablat	equ	0xFF5
  9466                           prodh	equ	0xFF4
  9467                           prodl	equ	0xFF3
  9468                           postinc0	equ	0xFEE
  9469                           wreg	equ	0xFE8
  9470                           indf1	equ	0xFE7
  9471                           fsr1h	equ	0xFE2
  9472                           fsr1l	equ	0xFE1
  9473                           indf2	equ	0xFDF
  9474                           postinc2	equ	0xFDE
  9475                           postdec2	equ	0xFDD
  9476                           plusw2	equ	0xFDB
  9477                           fsr2h	equ	0xFDA
  9478                           fsr2l	equ	0xFD9
  9479                           status	equ	0xFD8
  9480                           
  9481 ;; *************** function _getVSCPFrame *****************
  9482 ;; Defined at:
  9483 ;;		line 1477 in file "../main.c"
  9484 ;; Parameters:    Size  Location     Type
  9485 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9486 ;;		 -> vscp_imsg(14), 
  9487 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9488 ;;		 -> vscp_imsg(14), 
  9489 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9490 ;;		 -> vscp_imsg(14), 
  9491 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9492 ;;		 -> vscp_imsg(14), 
  9493 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9494 ;;		 -> vscp_imsg(14), 
  9495 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9496 ;;		 -> vscp_imsg(14), 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9499 ;;		 -> vscp_imsg(14), 
  9500 ;;  id              4   39[COMRAM] unsigned long 
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  1    wreg      unsigned char 
  9503 ;; Registers used:
  9504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : F/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9510 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9511 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9512 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9513 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9514 ;;Total ram usage:       14 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    5
  9517 ;; This function calls:
  9518 ;;		_getCANFrame
  9519 ;; This function is called by:
  9520 ;;		_vscp_getEvent
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           	psect	text55
  9525  002A9C                     __ptext55:
  9526                           	opt stack 0
  9527  002A9C                     _getVSCPFrame:
  9528                           	opt stack 24
  9529                           
  9530                           ;incstack = 0
  9531                           ;incstack = 0
  9532                           ;getVSCPFrame@pvscpclass stored from wreg
  9533  002A9C  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;main.c: 1478: uint32_t id;
  9537                           ;main.c: 1480: if ( !getCANFrame(&id, pSize, pData) ) {
  9538  002AA0  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9539  002AA4  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9540  002AA8  0E28               	movlw	getVSCPFrame@id& (0+255)
  9541  002AAA  EC05  F017         	call	_getCANFrame
  9542  002AAE  0900               	iorlw	0
  9543  002AB0  E101               	bnz	l4929
  9544                           
  9545                           ;main.c: 1481: return 0;
  9546  002AB2  0C00               	retlw	0
  9547  002AB4                     l4929:
  9548                           
  9549                           ;main.c: 1482: }
  9550                           ;main.c: 1484: *pNodeId = id & 0x0ff;
  9551  002AB4  501F               	movf	getVSCPFrame@pNodeId,w,c
  9552  002AB6  6ED9               	movwf	fsr2l,c
  9553  002AB8  6ADA               	clrf	fsr2h,c
  9554  002ABA  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9555                           
  9556                           ;main.c: 1485: *pvscptype = (id >> 8) & 0xff;
  9557  002ABE  501E               	movf	getVSCPFrame@pvscptype,w,c
  9558  002AC0  6ED9               	movwf	fsr2l,c
  9559  002AC2  6ADA               	clrf	fsr2h,c
  9560  002AC4  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9561                           
  9562                           ;main.c: 1486: *pvscpclass = (id >> 16) & 0x1ff;
  9563  002AC8  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9564  002ACA  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9565  002ACC  0E01               	movlw	1
  9566  002ACE  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9567  002AD0  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9568  002AD2  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9569  002AD4  6ED9               	movwf	fsr2l,c
  9570  002AD6  6ADA               	clrf	fsr2h,c
  9571  002AD8  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9572  002ADC  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  9573                           
  9574                           ;main.c: 1487: *pPriority = (uint16_t) (0x07 & (id >> 26));
  9575  002AE0  5020               	movf	getVSCPFrame@pPriority,w,c
  9576  002AE2  6ED9               	movwf	fsr2l,c
  9577  002AE4  6ADA               	clrf	fsr2h,c
  9578  002AE6  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  9579  002AEA  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  9580  002AEE  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  9581  002AF2  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  9582  002AF6  0E1B               	movlw	27
  9583  002AF8  D005               	goto	u4380
  9584  002AFA                     u4385:
  9585  002AFA  90D8               	bcf	status,0,c
  9586  002AFC  3226               	rrcf	??_getVSCPFrame+3,f,c
  9587  002AFE  3225               	rrcf	??_getVSCPFrame+2,f,c
  9588  002B00  3224               	rrcf	??_getVSCPFrame+1,f,c
  9589  002B02  3223               	rrcf	??_getVSCPFrame,f,c
  9590  002B04                     u4380:
  9591  002B04  2EE8               	decfsz	wreg,f,c
  9592  002B06  D7F9               	goto	u4385
  9593  002B08  5023               	movf	??_getVSCPFrame,w,c
  9594  002B0A  0B07               	andlw	7
  9595  002B0C  6EDF               	movwf	indf2,c
  9596                           
  9597                           ;main.c: 1489: return 1;
  9598  002B0E  0C01               	retlw	1
  9599  002B10                     __end_of_getVSCPFrame:
  9600                           	opt stack 0
  9601                           tblptru	equ	0xFF8
  9602                           tblptrh	equ	0xFF7
  9603                           tblptrl	equ	0xFF6
  9604                           tablat	equ	0xFF5
  9605                           prodh	equ	0xFF4
  9606                           prodl	equ	0xFF3
  9607                           postinc0	equ	0xFEE
  9608                           wreg	equ	0xFE8
  9609                           indf1	equ	0xFE7
  9610                           fsr1h	equ	0xFE2
  9611                           fsr1l	equ	0xFE1
  9612                           indf2	equ	0xFDF
  9613                           postinc2	equ	0xFDE
  9614                           postdec2	equ	0xFDD
  9615                           plusw2	equ	0xFDB
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620 ;; *************** function _getCANFrame *****************
  9621 ;; Defined at:
  9622 ;;		line 1519 in file "../main.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;  pid             1    wreg     PTR unsigned long 
  9625 ;;		 -> getVSCPFrame@id(4), 
  9626 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
  9627 ;;		 -> vscp_imsg(14), 
  9628 ;;  pdata           1   26[COMRAM] PTR unsigned char 
  9629 ;;		 -> vscp_imsg(14), 
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;  pid             1   27[COMRAM] PTR unsigned long 
  9632 ;;		 -> getVSCPFrame@id(4), 
  9633 ;;  flags           1   28[COMRAM] enum E19001
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      unsigned char 
  9636 ;; Registers used:
  9637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9638 ;; Tracked objects:
  9639 ;;		On entry : F/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9646 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9647 ;;Total ram usage:        4 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    4
  9650 ;; This function calls:
  9651 ;;		_ECANReceiveMessage
  9652 ;; This function is called by:
  9653 ;;		_getVSCPFrame
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text56
  9658  002E0A                     __ptext56:
  9659                           	opt stack 0
  9660  002E0A                     _getCANFrame:
  9661                           	opt stack 24
  9662                           
  9663                           ;incstack = 0
  9664                           ;incstack = 0
  9665                           ;getCANFrame@pid stored from wreg
  9666  002E0A  CFE8 F01C          	movff	wreg,getCANFrame@pid
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;main.c: 1520: ECAN_RX_MSG_FLAGS flags;
  9670                           ;main.c: 1524: if (vscp_imsg.flags & 0x80) return 0;
  9671  002E0E  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9672  002E10                     l4941:
  9673  002E10  0C00               	retlw	0
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;main.c: 1526: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
  9677  002E12  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
  9678  002E16  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
  9679  002E1A  0E1D               	movlw	low getCANFrame@flags
  9680  002E1C  6E11               	movwf	?_ECANReceiveMessage+2,c
  9681  002E1E  501C               	movf	getCANFrame@pid,w,c
  9682  002E20  ECF3  F00B         	call	_ECANReceiveMessage
  9683  002E24  0900               	iorlw	0
  9684  002E26  E0F4               	bz	l4941
  9685                           
  9686                           ;main.c: 1529: if (flags & ECAN_RX_RTR_FRAME) return 0;
  9687  002E28  AC1D               	btfss	getCANFrame@flags,6,c
  9688                           
  9689                           ;main.c: 1532: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
  9690  002E2A  AA1D               	btfss	getCANFrame@flags,5,c
  9691  002E2C  0C00               	retlw	0
  9692                           
  9693                           ;main.c: 1534: return 1;
  9694  002E2E  0C01               	retlw	1
  9695  002E30                     __end_of_getCANFrame:
  9696                           	opt stack 0
  9697                           tblptru	equ	0xFF8
  9698                           tblptrh	equ	0xFF7
  9699                           tblptrl	equ	0xFF6
  9700                           tablat	equ	0xFF5
  9701                           prodh	equ	0xFF4
  9702                           prodl	equ	0xFF3
  9703                           postinc0	equ	0xFEE
  9704                           wreg	equ	0xFE8
  9705                           indf1	equ	0xFE7
  9706                           fsr1h	equ	0xFE2
  9707                           fsr1l	equ	0xFE1
  9708                           indf2	equ	0xFDF
  9709                           postinc2	equ	0xFDE
  9710                           postdec2	equ	0xFDD
  9711                           plusw2	equ	0xFDB
  9712                           fsr2h	equ	0xFDA
  9713                           fsr2l	equ	0xFD9
  9714                           status	equ	0xFD8
  9715                           
  9716 ;; *************** function _ECANReceiveMessage *****************
  9717 ;; Defined at:
  9718 ;;		line 803 in file "../ECAN.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;  id              1    wreg     PTR unsigned long 
  9721 ;;		 -> getVSCPFrame@id(4), 
  9722 ;;  data            1   14[COMRAM] PTR unsigned char 
  9723 ;;		 -> vscp_imsg(14), 
  9724 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
  9725 ;;		 -> vscp_imsg(14), 
  9726 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
  9727 ;;		 -> getCANFrame@flags(1), 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;  id              1   19[COMRAM] PTR unsigned long 
  9730 ;;		 -> getVSCPFrame@id(4), 
  9731 ;;  ptr             2   23[COMRAM] PTR unsigned char 
  9732 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9733 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9734 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
  9735 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9736 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9737 ;;  temp            1   22[COMRAM] struct .
  9738 ;;  mode            1   21[COMRAM] unsigned char 
  9739 ;;  i               1   20[COMRAM] unsigned char 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;                  1    wreg      enum E18242
  9742 ;; Registers used:
  9743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : F/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9749 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9750 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9752 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9753 ;;Total ram usage:       11 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    3
  9756 ;; This function calls:
  9757 ;;		__ECANPointBuffer
  9758 ;;		__RegsToCANID
  9759 ;; This function is called by:
  9760 ;;		_getCANFrame
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           	psect	text57
  9765  0017E6                     __ptext57:
  9766                           	opt stack 0
  9767  0017E6                     _ECANReceiveMessage:
  9768                           	opt stack 24
  9769                           
  9770                           ;incstack = 0
  9771                           ;incstack = 0
  9772                           ;ECANReceiveMessage@id stored from wreg
  9773  0017E6  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;ECAN.c: 805: BYTE mode;
  9777                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  9778                           ;ECAN.c: 809: char i;
  9779                           ;ECAN.c: 810: BYTE_VAL temp;
  9780                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  9781  0017EA  6A54               	clrf	__ECANRxFilterHitInfo,c
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;ECAN.c: 815: mode = ECANCON&0xC0;
  9785  0017EC  5072               	movf	3954,w,c	;volatile
  9786  0017EE  0BC0               	andlw	192
  9787  0017F0  6E16               	movwf	ECANReceiveMessage@mode,c
  9788                           
  9789                           ; BSR set to: 0
  9790                           ;ECAN.c: 816: if ( mode == 0x00 )
  9791  0017F2  6616               	tstfsz	ECANReceiveMessage@mode,c
  9792  0017F4  D030               	goto	l5077
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;ECAN.c: 822: {
  9796                           ;ECAN.c: 824: if ( RXB0FUL )
  9797  0017F6  AE60               	btfss	3936,7,c	;volatile
  9798  0017F8  D012               	goto	l659
  9799                           
  9800                           ; BSR set to: 0
  9801                           ;ECAN.c: 825: {
  9802                           ;ECAN.c: 827: RXB0IF = 0;
  9803  0017FA  9077               	bcf	3959,0,c	;volatile
  9804                           
  9805                           ;ECAN.c: 830: if ( RXB0OVFL )
  9806  0017FC  AE71               	btfss	3953,7,c	;volatile
  9807  0017FE  D006               	goto	l5053
  9808                           
  9809                           ; BSR set to: 0
  9810                           ;ECAN.c: 831: {
  9811                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
  9812  001800  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9813  001802  6ED9               	movwf	fsr2l,c
  9814  001804  6ADA               	clrf	fsr2h,c
  9815  001806  0E00               	movlw	0
  9816  001808  86DB               	bsf	plusw2,3,c
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;ECAN.c: 833: RXB0OVFL = 0;
  9820  00180A  9E71               	bcf	3953,7,c	;volatile
  9821  00180C                     l5053:
  9822                           
  9823                           ; BSR set to: 0
  9824                           ;ECAN.c: 834: }
  9825                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  9826  00180C  A060               	btfss	3936,0,c	;volatile
  9827  00180E  D002               	bra	u4555
  9828  001810  8054               	bsf	__ECANRxFilterHitInfo,0,c
  9829  001812  D001               	bra	u4557
  9830  001814                     u4555:
  9831  001814  9054               	bcf	__ECANRxFilterHitInfo,0,c
  9832  001816                     u4557:
  9833                           
  9834                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
  9835  001816  0E0F               	movlw	15	;volatile
  9836  001818  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9837  00181A  0E60               	movlw	96	;volatile
  9838  00181C  D01A               	goto	L27
  9839  00181E                     l659:
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
  9843  00181E  010F               	movlb	15	; () banked
  9844  001820  AF30               	btfss	48,7,b	;volatile
  9845  001822  0C00               	retlw	0
  9846                           
  9847                           ; BSR set to: 15
  9848                           ;ECAN.c: 842: {
  9849                           ;ECAN.c: 844: RXB1IF = 0;
  9850  001824  9277               	bcf	3959,1,c	;volatile
  9851                           
  9852                           ;ECAN.c: 847: if ( RXB1OVFL )
  9853  001826  AC71               	btfss	3953,6,c	;volatile
  9854  001828  D006               	goto	l5063
  9855                           
  9856                           ; BSR set to: 15
  9857                           ;ECAN.c: 848: {
  9858                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
  9859  00182A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9860  00182C  6ED9               	movwf	fsr2l,c
  9861  00182E  6ADA               	clrf	fsr2h,c
  9862  001830  0E00               	movlw	0
  9863  001832  86DB               	bsf	plusw2,3,c
  9864                           
  9865                           ; BSR set to: 15
  9866                           ;ECAN.c: 850: RXB1OVFL = 0;
  9867  001834  9C71               	bcf	3953,6,c	;volatile
  9868  001836                     l5063:
  9869                           
  9870                           ; BSR set to: 15
  9871                           ;ECAN.c: 851: }
  9872                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  9873  001836  5130               	movf	48,w,b	;volatile
  9874  001838  0B07               	andlw	7
  9875  00183A  6E54               	movwf	__ECANRxFilterHitInfo,c
  9876                           
  9877                           ; BSR set to: 15
  9878                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  9879  00183C  0E02               	movlw	2
  9880  00183E  6054               	cpfslt	__ECANRxFilterHitInfo,c
  9881  001840  D005               	goto	l5069
  9882                           
  9883                           ; BSR set to: 15
  9884                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  9885  001842  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9886  001844  6ED9               	movwf	fsr2l,c
  9887  001846  6ADA               	clrf	fsr2h,c
  9888  001848  0E00               	movlw	0
  9889  00184A  8EDB               	bsf	plusw2,7,c
  9890  00184C                     l5069:
  9891                           
  9892                           ; BSR set to: 15
  9893                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
  9894  00184C  0E0F               	movlw	15	;volatile
  9895  00184E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9896  001850  0E30               	movlw	48	;volatile
  9897  001852                     L27:
  9898  001852  6E18               	movwf	ECANReceiveMessage@ptr,c
  9899                           
  9900                           ;ECAN.c: 860: }
  9901  001854  D05B               	goto	l5131
  9902  001856                     l5077:
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;ECAN.c: 869: else if ( mode == 0x40 )
  9906  001856  5016               	movf	ECANReceiveMessage@mode,w,c
  9907  001858  0A40               	xorlw	64
  9908  00185A  E13E               	bnz	l669
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;ECAN.c: 875: {
  9912                           ;ECAN.c: 876: if ( RXB0FUL )
  9913  00185C  AE60               	btfss	3936,7,c	;volatile
  9914  00185E  D004               	goto	l670
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
  9918  001860  0E0F               	movlw	15	;volatile
  9919  001862  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9920  001864  0E60               	movlw	96	;volatile
  9921  001866  D036               	goto	L34
  9922  001868                     l670:
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
  9926  001868  010F               	movlb	15	; () banked
  9927  00186A  AF30               	btfss	48,7,b	;volatile
  9928  00186C  D004               	goto	l672
  9929                           
  9930                           ; BSR set to: 15
  9931                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
  9932  00186E  0E0F               	movlw	15	;volatile
  9933  001870  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9934  001872  0E30               	movlw	48	;volatile
  9935  001874  D02F               	goto	L34
  9936  001876                     l672:
  9937                           
  9938                           ; BSR set to: 15
  9939                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
  9940  001876  010E               	movlb	14
  9941  001878  A57D               	btfss	125,2,b	;volatile
  9942  00187A  AF80               	btfss	128,7,b	;volatile
  9943  00187C  D004               	goto	l674
  9944                           
  9945                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
  9946  00187E  0E0E               	movlw	14	;volatile
  9947  001880  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9948  001882  0E80               	movlw	128	;volatile
  9949  001884  D027               	goto	L34
  9950  001886                     l674:
  9951                           
  9952                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
  9953  001886  010E               	movlb	14
  9954  001888  A77D               	btfss	125,3,b	;volatile
  9955  00188A  AF90               	btfss	144,7,b	;volatile
  9956  00188C  D004               	goto	l676
  9957                           
  9958                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
  9959  00188E  0E0E               	movlw	14	;volatile
  9960  001890  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9961  001892  0E90               	movlw	144	;volatile
  9962  001894  D01F               	goto	L34
  9963  001896                     l676:
  9964                           
  9965                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
  9966  001896  010E               	movlb	14
  9967  001898  A97D               	btfss	125,4,b	;volatile
  9968  00189A  AFA0               	btfss	160,7,b	;volatile
  9969  00189C  D004               	goto	l678
  9970                           
  9971                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
  9972  00189E  0E0E               	movlw	14	;volatile
  9973  0018A0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9974  0018A2  0EA0               	movlw	160	;volatile
  9975  0018A4  D017               	goto	L34
  9976  0018A6                     l678:
  9977                           
  9978                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
  9979  0018A6  010E               	movlb	14
  9980  0018A8  AB7D               	btfss	125,5,b	;volatile
  9981  0018AA  AFB0               	btfss	176,7,b	;volatile
  9982  0018AC  D004               	goto	l680
  9983                           
  9984                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
  9985  0018AE  0E0E               	movlw	14	;volatile
  9986  0018B0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9987  0018B2  0EB0               	movlw	176	;volatile
  9988  0018B4  D00F               	goto	L34
  9989  0018B6                     l680:
  9990                           
  9991                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
  9992  0018B6  010E               	movlb	14
  9993  0018B8  AD7D               	btfss	125,6,b	;volatile
  9994  0018BA  AFC0               	btfss	192,7,b	;volatile
  9995  0018BC  D004               	goto	l682
  9996                           
  9997                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
  9998  0018BE  0E0E               	movlw	14	;volatile
  9999  0018C0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10000  0018C2  0EC0               	movlw	192	;volatile
 10001  0018C4  D007               	goto	L34
 10002  0018C6                     l682:
 10003                           
 10004                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 10005  0018C6  010E               	movlb	14
 10006  0018C8  AF7D               	btfss	125,7,b	;volatile
 10007  0018CA  AFD0               	btfss	208,7,b	;volatile
 10008  0018CC  0C00               	retlw	0
 10009                           
 10010                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 10011  0018CE  0E0E               	movlw	14	;volatile
 10012  0018D0  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10013  0018D2  0ED0               	movlw	208	;volatile
 10014  0018D4                     L34:
 10015  0018D4  6E18               	movwf	ECANReceiveMessage@ptr,c
 10016  0018D6  D00A               	goto	l5121
 10017  0018D8                     l669:
 10018                           
 10019                           ; BSR set to: 0
 10020                           ;ECAN.c: 910: else
 10021                           ;ECAN.c: 915: {
 10022                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 10023  0018D8  AE71               	btfss	3953,7,c	;volatile
 10024  0018DA  0C00               	retlw	0
 10025                           
 10026                           ; BSR set to: 0
 10027                           ;ECAN.c: 917: {
 10028                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 10029  0018DC  506F               	movf	3951,w,c	;volatile
 10030  0018DE  0B07               	andlw	7
 10031  0018E0  EC0F  F015         	call	__ECANPointBuffer
 10032  0018E4  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 10033  0018E8  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 10034  0018EC                     l5121:
 10035                           
 10036                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 10037  0018EC  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10038  0018F0  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10039  0018F4  50DF               	movf	indf2,w,c
 10040  0018F6  0B1F               	andlw	31
 10041  0018F8  6E54               	movwf	__ECANRxFilterHitInfo,c
 10042                           
 10043                           ;ECAN.c: 932: RXB1IF = 0;
 10044  0018FA  9277               	bcf	3959,1,c	;volatile
 10045                           
 10046                           ;ECAN.c: 934: if ( RXB1OVFL )
 10047  0018FC  AC71               	btfss	3953,6,c	;volatile
 10048  0018FE  D006               	goto	l5131
 10049                           
 10050                           ;ECAN.c: 935: {
 10051                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 10052  001900  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10053  001902  6ED9               	movwf	fsr2l,c
 10054  001904  6ADA               	clrf	fsr2h,c
 10055  001906  0E00               	movlw	0
 10056  001908  86DB               	bsf	plusw2,3,c
 10057                           
 10058                           ;ECAN.c: 937: RXB1OVFL = 0;
 10059  00190A  9C71               	bcf	3953,6,c	;volatile
 10060  00190C                     l5131:
 10061                           
 10062                           ;ECAN.c: 942: savedPtr = ptr;
 10063  00190C  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 10064  001910  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 10065                           
 10066                           ;ECAN.c: 943: *msgFlags = 0;
 10067  001914  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10068  001916  6ED9               	movwf	fsr2l,c
 10069  001918  6ADA               	clrf	fsr2h,c
 10070  00191A  6ADF               	clrf	indf2,c
 10071                           
 10072                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 10073  00191C  EE20 F005          	lfsr	2,5
 10074  001920  5018               	movf	ECANReceiveMessage@ptr,w,c
 10075  001922  26D9               	addwf	fsr2l,f,c
 10076  001924  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10077  001926  22DA               	addwfc	fsr2h,f,c
 10078  001928  50DF               	movf	indf2,w,c
 10079  00192A  6E17               	movwf	ECANReceiveMessage@temp,c
 10080                           
 10081                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 10082  00192C  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10083  00192E  6ED9               	movwf	fsr2l,c
 10084  001930  6ADA               	clrf	fsr2h,c
 10085  001932  5017               	movf	ECANReceiveMessage@temp,w,c
 10086  001934  0B0F               	andlw	15
 10087  001936  6EDF               	movwf	indf2,c
 10088                           
 10089                           ;ECAN.c: 950: if ( temp.bits.b6 )
 10090  001938  AC17               	btfss	ECANReceiveMessage@temp,6,c
 10091  00193A  D005               	goto	l690
 10092                           
 10093                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 10094  00193C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10095  00193E  6ED9               	movwf	fsr2l,c
 10096  001940  6ADA               	clrf	fsr2h,c
 10097  001942  0E00               	movlw	0
 10098  001944  8CDB               	bsf	plusw2,6,c
 10099  001946                     l690:
 10100                           
 10101                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 10102  001946  EE20 F002          	lfsr	2,2
 10103  00194A  5018               	movf	ECANReceiveMessage@ptr,w,c
 10104  00194C  26D9               	addwf	fsr2l,f,c
 10105  00194E  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10106  001950  22DA               	addwfc	fsr2h,f,c
 10107  001952  50DF               	movf	indf2,w,c
 10108  001954  6E17               	movwf	ECANReceiveMessage@temp,c
 10109                           
 10110                           ;ECAN.c: 955: if ( temp.bits.b3 )
 10111  001956  A617               	btfss	ECANReceiveMessage@temp,3,c
 10112  001958  D008               	goto	l691
 10113                           
 10114                           ;ECAN.c: 956: {
 10115                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 10116  00195A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10117  00195C  6ED9               	movwf	fsr2l,c
 10118  00195E  6ADA               	clrf	fsr2h,c
 10119  001960  0E00               	movlw	0
 10120  001962  8ADB               	bsf	plusw2,5,c
 10121                           
 10122                           ;ECAN.c: 958: temp.Val = 1;
 10123  001964  0E01               	movlw	1
 10124  001966  6E17               	movwf	ECANReceiveMessage@temp,c
 10125                           
 10126                           ;ECAN.c: 959: }
 10127  001968  D001               	goto	l5149
 10128  00196A                     l691:
 10129                           
 10130                           ;ECAN.c: 960: else
 10131                           ;ECAN.c: 961: temp.Val = 0;
 10132  00196A  6A17               	clrf	ECANReceiveMessage@temp,c
 10133  00196C                     l5149:
 10134                           
 10135                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 10136  00196C  2818               	incf	ECANReceiveMessage@ptr,w,c
 10137  00196E  6E08               	movwf	?__RegsToCANID,c
 10138  001970  0E00               	movlw	0
 10139  001972  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 10140  001974  6E09               	movwf	?__RegsToCANID+1,c
 10141  001976  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 10142  00197A  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 10143  00197E  EC3E  F00F         	call	__RegsToCANID	;wreg free
 10144                           
 10145                           ;ECAN.c: 966: ptr += 6;
 10146  001982  0E06               	movlw	6
 10147  001984  2618               	addwf	ECANReceiveMessage@ptr,f,c
 10148  001986  0E00               	movlw	0
 10149  001988  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 10150                           
 10151                           ;ECAN.c: 967: temp.Val = *dataLen;
 10152  00198A  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10153  00198C  6ED9               	movwf	fsr2l,c
 10154  00198E  6ADA               	clrf	fsr2h,c
 10155  001990  50DF               	movf	indf2,w,c
 10156  001992  6E17               	movwf	ECANReceiveMessage@temp,c
 10157                           
 10158                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 10159  001994  6A15               	clrf	ECANReceiveMessage@i,c
 10160  001996  D00D               	goto	l5165
 10161  001998                     l5157:
 10162                           
 10163                           ;ECAN.c: 969: *data++ = *ptr++;
 10164  001998  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10165  00199C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10166  0019A0  500F               	movf	ECANReceiveMessage@data,w,c
 10167  0019A2  6EE1               	movwf	fsr1l,c
 10168  0019A4  6AE2               	clrf	fsr1h,c
 10169  0019A6  CFDF FFE7          	movff	indf2,indf1
 10170  0019AA  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10171  0019AC  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10172  0019AE  2A0F               	incf	ECANReceiveMessage@data,f,c
 10173  0019B0  2A15               	incf	ECANReceiveMessage@i,f,c
 10174  0019B2                     l5165:
 10175  0019B2  5017               	movf	ECANReceiveMessage@temp,w,c
 10176  0019B4  5C15               	subwf	ECANReceiveMessage@i,w,c
 10177  0019B6  E3F0               	bnc	l5157
 10178                           
 10179                           ;ECAN.c: 972: if ( IRXIF )
 10180  0019B8  AE77               	btfss	3959,7,c	;volatile
 10181  0019BA  D006               	goto	l5171
 10182                           
 10183                           ;ECAN.c: 973: {
 10184                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10185  0019BC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10186  0019BE  6ED9               	movwf	fsr2l,c
 10187  0019C0  6ADA               	clrf	fsr2h,c
 10188  0019C2  0E00               	movlw	0
 10189  0019C4  88DB               	bsf	plusw2,4,c
 10190                           
 10191                           ;ECAN.c: 975: IRXIF = 0;
 10192  0019C6  9E77               	bcf	3959,7,c	;volatile
 10193  0019C8                     l5171:
 10194                           
 10195                           ;ECAN.c: 976: }
 10196                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10197  0019C8  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10198  0019CC  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10199  0019D0  0E7F               	movlw	127
 10200  0019D2  16DF               	andwf	indf2,f,c
 10201                           
 10202                           ;ECAN.c: 983: if ( mode == 0x80 )
 10203  0019D4  5016               	movf	ECANReceiveMessage@mode,w,c
 10204  0019D6  0A80               	xorlw	128
 10205  0019D8  B4D8               	btfsc	status,2,c
 10206                           
 10207                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10208  0019DA  9E71               	bcf	3953,7,c	;volatile
 10209                           
 10210                           ;ECAN.c: 990: return TRUE;
 10211  0019DC  0C01               	retlw	1
 10212  0019DE                     __end_of_ECANReceiveMessage:
 10213                           	opt stack 0
 10214                           tblptru	equ	0xFF8
 10215                           tblptrh	equ	0xFF7
 10216                           tblptrl	equ	0xFF6
 10217                           tablat	equ	0xFF5
 10218                           prodh	equ	0xFF4
 10219                           prodl	equ	0xFF3
 10220                           postinc0	equ	0xFEE
 10221                           wreg	equ	0xFE8
 10222                           indf1	equ	0xFE7
 10223                           fsr1h	equ	0xFE2
 10224                           fsr1l	equ	0xFE1
 10225                           indf2	equ	0xFDF
 10226                           postinc2	equ	0xFDE
 10227                           postdec2	equ	0xFDD
 10228                           plusw2	equ	0xFDB
 10229                           fsr2h	equ	0xFDA
 10230                           fsr2l	equ	0xFD9
 10231                           status	equ	0xFD8
 10232                           
 10233 ;; *************** function __RegsToCANID *****************
 10234 ;; Defined at:
 10235 ;;		line 1156 in file "../ECAN.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10238 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10239 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10240 ;;  val             1    9[COMRAM] PTR unsigned long 
 10241 ;;		 -> getVSCPFrame@id(4), 
 10242 ;;  type            1   10[COMRAM] unsigned char 
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10245 ;;		 -> getVSCPFrame@id(4), 
 10246 ;; Return value:  Size  Location     Type
 10247 ;;		None               void
 10248 ;; Registers used:
 10249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10250 ;; Tracked objects:
 10251 ;;		On entry : 0/0
 10252 ;;		On exit  : 0/0
 10253 ;;		Unchanged: 0/0
 10254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10255 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10257 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10258 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10259 ;;Total ram usage:        7 bytes
 10260 ;; Hardware stack levels used:    1
 10261 ;; Hardware stack levels required when called:    2
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_ECANReceiveMessage
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           	psect	text58
 10270  001E7C                     __ptext58:
 10271                           	opt stack 0
 10272  001E7C                     __RegsToCANID:
 10273                           	opt stack 24
 10274                           
 10275                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10276                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10277                           
 10278                           ;incstack = 0
 10279                           ;incstack = 0
 10280  001E7C  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10281                           
 10282                           ;ECAN.c: 1161: if ( type == 0 )
 10283  001E80  660B               	tstfsz	__RegsToCANID@type,c
 10284  001E82  D046               	goto	l5245
 10285                           
 10286                           ;ECAN.c: 1162: {
 10287                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10288  001E84  500E               	movf	__RegsToCANID@Value,w,c
 10289  001E86  6ED9               	movwf	fsr2l,c
 10290  001E88  6ADA               	clrf	fsr2h,c
 10291  001E8A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10292  001E8E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10293  001E92  50E7               	movf	indf1,w,c
 10294  001E94  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10295  001E96  90D8               	bcf	status,0,c
 10296  001E98  360C               	rlcf	??__RegsToCANID,f,c
 10297  001E9A  90D8               	bcf	status,0,c
 10298  001E9C  360C               	rlcf	??__RegsToCANID,f,c
 10299  001E9E  90D8               	bcf	status,0,c
 10300  001EA0  340C               	rlcf	??__RegsToCANID,w,c
 10301  001EA2  6EDF               	movwf	indf2,c
 10302                           
 10303                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10304  001EA4  500E               	movf	__RegsToCANID@Value,w,c
 10305  001EA6  6ED9               	movwf	fsr2l,c
 10306  001EA8  6ADA               	clrf	fsr2h,c
 10307  001EAA  2AD9               	incf	fsr2l,f,c
 10308  001EAC  6ADA               	clrf	fsr2h,c
 10309  001EAE  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10310  001EB2  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10311  001EB6  50E7               	movf	indf1,w,c
 10312  001EB8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10313  001EBA  0E05               	movlw	5
 10314  001EBC  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10315  001EBE                     u4875:
 10316  001EBE  90D8               	bcf	status,0,c
 10317  001EC0  320C               	rrcf	??__RegsToCANID,f,c
 10318  001EC2  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10319  001EC4  D7FC               	goto	u4875
 10320  001EC6  500C               	movf	??__RegsToCANID,w,c
 10321  001EC8  6EDF               	movwf	indf2,c
 10322                           
 10323                           ;ECAN.c: 1166: ptr++;
 10324  001ECA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10325  001ECC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10326                           
 10327                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10328  001ECE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10329  001ED2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10330  001ED6  50DF               	movf	indf2,w,c
 10331  001ED8  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10332  001EDA  0E05               	movlw	5
 10333  001EDC  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10334  001EDE                     u4885:
 10335  001EDE  90D8               	bcf	status,0,c
 10336  001EE0  320C               	rrcf	??__RegsToCANID,f,c
 10337  001EE2  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10338  001EE4  D7FC               	goto	u4885
 10339  001EE6  500E               	movf	__RegsToCANID@Value,w,c
 10340  001EE8  6ED9               	movwf	fsr2l,c
 10341  001EEA  6ADA               	clrf	fsr2h,c
 10342  001EEC  500C               	movf	??__RegsToCANID,w,c
 10343  001EEE  12DF               	iorwf	indf2,f,c
 10344                           
 10345                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10346  001EF0  500E               	movf	__RegsToCANID@Value,w,c
 10347  001EF2  6ED9               	movwf	fsr2l,c
 10348  001EF4  6ADA               	clrf	fsr2h,c
 10349  001EF6  0E02               	movlw	2
 10350  001EF8  26D9               	addwf	fsr2l,f,c
 10351  001EFA  6ADA               	clrf	fsr2h,c
 10352  001EFC  6ADF               	clrf	indf2,c
 10353                           
 10354                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10355  001EFE  500E               	movf	__RegsToCANID@Value,w,c
 10356  001F00  6ED9               	movwf	fsr2l,c
 10357  001F02  6ADA               	clrf	fsr2h,c
 10358  001F04  0E03               	movlw	3
 10359  001F06  26D9               	addwf	fsr2l,f,c
 10360  001F08  6ADA               	clrf	fsr2h,c
 10361  001F0A  0E00               	movlw	0
 10362  001F0C  6EDF               	movwf	indf2,c
 10363                           
 10364                           ;ECAN.c: 1170: }
 10365  001F0E  0C00               	retlw	0
 10366  001F10                     l5245:
 10367                           
 10368                           ;ECAN.c: 1171: else
 10369                           ;ECAN.c: 1172: {
 10370                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10371  001F10  500E               	movf	__RegsToCANID@Value,w,c
 10372  001F12  6ED9               	movwf	fsr2l,c
 10373  001F14  6ADA               	clrf	fsr2h,c
 10374  001F16  0E02               	movlw	2
 10375  001F18  26D9               	addwf	fsr2l,f,c
 10376  001F1A  6ADA               	clrf	fsr2h,c
 10377  001F1C  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10378  001F20  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10379  001F24  50E7               	movf	indf1,w,c
 10380  001F26  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10381  001F28  0E05               	movlw	5
 10382  001F2A  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10383  001F2C                     u4895:
 10384  001F2C  90D8               	bcf	status,0,c
 10385  001F2E  360C               	rlcf	??__RegsToCANID,f,c
 10386  001F30  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10387  001F32  D7FC               	goto	u4895
 10388  001F34  500C               	movf	??__RegsToCANID,w,c
 10389  001F36  6EDF               	movwf	indf2,c
 10390                           
 10391                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10392  001F38  500E               	movf	__RegsToCANID@Value,w,c
 10393  001F3A  6ED9               	movwf	fsr2l,c
 10394  001F3C  6ADA               	clrf	fsr2h,c
 10395  001F3E  0E03               	movlw	3
 10396  001F40  26D9               	addwf	fsr2l,f,c
 10397  001F42  6ADA               	clrf	fsr2h,c
 10398  001F44  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10399  001F48  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10400  001F4C  50E7               	movf	indf1,w,c
 10401  001F4E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10402  001F50  90D8               	bcf	status,0,c
 10403  001F52  320C               	rrcf	??__RegsToCANID,f,c
 10404  001F54  90D8               	bcf	status,0,c
 10405  001F56  320C               	rrcf	??__RegsToCANID,f,c
 10406  001F58  90D8               	bcf	status,0,c
 10407  001F5A  300C               	rrcf	??__RegsToCANID,w,c
 10408  001F5C  6EDF               	movwf	indf2,c
 10409                           
 10410                           ;ECAN.c: 1176: ptr++;
 10411  001F5E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10412  001F60  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10413                           
 10414                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10415  001F62  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10416  001F66  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10417  001F6A  50DF               	movf	indf2,w,c
 10418  001F6C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10419  001F6E  0E03               	movlw	3
 10420  001F70  160C               	andwf	??__RegsToCANID,f,c
 10421  001F72  500E               	movf	__RegsToCANID@Value,w,c
 10422  001F74  6ED9               	movwf	fsr2l,c
 10423  001F76  6ADA               	clrf	fsr2h,c
 10424  001F78  0E02               	movlw	2
 10425  001F7A  26D9               	addwf	fsr2l,f,c
 10426  001F7C  6ADA               	clrf	fsr2h,c
 10427  001F7E  500C               	movf	??__RegsToCANID,w,c
 10428  001F80  12DF               	iorwf	indf2,f,c
 10429                           
 10430                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10431  001F82  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10432  001F86  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10433  001F8A  50DF               	movf	indf2,w,c
 10434  001F8C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10435  001F8E  90D8               	bcf	status,0,c
 10436  001F90  320C               	rrcf	??__RegsToCANID,f,c
 10437  001F92  90D8               	bcf	status,0,c
 10438  001F94  320C               	rrcf	??__RegsToCANID,f,c
 10439  001F96  90D8               	bcf	status,0,c
 10440  001F98  320C               	rrcf	??__RegsToCANID,f,c
 10441  001F9A  0E1C               	movlw	28
 10442  001F9C  160C               	andwf	??__RegsToCANID,f,c
 10443  001F9E  500E               	movf	__RegsToCANID@Value,w,c
 10444  001FA0  6ED9               	movwf	fsr2l,c
 10445  001FA2  6ADA               	clrf	fsr2h,c
 10446  001FA4  0E02               	movlw	2
 10447  001FA6  26D9               	addwf	fsr2l,f,c
 10448  001FA8  6ADA               	clrf	fsr2h,c
 10449  001FAA  500C               	movf	??__RegsToCANID,w,c
 10450  001FAC  12DF               	iorwf	indf2,f,c
 10451                           
 10452                           ;ECAN.c: 1180: ptr++;
 10453  001FAE  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10454  001FB0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10455                           
 10456                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10457  001FB2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10458  001FB6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10459  001FBA  500E               	movf	__RegsToCANID@Value,w,c
 10460  001FBC  6EE1               	movwf	fsr1l,c
 10461  001FBE  6AE2               	clrf	fsr1h,c
 10462  001FC0  2AE1               	incf	fsr1l,f,c
 10463  001FC2  6AE2               	clrf	fsr1h,c
 10464  001FC4  CFDF FFE7          	movff	indf2,indf1
 10465                           
 10466                           ;ECAN.c: 1182: ptr++;
 10467  001FC8  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10468  001FCA  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10469                           
 10470                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10471  001FCC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10472  001FD0  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10473  001FD4  500E               	movf	__RegsToCANID@Value,w,c
 10474  001FD6  6EE1               	movwf	fsr1l,c
 10475  001FD8  6AE2               	clrf	fsr1h,c
 10476  001FDA  CFDF FFE7          	movff	indf2,indf1
 10477  001FDE  0012               	return	
 10478  001FE0                     __end_of__RegsToCANID:
 10479                           	opt stack 0
 10480                           tblptru	equ	0xFF8
 10481                           tblptrh	equ	0xFF7
 10482                           tblptrl	equ	0xFF6
 10483                           tablat	equ	0xFF5
 10484                           prodh	equ	0xFF4
 10485                           prodl	equ	0xFF3
 10486                           postinc0	equ	0xFEE
 10487                           wreg	equ	0xFE8
 10488                           indf1	equ	0xFE7
 10489                           fsr1h	equ	0xFE2
 10490                           fsr1l	equ	0xFE1
 10491                           indf2	equ	0xFDF
 10492                           postinc2	equ	0xFDE
 10493                           postdec2	equ	0xFDD
 10494                           plusw2	equ	0xFDB
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function __ECANPointBuffer *****************
 10500 ;; Defined at:
 10501 ;;		line 1207 in file "../ECAN.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  b               1    wreg     unsigned char 
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  b               1   10[COMRAM] unsigned char 
 10506 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10507 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10508 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10509 ;; Return value:  Size  Location     Type
 10510 ;;                  2    7[COMRAM] PTR unsigned char 
 10511 ;; Registers used:
 10512 ;;		wreg, status,2, status,0
 10513 ;; Tracked objects:
 10514 ;;		On entry : F/0
 10515 ;;		On exit  : 0/0
 10516 ;;		Unchanged: 0/0
 10517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10518 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10519 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10521 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10522 ;;Total ram usage:        6 bytes
 10523 ;; Hardware stack levels used:    1
 10524 ;; Hardware stack levels required when called:    2
 10525 ;; This function calls:
 10526 ;;		Nothing
 10527 ;; This function is called by:
 10528 ;;		_ECANReceiveMessage
 10529 ;; This function uses a non-reentrant model
 10530 ;;
 10531                           
 10532                           	psect	text59
 10533  002A1E                     __ptext59:
 10534                           	opt stack 0
 10535  002A1E                     __ECANPointBuffer:
 10536                           	opt stack 24
 10537                           
 10538                           ;incstack = 0
 10539                           ;incstack = 0
 10540                           ;__ECANPointBuffer@b stored from wreg
 10541  002A1E  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;ECAN.c: 1208: BYTE* pt;
 10545                           ;ECAN.c: 1210: switch(b)
 10546  002A22  D028               	goto	l5231
 10547  002A24                     l5213:
 10548                           
 10549                           ; BSR set to: 0
 10550                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10551  002A24  0E0F               	movlw	15	;volatile
 10552  002A26  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10553  002A28  0E60               	movlw	96	;volatile
 10554  002A2A  D022               	goto	L41
 10555  002A2C                     l5215:
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10559  002A2C  010F               	movlb	15	; () banked
 10560  002A2E  0E0F               	movlw	15	;volatile
 10561  002A30  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10562  002A32  0E30               	movlw	48	;volatile
 10563  002A34  D01D               	goto	L41
 10564  002A36                     l5217:
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10568  002A36  010E               	movlb	14	; () banked
 10569  002A38  0E0E               	movlw	14	;volatile
 10570  002A3A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10571  002A3C  0E80               	movlw	128	;volatile
 10572  002A3E  D018               	goto	L41
 10573  002A40                     l5219:
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 10577  002A40  010E               	movlb	14	; () banked
 10578  002A42  0E0E               	movlw	14	;volatile
 10579  002A44  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10580  002A46  0E90               	movlw	144	;volatile
 10581  002A48  D013               	goto	L41
 10582  002A4A                     l5221:
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 10586  002A4A  010E               	movlb	14	; () banked
 10587  002A4C  0E0E               	movlw	14	;volatile
 10588  002A4E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10589  002A50  0EA0               	movlw	160	;volatile
 10590  002A52  D00E               	goto	L41
 10591  002A54                     l5223:
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 10595  002A54  010E               	movlb	14	; () banked
 10596  002A56  0E0E               	movlw	14	;volatile
 10597  002A58  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10598  002A5A  0EB0               	movlw	176	;volatile
 10599  002A5C  D009               	goto	L41
 10600  002A5E                     l5225:
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 10604  002A5E  010E               	movlb	14	; () banked
 10605  002A60  0E0E               	movlw	14	;volatile
 10606  002A62  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10607  002A64  0EC0               	movlw	192	;volatile
 10608  002A66  D004               	goto	L41
 10609  002A68                     l5227:
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 10613  002A68  010E               	movlb	14	; () banked
 10614  002A6A  0E0E               	movlw	14	;volatile
 10615  002A6C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10616  002A6E  0ED0               	movlw	208	;volatile
 10617  002A70                     L41:
 10618  002A70  6E0C               	movwf	__ECANPointBuffer@pt,c
 10619                           
 10620                           ;ECAN.c: 1235: break;
 10621  002A72  D00F               	goto	l718
 10622  002A74                     l5231:
 10623                           
 10624                           ; BSR set to: 0
 10625  002A74  500B               	movf	__ECANPointBuffer@b,w,c
 10626                           
 10627                           ; Switch size 1, requested type "speed"
 10628                           ; Number of cases is 7, Range of values is 0 to 6
 10629                           ; switch strategies available:
 10630                           ; Name         Instructions Cycles
 10631                           ; simple_byte           22    12 (average)
 10632                           ;	Chosen strategy is simple_byte
 10633  002A76  E0D6               	bz	l5213
 10634  002A78  0A01               	xorlw	1	; case 1
 10635  002A7A  E0D8               	bz	l5215
 10636  002A7C  0A03               	xorlw	3	; case 2
 10637  002A7E  E0DB               	bz	l5217
 10638  002A80  0A01               	xorlw	1	; case 3
 10639  002A82  E0DE               	bz	l5219
 10640  002A84  0A07               	xorlw	7	; case 4
 10641  002A86  E0E1               	bz	l5221
 10642  002A88  0A01               	xorlw	1	; case 5
 10643  002A8A  E0E4               	bz	l5223
 10644  002A8C  0A03               	xorlw	3	; case 6
 10645  002A8E  E0E7               	bz	l5225
 10646  002A90  D7EB               	goto	l5227
 10647  002A92                     l718:
 10648                           
 10649                           ;ECAN.c: 1237: return (pt);
 10650  002A92  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 10651  002A96  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 10652  002A9A  0012               	return	
 10653  002A9C                     __end_of__ECANPointBuffer:
 10654                           	opt stack 0
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           postinc0	equ	0xFEE
 10662                           wreg	equ	0xFE8
 10663                           indf1	equ	0xFE7
 10664                           fsr1h	equ	0xFE2
 10665                           fsr1l	equ	0xFE1
 10666                           indf2	equ	0xFDF
 10667                           postinc2	equ	0xFDE
 10668                           postdec2	equ	0xFDD
 10669                           plusw2	equ	0xFDB
 10670                           fsr2h	equ	0xFDA
 10671                           fsr2l	equ	0xFD9
 10672                           status	equ	0xFD8
 10673                           
 10674 ;; *************** function _vscp_check_pstorage *****************
 10675 ;; Defined at:
 10676 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 10677 ;; Parameters:    Size  Location     Type
 10678 ;;		None
 10679 ;; Auto vars:     Size  Location     Type
 10680 ;;		None
 10681 ;; Return value:  Size  Location     Type
 10682 ;;                  1    wreg      unsigned char 
 10683 ;; Registers used:
 10684 ;;		wreg, status,2, status,0, cstack
 10685 ;; Tracked objects:
 10686 ;;		On entry : E/E
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10694 ;;Total ram usage:        0 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    4
 10697 ;; This function calls:
 10698 ;;		_vscp_writeNicknamePermanent
 10699 ;;		_vscp_getSegmentCRC
 10700 ;;		_vscp_setSegmentCRC
 10701 ;;		_vscp_setControlByte
 10702 ;; This function is called by:
 10703 ;;		_main
 10704 ;; This function uses a non-reentrant model
 10705 ;;
 10706                           
 10707                           	psect	text60
 10708  002EDA                     __ptext60:
 10709                           	opt stack 0
 10710  002EDA                     _vscp_check_pstorage:
 10711                           	opt stack 26
 10712                           
 10713                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 10714                           
 10715                           ;incstack = 0
 10716                           ;incstack = 0
 10717  002EDA  EC6D  F018         	call	_vscp_getSegmentCRC	;wreg free
 10718  002EDE  0BC0               	andlw	192
 10719  002EE0  0A40               	xorlw	64
 10720  002EE2  E101               	bnz	l5669
 10721                           
 10722                           ;vscp_firmware.c: 170: return !0;
 10723  002EE4  0C01               	retlw	1
 10724  002EE6                     l5669:
 10725                           
 10726                           ;vscp_firmware.c: 171: }
 10727                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 10728  002EE6  0EFF               	movlw	255
 10729  002EE8  EC30  F018         	call	_vscp_writeNicknamePermanent
 10730                           
 10731                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 10732  002EEC  0E00               	movlw	0
 10733  002EEE  EC1E  F018         	call	_vscp_setSegmentCRC
 10734                           
 10735                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 10736  002EF2  0EA0               	movlw	160
 10737  002EF4  EC15  F018         	call	_vscp_setControlByte
 10738                           
 10739                           ;vscp_firmware.c: 183: return 0;
 10740  002EF8  0C00               	retlw	0
 10741  002EFA                     __end_of_vscp_check_pstorage:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           prodh	equ	0xFF4
 10748                           prodl	equ	0xFF3
 10749                           postinc0	equ	0xFEE
 10750                           wreg	equ	0xFE8
 10751                           indf1	equ	0xFE7
 10752                           fsr1h	equ	0xFE2
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           postdec2	equ	0xFDD
 10757                           plusw2	equ	0xFDB
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function _vscp_setControlByte *****************
 10763 ;; Defined at:
 10764 ;;		line 1337 in file "../main.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  ctrl            1    wreg     unsigned char 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;  ctrl            1   10[COMRAM] unsigned char 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;		None               void
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, cstack
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/E
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10782 ;;Total ram usage:        1 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:    3
 10785 ;; This function calls:
 10786 ;;		_writeEEPROM
 10787 ;; This function is called by:
 10788 ;;		_vscp_check_pstorage
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text61
 10793  00302A                     __ptext61:
 10794                           	opt stack 0
 10795  00302A                     _vscp_setControlByte:
 10796                           	opt stack 26
 10797                           
 10798                           ;incstack = 0
 10799                           ;incstack = 0
 10800                           ;vscp_setControlByte@ctrl stored from wreg
 10801  00302A  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 10802                           
 10803                           ;main.c: 1338: writeEEPROM(0x03, ctrl);
 10804  00302E  6A09               	clrf	?_writeEEPROM+1,c
 10805  003030  0E03               	movlw	3
 10806  003032  6E08               	movwf	?_writeEEPROM,c
 10807  003034  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 10808  003038  EF18  F017         	goto	_writeEEPROM	;wreg free
 10809  00303C                     __end_of_vscp_setControlByte:
 10810                           	opt stack 0
 10811                           tblptru	equ	0xFF8
 10812                           tblptrh	equ	0xFF7
 10813                           tblptrl	equ	0xFF6
 10814                           tablat	equ	0xFF5
 10815                           prodh	equ	0xFF4
 10816                           prodl	equ	0xFF3
 10817                           postinc0	equ	0xFEE
 10818                           wreg	equ	0xFE8
 10819                           indf1	equ	0xFE7
 10820                           fsr1h	equ	0xFE2
 10821                           fsr1l	equ	0xFE1
 10822                           indf2	equ	0xFDF
 10823                           postinc2	equ	0xFDE
 10824                           postdec2	equ	0xFDD
 10825                           plusw2	equ	0xFDB
 10826                           fsr2h	equ	0xFDA
 10827                           fsr2l	equ	0xFD9
 10828                           status	equ	0xFD8
 10829                           
 10830 ;; *************** function _vscp_setSegmentCRC *****************
 10831 ;; Defined at:
 10832 ;;		line 1328 in file "../main.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  crc             1    wreg     unsigned char 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;  crc             1   10[COMRAM] unsigned char 
 10837 ;; Return value:  Size  Location     Type
 10838 ;;		None               void
 10839 ;; Registers used:
 10840 ;;		wreg, status,2, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10850 ;;Total ram usage:        1 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    3
 10853 ;; This function calls:
 10854 ;;		_writeEEPROM
 10855 ;; This function is called by:
 10856 ;;		_vscp_check_pstorage
 10857 ;;		_vscp_handleProbeState
 10858 ;;		_vscp_handleHeartbeat
 10859 ;;		_vscp_handleSetNickname
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           	psect	text62
 10864  00303C                     __ptext62:
 10865                           	opt stack 0
 10866  00303C                     _vscp_setSegmentCRC:
 10867                           	opt stack 25
 10868                           
 10869                           ;incstack = 0
 10870                           ;incstack = 0
 10871                           ;vscp_setSegmentCRC@crc stored from wreg
 10872  00303C  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 10873                           
 10874                           ;main.c: 1329: writeEEPROM( 0x02, crc );
 10875  003040  6A09               	clrf	?_writeEEPROM+1,c
 10876  003042  0E02               	movlw	2
 10877  003044  6E08               	movwf	?_writeEEPROM,c
 10878  003046  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 10879  00304A  EF18  F017         	goto	_writeEEPROM	;wreg free
 10880  00304E                     __end_of_vscp_setSegmentCRC:
 10881                           	opt stack 0
 10882                           tblptru	equ	0xFF8
 10883                           tblptrh	equ	0xFF7
 10884                           tblptrl	equ	0xFF6
 10885                           tablat	equ	0xFF5
 10886                           prodh	equ	0xFF4
 10887                           prodl	equ	0xFF3
 10888                           postinc0	equ	0xFEE
 10889                           wreg	equ	0xFE8
 10890                           indf1	equ	0xFE7
 10891                           fsr1h	equ	0xFE2
 10892                           fsr1l	equ	0xFE1
 10893                           indf2	equ	0xFDF
 10894                           postinc2	equ	0xFDE
 10895                           postdec2	equ	0xFDD
 10896                           plusw2	equ	0xFDB
 10897                           fsr2h	equ	0xFDA
 10898                           fsr2l	equ	0xFD9
 10899                           status	equ	0xFD8
 10900                           
 10901 ;; *************** function _vscp_getSegmentCRC *****************
 10902 ;; Defined at:
 10903 ;;		line 1319 in file "../main.c"
 10904 ;; Parameters:    Size  Location     Type
 10905 ;;		None
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;		None
 10908 ;; Return value:  Size  Location     Type
 10909 ;;                  1    wreg      unsigned char 
 10910 ;; Registers used:
 10911 ;;		wreg, status,2, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10921 ;;Total ram usage:        0 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    3
 10924 ;; This function calls:
 10925 ;;		_readEEPROM
 10926 ;; This function is called by:
 10927 ;;		_vscp_check_pstorage
 10928 ;;		_vscp_handleHeartbeat
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932                           	psect	text63
 10933  0030DA                     __ptext63:
 10934                           	opt stack 0
 10935  0030DA                     _vscp_getSegmentCRC:
 10936                           	opt stack 25
 10937                           
 10938                           ;main.c: 1320: return readEEPROM( 0x02 );
 10939                           
 10940                           ;incstack = 0
 10941                           ;incstack = 0
 10942  0030DA  6A09               	clrf	?_readEEPROM+1,c
 10943  0030DC  0E02               	movlw	2
 10944  0030DE  6E08               	movwf	?_readEEPROM,c
 10945  0030E0  EF27  F018         	goto	_readEEPROM	;wreg free
 10946  0030E4                     __end_of_vscp_getSegmentCRC:
 10947                           	opt stack 0
 10948                           tblptru	equ	0xFF8
 10949                           tblptrh	equ	0xFF7
 10950                           tblptrl	equ	0xFF6
 10951                           tablat	equ	0xFF5
 10952                           prodh	equ	0xFF4
 10953                           prodl	equ	0xFF3
 10954                           postinc0	equ	0xFEE
 10955                           wreg	equ	0xFE8
 10956                           indf1	equ	0xFE7
 10957                           fsr1h	equ	0xFE2
 10958                           fsr1l	equ	0xFE1
 10959                           indf2	equ	0xFDF
 10960                           postinc2	equ	0xFDE
 10961                           postdec2	equ	0xFDD
 10962                           plusw2	equ	0xFDB
 10963                           fsr2h	equ	0xFDA
 10964                           fsr2l	equ	0xFD9
 10965                           status	equ	0xFD8
 10966                           
 10967 ;; *************** function _readEEPROM *****************
 10968 ;; Defined at:
 10969 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;  address         2    7[COMRAM] unsigned short 
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;  data            1    9[COMRAM] unsigned char 
 10974 ;; Return value:  Size  Location     Type
 10975 ;;                  1    wreg      unsigned char 
 10976 ;; Registers used:
 10977 ;;		wreg, status,2
 10978 ;; Tracked objects:
 10979 ;;		On entry : 0/0
 10980 ;;		On exit  : 0/0
 10981 ;;		Unchanged: 0/0
 10982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10983 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10984 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10986 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10987 ;;Total ram usage:        3 bytes
 10988 ;; Hardware stack levels used:    1
 10989 ;; Hardware stack levels required when called:    2
 10990 ;; This function calls:
 10991 ;;		Nothing
 10992 ;; This function is called by:
 10993 ;;		_main
 10994 ;;		_vscp_readNicknamePermanent
 10995 ;;		_vscp_getZone
 10996 ;;		_vscp_getSubzone
 10997 ;;		_vscp_readAppReg
 10998 ;;		_vscp_writeAppReg
 10999 ;;		_SendInformationEvent
 11000 ;;		_doDM
 11001 ;;		_actionSet
 11002 ;;		_actionClr
 11003 ;;		_vscp_getGUID
 11004 ;;		_vscp_getUserID
 11005 ;;		_vscp_getManufacturerId
 11006 ;;		_vscp_getSegmentCRC
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           	psect	text64
 11011  00304E                     __ptext64:
 11012                           	opt stack 0
 11013  00304E                     _readEEPROM:
 11014                           	opt stack 26
 11015                           
 11016                           ;eeprom.c: 93: uint8_t data;
 11017                           ;eeprom.c: 98: EEADR = address & 0xff;
 11018                           
 11019                           ;incstack = 0
 11020                           ;incstack = 0
 11021  00304E  C008  FF74         	movff	readEEPROM@address,3956	;volatile
 11022                           
 11023                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 11024  003052  9E7F               	bcf	3967,7,c	;volatile
 11025                           
 11026                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 11027  003054  9C7F               	bcf	3967,6,c	;volatile
 11028                           
 11029                           ;eeprom.c: 101: EECON1bits.RD = 1;
 11030  003056  807F               	bsf	3967,0,c	;volatile
 11031                           
 11032                           ;eeprom.c: 102: data = EEDATA;
 11033  003058  CF73 F00A          	movff	3955,readEEPROM@data	;volatile
 11034                           
 11035                           ;eeprom.c: 104: return data;
 11036  00305C  500A               	movf	readEEPROM@data,w,c
 11037  00305E  0012               	return	
 11038  003060                     __end_of_readEEPROM:
 11039                           	opt stack 0
 11040                           tblptru	equ	0xFF8
 11041                           tblptrh	equ	0xFF7
 11042                           tblptrl	equ	0xFF6
 11043                           tablat	equ	0xFF5
 11044                           prodh	equ	0xFF4
 11045                           prodl	equ	0xFF3
 11046                           postinc0	equ	0xFEE
 11047                           wreg	equ	0xFE8
 11048                           indf1	equ	0xFE7
 11049                           fsr1h	equ	0xFE2
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           postdec2	equ	0xFDD
 11054                           plusw2	equ	0xFDB
 11055                           fsr2h	equ	0xFDA
 11056                           fsr2l	equ	0xFD9
 11057                           status	equ	0xFD8
 11058                           
 11059 ;; *************** function _vscp_writeNicknamePermanent *****************
 11060 ;; Defined at:
 11061 ;;		line 545 in file "../main.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;  nickname        1    wreg     unsigned char 
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  nickname        1   10[COMRAM] unsigned char 
 11066 ;; Return value:  Size  Location     Type
 11067 ;;		None               void
 11068 ;; Registers used:
 11069 ;;		wreg, status,2, cstack
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11079 ;;Total ram usage:        1 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    3
 11082 ;; This function calls:
 11083 ;;		_writeEEPROM
 11084 ;; This function is called by:
 11085 ;;		_vscp_check_pstorage
 11086 ;;		_vscp_handleProbeState
 11087 ;;		_vscp_handleHeartbeat
 11088 ;;		_vscp_handleSetNickname
 11089 ;;		_vscp_handleDropNickname
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           	psect	text65
 11094  003060                     __ptext65:
 11095                           	opt stack 0
 11096  003060                     _vscp_writeNicknamePermanent:
 11097                           	opt stack 25
 11098                           
 11099                           ;incstack = 0
 11100                           ;incstack = 0
 11101                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11102  003060  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11103                           
 11104                           ;main.c: 546: writeEEPROM( 0x01, nickname );
 11105  003064  6A09               	clrf	?_writeEEPROM+1,c
 11106  003066  0E01               	movlw	1
 11107  003068  6E08               	movwf	?_writeEEPROM,c
 11108  00306A  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 11109  00306E  EF18  F017         	goto	_writeEEPROM	;wreg free
 11110  003072                     __end_of_vscp_writeNicknamePermanent:
 11111                           	opt stack 0
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           postinc0	equ	0xFEE
 11119                           wreg	equ	0xFE8
 11120                           indf1	equ	0xFE7
 11121                           fsr1h	equ	0xFE2
 11122                           fsr1l	equ	0xFE1
 11123                           indf2	equ	0xFDF
 11124                           postinc2	equ	0xFDE
 11125                           postdec2	equ	0xFDD
 11126                           plusw2	equ	0xFDB
 11127                           fsr2h	equ	0xFDA
 11128                           fsr2l	equ	0xFD9
 11129                           status	equ	0xFD8
 11130                           
 11131 ;; *************** function _writeEEPROM *****************
 11132 ;; Defined at:
 11133 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  address         2    7[COMRAM] unsigned short 
 11136 ;;  data            1    9[COMRAM] unsigned char 
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;		None               void
 11141 ;; Registers used:
 11142 ;;		wreg, status,2
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11148 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11151 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11152 ;;Total ram usage:        3 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    2
 11155 ;; This function calls:
 11156 ;;		Nothing
 11157 ;; This function is called by:
 11158 ;;		_main
 11159 ;;		_init_app_eeprom
 11160 ;;		_vscp_setGUID
 11161 ;;		_vscp_setManufacturerId
 11162 ;;		_vscp_writeNicknamePermanent
 11163 ;;		_vscp_writeAppReg
 11164 ;;		_vscp_setUserID
 11165 ;;		_vscp_setSegmentCRC
 11166 ;;		_vscp_setControlByte
 11167 ;;		_vscp_goBootloaderMode
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           	psect	text66
 11172  002E30                     __ptext66:
 11173                           	opt stack 0
 11174  002E30                     _writeEEPROM:
 11175                           	opt stack 24
 11176                           
 11177                           ;eeprom.c: 29: EEADR = address & 0xff;
 11178                           
 11179                           ;incstack = 0
 11180                           ;incstack = 0
 11181  002E30  C008  FF74         	movff	writeEEPROM@address,3956	;volatile
 11182                           
 11183                           ;eeprom.c: 30: EEDATA = data;
 11184  002E34  C00A  FF73         	movff	writeEEPROM@data,3955	;volatile
 11185                           
 11186                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 11187  002E38  9E7F               	bcf	3967,7,c	;volatile
 11188                           
 11189                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 11190  002E3A  9C7F               	bcf	3967,6,c	;volatile
 11191                           
 11192                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 11193  002E3C  847F               	bsf	3967,2,c	;volatile
 11194                           
 11195                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 11196  002E3E  9EF2               	bcf	intcon,7,c	;volatile
 11197                           
 11198                           ;eeprom.c: 37: EECON2 = 0x55;
 11199  002E40  0E55               	movlw	85
 11200  002E42  6E7E               	movwf	3966,c	;volatile
 11201                           
 11202                           ;eeprom.c: 38: EECON2 = 0xaa;
 11203  002E44  0EAA               	movlw	170
 11204  002E46  6E7E               	movwf	3966,c	;volatile
 11205                           
 11206                           ;eeprom.c: 39: EECON1bits.WR = 1;
 11207  002E48  827F               	bsf	3967,1,c	;volatile
 11208                           
 11209                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 11210  002E4A  8EF2               	bsf	intcon,7,c	;volatile
 11211  002E4C                     l1097:
 11212  002E4C  ACB7               	btfss	4023,6,c	;volatile
 11213  002E4E  D7FE               	goto	l1097
 11214                           
 11215                           ;eeprom.c: 44: PIR4bits.EEIF = 0;
 11216  002E50  9CB7               	bcf	4023,6,c	;volatile
 11217                           
 11218                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 11219  002E52  947F               	bcf	3967,2,c	;volatile
 11220  002E54  0012               	return	
 11221  002E56                     __end_of_writeEEPROM:
 11222                           	opt stack 0
 11223                           tblptru	equ	0xFF8
 11224                           tblptrh	equ	0xFF7
 11225                           tblptrl	equ	0xFF6
 11226                           tablat	equ	0xFF5
 11227                           prodh	equ	0xFF4
 11228                           prodl	equ	0xFF3
 11229                           intcon	equ	0xFF2
 11230                           postinc0	equ	0xFEE
 11231                           wreg	equ	0xFE8
 11232                           indf1	equ	0xFE7
 11233                           fsr1h	equ	0xFE2
 11234                           fsr1l	equ	0xFE1
 11235                           indf2	equ	0xFDF
 11236                           postinc2	equ	0xFDE
 11237                           postdec2	equ	0xFDD
 11238                           plusw2	equ	0xFDB
 11239                           fsr2h	equ	0xFDA
 11240                           fsr2l	equ	0xFD9
 11241                           status	equ	0xFD8
 11242                           
 11243 ;; *************** function _init *****************
 11244 ;; Defined at:
 11245 ;;		line 302 in file "../main.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;		None
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;		None
 11250 ;; Return value:  Size  Location     Type
 11251 ;;		None               void
 11252 ;; Registers used:
 11253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : E/E
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11263 ;;Total ram usage:        0 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    4
 11266 ;; This function calls:
 11267 ;;		_WriteTimer0
 11268 ;;		_init_app_ram
 11269 ;;		_OpenTimer0
 11270 ;;		_ECANInitialize
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text67
 11277  002C7A                     __ptext67:
 11278                           	opt stack 0
 11279  002C7A                     _init:
 11280                           	opt stack 26
 11281                           
 11282                           ;main.c: 306: init_app_ram();
 11283                           
 11284                           ;incstack = 0
 11285                           ;incstack = 0
 11286  002C7A  EC39  F018         	call	_init_app_ram	;wreg free
 11287                           
 11288                           ; BSR set to: 0
 11289                           ;main.c: 311: ANCON0 = 0;
 11290  002C7E  010F               	movlb	15	; () banked
 11291  002C80  6B5D               	clrf	93,b	;volatile
 11292                           
 11293                           ; BSR set to: 15
 11294                           ;main.c: 312: ANCON1 = 0;
 11295  002C82  6B5C               	clrf	92,b	;volatile
 11296                           
 11297                           ; BSR set to: 15
 11298                           ;main.c: 321: TRISA = 0x00;
 11299  002C84  6A92               	clrf	3986,c	;volatile
 11300                           
 11301                           ; BSR set to: 15
 11302                           ;main.c: 322: PORTA = 0x00;
 11303  002C86  6A80               	clrf	3968,c	;volatile
 11304                           
 11305                           ; BSR set to: 15
 11306                           ;main.c: 334: TRISB = 0b00001100;
 11307  002C88  0E0C               	movlw	12
 11308  002C8A  6E93               	movwf	3987,c	;volatile
 11309                           
 11310                           ; BSR set to: 15
 11311                           ;main.c: 335: PORTB = 0x00;
 11312  002C8C  6A81               	clrf	3969,c	;volatile
 11313                           
 11314                           ; BSR set to: 15
 11315                           ;main.c: 345: TRISC = 0b00000001;
 11316  002C8E  0E01               	movlw	1
 11317  002C90  6E94               	movwf	3988,c	;volatile
 11318                           
 11319                           ; BSR set to: 15
 11320                           ;main.c: 346: PORTC = 0x00;
 11321  002C92  6A82               	clrf	3970,c	;volatile
 11322                           
 11323                           ; BSR set to: 15
 11324                           ;main.c: 372: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11325  002C94  0E92               	movlw	146
 11326  002C96  ECAA  F017         	call	_OpenTimer0
 11327                           
 11328                           ; BSR set to: 15
 11329                           ;main.c: 373: WriteTimer0( 0xfb1d );
 11330  002C9A  0EFB               	movlw	251
 11331  002C9C  6E09               	movwf	?_WriteTimer0+1,c
 11332  002C9E  0E1D               	movlw	29
 11333  002CA0  6E08               	movwf	?_WriteTimer0,c
 11334  002CA2  EC42  F018         	call	_WriteTimer0	;wreg free
 11335                           
 11336                           ; BSR set to: 15
 11337                           ;main.c: 376: ECANInitialize();
 11338  002CA6  ECCA  F014         	call	_ECANInitialize	;wreg free
 11339                           
 11340                           ;main.c: 397: INTCONbits.PEIE = 1;
 11341  002CAA  8CF2               	bsf	intcon,6,c	;volatile
 11342                           
 11343                           ;main.c: 400: INTCONbits.GIE = 1;
 11344  002CAC  8EF2               	bsf	intcon,7,c	;volatile
 11345  002CAE  0012               	return	
 11346  002CB0                     __end_of_init:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           intcon	equ	0xFF2
 11355                           postinc0	equ	0xFEE
 11356                           wreg	equ	0xFE8
 11357                           indf1	equ	0xFE7
 11358                           fsr1h	equ	0xFE2
 11359                           fsr1l	equ	0xFE1
 11360                           indf2	equ	0xFDF
 11361                           postinc2	equ	0xFDE
 11362                           postdec2	equ	0xFDD
 11363                           plusw2	equ	0xFDB
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           
 11368 ;; *************** function _ECANInitialize *****************
 11369 ;; Defined at:
 11370 ;;		line 168 in file "../ECAN.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;		None
 11375 ;; Return value:  Size  Location     Type
 11376 ;;		None               void
 11377 ;; Registers used:
 11378 ;;		wreg, status,2, status,0, cstack
 11379 ;; Tracked objects:
 11380 ;;		On entry : F/F
 11381 ;;		On exit  : E/E
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11388 ;;Total ram usage:        0 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    3
 11391 ;; This function calls:
 11392 ;;		_ECANSetOperationMode
 11393 ;; This function is called by:
 11394 ;;		_init
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text68
 11399  002994                     __ptext68:
 11400                           	opt stack 0
 11401  002994                     _ECANInitialize:
 11402                           	opt stack 26
 11403                           
 11404                           ; BSR set to: 15
 11405                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11406                           
 11407                           ;incstack = 0
 11408                           ;incstack = 0
 11409  002994  0E80               	movlw	128
 11410  002996  ECE0  F017         	call	_ECANSetOperationMode
 11411                           
 11412                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11413  00299A  0E09               	movlw	9
 11414  00299C  010E               	movlb	14	; () banked
 11415  00299E  6F43               	movwf	67,b	;volatile
 11416                           
 11417                           ; BSR set to: 14
 11418                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11419  0029A0  0EFC               	movlw	252
 11420  0029A2  6F44               	movwf	68,b	;volatile
 11421                           
 11422                           ; BSR set to: 14
 11423                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11424                           ;ECAN.c: 181: (0 << 6) |
 11425                           ;ECAN.c: 182: (2-1);
 11426  0029A4  0E01               	movlw	1
 11427  0029A6  6F45               	movwf	69,b	;volatile
 11428                           
 11429                           ; BSR set to: 14
 11430                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11431  0029A8  0E20               	movlw	32
 11432  0029AA  6E70               	movwf	3952,c	;volatile
 11433                           
 11434                           ; BSR set to: 14
 11435                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11436  0029AC  8E72               	bsf	3954,7,c	;volatile
 11437                           
 11438                           ; BSR set to: 14
 11439                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11440  0029AE  9C72               	bcf	3954,6,c	;volatile
 11441                           
 11442                           ; BSR set to: 14
 11443                           ;ECAN.c: 205: RXB0CON = 0;
 11444  0029B0  6A60               	clrf	3936,c	;volatile
 11445                           
 11446                           ; BSR set to: 14
 11447                           ;ECAN.c: 211: RXB1CON = 0;
 11448  0029B2  010F               	movlb	15	; () banked
 11449  0029B4  6B30               	clrf	48,b	;volatile
 11450                           
 11451                           ; BSR set to: 15
 11452                           ;ECAN.c: 221: B0CON = 0;
 11453  0029B6  010E               	movlb	14	; () banked
 11454  0029B8  6B80               	clrf	128,b	;volatile
 11455                           
 11456                           ; BSR set to: 14
 11457                           ;ECAN.c: 231: B1CON = 0;
 11458  0029BA  6B90               	clrf	144,b	;volatile
 11459                           
 11460                           ; BSR set to: 14
 11461                           ;ECAN.c: 241: B2CON = 0;
 11462  0029BC  6BA0               	clrf	160,b	;volatile
 11463                           
 11464                           ; BSR set to: 14
 11465                           ;ECAN.c: 254: B3CON = 0 << 2;
 11466  0029BE  6BB0               	clrf	176,b	;volatile
 11467                           
 11468                           ; BSR set to: 14
 11469                           ;ECAN.c: 264: B4CON = 0 << 2;
 11470  0029C0  6BC0               	clrf	192,b	;volatile
 11471                           
 11472                           ; BSR set to: 14
 11473                           ;ECAN.c: 274: B5CON = 0 << 2;
 11474  0029C2  6BD0               	clrf	208,b	;volatile
 11475                           
 11476                           ; BSR set to: 14
 11477                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11478  0029C4  0EE0               	movlw	224
 11479  0029C6  6F7D               	movwf	125,b	;volatile
 11480                           
 11481                           ; BSR set to: 14
 11482                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11483  0029C8  6BE0               	clrf	224,b	;volatile
 11484                           
 11485                           ; BSR set to: 14
 11486  0029CA  0E08               	movlw	8
 11487  0029CC  6FE1               	movwf	225,b	;volatile
 11488                           
 11489                           ; BSR set to: 14
 11490  0029CE  6BE2               	clrf	226,b	;volatile
 11491                           
 11492                           ; BSR set to: 14
 11493  0029D0  6BE3               	clrf	227,b	;volatile
 11494                           
 11495                           ; BSR set to: 14
 11496                           ;ECAN.c: 303: RXF1SIDH = (long)0x00000000L >> 21L;RXF1SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF1EIDH = (long)0x00000000L >> 8L;RXF1E
      +                          IDL = 0x00000000L;;
 11497  0029D2  6BE4               	clrf	228,b	;volatile
 11498                           
 11499                           ; BSR set to: 14
 11500  0029D4  0E08               	movlw	8
 11501  0029D6  6FE5               	movwf	229,b	;volatile
 11502                           
 11503                           ; BSR set to: 14
 11504  0029D8  6BE6               	clrf	230,b	;volatile
 11505                           
 11506                           ; BSR set to: 14
 11507  0029DA  6BE7               	clrf	231,b	;volatile
 11508                           
 11509                           ; BSR set to: 14
 11510                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11511  0029DC  0E03               	movlw	3
 11512  0029DE  6F46               	movwf	70,b	;volatile
 11513                           
 11514                           ; BSR set to: 14
 11515                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 11516  0029E0  6B47               	clrf	71,b	;volatile
 11517                           
 11518                           ; BSR set to: 14
 11519                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 11520  0029E2  6B71               	clrf	113,b	;volatile
 11521                           
 11522                           ; BSR set to: 14
 11523                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 11524  0029E4  0E11               	movlw	17
 11525  0029E6  6F72               	movwf	114,b	;volatile
 11526                           
 11527                           ; BSR set to: 14
 11528                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 11529  0029E8  6F73               	movwf	115,b	;volatile
 11530                           
 11531                           ; BSR set to: 14
 11532                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 11533  0029EA  6B74               	clrf	116,b	;volatile
 11534                           
 11535                           ; BSR set to: 14
 11536                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 11537  0029EC  6B75               	clrf	117,b	;volatile
 11538                           
 11539                           ; BSR set to: 14
 11540                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 11541  0029EE  6B76               	clrf	118,b	;volatile
 11542                           
 11543                           ; BSR set to: 14
 11544                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 11545  0029F0  6B77               	clrf	119,b	;volatile
 11546                           
 11547                           ; BSR set to: 14
 11548                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 11549  0029F2  6B78               	clrf	120,b	;volatile
 11550                           
 11551                           ; BSR set to: 14
 11552                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 11553  0029F4  0E54               	movlw	84
 11554  0029F6  6F79               	movwf	121,b	;volatile
 11555                           
 11556                           ; BSR set to: 14
 11557                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 11558  0029F8  0E05               	movlw	5
 11559  0029FA  6F7A               	movwf	122,b	;volatile
 11560                           
 11561                           ; BSR set to: 14
 11562                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11563  0029FC  6B7B               	clrf	123,b	;volatile
 11564                           
 11565                           ; BSR set to: 14
 11566                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11567  0029FE  6B7B               	clrf	123,b	;volatile
 11568                           
 11569                           ; BSR set to: 14
 11570                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 11571  002A00  0E0F               	movlw	15
 11572  002A02  6FF8               	movwf	248,b	;volatile
 11573                           
 11574                           ; BSR set to: 14
 11575  002A04  0EE0               	movlw	224
 11576  002A06  6FF9               	movwf	249,b	;volatile
 11577                           
 11578                           ; BSR set to: 14
 11579  002A08  6BFA               	clrf	250,b	;volatile
 11580                           
 11581                           ; BSR set to: 14
 11582  002A0A  6BFB               	clrf	251,b	;volatile
 11583                           
 11584                           ; BSR set to: 14
 11585                           ;ECAN.c: 482: RXM0EXIDM = 1;
 11586  002A0C  87F9               	bsf	249,3,b	;volatile
 11587                           
 11588                           ; BSR set to: 14
 11589                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 11590  002A0E  6BFC               	clrf	252,b	;volatile
 11591                           
 11592                           ; BSR set to: 14
 11593  002A10  6BFD               	clrf	253,b	;volatile
 11594                           
 11595                           ; BSR set to: 14
 11596  002A12  6BFE               	clrf	254,b	;volatile
 11597                           
 11598                           ; BSR set to: 14
 11599  002A14  6BFF               	clrf	255,b	;volatile
 11600                           
 11601                           ; BSR set to: 14
 11602                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 11603  002A16  87FD               	bsf	253,3,b	;volatile
 11604                           
 11605                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 11606  002A18  0E00               	movlw	0
 11607  002A1A  EFE0  F017         	goto	_ECANSetOperationMode
 11608  002A1E                     __end_of_ECANInitialize:
 11609                           	opt stack 0
 11610                           tblptru	equ	0xFF8
 11611                           tblptrh	equ	0xFF7
 11612                           tblptrl	equ	0xFF6
 11613                           tablat	equ	0xFF5
 11614                           prodh	equ	0xFF4
 11615                           prodl	equ	0xFF3
 11616                           intcon	equ	0xFF2
 11617                           postinc0	equ	0xFEE
 11618                           wreg	equ	0xFE8
 11619                           indf1	equ	0xFE7
 11620                           fsr1h	equ	0xFE2
 11621                           fsr1l	equ	0xFE1
 11622                           indf2	equ	0xFDF
 11623                           postinc2	equ	0xFDE
 11624                           postdec2	equ	0xFDD
 11625                           plusw2	equ	0xFDB
 11626                           fsr2h	equ	0xFDA
 11627                           fsr2l	equ	0xFD9
 11628                           status	equ	0xFD8
 11629                           
 11630 ;; *************** function _ECANSetOperationMode *****************
 11631 ;; Defined at:
 11632 ;;		line 1012 in file "../ECAN.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;  mode            1    wreg     enum E18989
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  mode            1    7[COMRAM] enum E18989
 11637 ;; Return value:  Size  Location     Type
 11638 ;;		None               void
 11639 ;; Registers used:
 11640 ;;		wreg, status,2, status,0
 11641 ;; Tracked objects:
 11642 ;;		On entry : E/F
 11643 ;;		On exit  : E/E
 11644 ;;		Unchanged: E/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11649 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11650 ;;Total ram usage:        1 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    2
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_ECANInitialize
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text69
 11661  002FC0                     __ptext69:
 11662                           	opt stack 0
 11663  002FC0                     _ECANSetOperationMode:
 11664                           	opt stack 26
 11665                           
 11666                           ;incstack = 0
 11667                           ;incstack = 0
 11668                           ;ECANSetOperationMode@mode stored from wreg
 11669  002FC0  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 11670                           
 11671                           ;ECAN.c: 1013: CANCON &= 0x1F;
 11672  002FC4  0E1F               	movlw	31
 11673  002FC6  166F               	andwf	3951,f,c	;volatile
 11674                           
 11675                           ;ECAN.c: 1014: CANCON |= mode;
 11676  002FC8  5008               	movf	ECANSetOperationMode@mode,w,c
 11677  002FCA  126F               	iorwf	3951,f,c	;volatile
 11678  002FCC                     l5183:
 11679  002FCC  506F               	movf	3951,w,c	;volatile
 11680  002FCE  0BE0               	andlw	224
 11681  002FD0  1808               	xorwf	ECANSetOperationMode@mode,w,c
 11682  002FD2  B4D8               	btfsc	status,2,c
 11683  002FD4  0012               	return	
 11684  002FD6  D7FA               	goto	l5183
 11685  002FD8                     __end_of_ECANSetOperationMode:
 11686                           	opt stack 0
 11687                           tblptru	equ	0xFF8
 11688                           tblptrh	equ	0xFF7
 11689                           tblptrl	equ	0xFF6
 11690                           tablat	equ	0xFF5
 11691                           prodh	equ	0xFF4
 11692                           prodl	equ	0xFF3
 11693                           intcon	equ	0xFF2
 11694                           postinc0	equ	0xFEE
 11695                           wreg	equ	0xFE8
 11696                           indf1	equ	0xFE7
 11697                           fsr1h	equ	0xFE2
 11698                           fsr1l	equ	0xFE1
 11699                           indf2	equ	0xFDF
 11700                           postinc2	equ	0xFDE
 11701                           postdec2	equ	0xFDD
 11702                           plusw2	equ	0xFDB
 11703                           fsr2h	equ	0xFDA
 11704                           fsr2l	equ	0xFD9
 11705                           status	equ	0xFD8
 11706                           
 11707 ;; *************** function _OpenTimer0 *****************
 11708 ;; Defined at:
 11709 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;  config          1    wreg     unsigned char 
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;  config          1    7[COMRAM] unsigned char 
 11714 ;; Return value:  Size  Location     Type
 11715 ;;		None               void
 11716 ;; Registers used:
 11717 ;;		wreg, status,2, status,0
 11718 ;; Tracked objects:
 11719 ;;		On entry : F/F
 11720 ;;		On exit  : F/F
 11721 ;;		Unchanged: E/0
 11722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11726 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11727 ;;Total ram usage:        1 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; Hardware stack levels required when called:    2
 11730 ;; This function calls:
 11731 ;;		Nothing
 11732 ;; This function is called by:
 11733 ;;		_init
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           	psect	text70
 11738  002F54                     __ptext70:
 11739                           	opt stack 0
 11740  002F54                     _OpenTimer0:
 11741                           	opt stack 27
 11742                           
 11743                           ;incstack = 0
 11744                           ;incstack = 0
 11745                           ;OpenTimer0@config stored from wreg
 11746  002F54  CFE8 F008          	movff	wreg,OpenTimer0@config
 11747                           
 11748                           ; BSR set to: 15
 11749  002F58  5008               	movf	OpenTimer0@config,w,c
 11750  002F5A  0B7F               	andlw	127
 11751  002F5C  6ED5               	movwf	4053,c	;volatile
 11752                           
 11753                           ; BSR set to: 15
 11754  002F5E  6AD7               	clrf	4055,c	;volatile
 11755                           
 11756                           ; BSR set to: 15
 11757  002F60  6AD6               	clrf	4054,c	;volatile
 11758                           
 11759                           ; BSR set to: 15
 11760  002F62  94F2               	bcf	intcon,2,c	;volatile
 11761                           
 11762                           ; BSR set to: 15
 11763  002F64  AE08               	btfss	OpenTimer0@config,7,c
 11764  002F66  D002               	goto	l1116
 11765                           
 11766                           ; BSR set to: 15
 11767  002F68  8AF2               	bsf	intcon,5,c	;volatile
 11768  002F6A  D001               	goto	l1117
 11769  002F6C                     l1116:
 11770                           
 11771                           ; BSR set to: 15
 11772  002F6C  9AF2               	bcf	intcon,5,c	;volatile
 11773  002F6E                     l1117:
 11774                           
 11775                           ; BSR set to: 15
 11776  002F6E  8ED5               	bsf	4053,7,c	;volatile
 11777                           
 11778                           ; BSR set to: 15
 11779  002F70  0012               	return	
 11780  002F72                     __end_of_OpenTimer0:
 11781                           	opt stack 0
 11782                           tblptru	equ	0xFF8
 11783                           tblptrh	equ	0xFF7
 11784                           tblptrl	equ	0xFF6
 11785                           tablat	equ	0xFF5
 11786                           prodh	equ	0xFF4
 11787                           prodl	equ	0xFF3
 11788                           intcon	equ	0xFF2
 11789                           postinc0	equ	0xFEE
 11790                           wreg	equ	0xFE8
 11791                           indf1	equ	0xFE7
 11792                           fsr1h	equ	0xFE2
 11793                           fsr1l	equ	0xFE1
 11794                           indf2	equ	0xFDF
 11795                           postinc2	equ	0xFDE
 11796                           postdec2	equ	0xFDD
 11797                           plusw2	equ	0xFDB
 11798                           fsr2h	equ	0xFDA
 11799                           fsr2l	equ	0xFD9
 11800                           status	equ	0xFD8
 11801                           
 11802 ;; *************** function _init_app_ram *****************
 11803 ;; Defined at:
 11804 ;;		line 410 in file "../main.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;  i               1    0        unsigned char 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;		None               void
 11811 ;; Registers used:
 11812 ;;		None
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/E
 11815 ;;		On exit  : F/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11822 ;;Total ram usage:        0 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    2
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_main
 11829 ;;		_init
 11830 ;;		_vscp_restoreDefaults
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           	psect	text71
 11835  003072                     __ptext71:
 11836                           	opt stack 0
 11837  003072                     _init_app_ram:
 11838                           	opt stack 25
 11839                           
 11840                           ;main.c: 411: uint8_t i;
 11841                           ;main.c: 413: measurement_clock = 0;
 11842                           
 11843                           ; BSR set to: 15
 11844                           ;incstack = 0
 11845                           ;incstack = 0
 11846  003072  0100               	movlb	0	; () banked
 11847  003074  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 11848  003076  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 11849  003078  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 11850  00307A  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 11851                           
 11852                           ;main.c: 415: seconds = 0;
 11853  00307C  6B6A               	clrf	_seconds& (0+255),b
 11854                           
 11855                           ;main.c: 416: minutes = 0;
 11856  00307E  6B69               	clrf	_minutes& (0+255),b
 11857                           
 11858                           ;main.c: 417: hours = 0;
 11859  003080  6B68               	clrf	_hours& (0+255),b
 11860                           
 11861                           ; BSR set to: 0
 11862  003082  0012               	return	
 11863  003084                     __end_of_init_app_ram:
 11864                           	opt stack 0
 11865                           tblptru	equ	0xFF8
 11866                           tblptrh	equ	0xFF7
 11867                           tblptrl	equ	0xFF6
 11868                           tablat	equ	0xFF5
 11869                           prodh	equ	0xFF4
 11870                           prodl	equ	0xFF3
 11871                           intcon	equ	0xFF2
 11872                           postinc0	equ	0xFEE
 11873                           wreg	equ	0xFE8
 11874                           indf1	equ	0xFE7
 11875                           fsr1h	equ	0xFE2
 11876                           fsr1l	equ	0xFE1
 11877                           indf2	equ	0xFDF
 11878                           postinc2	equ	0xFDE
 11879                           postdec2	equ	0xFDD
 11880                           plusw2	equ	0xFDB
 11881                           fsr2h	equ	0xFDA
 11882                           fsr2l	equ	0xFD9
 11883                           status	equ	0xFD8
 11884                           
 11885 ;; *************** function _WriteTimer0 *****************
 11886 ;; Defined at:
 11887 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11888 ;; Parameters:    Size  Location     Type
 11889 ;;  timer0          2    7[COMRAM] unsigned int 
 11890 ;; Auto vars:     Size  Location     Type
 11891 ;;  timer           2    9[COMRAM] struct Timers
 11892 ;; Return value:  Size  Location     Type
 11893 ;;		None               void
 11894 ;; Registers used:
 11895 ;;		None
 11896 ;; Tracked objects:
 11897 ;;		On entry : F/F
 11898 ;;		On exit  : F/F
 11899 ;;		Unchanged: E/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11904 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11905 ;;Total ram usage:        4 bytes
 11906 ;; Hardware stack levels used:    1
 11907 ;; Hardware stack levels required when called:    2
 11908 ;; This function calls:
 11909 ;;		Nothing
 11910 ;; This function is called by:
 11911 ;;		_init
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text72
 11916  003084                     __ptext72:
 11917                           	opt stack 0
 11918  003084                     _WriteTimer0:
 11919                           	opt stack 27
 11920                           
 11921                           ; BSR set to: 15
 11922                           
 11923                           ; BSR set to: 0
 11924                           ;incstack = 0
 11925                           ;incstack = 0
 11926  003084  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 11927  003088  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 11928  00308C  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 11929  003090  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 11930                           
 11931                           ; BSR set to: 15
 11932  003094  0012               	return	
 11933  003096                     __end_of_WriteTimer0:
 11934                           	opt stack 0
 11935                           tblptru	equ	0xFF8
 11936                           tblptrh	equ	0xFF7
 11937                           tblptrl	equ	0xFF6
 11938                           tablat	equ	0xFF5
 11939                           prodh	equ	0xFF4
 11940                           prodl	equ	0xFF3
 11941                           intcon	equ	0xFF2
 11942                           postinc0	equ	0xFEE
 11943                           wreg	equ	0xFE8
 11944                           indf1	equ	0xFE7
 11945                           fsr1h	equ	0xFE2
 11946                           fsr1l	equ	0xFE1
 11947                           indf2	equ	0xFDF
 11948                           postinc2	equ	0xFDE
 11949                           postdec2	equ	0xFDD
 11950                           plusw2	equ	0xFDB
 11951                           fsr2h	equ	0xFDA
 11952                           fsr2l	equ	0xFD9
 11953                           status	equ	0xFD8
 11954                           
 11955 ;; *************** function _readControlReg *****************
 11956 ;; Defined at:
 11957 ;;		line 751 in file "../main.c"
 11958 ;; Parameters:    Size  Location     Type
 11959 ;;  ctrlreg         1    wreg     unsigned char 
 11960 ;; Auto vars:     Size  Location     Type
 11961 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 11962 ;;  rv              1   15[COMRAM] unsigned char 
 11963 ;; Return value:  Size  Location     Type
 11964 ;;                  1    wreg      unsigned char 
 11965 ;; Registers used:
 11966 ;;		wreg, status,2, status,0, prodl, prodh
 11967 ;; Tracked objects:
 11968 ;;		On entry : 0/0
 11969 ;;		On exit  : 0/0
 11970 ;;		Unchanged: 0/0
 11971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11973 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11974 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11975 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11976 ;;Total ram usage:        9 bytes
 11977 ;; Hardware stack levels used:    1
 11978 ;; Hardware stack levels required when called:    2
 11979 ;; This function calls:
 11980 ;;		Nothing
 11981 ;; This function is called by:
 11982 ;;		_vscp_readAppReg
 11983 ;;		_writeControlReg
 11984 ;; This function uses a non-reentrant model
 11985 ;;
 11986                           
 11987                           	psect	text73
 11988  002464                     __ptext73:
 11989                           	opt stack 0
 11990  002464                     _readControlReg:
 11991                           	opt stack 24
 11992                           
 11993                           ; BSR set to: 15
 11994                           ;incstack = 0
 11995                           ;incstack = 0
 11996                           ;readControlReg@ctrlreg stored from wreg
 11997  002464  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 11998                           
 11999                           ;main.c: 752: uint8_t rv = 0;
 12000  002468  6A10               	clrf	readControlReg@rv,c
 12001                           
 12002                           ;main.c: 754: switch ( ctrlreg ) {
 12003  00246A  D060               	goto	l4687
 12004  00246C                     l4679:
 12005                           
 12006                           ;main.c: 757: rv = ( PORTCbits.RC7 << 0 ) +
 12007                           ;main.c: 758: ( PORTCbits.RC6 << 1 ) +
 12008                           ;main.c: 759: ( PORTCbits.RC3 << 2 ) +
 12009                           ;main.c: 760: ( PORTCbits.RC4 << 3 ) +
 12010                           ;main.c: 761: ( PORTCbits.RC5 << 4 ) +
 12011                           ;main.c: 762: ( PORTAbits.RA0 << 5 ) +
 12012                           ;main.c: 763: ( PORTAbits.RA1 << 6 ) +
 12013                           ;main.c: 764: ( PORTAbits.RA2 << 7 );
 12014  00246C  3482               	rlcf	3970,w,c	;volatile
 12015  00246E  36E8               	rlcf	wreg,f,c
 12016  002470  0B01               	andlw	1
 12017  002472  6E08               	movwf	??_readControlReg& (0+255),c
 12018  002474  3882               	swapf	3970,w,c	;volatile
 12019  002476  32E8               	rrcf	wreg,f,c
 12020  002478  32E8               	rrcf	wreg,f,c
 12021  00247A  0B01               	andlw	1
 12022  00247C  0D02               	mullw	2
 12023  00247E  CFF3 F009          	movff	prodl,??_readControlReg+1
 12024  002482  3082               	rrcf	3970,w,c	;volatile
 12025  002484  32E8               	rrcf	wreg,f,c
 12026  002486  32E8               	rrcf	wreg,f,c
 12027  002488  0B01               	andlw	1
 12028  00248A  0D04               	mullw	4
 12029  00248C  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12030  002490  3882               	swapf	3970,w,c	;volatile
 12031  002492  0B01               	andlw	1
 12032  002494  0D08               	mullw	8
 12033  002496  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12034  00249A  3882               	swapf	3970,w,c	;volatile
 12035  00249C  32E8               	rrcf	wreg,f,c
 12036  00249E  0B01               	andlw	1
 12037  0024A0  0D10               	mullw	16
 12038  0024A2  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12039  0024A6  5080               	movf	3968,w,c	;volatile
 12040  0024A8  0B01               	andlw	1
 12041  0024AA  0D20               	mullw	32
 12042  0024AC  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12043  0024B0  3080               	rrcf	3968,w,c	;volatile
 12044  0024B2  0B01               	andlw	1
 12045  0024B4  0D40               	mullw	64
 12046  0024B6  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12047  0024BA  3080               	rrcf	3968,w,c	;volatile
 12048  0024BC  32E8               	rrcf	wreg,f,c
 12049  0024BE  0B01               	andlw	1
 12050  0024C0  0D80               	mullw	128
 12051  0024C2  50F3               	movf	prodl,w,c
 12052  0024C4  240E               	addwf	??_readControlReg+6,w,c
 12053  0024C6  240D               	addwf	??_readControlReg+5,w,c
 12054  0024C8  D01F               	goto	L42
 12055  0024CA                     l4681:
 12056                           
 12057                           ;main.c: 768: rv = ( PORTAbits.RA3 << 0 ) +
 12058                           ;main.c: 769: ( PORTAbits.RA5 << 1 ) +
 12059                           ;main.c: 772: ( PORTBbits.RB4 << 4 ) +
 12060                           ;main.c: 773: ( PORTCbits.RC2 << 5 ) +
 12061                           ;main.c: 774: ( PORTBbits.RB1 << 6 ) +
 12062                           ;main.c: 775: ( PORTBbits.RB0 << 7 );
 12063  0024CA  3080               	rrcf	3968,w,c	;volatile
 12064  0024CC  32E8               	rrcf	wreg,f,c
 12065  0024CE  32E8               	rrcf	wreg,f,c
 12066  0024D0  0B01               	andlw	1
 12067  0024D2  6E08               	movwf	??_readControlReg& (0+255),c
 12068  0024D4  3880               	swapf	3968,w,c	;volatile
 12069  0024D6  32E8               	rrcf	wreg,f,c
 12070  0024D8  0B01               	andlw	1
 12071  0024DA  0D02               	mullw	2
 12072  0024DC  CFF3 F009          	movff	prodl,??_readControlReg+1
 12073  0024E0  3881               	swapf	3969,w,c	;volatile
 12074  0024E2  0B01               	andlw	1
 12075  0024E4  0D10               	mullw	16
 12076  0024E6  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12077  0024EA  3082               	rrcf	3970,w,c	;volatile
 12078  0024EC  32E8               	rrcf	wreg,f,c
 12079  0024EE  0B01               	andlw	1
 12080  0024F0  0D20               	mullw	32
 12081  0024F2  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12082  0024F6  3081               	rrcf	3969,w,c	;volatile
 12083  0024F8  0B01               	andlw	1
 12084  0024FA  0D40               	mullw	64
 12085  0024FC  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12086  002500  5081               	movf	3969,w,c	;volatile
 12087  002502  0B01               	andlw	1
 12088  002504  0D80               	mullw	128
 12089  002506  50F3               	movf	prodl,w,c
 12090  002508                     L42:
 12091  002508  240C               	addwf	??_readControlReg+4,w,c
 12092  00250A  240B               	addwf	??_readControlReg+3,w,c
 12093  00250C  240A               	addwf	??_readControlReg+2,w,c
 12094  00250E  2409               	addwf	??_readControlReg+1,w,c
 12095  002510  D00A               	goto	L43
 12096  002512                     l4683:
 12097                           
 12098                           ;main.c: 779: rv = ( PORTBbits.RB6 << 0 ) +
 12099                           ;main.c: 780: ( PORTBbits.RB5 << 1 );
 12100  002512  3881               	swapf	3969,w,c	;volatile
 12101  002514  32E8               	rrcf	wreg,f,c
 12102  002516  32E8               	rrcf	wreg,f,c
 12103  002518  0B01               	andlw	1
 12104  00251A  6E08               	movwf	??_readControlReg& (0+255),c
 12105  00251C  3881               	swapf	3969,w,c	;volatile
 12106  00251E  32E8               	rrcf	wreg,f,c
 12107  002520  0B01               	andlw	1
 12108  002522  0D02               	mullw	2
 12109  002524  50F3               	movf	prodl,w,c
 12110  002526                     L43:
 12111  002526  2408               	addwf	??_readControlReg,w,c
 12112  002528  6E10               	movwf	readControlReg@rv,c
 12113                           
 12114                           ;main.c: 781: break;
 12115  00252A  D006               	goto	l4689
 12116  00252C                     l4687:
 12117  00252C  500F               	movf	readControlReg@ctrlreg,w,c
 12118                           
 12119                           ; Switch size 1, requested type "speed"
 12120                           ; Number of cases is 3, Range of values is 0 to 2
 12121                           ; switch strategies available:
 12122                           ; Name         Instructions Cycles
 12123                           ; simple_byte           10     6 (average)
 12124                           ;	Chosen strategy is simple_byte
 12125  00252E  E09E               	bz	l4679
 12126  002530  0A01               	xorlw	1	; case 1
 12127  002532  E0CB               	bz	l4681
 12128  002534  0A03               	xorlw	3	; case 2
 12129  002536  E0ED               	bz	l4683
 12130  002538                     l4689:
 12131                           
 12132                           ;main.c: 784: return rv;
 12133  002538  5010               	movf	readControlReg@rv,w,c
 12134  00253A  0012               	return	
 12135  00253C                     __end_of_readControlReg:
 12136                           	opt stack 0
 12137                           tblptru	equ	0xFF8
 12138                           tblptrh	equ	0xFF7
 12139                           tblptrl	equ	0xFF6
 12140                           tablat	equ	0xFF5
 12141                           prodh	equ	0xFF4
 12142                           prodl	equ	0xFF3
 12143                           intcon	equ	0xFF2
 12144                           postinc0	equ	0xFEE
 12145                           wreg	equ	0xFE8
 12146                           indf1	equ	0xFE7
 12147                           fsr1h	equ	0xFE2
 12148                           fsr1l	equ	0xFE1
 12149                           indf2	equ	0xFDF
 12150                           postinc2	equ	0xFDE
 12151                           postdec2	equ	0xFDD
 12152                           plusw2	equ	0xFDB
 12153                           fsr2h	equ	0xFDA
 12154                           fsr2l	equ	0xFD9
 12155                           status	equ	0xFD8
 12156                           
 12157 ;; *************** function _vscp_readAppReg *****************
 12158 ;; Defined at:
 12159 ;;		line 586 in file "../main.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;  reg             1    wreg     unsigned char 
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;  reg             1   17[COMRAM] unsigned char 
 12164 ;;  rv              1   16[COMRAM] unsigned char 
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  1    wreg      unsigned char 
 12167 ;; Registers used:
 12168 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12169 ;; Tracked objects:
 12170 ;;		On entry : F/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12175 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12177 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12178 ;;Total ram usage:        2 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:    3
 12181 ;; This function calls:
 12182 ;;		_readEEPROM
 12183 ;;		_readControlReg
 12184 ;; This function is called by:
 12185 ;;		_vscp_readRegister
 12186 ;;		_vscp_handleProtocolEvent
 12187 ;; This function uses a non-reentrant model
 12188 ;;
 12189                           
 12190                           	psect	text74
 12191  0028F8                     __ptext74:
 12192                           	opt stack 0
 12193  0028F8                     _vscp_readAppReg:
 12194                           	opt stack 25
 12195                           
 12196                           ;incstack = 0
 12197                           ;incstack = 0
 12198                           ;vscp_readAppReg@reg stored from wreg
 12199  0028F8  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;main.c: 587: uint8_t rv;
 12203                           ;main.c: 589: rv = 0x00;
 12204  0028FC  6A11               	clrf	vscp_readAppReg@rv,c
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;main.c: 592: if ( 0 == vscp_page_select ) {
 12208  0028FE  5053               	movf	_vscp_page_select+1,w,c
 12209  002900  1052               	iorwf	_vscp_page_select,w,c
 12210  002902  E137               	bnz	l6339
 12211                           
 12212                           ; BSR set to: 0
 12213                           ;main.c: 594: if ( reg == 0x00 ) {
 12214  002904  6612               	tstfsz	vscp_readAppReg@reg,c
 12215  002906  D006               	goto	l6315
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;main.c: 595: rv = readEEPROM(0x21 + 0);
 12219  002908  6A09               	clrf	?_readEEPROM+1,c
 12220  00290A  0E21               	movlw	33
 12221  00290C  6E08               	movwf	?_readEEPROM,c
 12222  00290E  EC27  F018         	call	_readEEPROM	;wreg free
 12223  002912  D03D               	goto	L44
 12224  002914                     l6315:
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;main.c: 598: else if ( reg == 0x01 ) {
 12228  002914  0412               	decf	vscp_readAppReg@reg,w,c
 12229  002916  E106               	bnz	l6319
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;main.c: 599: rv = readEEPROM(0x21 + 1);
 12233  002918  6A09               	clrf	?_readEEPROM+1,c
 12234  00291A  0E22               	movlw	34
 12235  00291C  6E08               	movwf	?_readEEPROM,c
 12236  00291E  EC27  F018         	call	_readEEPROM	;wreg free
 12237  002922  D035               	goto	L44
 12238  002924                     l6319:
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;main.c: 602: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12242  002924  0E04               	movlw	4
 12243  002926  6412               	cpfsgt	vscp_readAppReg@reg,c
 12244  002928  D00C               	goto	l6325
 12245                           
 12246                           ; BSR set to: 0
 12247  00292A  0E17               	movlw	23
 12248  00292C  6012               	cpfslt	vscp_readAppReg@reg,c
 12249  00292E  D009               	goto	l6325
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;main.c: 603: rv = readEEPROM( 0x21 + 5 +
 12253                           ;main.c: 604: ( reg - 5 ) );
 12254  002930  0E21               	movlw	33
 12255  002932  2412               	addwf	vscp_readAppReg@reg,w,c
 12256  002934  6E08               	movwf	?_readEEPROM,c
 12257  002936  6A09               	clrf	?_readEEPROM+1,c
 12258  002938  0E00               	movlw	0
 12259  00293A  2209               	addwfc	?_readEEPROM+1,f,c
 12260  00293C  EC27  F018         	call	_readEEPROM	;wreg free
 12261  002940  D026               	goto	L44
 12262  002942                     l6325:
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;main.c: 607: else if ( reg == 2 ) {
 12266  002942  5012               	movf	vscp_readAppReg@reg,w,c
 12267  002944  0A02               	xorlw	2
 12268  002946  E104               	bnz	l6329
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;main.c: 608: rv = readControlReg( 0 );
 12272  002948  0E00               	movlw	0
 12273  00294A  EC32  F012         	call	_readControlReg
 12274  00294E  D01F               	goto	L44
 12275  002950                     l6329:
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;main.c: 611: else if ( reg == 3 ) {
 12279  002950  5012               	movf	vscp_readAppReg@reg,w,c
 12280  002952  0A03               	xorlw	3
 12281  002954  E104               	bnz	l6333
 12282                           
 12283                           ; BSR set to: 0
 12284                           ;main.c: 612: rv = readControlReg( 1 );
 12285  002956  0E01               	movlw	1
 12286  002958  EC32  F012         	call	_readControlReg
 12287  00295C  D018               	goto	L44
 12288  00295E                     l6333:
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;main.c: 615: else if ( reg == 4 ) {
 12292  00295E  5012               	movf	vscp_readAppReg@reg,w,c
 12293  002960  0A04               	xorlw	4
 12294  002962  E116               	bnz	l6345
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;main.c: 616: rv = readControlReg( 2 );
 12298  002964  0E02               	movlw	2
 12299  002966  EC32  F012         	call	_readControlReg
 12300  00296A  6E11               	movwf	vscp_readAppReg@rv,c
 12301                           
 12302                           ;main.c: 617: rv &= 0x03;
 12303  00296C  0E03               	movlw	3
 12304  00296E  1611               	andwf	vscp_readAppReg@rv,f,c
 12305  002970  D00F               	goto	l6345
 12306  002972                     l6339:
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;main.c: 621: else if ( 1 == vscp_page_select ) {
 12310  002972  0452               	decf	_vscp_page_select,w,c
 12311  002974  1053               	iorwf	_vscp_page_select+1,w,c
 12312  002976  E10C               	bnz	l6345
 12313                           
 12314                           ; BSR set to: 0
 12315                           ;main.c: 624: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12316                           ;main.c: 625: ( 8 * 8 ) ) ) ) {
 12317  002978  0E41               	movlw	65
 12318  00297A  6012               	cpfslt	vscp_readAppReg@reg,c
 12319  00297C  D009               	goto	l6345
 12320                           
 12321                           ; BSR set to: 0
 12322                           ;main.c: 626: rv = readEEPROM(0x21 + 23 +
 12323                           ;main.c: 627: ( reg - 0 ) );
 12324  00297E  0E38               	movlw	56
 12325  002980  2412               	addwf	vscp_readAppReg@reg,w,c
 12326  002982  6E08               	movwf	?_readEEPROM,c
 12327  002984  6A09               	clrf	?_readEEPROM+1,c
 12328  002986  0E00               	movlw	0
 12329  002988  2209               	addwfc	?_readEEPROM+1,f,c
 12330  00298A  EC27  F018         	call	_readEEPROM	;wreg free
 12331  00298E                     L44:
 12332  00298E  6E11               	movwf	vscp_readAppReg@rv,c
 12333  002990                     l6345:
 12334                           
 12335                           ;main.c: 628: }
 12336                           ;main.c: 630: }
 12337                           ;main.c: 632: return rv;
 12338  002990  5011               	movf	vscp_readAppReg@rv,w,c
 12339  002992  0012               	return	
 12340  002994                     __end_of_vscp_readAppReg:
 12341                           	opt stack 0
 12342                           tblptru	equ	0xFF8
 12343                           tblptrh	equ	0xFF7
 12344                           tblptrl	equ	0xFF6
 12345                           tablat	equ	0xFF5
 12346                           prodh	equ	0xFF4
 12347                           prodl	equ	0xFF3
 12348                           intcon	equ	0xFF2
 12349                           postinc0	equ	0xFEE
 12350                           wreg	equ	0xFE8
 12351                           indf1	equ	0xFE7
 12352                           fsr1h	equ	0xFE2
 12353                           fsr1l	equ	0xFE1
 12354                           indf2	equ	0xFDF
 12355                           postinc2	equ	0xFDE
 12356                           postdec2	equ	0xFDD
 12357                           plusw2	equ	0xFDB
 12358                           fsr2h	equ	0xFDA
 12359                           fsr2l	equ	0xFD9
 12360                           status	equ	0xFD8
 12361                           
 12362 ;; *************** function _interrupt_at_low_vector *****************
 12363 ;; Defined at:
 12364 ;;		line 111 in file "../main.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;		None
 12367 ;; Auto vars:     Size  Location     Type
 12368 ;;		None
 12369 ;; Return value:  Size  Location     Type
 12370 ;;		None               void
 12371 ;; Registers used:
 12372 ;;		wreg, status,2, status,0, cstack
 12373 ;; Tracked objects:
 12374 ;;		On entry : 0/0
 12375 ;;		On exit  : 0/0
 12376 ;;		Unchanged: 0/0
 12377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12380 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12381 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12382 ;;Total ram usage:        3 bytes
 12383 ;; Hardware stack levels used:    1
 12384 ;; Hardware stack levels required when called:    1
 12385 ;; This function calls:
 12386 ;;		i1_WriteTimer0
 12387 ;; This function is called by:
 12388 ;;		Interrupt level 1
 12389 ;; This function uses a non-reentrant model
 12390 ;;
 12391                           
 12392                           	psect	intcodelo
 12393  000818                     __pintcodelo:
 12394                           	opt stack 0
 12395  000818                     _interrupt_at_low_vector:
 12396                           	opt stack 22
 12397                           
 12398                           ;incstack = 0
 12399  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12400  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12401  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12402  000824                     
 12403                           ;main.c: 113: if ( INTCONbits.TMR0IF ) {
 12404  000824  A4F2               	btfss	intcon,2,c	;volatile
 12405  000826  D001               	goto	i1u546_21
 12406  000828  D001               	goto	i1u546_20
 12407  00082A                     i1u546_21:
 12408  00082A  D03E               	goto	i1l141
 12409  00082C                     i1u546_20:
 12410  00082C                     
 12411                           ;main.c: 116: WriteTimer0(0xfb1d);
 12412  00082C  0EFB               	movlw	251
 12413  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 12414  000830  0E1D               	movlw	29
 12415  000832  6E01               	movwf	?i1_WriteTimer0,c
 12416  000834  EC4B  F018         	call	i1_WriteTimer0	;wreg free
 12417  000838                     
 12418                           ;main.c: 118: vscp_timer++;
 12419  000838  0100               	movlb	0	; () banked
 12420  00083A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12421  00083C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12422  00083E                     
 12423                           ; BSR set to: 0
 12424                           ;main.c: 119: vscp_configtimer++;
 12425  00083E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12426  000840  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12427  000842                     
 12428                           ; BSR set to: 0
 12429                           ;main.c: 120: measurement_clock++;
 12430  000842  0E01               	movlw	1
 12431  000844  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12432  000846  0E00               	movlw	0
 12433  000848  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12434  00084A  0E00               	movlw	0
 12435  00084C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12436  00084E  0E00               	movlw	0
 12437  000850  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12438  000852                     
 12439                           ; BSR set to: 0
 12440                           ;main.c: 123: if ( PORTCbits.RC0 ) {
 12441  000852  A082               	btfss	3970,0,c	;volatile
 12442  000854  D001               	goto	i1u547_21
 12443  000856  D001               	goto	i1u547_20
 12444  000858                     i1u547_21:
 12445  000858  D002               	goto	i1l5539
 12446  00085A                     i1u547_20:
 12447  00085A                     
 12448                           ; BSR set to: 0
 12449                           ;main.c: 124: vscp_initbtncnt = 0;
 12450  00085A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12451                           
 12452                           ;main.c: 125: } else {
 12453  00085C  D001               	goto	i1l133
 12454  00085E                     i1l5539:
 12455                           
 12456                           ; BSR set to: 0
 12457                           ;main.c: 127: vscp_initbtncnt++;
 12458  00085E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12459  000860                     i1l133:
 12460                           
 12461                           ; BSR set to: 0
 12462                           ;main.c: 128: }
 12463                           ;main.c: 131: vscp_statuscnt++;
 12464  000860  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 12465  000862                     
 12466                           ; BSR set to: 0
 12467                           ;main.c: 132: if ( ( 0x02 == vscp_initledfunc ) &&
 12468                           ;main.c: 133: ( vscp_statuscnt > 100 ) ) {
 12469  000862  5056               	movf	_vscp_initledfunc,w,c
 12470  000864  0A02               	xorlw	2
 12471  000866  A4D8               	btfss	status,2,c
 12472  000868  D001               	goto	i1u548_21
 12473  00086A  D001               	goto	i1u548_20
 12474  00086C                     i1u548_21:
 12475  00086C  D00E               	goto	i1l5549
 12476  00086E                     i1u548_20:
 12477  00086E                     
 12478                           ; BSR set to: 0
 12479  00086E  0E64               	movlw	100
 12480  000870  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 12481  000872  D001               	goto	i1u549_21
 12482  000874  D001               	goto	i1u549_20
 12483  000876                     i1u549_21:
 12484  000876  D009               	goto	i1l5549
 12485  000878                     i1u549_20:
 12486  000878                     
 12487                           ; BSR set to: 0
 12488                           ;main.c: 135: if ( PORTCbits.RC1 ) {
 12489  000878  A282               	btfss	3970,1,c	;volatile
 12490  00087A  D001               	goto	i1u550_21
 12491  00087C  D001               	goto	i1u550_20
 12492  00087E                     i1u550_21:
 12493  00087E  D002               	goto	i1l135
 12494  000880                     i1u550_20:
 12495  000880                     
 12496                           ; BSR set to: 0
 12497                           ;main.c: 136: PORTCbits.RC1 = 0;
 12498  000880  9282               	bcf	3970,1,c	;volatile
 12499                           
 12500                           ;main.c: 137: }
 12501  000882  D001               	goto	i1l136
 12502  000884                     i1l135:
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;main.c: 138: else {
 12506                           ;main.c: 139: PORTCbits.RC1 = 1;
 12507  000884  8282               	bsf	3970,1,c	;volatile
 12508  000886                     i1l136:
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;main.c: 140: }
 12512                           ;main.c: 142: vscp_statuscnt = 0;
 12513  000886  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12514                           
 12515                           ;main.c: 144: }
 12516  000888  D00E               	goto	i1l137
 12517  00088A                     i1l5549:
 12518                           
 12519                           ; BSR set to: 0
 12520                           ;main.c: 145: else if (0x01 == vscp_initledfunc) {
 12521  00088A  0456               	decf	_vscp_initledfunc,w,c
 12522  00088C  A4D8               	btfss	status,2,c
 12523  00088E  D001               	goto	i1u551_21
 12524  000890  D001               	goto	i1u551_20
 12525  000892                     i1u551_21:
 12526  000892  D003               	goto	i1l138
 12527  000894                     i1u551_20:
 12528  000894                     
 12529                           ; BSR set to: 0
 12530                           ;main.c: 146: PORTCbits.RC1 = 1;
 12531  000894  8282               	bsf	3970,1,c	;volatile
 12532                           
 12533                           ;main.c: 147: vscp_statuscnt = 0;
 12534  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12535                           
 12536                           ;main.c: 148: }
 12537  000898  D006               	goto	i1l137
 12538  00089A                     i1l138:
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;main.c: 149: else if (0x00 == vscp_initledfunc) {
 12542  00089A  6656               	tstfsz	_vscp_initledfunc,c
 12543  00089C  D001               	goto	i1u552_21
 12544  00089E  D001               	goto	i1u552_20
 12545  0008A0                     i1u552_21:
 12546  0008A0  D002               	goto	i1l137
 12547  0008A2                     i1u552_20:
 12548  0008A2                     
 12549                           ; BSR set to: 0
 12550                           ;main.c: 150: PORTCbits.RC1 = 0;
 12551  0008A2  9282               	bcf	3970,1,c	;volatile
 12552                           
 12553                           ;main.c: 151: vscp_statuscnt = 0;
 12554  0008A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12555  0008A6                     i1l137:
 12556                           
 12557                           ; BSR set to: 0
 12558                           ;main.c: 152: }
 12559                           ;main.c: 154: INTCONbits.TMR0IF = 0;
 12560  0008A6  94F2               	bcf	intcon,2,c	;volatile
 12561  0008A8                     i1l141:
 12562  0008A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 12563  0008AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 12564  0008B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 12565  0008B4  0010               	retfie	
 12566  0008B6                     __end_of_interrupt_at_low_vector:
 12567                           	opt stack 0
 12568                           tblptru	equ	0xFF8
 12569                           tblptrh	equ	0xFF7
 12570                           tblptrl	equ	0xFF6
 12571                           tablat	equ	0xFF5
 12572                           prodh	equ	0xFF4
 12573                           prodl	equ	0xFF3
 12574                           intcon	equ	0xFF2
 12575                           postinc0	equ	0xFEE
 12576                           wreg	equ	0xFE8
 12577                           indf1	equ	0xFE7
 12578                           fsr1h	equ	0xFE2
 12579                           fsr1l	equ	0xFE1
 12580                           bsr	equ	0xFE0
 12581                           indf2	equ	0xFDF
 12582                           postinc2	equ	0xFDE
 12583                           postdec2	equ	0xFDD
 12584                           plusw2	equ	0xFDB
 12585                           fsr2h	equ	0xFDA
 12586                           fsr2l	equ	0xFD9
 12587                           status	equ	0xFD8
 12588                           
 12589 ;; *************** function i1_WriteTimer0 *****************
 12590 ;; Defined at:
 12591 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  timer0          2    0[COMRAM] unsigned int 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 12596 ;; Return value:  Size  Location     Type
 12597 ;;		None               void
 12598 ;; Registers used:
 12599 ;;		None
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12605 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12608 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12609 ;;Total ram usage:        4 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; This function calls:
 12612 ;;		Nothing
 12613 ;; This function is called by:
 12614 ;;		_interrupt_at_low_vector
 12615 ;; This function uses a non-reentrant model
 12616 ;;
 12617                           
 12618                           	psect	text76
 12619  003096                     __ptext76:
 12620                           	opt stack 0
 12621  003096                     i1_WriteTimer0:
 12622                           	opt stack 22
 12623                           
 12624                           ;incstack = 0
 12625                           ;incstack = 0
 12626  003096  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 12627  00309A  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 12628  00309E  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 12629  0030A2  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 12630  0030A6  0012               	return	
 12631  0030A8                     __end_ofi1_WriteTimer0:
 12632                           	opt stack 0
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           postinc0	equ	0xFEE
 12641                           wreg	equ	0xFE8
 12642                           indf1	equ	0xFE7
 12643                           fsr1h	equ	0xFE2
 12644                           fsr1l	equ	0xFE1
 12645                           bsr	equ	0xFE0
 12646                           indf2	equ	0xFDF
 12647                           postinc2	equ	0xFDE
 12648                           postdec2	equ	0xFDD
 12649                           plusw2	equ	0xFDB
 12650                           fsr2h	equ	0xFDA
 12651                           fsr2l	equ	0xFD9
 12652                           status	equ	0xFD8
 12653                           tblptru	equ	0xFF8
 12654                           tblptrh	equ	0xFF7
 12655                           tblptrl	equ	0xFF6
 12656                           tablat	equ	0xFF5
 12657                           prodh	equ	0xFF4
 12658                           prodl	equ	0xFF3
 12659                           intcon	equ	0xFF2
 12660                           postinc0	equ	0xFEE
 12661                           wreg	equ	0xFE8
 12662                           indf1	equ	0xFE7
 12663                           fsr1h	equ	0xFE2
 12664                           fsr1l	equ	0xFE1
 12665                           bsr	equ	0xFE0
 12666                           indf2	equ	0xFDF
 12667                           postinc2	equ	0xFDE
 12668                           postdec2	equ	0xFDD
 12669                           plusw2	equ	0xFDB
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674                           	psect	rparam
 12675  0000                     tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           prodh	equ	0xFF4
 12680                           prodl	equ	0xFF3
 12681                           intcon	equ	0xFF2
 12682                           postinc0	equ	0xFEE
 12683                           wreg	equ	0xFE8
 12684                           indf1	equ	0xFE7
 12685                           fsr1h	equ	0xFE2
 12686                           fsr1l	equ	0xFE1
 12687                           bsr	equ	0xFE0
 12688                           indf2	equ	0xFDF
 12689                           postinc2	equ	0xFDE
 12690                           postdec2	equ	0xFDD
 12691                           plusw2	equ	0xFDB
 12692                           fsr2h	equ	0xFDA
 12693                           fsr2l	equ	0xFD9
 12694                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     47      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   43183
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _readEEPROM
                    _writeControlReg
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                15    15      0   12295
                                             22 BANK0     15    15      0
                         _readEEPROM
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         4     3      1    2638
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         4     3      1    2638
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1    2793
                                             78 COMRAM     1     0      1
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1    2793
                                             78 COMRAM     1     0      1
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    2539
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   18668
                                             20 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    3222
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1739
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     270
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     270
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1328
                                             20 COMRAM     3     2      1
                         _readEEPROM
                    _writeControlReg
                        _writeEEPROM
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _readEEPROM (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2010
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     481
                                             16 COMRAM     2     2      0
                         _readEEPROM
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _readEEPROM
   _writeControlReg
     _readEEPROM (ARG)
     _readControlReg (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
       _readControlReg
     _vscp_writeAppReg
       _readEEPROM
       _writeControlReg
         _readEEPROM (ARG)
         _readControlReg (ARG)
       _writeEEPROM
       _vscp_readAppReg (ARG)
         _readEEPROM
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _readEEPROM
         _writeControlReg
           _readEEPROM (ARG)
           _readControlReg (ARG)
         _writeEEPROM
         _vscp_readAppReg (ARG)
           _readEEPROM
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _doDM
     _readEEPROM
     _actionSet
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClr
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionSetAll
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClrAll
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2F      5F       5       59.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B7       6        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Apr 24 17:09:33 2015

                __end_of_vscp_readAppReg 2994                    __end_of_sendVSCPFrame 284A  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1B8C  
                                    l320 2662                                      l321 2666  
                                    l313 264A                                      l145 2296  
                                    l330 2682                                      l322 266A  
                                    l154 22DA                                      l331 2686  
                                    l323 266E                                      l315 264E  
                                    l316 2652                                      l340 257A  
                                    l317 2656                                      l326 2672  
                                    l318 265A                                      l350 259E  
                                    l342 257E                                      l158 22F4  
                                    l327 2676                                      l319 265E  
                                    l343 2582                                      l328 267A  
                                    l344 2586                                      l177 28B2  
                                    l329 267E                                      l353 25A2  
                                    l345 258A                       vscp_readStdReg@idx 0019  
                                    l354 25A6                                      l346 258E  
                                    l355 25AA                                      l347 2592  
                                    l291 15BC                                      l356 25AE  
                                    l348 2596                                      l357 25B2  
                                    l349 259A                                      l454 2C72  
                                    l358 25B6                                      l289 15A2  
                                    l718 2A92                                      l670 1868  
                                    l646 1DE2                                      l680 18B6  
                                    l672 1876                                      l648 1E00  
                                    l833 2BC8                                      l690 1946  
                                    l682 18C6                                      l674 1886  
                                    l691 196A                                      l659 181E  
                                    l676 1896                                      l669 18D8  
                                    l678 18A6                       vscp_readStdReg@reg 001C  
                                    l856 2780                                      l848 2792  
                                    l857 2760                                      l849 271E  
                                    l891 2D34                                      l980 245E  
         __size_of_vscp_handleProbeState 00BA                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2CE0            __end_of_vscp_handleProbeState 2796  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                                    wreg 000FE8                     __end_of_actionSetAll 2D10  
            ?_doApplicationOneSecondWork 0001                                     l1014 10DC  
                                   l1040 12C2                                     l1116 2F6C  
                                   l1117 2F6E                                     l1038 126C  
                                   l1039 1280                                     l1049 12FE  
                                   l1097 2E4C                                     l5121 18EC  
                                   l5131 190C                                     l5221 2A4A  
                                   l5213 2A24                                     l5053 180C  
                                   l5223 2A54                                     l5215 2A2C  
                                   l5231 2A74                                     l5063 1836  
                                   l5225 2A5E                                     l5217 2A36  
                                   l5227 2A68                                     l5219 2A40  
                                   l5171 19C8                                     l7011 0F80  
                    vscp_readStdReg@code 0011                                     l5245 1F10  
                                   l5157 1998                                     l5165 19B2  
                                   l5149 196C                                     l5069 184C  
                                   l5077 1856                                     l4613 2EA6  
                                   l5183 2FCC                                     l7103 10E0  
                                   l7031 0FA6                                     l3809 286A  
                                   l7201 1260                                     l7113 1124  
                                   l7105 10FE                                     l6315 2914  
                                   l4619 2E86                                     l3827 28B4  
                                   l7123 1180                                     l6333 295E  
                                   l6325 2942                                     l5517 2DB6  
                                   l5509 2DA0                                     l7221 1288  
                                   l7141 11B2                                     l7109 110C  
                                   l7061 100C                                     l7045 0FB2  
                                   l6319 2924                                     l6415 2848  
                                   l5703 26DE                                     l3863 1CCE  
                                   l3871 1D14                                     l3855 1B94  
                                   l7151 11D6                                     l7143 11BC  
                                   l7119 116A                                     l7071 1040  
                                   l6431 2632                vscp_getManufacturerId@idx 000B  
                                   l6329 2950                                     l6345 2990  
                                   l4681 24CA                                     l6513 2C6E  
                                   l7305 1374                                     l7233 12AE  
                                   l7081 1074                                     l6339 2972  
                                   l4683 2512                                     l6603 2056  
                                   l3859 1C48                                     l6371 21CC  
                                   l6355 215C                                     l7251 12DE  
                                   l7139 11B0                                     l7091 10A8  
                                   l6435 263A                                     l6427 262A  
                                   l6283 2B92                                     l4941 2E10  
                                   l6533 1D7C                                     l6509 2C40  
                                   l5741 273C                                     l5717 26FC  
                                   l3869 1D06                                     l6365 21AC  
                                   l7333 13E2                                     l7325 13AC  
                                   l7309 1378                                     l7237 12B6  
                                   l7229 12A6                                     l7157 1202  
                                   l6461 25BA                                     l6453 2562  
                                   l6277 2B88                                     l4679 246C  
                                   l4687 252C                                     l6527 1D6E  
                                   l5743 2740                                     l5719 2702  
                                   l6711 1A34                                     l6703 1A1C  
                                   l6359 217A                                     l6391 2244  
                                   l7247 12C4                                     l6439 268A  
                                   l6471 2CEC                                     l7431 16B4  
                                   l6287 2B9A                                     l4689 2538  
                                   l4929 2AB4                                     l6561 1E02  
                                   l6545 1DA6                                     l5737 2738  
                                   l6641 2C32                                     l6721 1A5A  
                                   l6377 21EC                                     l6385 2212  
                                   l7337 13FA                                     l7329 13CC  
                                   l7273 1306                                     l7185 1240  
                                   l7169 1220                                     l6457 256A  
                                   l6449 255A                                     l6555 1DE6  
                                   l6715 1A44                                     l6707 1A28  
                                   l6811 23C4                                     l7355 1448  
                                   l7347 141A                                     l7443 1762  
                                   l7435 16EE                                     l7419 15D6  
                                   l7451 17DA                                     l5669 2EE6  
                                   l5773 2784                                     l4893 2EC6  
                                   l6741 1A94                                     l6733 1A7C  
                                   l6725 1A66                                     l6821 23E6  
                                   l6805 23A8                                     l7381 14CE  
                                   l6485 2CBC                                     l6567 1E30  
                                   l6575 1E4E                                     l6823 23FC  
                                   l7359 146C                                     l7287 132E  
                                   l7439 1728                                     l6585 1E72  
                                   l6745 1AA0                                     l6737 1A88  
                                   l6729 1A72                                     l7297 1352  
                                   l7449 179C                                     l6921 22D4  
                                   l6913 22C0                                     l6587 1E74  
                                   l6771 1B78                                     l6755 1B02  
                                   l6691 19FC                                     l6843 2444  
                                   l6835 2430                                     l6819 23E2  
                                   l6765 1B62                                     l6677 2FE8  
                                   l6853 2460                                     l7397 153E  
                                   l6917 22CA                                     l6933 22F8  
                                   l6909 22B8                                     l6695 1A06  
                                   l6775 1B88                                     l6687 19F2  
                                   l6919 22CE                                     l6935 2310  
                                   l6929 22EE                                     l6699 1A10  
                                   l6787 2F2C                                     l6971 0F30  
                                   l6963 2358                                     l6947 233C  
                                   l6973 0F34                                     l6893 225C  
                                   l6799 2388                                     l6975 0F38  
                                   l6959 2350                                     l6977 0F3C  
                                   l6969 0F2C                                     l6997 0F78  
            __size_of_vscp_getMatrixInfo 0020                                     u4380 2B04  
                         sendCANFrame@id 0037                                     u4385 2AFA  
                                   u4555 1814                                     u4557 1816  
                                   u7310 1B5A                                     u7315 1B50  
                                   u7280 1AF8                                     u4875 1EBE  
                                   u4885 1EDE                                     u6725 27D2  
                                   u7285 1AEE                                     u4895 1F2C  
                         sendCANFrame@rv 003E                                     u6965 201A  
                                   u6975 2040                                     u6985 206A  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   _doDM 1532                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 2248  
                                   _init 2C7A                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 2130  
                            _vscp_minute 006F                              _vscp_second 0074  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 08B6            __size_of_vscp_doOneSecondWork 0050  
                          __CFG_FOSC$HS2 000000                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0020                            __CFG_MCLRE$ON 000000  
                       _vscp_writeStdReg 235E                              _writeEEPROM 2E30  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 2B10              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 0026                                    _B0CON 000E80  
                                  _B1CON 000E90                                    ?_doDM 0001  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_SendInformationEvent 0056  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 2F54            ??_vscp_writeNicknamePermanent 000B  
                     writeEEPROM@address 0008                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 3096                                    _EEADR 000F74  
                        __end_of___lbmod 2DBE                  _vscp_handleDropNickname 2D10  
                                  _BSEL0 000E7D                                    _T0CON 000FD5  
                                  i1l133 0860                                    i1l141 08A8  
                                  i1l135 0884                                    i1l136 0886  
                                  i1l137 08A6                                    i1l138 089A  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                         readControlReg@rv 0010  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 30DA               _vscp_readNicknamePermanent 30D0  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                             _vscp_getGUID 3016  
                                  doDM@i 00B4                             _vscp_getZone 30B2  
                     vscp_writeAppReg@rv 0016                                    _hours 0068  
              _vscp_getRegisterPagesUsed 30F4                   __size_of_vscp_getEvent 002C  
                           _vscp_setGUID 2E9A                                    tablat 000FF5  
                _vscp_getSubMinorVersion 30FA                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 2DE4  
                   _ECANSetOperationMode 2FC0                          __initialization 2EFA  
                           __end_of_doDM 17E6                             __end_of_main 235E  
                           __end_of_init 2CB0                        ??_writeControlReg 0012  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0818  
                         doDM@class_mask 00AB                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00A6  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 0052  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 0F22                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000F73  
                                 _EECON2 000F7E                                   _ANCON0 000F5D  
                                 _ANCON1 000F5C                                   _CIOCON 000F70  
                          doDM@type_mask 00AE                       vscp_writeStdReg@rv 0014  
                          ?_init_app_ram 0001                                   _MDSEL0 007B96  
                                 _MDSEL1 007B97                          __CFG_BBSIZ$BB2K 000000  
                                 i1l5531 083E                                   i1l5541 0862  
                                 i1l5533 0842                                   i1l5525 0824  
                                 i1l5551 0894                                   i1l5543 086E  
                                 i1l5535 0852                                   i1l5527 082C  
                                 i1l5553 08A2                                   i1l5545 0878  
                                 i1l5537 085A                                   i1l5529 0838  
                             _OpenTimer0 2F54                                   i1l5547 0880  
                                 i1l5539 085E                                   i1l5549 088A  
                         __CFG_WDTEN$OFF 000000                          _init_app_eeprom 284A  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 2D6C                   writeControlReg@ctrlreg 0013  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1140 00AD  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 2D40  
                                 _doWork 30F0                         OpenTimer0@config 0008  
                  __size_of_actionClrAll 0030                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000C                      vscp_writeAppReg@reg 0017  
             __end_of_vscp_setSegmentCRC 304E                      vscp_writeAppReg@val 0015  
                                 clear_0 2F00                                   clear_1 2F0C  
                  __size_of_actionSetAll 0030                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00BB                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0070                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000B  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0008                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                               __accesstop 0060  
                __end_of__initialization 2F12                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                             _actionClrAll 2CB0  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0074  
                     _vscp_writeRegister 2F18                ??_interrupt_at_low_vector 0005  
                           _actionSetAll 2CE0                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
            __end_of_vscp_check_pstorage 2EFA                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                       __size_of_actionClr 00D0  
                     __size_of_actionSet 00D0                      ?_vscp_writeRegister 0018  
                         ??_sendCANFrame 003E               __end_of_vscp_getFamilyCode 30D0  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01F8  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 30C6  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0018  
        __size_of_vscp_setManufacturerId 0020                 __end_of_vscp_writeAppReg 2248  
                __size_of_readControlReg 00D8                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 28F8              __end_of_vscp_setControlByte 303C  
               __end_of_vscp_writeStdReg 2464                       __RegsToCANID@Value 000E  
                          actionClrAll@i 0050                     ??_vscp_writeRegister 0019  
        __end_of_vscp_handleDropNickname 2D40                             _getVSCPFrame 2A9C  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 30F8                    vscp_writeRegister@reg 0019  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 0008                            actionSetAll@i 0050  
        __end_of_vscp_getSubMinorVersion 30FC                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000B  
                                _B5RXFUL 007687                         WriteTimer0@timer 000A  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000E43                                  _BRGCON2 000E44  
                                _BRGCON3 000E45           SendInformationEvent@eventClass 00A4  
                    vscp_writeStdReg@reg 0015             __end_of_vscp_doOneSecondWork 2BB6  
                       __CFG_CANMX$PORTB 000000              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041          __end_of_interrupt_at_low_vector 08B6  
               vscp_readStdReg@code_1113 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 26DC                                  _RXB0CON 000F60  
                                _RXB1CON 000F30                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 2A1E               __end_of_vscp_getMatrixInfo 2EDA  
                                _TXB0CON 000F20                                  _TXB1CON 000F10  
                                _TXB2CON 000F00                                  _RXFCON0 000E46  
                                _RXFCON1 000E47                       _vscp_goActiveState 2F36  
                      __end_of_actionClr 260C                        __end_of_actionSet 26DC  
                 __size_of_sendVSCPFrame 00B4             __end_of_SendInformationEvent 2B66  
           __end_of_vscp_getMajorVersion 3100                        writeControlReg@rv 0014  
                        _writeControlReg 1B8C                       __size_of_vscp_init 0044  
                SendInformationEvent@idx 004E                               _readEEPROM 304E  
                 _vscp_getManufacturerId 2FEE                   _vscp_setManufacturerId 2E7A  
                      actionSetAll@param 004F                          _ECANSendMessage 1D18  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0072               __end_of_vscp_getSegmentCRC 30E4  
             ??_vscp_handleProtocolEvent 00A4                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 30F6                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 2D96                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 3084  
                     _vscp_sendHeartBeat 2DBE                                  __pcinit 2EFA  
                         _vscp_deviceURL 0F00                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 2248  
                                __ptext1 30F0                                  __ptext2 30F2  
                                __ptext3 2B66                                  __ptext4 2DBE  
                                __ptext5 30A8                                  __ptext6 30B2  
                                __ptext7 30EC                                  __ptext8 1532  
                                __ptext9 2CB0                           _vscp_getUserID 3002  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00A4  
               ??_vscp_handleSetNickname 000C                                  _minutes 0069  
                                _seconds 006A                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 3096                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00B1                     end_of_initialization 2F12  
           __end_of_vscp_handleHeartbeat 2C3A                 __size_of_vscp_getSubzone 000A  
                   __end_of_sendCANFrame 2C7A                vscp_handleProtocolEvent@i 00BD  
              vscp_handleProtocolEvent@j 00BE                vscp_handleProtocolEvent@k 00B8  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 2DE4  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 008A  
                         _vscp_setUserID 2FA8                                  postinc0 000FEE  
                                postinc2 000FDE                         actionClr@dmflags 0001  
                 __end_of_vscp_deviceURL 0F20      __end_of_vscp_writeNicknamePermanent 3072  
            _vscp_writeNicknamePermanent 3060                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 2796                   __end_of_vscp_getUserID 3016  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0077CB  
                      __end_of_vscp_init 2BFA                           _vscp_probe_cnt 0073  
                              _PORTAbits 000F80                                _PORTBbits 000F81  
                              _PORTCbits 000F82                      __end_of_getCANFrame 2E30  
                         _readControlReg 2464            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 009C  
                       ___lbmod@dividend 0009                  __end_of_writeControlReg 1D18  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 01AE  
                     _vscp_setSegmentCRC 303C                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00B6                  __end_of_ECANSendMessage 1E7C  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00B3  
                   __end_of__RegsToCANID 1FE0                              ?_readEEPROM 0008  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 2E0A  
                             _vscp_error 30EC                     _vscp_doOneSecondWork 2B66  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0066  
                 __end_of_vscp_setUserID 2FC0                   vscp_sendHeartBeat@zone 004C  
                         ?_sendVSCPFrame 003F                     __size_of_writeEEPROM 0026  
                        ?_vscp_getUserID 0001                      actionSetAll@dmflags 0001  
                         __end_of_doWork 30F2             __end_of_vscp_getMinorVersion 30FE  
                            _WriteTimer0 3084                   __end_of_readControlReg 253C  
                   _SendInformationEvent 2B10                     _vscp_getMajorVersion 30FE  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0015  
                    start_initialization 2EFA          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 0016                        ?_vscp_writeStdReg 000F  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0010                       _vscp_getFamilyCode 30C6  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 30BC  
                       doDM@class_filter 00A9                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 2FD8                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00B5                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1532  
                        ?_vscp_setUserID 000B                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 0012                                _doDM$1986 00AF  
                              _doDM$1987 00B0                                _doDM$1988 00B1  
                              _doDM$1989 00B2                 ?_vscp_handleDropNickname 0001  
                      ??_vscp_getSubzone 000B                 __end_of__ECANPointBuffer 2A9C  
                      __CANIDToRegs@type 000E                              _getCANFrame 2E0A  
                               ??_doWork 0008                       _vscp_getBufferSize 30F6  
            vscp_handleProtocolEvent@len 00B2              vscp_handleProtocolEvent@pos 00B0  
             __end_of_ECANReceiveMessage 19DE                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001A                    ?_SendInformationEvent 00A4  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 30A8  
          __end_of_vscp_goBootloaderMode 2FA8                          ?_readControlReg 0001  
                         actionClr@param 004F                     _vscp_handleHeartbeat 2BFA  
                     __end_of_OpenTimer0 2F72      __size_of_doApplicationOneSecondWork 0002  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
           __size_of_vscp_check_pstorage 0020                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0090                         _vscp_alarmstatus 006B  
                       ?_writeControlReg 0011                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 001E                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 0011                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 2FEE                             _init_app_ram 3072  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              _actionClr 253C                                _actionSet 260C  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 2EBA  
                 _vscp_handleSetNickname 2E56            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0090                           _ECANInitialize 2994  
                               ?___lbmod 0008                           actionSet@param 004F  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 000B  
                            __pintcodelo 0818         vscp_handleProtocolEvent@len_1130 00B4  
                  ?_vscp_handleHeartbeat 0001                  vscp_readStdReg@idx_1114 001A  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 2C3A  
                            __smallconst 0F00                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 30DA                         actionSet@dmflags 0001  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
         __end_of_vscp_getManufacturerId 3002           __end_of_vscp_setManufacturerId 2E9A  
                  __size_of__RegsToCANID 0164         vscp_handleProtocolEvent@pos_1129 00B3  
                        doDM@type_filter 00AD                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0064          SendInformationEvent@eventTypeId 00A5  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                   _vscp_getMinorVersion 30FC                                _sendTimer 0055  
                             ?_actionClr 004F                               ?_actionSet 004F  
                 __end_of_ECANInitialize 2A1E                                 i1u550_20 0880  
                               i1u550_21 087E                                 i1u551_20 0894  
                               i1u551_21 0892                                 i1u552_20 08A2  
                               i1u552_21 08A0                                 i1u546_20 082C  
                               i1u546_21 082A                                 i1u547_20 085A  
                               i1u547_21 0858                                 i1u548_20 086E  
                               i1u548_21 086C                                 i1u549_20 0878  
                               i1u549_21 0876                                 _PIR4bits 000FB7  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 2D6C                                 _RXF0EIDH 000EE2  
                               _RXF0EIDL 000EE3                                 _RXB0OVFL 007B8F  
                               _RXF1EIDH 000EE6                                 _RXF1EIDL 000EE7  
                               _RXB1OVFL 007B8E                                 _RXF0SIDH 000EE0  
                               _RXF0SIDL 000EE1                                 _RXF1SIDH 000EE4  
                               _RXF1SIDL 000EE5                                 _RXM0EIDH 000EFA  
                               _RXM0EIDL 000EFB                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000EFE                                 _RXM1EIDL 000EFF  
                   ??_vscp_getSegmentCRC 000B                                 _RXFBCON0 000E71  
                               _RXFBCON1 000E72                                 _RXFBCON2 000E73  
                               _RXFBCON3 000E74                                 _RXFBCON4 000E75  
                               _RXFBCON5 000E76                                 _RXFBCON6 000E77  
                               _RXFBCON7 000E78                                 _RXM0SIDH 000EF8  
                               _RXM0SIDL 000EF9                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 2130                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1E7C                       _vscp_probe_address 0057  
            __size_of_vscp_goActiveState 001E                       writeControlReg@val 0011  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 2BB6  
                              _vscp_imsg 0075                                _vscp_hour 006D  
                              _vscp_omsg 0083                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 0610                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 30F4  
             _doApplicationOneSecondWork 30F2                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0060  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 00AE                      actionClrAll@dmflags 0001  
           __end_of_vscp_restoreDefaults 30EC                               _EECON1bits 000F7F  
                          ?_actionClrAll 004F                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                            ?_actionSetAll 004F  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 2F72  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                       __CFG_BOREN$SBORDIS 000000  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                     __end_of_readEEPROM 3060                               ?_vscp_init 0001  
                               __ptext10 2CE0                                 __ptext11 253C  
                               __ptext20 2FA8                                 __ptext12 260C  
                               __ptext21 2E7A                                 __ptext13 2B10  
                               __ptext30 30F6                                 __ptext22 2E9A  
                               __ptext14 0F22                                 __ptext31 30F8  
                               __ptext23 2130                                 __ptext15 2D96  
                               __ptext40 2D10                                 __ptext32 2FEE  
                               __ptext24 1B8C                                 __ptext16 2F18  
                               __ptext41 2BB6                                 __ptext33 3002  
                               __ptext25 2FD8                                 __ptext17 235E  
                               __ptext50 2796                                 __ptext42 30D0  
                               __ptext34 2F72                                 __ptext26 19DE  
                               __ptext18 30E4                                 __ptext51 2C3A  
                               __ptext43 2E56                                 __ptext35 3016  
                               __ptext27 30F4                                 __ptext19 284A  
                               __ptext60 2EDA                                 __ptext52 1D18  
                               __ptext44 2BFA                                 __ptext36 30FA  
                               __ptext28 30BC                                 __ptext61 302A  
                               __ptext53 1FE0                                 __ptext45 2EBA  
                               __ptext37 30FC                                 __ptext29 30C6  
                               __ptext70 2F54                                 __ptext62 303C  
                               __ptext54 2D40                                 __ptext46 2F8E  
                               __ptext38 30FE                                 __ptext71 3072  
                               __ptext63 30DA                                 __ptext55 2A9C  
                               __ptext47 26DC                                 __ptext39 2D6C  
                               __ptext72 3084                                 __ptext64 304E  
                               __ptext56 2E0A                                 __ptext48 2F36  
                               __ptext73 2464                                 __ptext65 3060  
                               __ptext57 17E6                                 __ptext49 2DE4  
                               __ptext74 28F8                                 __ptext66 2E30  
                               __ptext58 1E7C                                 __ptext67 2C7A  
                               __ptext59 2A1E                                 __ptext76 3096  
                               __ptext68 2994                                 __ptext69 2FC0  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00A4  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 30A8                         ??_vscp_setUserID 000C  
                          __size_of_doDM 02B4                            __size_of_main 0116  
                          __size_of_init 0036                           ??_actionClrAll 0050  
                            ??_actionClr 0050                              ??_actionSet 0050  
              __size_of_vscp_writeAppReg 0118                      _vscp_check_pstorage 2EDA  
                         ??_actionSetAll 0050           vscp_handleProtocolEvent@i_1131 00BC  
         vscp_handleProtocolEvent@i_1128 00BA           vscp_handleProtocolEvent@i_1139 00B7  
                   __end_of_vscp_getGUID 302A                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                         ??_readControlReg 0008  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 30BC                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 2EBA                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00AF  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000E  
                       init_app_eeprom@j 000D                      _vscp_setControlByte 302A  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 28F8  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 006C                          _vscp_readStdReg 19DE  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 2D96  
                     _ECANReceiveMessage 17E6                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 006E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 2F8E  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0071                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
                vscp_setControlByte@ctrl 000B                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000B                    __size_of__CANIDToRegs 0150  
                         readEEPROM@data 000A                       __CFG_WDTPS$1048576 000000  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 30FA  
            _vscp_getBootLoaderAlgorithm 30F8                    readControlReg@ctrlreg 000F  
       __size_of_interrupt_at_low_vector 009E                        actionClrAll@param 004F  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 2E56  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2F8E             __end_of_ECANSetOperationMode 2FD8  
                   _vscp_restoreDefaults 30E4              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 30B2  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2F36                       __end_of_vscp_error 30F0  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2E7A  
     vscp_handleProtocolEvent@bytes_1136 00B9                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 1FE0                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00AB  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
