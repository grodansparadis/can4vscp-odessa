

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Jul 10 15:30:18 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  000F00                     __psmallconst:
    94                           	opt stack 0
    95  000F00                     _vscp_deviceURL:
    96                           	opt stack 0
    97  000F00  77                 	db	119
    98  000F01  77                 	db	119
    99  000F02  77                 	db	119
   100  000F03  2E                 	db	46
   101  000F04  65                 	db	101
   102  000F05  75                 	db	117
   103  000F06  72                 	db	114
   104  000F07  6F                 	db	111
   105  000F08  73                 	db	115
   106  000F09  6F                 	db	111
   107  000F0A  75                 	db	117
   108  000F0B  72                 	db	114
   109  000F0C  63                 	db	99
   110  000F0D  65                 	db	101
   111  000F0E  2E                 	db	46
   112  000F0F  73                 	db	115
   113  000F10  65                 	db	101
   114  000F11  2F                 	db	47
   115  000F12  6F                 	db	111
   116  000F13  64                 	db	100
   117  000F14  65                 	db	101
   118  000F15  73                 	db	115
   119  000F16  73                 	db	115
   120  000F17  61                 	db	97
   121  000F18  30                 	db	48
   122  000F19  30                 	db	48
   123  000F1A  31                 	db	49
   124  000F1B  2E                 	db	46
   125  000F1C  78                 	db	120
   126  000F1D  6D                 	db	109
   127  000F1E  6C                 	db	108
   128  000F1F  00                 	db	0
   129  000F20                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _ANCON0	set	3933
   132  0000                     _ANCON1	set	3932
   133  0000                     _BRGCON1	set	3651
   134  0000                     _BRGCON2	set	3652
   135  0000                     _BRGCON3	set	3653
   136  0000                     _BSEL0	set	3709
   137  0000                     _CANCON	set	3951
   138  0000                     _CIOCON	set	3952
   139  0000                     _ECANCON	set	3954
   140  0000                     _EEADR	set	3956
   141  0000                     _EEADRH	set	3957
   142  0000                     _EECON1bits	set	3967
   143  0000                     _EECON2	set	3966
   144  0000                     _EEDATA	set	3955
   145  0000                     _INTCONbits	set	4082
   146  0000                     _MSEL0	set	3705
   147  0000                     _MSEL1	set	3706
   148  0000                     _MSEL2	set	3707
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTAbits	set	3968
   151  0000                     _PORTB	set	3969
   152  0000                     _PORTBbits	set	3969
   153  0000                     _PORTC	set	3970
   154  0000                     _PORTCbits	set	3970
   155  0000                     _RXB1CONbits	set	3888
   156  0000                     _RXF0EIDH	set	3810
   157  0000                     _RXF0EIDL	set	3811
   158  0000                     _RXF0SIDH	set	3808
   159  0000                     _RXF0SIDL	set	3809
   160  0000                     _RXF1EIDH	set	3814
   161  0000                     _RXF1EIDL	set	3815
   162  0000                     _RXF1SIDL	set	3813
   163  0000                     _RXFBCON0	set	3697
   164  0000                     _RXFBCON1	set	3698
   165  0000                     _RXFBCON2	set	3699
   166  0000                     _RXFBCON3	set	3700
   167  0000                     _RXFBCON4	set	3701
   168  0000                     _RXFBCON5	set	3702
   169  0000                     _RXFBCON6	set	3703
   170  0000                     _RXFBCON7	set	3704
   171  0000                     _RXFCON0	set	3654
   172  0000                     _RXFCON1	set	3655
   173  0000                     _RXM0EIDH	set	3834
   174  0000                     _RXM0EIDL	set	3835
   175  0000                     _RXM0SIDH	set	3832
   176  0000                     _RXM0SIDL	set	3833
   177  0000                     _RXM1EIDH	set	3838
   178  0000                     _RXM1EIDL	set	3839
   179  0000                     _RXM1SIDL	set	3837
   180  0000                     _T0CON	set	4053
   181  0000                     _T0CONbits	set	4053
   182  0000                     _TMR0H	set	4055
   183  0000                     _TMR0L	set	4054
   184  0000                     _TRISA	set	3986
   185  0000                     _TRISB	set	3987
   186  0000                     _TRISC	set	3988
   187  0000                     _B0RXFUL	set	29703
   188  0000                     _B0TXEN	set	29674
   189  0000                     _B1RXFUL	set	29831
   190  0000                     _B1TXEN	set	29675
   191  0000                     _B2RXFUL	set	29959
   192  0000                     _B2TXEN	set	29676
   193  0000                     _B3RXFUL	set	30087
   194  0000                     _B3TXEN	set	29677
   195  0000                     _B4RXFUL	set	30215
   196  0000                     _B4TXEN	set	29678
   197  0000                     _B5RXFUL	set	30343
   198  0000                     _B5TXEN	set	29679
   199  0000                     _FIFOEMPTY	set	31631
   200  0000                     _IRXIF	set	31679
   201  0000                     _MDSEL0	set	31638
   202  0000                     _MDSEL1	set	31639
   203  0000                     _RXB0FILHIT0	set	31488
   204  0000                     _RXB0FUL	set	31495
   205  0000                     _RXB0IF	set	31672
   206  0000                     _RXB0OVFL	set	31631
   207  0000                     _RXB1IF	set	31673
   208  0000                     _RXB1OVFL	set	31630
   209  0000                     _RXF1EN	set	29233
   210  0000                     _RXM0EXIDM	set	30667
   211  0000                     _RXM1EXIDEN	set	30699
   212  0000                     _B0CON	set	3712
   213  0000                     _B1CON	set	3728
   214  0000                     _B2CON	set	3744
   215  0000                     _B3CON	set	3760
   216  0000                     _B4CON	set	3776
   217  0000                     _B5CON	set	3792
   218  0000                     _RXB0CON	set	3936
   219  0000                     _RXB1CON	set	3888
   220  0000                     _RXF1SIDH	set	3812
   221  0000                     _RXM1SIDH	set	3836
   222  0000                     _TXB0CON	set	3872
   223  0000                     _TXB1CON	set	3856
   224  0000                     _TXB2CON	set	3840
   225                           
   226                           ; #config settings
   227  000F20  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	cinit
   230  002F74                     __pcinit:
   231                           	opt stack 0
   232  002F74                     start_initialization:
   233                           	opt stack 0
   234  002F74                     __initialization:
   235                           	opt stack 0
   236                           
   237                           ; Clear objects allocated to BANK0 (48 bytes)
   238  002F74  EE00  F060         	lfsr	0,__pbssBANK0
   239  002F78  0E30               	movlw	48
   240  002F7A                     clear_0:
   241  002F7A  6AEE               	clrf	postinc0,c
   242  002F7C  06E8               	decf	wreg,f,c
   243  002F7E  E1FD               	bnz	clear_0
   244                           
   245                           ; Clear objects allocated to COMRAM (7 bytes)
   246  002F80  EE00  F052         	lfsr	0,__pbssCOMRAM
   247  002F84  0E07               	movlw	7
   248  002F86                     clear_1:
   249  002F86  6AEE               	clrf	postinc0,c
   250  002F88  06E8               	decf	wreg,f,c
   251  002F8A  E1FD               	bnz	clear_1
   252  002F8C                     end_of_initialization:
   253                           	opt stack 0
   254  002F8C                     __end_of__initialization:
   255                           	opt stack 0
   256  002F8C  0100               	movlb	0
   257  002F8E  EF43  F011         	goto	_main	;jump to C main() function
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssCOMRAM
   262  000052                     __pbssCOMRAM:
   263                           	opt stack 0
   264  000052                     _vscp_page_select:
   265                           	opt stack 0
   266  000052                     	ds	2
   267  000054                     __ECANRxFilterHitInfo:
   268                           	opt stack 0
   269  000054                     	ds	1
   270  000055                     _sendTimer:
   271                           	opt stack 0
   272  000055                     	ds	1
   273  000056                     _vscp_initledfunc:
   274                           	opt stack 0
   275  000056                     	ds	1
   276  000057                     _vscp_probe_address:
   277                           	opt stack 0
   278  000057                     	ds	1
   279  000058                     _vscp_statuscnt:
   280                           	opt stack 0
   281  000058                     	ds	1
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	bssBANK0
   286  000060                     __pbssBANK0:
   287                           	opt stack 0
   288  000060                     _measurement_clock:
   289                           	opt stack 0
   290  000060                     	ds	4
   291  000064                     _vscp_configtimer:
   292                           	opt stack 0
   293  000064                     	ds	2
   294  000066                     _vscp_timer:
   295                           	opt stack 0
   296  000066                     	ds	2
   297  000068                     _hours:
   298                           	opt stack 0
   299  000068                     	ds	1
   300  000069                     _minutes:
   301                           	opt stack 0
   302  000069                     	ds	1
   303  00006A                     _seconds:
   304                           	opt stack 0
   305  00006A                     	ds	1
   306  00006B                     _vscp_alarmstatus:
   307                           	opt stack 0
   308  00006B                     	ds	1
   309  00006C                     _vscp_guid_reset:
   310                           	opt stack 0
   311  00006C                     	ds	1
   312  00006D                     _vscp_hour:
   313                           	opt stack 0
   314  00006D                     	ds	1
   315  00006E                     _vscp_initbtncnt:
   316                           	opt stack 0
   317  00006E                     	ds	1
   318  00006F                     _vscp_minute:
   319                           	opt stack 0
   320  00006F                     	ds	1
   321  000070                     _vscp_nickname:
   322                           	opt stack 0
   323  000070                     	ds	1
   324  000071                     _vscp_node_state:
   325                           	opt stack 0
   326  000071                     	ds	1
   327  000072                     _vscp_node_substate:
   328                           	opt stack 0
   329  000072                     	ds	1
   330  000073                     _vscp_probe_cnt:
   331                           	opt stack 0
   332  000073                     	ds	1
   333  000074                     _vscp_second:
   334                           	opt stack 0
   335  000074                     	ds	1
   336  000075                     _vscp_imsg:
   337                           	opt stack 0
   338  000075                     	ds	14
   339  000083                     _vscp_omsg:
   340                           	opt stack 0
   341  000083                     	ds	13
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	cstackBANK0
   346  000090                     __pcstackBANK0:
   347                           	opt stack 0
   348  000090                     ??_sendVSCPFrame:
   349                           
   350                           ; 0 bytes @ 0x0
   351  000090                     	ds	20
   352  0000A4                     ??_vscp_handleProtocolEvent:
   353  0000A4                     ?_SendInformationEvent:
   354                           	opt stack 0
   355  0000A4                     ?_vscp_sendHeartBeat:
   356                           	opt stack 0
   357  0000A4                     SendInformationEvent@eventClass:
   358                           	opt stack 0
   359  0000A4                     vscp_sendHeartBeat@subzone:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x14
   363  0000A4                     	ds	1
   364  0000A5                     SendInformationEvent@eventTypeId:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x15
   368  0000A5                     	ds	1
   369  0000A6                     ??_doDM:
   370                           
   371                           ; 0 bytes @ 0x16
   372  0000A6                     	ds	3
   373  0000A9                     doDM@class_filter:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x19
   377  0000A9                     	ds	2
   378  0000AB                     doDM@class_mask:
   379                           	opt stack 0
   380  0000AB                     vscp_handleProtocolEvent@page_save:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x1B
   384  0000AB                     	ds	2
   385  0000AD                     doDM@type_filter:
   386                           	opt stack 0
   387  0000AD                     vscp_handleProtocolEvent@page_save_1144:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x1D
   391  0000AD                     	ds	1
   392  0000AE                     doDM@type_mask:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x1E
   396  0000AE                     	ds	1
   397  0000AF                     vscp_handleProtocolEvent@offset:
   398                           	opt stack 0
   399  0000AF                     _doDM$1998:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x1F
   403  0000AF                     	ds	1
   404  0000B0                     vscp_handleProtocolEvent@pos:
   405                           	opt stack 0
   406  0000B0                     _doDM$1999:
   407                           	opt stack 0
   408                           
   409                           ; 1 bytes @ 0x20
   410  0000B0                     	ds	1
   411  0000B1                     vscp_handleProtocolEvent@bytes:
   412                           	opt stack 0
   413  0000B1                     _doDM$2000:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x21
   417  0000B1                     	ds	1
   418  0000B2                     vscp_handleProtocolEvent@len:
   419                           	opt stack 0
   420  0000B2                     _doDM$2001:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x22
   424  0000B2                     	ds	1
   425  0000B3                     doDM@dmflags:
   426                           	opt stack 0
   427  0000B3                     vscp_handleProtocolEvent@pos_1133:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x23
   431  0000B3                     	ds	1
   432  0000B4                     doDM@i:
   433                           	opt stack 0
   434  0000B4                     vscp_handleProtocolEvent@len_1134:
   435                           	opt stack 0
   436                           
   437                           ; 1 bytes @ 0x24
   438  0000B4                     	ds	1
   439  0000B5                     vscp_handleProtocolEvent@bytes_this_time:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x25
   443  0000B5                     	ds	1
   444  0000B6                     vscp_handleProtocolEvent@cb:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x26
   448  0000B6                     	ds	1
   449  0000B7                     vscp_handleProtocolEvent@i_1143:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x27
   453  0000B7                     	ds	1
   454  0000B8                     vscp_handleProtocolEvent@k:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x28
   458  0000B8                     	ds	1
   459  0000B9                     vscp_handleProtocolEvent@i_1132:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x29
   463  0000B9                     	ds	1
   464  0000BA                     vscp_handleProtocolEvent@byte:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x2A
   468  0000BA                     	ds	1
   469  0000BB                     vscp_handleProtocolEvent@bytes_1139:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x2B
   473  0000BB                     	ds	2
   474  0000BD                     vscp_handleProtocolEvent@i_1135:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x2D
   478  0000BD                     	ds	1
   479  0000BE                     vscp_handleProtocolEvent@i:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x2E
   483  0000BE                     	ds	1
   484  0000BF                     vscp_handleProtocolEvent@j:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x2F
   488  0000BF                     	ds	1
   489                           postinc0	equ	0xFEE
   490                           wreg	equ	0xFE8
   491                           
   492                           	psect	cstackCOMRAM
   493  000001                     __pcstackCOMRAM:
   494                           	opt stack 0
   495  000001                     ?i1_WriteTimer0:
   496                           	opt stack 0
   497  000001                     i1WriteTimer0@timer0:
   498                           	opt stack 0
   499                           
   500                           ; 2 bytes @ 0x0
   501  000001                     	ds	2
   502  000003                     i1WriteTimer0@timer:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x2
   506  000003                     	ds	2
   507  000005                     ??_interrupt_at_low_vector:
   508                           
   509                           ; 0 bytes @ 0x4
   510  000005                     	ds	3
   511  000008                     ?_WriteTimer0:
   512                           	opt stack 0
   513  000008                     ?_Write_b_eep:
   514                           	opt stack 0
   515  000008                     ??_readControlReg:
   516  000008                     ?__CANIDToRegs:
   517                           	opt stack 0
   518  000008                     ?__RegsToCANID:
   519                           	opt stack 0
   520  000008                     ??_vscp_getMDF_URL:
   521  000008                     ?_Read_b_eep:
   522                           	opt stack 0
   523  000008                     ?___lbmod:
   524                           	opt stack 0
   525  000008                     ?__ECANPointBuffer:
   526                           	opt stack 0
   527  000008                     ?_vscp_getFamilyCode:
   528                           	opt stack 0
   529  000008                     ?_vscp_getFamilyType:
   530                           	opt stack 0
   531  000008                     vscp_getMatrixInfo@i:
   532                           	opt stack 0
   533  000008                     ECANSetOperationMode@mode:
   534                           	opt stack 0
   535  000008                     OpenTimer0@config:
   536                           	opt stack 0
   537  000008                     ___lbmod@divisor:
   538                           	opt stack 0
   539  000008                     __CANIDToRegs@ptr:
   540                           	opt stack 0
   541  000008                     __RegsToCANID@ptr:
   542                           	opt stack 0
   543  000008                     Read_b_eep@badd:
   544                           	opt stack 0
   545  000008                     Write_b_eep@badd:
   546                           	opt stack 0
   547  000008                     WriteTimer0@timer0:
   548                           	opt stack 0
   549                           
   550                           ; 2 bytes @ 0x7
   551  000008                     	ds	1
   552  000009                     vscp_getMDF_URL@idx:
   553                           	opt stack 0
   554  000009                     ___lbmod@dividend:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x8
   558  000009                     	ds	1
   559  00000A                     vscp_getGUID@idx:
   560                           	opt stack 0
   561  00000A                     vscp_getUserID@idx:
   562                           	opt stack 0
   563  00000A                     vscp_getManufacturerId@idx:
   564                           	opt stack 0
   565  00000A                     __RegsToCANID@val:
   566                           	opt stack 0
   567  00000A                     Write_b_eep@bdat:
   568                           	opt stack 0
   569  00000A                     ___lbmod@counter:
   570                           	opt stack 0
   571  00000A                     WriteTimer0@timer:
   572                           	opt stack 0
   573  00000A                     __CANIDToRegs@val:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x9
   577  00000A                     	ds	1
   578  00000B                     __RegsToCANID@type:
   579                           	opt stack 0
   580  00000B                     __ECANPointBuffer@b:
   581                           	opt stack 0
   582  00000B                     Write_b_eep@GIE_BIT_VAL:
   583                           	opt stack 0
   584  00000B                     ___lbmod@rem:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0xA
   588  00000B                     	ds	1
   589  00000C                     ??_init_app_eeprom:
   590  00000C                     ??__RegsToCANID:
   591  00000C                     ??_vscp_readStdReg:
   592  00000C                     ?_vscp_setGUID:
   593                           	opt stack 0
   594  00000C                     ?_vscp_setManufacturerId:
   595                           	opt stack 0
   596  00000C                     ?_vscp_setUserID:
   597                           	opt stack 0
   598  00000C                     vscp_setGUID@data:
   599                           	opt stack 0
   600  00000C                     vscp_setManufacturerId@data:
   601                           	opt stack 0
   602  00000C                     vscp_writeNicknamePermanent@nickname:
   603                           	opt stack 0
   604  00000C                     vscp_setUserID@data:
   605                           	opt stack 0
   606  00000C                     vscp_setSegmentCRC@crc:
   607                           	opt stack 0
   608  00000C                     vscp_setControlByte@ctrl:
   609                           	opt stack 0
   610  00000C                     vscp_goBootloaderMode@algorithm:
   611                           	opt stack 0
   612  00000C                     __ECANPointBuffer@pt:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0xB
   616  00000C                     	ds	1
   617  00000D                     vscp_setGUID@idx:
   618                           	opt stack 0
   619  00000D                     vscp_setManufacturerId@idx:
   620                           	opt stack 0
   621  00000D                     vscp_setUserID@idx:
   622                           	opt stack 0
   623  00000D                     vscp_handleDropNickname@bytes:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0xC
   627  00000D                     	ds	1
   628  00000E                     init_app_eeprom@j:
   629                           	opt stack 0
   630  00000E                     __CANIDToRegs@type:
   631                           	opt stack 0
   632  00000E                     __RegsToCANID@Value:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0xD
   636  00000E                     	ds	1
   637  00000F                     ??__CANIDToRegs:
   638  00000F                     ?_ECANReceiveMessage:
   639                           	opt stack 0
   640  00000F                     init_app_eeprom@i:
   641                           	opt stack 0
   642  00000F                     readControlReg@ctrlreg:
   643                           	opt stack 0
   644  00000F                     ECANReceiveMessage@data:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0xE
   648  00000F                     	ds	1
   649  000010                     ?_vscp_writeStdReg:
   650                           	opt stack 0
   651  000010                     readControlReg@rv:
   652                           	opt stack 0
   653  000010                     ECANReceiveMessage@dataLen:
   654                           	opt stack 0
   655  000010                     vscp_writeStdReg@value:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0xF
   659  000010                     	ds	1
   660  000011                     ??_vscp_writeStdReg:
   661  000011                     ?_writeControlReg:
   662                           	opt stack 0
   663  000011                     vscp_readAppReg@rv:
   664                           	opt stack 0
   665  000011                     writeControlReg@val:
   666                           	opt stack 0
   667  000011                     ECANReceiveMessage@msgFlags:
   668                           	opt stack 0
   669  000011                     __CANIDToRegs@Value:
   670                           	opt stack 0
   671  000011                     vscp_readStdReg@code:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x10
   675  000011                     	ds	1
   676  000012                     ??_writeControlReg:
   677  000012                     ?_ECANSendMessage:
   678                           	opt stack 0
   679  000012                     vscp_readAppReg@reg:
   680                           	opt stack 0
   681  000012                     ECANReceiveMessage@savedPtr:
   682                           	opt stack 0
   683  000012                     ECANSendMessage@id:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x11
   687  000012                     	ds	1
   688  000013                     writeControlReg@ctrlreg:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x12
   692  000013                     	ds	1
   693  000014                     writeControlReg@rv:
   694                           	opt stack 0
   695  000014                     ECANReceiveMessage@id:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x13
   699  000014                     	ds	1
   700  000015                     ?_vscp_writeAppReg:
   701                           	opt stack 0
   702  000015                     vscp_writeAppReg@val:
   703                           	opt stack 0
   704  000015                     ECANReceiveMessage@i:
   705                           	opt stack 0
   706  000015                     vscp_writeStdReg@rv:
   707                           	opt stack 0
   708  000015                     vscp_readStdReg@code_1117:
   709                           	opt stack 0
   710                           
   711                           ; 4 bytes @ 0x14
   712  000015                     	ds	1
   713  000016                     vscp_writeAppReg@rv:
   714                           	opt stack 0
   715  000016                     ECANReceiveMessage@mode:
   716                           	opt stack 0
   717  000016                     vscp_writeStdReg@reg:
   718                           	opt stack 0
   719  000016                     ECANSendMessage@data:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x15
   723  000016                     	ds	1
   724  000017                     vscp_writeAppReg@reg:
   725                           	opt stack 0
   726  000017                     ECANReceiveMessage@temp:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x16
   730  000017                     	ds	1
   731  000018                     ?_vscp_writeRegister:
   732                           	opt stack 0
   733  000018                     ECANSendMessage@dataLen:
   734                           	opt stack 0
   735  000018                     vscp_writeRegister@value:
   736                           	opt stack 0
   737  000018                     ECANReceiveMessage@ptr:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x17
   741  000018                     	ds	1
   742  000019                     ECANSendMessage@msgFlags:
   743                           	opt stack 0
   744  000019                     vscp_readStdReg@idx:
   745                           	opt stack 0
   746  000019                     vscp_writeRegister@reg:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x18
   750  000019                     	ds	1
   751  00001A                     ??_ECANSendMessage:
   752  00001A                     ?_getCANFrame:
   753                           	opt stack 0
   754  00001A                     getCANFrame@pdlc:
   755                           	opt stack 0
   756  00001A                     vscp_readStdReg@idx_1118:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x19
   760  00001A                     	ds	1
   761  00001B                     getCANFrame@pdata:
   762                           	opt stack 0
   763  00001B                     vscp_readStdReg@rv:
   764                           	opt stack 0
   765  00001B                     ECANSendMessage@pb:
   766                           	opt stack 0
   767                           
   768                           ; 18 bytes @ 0x1A
   769  00001B                     	ds	1
   770  00001C                     getCANFrame@pid:
   771                           	opt stack 0
   772  00001C                     vscp_readStdReg@reg:
   773                           	opt stack 0
   774                           
   775                           ; 1 bytes @ 0x1B
   776  00001C                     	ds	1
   777  00001D                     getCANFrame@flags:
   778                           	opt stack 0
   779  00001D                     vscp_readRegister@reg:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x1C
   783  00001D                     	ds	1
   784  00001E                     ?_getVSCPFrame:
   785                           	opt stack 0
   786  00001E                     getVSCPFrame@pvscptype:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x1D
   790  00001E                     	ds	1
   791  00001F                     getVSCPFrame@pNodeId:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x1E
   795  00001F                     	ds	1
   796  000020                     getVSCPFrame@pPriority:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x1F
   800  000020                     	ds	1
   801  000021                     getVSCPFrame@pSize:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x20
   805  000021                     	ds	1
   806  000022                     getVSCPFrame@pData:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x21
   810  000022                     	ds	1
   811  000023                     ??_getVSCPFrame:
   812                           
   813                           ; 0 bytes @ 0x22
   814  000023                     	ds	4
   815  000027                     getVSCPFrame@pvscpclass:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x26
   819  000027                     	ds	1
   820  000028                     getVSCPFrame@id:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x27
   824  000028                     	ds	4
   825  00002C                     vscp_getEvent@rv:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x2B
   829  00002C                     	ds	1
   830  00002D                     ECANSendMessage@mode:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x2C
   834  00002D                     	ds	1
   835  00002E                     ECANSendMessage@buffers:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x2D
   839  00002E                     	ds	1
   840  00002F                     ECANSendMessage@j:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x2E
   844  00002F                     	ds	1
   845  000030                     ECANSendMessage@tempBSEL0:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x2F
   849  000030                     	ds	1
   850  000031                     ECANSendMessage@tempPtr:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x30
   854  000031                     	ds	2
   855  000033                     ECANSendMessage@temp:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x32
   859  000033                     	ds	1
   860  000034                     ECANSendMessage@i:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x33
   864  000034                     	ds	1
   865  000035                     ECANSendMessage@ptr:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x34
   869  000035                     	ds	2
   870  000037                     ?_sendCANFrame:
   871                           	opt stack 0
   872  000037                     sendCANFrame@id:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x36
   876  000037                     	ds	4
   877  00003B                     sendCANFrame@dlc:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x3A
   881  00003B                     	ds	1
   882  00003C                     sendCANFrame@pdata:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x3B
   886  00003C                     	ds	2
   887  00003E                     sendCANFrame@rv:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x3D
   891  00003E                     	ds	1
   892  00003F                     ?_sendVSCPFrame:
   893                           	opt stack 0
   894  00003F                     sendVSCPFrame@vscpclass:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x3E
   898  00003F                     	ds	2
   899  000041                     sendVSCPFrame@vscptype:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x40
   903  000041                     	ds	1
   904  000042                     sendVSCPFrame@nodeid:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x41
   908  000042                     	ds	1
   909  000043                     sendVSCPFrame@priority:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x42
   913  000043                     	ds	1
   914  000044                     sendVSCPFrame@size:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x43
   918  000044                     	ds	1
   919  000045                     sendVSCPFrame@pData:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x44
   923  000045                     	ds	2
   924  000047                     sendVSCPFrame@id:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x46
   928  000047                     	ds	4
   929  00004B                     SendInformationEvent@data:
   930                           	opt stack 0
   931                           
   932                           ; 3 bytes @ 0x4A
   933  00004B                     	ds	1
   934  00004C                     ??_vscp_newNodeOnline:
   935  00004C                     vscp_sendHeartBeat@zone:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x4B
   939  00004C                     	ds	1
   940  00004D                     ??_vscp_doOneSecondWork:
   941                           
   942                           ; 0 bytes @ 0x4C
   943  00004D                     	ds	1
   944  00004E                     SendInformationEvent@idx:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x4D
   948  00004E                     	ds	1
   949  00004F                     ?_actionSet:
   950                           	opt stack 0
   951  00004F                     ?_actionClr:
   952                           	opt stack 0
   953  00004F                     ?_actionSetAll:
   954                           	opt stack 0
   955  00004F                     ?_actionClrAll:
   956                           	opt stack 0
   957  00004F                     actionSet@param:
   958                           	opt stack 0
   959  00004F                     actionClr@param:
   960                           	opt stack 0
   961  00004F                     
   962                           ; 1 bytes @ 0x4E
   963  00004F                     	ds	1
   964  000050                     actionSetAll@i:
   965                           	opt stack 0
   966  000050                     actionClrAll@i:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x4F
   970  000050                     	ds	2
   971  000052                     postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           
   974                           ; 0 bytes @ 0x51
   975 ;;
   976 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   977 ;;
   978 ;; *************** function _main *****************
   979 ;; Defined at:
   980 ;;		line 167 in file "../main.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;		None               void
   987 ;; Registers used:
   988 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : F/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels required when called:    9
  1000 ;; This function calls:
  1001 ;;		_init
  1002 ;;		_vscp_check_pstorage
  1003 ;;		_init_app_eeprom
  1004 ;;		_init_app_ram
  1005 ;;		_vscp_init
  1006 ;;		_Read_b_eep
  1007 ;;		_writeControlReg
  1008 ;;		_Busy_eep
  1009 ;;		_Write_b_eep
  1010 ;;		_vscp_getEvent
  1011 ;;		_vscp_goActiveState
  1012 ;;		_vscp_handleProbeState
  1013 ;;		_vscp_handleProtocolEvent
  1014 ;;		_doDM
  1015 ;;		_vscp_error
  1016 ;;		_vscp_doOneSecondWork
  1017 ;;		_doApplicationOneSecondWork
  1018 ;;		_doWork
  1019 ;; This function is called by:
  1020 ;;		Startup code after reset
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text0
  1025  002286                     __ptext0:
  1026                           	opt stack 0
  1027  002286                     _main:
  1028                           	opt stack 22
  1029                           
  1030                           ;main.c: 168: init();
  1031                           
  1032                           ;incstack = 0
  1033                           ;incstack = 0
  1034  002286  EC89  F016         	call	_init	;wreg free
  1035                           
  1036                           ;main.c: 172: if ( !vscp_check_pstorage() ) {
  1037  00228A  ECAA  F017         	call	_vscp_check_pstorage	;wreg free
  1038  00228E  0900               	iorlw	0
  1039  002290  E104               	bnz	l7102
  1040                           
  1041                           ;main.c: 175: init_app_eeprom();
  1042  002292  EC8F  F013         	call	_init_app_eeprom	;wreg free
  1043                           
  1044                           ;main.c: 176: init_app_ram();
  1045  002296  EC83  F018         	call	_init_app_ram	;wreg free
  1046  00229A                     l7102:
  1047                           
  1048                           ;main.c: 179: }
  1049                           ;main.c: 181: vscp_init();
  1050  00229A  EC0A  F016         	call	_vscp_init	;wreg free
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;main.c: 184: writeControlReg( 0, Read_b_eep(0x21 + 2) );
  1054  00229E  6A09               	clrf	?_Read_b_eep+1,c
  1055  0022A0  0E23               	movlw	35
  1056  0022A2  6E08               	movwf	?_Read_b_eep,c
  1057  0022A4  EC21  F018         	call	_Read_b_eep	;wreg free
  1058  0022A8  6E11               	movwf	?_writeControlReg,c
  1059  0022AA  0E00               	movlw	0
  1060  0022AC  ECD7  F00D         	call	_writeControlReg
  1061                           
  1062                           ;main.c: 185: writeControlReg( 1, Read_b_eep(0x21 + 3) );
  1063  0022B0  6A09               	clrf	?_Read_b_eep+1,c
  1064  0022B2  0E24               	movlw	36
  1065  0022B4  6E08               	movwf	?_Read_b_eep,c
  1066  0022B6  EC21  F018         	call	_Read_b_eep	;wreg free
  1067  0022BA  6E11               	movwf	?_writeControlReg,c
  1068  0022BC  0E01               	movlw	1
  1069  0022BE  ECD7  F00D         	call	_writeControlReg
  1070                           
  1071                           ;main.c: 186: writeControlReg( 2, Read_b_eep(0x21 + 4) );
  1072  0022C2  6A09               	clrf	?_Read_b_eep+1,c
  1073  0022C4  0E25               	movlw	37
  1074  0022C6  6E08               	movwf	?_Read_b_eep,c
  1075  0022C8  EC21  F018         	call	_Read_b_eep	;wreg free
  1076  0022CC  6E11               	movwf	?_writeControlReg,c
  1077  0022CE  0E02               	movlw	2
  1078  0022D0  ECD7  F00D         	call	_writeControlReg
  1079  0022D4                     l147:
  1080  0022D4  0004               	clrwdt		;# 
  1081                           
  1082                           ;main.c: 192: if ( ( vscp_initbtncnt > 250 ) &&
  1083                           ;main.c: 193: ( 0x01 != vscp_node_state ) ) {
  1084  0022D6  0EFA               	movlw	250
  1085  0022D8  0100               	movlb	0	; () banked
  1086  0022DA  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1087  0022DC  D00E               	goto	l7122
  1088                           
  1089                           ; BSR set to: 0
  1090  0022DE  0571               	decf	_vscp_node_state& (0+255),w,b
  1091  0022E0  E00C               	bz	l7122
  1092                           
  1093                           ; BSR set to: 0
  1094                           ;main.c: 196: vscp_nickname = 0xff;
  1095  0022E2  6970               	setf	_vscp_nickname& (0+255),b
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;main.c: 197: (Busy_eep(), Write_b_eep(0x01,0xff));
  1099  0022E4  ECC0  F018         	call	_Busy_eep	;wreg free
  1100  0022E8  6A09               	clrf	?_Write_b_eep+1,c
  1101  0022EA  0E01               	movlw	1
  1102  0022EC  6E08               	movwf	?_Write_b_eep,c
  1103  0022EE  0EFF               	movlw	255
  1104  0022F0  680A               	setf	?_Write_b_eep+2,c
  1105  0022F2  EC6C  F016         	call	_Write_b_eep	;wreg free
  1106                           
  1107                           ;main.c: 198: vscp_init();
  1108  0022F6  EC0A  F016         	call	_vscp_init	;wreg free
  1109  0022FA                     l7122:
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;main.c: 200: }
  1113                           ;main.c: 203: vscp_imsg.flags = 0;
  1114  0022FA  6B75               	clrf	_vscp_imsg& (0+255),b
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 204: vscp_getEvent();
  1118  0022FC  ECEC  F016         	call	_vscp_getEvent	;wreg free
  1119                           
  1120                           ;main.c: 206: switch ( vscp_node_state ) {
  1121  002300  D01C               	goto	l7146
  1122  002302                     l7126:
  1123                           
  1124                           ; BSR set to: 0
  1125                           ;main.c: 211: if (0xff == vscp_nickname) {
  1126  002302  2970               	incf	_vscp_nickname& (0+255),w,b
  1127  002304  E103               	bnz	l7130
  1128                           
  1129                           ; BSR set to: 0
  1130                           ;main.c: 213: vscp_node_state = 0x01;
  1131  002306  0E01               	movlw	1
  1132  002308  6F71               	movwf	_vscp_node_state& (0+255),b
  1133                           
  1134                           ;main.c: 214: } else {
  1135  00230A  D023               	goto	l7148
  1136  00230C                     l7130:
  1137                           
  1138                           ; BSR set to: 0
  1139                           ;main.c: 216: vscp_node_state = 0x03;
  1140  00230C  0E03               	movlw	3
  1141  00230E  6F71               	movwf	_vscp_node_state& (0+255),b
  1142  002310                     l7132:
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;main.c: 217: vscp_goActiveState();
  1146  002310  ECE7  F017         	call	_vscp_goActiveState	;wreg free
  1147  002314  D01E               	goto	l7148
  1148  002316                     l7134:
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;main.c: 222: vscp_handleProbeState();
  1152  002316  ECF4  F013         	call	_vscp_handleProbeState	;wreg free
  1153                           
  1154                           ;main.c: 223: break;
  1155  00231A  D01B               	goto	l7148
  1156  00231C                     l156:
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 232: if (vscp_imsg.flags & 0x80) {
  1160  00231C  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1161  00231E  D019               	goto	l7148
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;main.c: 234: if ( 0 == vscp_imsg.vscp_class ) {
  1165  002320  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1166  002322  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1167  002324  B4D8               	btfsc	status,2,c
  1168                           
  1169                           ; BSR set to: 0
  1170                           ;main.c: 237: vscp_handleProtocolEvent();
  1171  002326  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1172                           
  1173                           ;main.c: 239: }
  1174                           ;main.c: 241: doDM();
  1175  00232A  ECAA  F00A         	call	_doDM	;wreg free
  1176  00232E  D011               	goto	l7148
  1177  002330                     l7142:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;main.c: 247: vscp_error();
  1181  002330  ECC3  F018         	call	_vscp_error	;wreg free
  1182                           
  1183                           ;main.c: 248: break;
  1184  002334  D00E               	goto	l7148
  1185  002336                     l160:
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 251: vscp_node_state = 0x00;
  1189  002336  6B71               	clrf	_vscp_node_state& (0+255),b
  1190                           
  1191                           ;main.c: 252: break;
  1192  002338  D00C               	goto	l7148
  1193  00233A                     l7146:
  1194  00233A  0100               	movlb	0	; () banked
  1195  00233C  5171               	movf	_vscp_node_state& (0+255),w,b
  1196                           
  1197                           ; Switch size 1, requested type "speed"
  1198                           ; Number of cases is 5, Range of values is 0 to 4
  1199                           ; switch strategies available:
  1200                           ; Name         Instructions Cycles
  1201                           ; simple_byte           16     9 (average)
  1202                           ;	Chosen strategy is simple_byte
  1203  00233E  E0E1               	bz	l7126
  1204  002340  0A01               	xorlw	1	; case 1
  1205  002342  E0E9               	bz	l7134
  1206  002344  0A03               	xorlw	3	; case 2
  1207  002346  E0E4               	bz	l7132
  1208  002348  0A01               	xorlw	1	; case 3
  1209  00234A  E0E8               	bz	l156
  1210  00234C  0A07               	xorlw	7	; case 4
  1211  00234E  E0F0               	bz	l7142
  1212  002350  D7F2               	goto	l160
  1213  002352                     l7148:
  1214                           
  1215                           ;main.c: 257: if ( measurement_clock > 1000 ) {
  1216  002352  0EE9               	movlw	233
  1217  002354  0100               	movlb	0	; () banked
  1218  002356  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1219  002358  0E03               	movlw	3
  1220  00235A  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1221  00235C  0E00               	movlw	0
  1222  00235E  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1223  002360  0E00               	movlw	0
  1224  002362  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1225  002364  E30C               	bnc	l7160
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 259: measurement_clock = 0;
  1229  002366  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1230  002368  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1231  00236A  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1232  00236C  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 261: sendTimer++;
  1236  00236E  2A55               	incf	_sendTimer,f,c
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;main.c: 264: vscp_doOneSecondWork();
  1240  002370  ECE2  F015         	call	_vscp_doOneSecondWork	;wreg free
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 268: if ( 0x03 == vscp_node_state ) {
  1244  002374  5171               	movf	_vscp_node_state& (0+255),w,b
  1245  002376  0A03               	xorlw	3
  1246  002378  B4D8               	btfsc	status,2,c
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;main.c: 271: doApplicationOneSecondWork();
  1250  00237A  ECC6  F018         	call	_doApplicationOneSecondWork	;wreg free
  1251  00237E                     l7160:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 273: }
  1255                           ;main.c: 275: }
  1256                           ;main.c: 278: if ( seconds > 59 ) {
  1257  00237E  0E3B               	movlw	59
  1258  002380  656A               	cpfsgt	_seconds& (0+255),b
  1259  002382  D00B               	goto	l7176
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;main.c: 280: seconds = 0;
  1263  002384  6B6A               	clrf	_seconds& (0+255),b
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 281: minutes++;
  1267  002386  2B69               	incf	_minutes& (0+255),f,b
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 283: if ( minutes > 59 ) {
  1271  002388  0E3B               	movlw	59
  1272  00238A  6569               	cpfsgt	_minutes& (0+255),b
  1273  00238C  D002               	goto	l7172
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 284: minutes = 0;
  1277  00238E  6B69               	clrf	_minutes& (0+255),b
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 285: hours++;
  1281  002390  2B68               	incf	_hours& (0+255),f,b
  1282  002392                     l7172:
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;main.c: 286: }
  1286                           ;main.c: 288: if ( hours > 23 ) hours = 0;
  1287  002392  0E17               	movlw	23
  1288  002394  6568               	cpfsgt	_hours& (0+255),b
  1289  002396  D001               	goto	l7176
  1290                           
  1291                           ; BSR set to: 0
  1292  002398  6B68               	clrf	_hours& (0+255),b
  1293  00239A                     l7176:
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;main.c: 290: }
  1297                           ;main.c: 292: doWork();
  1298  00239A  ECC5  F018         	call	_doWork	;wreg free
  1299  00239E  D79A               	goto	l147
  1300  0023A0                     __end_of_main:
  1301                           	opt stack 0
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           status	equ	0xFD8
  1305                           
  1306 ;; *************** function _doWork *****************
  1307 ;; Defined at:
  1308 ;;		line 574 in file "../main.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;		None               void
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : F/0
  1319 ;;		On exit  : F/0
  1320 ;;		Unchanged: F/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    2
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_main
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text1
  1337  00318A                     __ptext1:
  1338                           	opt stack 0
  1339  00318A                     _doWork:
  1340                           	opt stack 28
  1341                           
  1342                           ; BSR set to: 0
  1343                           
  1344                           ; BSR set to: 0
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;incstack = 0
  1348                           ;incstack = 0
  1349  00318A  0012               	return	
  1350  00318C                     __end_of_doWork:
  1351                           	opt stack 0
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _doApplicationOneSecondWork *****************
  1357 ;; Defined at:
  1358 ;;		line 456 in file "../main.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		None
  1367 ;; Tracked objects:
  1368 ;;		On entry : F/0
  1369 ;;		On exit  : F/0
  1370 ;;		Unchanged: F/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    2
  1379 ;; This function calls:
  1380 ;;		Nothing
  1381 ;; This function is called by:
  1382 ;;		_main
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text2
  1387  00318C                     __ptext2:
  1388                           	opt stack 0
  1389  00318C                     _doApplicationOneSecondWork:
  1390                           	opt stack 28
  1391                           
  1392                           ; BSR set to: 0
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;incstack = 0
  1396                           ;incstack = 0
  1397  00318C  0012               	return	
  1398  00318E                     __end_of_doApplicationOneSecondWork:
  1399                           	opt stack 0
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _vscp_doOneSecondWork *****************
  1405 ;; Defined at:
  1406 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;		None
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;		None
  1411 ;; Return value:  Size  Location     Type
  1412 ;;		None               void
  1413 ;; Registers used:
  1414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : F/0
  1417 ;;		On exit  : F/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1422 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1423 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    8
  1427 ;; This function calls:
  1428 ;;		_vscp_getZone
  1429 ;;		_vscp_getSubzone
  1430 ;;		_vscp_sendHeartBeat
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text3
  1437  002BC4                     __ptext3:
  1438                           	opt stack 0
  1439  002BC4                     _vscp_doOneSecondWork:
  1440                           	opt stack 22
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;vscp_firmware.c: 526: ++vscp_second;
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;incstack = 0
  1447                           ;incstack = 0
  1448  002BC4  2B74               	incf	_vscp_second& (0+255),f,b
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  1452  002BC6  0E3B               	movlw	59
  1453  002BC8  6574               	cpfsgt	_vscp_second& (0+255),b
  1454  002BCA  D00D               	goto	l6464
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;vscp_firmware.c: 529: vscp_second = 0;
  1458  002BCC  6B74               	clrf	_vscp_second& (0+255),b
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;vscp_firmware.c: 530: vscp_minute++;
  1462  002BCE  2B6F               	incf	_vscp_minute& (0+255),f,b
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  1466  002BD0  5171               	movf	_vscp_node_state& (0+255),w,b
  1467  002BD2  0A03               	xorlw	3
  1468  002BD4  E108               	bnz	l6464
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  1472                           ;vscp_firmware.c: 535: vscp_getSubzone());
  1473  002BD6  EC9E  F018         	call	_vscp_getSubzone	;wreg free
  1474  002BDA  0100               	movlb	0	; () banked
  1475  002BDC  6FA4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1476  002BDE  ECA3  F018         	call	_vscp_getZone	;wreg free
  1477  002BE2  EC2B  F017         	call	_vscp_sendHeartBeat
  1478  002BE6                     l6464:
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;vscp_firmware.c: 536: }
  1482                           ;vscp_firmware.c: 537: }
  1483                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  1484  002BE6  0E3B               	movlw	59
  1485  002BE8  656F               	cpfsgt	_vscp_minute& (0+255),b
  1486  002BEA  D002               	goto	l6470
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;vscp_firmware.c: 540: vscp_minute = 0;
  1490  002BEC  6B6F               	clrf	_vscp_minute& (0+255),b
  1491                           
  1492                           ; BSR set to: 0
  1493                           ;vscp_firmware.c: 541: vscp_hour++;
  1494  002BEE  2B6D               	incf	_vscp_hour& (0+255),f,b
  1495  002BF0                     l6470:
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;vscp_firmware.c: 542: }
  1499                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  1500  002BF0  0E17               	movlw	23
  1501  002BF2  656D               	cpfsgt	_vscp_hour& (0+255),b
  1502  002BF4  D001               	goto	l6474
  1503                           
  1504                           ; BSR set to: 0
  1505  002BF6  6B6D               	clrf	_vscp_hour& (0+255),b
  1506  002BF8                     l6474:
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  1510  002BF8  5171               	movf	_vscp_node_state& (0+255),w,b
  1511  002BFA  0A03               	xorlw	3
  1512  002BFC  A4D8               	btfss	status,2,c
  1513  002BFE  0012               	return	
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  1517  002C00  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  1521  002C02  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1522  002C06  0E0F               	movlw	15
  1523  002C08  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1524  002C0A  0E02               	movlw	2
  1525  002C0C  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1526  002C0E  B0D8               	btfsc	status,0,c
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  1530  002C10  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1531                           
  1532                           ; BSR set to: 0
  1533  002C12  0012               	return	
  1534  002C14                     __end_of_vscp_doOneSecondWork:
  1535                           	opt stack 0
  1536                           postinc0	equ	0xFEE
  1537                           wreg	equ	0xFE8
  1538                           status	equ	0xFD8
  1539                           
  1540 ;; *************** function _vscp_sendHeartBeat *****************
  1541 ;; Defined at:
  1542 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;  zone            1    wreg     unsigned char 
  1545 ;;  subzone         1   20[BANK0 ] unsigned char 
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;  zone            1   75[COMRAM] unsigned char 
  1548 ;; Return value:  Size  Location     Type
  1549 ;;		None               void
  1550 ;; Registers used:
  1551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : F/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1557 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1558 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1560 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1561 ;;Total ram usage:        2 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    7
  1564 ;; This function calls:
  1565 ;;		_vscp_sendEvent
  1566 ;; This function is called by:
  1567 ;;		_vscp_doOneSecondWork
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text4
  1572  002E56                     __ptext4:
  1573                           	opt stack 0
  1574  002E56                     _vscp_sendHeartBeat:
  1575                           	opt stack 22
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;incstack = 0
  1579                           ;incstack = 0
  1580                           ;vscp_sendHeartBeat@zone stored from wreg
  1581  002E56  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1582                           
  1583                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  1584  002E5A  0E83               	movlw	131
  1585  002E5C  0100               	movlb	0	; () banked
  1586  002E5E  6F83               	movwf	_vscp_omsg& (0+255),b
  1587                           
  1588                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  1589  002E60  0E07               	movlw	7
  1590  002E62  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1591                           
  1592                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  1593  002E64  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1594  002E66  0E14               	movlw	20
  1595  002E68  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1596                           
  1597                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  1598  002E6A  0E09               	movlw	9
  1599  002E6C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  1603  002E6E  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  1607  002E70  C04C  F089         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  1611  002E74  C0A4  F08A         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;vscp_firmware.c: 388: vscp_sendEvent();
  1615  002E78  EF3E  F017         	goto	_vscp_sendEvent	;wreg free
  1616  002E7C                     __end_of_vscp_sendHeartBeat:
  1617                           	opt stack 0
  1618                           postinc0	equ	0xFEE
  1619                           wreg	equ	0xFE8
  1620                           status	equ	0xFD8
  1621                           
  1622 ;; *************** function _vscp_getSubzone *****************
  1623 ;; Defined at:
  1624 ;;		line 563 in file "../main.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      unsigned char 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : F/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1642 ;;Total ram usage:        0 bytes
  1643 ;; Hardware stack levels used:    1
  1644 ;; Hardware stack levels required when called:    3
  1645 ;; This function calls:
  1646 ;;		_Read_b_eep
  1647 ;; This function is called by:
  1648 ;;		_vscp_doOneSecondWork
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text5
  1653  00313C                     __ptext5:
  1654                           	opt stack 0
  1655  00313C                     _vscp_getSubzone:
  1656                           	opt stack 26
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;main.c: 564: return Read_b_eep(0x21 + 1);
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;incstack = 0
  1663                           ;incstack = 0
  1664  00313C  6A09               	clrf	?_Read_b_eep+1,c
  1665  00313E  0E22               	movlw	34
  1666  003140  6E08               	movwf	?_Read_b_eep,c
  1667  003142  EF21  F018         	goto	_Read_b_eep	;wreg free
  1668  003146                     __end_of_vscp_getSubzone:
  1669                           	opt stack 0
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function _vscp_getZone *****************
  1675 ;; Defined at:
  1676 ;;		line 554 in file "../main.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      unsigned char 
  1683 ;; Registers used:
  1684 ;;		wreg, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : F/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1694 ;;Total ram usage:        0 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    3
  1697 ;; This function calls:
  1698 ;;		_Read_b_eep
  1699 ;; This function is called by:
  1700 ;;		_vscp_doOneSecondWork
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text6
  1705  003146                     __ptext6:
  1706                           	opt stack 0
  1707  003146                     _vscp_getZone:
  1708                           	opt stack 26
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 555: return Read_b_eep(0x21 + 0);
  1712                           
  1713                           ;incstack = 0
  1714                           ;incstack = 0
  1715  003146  6A09               	clrf	?_Read_b_eep+1,c
  1716  003148  0E21               	movlw	33
  1717  00314A  6E08               	movwf	?_Read_b_eep,c
  1718  00314C  EF21  F018         	goto	_Read_b_eep	;wreg free
  1719  003150                     __end_of_vscp_getZone:
  1720                           	opt stack 0
  1721                           postinc0	equ	0xFEE
  1722                           wreg	equ	0xFE8
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _vscp_error *****************
  1726 ;; Defined at:
  1727 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;		None               void
  1734 ;; Registers used:
  1735 ;;		None
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1745 ;;Total ram usage:        0 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    2
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text7
  1756  003186                     __ptext7:
  1757                           	opt stack 0
  1758  003186                     _vscp_error:
  1759                           	opt stack 28
  1760                           
  1761                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  1762                           
  1763                           ;incstack = 0
  1764                           ;incstack = 0
  1765  003186  6A56               	clrf	_vscp_initledfunc,c
  1766  003188  0012               	return	
  1767  00318A                     __end_of_vscp_error:
  1768                           	opt stack 0
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           status	equ	0xFD8
  1772                           
  1773 ;; *************** function _doDM *****************
  1774 ;; Defined at:
  1775 ;;		line 835 in file "../main.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  class_mask      2   27[BANK0 ] unsigned short 
  1780 ;;  class_filter    2   25[BANK0 ] unsigned short 
  1781 ;;  i               1   36[BANK0 ] unsigned char 
  1782 ;;  dmflags         1   35[BANK0 ] unsigned char 
  1783 ;;  type_mask       1   30[BANK0 ] unsigned char 
  1784 ;;  type_filter     1   29[BANK0 ] unsigned char 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : F/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1795 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1796 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1797 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1798 ;;Total ram usage:       15 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    8
  1801 ;; This function calls:
  1802 ;;		_Read_b_eep
  1803 ;;		_actionSet
  1804 ;;		_actionClr
  1805 ;;		_actionSetAll
  1806 ;;		_actionClrAll
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text8
  1813  001554                     __ptext8:
  1814                           	opt stack 0
  1815  001554                     _doDM:
  1816                           	opt stack 22
  1817                           
  1818                           ;main.c: 836: unsigned char i;
  1819                           ;main.c: 837: unsigned char dmflags;
  1820                           ;main.c: 838: unsigned short class_filter;
  1821                           ;main.c: 839: unsigned short class_mask;
  1822                           ;main.c: 840: unsigned char type_filter;
  1823                           ;main.c: 841: unsigned char type_mask;
  1824                           ;main.c: 844: if ( 0 == vscp_imsg.vscp_class ) return;
  1825                           
  1826                           ;incstack = 0
  1827                           ;incstack = 0
  1828  001554  0100               	movlb	0	; () banked
  1829  001556  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1830  001558  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1831  00155A  B4D8               	btfsc	status,2,c
  1832  00155C  0012               	return	
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 846: for (i = 0; i < 8; i++) {
  1836  00155E  6BB4               	clrf	doDM@i& (0+255),b
  1837  001560                     l7616:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 849: dmflags = Read_b_eep(0x21 + 23 + 0 + 1 + (8 * i));
  1841  001560  51B4               	movf	doDM@i& (0+255),w,b
  1842  001562  6FA6               	movwf	??_doDM& (0+255),b
  1843  001564  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1844  001566  90D8               	bcf	status,0,c
  1845  001568  37A6               	rlcf	??_doDM& (0+255),f,b
  1846  00156A  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1847  00156C  90D8               	bcf	status,0,c
  1848  00156E  37A6               	rlcf	??_doDM& (0+255),f,b
  1849  001570  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1850  001572  90D8               	bcf	status,0,c
  1851  001574  37A6               	rlcf	??_doDM& (0+255),f,b
  1852  001576  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1853  001578  0E39               	movlw	57
  1854  00157A  25A6               	addwf	??_doDM& (0+255),w,b
  1855  00157C  6E08               	movwf	?_Read_b_eep,c
  1856  00157E  0E00               	movlw	0
  1857  001580  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  1858  001582  6E09               	movwf	?_Read_b_eep+1,c
  1859  001584  EC21  F018         	call	_Read_b_eep	;wreg free
  1860  001588  0100               	movlb	0	; () banked
  1861  00158A  6FB3               	movwf	doDM@dmflags& (0+255),b
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 853: if ( dmflags & 0x80 ) {
  1865  00158C  AFB3               	btfss	doDM@dmflags& (0+255),7,b
  1866  00158E  D136               	goto	l7670
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;main.c: 856: if ( ( dmflags & 0x40 ) &&
  1870                           ;main.c: 857: ( vscp_imsg.oaddr != Read_b_eep(0x21 + 23 + 0 + (8 * i)) ) ) {
  1871  001590  ADB3               	btfss	doDM@dmflags& (0+255),6,b
  1872  001592  D018               	goto	l291
  1873                           
  1874                           ; BSR set to: 0
  1875  001594  51B4               	movf	doDM@i& (0+255),w,b
  1876  001596  6FA6               	movwf	??_doDM& (0+255),b
  1877  001598  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1878  00159A  90D8               	bcf	status,0,c
  1879  00159C  37A6               	rlcf	??_doDM& (0+255),f,b
  1880  00159E  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1881  0015A0  90D8               	bcf	status,0,c
  1882  0015A2  37A6               	rlcf	??_doDM& (0+255),f,b
  1883  0015A4  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1884  0015A6  90D8               	bcf	status,0,c
  1885  0015A8  37A6               	rlcf	??_doDM& (0+255),f,b
  1886  0015AA  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  1887  0015AC  0E38               	movlw	56
  1888  0015AE  25A6               	addwf	??_doDM& (0+255),w,b
  1889  0015B0  6E08               	movwf	?_Read_b_eep,c
  1890  0015B2  0E00               	movlw	0
  1891  0015B4  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  1892  0015B6  6E09               	movwf	?_Read_b_eep+1,c
  1893  0015B8  EC21  F018         	call	_Read_b_eep	;wreg free
  1894  0015BC  0100               	movlb	0	; () banked
  1895  0015BE  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  1896  0015C0  E001 D11C          	bnz	l7670
  1897  0015C4                     l291:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 860: }
  1901                           ;main.c: 863: if ( dmflags & 0x10 ) {
  1902  0015C4  A9B3               	btfss	doDM@dmflags& (0+255),4,b
  1903  0015C6  D00B               	goto	l293
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 864: if ( 255 != vscp_imsg.data[ 1 ] ) {
  1907  0015C8  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  1908  0015CA  E009               	bz	l293
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 865: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x21 + 0) ) {
  1912  0015CC  6A09               	clrf	?_Read_b_eep+1,c
  1913  0015CE  0E21               	movlw	33
  1914  0015D0  6E08               	movwf	?_Read_b_eep,c
  1915  0015D2  EC21  F018         	call	_Read_b_eep	;wreg free
  1916  0015D6  0100               	movlb	0	; () banked
  1917  0015D8  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  1918  0015DA  E001 D10F          	bnz	l7670
  1919  0015DE                     l293:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 867: }
  1923                           ;main.c: 868: }
  1924                           ;main.c: 869: }
  1925                           ;main.c: 872: if ( dmflags & 0x08 ) {
  1926  0015DE  A7B3               	btfss	doDM@dmflags& (0+255),3,b
  1927  0015E0  D00B               	goto	l7638
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;main.c: 873: if ( 255 != vscp_imsg.data[ 2 ] ) {
  1931  0015E2  297D               	incf	(_vscp_imsg+8)& (0+255),w,b
  1932  0015E4  E009               	bz	l7638
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 874: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x21 + 0) ) {
  1936  0015E6  6A09               	clrf	?_Read_b_eep+1,c
  1937  0015E8  0E21               	movlw	33
  1938  0015EA  6E08               	movwf	?_Read_b_eep,c
  1939  0015EC  EC21  F018         	call	_Read_b_eep	;wreg free
  1940  0015F0  0100               	movlb	0	; () banked
  1941  0015F2  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  1942  0015F4  E001 D102          	bnz	l7670
  1943  0015F8                     l7638:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;main.c: 876: }
  1947                           ;main.c: 877: }
  1948                           ;main.c: 878: }
  1949                           ;main.c: 880: class_filter = ( dmflags & 0x01)*256 +
  1950                           ;main.c: 881: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 3);
  1951  0015F8  51B4               	movf	doDM@i& (0+255),w,b
  1952  0015FA  0D08               	mullw	8
  1953  0015FC  0E3B               	movlw	59
  1954  0015FE  24F3               	addwf	prodl,w,c
  1955  001600  6E08               	movwf	?_Read_b_eep,c
  1956  001602  0E00               	movlw	0
  1957  001604  20F4               	addwfc	prodh,w,c
  1958  001606  6E09               	movwf	?_Read_b_eep+1,c
  1959  001608  EC21  F018         	call	_Read_b_eep	;wreg free
  1960  00160C  0100               	movlb	0	; () banked
  1961  00160E  6FA6               	movwf	??_doDM& (0+255),b
  1962  001610  51B3               	movf	doDM@dmflags& (0+255),w,b
  1963  001612  0B01               	andlw	1
  1964  001614  6FA8               	movwf	(??_doDM+2)& (0+255),b
  1965  001616  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1966  001618  51A6               	movf	??_doDM& (0+255),w,b
  1967  00161A  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  1968  00161C  6FA9               	movwf	doDM@class_filter& (0+255),b
  1969  00161E  0E00               	movlw	0
  1970  001620  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  1971  001622  6FAA               	movwf	(doDM@class_filter+1)& (0+255),b
  1972                           
  1973                           ;main.c: 885: class_mask = ( dmflags & 0x02)*256 +
  1974                           ;main.c: 886: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 2);
  1975  001624  51B4               	movf	doDM@i& (0+255),w,b
  1976  001626  0D08               	mullw	8
  1977  001628  0E3A               	movlw	58
  1978  00162A  24F3               	addwf	prodl,w,c
  1979  00162C  6E08               	movwf	?_Read_b_eep,c
  1980  00162E  0E00               	movlw	0
  1981  001630  20F4               	addwfc	prodh,w,c
  1982  001632  6E09               	movwf	?_Read_b_eep+1,c
  1983  001634  EC21  F018         	call	_Read_b_eep	;wreg free
  1984  001638  0100               	movlb	0	; () banked
  1985  00163A  6FA6               	movwf	??_doDM& (0+255),b
  1986  00163C  51B3               	movf	doDM@dmflags& (0+255),w,b
  1987  00163E  0B02               	andlw	2
  1988  001640  6FA8               	movwf	(??_doDM+2)& (0+255),b
  1989  001642  6BA7               	clrf	(??_doDM+1)& (0+255),b
  1990  001644  51A6               	movf	??_doDM& (0+255),w,b
  1991  001646  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  1992  001648  6FAB               	movwf	doDM@class_mask& (0+255),b
  1993  00164A  0E00               	movlw	0
  1994  00164C  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  1995  00164E  6FAC               	movwf	(doDM@class_mask+1)& (0+255),b
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 890: type_filter = Read_b_eep(0x21 + 23 + 0 + (8 * i) + 5);
  1999  001650  51B4               	movf	doDM@i& (0+255),w,b
  2000  001652  6FA6               	movwf	??_doDM& (0+255),b
  2001  001654  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2002  001656  90D8               	bcf	status,0,c
  2003  001658  37A6               	rlcf	??_doDM& (0+255),f,b
  2004  00165A  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2005  00165C  90D8               	bcf	status,0,c
  2006  00165E  37A6               	rlcf	??_doDM& (0+255),f,b
  2007  001660  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2008  001662  90D8               	bcf	status,0,c
  2009  001664  37A6               	rlcf	??_doDM& (0+255),f,b
  2010  001666  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2011  001668  0E3D               	movlw	61
  2012  00166A  25A6               	addwf	??_doDM& (0+255),w,b
  2013  00166C  6E08               	movwf	?_Read_b_eep,c
  2014  00166E  0E00               	movlw	0
  2015  001670  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2016  001672  6E09               	movwf	?_Read_b_eep+1,c
  2017  001674  EC21  F018         	call	_Read_b_eep	;wreg free
  2018  001678  0100               	movlb	0	; () banked
  2019  00167A  6FAD               	movwf	doDM@type_filter& (0+255),b
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;main.c: 894: type_mask = Read_b_eep(0x21 + 23 + 0 + (8 * i) + 4);
  2023  00167C  51B4               	movf	doDM@i& (0+255),w,b
  2024  00167E  6FA6               	movwf	??_doDM& (0+255),b
  2025  001680  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2026  001682  90D8               	bcf	status,0,c
  2027  001684  37A6               	rlcf	??_doDM& (0+255),f,b
  2028  001686  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2029  001688  90D8               	bcf	status,0,c
  2030  00168A  37A6               	rlcf	??_doDM& (0+255),f,b
  2031  00168C  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2032  00168E  90D8               	bcf	status,0,c
  2033  001690  37A6               	rlcf	??_doDM& (0+255),f,b
  2034  001692  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2035  001694  0E3C               	movlw	60
  2036  001696  25A6               	addwf	??_doDM& (0+255),w,b
  2037  001698  6E08               	movwf	?_Read_b_eep,c
  2038  00169A  0E00               	movlw	0
  2039  00169C  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2040  00169E  6E09               	movwf	?_Read_b_eep+1,c
  2041  0016A0  EC21  F018         	call	_Read_b_eep	;wreg free
  2042  0016A4  0100               	movlb	0	; () banked
  2043  0016A6  6FAE               	movwf	doDM@type_mask& (0+255),b
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;main.c: 899: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2047                           ;main.c: 900: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2048  0016A8  EE20  F077         	lfsr	2,_vscp_imsg+2
  2049  0016AC  CFDE F0A6          	movff	postinc2,??_doDM
  2050  0016B0  CFDD F0A7          	movff	postdec2,??_doDM+1
  2051  0016B4  51A9               	movf	doDM@class_filter& (0+255),w,b
  2052  0016B6  1BA6               	xorwf	??_doDM& (0+255),f,b
  2053  0016B8  51AA               	movf	(doDM@class_filter+1)& (0+255),w,b
  2054  0016BA  1BA7               	xorwf	(??_doDM+1)& (0+255),f,b
  2055  0016BC  51AB               	movf	doDM@class_mask& (0+255),w,b
  2056  0016BE  17A6               	andwf	??_doDM& (0+255),f,b
  2057  0016C0  51AC               	movf	(doDM@class_mask+1)& (0+255),w,b
  2058  0016C2  17A7               	andwf	(??_doDM+1)& (0+255),f,b
  2059  0016C4  51A7               	movf	(??_doDM+1)& (0+255),w,b
  2060  0016C6  11A6               	iorwf	??_doDM& (0+255),w,b
  2061  0016C8  E001 D098          	bnz	l7670
  2062                           
  2063                           ; BSR set to: 0
  2064  0016CC  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2065  0016CE  19AD               	xorwf	doDM@type_filter& (0+255),w,b
  2066  0016D0  15AE               	andwf	doDM@type_mask& (0+255),w,b
  2067  0016D2  E075               	bz	l7668
  2068  0016D4  D093               	goto	l7670
  2069  0016D6                     l7650:
  2070                           
  2071                           ;main.c: 911: actionSet( dmflags,
  2072                           ;main.c: 912: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2073  0016D6  0100               	movlb	0	; () banked
  2074  0016D8  51B4               	movf	doDM@i& (0+255),w,b
  2075  0016DA  6FA6               	movwf	??_doDM& (0+255),b
  2076  0016DC  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2077  0016DE  90D8               	bcf	status,0,c
  2078  0016E0  37A6               	rlcf	??_doDM& (0+255),f,b
  2079  0016E2  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2080  0016E4  90D8               	bcf	status,0,c
  2081  0016E6  37A6               	rlcf	??_doDM& (0+255),f,b
  2082  0016E8  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2083  0016EA  90D8               	bcf	status,0,c
  2084  0016EC  37A6               	rlcf	??_doDM& (0+255),f,b
  2085  0016EE  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2086  0016F0  0E3F               	movlw	63
  2087  0016F2  25A6               	addwf	??_doDM& (0+255),w,b
  2088  0016F4  6E08               	movwf	?_Read_b_eep,c
  2089  0016F6  0E00               	movlw	0
  2090  0016F8  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2091  0016FA  6E09               	movwf	?_Read_b_eep+1,c
  2092  0016FC  EC21  F018         	call	_Read_b_eep	;wreg free
  2093  001700  0100               	movlb	0	; () banked
  2094  001702  6FAF               	movwf	_doDM$1998& (0+255),b
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;main.c: 911: actionSet( dmflags,
  2098                           ;main.c: 912: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2099  001704  C0AF  F04F         	movff	_doDM$1998,?_actionSet
  2100  001708  51B3               	movf	doDM@dmflags& (0+255),w,b
  2101  00170A  EC27  F013         	call	_actionSet
  2102                           
  2103                           ;main.c: 915: break;
  2104  00170E  D076               	goto	l7670
  2105  001710                     l7654:
  2106                           
  2107                           ;main.c: 918: actionClr( dmflags,
  2108                           ;main.c: 919: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2109  001710  0100               	movlb	0	; () banked
  2110  001712  51B4               	movf	doDM@i& (0+255),w,b
  2111  001714  6FA6               	movwf	??_doDM& (0+255),b
  2112  001716  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2113  001718  90D8               	bcf	status,0,c
  2114  00171A  37A6               	rlcf	??_doDM& (0+255),f,b
  2115  00171C  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2116  00171E  90D8               	bcf	status,0,c
  2117  001720  37A6               	rlcf	??_doDM& (0+255),f,b
  2118  001722  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2119  001724  90D8               	bcf	status,0,c
  2120  001726  37A6               	rlcf	??_doDM& (0+255),f,b
  2121  001728  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2122  00172A  0E3F               	movlw	63
  2123  00172C  25A6               	addwf	??_doDM& (0+255),w,b
  2124  00172E  6E08               	movwf	?_Read_b_eep,c
  2125  001730  0E00               	movlw	0
  2126  001732  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2127  001734  6E09               	movwf	?_Read_b_eep+1,c
  2128  001736  EC21  F018         	call	_Read_b_eep	;wreg free
  2129  00173A  0100               	movlb	0	; () banked
  2130  00173C  6FB0               	movwf	_doDM$1999& (0+255),b
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;main.c: 918: actionClr( dmflags,
  2134                           ;main.c: 919: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2135  00173E  C0B0  F04F         	movff	_doDM$1999,?_actionClr
  2136  001742  51B3               	movf	doDM@dmflags& (0+255),w,b
  2137  001744  ECBF  F012         	call	_actionClr
  2138                           
  2139                           ;main.c: 922: break;
  2140  001748  D059               	goto	l7670
  2141  00174A                     l7658:
  2142                           
  2143                           ;main.c: 925: actionSetAll( dmflags,
  2144                           ;main.c: 926: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2145  00174A  0100               	movlb	0	; () banked
  2146  00174C  51B4               	movf	doDM@i& (0+255),w,b
  2147  00174E  6FA6               	movwf	??_doDM& (0+255),b
  2148  001750  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2149  001752  90D8               	bcf	status,0,c
  2150  001754  37A6               	rlcf	??_doDM& (0+255),f,b
  2151  001756  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2152  001758  90D8               	bcf	status,0,c
  2153  00175A  37A6               	rlcf	??_doDM& (0+255),f,b
  2154  00175C  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2155  00175E  90D8               	bcf	status,0,c
  2156  001760  37A6               	rlcf	??_doDM& (0+255),f,b
  2157  001762  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2158  001764  0E3F               	movlw	63
  2159  001766  25A6               	addwf	??_doDM& (0+255),w,b
  2160  001768  6E08               	movwf	?_Read_b_eep,c
  2161  00176A  0E00               	movlw	0
  2162  00176C  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2163  00176E  6E09               	movwf	?_Read_b_eep+1,c
  2164  001770  EC21  F018         	call	_Read_b_eep	;wreg free
  2165  001774  0100               	movlb	0	; () banked
  2166  001776  6FB1               	movwf	_doDM$2000& (0+255),b
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 925: actionSetAll( dmflags,
  2170                           ;main.c: 926: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2171  001778  C0B1  F04F         	movff	_doDM$2000,?_actionSetAll
  2172  00177C  51B3               	movf	doDM@dmflags& (0+255),w,b
  2173  00177E  ECBC  F016         	call	_actionSetAll
  2174                           
  2175                           ;main.c: 929: break;
  2176  001782  D03C               	goto	l7670
  2177  001784                     l7662:
  2178                           
  2179                           ;main.c: 932: actionClrAll( dmflags,
  2180                           ;main.c: 933: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2181  001784  0100               	movlb	0	; () banked
  2182  001786  51B4               	movf	doDM@i& (0+255),w,b
  2183  001788  6FA6               	movwf	??_doDM& (0+255),b
  2184  00178A  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2185  00178C  90D8               	bcf	status,0,c
  2186  00178E  37A6               	rlcf	??_doDM& (0+255),f,b
  2187  001790  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2188  001792  90D8               	bcf	status,0,c
  2189  001794  37A6               	rlcf	??_doDM& (0+255),f,b
  2190  001796  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2191  001798  90D8               	bcf	status,0,c
  2192  00179A  37A6               	rlcf	??_doDM& (0+255),f,b
  2193  00179C  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2194  00179E  0E3F               	movlw	63
  2195  0017A0  25A6               	addwf	??_doDM& (0+255),w,b
  2196  0017A2  6E08               	movwf	?_Read_b_eep,c
  2197  0017A4  0E00               	movlw	0
  2198  0017A6  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2199  0017A8  6E09               	movwf	?_Read_b_eep+1,c
  2200  0017AA  EC21  F018         	call	_Read_b_eep	;wreg free
  2201  0017AE  0100               	movlb	0	; () banked
  2202  0017B0  6FB2               	movwf	_doDM$2001& (0+255),b
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;main.c: 932: actionClrAll( dmflags,
  2206                           ;main.c: 933: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2207  0017B2  C0B2  F04F         	movff	_doDM$2001,?_actionClrAll
  2208  0017B6  51B3               	movf	doDM@dmflags& (0+255),w,b
  2209  0017B8  ECA4  F016         	call	_actionClrAll
  2210                           
  2211                           ;main.c: 936: break;
  2212  0017BC  D01F               	goto	l7670
  2213  0017BE                     l7668:
  2214                           
  2215                           ; BSR set to: 0
  2216  0017BE  51B4               	movf	doDM@i& (0+255),w,b
  2217  0017C0  6FA6               	movwf	??_doDM& (0+255),b
  2218  0017C2  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2219  0017C4  90D8               	bcf	status,0,c
  2220  0017C6  37A6               	rlcf	??_doDM& (0+255),f,b
  2221  0017C8  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2222  0017CA  90D8               	bcf	status,0,c
  2223  0017CC  37A6               	rlcf	??_doDM& (0+255),f,b
  2224  0017CE  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2225  0017D0  90D8               	bcf	status,0,c
  2226  0017D2  37A6               	rlcf	??_doDM& (0+255),f,b
  2227  0017D4  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2228  0017D6  0E3E               	movlw	62
  2229  0017D8  25A6               	addwf	??_doDM& (0+255),w,b
  2230  0017DA  6E08               	movwf	?_Read_b_eep,c
  2231  0017DC  0E00               	movlw	0
  2232  0017DE  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2233  0017E0  6E09               	movwf	?_Read_b_eep+1,c
  2234  0017E2  EC21  F018         	call	_Read_b_eep	;wreg free
  2235                           
  2236                           ; Switch size 1, requested type "speed"
  2237                           ; Number of cases is 5, Range of values is 0 to 4
  2238                           ; switch strategies available:
  2239                           ; Name         Instructions Cycles
  2240                           ; simple_byte           16     9 (average)
  2241                           ;	Chosen strategy is simple_byte
  2242  0017E6  0A00               	xorlw	0	; case 0
  2243  0017E8  E009               	bz	l7670
  2244  0017EA  0A01               	xorlw	1	; case 1
  2245  0017EC  E101 D773          	bz	l7650
  2246  0017F0  0A03               	xorlw	3	; case 2
  2247  0017F2  E08E               	bz	l7654
  2248  0017F4  0A01               	xorlw	1	; case 3
  2249  0017F6  E0A9               	bz	l7658
  2250  0017F8  0A07               	xorlw	7	; case 4
  2251  0017FA  E0C4               	bz	l7662
  2252  0017FC                     l7670:
  2253  0017FC  0100               	movlb	0	; () banked
  2254  0017FE  2BB4               	incf	doDM@i& (0+255),f,b
  2255                           
  2256                           ; BSR set to: 0
  2257  001800  0E07               	movlw	7
  2258  001802  65B4               	cpfsgt	doDM@i& (0+255),b
  2259  001804  D6AD               	goto	l7616
  2260  001806  0C07               	retlw	7
  2261  001808                     __end_of_doDM:
  2262                           	opt stack 0
  2263                           prodh	equ	0xFF4
  2264                           prodl	equ	0xFF3
  2265                           postinc0	equ	0xFEE
  2266                           wreg	equ	0xFE8
  2267                           postinc2	equ	0xFDE
  2268                           postdec2	equ	0xFDD
  2269                           status	equ	0xFD8
  2270                           
  2271 ;; *************** function _actionClrAll *****************
  2272 ;; Defined at:
  2273 ;;		line 1179 in file "../main.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  dmflags         1    wreg     unsigned char 
  2276 ;;  param           1   78[COMRAM] unsigned char 
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;  dmflags         1    0[COMRAM] unsigned char 
  2279 ;;  i               2   79[COMRAM] int 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;		None               void
  2282 ;; Registers used:
  2283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : F/0
  2286 ;;		On exit  : F/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2289 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2292 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2293 ;;Total ram usage:        3 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    7
  2296 ;; This function calls:
  2297 ;;		_SendInformationEvent
  2298 ;; This function is called by:
  2299 ;;		_doDM
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text9
  2304  002D48                     __ptext9:
  2305                           	opt stack 0
  2306  002D48                     _actionClrAll:
  2307                           	opt stack 22
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;main.c: 1180: PORTA = 0x00;
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;incstack = 0
  2314                           ;incstack = 0
  2315  002D48  6A80               	clrf	3968,c	;volatile
  2316                           
  2317                           ;main.c: 1181: PORTB = 0x00;
  2318  002D4A  6A81               	clrf	3969,c	;volatile
  2319                           
  2320                           ;main.c: 1182: PORTC = 0x00;
  2321  002D4C  6A82               	clrf	3970,c	;volatile
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 1184: for ( int i=3; i<21; i++ ) {
  2325  002D4E  6A51               	clrf	actionClrAll@i+1,c
  2326  002D50  0E03               	movlw	3
  2327  002D52  6E50               	movwf	actionClrAll@i,c
  2328  002D54                     l6694:
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;main.c: 1185: SendInformationEvent( i,
  2332                           ;main.c: 1186: 20,
  2333                           ;main.c: 1187: 4 );
  2334  002D54  0E14               	movlw	20
  2335  002D56  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2336  002D58  0E04               	movlw	4
  2337  002D5A  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2338  002D5C  5050               	movf	actionClrAll@i,w,c
  2339  002D5E  ECB7  F015         	call	_SendInformationEvent
  2340                           
  2341                           ; BSR set to: 0
  2342  002D62  4A50               	infsnz	actionClrAll@i,f,c
  2343  002D64  2A51               	incf	actionClrAll@i+1,f,c
  2344                           
  2345                           ; BSR set to: 0
  2346  002D66  5051               	movf	actionClrAll@i+1,w,c
  2347  002D68  0A80               	xorlw	128
  2348  002D6A  0F80               	addlw	-128
  2349  002D6C  0E15               	movlw	21
  2350  002D6E  B4D8               	btfsc	status,2,c
  2351  002D70  5C50               	subwf	actionClrAll@i,w,c
  2352  002D72  B0D8               	btfsc	status,0,c
  2353  002D74  0012               	return	
  2354  002D76  D7EE               	goto	l6694
  2355  002D78                     __end_of_actionClrAll:
  2356                           	opt stack 0
  2357                           prodh	equ	0xFF4
  2358                           prodl	equ	0xFF3
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _actionSetAll *****************
  2366 ;; Defined at:
  2367 ;;		line 1160 in file "../main.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  dmflags         1    wreg     unsigned char 
  2370 ;;  param           1   78[COMRAM] unsigned char 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  dmflags         1    0[COMRAM] unsigned char 
  2373 ;;  i               2   79[COMRAM] int 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;		None               void
  2376 ;; Registers used:
  2377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2378 ;; Tracked objects:
  2379 ;;		On entry : F/0
  2380 ;;		On exit  : F/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2383 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2384 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2386 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2387 ;;Total ram usage:        3 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    7
  2390 ;; This function calls:
  2391 ;;		_SendInformationEvent
  2392 ;; This function is called by:
  2393 ;;		_doDM
  2394 ;; This function uses a non-reentrant model
  2395 ;;
  2396                           
  2397                           	psect	text10
  2398  002D78                     __ptext10:
  2399                           	opt stack 0
  2400  002D78                     _actionSetAll:
  2401                           	opt stack 22
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;main.c: 1161: PORTA = 0xff;
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;incstack = 0
  2408                           ;incstack = 0
  2409  002D78  6880               	setf	3968,c	;volatile
  2410                           
  2411                           ;main.c: 1162: PORTB = 0xff;
  2412  002D7A  6881               	setf	3969,c	;volatile
  2413                           
  2414                           ;main.c: 1163: PORTC = 0xff;
  2415  002D7C  6882               	setf	3970,c	;volatile
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;main.c: 1165: for ( int i=3; i<21; i++ ) {
  2419  002D7E  6A51               	clrf	actionSetAll@i+1,c
  2420  002D80  0E03               	movlw	3
  2421  002D82  6E50               	movwf	actionSetAll@i,c
  2422  002D84                     l6680:
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;main.c: 1166: SendInformationEvent( i,
  2426                           ;main.c: 1167: 20,
  2427                           ;main.c: 1168: 3 );
  2428  002D84  0E14               	movlw	20
  2429  002D86  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2430  002D88  0E03               	movlw	3
  2431  002D8A  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2432  002D8C  5050               	movf	actionSetAll@i,w,c
  2433  002D8E  ECB7  F015         	call	_SendInformationEvent
  2434                           
  2435                           ; BSR set to: 0
  2436  002D92  4A50               	infsnz	actionSetAll@i,f,c
  2437  002D94  2A51               	incf	actionSetAll@i+1,f,c
  2438                           
  2439                           ; BSR set to: 0
  2440  002D96  5051               	movf	actionSetAll@i+1,w,c
  2441  002D98  0A80               	xorlw	128
  2442  002D9A  0F80               	addlw	-128
  2443  002D9C  0E15               	movlw	21
  2444  002D9E  B4D8               	btfsc	status,2,c
  2445  002DA0  5C50               	subwf	actionSetAll@i,w,c
  2446  002DA2  B0D8               	btfsc	status,0,c
  2447  002DA4  0012               	return	
  2448  002DA6  D7EE               	goto	l6680
  2449  002DA8                     __end_of_actionSetAll:
  2450                           	opt stack 0
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           postinc0	equ	0xFEE
  2454                           wreg	equ	0xFE8
  2455                           postinc2	equ	0xFDE
  2456                           postdec2	equ	0xFDD
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _actionClr *****************
  2460 ;; Defined at:
  2461 ;;		line 1056 in file "../main.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  dmflags         1    wreg     unsigned char 
  2464 ;;  param           1   78[COMRAM] unsigned char 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  dmflags         1    0[COMRAM] unsigned char 
  2467 ;; Return value:  Size  Location     Type
  2468 ;;		None               void
  2469 ;; Registers used:
  2470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2471 ;; Tracked objects:
  2472 ;;		On entry : F/0
  2473 ;;		On exit  : F/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2476 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2480 ;;Total ram usage:        1 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    7
  2483 ;; This function calls:
  2484 ;;		_Read_b_eep
  2485 ;;		_SendInformationEvent
  2486 ;; This function is called by:
  2487 ;;		_doDM
  2488 ;; This function uses a non-reentrant model
  2489 ;;
  2490                           
  2491                           	psect	text11
  2492  00257E                     __ptext11:
  2493                           	opt stack 0
  2494  00257E                     _actionClr:
  2495                           	opt stack 22
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;main.c: 1058: if ( param & 0x80 ) {
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;incstack = 0
  2502                           ;incstack = 0
  2503  00257E  AE4F               	btfss	actionClr@param,7,c
  2504  002580  D00D               	goto	l6658
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;main.c: 1060: param &= 0x7f;
  2508  002582  9E4F               	bcf	actionClr@param,7,c
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;main.c: 1062: if ( Read_b_eep(0x21 + 5 + (param - 3))
  2512                           ;main.c: 1063: != vscp_imsg.data[ 2 ] ) {
  2513  002584  0E23               	movlw	35
  2514  002586  244F               	addwf	actionClr@param,w,c
  2515  002588  6E08               	movwf	?_Read_b_eep,c
  2516  00258A  6A09               	clrf	?_Read_b_eep+1,c
  2517  00258C  0E00               	movlw	0
  2518  00258E  2209               	addwfc	?_Read_b_eep+1,f,c
  2519  002590  EC21  F018         	call	_Read_b_eep	;wreg free
  2520  002594  0100               	movlb	0	; () banked
  2521  002596  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2522  002598  A4D8               	btfss	status,2,c
  2523  00259A  0012               	return	
  2524  00259C                     l6658:
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 1065: }
  2528                           ;main.c: 1066: }
  2529                           ;main.c: 1068: if ( param < 3) return;
  2530  00259C  0E03               	movlw	3
  2531  00259E  604F               	cpfslt	actionClr@param,c
  2532  0025A0  D001               	goto	l6662
  2533  0025A2  0C03               	retlw	3
  2534  0025A4                     l6662:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;main.c: 1069: if ( param > 20 ) return;
  2538  0025A4  0E14               	movlw	20
  2539  0025A6  644F               	cpfsgt	actionClr@param,c
  2540  0025A8  D001               	goto	l6666
  2541  0025AA  0C14               	retlw	20
  2542  0025AC                     l6666:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 1071: SendInformationEvent( param,
  2546                           ;main.c: 1072: 20,
  2547                           ;main.c: 1073: 4 );
  2548  0025AC  0E14               	movlw	20
  2549  0025AE  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2550  0025B0  0E04               	movlw	4
  2551  0025B2  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2552  0025B4  504F               	movf	actionClr@param,w,c
  2553  0025B6  ECB7  F015         	call	_SendInformationEvent
  2554                           
  2555                           ;main.c: 1075: switch ( param ) {
  2556  0025BA  D020               	goto	l6670
  2557  0025BC                     l342:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;main.c: 1078: PORTCbits.RC7 = 0;
  2561  0025BC  9E82               	bcf	3970,7,c	;volatile
  2562                           
  2563                           ;main.c: 1079: break;
  2564  0025BE  0012               	return	
  2565  0025C0                     l344:
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;main.c: 1082: PORTCbits.RC6 = 0;
  2569  0025C0  9C82               	bcf	3970,6,c	;volatile
  2570                           
  2571                           ;main.c: 1083: break;
  2572  0025C2  0012               	return	
  2573  0025C4                     l345:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;main.c: 1086: PORTCbits.RC3 = 0;
  2577  0025C4  9682               	bcf	3970,3,c	;volatile
  2578                           
  2579                           ;main.c: 1087: break;
  2580  0025C6  0012               	return	
  2581  0025C8                     l346:
  2582                           
  2583                           ; BSR set to: 0
  2584                           ;main.c: 1090: PORTCbits.RC4 = 0;
  2585  0025C8  9882               	bcf	3970,4,c	;volatile
  2586                           
  2587                           ;main.c: 1091: break;
  2588  0025CA  0012               	return	
  2589  0025CC                     l347:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;main.c: 1094: PORTCbits.RC5 = 0;
  2593  0025CC  9A82               	bcf	3970,5,c	;volatile
  2594                           
  2595                           ;main.c: 1095: break;
  2596  0025CE  0012               	return	
  2597  0025D0                     l348:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 1098: PORTAbits.RA0 = 0;
  2601  0025D0  9080               	bcf	3968,0,c	;volatile
  2602                           
  2603                           ;main.c: 1099: break;
  2604  0025D2  0012               	return	
  2605  0025D4                     l349:
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;main.c: 1102: PORTAbits.RA1 = 0;
  2609  0025D4  9280               	bcf	3968,1,c	;volatile
  2610                           
  2611                           ;main.c: 1103: break;
  2612  0025D6  0012               	return	
  2613  0025D8                     l350:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 1106: PORTAbits.RA2 = 0;
  2617  0025D8  9480               	bcf	3968,2,c	;volatile
  2618                           
  2619                           ;main.c: 1107: break;
  2620  0025DA  0012               	return	
  2621  0025DC                     l351:
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 1110: PORTAbits.RA3 = 0;
  2625  0025DC  9680               	bcf	3968,3,c	;volatile
  2626                           
  2627                           ;main.c: 1111: break;
  2628  0025DE  0012               	return	
  2629  0025E0                     l352:
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 1114: PORTAbits.RA5 = 0;
  2633  0025E0  9A80               	bcf	3968,5,c	;volatile
  2634                           
  2635                           ;main.c: 1115: break;
  2636  0025E2  0012               	return	
  2637  0025E4                     l355:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 1126: PORTBbits.RB4 = 0;
  2641  0025E4  9881               	bcf	3969,4,c	;volatile
  2642                           
  2643                           ;main.c: 1127: break;
  2644  0025E6  0012               	return	
  2645  0025E8                     l356:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 1130: PORTCbits.RC2 = 0;
  2649  0025E8  9482               	bcf	3970,2,c	;volatile
  2650                           
  2651                           ;main.c: 1131: break;
  2652  0025EA  0012               	return	
  2653  0025EC                     l357:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;main.c: 1134: PORTBbits.RB1 = 0;
  2657  0025EC  9281               	bcf	3969,1,c	;volatile
  2658                           
  2659                           ;main.c: 1135: break;
  2660  0025EE  0012               	return	
  2661  0025F0                     l358:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 1138: PORTBbits.RB0 = 0;
  2665  0025F0  9081               	bcf	3969,0,c	;volatile
  2666                           
  2667                           ;main.c: 1139: break;
  2668  0025F2  0012               	return	
  2669  0025F4                     l359:
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 1142: PORTBbits.RB6 = 0;
  2673  0025F4  9C81               	bcf	3969,6,c	;volatile
  2674                           
  2675                           ;main.c: 1143: break;
  2676  0025F6  0012               	return	
  2677  0025F8                     l360:
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 1146: PORTBbits.RB5 = 0;
  2681  0025F8  9A81               	bcf	3969,5,c	;volatile
  2682                           
  2683                           ;main.c: 1147: break;
  2684  0025FA  0012               	return	
  2685  0025FC                     l6670:
  2686                           
  2687                           ; BSR set to: 0
  2688  0025FC  504F               	movf	actionClr@param,w,c
  2689                           
  2690                           ; Switch size 1, requested type "speed"
  2691                           ; Number of cases is 18, Range of values is 3 to 20
  2692                           ; switch strategies available:
  2693                           ; Name         Instructions Cycles
  2694                           ; simple_byte           55    28 (average)
  2695                           ;	Chosen strategy is simple_byte
  2696  0025FE  0A03               	xorlw	3	; case 3
  2697  002600  E0DD               	bz	l342
  2698  002602  0A07               	xorlw	7	; case 4
  2699  002604  E0DD               	bz	l344
  2700  002606  0A01               	xorlw	1	; case 5
  2701  002608  E0DD               	bz	l345
  2702  00260A  0A03               	xorlw	3	; case 6
  2703  00260C  E0DD               	bz	l346
  2704  00260E  0A01               	xorlw	1	; case 7
  2705  002610  E0DD               	bz	l347
  2706  002612  0A0F               	xorlw	15	; case 8
  2707  002614  E0DD               	bz	l348
  2708  002616  0A01               	xorlw	1	; case 9
  2709  002618  E0DD               	bz	l349
  2710  00261A  0A03               	xorlw	3	; case 10
  2711  00261C  E0DD               	bz	l350
  2712  00261E  0A01               	xorlw	1	; case 11
  2713  002620  E0DD               	bz	l351
  2714  002622  0A07               	xorlw	7	; case 12
  2715  002624  E0DD               	bz	l352
  2716  002626  0A01               	xorlw	1	; case 13
  2717  002628  B4D8               	btfsc	status,2,c
  2718  00262A  0012               	return	
  2719  00262C  0A03               	xorlw	3	; case 14
  2720  00262E  B4D8               	btfsc	status,2,c
  2721  002630  0012               	return	
  2722  002632  0A01               	xorlw	1	; case 15
  2723  002634  E0D7               	bz	l355
  2724  002636  0A1F               	xorlw	31	; case 16
  2725  002638  E0D7               	bz	l356
  2726  00263A  0A01               	xorlw	1	; case 17
  2727  00263C  E0D7               	bz	l357
  2728  00263E  0A03               	xorlw	3	; case 18
  2729  002640  E0D7               	bz	l358
  2730  002642  0A01               	xorlw	1	; case 19
  2731  002644  E0D7               	bz	l359
  2732  002646  0A07               	xorlw	7	; case 20
  2733  002648  A4D8               	btfss	status,2,c
  2734  00264A  0012               	return	
  2735  00264C  D7D5               	goto	l360
  2736  00264E                     __end_of_actionClr:
  2737                           	opt stack 0
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           postinc0	equ	0xFEE
  2741                           wreg	equ	0xFE8
  2742                           postinc2	equ	0xFDE
  2743                           postdec2	equ	0xFDD
  2744                           status	equ	0xFD8
  2745                           
  2746 ;; *************** function _actionSet *****************
  2747 ;; Defined at:
  2748 ;;		line 953 in file "../main.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  dmflags         1    wreg     unsigned char 
  2751 ;;  param           1   78[COMRAM] unsigned char 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  dmflags         1    0[COMRAM] unsigned char 
  2754 ;; Return value:  Size  Location     Type
  2755 ;;		None               void
  2756 ;; Registers used:
  2757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2758 ;; Tracked objects:
  2759 ;;		On entry : F/0
  2760 ;;		On exit  : F/0
  2761 ;;		Unchanged: 0/0
  2762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2763 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2766 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2767 ;;Total ram usage:        1 bytes
  2768 ;; Hardware stack levels used:    1
  2769 ;; Hardware stack levels required when called:    7
  2770 ;; This function calls:
  2771 ;;		_Read_b_eep
  2772 ;;		_SendInformationEvent
  2773 ;; This function is called by:
  2774 ;;		_doDM
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text12
  2779  00264E                     __ptext12:
  2780                           	opt stack 0
  2781  00264E                     _actionSet:
  2782                           	opt stack 22
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 955: if ( param & 0x80 ) {
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;incstack = 0
  2789                           ;incstack = 0
  2790  00264E  AE4F               	btfss	actionSet@param,7,c
  2791  002650  D00D               	goto	l6636
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 957: param &= 0x7f;
  2795  002652  9E4F               	bcf	actionSet@param,7,c
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 959: if ( Read_b_eep(0x21 + 5 + (param - 3))
  2799                           ;main.c: 960: != vscp_imsg.data[ 2 ] ) {
  2800  002654  0E23               	movlw	35
  2801  002656  244F               	addwf	actionSet@param,w,c
  2802  002658  6E08               	movwf	?_Read_b_eep,c
  2803  00265A  6A09               	clrf	?_Read_b_eep+1,c
  2804  00265C  0E00               	movlw	0
  2805  00265E  2209               	addwfc	?_Read_b_eep+1,f,c
  2806  002660  EC21  F018         	call	_Read_b_eep	;wreg free
  2807  002664  0100               	movlb	0	; () banked
  2808  002666  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2809  002668  A4D8               	btfss	status,2,c
  2810  00266A  0012               	return	
  2811  00266C                     l6636:
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 962: }
  2815                           ;main.c: 963: }
  2816                           ;main.c: 965: if ( param < 3) return;
  2817  00266C  0E03               	movlw	3
  2818  00266E  604F               	cpfslt	actionSet@param,c
  2819  002670  D001               	goto	l6640
  2820  002672  0C03               	retlw	3
  2821  002674                     l6640:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 966: if ( param > 20 ) return;
  2825  002674  0E14               	movlw	20
  2826  002676  644F               	cpfsgt	actionSet@param,c
  2827  002678  D001               	goto	l6644
  2828  00267A  0C14               	retlw	20
  2829  00267C                     l6644:
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 968: SendInformationEvent( param,
  2833                           ;main.c: 969: 20,
  2834                           ;main.c: 970: 3 );
  2835  00267C  0E14               	movlw	20
  2836  00267E  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2837  002680  0E03               	movlw	3
  2838  002682  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2839  002684  504F               	movf	actionSet@param,w,c
  2840  002686  ECB7  F015         	call	_SendInformationEvent
  2841                           
  2842                           ;main.c: 972: switch ( param ) {
  2843  00268A  D020               	goto	l6648
  2844  00268C                     l315:
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;main.c: 975: PORTCbits.RC7 = 1;
  2848  00268C  8E82               	bsf	3970,7,c	;volatile
  2849                           
  2850                           ;main.c: 976: break;
  2851  00268E  0012               	return	
  2852  002690                     l317:
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;main.c: 979: PORTCbits.RC6 = 1;
  2856  002690  8C82               	bsf	3970,6,c	;volatile
  2857                           
  2858                           ;main.c: 980: break;
  2859  002692  0012               	return	
  2860  002694                     l318:
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 983: PORTCbits.RC3 = 1;
  2864  002694  8682               	bsf	3970,3,c	;volatile
  2865                           
  2866                           ;main.c: 984: break;
  2867  002696  0012               	return	
  2868  002698                     l319:
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 987: PORTCbits.RC4 = 1;
  2872  002698  8882               	bsf	3970,4,c	;volatile
  2873                           
  2874                           ;main.c: 988: break;
  2875  00269A  0012               	return	
  2876  00269C                     l320:
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;main.c: 991: PORTCbits.RC5 = 1;
  2880  00269C  8A82               	bsf	3970,5,c	;volatile
  2881                           
  2882                           ;main.c: 992: break;
  2883  00269E  0012               	return	
  2884  0026A0                     l321:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 995: PORTAbits.RA0 = 1;
  2888  0026A0  8080               	bsf	3968,0,c	;volatile
  2889                           
  2890                           ;main.c: 996: break;
  2891  0026A2  0012               	return	
  2892  0026A4                     l322:
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 999: PORTAbits.RA1 = 1;
  2896  0026A4  8280               	bsf	3968,1,c	;volatile
  2897                           
  2898                           ;main.c: 1000: break;
  2899  0026A6  0012               	return	
  2900  0026A8                     l323:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;main.c: 1003: PORTAbits.RA2 = 1;
  2904  0026A8  8480               	bsf	3968,2,c	;volatile
  2905                           
  2906                           ;main.c: 1004: break;
  2907  0026AA  0012               	return	
  2908  0026AC                     l324:
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;main.c: 1007: PORTAbits.RA3 = 1;
  2912  0026AC  8680               	bsf	3968,3,c	;volatile
  2913                           
  2914                           ;main.c: 1008: break;
  2915  0026AE  0012               	return	
  2916  0026B0                     l325:
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;main.c: 1011: PORTAbits.RA5 = 1;
  2920  0026B0  8A80               	bsf	3968,5,c	;volatile
  2921                           
  2922                           ;main.c: 1012: break;
  2923  0026B2  0012               	return	
  2924  0026B4                     l328:
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;main.c: 1023: PORTBbits.RB4 = 1;
  2928  0026B4  8881               	bsf	3969,4,c	;volatile
  2929                           
  2930                           ;main.c: 1024: break;
  2931  0026B6  0012               	return	
  2932  0026B8                     l329:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;main.c: 1027: PORTCbits.RC2 = 1;
  2936  0026B8  8482               	bsf	3970,2,c	;volatile
  2937                           
  2938                           ;main.c: 1028: break;
  2939  0026BA  0012               	return	
  2940  0026BC                     l330:
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;main.c: 1031: PORTBbits.RB1 = 1;
  2944  0026BC  8281               	bsf	3969,1,c	;volatile
  2945                           
  2946                           ;main.c: 1032: break;
  2947  0026BE  0012               	return	
  2948  0026C0                     l331:
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;main.c: 1035: PORTBbits.RB0 = 1;
  2952  0026C0  8081               	bsf	3969,0,c	;volatile
  2953                           
  2954                           ;main.c: 1036: break;
  2955  0026C2  0012               	return	
  2956  0026C4                     l332:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 1039: PORTBbits.RB6 = 1;
  2960  0026C4  8C81               	bsf	3969,6,c	;volatile
  2961                           
  2962                           ;main.c: 1040: break;
  2963  0026C6  0012               	return	
  2964  0026C8                     l333:
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 1043: PORTBbits.RB5 = 1;
  2968  0026C8  8A81               	bsf	3969,5,c	;volatile
  2969                           
  2970                           ;main.c: 1044: break;
  2971  0026CA  0012               	return	
  2972  0026CC                     l6648:
  2973                           
  2974                           ; BSR set to: 0
  2975  0026CC  504F               	movf	actionSet@param,w,c
  2976                           
  2977                           ; Switch size 1, requested type "speed"
  2978                           ; Number of cases is 18, Range of values is 3 to 20
  2979                           ; switch strategies available:
  2980                           ; Name         Instructions Cycles
  2981                           ; simple_byte           55    28 (average)
  2982                           ;	Chosen strategy is simple_byte
  2983  0026CE  0A03               	xorlw	3	; case 3
  2984  0026D0  E0DD               	bz	l315
  2985  0026D2  0A07               	xorlw	7	; case 4
  2986  0026D4  E0DD               	bz	l317
  2987  0026D6  0A01               	xorlw	1	; case 5
  2988  0026D8  E0DD               	bz	l318
  2989  0026DA  0A03               	xorlw	3	; case 6
  2990  0026DC  E0DD               	bz	l319
  2991  0026DE  0A01               	xorlw	1	; case 7
  2992  0026E0  E0DD               	bz	l320
  2993  0026E2  0A0F               	xorlw	15	; case 8
  2994  0026E4  E0DD               	bz	l321
  2995  0026E6  0A01               	xorlw	1	; case 9
  2996  0026E8  E0DD               	bz	l322
  2997  0026EA  0A03               	xorlw	3	; case 10
  2998  0026EC  E0DD               	bz	l323
  2999  0026EE  0A01               	xorlw	1	; case 11
  3000  0026F0  E0DD               	bz	l324
  3001  0026F2  0A07               	xorlw	7	; case 12
  3002  0026F4  E0DD               	bz	l325
  3003  0026F6  0A01               	xorlw	1	; case 13
  3004  0026F8  B4D8               	btfsc	status,2,c
  3005  0026FA  0012               	return	
  3006  0026FC  0A03               	xorlw	3	; case 14
  3007  0026FE  B4D8               	btfsc	status,2,c
  3008  002700  0012               	return	
  3009  002702  0A01               	xorlw	1	; case 15
  3010  002704  E0D7               	bz	l328
  3011  002706  0A1F               	xorlw	31	; case 16
  3012  002708  E0D7               	bz	l329
  3013  00270A  0A01               	xorlw	1	; case 17
  3014  00270C  E0D7               	bz	l330
  3015  00270E  0A03               	xorlw	3	; case 18
  3016  002710  E0D7               	bz	l331
  3017  002712  0A01               	xorlw	1	; case 19
  3018  002714  E0D7               	bz	l332
  3019  002716  0A07               	xorlw	7	; case 20
  3020  002718  A4D8               	btfss	status,2,c
  3021  00271A  0012               	return	
  3022  00271C  D7D5               	goto	l333
  3023  00271E                     __end_of_actionSet:
  3024                           	opt stack 0
  3025                           prodh	equ	0xFF4
  3026                           prodl	equ	0xFF3
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postinc2	equ	0xFDE
  3030                           postdec2	equ	0xFDD
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _SendInformationEvent *****************
  3034 ;; Defined at:
  3035 ;;		line 813 in file "../main.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  idx             1    wreg     unsigned char 
  3038 ;;  eventClass      1   20[BANK0 ] unsigned char 
  3039 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;  idx             1   77[COMRAM] unsigned char 
  3042 ;;  data            3   74[COMRAM] unsigned char [3]
  3043 ;; Return value:  Size  Location     Type
  3044 ;;		None               void
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : F/0
  3049 ;;		On exit  : F/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3055 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3056 ;;Total ram usage:        6 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    6
  3059 ;; This function calls:
  3060 ;;		_Read_b_eep
  3061 ;;		_sendVSCPFrame
  3062 ;; This function is called by:
  3063 ;;		_actionSet
  3064 ;;		_actionClr
  3065 ;;		_actionSetAll
  3066 ;;		_actionClrAll
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text13
  3071  002B6E                     __ptext13:
  3072                           	opt stack 0
  3073  002B6E                     _SendInformationEvent:
  3074                           	opt stack 22
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;incstack = 0
  3078                           ;incstack = 0
  3079                           ;SendInformationEvent@idx stored from wreg
  3080  002B6E  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;main.c: 814: uint8_t data[3];
  3084                           ;main.c: 815: idx -= 3;
  3085  002B72  0E03               	movlw	3
  3086  002B74  5E4E               	subwf	SendInformationEvent@idx,f,c
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;main.c: 817: data[ 0 ] = idx;
  3090  002B76  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 818: data[ 1 ] = Read_b_eep(0x21 + 0);
  3094  002B7A  6A09               	clrf	?_Read_b_eep+1,c
  3095  002B7C  0E21               	movlw	33
  3096  002B7E  6E08               	movwf	?_Read_b_eep,c
  3097  002B80  EC21  F018         	call	_Read_b_eep	;wreg free
  3098  002B84  6E4C               	movwf	SendInformationEvent@data+1,c
  3099                           
  3100                           ;main.c: 819: data[ 2 ] = Read_b_eep(0x21 + 5 + idx);
  3101  002B86  0E26               	movlw	38
  3102  002B88  244E               	addwf	SendInformationEvent@idx,w,c
  3103  002B8A  6E08               	movwf	?_Read_b_eep,c
  3104  002B8C  6A09               	clrf	?_Read_b_eep+1,c
  3105  002B8E  0E00               	movlw	0
  3106  002B90  2209               	addwfc	?_Read_b_eep+1,f,c
  3107  002B92  EC21  F018         	call	_Read_b_eep	;wreg free
  3108  002B96  6E4D               	movwf	SendInformationEvent@data+2,c
  3109                           
  3110                           ;main.c: 820: sendVSCPFrame( eventClass,
  3111                           ;main.c: 821: eventTypeId,
  3112                           ;main.c: 822: vscp_nickname,
  3113                           ;main.c: 823: 0x03,
  3114                           ;main.c: 824: 3,
  3115                           ;main.c: 825: data );
  3116  002B98  0100               	movlb	0	; () banked
  3117  002B9A  C0A4  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  3118  002B9E  6A40               	clrf	?_sendVSCPFrame+1,c
  3119  002BA0  C0A5  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  3120  002BA4  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3121  002BA8  0E03               	movlw	3
  3122  002BAA  6E43               	movwf	?_sendVSCPFrame+4,c
  3123  002BAC  6E44               	movwf	?_sendVSCPFrame+5,c
  3124  002BAE  0E4B               	movlw	low SendInformationEvent@data
  3125  002BB0  6E45               	movwf	?_sendVSCPFrame+6,c
  3126  002BB2  0E00               	movlw	high SendInformationEvent@data
  3127  002BB4  6E46               	movwf	?_sendVSCPFrame+7,c
  3128  002BB6  0E0F               	movlw	15
  3129  002BB8  6E46               	movwf	?_sendVSCPFrame+7,c
  3130  002BBA  0E5F               	movlw	__accesstop+-1
  3131  002BBC  6445               	cpfsgt	?_sendVSCPFrame+6,c
  3132  002BBE  6A46               	clrf	?_sendVSCPFrame+7,c
  3133  002BC0  EF51  F014         	goto	_sendVSCPFrame	;wreg free
  3134  002BC4                     __end_of_SendInformationEvent:
  3135                           	opt stack 0
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           postinc0	equ	0xFEE
  3139                           wreg	equ	0xFE8
  3140                           postinc2	equ	0xFDE
  3141                           postdec2	equ	0xFDD
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _vscp_handleProtocolEvent *****************
  3145 ;; Defined at:
  3146 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;		None
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  bytes           1   33[BANK0 ] unsigned char 
  3151 ;;  page_save       2   29[BANK0 ] unsigned short 
  3152 ;;  i               1   39[BANK0 ] unsigned char 
  3153 ;;  bytes           2   43[BANK0 ] unsigned short 
  3154 ;;  page_save       2   27[BANK0 ] unsigned short 
  3155 ;;  byte            1   42[BANK0 ] unsigned char 
  3156 ;;  cb              1   38[BANK0 ] unsigned char 
  3157 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3158 ;;  j               1   47[BANK0 ] unsigned char 
  3159 ;;  i               1   45[BANK0 ] unsigned char 
  3160 ;;  k               1   40[BANK0 ] unsigned char 
  3161 ;;  i               1   41[BANK0 ] unsigned char 
  3162 ;;  len             1   36[BANK0 ] unsigned char 
  3163 ;;  pos             1   35[BANK0 ] unsigned char 
  3164 ;;  i               1   46[BANK0 ] unsigned char 
  3165 ;;  len             1   34[BANK0 ] unsigned char 
  3166 ;;  pos             1   32[BANK0 ] unsigned char 
  3167 ;;  offset          1   31[BANK0 ] unsigned char 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;		None               void
  3170 ;; Registers used:
  3171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : F/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3178 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3179 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3180 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3181 ;;Total ram usage:       28 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    8
  3184 ;; This function calls:
  3185 ;;		_vscp_init
  3186 ;;		_vscp_readAppReg
  3187 ;;		_vscp_writeAppReg
  3188 ;;		_vscp_sendEvent
  3189 ;;		_vscp_getGUID
  3190 ;;		_vscp_getMDF_URL
  3191 ;;		_vscp_goBootloaderMode
  3192 ;;		_vscp_getMatrixInfo
  3193 ;;		_vscp_handleHeartbeat
  3194 ;;		_vscp_handleSetNickname
  3195 ;;		_vscp_handleDropNickname
  3196 ;;		_vscp_newNodeOnline
  3197 ;;		_vscp_readRegister
  3198 ;;		_vscp_readStdReg
  3199 ;;		_vscp_writeRegister
  3200 ;;		_vscp_writeStdReg
  3201 ;;		___lbmod
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text14
  3208  000F22                     __ptext14:
  3209                           	opt stack 0
  3210  000F22                     _vscp_handleProtocolEvent:
  3211                           	opt stack 22
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;incstack = 0
  3218                           ;incstack = 0
  3219  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  3220  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3221  000F26  A4D8               	btfss	status,2,c
  3222  000F28  0012               	return	
  3223  000F2A  D2E2               	goto	l7600
  3224  000F2C                     l7182:
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  3228  000F2C  EF2C  F016         	goto	_vscp_handleHeartbeat	;wreg free
  3229  000F30                     l7184:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  3233  000F30  EF02  F017         	goto	_vscp_newNodeOnline	;wreg free
  3234  000F34                     l7186:
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  3238  000F34  EF88  F017         	goto	_vscp_handleSetNickname	;wreg free
  3239  000F38                     l7188:
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  3243  000F38  EFD4  F016         	goto	_vscp_handleDropNickname	;wreg free
  3244  000F3C                     l7190:
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  3248                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3249  000F3C  5175               	movf	_vscp_imsg& (0+255),w,b
  3250  000F3E  0B0F               	andlw	15
  3251  000F40  0A02               	xorlw	2
  3252  000F42  A4D8               	btfss	status,2,c
  3253  000F44  0012               	return	
  3254                           
  3255                           ; BSR set to: 0
  3256  000F46  5170               	movf	_vscp_nickname& (0+255),w,b
  3257  000F48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3258  000F4C  62DF               	cpfseq	indf2,c
  3259  000F4E  0012               	return	
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  3263  000F50  0E80               	movlw	128
  3264  000F52  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3265  000F54  D011               	goto	l7210
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3269  000F56  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3270  000F58  ECAB  F014         	call	_vscp_readAppReg
  3271  000F5C                     L1:
  3272  000F5C  0100               	movlb	0	; () banked
  3273  000F5E  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3277  000F60  C07C  F088         	movff	_vscp_imsg+7,_vscp_omsg+5
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  3281  000F64  0E03               	movlw	3
  3282  000F66  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  3286  000F68  0E82               	movlw	130
  3287  000F6A  6F83               	movwf	_vscp_omsg& (0+255),b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  3291  000F6C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3292  000F6E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  3296  000F70  0E0A               	movlw	10
  3297  000F72  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;vscp_firmware.c: 843: vscp_sendEvent();
  3301  000F74  EF3E  F017         	goto	_vscp_sendEvent	;wreg free
  3302  000F78                     l7210:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;vscp_firmware.c: 845: else {
  3306                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  3307                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3308  000F78  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3309  000F7A  EC00  F00D         	call	_vscp_readStdReg
  3310  000F7E  D7EE               	goto	L1
  3311  000F80                     l7224:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3315                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3316  000F80  5175               	movf	_vscp_imsg& (0+255),w,b
  3317  000F82  0B0F               	andlw	15
  3318  000F84  0A03               	xorlw	3
  3319  000F86  A4D8               	btfss	status,2,c
  3320  000F88  0012               	return	
  3321                           
  3322                           ; BSR set to: 0
  3323  000F8A  5170               	movf	_vscp_nickname& (0+255),w,b
  3324  000F8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3325  000F90  62DF               	cpfseq	indf2,c
  3326  000F92  0012               	return	
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  3330  000F94  0E80               	movlw	128
  3331  000F96  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3332  000F98  D006               	goto	l7244
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  3336                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3337  000F9A  C07D  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3338  000F9E  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3339  000FA0  ECA9  F010         	call	_vscp_writeAppReg
  3340  000FA4  D7DB               	goto	L1
  3341  000FA6                     l7244:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;vscp_firmware.c: 888: else {
  3345                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  3346                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3347  000FA6  C07D  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3348  000FAA  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3349  000FAC  ECD0  F011         	call	_vscp_writeStdReg
  3350  000FB0  D7D5               	goto	L1
  3351  000FB2                     l7258:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3355                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3356                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3357                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3358                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3359                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3360                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3361  000FB2  5170               	movf	_vscp_nickname& (0+255),w,b
  3362  000FB4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3363  000FB8  62DF               	cpfseq	indf2,c
  3364  000FBA  0012               	return	
  3365                           
  3366                           ; BSR set to: 0
  3367  000FBC  0E00               	movlw	0
  3368  000FBE  EC79  F018         	call	_vscp_getGUID
  3369  000FC2  0100               	movlb	0	; () banked
  3370  000FC4  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3371  000FC6  A4D8               	btfss	status,2,c
  3372  000FC8  0012               	return	
  3373                           
  3374                           ; BSR set to: 0
  3375  000FCA  0E03               	movlw	3
  3376  000FCC  EC79  F018         	call	_vscp_getGUID
  3377  000FD0  0100               	movlb	0	; () banked
  3378  000FD2  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3379  000FD4  A4D8               	btfss	status,2,c
  3380  000FD6  0012               	return	
  3381                           
  3382                           ; BSR set to: 0
  3383  000FD8  0E05               	movlw	5
  3384  000FDA  EC79  F018         	call	_vscp_getGUID
  3385  000FDE  0100               	movlb	0	; () banked
  3386  000FE0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3387  000FE2  A4D8               	btfss	status,2,c
  3388  000FE4  0012               	return	
  3389                           
  3390                           ; BSR set to: 0
  3391  000FE6  0E07               	movlw	7
  3392  000FE8  EC79  F018         	call	_vscp_getGUID
  3393  000FEC  0100               	movlb	0	; () banked
  3394  000FEE  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3395  000FF0  A4D8               	btfss	status,2,c
  3396  000FF2  0012               	return	
  3397                           
  3398                           ; BSR set to: 0
  3399  000FF4  5053               	movf	_vscp_page_select+1,w,c
  3400  000FF6  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3401  000FF8  A4D8               	btfss	status,2,c
  3402  000FFA  0012               	return	
  3403                           
  3404                           ; BSR set to: 0
  3405  000FFC  5052               	movf	_vscp_page_select,w,c
  3406  000FFE  EE20  F082         	lfsr	2,_vscp_imsg+13
  3407  001002  62DF               	cpfseq	indf2,c
  3408  001004  0012               	return	
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3412  001006  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3413  001008  EFD8  F017         	goto	_vscp_goBootloaderMode
  3414  00100C                     l7274:
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3418                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3419                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3420                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3421  00100C  0E00               	movlw	0
  3422  00100E  EC79  F018         	call	_vscp_getGUID
  3423  001012  0100               	movlb	0	; () banked
  3424  001014  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3425  001016  E173               	bnz	l7318
  3426                           
  3427                           ; BSR set to: 0
  3428  001018  0E01               	movlw	1
  3429  00101A  EC79  F018         	call	_vscp_getGUID
  3430  00101E  0100               	movlb	0	; () banked
  3431  001020  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3432  001022  E16D               	bnz	l7318
  3433                           
  3434                           ; BSR set to: 0
  3435  001024  0E02               	movlw	2
  3436  001026  EC79  F018         	call	_vscp_getGUID
  3437  00102A  0100               	movlb	0	; () banked
  3438  00102C  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3439  00102E  E167               	bnz	l7318
  3440                           
  3441                           ; BSR set to: 0
  3442  001030  0E03               	movlw	3
  3443  001032  EC79  F018         	call	_vscp_getGUID
  3444  001036  0100               	movlb	0	; () banked
  3445  001038  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3446  00103A  E161               	bnz	l7318
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  3450  00103C  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  3451  00103E  D05F               	goto	l7318
  3452  001040                     l7284:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3456                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3457                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3458                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3459  001040  0E04               	movlw	4
  3460  001042  EC79  F018         	call	_vscp_getGUID
  3461  001046  0100               	movlb	0	; () banked
  3462  001048  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3463  00104A  E159               	bnz	l7318
  3464                           
  3465                           ; BSR set to: 0
  3466  00104C  0E05               	movlw	5
  3467  00104E  EC79  F018         	call	_vscp_getGUID
  3468  001052  0100               	movlb	0	; () banked
  3469  001054  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3470  001056  E153               	bnz	l7318
  3471                           
  3472                           ; BSR set to: 0
  3473  001058  0E06               	movlw	6
  3474  00105A  EC79  F018         	call	_vscp_getGUID
  3475  00105E  0100               	movlb	0	; () banked
  3476  001060  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3477  001062  E14D               	bnz	l7318
  3478                           
  3479                           ; BSR set to: 0
  3480  001064  0E07               	movlw	7
  3481  001066  EC79  F018         	call	_vscp_getGUID
  3482  00106A  0100               	movlb	0	; () banked
  3483  00106C  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3484  00106E  E147               	bnz	l7318
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  3488  001070  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  3489  001072  D045               	goto	l7318
  3490  001074                     l7294:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3494                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3495                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3496                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3497  001074  0E08               	movlw	8
  3498  001076  EC79  F018         	call	_vscp_getGUID
  3499  00107A  0100               	movlb	0	; () banked
  3500  00107C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3501  00107E  E13F               	bnz	l7318
  3502                           
  3503                           ; BSR set to: 0
  3504  001080  0E09               	movlw	9
  3505  001082  EC79  F018         	call	_vscp_getGUID
  3506  001086  0100               	movlb	0	; () banked
  3507  001088  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3508  00108A  E139               	bnz	l7318
  3509                           
  3510                           ; BSR set to: 0
  3511  00108C  0E0A               	movlw	10
  3512  00108E  EC79  F018         	call	_vscp_getGUID
  3513  001092  0100               	movlb	0	; () banked
  3514  001094  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3515  001096  E133               	bnz	l7318
  3516                           
  3517                           ; BSR set to: 0
  3518  001098  0E0B               	movlw	11
  3519  00109A  EC79  F018         	call	_vscp_getGUID
  3520  00109E  0100               	movlb	0	; () banked
  3521  0010A0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3522  0010A2  E12D               	bnz	l7318
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  3526  0010A4  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  3527  0010A6  D02B               	goto	l7318
  3528  0010A8                     l7304:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3532                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3533                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3534                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3535  0010A8  0E0C               	movlw	12
  3536  0010AA  EC79  F018         	call	_vscp_getGUID
  3537  0010AE  0100               	movlb	0	; () banked
  3538  0010B0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3539  0010B2  E125               	bnz	l7318
  3540                           
  3541                           ; BSR set to: 0
  3542  0010B4  0E0D               	movlw	13
  3543  0010B6  EC79  F018         	call	_vscp_getGUID
  3544  0010BA  0100               	movlb	0	; () banked
  3545  0010BC  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3546  0010BE  E11F               	bnz	l7318
  3547                           
  3548                           ; BSR set to: 0
  3549  0010C0  0E0E               	movlw	14
  3550  0010C2  EC79  F018         	call	_vscp_getGUID
  3551  0010C6  0100               	movlb	0	; () banked
  3552  0010C8  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3553  0010CA  E119               	bnz	l7318
  3554                           
  3555                           ; BSR set to: 0
  3556  0010CC  0E0F               	movlw	15
  3557  0010CE  EC79  F018         	call	_vscp_getGUID
  3558  0010D2  0100               	movlb	0	; () banked
  3559  0010D4  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3560  0010D6  E113               	bnz	l7318
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  3564  0010D8  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  3565  0010DA  D011               	goto	l7318
  3566  0010DC                     l1016:
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  3570  0010DC  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  3571                           
  3572                           ;vscp_firmware.c: 965: break;
  3573  0010DE  D00F               	goto	l7318
  3574  0010E0                     l7316:
  3575                           
  3576                           ; BSR set to: 0
  3577  0010E0  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3578  0010E2  0B0F               	andlw	15
  3579  0010E4  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3580  0010E6  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3581                           
  3582                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3583                           ; Switch size 1, requested type "speed"
  3584                           ; Number of cases is 1, Range of values is 0 to 0
  3585                           ; switch strategies available:
  3586                           ; Name         Instructions Cycles
  3587                           ; simple_byte            4     3 (average)
  3588                           ;	Chosen strategy is simple_byte
  3589  0010E8  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3590  0010EA  E1F8               	bnz	l1016
  3591                           
  3592                           ; BSR set to: 0
  3593                           ; Switch size 1, requested type "speed"
  3594                           ; Number of cases is 4, Range of values is 0 to 3
  3595                           ; switch strategies available:
  3596                           ; Name         Instructions Cycles
  3597                           ; simple_byte           13     7 (average)
  3598                           ;	Chosen strategy is simple_byte
  3599  0010EC  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3600  0010EE  E08E               	bz	l7274
  3601  0010F0  0A01               	xorlw	1	; case 1
  3602  0010F2  E0A6               	bz	l7284
  3603  0010F4  0A03               	xorlw	3	; case 2
  3604  0010F6  E0BE               	bz	l7294
  3605  0010F8  0A01               	xorlw	1	; case 3
  3606  0010FA  E0D6               	bz	l7304
  3607  0010FC  D7EF               	goto	l1016
  3608  0010FE                     l7318:
  3609                           
  3610                           ; BSR set to: 0
  3611                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3612  0010FE  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3613  001100  0BF0               	andlw	240
  3614  001102  0AF0               	xorlw	240
  3615  001104  B4D8               	btfsc	status,2,c
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;vscp_firmware.c: 970: vscp_init();
  3619  001106  EC0A  F016         	call	_vscp_init	;wreg free
  3620  00110A  0012               	return	
  3621  00110C                     l7322:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3625  00110C  5170               	movf	_vscp_nickname& (0+255),w,b
  3626  00110E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3627  001112  62DF               	cpfseq	indf2,c
  3628  001114  0012               	return	
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;vscp_firmware.c: 978: uint8_t i;
  3632                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  3633  001116  6BB0               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3634                           
  3635                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  3636  001118  C07C  F0AF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3637                           
  3638                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  3639  00111C  C07D  F0B2         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3640                           
  3641                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  3642  001120  6BBE               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3643  001122  D047               	goto	l7354
  3644  001124                     l7326:
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3648  001124  0E07               	movlw	7
  3649  001126  6E08               	movwf	?___lbmod,c
  3650  001128  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3651  00112A  EC17  F017         	call	___lbmod
  3652  00112E  0100               	movlb	0	; () banked
  3653  001130  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3654  001132  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3655  001134  0F89               	addlw	low (_vscp_omsg+6)
  3656  001136  6ED9               	movwf	fsr2l,c
  3657  001138  6ADA               	clrf	fsr2h,c
  3658  00113A  51AF               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3659  00113C  25BE               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3660  00113E  EC39  F018         	call	_vscp_readRegister
  3661  001142  6EDF               	movwf	indf2,c
  3662                           
  3663                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  3664  001144  0E07               	movlw	7
  3665  001146  6E08               	movwf	?___lbmod,c
  3666  001148  0100               	movlb	0	; () banked
  3667  00114A  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3668  00114C  EC17  F017         	call	___lbmod
  3669  001150  0A06               	xorlw	6
  3670  001152  E00B               	bz	l7332
  3671  001154  0EFF               	movlw	255
  3672  001156  0100               	movlb	0	; () banked
  3673  001158  25B2               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3674  00115A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3675  00115C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3676  00115E  0EFF               	movlw	255
  3677  001160  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3678  001162  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3679  001164  19A4               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3680  001166  11A5               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3681  001168  E123               	bnz	l7352
  3682  00116A                     l7332:
  3683                           
  3684                           ;vscp_firmware.c: 988: uint8_t bytes;
  3685                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  3686  00116A  0E07               	movlw	7
  3687  00116C  6E08               	movwf	?___lbmod,c
  3688  00116E  0100               	movlb	0	; () banked
  3689  001170  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3690  001172  EC17  F017         	call	___lbmod
  3691  001176  0A06               	xorlw	6
  3692  001178  E103               	bnz	l7336
  3693                           
  3694                           ;vscp_firmware.c: 991: bytes = 7;
  3695  00117A  0E07               	movlw	7
  3696  00117C  0100               	movlb	0	; () banked
  3697  00117E  D009               	goto	L2
  3698  001180                     l7336:
  3699                           
  3700                           ;vscp_firmware.c: 993: else {
  3701                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  3702  001180  0E07               	movlw	7
  3703  001182  6E08               	movwf	?___lbmod,c
  3704  001184  0100               	movlb	0	; () banked
  3705  001186  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3706  001188  EC17  F017         	call	___lbmod
  3707  00118C  0100               	movlb	0	; () banked
  3708  00118E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3709  001190  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3710  001192                     L2:
  3711  001192  6FB1               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;vscp_firmware.c: 995: }
  3715                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  3716  001194  51B1               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3717  001196  0F81               	addlw	129
  3718  001198  6F83               	movwf	_vscp_omsg& (0+255),b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  3722  00119A  0E07               	movlw	7
  3723  00119C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  3727  00119E  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3728  0011A0  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  3732  0011A2  0E1A               	movlw	26
  3733  0011A4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  3737  0011A6  C0B0  F088         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  3741  0011AA  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;vscp_firmware.c: 1005: pos++;
  3745  0011AE  2BB0               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3746  0011B0                     l7352:
  3747                           
  3748                           ; BSR set to: 0
  3749  0011B0  2BBE               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3750  0011B2                     l7354:
  3751                           
  3752                           ; BSR set to: 0
  3753  0011B2  51B2               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3754  0011B4  5DBE               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3755  0011B6  B0D8               	btfsc	status,0,c
  3756  0011B8  0012               	return	
  3757  0011BA  D7B4               	goto	l7326
  3758  0011BC                     l7356:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3762  0011BC  5170               	movf	_vscp_nickname& (0+255),w,b
  3763  0011BE  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3764  0011C2  62DF               	cpfseq	indf2,c
  3765  0011C4  0012               	return	
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;vscp_firmware.c: 1014: uint8_t i;
  3769                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  3770  0011C6  C07C  F0B3         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1133
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  3774  0011CA  5175               	movf	_vscp_imsg& (0+255),w,b
  3775  0011CC  0FFE               	addlw	254
  3776  0011CE  0B07               	andlw	7
  3777  0011D0  6FB4               	movwf	vscp_handleProtocolEvent@len_1134& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  3781  0011D2  6BB9               	clrf	vscp_handleProtocolEvent@i_1132& (0+255),b
  3782  0011D4  D016               	goto	l7370
  3783  0011D6                     l7364:
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  3787  0011D6  51B9               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3788  0011D8  0F7D               	addlw	low (_vscp_imsg+8)
  3789  0011DA  6ED9               	movwf	fsr2l,c
  3790  0011DC  6ADA               	clrf	fsr2h,c
  3791  0011DE  50DF               	movf	indf2,w,c
  3792  0011E0  6E18               	movwf	?_vscp_writeRegister,c
  3793  0011E2  51B3               	movf	vscp_handleProtocolEvent@pos_1133& (0+255),w,b
  3794  0011E4  25B9               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3795  0011E6  ECC9  F017         	call	_vscp_writeRegister
  3796                           
  3797                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  3798  0011EA  0100               	movlb	0	; () banked
  3799  0011EC  51B9               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3800  0011EE  0F89               	addlw	low (_vscp_omsg+6)
  3801  0011F0  6ED9               	movwf	fsr2l,c
  3802  0011F2  6ADA               	clrf	fsr2h,c
  3803  0011F4  51B3               	movf	vscp_handleProtocolEvent@pos_1133& (0+255),w,b
  3804  0011F6  25B9               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3805  0011F8  EC39  F018         	call	_vscp_readRegister
  3806  0011FC  6EDF               	movwf	indf2,c
  3807  0011FE  0100               	movlb	0	; () banked
  3808  001200  2BB9               	incf	vscp_handleProtocolEvent@i_1132& (0+255),f,b
  3809  001202                     l7370:
  3810                           
  3811                           ; BSR set to: 0
  3812  001202  51B4               	movf	vscp_handleProtocolEvent@len_1134& (0+255),w,b
  3813  001204  5DB9               	subwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3814  001206  E3E7               	bnc	l7364
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;vscp_firmware.c: 1022: }
  3818                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  3819  001208  0E07               	movlw	7
  3820  00120A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  3824  00120C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3825  00120E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3826                           
  3827                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  3828  001210  0E1A               	movlw	26
  3829  001212  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  3833  001214  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  3837  001216  51B4               	movf	vscp_handleProtocolEvent@len_1134& (0+255),w,b
  3838  001218  0F81               	addlw	129
  3839  00121A  6F83               	movwf	_vscp_omsg& (0+255),b
  3840  00121C  EF3E  F017         	goto	_vscp_sendEvent
  3841  001220                     l7382:
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3845  001220  5170               	movf	_vscp_nickname& (0+255),w,b
  3846  001222  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3847  001226  62DF               	cpfseq	indf2,c
  3848  001228  0012               	return	
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3852                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  3853                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  3854  00122A  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3855  00122C  ECAB  F014         	call	_vscp_readAppReg
  3856  001230  0100               	movlb	0	; () banked
  3857  001232  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3858  001234  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3859  001236  6E15               	movwf	?_vscp_writeAppReg,c
  3860  001238  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3861  00123A  ECA9  F010         	call	_vscp_writeAppReg
  3862  00123E  D68E               	goto	L1
  3863  001240                     l7398:
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3867  001240  5170               	movf	_vscp_nickname& (0+255),w,b
  3868  001242  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3869  001246  62DF               	cpfseq	indf2,c
  3870  001248  0012               	return	
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3874                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  3875                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  3876  00124A  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3877  00124C  ECAB  F014         	call	_vscp_readAppReg
  3878  001250  0100               	movlb	0	; () banked
  3879  001252  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3880  001254  05A4               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  3881  001256  6E15               	movwf	?_vscp_writeAppReg,c
  3882  001258  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3883  00125A  ECA9  F010         	call	_vscp_writeAppReg
  3884  00125E  D67E               	goto	L1
  3885  001260                     l7414:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  3889                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  3890  001260  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  3891  001262  1970               	xorwf	_vscp_nickname& (0+255),w,b
  3892  001264  E003               	bz	l1040
  3893                           
  3894                           ; BSR set to: 0
  3895  001266  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  3896  001268  A4D8               	btfss	status,2,c
  3897  00126A  0012               	return	
  3898  00126C                     l1040:
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  3902  00126C  6BB8               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  3906  00126E  0E03               	movlw	3
  3907  001270  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3908                           
  3909                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  3910  001272  0E88               	movlw	136
  3911  001274  6F83               	movwf	_vscp_omsg& (0+255),b
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  3915  001276  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3916  001278  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3917                           
  3918                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  3919  00127A  0E20               	movlw	32
  3920  00127C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3921                           
  3922                           ; BSR set to: 0
  3923                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  3924  00127E  6BBD               	clrf	vscp_handleProtocolEvent@i_1135& (0+255),b
  3925  001280                     l1041:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;vscp_firmware.c: 1091: {
  3929                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  3930  001280  C0BD  F088         	movff	vscp_handleProtocolEvent@i_1135,_vscp_omsg+5
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  3934  001284  0E01               	movlw	1
  3935  001286  6FBF               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  3936  001288                     l7434:
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  3940  001288  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3941  00128A  0F88               	addlw	low (_vscp_omsg+5)
  3942  00128C  6ED9               	movwf	fsr2l,c
  3943  00128E  6ADA               	clrf	fsr2h,c
  3944  001290  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3945  001292  080F               	sublw	15
  3946  001294  EC79  F018         	call	_vscp_getGUID
  3947  001298  6EDF               	movwf	indf2,c
  3948  00129A  0100               	movlb	0	; () banked
  3949  00129C  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;vscp_firmware.c: 1096: if (k > 16)
  3953  00129E  0E10               	movlw	16
  3954  0012A0  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3955  0012A2  D001               	goto	l7442
  3956  0012A4  D004               	goto	l7446
  3957  0012A6                     l7442:
  3958                           
  3959                           ; BSR set to: 0
  3960  0012A6  2BBF               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3961                           
  3962                           ; BSR set to: 0
  3963  0012A8  0E07               	movlw	7
  3964  0012AA  65BF               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3965  0012AC  D7ED               	goto	l7434
  3966  0012AE                     l7446:
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;vscp_firmware.c: 1098: }
  3970                           ;vscp_firmware.c: 1100: if (k > 16)
  3971  0012AE  0E10               	movlw	16
  3972  0012B0  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3973  0012B2  D001               	goto	l7450
  3974  0012B4  D006               	goto	l1042
  3975  0012B6                     l7450:
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  3979  0012B6  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  3980                           
  3981                           ; BSR set to: 0
  3982  0012BA  2BBD               	incf	vscp_handleProtocolEvent@i_1135& (0+255),f,b
  3983                           
  3984                           ; BSR set to: 0
  3985  0012BC  0E02               	movlw	2
  3986  0012BE  65BD               	cpfsgt	vscp_handleProtocolEvent@i_1135& (0+255),b
  3987  0012C0  D7DF               	goto	l1041
  3988  0012C2                     l1042:
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;vscp_firmware.c: 1104: }
  3992                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  3993  0012C2  6BBF               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  3994  0012C4                     l7460:
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;vscp_firmware.c: 1107: {
  3998                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  3999  0012C4  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4000  0012C6  EC13  F018         	call	_vscp_getMDF_URL
  4001  0012CA  0900               	iorlw	0
  4002  0012CC  E008               	bz	l7464
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  4006  0012CE  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4007  0012D0  0F8B               	addlw	low (_vscp_omsg+8)
  4008  0012D2  6ED9               	movwf	fsr2l,c
  4009  0012D4  6ADA               	clrf	fsr2h,c
  4010  0012D6  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4011  0012D8  EC13  F018         	call	_vscp_getMDF_URL
  4012  0012DC  D005               	goto	L3
  4013  0012DE                     l7464:
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;vscp_firmware.c: 1110: else
  4017                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  4018  0012DE  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4019  0012E0  0F8B               	addlw	low (_vscp_omsg+8)
  4020  0012E2  6ED9               	movwf	fsr2l,c
  4021  0012E4  6ADA               	clrf	fsr2h,c
  4022  0012E6  0E00               	movlw	0
  4023  0012E8                     L3:
  4024  0012E8  6EDF               	movwf	indf2,c
  4025                           
  4026                           ; BSR set to: 0
  4027  0012EA  2BBF               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4028                           
  4029                           ; BSR set to: 0
  4030  0012EC  0E04               	movlw	4
  4031  0012EE  65BF               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4032  0012F0  D7E9               	goto	l7460
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;vscp_firmware.c: 1112: }
  4036                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  4037  0012F2  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;vscp_firmware.c: 1116: k = 5;
  4041  0012F6  0E05               	movlw	5
  4042  0012F8  6FB8               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  4046  0012FA  0E03               	movlw	3
  4047  0012FC  6FBD               	movwf	vscp_handleProtocolEvent@i_1135& (0+255),b
  4048  0012FE                     l1051:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;vscp_firmware.c: 1118: {
  4052                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  4053  0012FE  C0BD  F088         	movff	vscp_handleProtocolEvent@i_1135,_vscp_omsg+5
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  4057  001302  0E01               	movlw	1
  4058  001304  6FBF               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4059  001306                     l7486:
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  4063  001306  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4064  001308  0F88               	addlw	low (_vscp_omsg+5)
  4065  00130A  6ED9               	movwf	fsr2l,c
  4066  00130C  6ADA               	clrf	fsr2h,c
  4067  00130E  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4068  001310  EC13  F018         	call	_vscp_getMDF_URL
  4069  001314  6EDF               	movwf	indf2,c
  4070                           
  4071                           ; BSR set to: 0
  4072  001316  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4073                           
  4074                           ; BSR set to: 0
  4075  001318  2BBF               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4076                           
  4077                           ; BSR set to: 0
  4078  00131A  0E07               	movlw	7
  4079  00131C  65BF               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4080  00131E  D7F3               	goto	l7486
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;vscp_firmware.c: 1123: }
  4084                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  4085  001320  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  4086                           
  4087                           ; BSR set to: 0
  4088  001324  2BBD               	incf	vscp_handleProtocolEvent@i_1135& (0+255),f,b
  4089                           
  4090                           ; BSR set to: 0
  4091  001326  0E06               	movlw	6
  4092  001328  65BD               	cpfsgt	vscp_handleProtocolEvent@i_1135& (0+255),b
  4093  00132A  D7E9               	goto	l1051
  4094  00132C  0C06               	retlw	6
  4095  00132E                     l7500:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4099  00132E  5170               	movf	_vscp_nickname& (0+255),w,b
  4100  001330  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4101  001334  62DF               	cpfseq	indf2,c
  4102  001336  0012               	return	
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  4106  001338  0E03               	movlw	3
  4107  00133A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4108                           
  4109                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  4110  00133C  0E87               	movlw	135
  4111  00133E  6F83               	movwf	_vscp_omsg& (0+255),b
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  4115  001340  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4116  001342  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4117                           
  4118                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  4119  001344  0E22               	movlw	34
  4120  001346  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  4124  001348  0E88               	movlw	(_vscp_omsg+5)& (0+255)
  4125  00134A  EC9A  F017         	call	_vscp_getMatrixInfo
  4126  00134E  EF3E  F017         	goto	_vscp_sendEvent
  4127  001352                     l7510:
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  4131  001352  5170               	movf	_vscp_nickname& (0+255),w,b
  4132  001354  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4133  001358  62DF               	cpfseq	indf2,c
  4134  00135A  0012               	return	
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  4138  00135C  6BBA               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  4142                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  4143  00135E  C075  F0A4         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  4144  001362  0E0F               	movlw	15
  4145  001364  17A4               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4146  001366  0E04               	movlw	4
  4147  001368  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4148  00136A  E312               	bnc	l7526
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  4152  00136C  C07F  F0BB         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1139
  4153  001370  6BBC               	clrf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  4157  001372  51BC               	movf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4158  001374  11BB               	iorwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4159  001376  E103               	bnz	l7522
  4160                           
  4161                           ; BSR set to: 0
  4162  001378  0E01               	movlw	1
  4163  00137A  6FBC               	movwf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4164  00137C  6BBB               	clrf	vscp_handleProtocolEvent@bytes_1139& (0+255),b
  4165  00137E                     l7522:
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  4169  00137E  0E01               	movlw	1
  4170  001380  5DBB               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4171  001382  0E01               	movlw	1
  4172  001384  59BC               	subwfb	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4173  001386  E307               	bnc	l7528
  4174                           
  4175                           ; BSR set to: 0
  4176  001388  0E01               	movlw	1
  4177  00138A  6FBC               	movwf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4178  00138C  0E00               	movlw	0
  4179  00138E  D002               	goto	L4
  4180  001390                     l7526:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;vscp_firmware.c: 1173: else {
  4184                           ;vscp_firmware.c: 1174: bytes = 1;
  4185  001390  6BBC               	clrf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4186  001392  0E01               	movlw	1
  4187  001394                     L4:
  4188  001394  6FBB               	movwf	vscp_handleProtocolEvent@bytes_1139& (0+255),b
  4189  001396                     l7528:
  4190                           
  4191                           ; BSR set to: 0
  4192                           ;vscp_firmware.c: 1175: }
  4193                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  4194  001396  C052  F0AB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4195  00139A  C053  F0AC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4199  00139E  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4200  0013A0  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4201  0013A4  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4202  0013A6  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4203  0013AA  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4204  0013AC  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4205  0013AE  6E52               	movwf	_vscp_page_select,c
  4206  0013B0  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4207  0013B2  6E53               	movwf	_vscp_page_select+1,c
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  4211  0013B4  0E07               	movlw	7
  4212  0013B6  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  4216  0013B8  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4217  0013BA  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  4221  0013BC  0E27               	movlw	39
  4222  0013BE  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  4226  0013C0  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  4230  0013C2  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  4234  0013C6  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4235  0013CA                     l7544:
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  4239  0013CA  51BA               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4240  0013CC  5DBB               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4241  0013CE  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4242  0013D0  0E00               	movlw	0
  4243  0013D2  59BC               	subwfb	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4244  0013D4  6FA5               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4245  0013D6  0E04               	movlw	4
  4246  0013D8  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4247  0013DA  0E00               	movlw	0
  4248  0013DC  59A5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4249  0013DE  E302               	bnc	l7548
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  4253  0013E0  0E04               	movlw	4
  4254  0013E2  D002               	goto	L5
  4255  0013E4                     l7548:
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;vscp_firmware.c: 1198: else {
  4259                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  4260  0013E4  51BA               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4261  0013E6  5DBB               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4262  0013E8                     L5:
  4263  0013E8  6FB5               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;vscp_firmware.c: 1200: }
  4267                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4268  0013EA  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4269  0013EC  0F84               	addlw	132
  4270  0013EE  6F83               	movwf	_vscp_omsg& (0+255),b
  4271                           
  4272                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  4273                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  4274  0013F0  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4275  0013F2  25BA               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4276  0013F4  6F8B               	movwf	(_vscp_omsg+8)& (0+255),b
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4280  0013F6  6BB6               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4281  0013F8  D00C               	goto	l7556
  4282  0013FA                     l7552:
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  4286                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4287  0013FA  51B6               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4288  0013FC  0F8C               	addlw	low (_vscp_omsg+9)
  4289  0013FE  6ED9               	movwf	fsr2l,c
  4290  001400  6ADA               	clrf	fsr2h,c
  4291  001402  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4292  001404  25BA               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4293  001406  25B6               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4294  001408  EC39  F018         	call	_vscp_readRegister
  4295  00140C  6EDF               	movwf	indf2,c
  4296  00140E  0100               	movlb	0	; () banked
  4297  001410  2BB6               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4298  001412                     l7556:
  4299                           
  4300                           ; BSR set to: 0
  4301  001412  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4302  001414  5DB6               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4303  001416  E3F1               	bnc	l7552
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;vscp_firmware.c: 1211: }
  4307                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  4308  001418  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  4312  00141C  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4313  00141E  27BA               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  4317  001420  2B88               	incf	(_vscp_omsg+5)& (0+255),f,b
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  4321  001422  51BA               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4322  001424  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4323  001426  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4324  001428  51BB               	movf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4325  00142A  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4326  00142C  51BC               	movf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4327  00142E  59A5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4328  001430  E3CC               	bnc	l7544
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  4332  001432  C0AB  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4333  001436  C0AC  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4334  00143A  0012               	return	
  4335  00143C                     l7566:
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4339  00143C  5170               	movf	_vscp_nickname& (0+255),w,b
  4340  00143E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4341  001442  62DF               	cpfseq	indf2,c
  4342  001444  0012               	return	
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;vscp_firmware.c: 1234: uint8_t i;
  4346                           ;vscp_firmware.c: 1235: uint16_t page_save;
  4347                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  4348  001446  C052  F0AD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1144
  4349  00144A  C053  F0AE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1144+1
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4353  00144E  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4354  001450  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4355  001454  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4356  001456  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4357  00145A  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4358  00145C  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4359  00145E  6E52               	movwf	_vscp_page_select,c
  4360  001460  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4361  001462  6E53               	movwf	_vscp_page_select+1,c
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  4365  001464  C07E  F0B7         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1143
  4366                           
  4367                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4368                           ;vscp_firmware.c: 1248: i++) {
  4369  001468  D012               	goto	l7578
  4370  00146A                     l7574:
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4374                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4375  00146A  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4376  00146C  088C               	sublw	low (_vscp_omsg+9)
  4377  00146E  25B7               	addwf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4378  001470  6ED9               	movwf	fsr2l,c
  4379  001472  6ADA               	clrf	fsr2h,c
  4380  001474  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4381  001476  087F               	sublw	low (_vscp_imsg+10)
  4382  001478  25B7               	addwf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4383  00147A  6EE1               	movwf	fsr1l,c
  4384  00147C  6AE2               	clrf	fsr1h,c
  4385  00147E  50E7               	movf	indf1,w,c
  4386  001480  6E18               	movwf	?_vscp_writeRegister,c
  4387  001482  51B7               	movf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4388  001484  ECC9  F017         	call	_vscp_writeRegister
  4389  001488  6EDF               	movwf	indf2,c
  4390  00148A  0100               	movlb	0	; () banked
  4391  00148C  2BB7               	incf	vscp_handleProtocolEvent@i_1143& (0+255),f,b
  4392  00148E                     l7578:
  4393                           
  4394                           ; BSR set to: 0
  4395  00148E  5175               	movf	_vscp_imsg& (0+255),w,b
  4396  001490  0B0F               	andlw	15
  4397  001492  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4398  001494  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4399  001496  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4400  001498  27A4               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4401  00149A  0E00               	movlw	0
  4402  00149C  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4403  00149E  0EFC               	movlw	252
  4404  0014A0  25A4               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4405  0014A2  6FA6               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4406  0014A4  0EFF               	movlw	255
  4407  0014A6  21A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4408  0014A8  6FA7               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4409  0014AA  51B7               	movf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4410  0014AC  6FA8               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4411  0014AE  6BA9               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4412  0014B0  51A9               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4413  0014B2  0A80               	xorlw	128
  4414  0014B4  6FAA               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4415  0014B6  51A6               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4416  0014B8  5DA8               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4417  0014BA  51A7               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4418  0014BC  0A80               	xorlw	128
  4419  0014BE  59AA               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4420  0014C0  E3D4               	bnc	l7574
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;vscp_firmware.c: 1251: }
  4424                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  4425  0014C2  C0AD  F052         	movff	vscp_handleProtocolEvent@page_save_1144,_vscp_page_select
  4426  0014C6  C0AE  F053         	movff	vscp_handleProtocolEvent@page_save_1144+1,_vscp_page_select+1
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  4430  0014CA  0E07               	movlw	7
  4431  0014CC  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4435  0014CE  5175               	movf	_vscp_imsg& (0+255),w,b
  4436  0014D0  0B0F               	andlw	15
  4437  0014D2  0F80               	addlw	128
  4438  0014D4  6F83               	movwf	_vscp_omsg& (0+255),b
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  4442  0014D6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4443  0014D8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  4447  0014DA  0E27               	movlw	39
  4448  0014DC  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  4452  0014DE  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  4456  0014E0  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  4460  0014E4  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  4464  0014E8  C07E  F08B         	movff	_vscp_imsg+9,_vscp_omsg+8
  4465  0014EC  EF3E  F017         	goto	_vscp_sendEvent
  4466  0014F0                     l7600:
  4467                           
  4468                           ; BSR set to: 0
  4469  0014F0  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  4470                           
  4471                           ; Switch size 1, requested type "speed"
  4472                           ; Number of cases is 16, Range of values is 1 to 38
  4473                           ; switch strategies available:
  4474                           ; Name         Instructions Cycles
  4475                           ; simple_byte           49    25 (average)
  4476                           ;	Chosen strategy is simple_byte
  4477  0014F2  0A01               	xorlw	1	; case 1
  4478  0014F4  E101 D51A          	bz	l7182
  4479  0014F8  0A03               	xorlw	3	; case 2
  4480  0014FA  E101 D519          	bz	l7184
  4481  0014FE  0A04               	xorlw	4	; case 6
  4482  001500  E101 D518          	bz	l7186
  4483  001504  0A0E               	xorlw	14	; case 8
  4484  001506  E101 D517          	bz	l7188
  4485  00150A  0A01               	xorlw	1	; case 9
  4486  00150C  E101 D516          	bz	l7190
  4487  001510  0A02               	xorlw	2	; case 11
  4488  001512  E101 D535          	bz	l7224
  4489  001516  0A07               	xorlw	7	; case 12
  4490  001518  E101 D54B          	bz	l7258
  4491  00151C  0A1B               	xorlw	27	; case 23
  4492  00151E  E101 D5DF          	bz	l7316
  4493  001522  0A0F               	xorlw	15	; case 24
  4494  001524  E101 D5F2          	bz	l7322
  4495  001528  0A01               	xorlw	1	; case 25
  4496  00152A  E101 D647          	bz	l7356
  4497  00152E  0A04               	xorlw	4	; case 29
  4498  001530  E101 D676          	bz	l7382
  4499  001534  0A03               	xorlw	3	; case 30
  4500  001536  E101 D683          	bz	l7398
  4501  00153A  0A01               	xorlw	1	; case 31
  4502  00153C  E101 D690          	bz	l7414
  4503  001540  0A3E               	xorlw	62	; case 33
  4504  001542  E101 D6F4          	bz	l7500
  4505  001546  0A04               	xorlw	4	; case 37
  4506  001548  E101 D703          	bz	l7510
  4507  00154C  0A03               	xorlw	3	; case 38
  4508  00154E  A4D8               	btfss	status,2,c
  4509  001550  0012               	return	
  4510  001552  D774               	goto	l7566
  4511  001554                     __end_of_vscp_handleProtocolEvent:
  4512                           	opt stack 0
  4513                           prodh	equ	0xFF4
  4514                           prodl	equ	0xFF3
  4515                           postinc0	equ	0xFEE
  4516                           wreg	equ	0xFE8
  4517                           indf1	equ	0xFE7
  4518                           fsr1h	equ	0xFE2
  4519                           fsr1l	equ	0xFE1
  4520                           indf2	equ	0xFDF
  4521                           postinc2	equ	0xFDE
  4522                           postdec2	equ	0xFDD
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function ___lbmod *****************
  4528 ;; Defined at:
  4529 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  dividend        1    wreg     unsigned char 
  4532 ;;  divisor         1    7[COMRAM] unsigned char 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;  dividend        1    8[COMRAM] unsigned char 
  4535 ;;  rem             1   10[COMRAM] unsigned char 
  4536 ;;  counter         1    9[COMRAM] unsigned char 
  4537 ;; Return value:  Size  Location     Type
  4538 ;;                  1    wreg      unsigned char 
  4539 ;; Registers used:
  4540 ;;		wreg, status,2, status,0
  4541 ;; Tracked objects:
  4542 ;;		On entry : F/0
  4543 ;;		On exit  : 0/0
  4544 ;;		Unchanged: 0/0
  4545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4546 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4547 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4550 ;;Total ram usage:        4 bytes
  4551 ;; Hardware stack levels used:    1
  4552 ;; Hardware stack levels required when called:    2
  4553 ;; This function calls:
  4554 ;;		Nothing
  4555 ;; This function is called by:
  4556 ;;		_vscp_handleProtocolEvent
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text15
  4561  002E2E                     __ptext15:
  4562                           	opt stack 0
  4563  002E2E                     ___lbmod:
  4564                           	opt stack 27
  4565                           
  4566                           ;incstack = 0
  4567                           ;incstack = 0
  4568                           ;___lbmod@dividend stored from wreg
  4569  002E2E  CFE8 F009          	movff	wreg,___lbmod@dividend
  4570                           
  4571                           ; BSR set to: 0
  4572  002E32  0E08               	movlw	8
  4573  002E34  6E0A               	movwf	___lbmod@counter,c
  4574                           
  4575                           ; BSR set to: 0
  4576  002E36  6A0B               	clrf	___lbmod@rem,c
  4577  002E38                     l5678:
  4578  002E38  90D8               	bcf	status,0,c
  4579  002E3A  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4580  002E3C  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4581  002E3E  6E0B               	movwf	___lbmod@rem,c
  4582  002E40  90D8               	bcf	status,0,c
  4583  002E42  3609               	rlcf	___lbmod@dividend,f,c
  4584  002E44  5008               	movf	___lbmod@divisor,w,c
  4585  002E46  5C0B               	subwf	___lbmod@rem,w,c
  4586  002E48  E302               	bnc	l5686
  4587  002E4A  5008               	movf	___lbmod@divisor,w,c
  4588  002E4C  5E0B               	subwf	___lbmod@rem,f,c
  4589  002E4E                     l5686:
  4590  002E4E  2E0A               	decfsz	___lbmod@counter,f,c
  4591  002E50  D7F3               	goto	l5678
  4592  002E52  500B               	movf	___lbmod@rem,w,c
  4593  002E54  0012               	return	
  4594  002E56                     __end_of___lbmod:
  4595                           	opt stack 0
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           postinc0	equ	0xFEE
  4599                           wreg	equ	0xFE8
  4600                           indf1	equ	0xFE7
  4601                           fsr1h	equ	0xFE2
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           fsr2h	equ	0xFDA
  4607                           fsr2l	equ	0xFD9
  4608                           status	equ	0xFD8
  4609                           
  4610 ;; *************** function _vscp_writeRegister *****************
  4611 ;; Defined at:
  4612 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  reg             1    wreg     unsigned char 
  4615 ;;  value           1   23[COMRAM] unsigned char 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;  reg             1   24[COMRAM] unsigned char 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    wreg      unsigned char 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : F/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4627 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4628 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4631 ;;Total ram usage:        2 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    6
  4634 ;; This function calls:
  4635 ;;		_vscp_writeAppReg
  4636 ;;		_vscp_writeStdReg
  4637 ;; This function is called by:
  4638 ;;		_vscp_handleProtocolEvent
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text16
  4643  002F92                     __ptext16:
  4644                           	opt stack 0
  4645  002F92                     _vscp_writeRegister:
  4646                           	opt stack 23
  4647                           
  4648                           ;incstack = 0
  4649                           ;incstack = 0
  4650                           ;vscp_writeRegister@reg stored from wreg
  4651  002F92  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  4655  002F96  0E7F               	movlw	127
  4656  002F98  6419               	cpfsgt	vscp_writeRegister@reg,c
  4657  002F9A  D005               	goto	l6996
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  4661  002F9C  C018  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4662  002FA0  5019               	movf	vscp_writeRegister@reg,w,c
  4663  002FA2  EFD0  F011         	goto	_vscp_writeStdReg
  4664  002FA6                     l6996:
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;vscp_firmware.c: 705: else {
  4668                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  4669  002FA6  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4670  002FAA  5019               	movf	vscp_writeRegister@reg,w,c
  4671  002FAC  EFA9  F010         	goto	_vscp_writeAppReg
  4672  002FB0                     __end_of_vscp_writeRegister:
  4673                           	opt stack 0
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           indf1	equ	0xFE7
  4679                           fsr1h	equ	0xFE2
  4680                           fsr1l	equ	0xFE1
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688 ;; *************** function _vscp_writeStdReg *****************
  4689 ;; Defined at:
  4690 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  4691 ;; Parameters:    Size  Location     Type
  4692 ;;  reg             1    wreg     unsigned char 
  4693 ;;  value           1   15[COMRAM] unsigned char 
  4694 ;; Auto vars:     Size  Location     Type
  4695 ;;  reg             1   21[COMRAM] unsigned char 
  4696 ;;  rv              1   20[COMRAM] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      unsigned char 
  4699 ;; Registers used:
  4700 ;;		wreg, status,2, status,0, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : F/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4706 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4707 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4708 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4709 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4710 ;;Total ram usage:        7 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    5
  4713 ;; This function calls:
  4714 ;;		_vscp_setGUID
  4715 ;;		_vscp_setManufacturerId
  4716 ;;		_vscp_getGUID
  4717 ;;		_vscp_getUserID
  4718 ;;		_vscp_setUserID
  4719 ;;		_vscp_getManufacturerId
  4720 ;;		_vscp_restoreDefaults
  4721 ;; This function is called by:
  4722 ;;		_vscp_writeRegister
  4723 ;;		_vscp_handleProtocolEvent
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text17
  4728  0023A0                     __ptext17:
  4729                           	opt stack 0
  4730  0023A0                     _vscp_writeStdReg:
  4731                           	opt stack 24
  4732                           
  4733                           ;incstack = 0
  4734                           ;incstack = 0
  4735                           ;vscp_writeStdReg@reg stored from wreg
  4736  0023A0  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  4737                           
  4738                           ; BSR set to: 0
  4739                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  4740  0023A4  1C10               	comf	vscp_writeStdReg@value,w,c
  4741  0023A6  6E15               	movwf	vscp_writeStdReg@rv,c
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  4745                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  4746  0023A8  0E83               	movlw	131
  4747  0023AA  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4748  0023AC  D00E               	goto	l7008
  4749                           
  4750                           ; BSR set to: 0
  4751  0023AE  0E89               	movlw	137
  4752  0023B0  6016               	cpfslt	vscp_writeStdReg@reg,c
  4753  0023B2  D00B               	goto	l7008
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  4757  0023B4  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  4758  0023B8  5016               	movf	vscp_writeStdReg@reg,w,c
  4759  0023BA  0F7C               	addlw	124
  4760  0023BC  EC05  F018         	call	_vscp_setUserID
  4761                           
  4762                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  4763  0023C0  5016               	movf	vscp_writeStdReg@reg,w,c
  4764  0023C2  0F7C               	addlw	124
  4765  0023C4  EC6F  F018         	call	_vscp_getUserID
  4766  0023C8  D069               	goto	L11
  4767  0023CA                     l7008:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  4771  0023CA  5016               	movf	vscp_writeStdReg@reg,w,c
  4772  0023CC  0A92               	xorlw	146
  4773  0023CE  E10D               	bnz	l7014
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  4777  0023D0  5010               	movf	vscp_writeStdReg@value,w,c
  4778  0023D2  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4779  0023D4  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  4780  0023D6  5052               	movf	_vscp_page_select,w,c
  4781  0023D8  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  4782  0023DA  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  4783  0023DC  1011               	iorwf	??_vscp_writeStdReg,w,c
  4784  0023DE  6E52               	movwf	_vscp_page_select,c
  4785  0023E0  5012               	movf	??_vscp_writeStdReg+1,w,c
  4786  0023E2  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  4787  0023E4  6E53               	movwf	_vscp_page_select+1,c
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  4791  0023E6  5053               	movf	_vscp_page_select+1,w,c
  4792  0023E8  D059               	goto	L11
  4793  0023EA                     l7014:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  4797  0023EA  5016               	movf	vscp_writeStdReg@reg,w,c
  4798  0023EC  0A93               	xorlw	147
  4799  0023EE  E10B               	bnz	l7020
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  4803  0023F0  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  4804  0023F2  5053               	movf	_vscp_page_select+1,w,c
  4805  0023F4  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4806  0023F6  5010               	movf	vscp_writeStdReg@value,w,c
  4807  0023F8  1011               	iorwf	??_vscp_writeStdReg,w,c
  4808  0023FA  6E52               	movwf	_vscp_page_select,c
  4809  0023FC  5012               	movf	??_vscp_writeStdReg+1,w,c
  4810  0023FE  6E53               	movwf	_vscp_page_select+1,c
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  4814  002400  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  4815                           
  4816                           ;vscp_firmware.c: 737: }
  4817  002404  D04E               	goto	l7062
  4818  002406                     l7020:
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  4822  002406  0E88               	movlw	136
  4823  002408  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4824  00240A  D019               	goto	l7032
  4825                           
  4826                           ; BSR set to: 0
  4827  00240C  0E91               	movlw	145
  4828  00240E  6016               	cpfslt	vscp_writeStdReg@reg,c
  4829  002410  D016               	goto	l7032
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4833                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  4834  002412  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4835  002416  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4836  00241A  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4837  00241C  2812               	incf	??_vscp_writeStdReg+1,w,c
  4838  00241E  E102               	bnz	l7028
  4839                           
  4840                           ; BSR set to: 0
  4841  002420  2852               	incf	_vscp_page_select,w,c
  4842  002422  E002               	bz	l7030
  4843  002424                     l7028:
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;vscp_firmware.c: 747: rv = ~value;
  4847  002424  1C10               	comf	vscp_writeStdReg@value,w,c
  4848  002426  D03A               	goto	L11
  4849  002428                     l7030:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;vscp_firmware.c: 749: else {
  4853                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  4854  002428  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  4855  00242C  5016               	movf	vscp_writeStdReg@reg,w,c
  4856  00242E  0F77               	addlw	119
  4857  002430  EC64  F017         	call	_vscp_setManufacturerId
  4858                           
  4859                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  4860  002434  5016               	movf	vscp_writeStdReg@reg,w,c
  4861  002436  0F77               	addlw	119
  4862  002438  EC65  F018         	call	_vscp_getManufacturerId
  4863  00243C  D02F               	goto	L11
  4864  00243E                     l7032:
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  4868  00243E  0ECF               	movlw	207
  4869  002440  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4870  002442  D017               	goto	l7044
  4871                           
  4872                           ; BSR set to: 0
  4873  002444  0EE0               	movlw	224
  4874  002446  6016               	cpfslt	vscp_writeStdReg@reg,c
  4875  002448  D014               	goto	l7044
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4879                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  4880  00244A  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4881  00244E  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4882  002452  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4883  002454  2812               	incf	??_vscp_writeStdReg+1,w,c
  4884  002456  E1E6               	bnz	l7028
  4885                           
  4886                           ; BSR set to: 0
  4887  002458  2852               	incf	_vscp_page_select,w,c
  4888  00245A  E1E4               	bnz	l7028
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;vscp_firmware.c: 762: else {
  4892                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  4893  00245C  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  4894  002460  5016               	movf	vscp_writeStdReg@reg,w,c
  4895  002462  0F30               	addlw	48
  4896  002464  EC76  F017         	call	_vscp_setGUID
  4897                           
  4898                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  4899  002468  5016               	movf	vscp_writeStdReg@reg,w,c
  4900  00246A  0F30               	addlw	48
  4901  00246C  EC79  F018         	call	_vscp_getGUID
  4902  002470  D015               	goto	L11
  4903  002472                     l7044:
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  4907  002472  5016               	movf	vscp_writeStdReg@reg,w,c
  4908  002474  0AA2               	xorlw	162
  4909  002476  E1D6               	bnz	l7028
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  4913  002478  5010               	movf	vscp_writeStdReg@value,w,c
  4914  00247A  0A55               	xorlw	85
  4915  00247C  E104               	bnz	l7052
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  4919  00247E  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  4920  002480  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;vscp_firmware.c: 771: rv = 0x55;
  4924  002482  0E55               	movlw	85
  4925  002484  D00B               	goto	L11
  4926  002486                     l7052:
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  4930  002486  5010               	movf	vscp_writeStdReg@value,w,c
  4931  002488  0AAA               	xorlw	170
  4932  00248A  E10B               	bnz	l7062
  4933                           
  4934                           ; BSR set to: 0
  4935                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  4936  00248C  0EE8               	movlw	232
  4937  00248E  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  4938  002490  0E03               	movlw	3
  4939  002492  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  4940  002494  E205               	bc	l982
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  4944  002496  ECBC  F018         	call	_vscp_restoreDefaults	;wreg free
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;vscp_firmware.c: 776: rv = 0xaa;
  4948  00249A  0EAA               	movlw	170
  4949  00249C                     L11:
  4950  00249C  6E15               	movwf	vscp_writeStdReg@rv,c
  4951                           
  4952                           ;vscp_firmware.c: 777: }
  4953  00249E  D001               	goto	l7062
  4954  0024A0                     l982:
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;vscp_firmware.c: 778: else {
  4958                           ;vscp_firmware.c: 779: rv = 0;
  4959  0024A0  6A15               	clrf	vscp_writeStdReg@rv,c
  4960  0024A2                     l7062:
  4961                           
  4962                           ;vscp_firmware.c: 787: }
  4963                           ;vscp_firmware.c: 789: return rv;
  4964  0024A2  5015               	movf	vscp_writeStdReg@rv,w,c
  4965  0024A4  0012               	return	
  4966  0024A6                     __end_of_vscp_writeStdReg:
  4967                           	opt stack 0
  4968                           prodh	equ	0xFF4
  4969                           prodl	equ	0xFF3
  4970                           postinc0	equ	0xFEE
  4971                           wreg	equ	0xFE8
  4972                           indf1	equ	0xFE7
  4973                           fsr1h	equ	0xFE2
  4974                           fsr1l	equ	0xFE1
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982 ;; *************** function _vscp_restoreDefaults *****************
  4983 ;; Defined at:
  4984 ;;		line 1428 in file "../main.c"
  4985 ;; Parameters:    Size  Location     Type
  4986 ;;		None
  4987 ;; Auto vars:     Size  Location     Type
  4988 ;;		None
  4989 ;; Return value:  Size  Location     Type
  4990 ;;		None               void
  4991 ;; Registers used:
  4992 ;;		wreg, status,2, status,0, cstack
  4993 ;; Tracked objects:
  4994 ;;		On entry : F/0
  4995 ;;		On exit  : F/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5002 ;;Total ram usage:        0 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    4
  5005 ;; This function calls:
  5006 ;;		_init_app_eeprom
  5007 ;;		_init_app_ram
  5008 ;; This function is called by:
  5009 ;;		_vscp_writeStdReg
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text18
  5014  003178                     __ptext18:
  5015                           	opt stack 0
  5016  003178                     _vscp_restoreDefaults:
  5017                           	opt stack 24
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;main.c: 1429: init_app_eeprom();
  5021                           
  5022                           ;incstack = 0
  5023                           ;incstack = 0
  5024  003178  EC8F  F013         	call	_init_app_eeprom	;wreg free
  5025                           
  5026                           ;main.c: 1430: init_app_ram();
  5027  00317C  EF83  F018         	goto	_init_app_ram	;wreg free
  5028  003180                     __end_of_vscp_restoreDefaults:
  5029                           	opt stack 0
  5030                           prodh	equ	0xFF4
  5031                           prodl	equ	0xFF3
  5032                           postinc0	equ	0xFEE
  5033                           wreg	equ	0xFE8
  5034                           indf1	equ	0xFE7
  5035                           fsr1h	equ	0xFE2
  5036                           fsr1l	equ	0xFE1
  5037                           indf2	equ	0xFDF
  5038                           postinc2	equ	0xFDE
  5039                           postdec2	equ	0xFDD
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044 ;; *************** function _init_app_eeprom *****************
  5045 ;; Defined at:
  5046 ;;		line 427 in file "../main.c"
  5047 ;; Parameters:    Size  Location     Type
  5048 ;;		None
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  i               1   14[COMRAM] unsigned char 
  5051 ;;  j               1   13[COMRAM] unsigned char 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;		None               void
  5054 ;; Registers used:
  5055 ;;		wreg, status,2, status,0, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/E
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5062 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5064 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5065 ;;Total ram usage:        4 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    3
  5068 ;; This function calls:
  5069 ;;		_Busy_eep
  5070 ;;		_Write_b_eep
  5071 ;; This function is called by:
  5072 ;;		_main
  5073 ;;		_vscp_restoreDefaults
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text19
  5078  00271E                     __ptext19:
  5079                           	opt stack 0
  5080  00271E                     _init_app_eeprom:
  5081                           	opt stack 24
  5082                           
  5083                           ;main.c: 428: unsigned char i, j;
  5084                           ;main.c: 430: (Busy_eep(), Write_b_eep(0x21 + 0,0));
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;incstack = 0
  5088                           ;incstack = 0
  5089  00271E  ECC0  F018         	call	_Busy_eep	;wreg free
  5090  002722  6A09               	clrf	?_Write_b_eep+1,c
  5091  002724  0E21               	movlw	33
  5092  002726  6E08               	movwf	?_Write_b_eep,c
  5093  002728  0E00               	movlw	0
  5094  00272A  6A0A               	clrf	?_Write_b_eep+2,c
  5095  00272C  EC6C  F016         	call	_Write_b_eep	;wreg free
  5096                           
  5097                           ;main.c: 431: (Busy_eep(), Write_b_eep(0x21 + 1,0));
  5098  002730  ECC0  F018         	call	_Busy_eep	;wreg free
  5099  002734  6A09               	clrf	?_Write_b_eep+1,c
  5100  002736  0E22               	movlw	34
  5101  002738  6E08               	movwf	?_Write_b_eep,c
  5102  00273A  0E00               	movlw	0
  5103  00273C  6A0A               	clrf	?_Write_b_eep+2,c
  5104  00273E  EC6C  F016         	call	_Write_b_eep	;wreg free
  5105                           
  5106                           ;main.c: 433: for ( i=3; i<21; i++ ) {
  5107  002742  0E03               	movlw	3
  5108  002744  6E0F               	movwf	init_app_eeprom@i,c
  5109  002746                     l3902:
  5110                           
  5111                           ;main.c: 434: (Busy_eep(), Write_b_eep(0x21 + 5 + (i-3),i));
  5112  002746  ECC0  F018         	call	_Busy_eep	;wreg free
  5113  00274A  0E23               	movlw	35
  5114  00274C  240F               	addwf	init_app_eeprom@i,w,c
  5115  00274E  6E08               	movwf	?_Write_b_eep,c
  5116  002750  6A09               	clrf	?_Write_b_eep+1,c
  5117  002752  0E00               	movlw	0
  5118  002754  2209               	addwfc	?_Write_b_eep+1,f,c
  5119  002756  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  5120  00275A  EC6C  F016         	call	_Write_b_eep	;wreg free
  5121  00275E  2A0F               	incf	init_app_eeprom@i,f,c
  5122  002760  0E14               	movlw	20
  5123  002762  640F               	cpfsgt	init_app_eeprom@i,c
  5124  002764  D7F0               	goto	l3902
  5125                           
  5126                           ;main.c: 435: }
  5127                           ;main.c: 437: (Busy_eep(), Write_b_eep(0x21 + 2,0));
  5128  002766  ECC0  F018         	call	_Busy_eep	;wreg free
  5129  00276A  6A09               	clrf	?_Write_b_eep+1,c
  5130  00276C  0E23               	movlw	35
  5131  00276E  6E08               	movwf	?_Write_b_eep,c
  5132  002770  0E00               	movlw	0
  5133  002772  6A0A               	clrf	?_Write_b_eep+2,c
  5134  002774  EC6C  F016         	call	_Write_b_eep	;wreg free
  5135                           
  5136                           ;main.c: 438: (Busy_eep(), Write_b_eep(0x21 + 3,0));
  5137  002778  ECC0  F018         	call	_Busy_eep	;wreg free
  5138  00277C  6A09               	clrf	?_Write_b_eep+1,c
  5139  00277E  0E24               	movlw	36
  5140  002780  6E08               	movwf	?_Write_b_eep,c
  5141  002782  0E00               	movlw	0
  5142  002784  6A0A               	clrf	?_Write_b_eep+2,c
  5143  002786  EC6C  F016         	call	_Write_b_eep	;wreg free
  5144                           
  5145                           ;main.c: 439: (Busy_eep(), Write_b_eep(0x21 + 4,0));
  5146  00278A  ECC0  F018         	call	_Busy_eep	;wreg free
  5147  00278E  6A09               	clrf	?_Write_b_eep+1,c
  5148  002790  0E25               	movlw	37
  5149  002792  6E08               	movwf	?_Write_b_eep,c
  5150  002794  0E00               	movlw	0
  5151  002796  6A0A               	clrf	?_Write_b_eep+2,c
  5152  002798  EC6C  F016         	call	_Write_b_eep	;wreg free
  5153                           
  5154                           ;main.c: 443: for ( i = 0; i < 8; i++ ) {
  5155  00279C  6A0F               	clrf	init_app_eeprom@i,c
  5156  00279E                     l179:
  5157                           
  5158                           ;main.c: 444: for ( j = 0; j < 8; j++ ) {
  5159  00279E  6A0E               	clrf	init_app_eeprom@j,c
  5160  0027A0                     l3928:
  5161                           
  5162                           ;main.c: 445: (Busy_eep(), Write_b_eep(0x21 + 23 + 0 + i * 8 + j,0));
  5163  0027A0  ECC0  F018         	call	_Busy_eep	;wreg free
  5164  0027A4  500E               	movf	init_app_eeprom@j,w,c
  5165  0027A6  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  5166  0027AA  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  5167  0027AC  90D8               	bcf	status,0,c
  5168  0027AE  360C               	rlcf	??_init_app_eeprom,f,c
  5169  0027B0  360D               	rlcf	??_init_app_eeprom+1,f,c
  5170  0027B2  90D8               	bcf	status,0,c
  5171  0027B4  360C               	rlcf	??_init_app_eeprom,f,c
  5172  0027B6  360D               	rlcf	??_init_app_eeprom+1,f,c
  5173  0027B8  90D8               	bcf	status,0,c
  5174  0027BA  360C               	rlcf	??_init_app_eeprom,f,c
  5175  0027BC  360D               	rlcf	??_init_app_eeprom+1,f,c
  5176  0027BE  260C               	addwf	??_init_app_eeprom,f,c
  5177  0027C0  0E00               	movlw	0
  5178  0027C2  220D               	addwfc	??_init_app_eeprom+1,f,c
  5179  0027C4  0E38               	movlw	56
  5180  0027C6  240C               	addwf	??_init_app_eeprom,w,c
  5181  0027C8  6E08               	movwf	?_Write_b_eep,c
  5182  0027CA  0E00               	movlw	0
  5183  0027CC  200D               	addwfc	??_init_app_eeprom+1,w,c
  5184  0027CE  6E09               	movwf	?_Write_b_eep+1,c
  5185  0027D0  0E00               	movlw	0
  5186  0027D2  6A0A               	clrf	?_Write_b_eep+2,c
  5187  0027D4  EC6C  F016         	call	_Write_b_eep	;wreg free
  5188  0027D8  2A0E               	incf	init_app_eeprom@j,f,c
  5189  0027DA  0E07               	movlw	7
  5190  0027DC  640E               	cpfsgt	init_app_eeprom@j,c
  5191  0027DE  D7E0               	goto	l3928
  5192  0027E0  2A0F               	incf	init_app_eeprom@i,f,c
  5193  0027E2  640F               	cpfsgt	init_app_eeprom@i,c
  5194  0027E4  D7DC               	goto	l179
  5195  0027E6  0C07               	retlw	7
  5196  0027E8                     __end_of_init_app_eeprom:
  5197                           	opt stack 0
  5198                           prodh	equ	0xFF4
  5199                           prodl	equ	0xFF3
  5200                           postinc0	equ	0xFEE
  5201                           wreg	equ	0xFE8
  5202                           indf1	equ	0xFE7
  5203                           fsr1h	equ	0xFE2
  5204                           fsr1l	equ	0xFE1
  5205                           indf2	equ	0xFDF
  5206                           postinc2	equ	0xFDE
  5207                           postdec2	equ	0xFDD
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function _vscp_setUserID *****************
  5213 ;; Defined at:
  5214 ;;		line 1262 in file "../main.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  idx             1    wreg     unsigned char 
  5217 ;;  data            1   11[COMRAM] unsigned char 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;  idx             1   12[COMRAM] unsigned char 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;		None               void
  5222 ;; Registers used:
  5223 ;;		wreg, status,2, status,0, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : F/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5229 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5233 ;;Total ram usage:        2 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    3
  5236 ;; This function calls:
  5237 ;;		_Busy_eep
  5238 ;;		_Write_b_eep
  5239 ;; This function is called by:
  5240 ;;		_vscp_writeStdReg
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	text20
  5245  00300A                     __ptext20:
  5246                           	opt stack 0
  5247  00300A                     _vscp_setUserID:
  5248                           	opt stack 25
  5249                           
  5250                           ;incstack = 0
  5251                           ;incstack = 0
  5252                           ;vscp_setUserID@idx stored from wreg
  5253  00300A  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  5254                           
  5255                           ; BSR set to: 0
  5256                           ;main.c: 1263: (Busy_eep(), Write_b_eep(idx + 0x04,data));
  5257  00300E  ECC0  F018         	call	_Busy_eep	;wreg free
  5258  003012  0E04               	movlw	4
  5259  003014  240D               	addwf	vscp_setUserID@idx,w,c
  5260  003016  6E08               	movwf	?_Write_b_eep,c
  5261  003018  6A09               	clrf	?_Write_b_eep+1,c
  5262  00301A  0E00               	movlw	0
  5263  00301C  2209               	addwfc	?_Write_b_eep+1,f,c
  5264  00301E  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  5265  003022  EF6C  F016         	goto	_Write_b_eep	;wreg free
  5266  003026                     __end_of_vscp_setUserID:
  5267                           	opt stack 0
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           postinc0	equ	0xFEE
  5271                           wreg	equ	0xFE8
  5272                           indf1	equ	0xFE7
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           postinc2	equ	0xFDE
  5277                           postdec2	equ	0xFDD
  5278                           fsr2h	equ	0xFDA
  5279                           fsr2l	equ	0xFD9
  5280                           status	equ	0xFD8
  5281                           
  5282 ;; *************** function _vscp_setManufacturerId *****************
  5283 ;; Defined at:
  5284 ;;		line 507 in file "../main.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  idx             1    wreg     unsigned char 
  5287 ;;  data            1   11[COMRAM] unsigned char 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  idx             1   12[COMRAM] unsigned char 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;		None               void
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : F/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5299 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5302 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5303 ;;Total ram usage:        2 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:    3
  5306 ;; This function calls:
  5307 ;;		_Busy_eep
  5308 ;;		_Write_b_eep
  5309 ;; This function is called by:
  5310 ;;		_vscp_writeStdReg
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           	psect	text21
  5315  002EC8                     __ptext21:
  5316                           	opt stack 0
  5317  002EC8                     _vscp_setManufacturerId:
  5318                           	opt stack 25
  5319                           
  5320                           ;incstack = 0
  5321                           ;incstack = 0
  5322                           ;vscp_setManufacturerId@idx stored from wreg
  5323  002EC8  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;main.c: 508: if ( idx>7 ) return;
  5327  002ECC  0E07               	movlw	7
  5328  002ECE  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  5329  002ED0  D001               	goto	l4754
  5330  002ED2  0C07               	retlw	7
  5331  002ED4                     l4754:
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;main.c: 509: (Busy_eep(), Write_b_eep(0x09 + idx,data));
  5335  002ED4  ECC0  F018         	call	_Busy_eep	;wreg free
  5336  002ED8  0E09               	movlw	9
  5337  002EDA  240D               	addwf	vscp_setManufacturerId@idx,w,c
  5338  002EDC  6E08               	movwf	?_Write_b_eep,c
  5339  002EDE  6A09               	clrf	?_Write_b_eep+1,c
  5340  002EE0  0E00               	movlw	0
  5341  002EE2  2209               	addwfc	?_Write_b_eep+1,f,c
  5342  002EE4  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  5343  002EE8  EF6C  F016         	goto	_Write_b_eep	;wreg free
  5344  002EEC                     __end_of_vscp_setManufacturerId:
  5345                           	opt stack 0
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           postinc0	equ	0xFEE
  5349                           wreg	equ	0xFE8
  5350                           indf1	equ	0xFE7
  5351                           fsr1h	equ	0xFE2
  5352                           fsr1l	equ	0xFE1
  5353                           indf2	equ	0xFDF
  5354                           postinc2	equ	0xFDE
  5355                           postdec2	equ	0xFDD
  5356                           fsr2h	equ	0xFDA
  5357                           fsr2l	equ	0xFD9
  5358                           status	equ	0xFD8
  5359                           
  5360 ;; *************** function _vscp_setGUID *****************
  5361 ;; Defined at:
  5362 ;;		line 495 in file "../main.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;  idx             1    wreg     unsigned char 
  5365 ;;  data            1   11[COMRAM] unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  idx             1   12[COMRAM] unsigned char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, status,2, status,0, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : F/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5377 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5380 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5381 ;;Total ram usage:        2 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    3
  5384 ;; This function calls:
  5385 ;;		_Busy_eep
  5386 ;;		_Write_b_eep
  5387 ;; This function is called by:
  5388 ;;		_vscp_writeStdReg
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text22
  5393  002EEC                     __ptext22:
  5394                           	opt stack 0
  5395  002EEC                     _vscp_setGUID:
  5396                           	opt stack 25
  5397                           
  5398                           ;incstack = 0
  5399                           ;incstack = 0
  5400                           ;vscp_setGUID@idx stored from wreg
  5401  002EEC  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;main.c: 496: if ( idx>15 ) return;
  5405  002EF0  0E0F               	movlw	15
  5406  002EF2  640D               	cpfsgt	vscp_setGUID@idx,c
  5407  002EF4  D001               	goto	l4746
  5408  002EF6  0C0F               	retlw	15
  5409  002EF8                     l4746:
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x11 + idx,data));
  5413  002EF8  ECC0  F018         	call	_Busy_eep	;wreg free
  5414  002EFC  0E11               	movlw	17
  5415  002EFE  240D               	addwf	vscp_setGUID@idx,w,c
  5416  002F00  6E08               	movwf	?_Write_b_eep,c
  5417  002F02  6A09               	clrf	?_Write_b_eep+1,c
  5418  002F04  0E00               	movlw	0
  5419  002F06  2209               	addwfc	?_Write_b_eep+1,f,c
  5420  002F08  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  5421  002F0C  EF6C  F016         	goto	_Write_b_eep	;wreg free
  5422  002F10                     __end_of_vscp_setGUID:
  5423                           	opt stack 0
  5424                           prodh	equ	0xFF4
  5425                           prodl	equ	0xFF3
  5426                           postinc0	equ	0xFEE
  5427                           wreg	equ	0xFE8
  5428                           indf1	equ	0xFE7
  5429                           fsr1h	equ	0xFE2
  5430                           fsr1l	equ	0xFE1
  5431                           indf2	equ	0xFDF
  5432                           postinc2	equ	0xFDE
  5433                           postdec2	equ	0xFDD
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _vscp_writeAppReg *****************
  5439 ;; Defined at:
  5440 ;;		line 641 in file "../main.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  reg             1    wreg     unsigned char 
  5443 ;;  val             1   20[COMRAM] unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  reg             1   22[COMRAM] unsigned char 
  5446 ;;  rv              1   21[COMRAM] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      unsigned char 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : F/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5456 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5457 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5459 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5460 ;;Total ram usage:        3 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    4
  5463 ;; This function calls:
  5464 ;;		_Read_b_eep
  5465 ;;		_writeControlReg
  5466 ;;		_Busy_eep
  5467 ;;		_Write_b_eep
  5468 ;; This function is called by:
  5469 ;;		_vscp_writeRegister
  5470 ;;		_vscp_handleProtocolEvent
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           	psect	text23
  5475  002152                     __ptext23:
  5476                           	opt stack 0
  5477  002152                     _vscp_writeAppReg:
  5478                           	opt stack 24
  5479                           
  5480                           ;incstack = 0
  5481                           ;incstack = 0
  5482                           ;vscp_writeAppReg@reg stored from wreg
  5483  002152  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;main.c: 642: uint8_t rv;
  5487                           ;main.c: 644: rv = ~val;
  5488  002156  1C15               	comf	vscp_writeAppReg@val,w,c
  5489  002158  6E16               	movwf	vscp_writeAppReg@rv,c
  5490                           
  5491                           ;main.c: 647: if ( 0 == vscp_page_select ) {
  5492  00215A  5053               	movf	_vscp_page_select+1,w,c
  5493  00215C  1052               	iorwf	_vscp_page_select,w,c
  5494  00215E  E176               	bnz	l6590
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;main.c: 650: if ( reg == 0 ) {
  5498  002160  6617               	tstfsz	vscp_writeAppReg@reg,c
  5499  002162  D00F               	goto	l6546
  5500                           
  5501                           ; BSR set to: 0
  5502                           ;main.c: 651: (Busy_eep(), Write_b_eep(0x21 + 0,val));
  5503  002164  ECC0  F018         	call	_Busy_eep	;wreg free
  5504  002168  6A09               	clrf	?_Write_b_eep+1,c
  5505  00216A  0E21               	movlw	33
  5506  00216C  6E08               	movwf	?_Write_b_eep,c
  5507  00216E  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5508  002172  EC6C  F016         	call	_Write_b_eep	;wreg free
  5509                           
  5510                           ;main.c: 652: rv = Read_b_eep(0x21 + 0);
  5511  002176  6A09               	clrf	?_Read_b_eep+1,c
  5512  002178  0E21               	movlw	33
  5513  00217A  6E08               	movwf	?_Read_b_eep,c
  5514  00217C  EC21  F018         	call	_Read_b_eep	;wreg free
  5515  002180  D07F               	goto	L12
  5516  002182                     l6546:
  5517                           
  5518                           ; BSR set to: 0
  5519                           ;main.c: 654: else if ( reg == 1 ) {
  5520  002182  0417               	decf	vscp_writeAppReg@reg,w,c
  5521  002184  E10F               	bnz	l6554
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;main.c: 656: (Busy_eep(), Write_b_eep(0x21 + 1,val));
  5525  002186  ECC0  F018         	call	_Busy_eep	;wreg free
  5526  00218A  6A09               	clrf	?_Write_b_eep+1,c
  5527  00218C  0E22               	movlw	34
  5528  00218E  6E08               	movwf	?_Write_b_eep,c
  5529  002190  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5530  002194  EC6C  F016         	call	_Write_b_eep	;wreg free
  5531                           
  5532                           ;main.c: 657: rv = Read_b_eep(0x21 + 1);
  5533  002198  6A09               	clrf	?_Read_b_eep+1,c
  5534  00219A  0E22               	movlw	34
  5535  00219C  6E08               	movwf	?_Read_b_eep,c
  5536  00219E  EC21  F018         	call	_Read_b_eep	;wreg free
  5537  0021A2  D06E               	goto	L12
  5538  0021A4                     l6554:
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;main.c: 660: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5542  0021A4  0E04               	movlw	4
  5543  0021A6  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5544  0021A8  D018               	goto	l6564
  5545                           
  5546                           ; BSR set to: 0
  5547  0021AA  0E17               	movlw	23
  5548  0021AC  6017               	cpfslt	vscp_writeAppReg@reg,c
  5549  0021AE  D015               	goto	l6564
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;main.c: 661: (Busy_eep(), Write_b_eep(0x21 + 5 + ( reg - 5 ),val));
  5553  0021B0  ECC0  F018         	call	_Busy_eep	;wreg free
  5554  0021B4  0E21               	movlw	33
  5555  0021B6  2417               	addwf	vscp_writeAppReg@reg,w,c
  5556  0021B8  6E08               	movwf	?_Write_b_eep,c
  5557  0021BA  6A09               	clrf	?_Write_b_eep+1,c
  5558  0021BC  0E00               	movlw	0
  5559  0021BE  2209               	addwfc	?_Write_b_eep+1,f,c
  5560  0021C0  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5561  0021C4  EC6C  F016         	call	_Write_b_eep	;wreg free
  5562                           
  5563                           ;main.c: 663: rv = Read_b_eep(0x21 + 5 + ( reg - 5 ));
  5564  0021C8  0E21               	movlw	33
  5565  0021CA  2417               	addwf	vscp_writeAppReg@reg,w,c
  5566  0021CC  6E08               	movwf	?_Read_b_eep,c
  5567  0021CE  6A09               	clrf	?_Read_b_eep+1,c
  5568  0021D0  0E00               	movlw	0
  5569  0021D2  2209               	addwfc	?_Read_b_eep+1,f,c
  5570  0021D4  EC21  F018         	call	_Read_b_eep	;wreg free
  5571  0021D8  D053               	goto	L12
  5572  0021DA                     l6564:
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;main.c: 667: else if ( reg == 2 ) {
  5576  0021DA  5017               	movf	vscp_writeAppReg@reg,w,c
  5577  0021DC  0A02               	xorlw	2
  5578  0021DE  E10F               	bnz	l6572
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;main.c: 668: (Busy_eep(), Write_b_eep(0x21 + 2,val));
  5582  0021E0  ECC0  F018         	call	_Busy_eep	;wreg free
  5583  0021E4  6A09               	clrf	?_Write_b_eep+1,c
  5584  0021E6  0E23               	movlw	35
  5585  0021E8  6E08               	movwf	?_Write_b_eep,c
  5586  0021EA  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5587  0021EE  EC6C  F016         	call	_Write_b_eep	;wreg free
  5588                           
  5589                           ;main.c: 669: rv = writeControlReg( 0, val );
  5590  0021F2  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5591  0021F6  0E00               	movlw	0
  5592  0021F8  ECD7  F00D         	call	_writeControlReg
  5593  0021FC  D041               	goto	L12
  5594  0021FE                     l6572:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;main.c: 672: else if ( reg == 3 ) {
  5598  0021FE  5017               	movf	vscp_writeAppReg@reg,w,c
  5599  002200  0A03               	xorlw	3
  5600  002202  E10F               	bnz	l6580
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;main.c: 673: (Busy_eep(), Write_b_eep(0x21 + 3,val));
  5604  002204  ECC0  F018         	call	_Busy_eep	;wreg free
  5605  002208  6A09               	clrf	?_Write_b_eep+1,c
  5606  00220A  0E24               	movlw	36
  5607  00220C  6E08               	movwf	?_Write_b_eep,c
  5608  00220E  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5609  002212  EC6C  F016         	call	_Write_b_eep	;wreg free
  5610                           
  5611                           ;main.c: 674: rv = writeControlReg( 1, val );
  5612  002216  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5613  00221A  0E01               	movlw	1
  5614  00221C  ECD7  F00D         	call	_writeControlReg
  5615  002220  D02F               	goto	L12
  5616  002222                     l6580:
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;main.c: 677: else if ( reg == 4 ) {
  5620  002222  5017               	movf	vscp_writeAppReg@reg,w,c
  5621  002224  0A04               	xorlw	4
  5622  002226  E12D               	bnz	l6600
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;main.c: 678: (Busy_eep(), Write_b_eep(0x21 + 4,val));
  5626  002228  ECC0  F018         	call	_Busy_eep	;wreg free
  5627  00222C  6A09               	clrf	?_Write_b_eep+1,c
  5628  00222E  0E25               	movlw	37
  5629  002230  6E08               	movwf	?_Write_b_eep,c
  5630  002232  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5631  002236  EC6C  F016         	call	_Write_b_eep	;wreg free
  5632                           
  5633                           ;main.c: 679: rv = writeControlReg( 2, val );
  5634  00223A  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5635  00223E  0E02               	movlw	2
  5636  002240  ECD7  F00D         	call	_writeControlReg
  5637  002244  6E16               	movwf	vscp_writeAppReg@rv,c
  5638                           
  5639                           ;main.c: 680: rv &= 0x03;
  5640  002246  0E03               	movlw	3
  5641  002248  1616               	andwf	vscp_writeAppReg@rv,f,c
  5642  00224A  D01B               	goto	l6600
  5643  00224C                     l6590:
  5644                           
  5645                           ; BSR set to: 0
  5646                           ;main.c: 685: else if ( 1 == vscp_page_select ) {
  5647  00224C  0452               	decf	_vscp_page_select,w,c
  5648  00224E  1053               	iorwf	_vscp_page_select+1,w,c
  5649  002250  E118               	bnz	l6600
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;main.c: 688: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5653                           ;main.c: 689: ( 8 * 8 ) ) ) ) {
  5654  002252  0E41               	movlw	65
  5655  002254  6017               	cpfslt	vscp_writeAppReg@reg,c
  5656  002256  D015               	goto	l6600
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;main.c: 690: (Busy_eep(), Write_b_eep(0x21 + 23 + ( reg - 0 ),val));
  5660  002258  ECC0  F018         	call	_Busy_eep	;wreg free
  5661  00225C  0E38               	movlw	56
  5662  00225E  2417               	addwf	vscp_writeAppReg@reg,w,c
  5663  002260  6E08               	movwf	?_Write_b_eep,c
  5664  002262  6A09               	clrf	?_Write_b_eep+1,c
  5665  002264  0E00               	movlw	0
  5666  002266  2209               	addwfc	?_Write_b_eep+1,f,c
  5667  002268  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5668  00226C  EC6C  F016         	call	_Write_b_eep	;wreg free
  5669                           
  5670                           ;main.c: 692: rv = Read_b_eep(0x21 + 23 + ( reg - 0 ));
  5671  002270  0E38               	movlw	56
  5672  002272  2417               	addwf	vscp_writeAppReg@reg,w,c
  5673  002274  6E08               	movwf	?_Read_b_eep,c
  5674  002276  6A09               	clrf	?_Read_b_eep+1,c
  5675  002278  0E00               	movlw	0
  5676  00227A  2209               	addwfc	?_Read_b_eep+1,f,c
  5677  00227C  EC21  F018         	call	_Read_b_eep	;wreg free
  5678  002280                     L12:
  5679  002280  6E16               	movwf	vscp_writeAppReg@rv,c
  5680  002282                     l6600:
  5681                           
  5682                           ;main.c: 694: }
  5683                           ;main.c: 696: }
  5684                           ;main.c: 698: return rv;
  5685  002282  5016               	movf	vscp_writeAppReg@rv,w,c
  5686  002284  0012               	return	
  5687  002286                     __end_of_vscp_writeAppReg:
  5688                           	opt stack 0
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           postinc0	equ	0xFEE
  5692                           wreg	equ	0xFE8
  5693                           indf1	equ	0xFE7
  5694                           fsr1h	equ	0xFE2
  5695                           fsr1l	equ	0xFE1
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           fsr2h	equ	0xFDA
  5700                           fsr2l	equ	0xFD9
  5701                           status	equ	0xFD8
  5702                           
  5703 ;; *************** function _writeControlReg *****************
  5704 ;; Defined at:
  5705 ;;		line 706 in file "../main.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  ctrlreg         1    wreg     unsigned char 
  5708 ;;  val             1   16[COMRAM] unsigned char 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  5711 ;;  rv              1   19[COMRAM] unsigned char 
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      unsigned char 
  5714 ;; Registers used:
  5715 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5722 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5724 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5725 ;;Total ram usage:        4 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    3
  5728 ;; This function calls:
  5729 ;;		_readControlReg
  5730 ;; This function is called by:
  5731 ;;		_main
  5732 ;;		_vscp_writeAppReg
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text24
  5737  001BAE                     __ptext24:
  5738                           	opt stack 0
  5739  001BAE                     _writeControlReg:
  5740                           	opt stack 24
  5741                           
  5742                           ;incstack = 0
  5743                           ;incstack = 0
  5744                           ;writeControlReg@ctrlreg stored from wreg
  5745  001BAE  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  5746                           
  5747                           ;main.c: 707: uint8_t rv = 0;
  5748  001BB2  6A14               	clrf	writeControlReg@rv,c
  5749                           
  5750                           ;main.c: 709: switch ( ctrlreg ) {
  5751  001BB4  D0B9               	goto	l3978
  5752  001BB6                     l3964:
  5753  001BB6  0E01               	movlw	1
  5754                           
  5755                           ;main.c: 712: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  5756  001BB8  A011               	btfss	writeControlReg@val,0,c
  5757  001BBA  0E00               	movlw	0
  5758  001BBC  6E12               	movwf	??_writeControlReg& (0+255),c
  5759  001BBE  3212               	rrcf	??_writeControlReg,f,c
  5760  001BC0  3212               	rrcf	??_writeControlReg,f,c
  5761  001BC2  5082               	movf	3970,w,c	;volatile
  5762  001BC4  1812               	xorwf	??_writeControlReg,w,c
  5763  001BC6  0B7F               	andlw	-129
  5764  001BC8  1812               	xorwf	??_writeControlReg,w,c
  5765  001BCA  6E82               	movwf	3970,c	;volatile
  5766  001BCC  0E01               	movlw	1
  5767                           
  5768                           ;main.c: 713: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  5769  001BCE  A211               	btfss	writeControlReg@val,1,c
  5770  001BD0  0E00               	movlw	0
  5771  001BD2  6E12               	movwf	??_writeControlReg& (0+255),c
  5772  001BD4  3A12               	swapf	??_writeControlReg,f,c
  5773  001BD6  4612               	rlncf	??_writeControlReg,f,c
  5774  001BD8  4612               	rlncf	??_writeControlReg,f,c
  5775  001BDA  5082               	movf	3970,w,c	;volatile
  5776  001BDC  1812               	xorwf	??_writeControlReg,w,c
  5777  001BDE  0BBF               	andlw	-65
  5778  001BE0  1812               	xorwf	??_writeControlReg,w,c
  5779  001BE2  6E82               	movwf	3970,c	;volatile
  5780  001BE4  0E01               	movlw	1
  5781                           
  5782                           ;main.c: 714: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  5783  001BE6  A411               	btfss	writeControlReg@val,2,c
  5784  001BE8  0E00               	movlw	0
  5785  001BEA  6E12               	movwf	??_writeControlReg& (0+255),c
  5786  001BEC  4612               	rlncf	??_writeControlReg,f,c
  5787  001BEE  4612               	rlncf	??_writeControlReg,f,c
  5788  001BF0  4612               	rlncf	??_writeControlReg,f,c
  5789  001BF2  5082               	movf	3970,w,c	;volatile
  5790  001BF4  1812               	xorwf	??_writeControlReg,w,c
  5791  001BF6  0BF7               	andlw	-9
  5792  001BF8  1812               	xorwf	??_writeControlReg,w,c
  5793  001BFA  6E82               	movwf	3970,c	;volatile
  5794  001BFC  0E01               	movlw	1
  5795                           
  5796                           ;main.c: 715: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  5797  001BFE  A611               	btfss	writeControlReg@val,3,c
  5798  001C00  0E00               	movlw	0
  5799  001C02  6E12               	movwf	??_writeControlReg& (0+255),c
  5800  001C04  3A12               	swapf	??_writeControlReg,f,c
  5801  001C06  5082               	movf	3970,w,c	;volatile
  5802  001C08  1812               	xorwf	??_writeControlReg,w,c
  5803  001C0A  0BEF               	andlw	-17
  5804  001C0C  1812               	xorwf	??_writeControlReg,w,c
  5805  001C0E  6E82               	movwf	3970,c	;volatile
  5806  001C10  0E01               	movlw	1
  5807                           
  5808                           ;main.c: 716: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  5809  001C12  A811               	btfss	writeControlReg@val,4,c
  5810  001C14  0E00               	movlw	0
  5811  001C16  6E12               	movwf	??_writeControlReg& (0+255),c
  5812  001C18  3A12               	swapf	??_writeControlReg,f,c
  5813  001C1A  4612               	rlncf	??_writeControlReg,f,c
  5814  001C1C  5082               	movf	3970,w,c	;volatile
  5815  001C1E  1812               	xorwf	??_writeControlReg,w,c
  5816  001C20  0BDF               	andlw	-33
  5817  001C22  1812               	xorwf	??_writeControlReg,w,c
  5818  001C24  6E82               	movwf	3970,c	;volatile
  5819  001C26  0E01               	movlw	1
  5820                           
  5821                           ;main.c: 717: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  5822  001C28  AA11               	btfss	writeControlReg@val,5,c
  5823  001C2A  0E00               	movlw	0
  5824  001C2C  6E12               	movwf	??_writeControlReg& (0+255),c
  5825  001C2E  5080               	movf	3968,w,c	;volatile
  5826  001C30  1812               	xorwf	??_writeControlReg,w,c
  5827  001C32  0BFE               	andlw	-2
  5828  001C34  1812               	xorwf	??_writeControlReg,w,c
  5829  001C36  6E80               	movwf	3968,c	;volatile
  5830  001C38  0E01               	movlw	1
  5831                           
  5832                           ;main.c: 718: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  5833  001C3A  AC11               	btfss	writeControlReg@val,6,c
  5834  001C3C  0E00               	movlw	0
  5835  001C3E  6E12               	movwf	??_writeControlReg& (0+255),c
  5836  001C40  4612               	rlncf	??_writeControlReg,f,c
  5837  001C42  5080               	movf	3968,w,c	;volatile
  5838  001C44  1812               	xorwf	??_writeControlReg,w,c
  5839  001C46  0BFD               	andlw	-3
  5840  001C48  1812               	xorwf	??_writeControlReg,w,c
  5841  001C4A  6E80               	movwf	3968,c	;volatile
  5842  001C4C  0E01               	movlw	1
  5843                           
  5844                           ;main.c: 719: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  5845  001C4E  AE11               	btfss	writeControlReg@val,7,c
  5846  001C50  0E00               	movlw	0
  5847  001C52  6E12               	movwf	??_writeControlReg& (0+255),c
  5848  001C54  4612               	rlncf	??_writeControlReg,f,c
  5849  001C56  4612               	rlncf	??_writeControlReg,f,c
  5850  001C58  5080               	movf	3968,w,c	;volatile
  5851  001C5A  1812               	xorwf	??_writeControlReg,w,c
  5852  001C5C  0BFB               	andlw	-5
  5853  001C5E  1812               	xorwf	??_writeControlReg,w,c
  5854  001C60  6E80               	movwf	3968,c	;volatile
  5855                           
  5856                           ;main.c: 720: rv = readControlReg( 0 );
  5857  001C62  0E00               	movlw	0
  5858  001C64  EC53  F012         	call	_readControlReg
  5859  001C68  D05D               	goto	L14
  5860  001C6A                     l3968:
  5861  001C6A  0E01               	movlw	1
  5862                           
  5863                           ;main.c: 724: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  5864  001C6C  A011               	btfss	writeControlReg@val,0,c
  5865  001C6E  0E00               	movlw	0
  5866  001C70  6E12               	movwf	??_writeControlReg& (0+255),c
  5867  001C72  4612               	rlncf	??_writeControlReg,f,c
  5868  001C74  4612               	rlncf	??_writeControlReg,f,c
  5869  001C76  4612               	rlncf	??_writeControlReg,f,c
  5870  001C78  5080               	movf	3968,w,c	;volatile
  5871  001C7A  1812               	xorwf	??_writeControlReg,w,c
  5872  001C7C  0BF7               	andlw	-9
  5873  001C7E  1812               	xorwf	??_writeControlReg,w,c
  5874  001C80  6E80               	movwf	3968,c	;volatile
  5875  001C82  0E01               	movlw	1
  5876                           
  5877                           ;main.c: 725: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  5878  001C84  A211               	btfss	writeControlReg@val,1,c
  5879  001C86  0E00               	movlw	0
  5880  001C88  6E12               	movwf	??_writeControlReg& (0+255),c
  5881  001C8A  3A12               	swapf	??_writeControlReg,f,c
  5882  001C8C  4612               	rlncf	??_writeControlReg,f,c
  5883  001C8E  5080               	movf	3968,w,c	;volatile
  5884  001C90  1812               	xorwf	??_writeControlReg,w,c
  5885  001C92  0BDF               	andlw	-33
  5886  001C94  1812               	xorwf	??_writeControlReg,w,c
  5887  001C96  6E80               	movwf	3968,c	;volatile
  5888  001C98  0E01               	movlw	1
  5889                           
  5890                           ;main.c: 728: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  5891  001C9A  A811               	btfss	writeControlReg@val,4,c
  5892  001C9C  0E00               	movlw	0
  5893  001C9E  6E12               	movwf	??_writeControlReg& (0+255),c
  5894  001CA0  3A12               	swapf	??_writeControlReg,f,c
  5895  001CA2  5081               	movf	3969,w,c	;volatile
  5896  001CA4  1812               	xorwf	??_writeControlReg,w,c
  5897  001CA6  0BEF               	andlw	-17
  5898  001CA8  1812               	xorwf	??_writeControlReg,w,c
  5899  001CAA  6E81               	movwf	3969,c	;volatile
  5900  001CAC  0E01               	movlw	1
  5901                           
  5902                           ;main.c: 729: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  5903  001CAE  AA11               	btfss	writeControlReg@val,5,c
  5904  001CB0  0E00               	movlw	0
  5905  001CB2  6E12               	movwf	??_writeControlReg& (0+255),c
  5906  001CB4  4612               	rlncf	??_writeControlReg,f,c
  5907  001CB6  4612               	rlncf	??_writeControlReg,f,c
  5908  001CB8  5082               	movf	3970,w,c	;volatile
  5909  001CBA  1812               	xorwf	??_writeControlReg,w,c
  5910  001CBC  0BFB               	andlw	-5
  5911  001CBE  1812               	xorwf	??_writeControlReg,w,c
  5912  001CC0  6E82               	movwf	3970,c	;volatile
  5913  001CC2  0E01               	movlw	1
  5914                           
  5915                           ;main.c: 730: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  5916  001CC4  AC11               	btfss	writeControlReg@val,6,c
  5917  001CC6  0E00               	movlw	0
  5918  001CC8  6E12               	movwf	??_writeControlReg& (0+255),c
  5919  001CCA  4612               	rlncf	??_writeControlReg,f,c
  5920  001CCC  5081               	movf	3969,w,c	;volatile
  5921  001CCE  1812               	xorwf	??_writeControlReg,w,c
  5922  001CD0  0BFD               	andlw	-3
  5923  001CD2  1812               	xorwf	??_writeControlReg,w,c
  5924  001CD4  6E81               	movwf	3969,c	;volatile
  5925  001CD6  0E01               	movlw	1
  5926                           
  5927                           ;main.c: 731: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  5928  001CD8  AE11               	btfss	writeControlReg@val,7,c
  5929  001CDA  0E00               	movlw	0
  5930  001CDC  6E12               	movwf	??_writeControlReg& (0+255),c
  5931  001CDE  5081               	movf	3969,w,c	;volatile
  5932  001CE0  1812               	xorwf	??_writeControlReg,w,c
  5933  001CE2  0BFE               	andlw	-2
  5934  001CE4  1812               	xorwf	??_writeControlReg,w,c
  5935  001CE6  6E81               	movwf	3969,c	;volatile
  5936                           
  5937                           ;main.c: 732: rv = readControlReg( 1 );
  5938  001CE8  0E01               	movlw	1
  5939  001CEA  EC53  F012         	call	_readControlReg
  5940  001CEE  D01A               	goto	L14
  5941  001CF0                     l3972:
  5942  001CF0  0E01               	movlw	1
  5943                           
  5944                           ;main.c: 736: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  5945  001CF2  A011               	btfss	writeControlReg@val,0,c
  5946  001CF4  0E00               	movlw	0
  5947  001CF6  6E12               	movwf	??_writeControlReg& (0+255),c
  5948  001CF8  3A12               	swapf	??_writeControlReg,f,c
  5949  001CFA  4612               	rlncf	??_writeControlReg,f,c
  5950  001CFC  4612               	rlncf	??_writeControlReg,f,c
  5951  001CFE  5081               	movf	3969,w,c	;volatile
  5952  001D00  1812               	xorwf	??_writeControlReg,w,c
  5953  001D02  0BBF               	andlw	-65
  5954  001D04  1812               	xorwf	??_writeControlReg,w,c
  5955  001D06  6E81               	movwf	3969,c	;volatile
  5956  001D08  0E01               	movlw	1
  5957                           
  5958                           ;main.c: 737: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  5959  001D0A  A211               	btfss	writeControlReg@val,1,c
  5960  001D0C  0E00               	movlw	0
  5961  001D0E  6E12               	movwf	??_writeControlReg& (0+255),c
  5962  001D10  3A12               	swapf	??_writeControlReg,f,c
  5963  001D12  4612               	rlncf	??_writeControlReg,f,c
  5964  001D14  5081               	movf	3969,w,c	;volatile
  5965  001D16  1812               	xorwf	??_writeControlReg,w,c
  5966  001D18  0BDF               	andlw	-33
  5967  001D1A  1812               	xorwf	??_writeControlReg,w,c
  5968  001D1C  6E81               	movwf	3969,c	;volatile
  5969                           
  5970                           ;main.c: 738: rv = readControlReg( 2 );
  5971  001D1E  0E02               	movlw	2
  5972  001D20  EC53  F012         	call	_readControlReg
  5973  001D24                     L14:
  5974  001D24  6E14               	movwf	writeControlReg@rv,c
  5975                           
  5976                           ;main.c: 739: break;
  5977  001D26  D007               	goto	l3980
  5978  001D28                     l3978:
  5979  001D28  5013               	movf	writeControlReg@ctrlreg,w,c
  5980                           
  5981                           ; Switch size 1, requested type "speed"
  5982                           ; Number of cases is 3, Range of values is 0 to 2
  5983                           ; switch strategies available:
  5984                           ; Name         Instructions Cycles
  5985                           ; simple_byte           10     6 (average)
  5986                           ;	Chosen strategy is simple_byte
  5987  001D2A  E101 D744          	bz	l3964
  5988  001D2E  0A01               	xorlw	1	; case 1
  5989  001D30  E09C               	bz	l3968
  5990  001D32  0A03               	xorlw	3	; case 2
  5991  001D34  E0DD               	bz	l3972
  5992  001D36                     l3980:
  5993                           
  5994                           ;main.c: 742: return rv;
  5995  001D36  5014               	movf	writeControlReg@rv,w,c
  5996  001D38  0012               	return	
  5997  001D3A                     __end_of_writeControlReg:
  5998                           	opt stack 0
  5999                           prodh	equ	0xFF4
  6000                           prodl	equ	0xFF3
  6001                           postinc0	equ	0xFEE
  6002                           wreg	equ	0xFE8
  6003                           indf1	equ	0xFE7
  6004                           fsr1h	equ	0xFE2
  6005                           fsr1l	equ	0xFE1
  6006                           indf2	equ	0xFDF
  6007                           postinc2	equ	0xFDE
  6008                           postdec2	equ	0xFDD
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _vscp_readRegister *****************
  6014 ;; Defined at:
  6015 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  reg             1    wreg     unsigned char 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  reg             1   28[COMRAM] unsigned char 
  6020 ;; Return value:  Size  Location     Type
  6021 ;;                  1    wreg      unsigned char 
  6022 ;; Registers used:
  6023 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6024 ;; Tracked objects:
  6025 ;;		On entry : F/0
  6026 ;;		On exit  : 0/0
  6027 ;;		Unchanged: 0/0
  6028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6032 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6033 ;;Total ram usage:        1 bytes
  6034 ;; Hardware stack levels used:    1
  6035 ;; Hardware stack levels required when called:    5
  6036 ;; This function calls:
  6037 ;;		_vscp_readAppReg
  6038 ;;		_vscp_readStdReg
  6039 ;; This function is called by:
  6040 ;;		_vscp_handleProtocolEvent
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text25
  6045  003072                     __ptext25:
  6046                           	opt stack 0
  6047  003072                     _vscp_readRegister:
  6048                           	opt stack 24
  6049                           
  6050                           ;incstack = 0
  6051                           ;incstack = 0
  6052                           ;vscp_readRegister@reg stored from wreg
  6053  003072  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
  6057  003076  0E7F               	movlw	127
  6058  003078  641D               	cpfsgt	vscp_readRegister@reg,c
  6059  00307A  D003               	goto	l6886
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
  6063  00307C  501D               	movf	vscp_readRegister@reg,w,c
  6064  00307E  EF00  F00D         	goto	_vscp_readStdReg
  6065  003082                     l6886:
  6066                           
  6067                           ; BSR set to: 0
  6068                           ;vscp_firmware.c: 565: else {
  6069                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
  6070  003082  501D               	movf	vscp_readRegister@reg,w,c
  6071  003084  EFAB  F014         	goto	_vscp_readAppReg
  6072  003088                     __end_of_vscp_readRegister:
  6073                           	opt stack 0
  6074                           prodh	equ	0xFF4
  6075                           prodl	equ	0xFF3
  6076                           postinc0	equ	0xFEE
  6077                           wreg	equ	0xFE8
  6078                           indf1	equ	0xFE7
  6079                           fsr1h	equ	0xFE2
  6080                           fsr1l	equ	0xFE1
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _vscp_readStdReg *****************
  6089 ;; Defined at:
  6090 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  reg             1    wreg     unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  reg             1   27[COMRAM] unsigned char 
  6095 ;;  code            4   20[COMRAM] unsigned long 
  6096 ;;  idx             1   25[COMRAM] unsigned char 
  6097 ;;  code            4   16[COMRAM] unsigned long 
  6098 ;;  idx             1   24[COMRAM] unsigned char 
  6099 ;;  rv              1   26[COMRAM] unsigned char 
  6100 ;; Return value:  Size  Location     Type
  6101 ;;                  1    wreg      unsigned char 
  6102 ;; Registers used:
  6103 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6104 ;; Tracked objects:
  6105 ;;		On entry : F/0
  6106 ;;		On exit  : 0/0
  6107 ;;		Unchanged: 0/0
  6108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6110 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6111 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6112 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6113 ;;Total ram usage:       17 bytes
  6114 ;; Hardware stack levels used:    1
  6115 ;; Hardware stack levels required when called:    4
  6116 ;; This function calls:
  6117 ;;		_vscp_getMajorVersion
  6118 ;;		_vscp_getMinorVersion
  6119 ;;		_vscp_getSubMinorVersion
  6120 ;;		_vscp_getGUID
  6121 ;;		_vscp_getMDF_URL
  6122 ;;		_vscp_getUserID
  6123 ;;		_vscp_getManufacturerId
  6124 ;;		_vscp_getBootLoaderAlgorithm
  6125 ;;		_vscp_getBufferSize
  6126 ;;		_vscp_getFamilyCode
  6127 ;;		_vscp_getFamilyType
  6128 ;;		_vscp_getRegisterPagesUsed
  6129 ;; This function is called by:
  6130 ;;		_vscp_readRegister
  6131 ;;		_vscp_handleProtocolEvent
  6132 ;; This function uses a non-reentrant model
  6133 ;;
  6134                           
  6135                           	psect	text26
  6136  001A00                     __ptext26:
  6137                           	opt stack 0
  6138  001A00                     _vscp_readStdReg:
  6139                           	opt stack 25
  6140                           
  6141                           ;incstack = 0
  6142                           ;incstack = 0
  6143                           ;vscp_readStdReg@reg stored from wreg
  6144  001A00  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;vscp_firmware.c: 576: uint8_t rv = 0;
  6148  001A04  6A1B               	clrf	vscp_readStdReg@rv,c
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;vscp_firmware.c: 578: if (0x80 == reg) {
  6152  001A06  501C               	movf	vscp_readStdReg@reg,w,c
  6153  001A08  0A80               	xorlw	128
  6154  001A0A  E104               	bnz	l6896
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
  6158  001A0C  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  6159                           
  6160                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
  6161  001A10  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6162                           
  6163                           ;vscp_firmware.c: 584: }
  6164  001A12  D0CB               	goto	l6984
  6165  001A14                     l6896:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
  6169  001A14  501C               	movf	vscp_readStdReg@reg,w,c
  6170  001A16  0A81               	xorlw	129
  6171  001A18  E102               	bnz	l6900
  6172                           
  6173                           ; BSR set to: 0
  6174                           ;vscp_firmware.c: 588: rv = 1;
  6175  001A1A  0E01               	movlw	1
  6176  001A1C  D081               	goto	L25
  6177  001A1E                     l6900:
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
  6181  001A1E  501C               	movf	vscp_readStdReg@reg,w,c
  6182  001A20  0A82               	xorlw	130
  6183  001A22  E102               	bnz	l6904
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;vscp_firmware.c: 594: rv = 5;
  6187  001A24  0E05               	movlw	5
  6188  001A26  D07C               	goto	L25
  6189  001A28                     l6904:
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
  6193  001A28  501C               	movf	vscp_readStdReg@reg,w,c
  6194  001A2A  0A83               	xorlw	131
  6195  001A2C  E102               	bnz	l6908
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;vscp_firmware.c: 600: rv = 0;
  6199  001A2E  6A1B               	clrf	vscp_readStdReg@rv,c
  6200                           
  6201                           ;vscp_firmware.c: 602: }
  6202  001A30  D0BC               	goto	l6984
  6203  001A32                     l6908:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
  6207  001A32  501C               	movf	vscp_readStdReg@reg,w,c
  6208  001A34  0A94               	xorlw	148
  6209  001A36  E103               	bnz	l6912
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
  6213  001A38  ECCC  F018         	call	_vscp_getMajorVersion	;wreg free
  6214  001A3C  D071               	goto	L25
  6215  001A3E                     l6912:
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
  6219  001A3E  501C               	movf	vscp_readStdReg@reg,w,c
  6220  001A40  0A95               	xorlw	149
  6221  001A42  E103               	bnz	l6916
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
  6225  001A44  ECCB  F018         	call	_vscp_getMinorVersion	;wreg free
  6226  001A48  D06B               	goto	L25
  6227  001A4A                     l6916:
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
  6231  001A4A  501C               	movf	vscp_readStdReg@reg,w,c
  6232  001A4C  0A96               	xorlw	150
  6233  001A4E  E103               	bnz	l6920
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
  6237  001A50  ECCA  F018         	call	_vscp_getSubMinorVersion	;wreg free
  6238  001A54  D065               	goto	L25
  6239  001A56                     l6920:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
  6243  001A56  0E89               	movlw	137
  6244  001A58  601C               	cpfslt	vscp_readStdReg@reg,c
  6245  001A5A  D005               	goto	l6924
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
  6249  001A5C  501C               	movf	vscp_readStdReg@reg,w,c
  6250  001A5E  0F7C               	addlw	124
  6251  001A60  EC6F  F018         	call	_vscp_getUserID
  6252  001A64  D05D               	goto	L25
  6253  001A66                     l6924:
  6254                           
  6255                           ; BSR set to: 0
  6256                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
  6257                           ;vscp_firmware.c: 628: (reg < 0x91)) {
  6258  001A66  0E88               	movlw	136
  6259  001A68  641C               	cpfsgt	vscp_readStdReg@reg,c
  6260  001A6A  D008               	goto	l6930
  6261                           
  6262                           ; BSR set to: 0
  6263  001A6C  0E91               	movlw	145
  6264  001A6E  601C               	cpfslt	vscp_readStdReg@reg,c
  6265  001A70  D005               	goto	l6930
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
  6269  001A72  501C               	movf	vscp_readStdReg@reg,w,c
  6270  001A74  0F77               	addlw	119
  6271  001A76  EC65  F018         	call	_vscp_getManufacturerId
  6272  001A7A  D052               	goto	L25
  6273  001A7C                     l6930:
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
  6277  001A7C  501C               	movf	vscp_readStdReg@reg,w,c
  6278  001A7E  0A91               	xorlw	145
  6279  001A80  E103               	bnz	l6934
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;vscp_firmware.c: 637: rv = vscp_nickname;
  6283  001A82  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6284                           
  6285                           ;vscp_firmware.c: 639: }
  6286  001A86  D091               	goto	l6984
  6287  001A88                     l6934:
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
  6291  001A88  501C               	movf	vscp_readStdReg@reg,w,c
  6292  001A8A  0A93               	xorlw	147
  6293  001A8C  E103               	bnz	l6938
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
  6297  001A8E  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6298                           
  6299                           ;vscp_firmware.c: 645: }
  6300  001A92  D08B               	goto	l6984
  6301  001A94                     l6938:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
  6305  001A94  501C               	movf	vscp_readStdReg@reg,w,c
  6306  001A96  0A92               	xorlw	146
  6307  001A98  E102               	bnz	l6942
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
  6311  001A9A  5053               	movf	_vscp_page_select+1,w,c
  6312  001A9C  D041               	goto	L25
  6313  001A9E                     l6942:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
  6317  001A9E  501C               	movf	vscp_readStdReg@reg,w,c
  6318  001AA0  0A97               	xorlw	151
  6319  001AA2  E103               	bnz	l6946
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
  6323  001AA4  ECC9  F018         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6324  001AA8  D03B               	goto	L25
  6325  001AAA                     l6946:
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
  6329  001AAA  501C               	movf	vscp_readStdReg@reg,w,c
  6330  001AAC  0A98               	xorlw	152
  6331  001AAE  E103               	bnz	l6950
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
  6335  001AB0  ECC8  F018         	call	_vscp_getBufferSize	;wreg free
  6336  001AB4  D035               	goto	L25
  6337  001AB6                     l6950:
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
  6341  001AB6  501C               	movf	vscp_readStdReg@reg,w,c
  6342  001AB8  0A99               	xorlw	153
  6343  001ABA  E103               	bnz	l6954
  6344                           
  6345                           ; BSR set to: 0
  6346                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
  6347  001ABC  ECC7  F018         	call	_vscp_getRegisterPagesUsed	;wreg free
  6348  001AC0  D02F               	goto	L25
  6349  001AC2                     l6954:
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
  6353                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
  6354  001AC2  0E99               	movlw	153
  6355  001AC4  641C               	cpfsgt	vscp_readStdReg@reg,c
  6356  001AC6  D02E               	goto	l6964
  6357                           
  6358                           ; BSR set to: 0
  6359  001AC8  0E9E               	movlw	158
  6360  001ACA  601C               	cpfslt	vscp_readStdReg@reg,c
  6361  001ACC  D02B               	goto	l6964
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
  6365  001ACE  ECAD  F018         	call	_vscp_getFamilyCode	;wreg free
  6366  001AD2  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6367  001AD6  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6368  001ADA  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6369  001ADE  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
  6373  001AE2  501C               	movf	vscp_readStdReg@reg,w,c
  6374  001AE4  0F66               	addlw	102
  6375  001AE6  6E19               	movwf	vscp_readStdReg@idx,c
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6379  001AE8  5019               	movf	vscp_readStdReg@idx,w,c
  6380  001AEA  0803               	sublw	3
  6381  001AEC  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6382  001AEE  90D8               	bcf	status,0,c
  6383  001AF0  360C               	rlcf	??_vscp_readStdReg,f,c
  6384  001AF2  90D8               	bcf	status,0,c
  6385  001AF4  360C               	rlcf	??_vscp_readStdReg,f,c
  6386  001AF6  90D8               	bcf	status,0,c
  6387  001AF8  360C               	rlcf	??_vscp_readStdReg,f,c
  6388  001AFA  500C               	movf	??_vscp_readStdReg,w,c
  6389  001AFC  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6390  001B00  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6391  001B04  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6392  001B08  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6393  001B0C  2AE8               	incf	wreg,f,c
  6394  001B0E  D005               	goto	u7350
  6395  001B10                     u7355:
  6396  001B10  90D8               	bcf	status,0,c
  6397  001B12  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6398  001B14  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6399  001B16  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6400  001B18  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6401  001B1A                     u7350:
  6402  001B1A  2EE8               	decfsz	wreg,f,c
  6403  001B1C  D7F9               	goto	u7355
  6404  001B1E  D030               	goto	L26
  6405  001B20                     L25:
  6406  001B20  6E1B               	movwf	vscp_readStdReg@rv,c
  6407                           
  6408                           ;vscp_firmware.c: 671: }
  6409  001B22  D043               	goto	l6984
  6410  001B24                     l6964:
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
  6414                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
  6415  001B24  0E9D               	movlw	157
  6416  001B26  641C               	cpfsgt	vscp_readStdReg@reg,c
  6417  001B28  D02D               	goto	l6974
  6418                           
  6419                           ; BSR set to: 0
  6420  001B2A  0EA2               	movlw	162
  6421  001B2C  601C               	cpfslt	vscp_readStdReg@reg,c
  6422  001B2E  D02A               	goto	l6974
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
  6426  001B30  ECA8  F018         	call	_vscp_getFamilyType	;wreg free
  6427  001B34  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1117+3
  6428  001B38  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1117+2
  6429  001B3C  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1117+1
  6430  001B40  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1117
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
  6434  001B44  501C               	movf	vscp_readStdReg@reg,w,c
  6435  001B46  0F62               	addlw	98
  6436  001B48  6E1A               	movwf	vscp_readStdReg@idx_1118,c
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6440  001B4A  501A               	movf	vscp_readStdReg@idx_1118,w,c
  6441  001B4C  0803               	sublw	3
  6442  001B4E  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6443  001B50  90D8               	bcf	status,0,c
  6444  001B52  360C               	rlcf	??_vscp_readStdReg,f,c
  6445  001B54  90D8               	bcf	status,0,c
  6446  001B56  360C               	rlcf	??_vscp_readStdReg,f,c
  6447  001B58  90D8               	bcf	status,0,c
  6448  001B5A  360C               	rlcf	??_vscp_readStdReg,f,c
  6449  001B5C  500C               	movf	??_vscp_readStdReg,w,c
  6450  001B5E  C015  F00D         	movff	vscp_readStdReg@code_1117,??_vscp_readStdReg+1
  6451  001B62  C016  F00E         	movff	vscp_readStdReg@code_1117+1,??_vscp_readStdReg+2
  6452  001B66  C017  F00F         	movff	vscp_readStdReg@code_1117+2,??_vscp_readStdReg+3
  6453  001B6A  C018  F010         	movff	vscp_readStdReg@code_1117+3,??_vscp_readStdReg+4
  6454  001B6E  2AE8               	incf	wreg,f,c
  6455  001B70  D005               	goto	u7380
  6456  001B72                     u7385:
  6457  001B72  90D8               	bcf	status,0,c
  6458  001B74  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6459  001B76  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6460  001B78  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6461  001B7A  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6462  001B7C                     u7380:
  6463  001B7C  2EE8               	decfsz	wreg,f,c
  6464  001B7E  D7F9               	goto	u7385
  6465  001B80                     L26:
  6466  001B80  500D               	movf	??_vscp_readStdReg+1,w,c
  6467  001B82  D7CE               	goto	L25
  6468  001B84                     l6974:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
  6472                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
  6473  001B84  0ECF               	movlw	207
  6474  001B86  641C               	cpfsgt	vscp_readStdReg@reg,c
  6475  001B88  D008               	goto	l6980
  6476                           
  6477                           ; BSR set to: 0
  6478  001B8A  0EE0               	movlw	224
  6479  001B8C  601C               	cpfslt	vscp_readStdReg@reg,c
  6480  001B8E  D005               	goto	l6980
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
  6484  001B90  501C               	movf	vscp_readStdReg@reg,w,c
  6485  001B92  0F30               	addlw	48
  6486  001B94  EC79  F018         	call	_vscp_getGUID
  6487  001B98  D7C3               	goto	L25
  6488  001B9A                     l6980:
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
  6492  001B9A  0EDF               	movlw	223
  6493  001B9C  641C               	cpfsgt	vscp_readStdReg@reg,c
  6494  001B9E  D005               	goto	l6984
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
  6498  001BA0  501C               	movf	vscp_readStdReg@reg,w,c
  6499  001BA2  0F20               	addlw	32
  6500  001BA4  EC13  F018         	call	_vscp_getMDF_URL
  6501  001BA8  D7BB               	goto	L25
  6502  001BAA                     l6984:
  6503                           
  6504                           ;vscp_firmware.c: 691: }
  6505                           ;vscp_firmware.c: 693: return rv;
  6506  001BAA  501B               	movf	vscp_readStdReg@rv,w,c
  6507  001BAC  0012               	return	
  6508  001BAE                     __end_of_vscp_readStdReg:
  6509                           	opt stack 0
  6510                           prodh	equ	0xFF4
  6511                           prodl	equ	0xFF3
  6512                           postinc0	equ	0xFEE
  6513                           wreg	equ	0xFE8
  6514                           indf1	equ	0xFE7
  6515                           fsr1h	equ	0xFE2
  6516                           fsr1l	equ	0xFE1
  6517                           indf2	equ	0xFDF
  6518                           postinc2	equ	0xFDE
  6519                           postdec2	equ	0xFDD
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6525 ;; Defined at:
  6526 ;;		line 1439 in file "../main.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      unsigned char 
  6533 ;; Registers used:
  6534 ;;		wreg
  6535 ;; Tracked objects:
  6536 ;;		On entry : F/0
  6537 ;;		On exit  : F/0
  6538 ;;		Unchanged: F/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    2
  6547 ;; This function calls:
  6548 ;;		Nothing
  6549 ;; This function is called by:
  6550 ;;		_vscp_readStdReg
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text27
  6555  00318E                     __ptext27:
  6556                           	opt stack 0
  6557  00318E                     _vscp_getRegisterPagesUsed:
  6558                           	opt stack 26
  6559                           
  6560                           ; BSR set to: 0
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;main.c: 1440: return 1;
  6564                           
  6565                           ;incstack = 0
  6566                           ;incstack = 0
  6567  00318E  0C01               	retlw	1
  6568  003190                     __end_of_vscp_getRegisterPagesUsed:
  6569                           	opt stack 0
  6570                           prodh	equ	0xFF4
  6571                           prodl	equ	0xFF3
  6572                           postinc0	equ	0xFEE
  6573                           wreg	equ	0xFE8
  6574                           indf1	equ	0xFE7
  6575                           fsr1h	equ	0xFE2
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function _vscp_getFamilyType *****************
  6585 ;; Defined at:
  6586 ;;		line 1420 in file "../main.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;		None
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;		None
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  4    7[COMRAM] unsigned long 
  6593 ;; Registers used:
  6594 ;;		None
  6595 ;; Tracked objects:
  6596 ;;		On entry : F/0
  6597 ;;		On exit  : F/0
  6598 ;;		Unchanged: F/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6603 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6604 ;;Total ram usage:        4 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    2
  6607 ;; This function calls:
  6608 ;;		Nothing
  6609 ;; This function is called by:
  6610 ;;		_vscp_readStdReg
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text28
  6615  003150                     __ptext28:
  6616                           	opt stack 0
  6617  003150                     _vscp_getFamilyType:
  6618                           	opt stack 26
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;main.c: 1421: return 0;
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;incstack = 0
  6625                           ;incstack = 0
  6626  003150  6A08               	clrf	?_vscp_getFamilyType,c
  6627  003152  6A09               	clrf	?_vscp_getFamilyType+1,c
  6628  003154  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6629  003156  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6630                           
  6631                           ; BSR set to: 0
  6632  003158  0012               	return	
  6633  00315A                     __end_of_vscp_getFamilyType:
  6634                           	opt stack 0
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           indf1	equ	0xFE7
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           indf2	equ	0xFDF
  6643                           postinc2	equ	0xFDE
  6644                           postdec2	equ	0xFDD
  6645                           fsr2h	equ	0xFDA
  6646                           fsr2l	equ	0xFD9
  6647                           status	equ	0xFD8
  6648                           
  6649 ;; *************** function _vscp_getFamilyCode *****************
  6650 ;; Defined at:
  6651 ;;		line 1411 in file "../main.c"
  6652 ;; Parameters:    Size  Location     Type
  6653 ;;		None
  6654 ;; Auto vars:     Size  Location     Type
  6655 ;;		None
  6656 ;; Return value:  Size  Location     Type
  6657 ;;                  4    7[COMRAM] unsigned long 
  6658 ;; Registers used:
  6659 ;;		None
  6660 ;; Tracked objects:
  6661 ;;		On entry : F/0
  6662 ;;		On exit  : F/0
  6663 ;;		Unchanged: F/0
  6664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6665 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6668 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6669 ;;Total ram usage:        4 bytes
  6670 ;; Hardware stack levels used:    1
  6671 ;; Hardware stack levels required when called:    2
  6672 ;; This function calls:
  6673 ;;		Nothing
  6674 ;; This function is called by:
  6675 ;;		_vscp_readStdReg
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           	psect	text29
  6680  00315A                     __ptext29:
  6681                           	opt stack 0
  6682  00315A                     _vscp_getFamilyCode:
  6683                           	opt stack 26
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 1412: return 0L;
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;incstack = 0
  6690                           ;incstack = 0
  6691  00315A  6A08               	clrf	?_vscp_getFamilyCode,c
  6692  00315C  6A09               	clrf	?_vscp_getFamilyCode+1,c
  6693  00315E  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  6694  003160  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  6695                           
  6696                           ; BSR set to: 0
  6697  003162  0012               	return	
  6698  003164                     __end_of_vscp_getFamilyCode:
  6699                           	opt stack 0
  6700                           prodh	equ	0xFF4
  6701                           prodl	equ	0xFF3
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           indf1	equ	0xFE7
  6705                           fsr1h	equ	0xFE2
  6706                           fsr1l	equ	0xFE1
  6707                           indf2	equ	0xFDF
  6708                           postinc2	equ	0xFDE
  6709                           postdec2	equ	0xFDD
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714 ;; *************** function _vscp_getBufferSize *****************
  6715 ;; Defined at:
  6716 ;;		line 1291 in file "../main.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      unsigned char 
  6723 ;; Registers used:
  6724 ;;		wreg
  6725 ;; Tracked objects:
  6726 ;;		On entry : F/0
  6727 ;;		On exit  : F/0
  6728 ;;		Unchanged: F/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6734 ;;Total ram usage:        0 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    2
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_vscp_readStdReg
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text30
  6745  003190                     __ptext30:
  6746                           	opt stack 0
  6747  003190                     _vscp_getBufferSize:
  6748                           	opt stack 26
  6749                           
  6750                           ; BSR set to: 0
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;main.c: 1292: return 8;
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;incstack = 0
  6757                           ;incstack = 0
  6758  003190  0C08               	retlw	8
  6759  003192                     __end_of_vscp_getBufferSize:
  6760                           	opt stack 0
  6761                           prodh	equ	0xFF4
  6762                           prodl	equ	0xFF3
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           indf1	equ	0xFE7
  6766                           fsr1h	equ	0xFE2
  6767                           fsr1l	equ	0xFE1
  6768                           indf2	equ	0xFDF
  6769                           postinc2	equ	0xFDE
  6770                           postdec2	equ	0xFDD
  6771                           fsr2h	equ	0xFDA
  6772                           fsr2l	equ	0xFD9
  6773                           status	equ	0xFD8
  6774                           
  6775 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  6776 ;; Defined at:
  6777 ;;		line 1282 in file "../main.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  1    wreg      unsigned char 
  6784 ;; Registers used:
  6785 ;;		wreg
  6786 ;; Tracked objects:
  6787 ;;		On entry : F/0
  6788 ;;		On exit  : F/0
  6789 ;;		Unchanged: F/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    2
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_vscp_readStdReg
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text31
  6806  003192                     __ptext31:
  6807                           	opt stack 0
  6808  003192                     _vscp_getBootLoaderAlgorithm:
  6809                           	opt stack 26
  6810                           
  6811                           ; BSR set to: 0
  6812                           
  6813                           ; BSR set to: 0
  6814                           ;main.c: 1283: return 0x01;
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;incstack = 0
  6818                           ;incstack = 0
  6819  003192  0C01               	retlw	1
  6820  003194                     __end_of_vscp_getBootLoaderAlgorithm:
  6821                           	opt stack 0
  6822                           prodh	equ	0xFF4
  6823                           prodl	equ	0xFF3
  6824                           postinc0	equ	0xFEE
  6825                           wreg	equ	0xFE8
  6826                           indf1	equ	0xFE7
  6827                           fsr1h	equ	0xFE2
  6828                           fsr1l	equ	0xFE1
  6829                           indf2	equ	0xFDF
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _vscp_getManufacturerId *****************
  6837 ;; Defined at:
  6838 ;;		line 1273 in file "../main.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  idx             1    wreg     unsigned char 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  idx             1    9[COMRAM] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;                  1    wreg      unsigned char 
  6845 ;; Registers used:
  6846 ;;		wreg, status,2, status,0, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6856 ;;Total ram usage:        1 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    3
  6859 ;; This function calls:
  6860 ;;		_Read_b_eep
  6861 ;; This function is called by:
  6862 ;;		_vscp_readStdReg
  6863 ;;		_vscp_writeStdReg
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text32
  6868  0030CA                     __ptext32:
  6869                           	opt stack 0
  6870  0030CA                     _vscp_getManufacturerId:
  6871                           	opt stack 25
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;incstack = 0
  6875                           ;incstack = 0
  6876                           ;vscp_getManufacturerId@idx stored from wreg
  6877  0030CA  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
  6878                           
  6879                           ;main.c: 1274: return Read_b_eep(0x09 + idx);
  6880  0030CE  0E09               	movlw	9
  6881  0030D0  240A               	addwf	vscp_getManufacturerId@idx,w,c
  6882  0030D2  6E08               	movwf	?_Read_b_eep,c
  6883  0030D4  6A09               	clrf	?_Read_b_eep+1,c
  6884  0030D6  0E00               	movlw	0
  6885  0030D8  2209               	addwfc	?_Read_b_eep+1,f,c
  6886  0030DA  EF21  F018         	goto	_Read_b_eep	;wreg free
  6887  0030DE                     __end_of_vscp_getManufacturerId:
  6888                           	opt stack 0
  6889                           prodh	equ	0xFF4
  6890                           prodl	equ	0xFF3
  6891                           postinc0	equ	0xFEE
  6892                           wreg	equ	0xFE8
  6893                           indf1	equ	0xFE7
  6894                           fsr1h	equ	0xFE2
  6895                           fsr1l	equ	0xFE1
  6896                           indf2	equ	0xFDF
  6897                           postinc2	equ	0xFDE
  6898                           postdec2	equ	0xFDD
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _vscp_getUserID *****************
  6904 ;; Defined at:
  6905 ;;		line 1253 in file "../main.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  idx             1    wreg     unsigned char 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  idx             1    9[COMRAM] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      unsigned char 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0, cstack
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6923 ;;Total ram usage:        1 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    3
  6926 ;; This function calls:
  6927 ;;		_Read_b_eep
  6928 ;; This function is called by:
  6929 ;;		_vscp_readStdReg
  6930 ;;		_vscp_writeStdReg
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text33
  6935  0030DE                     __ptext33:
  6936                           	opt stack 0
  6937  0030DE                     _vscp_getUserID:
  6938                           	opt stack 25
  6939                           
  6940                           ;incstack = 0
  6941                           ;incstack = 0
  6942                           ;vscp_getUserID@idx stored from wreg
  6943  0030DE  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
  6944                           
  6945                           ;main.c: 1254: return Read_b_eep(0x04 + idx);
  6946  0030E2  0E04               	movlw	4
  6947  0030E4  240A               	addwf	vscp_getUserID@idx,w,c
  6948  0030E6  6E08               	movwf	?_Read_b_eep,c
  6949  0030E8  6A09               	clrf	?_Read_b_eep+1,c
  6950  0030EA  0E00               	movlw	0
  6951  0030EC  2209               	addwfc	?_Read_b_eep+1,f,c
  6952  0030EE  EF21  F018         	goto	_Read_b_eep	;wreg free
  6953  0030F2                     __end_of_vscp_getUserID:
  6954                           	opt stack 0
  6955                           prodh	equ	0xFF4
  6956                           prodl	equ	0xFF3
  6957                           postinc0	equ	0xFEE
  6958                           wreg	equ	0xFE8
  6959                           indf1	equ	0xFE7
  6960                           fsr1h	equ	0xFE2
  6961                           fsr1l	equ	0xFE1
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           fsr2h	equ	0xFDA
  6966                           fsr2l	equ	0xFD9
  6967                           status	equ	0xFD8
  6968                           
  6969 ;; *************** function _vscp_getMDF_URL *****************
  6970 ;; Defined at:
  6971 ;;		line 1244 in file "../main.c"
  6972 ;; Parameters:    Size  Location     Type
  6973 ;;  idx             1    wreg     unsigned char 
  6974 ;; Auto vars:     Size  Location     Type
  6975 ;;  idx             1    8[COMRAM] unsigned char 
  6976 ;; Return value:  Size  Location     Type
  6977 ;;                  1    wreg      unsigned char 
  6978 ;; Registers used:
  6979 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6980 ;; Tracked objects:
  6981 ;;		On entry : F/0
  6982 ;;		On exit  : F/0
  6983 ;;		Unchanged: F/0
  6984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6986 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6988 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6989 ;;Total ram usage:        2 bytes
  6990 ;; Hardware stack levels used:    1
  6991 ;; Hardware stack levels required when called:    2
  6992 ;; This function calls:
  6993 ;;		Nothing
  6994 ;; This function is called by:
  6995 ;;		_vscp_readStdReg
  6996 ;;		_vscp_handleProtocolEvent
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text34
  7001  003026                     __ptext34:
  7002                           	opt stack 0
  7003  003026                     _vscp_getMDF_URL:
  7004                           	opt stack 26
  7005                           
  7006                           ;incstack = 0
  7007                           ;incstack = 0
  7008                           ;vscp_getMDF_URL@idx stored from wreg
  7009  003026  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;main.c: 1245: return vscp_deviceURL[ idx ];
  7013  00302A  5009               	movf	vscp_getMDF_URL@idx,w,c
  7014  00302C  0F00               	addlw	low _vscp_deviceURL
  7015  00302E  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  7016  003030  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  7017  003034  0E0F               	movlw	high __smallconst
  7018  003036  6EF7               	movwf	tblptrh,c
  7019  003038  0E00               	movlw	low (__smallconst shr (0+16))
  7020  00303A  6EF8               	movwf	tblptru,c
  7021  00303C  0008               	tblrd		*
  7022  00303E  50F5               	movf	tablat,w,c
  7023                           
  7024                           ; BSR set to: 0
  7025  003040  0012               	return	
  7026  003042                     __end_of_vscp_getMDF_URL:
  7027                           	opt stack 0
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           postinc0	equ	0xFEE
  7035                           wreg	equ	0xFE8
  7036                           indf1	equ	0xFE7
  7037                           fsr1h	equ	0xFE2
  7038                           fsr1l	equ	0xFE1
  7039                           indf2	equ	0xFDF
  7040                           postinc2	equ	0xFDE
  7041                           postdec2	equ	0xFDD
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _vscp_getGUID *****************
  7047 ;; Defined at:
  7048 ;;		line 1232 in file "../main.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  idx             1    wreg     unsigned char 
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;  idx             1    9[COMRAM] unsigned char 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      unsigned char 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7065 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7066 ;;Total ram usage:        1 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    3
  7069 ;; This function calls:
  7070 ;;		_Read_b_eep
  7071 ;; This function is called by:
  7072 ;;		_vscp_readStdReg
  7073 ;;		_vscp_writeStdReg
  7074 ;;		_vscp_handleProtocolEvent
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text35
  7079  0030F2                     __ptext35:
  7080                           	opt stack 0
  7081  0030F2                     _vscp_getGUID:
  7082                           	opt stack 25
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;incstack = 0
  7086                           ;incstack = 0
  7087                           ;vscp_getGUID@idx stored from wreg
  7088  0030F2  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
  7089                           
  7090                           ;main.c: 1233: return Read_b_eep(0x11 + idx);
  7091  0030F6  0E11               	movlw	17
  7092  0030F8  240A               	addwf	vscp_getGUID@idx,w,c
  7093  0030FA  6E08               	movwf	?_Read_b_eep,c
  7094  0030FC  6A09               	clrf	?_Read_b_eep+1,c
  7095  0030FE  0E00               	movlw	0
  7096  003100  2209               	addwfc	?_Read_b_eep+1,f,c
  7097  003102  EF21  F018         	goto	_Read_b_eep	;wreg free
  7098  003106                     __end_of_vscp_getGUID:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           indf1	equ	0xFE7
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _vscp_getSubMinorVersion *****************
  7119 ;; Defined at:
  7120 ;;		line 1221 in file "../main.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;                  1    wreg      unsigned char 
  7127 ;; Registers used:
  7128 ;;		wreg
  7129 ;; Tracked objects:
  7130 ;;		On entry : F/0
  7131 ;;		On exit  : F/0
  7132 ;;		Unchanged: F/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7138 ;;Total ram usage:        0 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    2
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_vscp_readStdReg
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text36
  7149  003194                     __ptext36:
  7150                           	opt stack 0
  7151  003194                     _vscp_getSubMinorVersion:
  7152                           	opt stack 26
  7153                           
  7154                           ; BSR set to: 0
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;main.c: 1222: return 0;
  7158                           
  7159                           ;incstack = 0
  7160                           ;incstack = 0
  7161  003194  0C00               	retlw	0
  7162  003196                     __end_of_vscp_getSubMinorVersion:
  7163                           	opt stack 0
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           postinc0	equ	0xFEE
  7171                           wreg	equ	0xFE8
  7172                           indf1	equ	0xFE7
  7173                           fsr1h	equ	0xFE2
  7174                           fsr1l	equ	0xFE1
  7175                           indf2	equ	0xFDF
  7176                           postinc2	equ	0xFDE
  7177                           postdec2	equ	0xFDD
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           
  7182 ;; *************** function _vscp_getMinorVersion *****************
  7183 ;; Defined at:
  7184 ;;		line 1212 in file "../main.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;		None
  7187 ;; Auto vars:     Size  Location     Type
  7188 ;;		None
  7189 ;; Return value:  Size  Location     Type
  7190 ;;                  1    wreg      unsigned char 
  7191 ;; Registers used:
  7192 ;;		wreg
  7193 ;; Tracked objects:
  7194 ;;		On entry : F/0
  7195 ;;		On exit  : F/0
  7196 ;;		Unchanged: F/0
  7197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7201 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7202 ;;Total ram usage:        0 bytes
  7203 ;; Hardware stack levels used:    1
  7204 ;; Hardware stack levels required when called:    2
  7205 ;; This function calls:
  7206 ;;		Nothing
  7207 ;; This function is called by:
  7208 ;;		_vscp_readStdReg
  7209 ;; This function uses a non-reentrant model
  7210 ;;
  7211                           
  7212                           	psect	text37
  7213  003196                     __ptext37:
  7214                           	opt stack 0
  7215  003196                     _vscp_getMinorVersion:
  7216                           	opt stack 26
  7217                           
  7218                           ; BSR set to: 0
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;main.c: 1213: return 0;
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;incstack = 0
  7225                           ;incstack = 0
  7226  003196  0C00               	retlw	0
  7227  003198                     __end_of_vscp_getMinorVersion:
  7228                           	opt stack 0
  7229                           tblptru	equ	0xFF8
  7230                           tblptrh	equ	0xFF7
  7231                           tblptrl	equ	0xFF6
  7232                           tablat	equ	0xFF5
  7233                           prodh	equ	0xFF4
  7234                           prodl	equ	0xFF3
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           indf1	equ	0xFE7
  7238                           fsr1h	equ	0xFE2
  7239                           fsr1l	equ	0xFE1
  7240                           indf2	equ	0xFDF
  7241                           postinc2	equ	0xFDE
  7242                           postdec2	equ	0xFDD
  7243                           fsr2h	equ	0xFDA
  7244                           fsr2l	equ	0xFD9
  7245                           status	equ	0xFD8
  7246                           
  7247 ;; *************** function _vscp_getMajorVersion *****************
  7248 ;; Defined at:
  7249 ;;		line 1203 in file "../main.c"
  7250 ;; Parameters:    Size  Location     Type
  7251 ;;		None
  7252 ;; Auto vars:     Size  Location     Type
  7253 ;;		None
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      unsigned char 
  7256 ;; Registers used:
  7257 ;;		wreg
  7258 ;; Tracked objects:
  7259 ;;		On entry : F/0
  7260 ;;		On exit  : F/0
  7261 ;;		Unchanged: F/0
  7262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7267 ;;Total ram usage:        0 bytes
  7268 ;; Hardware stack levels used:    1
  7269 ;; Hardware stack levels required when called:    2
  7270 ;; This function calls:
  7271 ;;		Nothing
  7272 ;; This function is called by:
  7273 ;;		_vscp_readStdReg
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	text38
  7278  003198                     __ptext38:
  7279                           	opt stack 0
  7280  003198                     _vscp_getMajorVersion:
  7281                           	opt stack 26
  7282                           
  7283                           ; BSR set to: 0
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;main.c: 1204: return 1;
  7287                           
  7288                           ; BSR set to: 0
  7289                           ;incstack = 0
  7290                           ;incstack = 0
  7291  003198  0C01               	retlw	1
  7292  00319A                     __end_of_vscp_getMajorVersion:
  7293                           	opt stack 0
  7294                           tblptru	equ	0xFF8
  7295                           tblptrh	equ	0xFF7
  7296                           tblptrl	equ	0xFF6
  7297                           tablat	equ	0xFF5
  7298                           prodh	equ	0xFF4
  7299                           prodl	equ	0xFF3
  7300                           postinc0	equ	0xFEE
  7301                           wreg	equ	0xFE8
  7302                           indf1	equ	0xFE7
  7303                           fsr1h	equ	0xFE2
  7304                           fsr1l	equ	0xFE1
  7305                           indf2	equ	0xFDF
  7306                           postinc2	equ	0xFDE
  7307                           postdec2	equ	0xFDD
  7308                           fsr2h	equ	0xFDA
  7309                           fsr2l	equ	0xFD9
  7310                           status	equ	0xFD8
  7311                           
  7312 ;; *************** function _vscp_newNodeOnline *****************
  7313 ;; Defined at:
  7314 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;		None
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;		None
  7319 ;; Return value:  Size  Location     Type
  7320 ;;		None               void
  7321 ;; Registers used:
  7322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7323 ;; Tracked objects:
  7324 ;;		On entry : F/0
  7325 ;;		On exit  : F/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7330 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7331 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7332 ;;Total ram usage:        1 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    7
  7335 ;; This function calls:
  7336 ;;		_vscp_sendEvent
  7337 ;; This function is called by:
  7338 ;;		_vscp_handleProtocolEvent
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341                           
  7342                           	psect	text39
  7343  002E04                     __ptext39:
  7344                           	opt stack 0
  7345  002E04                     _vscp_newNodeOnline:
  7346                           	opt stack 22
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
  7350                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;incstack = 0
  7354                           ;incstack = 0
  7355  002E04  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7356  002E08  0E0F               	movlw	15
  7357  002E0A  164C               	andwf	??_vscp_newNodeOnline,f,c
  7358  002E0C  044C               	decf	??_vscp_newNodeOnline,w,c
  7359  002E0E  A4D8               	btfss	status,2,c
  7360  002E10  0012               	return	
  7361                           
  7362                           ; BSR set to: 0
  7363  002E12  5170               	movf	_vscp_nickname& (0+255),w,b
  7364  002E14  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7365  002E18  62DF               	cpfseq	indf2,c
  7366  002E1A  0012               	return	
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
  7370  002E1C  0E80               	movlw	128
  7371  002E1E  6F83               	movwf	_vscp_omsg& (0+255),b
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
  7375  002E20  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
  7379  002E22  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7380  002E24  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7381                           
  7382                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
  7383  002E26  0E03               	movlw	3
  7384  002E28  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;vscp_firmware.c: 514: vscp_sendEvent();
  7388  002E2A  EF3E  F017         	goto	_vscp_sendEvent	;wreg free
  7389  002E2E                     __end_of_vscp_newNodeOnline:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           postinc0	equ	0xFEE
  7398                           wreg	equ	0xFE8
  7399                           indf1	equ	0xFE7
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _vscp_handleDropNickname *****************
  7410 ;; Defined at:
  7411 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  bytes           1   12[COMRAM] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;		None               void
  7418 ;; Registers used:
  7419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : F/0
  7422 ;;		On exit  : F/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7429 ;;Total ram usage:        1 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    5
  7432 ;; This function calls:
  7433 ;;		_vscp_init
  7434 ;;		_vscp_writeNicknamePermanent
  7435 ;; This function is called by:
  7436 ;;		_vscp_handleProtocolEvent
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text40
  7441  002DA8                     __ptext40:
  7442                           	opt stack 0
  7443  002DA8                     _vscp_handleDropNickname:
  7444                           	opt stack 24
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;incstack = 0
  7451                           ;incstack = 0
  7452  002DA8  5175               	movf	_vscp_imsg& (0+255),w,b
  7453  002DAA  0B0F               	andlw	15
  7454  002DAC  6E0D               	movwf	vscp_handleDropNickname@bytes,c
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7458  002DAE  500D               	movf	vscp_handleDropNickname@bytes,w,c
  7459  002DB0  B4D8               	btfsc	status,2,c
  7460  002DB2  0012               	return	
  7461                           
  7462                           ; BSR set to: 0
  7463  002DB4  5170               	movf	_vscp_nickname& (0+255),w,b
  7464  002DB6  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7465  002DBA  62DF               	cpfseq	indf2,c
  7466  002DBC  0012               	return	
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7470  002DBE  040D               	decf	vscp_handleDropNickname@bytes,w,c
  7471  002DC0  E005               	bz	l893
  7472                           
  7473                           ; BSR set to: 0
  7474  002DC2  0E01               	movlw	1
  7475  002DC4  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
  7476  002DC6  0C01               	retlw	1
  7477                           
  7478                           ; BSR set to: 0
  7479  002DC8  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7480  002DCA  0C01               	retlw	1
  7481  002DCC                     l893:
  7482                           
  7483                           ; BSR set to: 0
  7484                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
  7485  002DCC  6970               	setf	_vscp_nickname& (0+255),b
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
  7489  002DCE  0EFF               	movlw	255
  7490  002DD0  EC5A  F018         	call	_vscp_writeNicknamePermanent
  7491                           
  7492                           ;vscp_firmware.c: 481: vscp_init();
  7493  002DD4  EF0A  F016         	goto	_vscp_init	;wreg free
  7494  002DD8                     __end_of_vscp_handleDropNickname:
  7495                           	opt stack 0
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           postinc0	equ	0xFEE
  7503                           wreg	equ	0xFE8
  7504                           indf1	equ	0xFE7
  7505                           fsr1h	equ	0xFE2
  7506                           fsr1l	equ	0xFE1
  7507                           indf2	equ	0xFDF
  7508                           postinc2	equ	0xFDE
  7509                           postdec2	equ	0xFDD
  7510                           fsr2h	equ	0xFDA
  7511                           fsr2l	equ	0xFD9
  7512                           status	equ	0xFD8
  7513                           
  7514 ;; *************** function _vscp_init *****************
  7515 ;; Defined at:
  7516 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
  7517 ;; Parameters:    Size  Location     Type
  7518 ;;		None
  7519 ;; Auto vars:     Size  Location     Type
  7520 ;;		None
  7521 ;; Return value:  Size  Location     Type
  7522 ;;		None               void
  7523 ;; Registers used:
  7524 ;;		wreg, status,2, status,0, cstack
  7525 ;; Tracked objects:
  7526 ;;		On entry : 0/E
  7527 ;;		On exit  : F/0
  7528 ;;		Unchanged: 0/0
  7529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7534 ;;Total ram usage:        0 bytes
  7535 ;; Hardware stack levels used:    1
  7536 ;; Hardware stack levels required when called:    4
  7537 ;; This function calls:
  7538 ;;		_vscp_readNicknamePermanent
  7539 ;; This function is called by:
  7540 ;;		_main
  7541 ;;		_vscp_handleDropNickname
  7542 ;;		_vscp_handleProtocolEvent
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text41
  7547  002C14                     __ptext41:
  7548                           	opt stack 0
  7549  002C14                     _vscp_init:
  7550                           	opt stack 24
  7551                           
  7552                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;incstack = 0
  7556                           ;incstack = 0
  7557  002C14  0E02               	movlw	2
  7558  002C16  6E56               	movwf	_vscp_initledfunc,c
  7559                           
  7560                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
  7561  002C18  ECB2  F018         	call	_vscp_readNicknamePermanent	;wreg free
  7562  002C1C  0100               	movlb	0	; () banked
  7563  002C1E  6F70               	movwf	_vscp_nickname& (0+255),b
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
  7567  002C20  6770               	tstfsz	_vscp_nickname& (0+255),b
  7568  002C22  D001               	goto	l835
  7569                           
  7570                           ; BSR set to: 0
  7571  002C24  6970               	setf	_vscp_nickname& (0+255),b
  7572  002C26                     l835:
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
  7576  002C26  6B75               	clrf	_vscp_imsg& (0+255),b
  7577                           
  7578                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
  7579  002C28  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  7580                           
  7581                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
  7582  002C2A  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  7583  002C2C  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  7584                           
  7585                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
  7586  002C2E  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  7587                           
  7588                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
  7589  002C30  6B83               	clrf	_vscp_omsg& (0+255),b
  7590                           
  7591                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
  7592  002C32  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7593                           
  7594                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
  7595  002C34  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7596  002C36  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7597                           
  7598                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
  7599  002C38  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  7600                           
  7601                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
  7602  002C3A  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  7603                           
  7604                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
  7605  002C3C  6A57               	clrf	_vscp_probe_address,c
  7606                           
  7607                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
  7608  002C3E  6B71               	clrf	_vscp_node_state& (0+255),b
  7609                           
  7610                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
  7611  002C40  6B72               	clrf	_vscp_node_substate& (0+255),b
  7612                           
  7613                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
  7614  002C42  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7615                           
  7616                           ;vscp_firmware.c: 150: vscp_page_select = 0;
  7617  002C44  6A52               	clrf	_vscp_page_select,c
  7618  002C46  6A53               	clrf	_vscp_page_select+1,c
  7619                           
  7620                           ;vscp_firmware.c: 153: vscp_timer = 0;
  7621  002C48  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7622  002C4A  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7623                           
  7624                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
  7625  002C4C  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7626  002C4E  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7627                           
  7628                           ;vscp_firmware.c: 155: vscp_second = 0;
  7629  002C50  6B74               	clrf	_vscp_second& (0+255),b
  7630                           
  7631                           ;vscp_firmware.c: 156: vscp_minute = 0;
  7632  002C52  6B6F               	clrf	_vscp_minute& (0+255),b
  7633                           
  7634                           ;vscp_firmware.c: 157: vscp_hour = 0;
  7635  002C54  6B6D               	clrf	_vscp_hour& (0+255),b
  7636                           
  7637                           ; BSR set to: 0
  7638  002C56  0012               	return	
  7639  002C58                     __end_of_vscp_init:
  7640                           	opt stack 0
  7641                           tblptru	equ	0xFF8
  7642                           tblptrh	equ	0xFF7
  7643                           tblptrl	equ	0xFF6
  7644                           tablat	equ	0xFF5
  7645                           prodh	equ	0xFF4
  7646                           prodl	equ	0xFF3
  7647                           postinc0	equ	0xFEE
  7648                           wreg	equ	0xFE8
  7649                           indf1	equ	0xFE7
  7650                           fsr1h	equ	0xFE2
  7651                           fsr1l	equ	0xFE1
  7652                           indf2	equ	0xFDF
  7653                           postinc2	equ	0xFDE
  7654                           postdec2	equ	0xFDD
  7655                           fsr2h	equ	0xFDA
  7656                           fsr2l	equ	0xFD9
  7657                           status	equ	0xFD8
  7658                           
  7659 ;; *************** function _vscp_readNicknamePermanent *****************
  7660 ;; Defined at:
  7661 ;;		line 536 in file "../main.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;		None
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      unsigned char 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2, status,0, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 0/E
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7679 ;;Total ram usage:        0 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    3
  7682 ;; This function calls:
  7683 ;;		_Read_b_eep
  7684 ;; This function is called by:
  7685 ;;		_vscp_init
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           	psect	text42
  7690  003164                     __ptext42:
  7691                           	opt stack 0
  7692  003164                     _vscp_readNicknamePermanent:
  7693                           	opt stack 24
  7694                           
  7695                           ;main.c: 537: return Read_b_eep(0x01);
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;incstack = 0
  7699                           ;incstack = 0
  7700  003164  6A09               	clrf	?_Read_b_eep+1,c
  7701  003166  0E01               	movlw	1
  7702  003168  6E08               	movwf	?_Read_b_eep,c
  7703  00316A  EF21  F018         	goto	_Read_b_eep	;wreg free
  7704  00316E                     __end_of_vscp_readNicknamePermanent:
  7705                           	opt stack 0
  7706                           tblptru	equ	0xFF8
  7707                           tblptrh	equ	0xFF7
  7708                           tblptrl	equ	0xFF6
  7709                           tablat	equ	0xFF5
  7710                           prodh	equ	0xFF4
  7711                           prodl	equ	0xFF3
  7712                           postinc0	equ	0xFEE
  7713                           wreg	equ	0xFE8
  7714                           indf1	equ	0xFE7
  7715                           fsr1h	equ	0xFE2
  7716                           fsr1l	equ	0xFE1
  7717                           indf2	equ	0xFDF
  7718                           postinc2	equ	0xFDE
  7719                           postdec2	equ	0xFDD
  7720                           fsr2h	equ	0xFDA
  7721                           fsr2l	equ	0xFD9
  7722                           status	equ	0xFD8
  7723                           
  7724 ;; *************** function _vscp_handleSetNickname *****************
  7725 ;; Defined at:
  7726 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;		None
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;		None
  7731 ;; Return value:  Size  Location     Type
  7732 ;;		None               void
  7733 ;; Registers used:
  7734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7735 ;; Tracked objects:
  7736 ;;		On entry : F/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7744 ;;Total ram usage:        0 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:    4
  7747 ;; This function calls:
  7748 ;;		_vscp_writeNicknamePermanent
  7749 ;;		_vscp_setSegmentCRC
  7750 ;; This function is called by:
  7751 ;;		_vscp_handleProtocolEvent
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           	psect	text43
  7756  002F10                     __ptext43:
  7757                           	opt stack 0
  7758  002F10                     _vscp_handleSetNickname:
  7759                           	opt stack 25
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
  7763                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7764                           
  7765                           ;incstack = 0
  7766                           ;incstack = 0
  7767  002F10  5175               	movf	_vscp_imsg& (0+255),w,b
  7768  002F12  0B0F               	andlw	15
  7769  002F14  0A02               	xorlw	2
  7770  002F16  A4D8               	btfss	status,2,c
  7771  002F18  0012               	return	
  7772                           
  7773                           ; BSR set to: 0
  7774  002F1A  5170               	movf	_vscp_nickname& (0+255),w,b
  7775  002F1C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7776  002F20  62DF               	cpfseq	indf2,c
  7777  002F22  0012               	return	
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
  7781  002F24  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
  7785  002F28  5170               	movf	_vscp_nickname& (0+255),w,b
  7786  002F2A  EC5A  F018         	call	_vscp_writeNicknamePermanent
  7787                           
  7788                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
  7789  002F2E  0E40               	movlw	64
  7790  002F30  EF4F  F018         	goto	_vscp_setSegmentCRC
  7791  002F34                     __end_of_vscp_handleSetNickname:
  7792                           	opt stack 0
  7793                           tblptru	equ	0xFF8
  7794                           tblptrh	equ	0xFF7
  7795                           tblptrl	equ	0xFF6
  7796                           tablat	equ	0xFF5
  7797                           prodh	equ	0xFF4
  7798                           prodl	equ	0xFF3
  7799                           postinc0	equ	0xFEE
  7800                           wreg	equ	0xFE8
  7801                           indf1	equ	0xFE7
  7802                           fsr1h	equ	0xFE2
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811 ;; *************** function _vscp_handleHeartbeat *****************
  7812 ;; Defined at:
  7813 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;		None               void
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : F/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    4
  7834 ;; This function calls:
  7835 ;;		_vscp_writeNicknamePermanent
  7836 ;;		_vscp_getSegmentCRC
  7837 ;;		_vscp_setSegmentCRC
  7838 ;; This function is called by:
  7839 ;;		_vscp_handleProtocolEvent
  7840 ;; This function uses a non-reentrant model
  7841 ;;
  7842                           
  7843                           	psect	text44
  7844  002C58                     __ptext44:
  7845                           	opt stack 0
  7846  002C58                     _vscp_handleHeartbeat:
  7847                           	opt stack 25
  7848                           
  7849                           ; BSR set to: 0
  7850                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
  7851                           
  7852                           ;incstack = 0
  7853                           ;incstack = 0
  7854  002C58  ECB7  F018         	call	_vscp_getSegmentCRC	;wreg free
  7855  002C5C  0900               	iorlw	0
  7856  002C5E  E118               	bnz	l6850
  7857                           
  7858                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  7859                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  7860  002C60  0100               	movlb	0	; () banked
  7861  002C62  5175               	movf	_vscp_imsg& (0+255),w,b
  7862  002C64  0B0F               	andlw	15
  7863  002C66  0A05               	xorlw	5
  7864  002C68  A4D8               	btfss	status,2,c
  7865  002C6A  0012               	return	
  7866                           
  7867                           ; BSR set to: 0
  7868  002C6C  ECB7  F018         	call	_vscp_getSegmentCRC	;wreg free
  7869  002C70  0100               	movlb	0	; () banked
  7870  002C72  197B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  7871  002C74  B4D8               	btfsc	status,2,c
  7872  002C76  0012               	return	
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7876  002C78  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7877  002C7A  EC4F  F018         	call	_vscp_setSegmentCRC
  7878                           
  7879                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
  7880  002C7E  0100               	movlb	0	; () banked
  7881  002C80  6970               	setf	_vscp_nickname& (0+255),b
  7882                           
  7883                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
  7884  002C82  0EFF               	movlw	255
  7885  002C84  EC5A  F018         	call	_vscp_writeNicknamePermanent
  7886                           
  7887                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
  7888  002C88  0E01               	movlw	1
  7889  002C8A  0100               	movlb	0	; () banked
  7890  002C8C  6F71               	movwf	_vscp_node_state& (0+255),b
  7891  002C8E  0C01               	retlw	1
  7892  002C90                     l6850:
  7893                           
  7894                           ;vscp_firmware.c: 411: else {
  7895                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7896  002C90  0100               	movlb	0	; () banked
  7897  002C92  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7898  002C94  EF4F  F018         	goto	_vscp_setSegmentCRC
  7899  002C98                     __end_of_vscp_handleHeartbeat:
  7900                           	opt stack 0
  7901                           tblptru	equ	0xFF8
  7902                           tblptrh	equ	0xFF7
  7903                           tblptrl	equ	0xFF6
  7904                           tablat	equ	0xFF5
  7905                           prodh	equ	0xFF4
  7906                           prodl	equ	0xFF3
  7907                           postinc0	equ	0xFEE
  7908                           wreg	equ	0xFE8
  7909                           indf1	equ	0xFE7
  7910                           fsr1h	equ	0xFE2
  7911                           fsr1l	equ	0xFE1
  7912                           indf2	equ	0xFDF
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function _vscp_getMatrixInfo *****************
  7920 ;; Defined at:
  7921 ;;		line 1394 in file "../main.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  pData           1    wreg     PTR unsigned char 
  7924 ;;		 -> vscp_omsg(13), 
  7925 ;; Auto vars:     Size  Location     Type
  7926 ;;  pData           1    0[COMRAM] PTR unsigned char 
  7927 ;;		 -> vscp_omsg(13), 
  7928 ;;  i               1    7[COMRAM] unsigned char 
  7929 ;; Return value:  Size  Location     Type
  7930 ;;		None               void
  7931 ;; Registers used:
  7932 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7933 ;; Tracked objects:
  7934 ;;		On entry : F/0
  7935 ;;		On exit  : F/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7942 ;;Total ram usage:        1 bytes
  7943 ;; Hardware stack levels used:    1
  7944 ;; Hardware stack levels required when called:    2
  7945 ;; This function calls:
  7946 ;;		Nothing
  7947 ;; This function is called by:
  7948 ;;		_vscp_handleProtocolEvent
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text45
  7953  002F34                     __ptext45:
  7954                           	opt stack 0
  7955  002F34                     _vscp_getMatrixInfo:
  7956                           	opt stack 27
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;main.c: 1395: uint8_t i;
  7960                           ;main.c: 1397: vscp_omsg.data[ 0 ] = 7;
  7961                           
  7962                           ;incstack = 0
  7963                           ;incstack = 0
  7964  002F34  0E07               	movlw	7
  7965  002F36  6F88               	movwf	(_vscp_omsg+5)& (0+255),b
  7966                           
  7967                           ;main.c: 1398: vscp_omsg.data[ 1 ] = 72;
  7968  002F38  0E48               	movlw	72
  7969  002F3A  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  7970                           
  7971                           ;main.c: 1401: for ( i = 2; i < 8; i++ ) {
  7972  002F3C  0E02               	movlw	2
  7973  002F3E  6E08               	movwf	vscp_getMatrixInfo@i,c
  7974  002F40                     l5062:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 1402: vscp_omsg.data[ i ] = 0;
  7978  002F40  5008               	movf	vscp_getMatrixInfo@i,w,c
  7979  002F42  0F88               	addlw	low (_vscp_omsg+5)
  7980  002F44  6ED9               	movwf	fsr2l,c
  7981  002F46  6ADA               	clrf	fsr2h,c
  7982  002F48  6ADF               	clrf	indf2,c
  7983                           
  7984                           ; BSR set to: 0
  7985  002F4A  2A08               	incf	vscp_getMatrixInfo@i,f,c
  7986                           
  7987                           ; BSR set to: 0
  7988  002F4C  0E07               	movlw	7
  7989  002F4E  6408               	cpfsgt	vscp_getMatrixInfo@i,c
  7990  002F50  D7F7               	goto	l5062
  7991  002F52  0C07               	retlw	7
  7992  002F54                     __end_of_vscp_getMatrixInfo:
  7993                           	opt stack 0
  7994                           tblptru	equ	0xFF8
  7995                           tblptrh	equ	0xFF7
  7996                           tblptrl	equ	0xFF6
  7997                           tablat	equ	0xFF5
  7998                           prodh	equ	0xFF4
  7999                           prodl	equ	0xFF3
  8000                           postinc0	equ	0xFEE
  8001                           wreg	equ	0xFE8
  8002                           indf1	equ	0xFE7
  8003                           fsr1h	equ	0xFE2
  8004                           fsr1l	equ	0xFE1
  8005                           indf2	equ	0xFDF
  8006                           postinc2	equ	0xFDE
  8007                           postdec2	equ	0xFDD
  8008                           fsr2h	equ	0xFDA
  8009                           fsr2l	equ	0xFD9
  8010                           status	equ	0xFD8
  8011                           
  8012 ;; *************** function _vscp_goBootloaderMode *****************
  8013 ;; Defined at:
  8014 ;;		line 1378 in file "../main.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;  algorithm       1    wreg     unsigned char 
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;  algorithm       1   11[COMRAM] unsigned char 
  8019 ;; Return value:  Size  Location     Type
  8020 ;;		None               void
  8021 ;; Registers used:
  8022 ;;		wreg, status,2, status,0, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : F/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8029 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8031 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8032 ;;Total ram usage:        1 bytes
  8033 ;; Hardware stack levels used:    1
  8034 ;; Hardware stack levels required when called:    3
  8035 ;; This function calls:
  8036 ;;		_Busy_eep
  8037 ;;		_Write_b_eep
  8038 ;; This function is called by:
  8039 ;;		_vscp_handleProtocolEvent
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text46
  8044  002FB0                     __ptext46:
  8045                           	opt stack 0
  8046  002FB0                     _vscp_goBootloaderMode:
  8047                           	opt stack 26
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;incstack = 0
  8051                           ;incstack = 0
  8052                           ;vscp_goBootloaderMode@algorithm stored from wreg
  8053  002FB0  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;main.c: 1379: if ( 0x01 != algorithm ) return;
  8057  002FB4  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
  8058  002FB6  A4D8               	btfss	status,2,c
  8059  002FB8  0012               	return	
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;main.c: 1383: (Busy_eep(), Write_b_eep(0x00,0xff));
  8063  002FBA  ECC0  F018         	call	_Busy_eep	;wreg free
  8064  002FBE  6A09               	clrf	?_Write_b_eep+1,c
  8065  002FC0  6A08               	clrf	?_Write_b_eep,c
  8066  002FC2  0EFF               	movlw	255
  8067  002FC4  680A               	setf	?_Write_b_eep+2,c
  8068  002FC6  EC6C  F016         	call	_Write_b_eep	;wreg free
  8069  002FCA  00FF               	reset		;# 
  8070  002FCC  0012               	return	
  8071  002FCE                     __end_of_vscp_goBootloaderMode:
  8072                           	opt stack 0
  8073                           tblptru	equ	0xFF8
  8074                           tblptrh	equ	0xFF7
  8075                           tblptrl	equ	0xFF6
  8076                           tablat	equ	0xFF5
  8077                           prodh	equ	0xFF4
  8078                           prodl	equ	0xFF3
  8079                           postinc0	equ	0xFEE
  8080                           wreg	equ	0xFE8
  8081                           indf1	equ	0xFE7
  8082                           fsr1h	equ	0xFE2
  8083                           fsr1l	equ	0xFE1
  8084                           indf2	equ	0xFDF
  8085                           postinc2	equ	0xFDE
  8086                           postdec2	equ	0xFDD
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function _vscp_handleProbeState *****************
  8092 ;; Defined at:
  8093 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;		None
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;		None
  8098 ;; Return value:  Size  Location     Type
  8099 ;;		None               void
  8100 ;; Registers used:
  8101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8102 ;; Tracked objects:
  8103 ;;		On entry : 0/0
  8104 ;;		On exit  : F/0
  8105 ;;		Unchanged: 0/0
  8106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8111 ;;Total ram usage:        0 bytes
  8112 ;; Hardware stack levels used:    1
  8113 ;; Hardware stack levels required when called:    8
  8114 ;; This function calls:
  8115 ;;		_vscp_goActiveState
  8116 ;;		_vscp_writeNicknamePermanent
  8117 ;;		_vscp_sendEvent
  8118 ;;		_vscp_setSegmentCRC
  8119 ;; This function is called by:
  8120 ;;		_main
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           	psect	text47
  8125  0027E8                     __ptext47:
  8126                           	opt stack 0
  8127  0027E8                     _vscp_handleProbeState:
  8128                           	opt stack 22
  8129                           
  8130                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
  8131                           
  8132                           ;incstack = 0
  8133                           ;incstack = 0
  8134  0027E8  D053               	goto	l5954
  8135  0027EA                     l5884:
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
  8139  0027EA  2857               	incf	_vscp_probe_address,w,c
  8140  0027EC  E010               	bz	l5900
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
  8144  0027EE  0E81               	movlw	129
  8145  0027F0  6F83               	movwf	_vscp_omsg& (0+255),b
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
  8149  0027F2  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
  8153  0027F4  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8154  0027F6  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8155                           
  8156                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
  8157  0027F8  0E02               	movlw	2
  8158  0027FA  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
  8162  0027FC  C057  F088         	movff	_vscp_probe_address,_vscp_omsg+5
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;vscp_firmware.c: 216: vscp_sendEvent();
  8166  002800  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
  8170  002804  0E01               	movlw	1
  8171  002806  6F72               	movwf	_vscp_node_substate& (0+255),b
  8172  002808                     l5898:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;vscp_firmware.c: 219: vscp_timer = 0;
  8176  002808  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8177  00280A  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8178                           
  8179                           ;vscp_firmware.c: 221: }
  8180  00280C  D048               	goto	l850
  8181  00280E                     l5900:
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;vscp_firmware.c: 222: else {
  8185                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
  8186  00280E  0E04               	movlw	4
  8187  002810  6F71               	movwf	_vscp_node_state& (0+255),b
  8188                           
  8189                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
  8190  002812  0E81               	movlw	129
  8191  002814  6F83               	movwf	_vscp_omsg& (0+255),b
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
  8195  002816  6988               	setf	(_vscp_omsg+5)& (0+255),b
  8196                           
  8197                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
  8198  002818  0E07               	movlw	7
  8199  00281A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
  8203  00281C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8204  00281E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8205                           
  8206                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
  8207  002820  0E03               	movlw	3
  8208  002822  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8209                           
  8210                           ; BSR set to: 0
  8211                           ;vscp_firmware.c: 235: vscp_sendEvent();
  8212  002824  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  8213  002828  D03A               	goto	l850
  8214  00282A                     l851:
  8215                           
  8216                           ; BSR set to: 0
  8217                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
  8218  00282A  AF75               	btfss	_vscp_imsg& (0+255),7,b
  8219  00282C  D00F               	goto	l5924
  8220                           
  8221                           ; BSR set to: 0
  8222                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
  8223                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
  8224  00282E  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  8225  002830  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8226  002832  E135               	bnz	l850
  8227                           
  8228                           ; BSR set to: 0
  8229  002834  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  8230  002836  0A03               	xorlw	3
  8231  002838  E132               	bnz	l850
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
  8235  00283A  6657               	tstfsz	_vscp_probe_address,c
  8236  00283C  D003               	goto	l5918
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
  8240  00283E  0E02               	movlw	2
  8241  002840  6F71               	movwf	_vscp_node_state& (0+255),b
  8242  002842  D7E2               	goto	l5898
  8243  002844                     l5918:
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;vscp_firmware.c: 257: else {
  8247                           ;vscp_firmware.c: 260: vscp_probe_address++;
  8248  002844  2A57               	incf	_vscp_probe_address,f,c
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
  8252  002846  6B72               	clrf	_vscp_node_substate& (0+255),b
  8253  002848                     l5922:
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
  8257  002848  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8258  00284A  D029               	goto	l850
  8259  00284C                     l5924:
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;vscp_firmware.c: 267: else {
  8263                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
  8264  00284C  0EE9               	movlw	233
  8265  00284E  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8266  002850  0E03               	movlw	3
  8267  002852  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8268  002854  E324               	bnc	l850
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
  8272  002856  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
  8276  002858  0E02               	movlw	2
  8277  00285A  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8278  00285C  D017               	goto	l858
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
  8282  00285E  6657               	tstfsz	_vscp_probe_address,c
  8283  002860  D005               	goto	l859
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;vscp_firmware.c: 279: vscp_probe_address++;
  8287  002862  2A57               	incf	_vscp_probe_address,f,c
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
  8291  002864  6B72               	clrf	_vscp_node_substate& (0+255),b
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;vscp_firmware.c: 281: vscp_timer = 0;
  8295  002866  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8296  002868  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8297  00286A  D7EE               	goto	l5922
  8298  00286C                     l859:
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;vscp_firmware.c: 285: else {
  8302                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
  8303  00286C  C057  F070         	movff	_vscp_probe_address,_vscp_nickname
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
  8307  002870  0E03               	movlw	3
  8308  002872  6F71               	movwf	_vscp_node_state& (0+255),b
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
  8312  002874  6B72               	clrf	_vscp_node_substate& (0+255),b
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
  8316  002876  5170               	movf	_vscp_nickname& (0+255),w,b
  8317  002878  EC5A  F018         	call	_vscp_writeNicknamePermanent
  8318                           
  8319                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
  8320  00287C  0E40               	movlw	64
  8321  00287E  EC4F  F018         	call	_vscp_setSegmentCRC
  8322                           
  8323                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
  8324  002882  0100               	movlb	0	; () banked
  8325  002884  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;vscp_firmware.c: 296: vscp_goActiveState();
  8329  002886  ECE7  F017         	call	_vscp_goActiveState	;wreg free
  8330  00288A  D009               	goto	l850
  8331  00288C                     l858:
  8332                           
  8333                           ; BSR set to: 0
  8334                           ;vscp_firmware.c: 300: else {
  8335                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
  8336  00288C  6B72               	clrf	_vscp_node_substate& (0+255),b
  8337  00288E  D007               	goto	l850
  8338  002890                     l5954:
  8339  002890  0100               	movlb	0	; () banked
  8340  002892  5172               	movf	_vscp_node_substate& (0+255),w,b
  8341                           
  8342                           ; Switch size 1, requested type "speed"
  8343                           ; Number of cases is 3, Range of values is 0 to 2
  8344                           ; switch strategies available:
  8345                           ; Name         Instructions Cycles
  8346                           ; simple_byte           10     6 (average)
  8347                           ;	Chosen strategy is simple_byte
  8348  002894  E0AA               	bz	l5884
  8349  002896  0A01               	xorlw	1	; case 1
  8350  002898  E0C8               	bz	l851
  8351  00289A  0A03               	xorlw	3	; case 2
  8352  00289C  E1F7               	bnz	l858
  8353  00289E                     l850:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
  8357  00289E  6B75               	clrf	_vscp_imsg& (0+255),b
  8358                           
  8359                           ; BSR set to: 0
  8360  0028A0  0012               	return	
  8361  0028A2                     __end_of_vscp_handleProbeState:
  8362                           	opt stack 0
  8363                           tblptru	equ	0xFF8
  8364                           tblptrh	equ	0xFF7
  8365                           tblptrl	equ	0xFF6
  8366                           tablat	equ	0xFF5
  8367                           prodh	equ	0xFF4
  8368                           prodl	equ	0xFF3
  8369                           postinc0	equ	0xFEE
  8370                           wreg	equ	0xFE8
  8371                           indf1	equ	0xFE7
  8372                           fsr1h	equ	0xFE2
  8373                           fsr1l	equ	0xFE1
  8374                           indf2	equ	0xFDF
  8375                           postinc2	equ	0xFDE
  8376                           postdec2	equ	0xFDD
  8377                           fsr2h	equ	0xFDA
  8378                           fsr2l	equ	0xFD9
  8379                           status	equ	0xFD8
  8380                           
  8381 ;; *************** function _vscp_goActiveState *****************
  8382 ;; Defined at:
  8383 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;		None
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;		None
  8388 ;; Return value:  Size  Location     Type
  8389 ;;		None               void
  8390 ;; Registers used:
  8391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : F/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8401 ;;Total ram usage:        0 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    7
  8404 ;; This function calls:
  8405 ;;		_vscp_sendEvent
  8406 ;; This function is called by:
  8407 ;;		_main
  8408 ;;		_vscp_handleProbeState
  8409 ;; This function uses a non-reentrant model
  8410 ;;
  8411                           
  8412                           	psect	text48
  8413  002FCE                     __ptext48:
  8414                           	opt stack 0
  8415  002FCE                     _vscp_goActiveState:
  8416                           	opt stack 22
  8417                           
  8418                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;incstack = 0
  8422                           ;incstack = 0
  8423  002FCE  0E81               	movlw	129
  8424  002FD0  0100               	movlb	0	; () banked
  8425  002FD2  6F83               	movwf	_vscp_omsg& (0+255),b
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
  8429  002FD4  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
  8433  002FD6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8434  002FD8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8435                           
  8436                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
  8437  002FDA  0E02               	movlw	2
  8438  002FDC  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
  8442  002FDE  C070  F088         	movff	_vscp_nickname,_vscp_omsg+5
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;vscp_firmware.c: 366: vscp_sendEvent();
  8446  002FE2  EC3E  F017         	call	_vscp_sendEvent	;wreg free
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
  8450  002FE6  0E01               	movlw	1
  8451  002FE8  6E56               	movwf	_vscp_initledfunc,c
  8452                           
  8453                           ; BSR set to: 0
  8454  002FEA  0C01               	retlw	1
  8455  002FEC                     __end_of_vscp_goActiveState:
  8456                           	opt stack 0
  8457                           tblptru	equ	0xFF8
  8458                           tblptrh	equ	0xFF7
  8459                           tblptrl	equ	0xFF6
  8460                           tablat	equ	0xFF5
  8461                           prodh	equ	0xFF4
  8462                           prodl	equ	0xFF3
  8463                           postinc0	equ	0xFEE
  8464                           wreg	equ	0xFE8
  8465                           indf1	equ	0xFE7
  8466                           fsr1h	equ	0xFE2
  8467                           fsr1l	equ	0xFE1
  8468                           indf2	equ	0xFDF
  8469                           postinc2	equ	0xFDE
  8470                           postdec2	equ	0xFDD
  8471                           fsr2h	equ	0xFDA
  8472                           fsr2l	equ	0xFD9
  8473                           status	equ	0xFD8
  8474                           
  8475 ;; *************** function _vscp_sendEvent *****************
  8476 ;; Defined at:
  8477 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;		None
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  rv              1    0        unsigned char 
  8482 ;; Return value:  Size  Location     Type
  8483 ;;                  1    wreg      unsigned char 
  8484 ;; Registers used:
  8485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8486 ;; Tracked objects:
  8487 ;;		On entry : F/0
  8488 ;;		On exit  : F/0
  8489 ;;		Unchanged: 0/0
  8490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8492 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8495 ;;Total ram usage:        1 bytes
  8496 ;; Hardware stack levels used:    1
  8497 ;; Hardware stack levels required when called:    6
  8498 ;; This function calls:
  8499 ;;		_sendVSCPFrame
  8500 ;; This function is called by:
  8501 ;;		_vscp_handleProbeState
  8502 ;;		_vscp_goActiveState
  8503 ;;		_vscp_sendHeartBeat
  8504 ;;		_vscp_newNodeOnline
  8505 ;;		_vscp_handleProtocolEvent
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           	psect	text49
  8510  002E7C                     __ptext49:
  8511                           	opt stack 0
  8512  002E7C                     _vscp_sendEvent:
  8513                           	opt stack 22
  8514                           
  8515                           ; BSR set to: 0
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;incstack = 0
  8519                           ;incstack = 0
  8520  002E7C  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8521  002E80  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8522  002E84  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8523  002E88  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8524  002E8C  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8525  002E90  5183               	movf	_vscp_omsg& (0+255),w,b
  8526  002E92  0B0F               	andlw	15
  8527  002E94  6E44               	movwf	?_sendVSCPFrame+5,c
  8528  002E96  0E00               	movlw	high (_vscp_omsg+5)
  8529  002E98  6E46               	movwf	?_sendVSCPFrame+7,c
  8530  002E9A  0E88               	movlw	low (_vscp_omsg+5)
  8531  002E9C  6E45               	movwf	?_sendVSCPFrame+6,c
  8532  002E9E  EF51  F014         	goto	_sendVSCPFrame	;wreg free
  8533  002EA2                     __end_of_vscp_sendEvent:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           postinc0	equ	0xFEE
  8542                           wreg	equ	0xFE8
  8543                           indf1	equ	0xFE7
  8544                           fsr1h	equ	0xFE2
  8545                           fsr1l	equ	0xFE1
  8546                           indf2	equ	0xFDF
  8547                           postinc2	equ	0xFDE
  8548                           postdec2	equ	0xFDD
  8549                           fsr2h	equ	0xFDA
  8550                           fsr2l	equ	0xFD9
  8551                           status	equ	0xFD8
  8552                           
  8553 ;; *************** function _sendVSCPFrame *****************
  8554 ;; Defined at:
  8555 ;;		line 1453 in file "../main.c"
  8556 ;; Parameters:    Size  Location     Type
  8557 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8558 ;;  vscptype        1   64[COMRAM] unsigned char 
  8559 ;;  nodeid          1   65[COMRAM] unsigned char 
  8560 ;;  priority        1   66[COMRAM] unsigned char 
  8561 ;;  size            1   67[COMRAM] unsigned char 
  8562 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8563 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8564 ;; Auto vars:     Size  Location     Type
  8565 ;;  id              4   70[COMRAM] unsigned long 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  1    wreg      unsigned char 
  8568 ;; Registers used:
  8569 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8570 ;; Tracked objects:
  8571 ;;		On entry : F/0
  8572 ;;		On exit  : F/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8575 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8576 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8577 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8578 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8579 ;;Total ram usage:       32 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    5
  8582 ;; This function calls:
  8583 ;;		_sendCANFrame
  8584 ;; This function is called by:
  8585 ;;		_SendInformationEvent
  8586 ;;		_vscp_sendEvent
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           	psect	text50
  8591  0028A2                     __ptext50:
  8592                           	opt stack 0
  8593  0028A2                     _sendVSCPFrame:
  8594                           	opt stack 22
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;main.c: 1454: uint32_t id = ( (uint32_t)priority << 26 ) |
  8598                           ;main.c: 1455: ( (uint32_t)vscpclass << 16 ) |
  8599                           ;main.c: 1456: ( (uint32_t)vscptype << 8 ) |
  8600                           ;main.c: 1457: nodeid;
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;incstack = 0
  8604                           ;incstack = 0
  8605  0028A2  C041  F090         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  8606  0028A6  6B91               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  8607  0028A8  6B92               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  8608  0028AA  6B93               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  8609  0028AC  C092  F093         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  8610  0028B0  C091  F092         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  8611  0028B4  C090  F091         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  8612  0028B8  6B90               	clrf	??_sendVSCPFrame& (0+255),b
  8613  0028BA  503F               	movf	sendVSCPFrame@vscpclass,w,c
  8614  0028BC  6F94               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  8615  0028BE  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  8616  0028C0  6F95               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  8617  0028C2  6B96               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  8618  0028C4  6B97               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  8619  0028C6  C095  F097         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  8620  0028CA  C094  F096         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  8621  0028CE  6B95               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  8622  0028D0  6B94               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  8623  0028D2  C043  F098         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  8624  0028D6  6B99               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  8625  0028D8  6B9A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  8626  0028DA  6B9B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  8627  0028DC  0E1A               	movlw	26
  8628  0028DE                     u6795:
  8629  0028DE  90D8               	bcf	status,0,c
  8630  0028E0  3798               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  8631  0028E2  3799               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  8632  0028E4  379A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  8633  0028E6  379B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  8634  0028E8  2EE8               	decfsz	wreg,f,c
  8635  0028EA  D7F9               	goto	u6795
  8636  0028EC  5194               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  8637  0028EE  1198               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  8638  0028F0  6F9C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  8639  0028F2  5195               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  8640  0028F4  1199               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  8641  0028F6  6F9D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  8642  0028F8  5196               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  8643  0028FA  119A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  8644  0028FC  6F9E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  8645  0028FE  5197               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  8646  002900  119B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  8647  002902  6F9F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  8648  002904  5190               	movf	??_sendVSCPFrame& (0+255),w,b
  8649  002906  119C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  8650  002908  6FA0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  8651  00290A  5191               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  8652  00290C  119D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  8653  00290E  6FA1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  8654  002910  5192               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  8655  002912  119E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  8656  002914  6FA2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  8657  002916  5193               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  8658  002918  119F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  8659  00291A  6FA3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  8660  00291C  5042               	movf	sendVSCPFrame@nodeid,w,c
  8661  00291E  11A0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  8662  002920  6E47               	movwf	sendVSCPFrame@id,c
  8663  002922  51A1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  8664  002924  6E48               	movwf	sendVSCPFrame@id+1,c
  8665  002926  51A2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  8666  002928  6E49               	movwf	sendVSCPFrame@id+2,c
  8667  00292A  51A3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  8668  00292C  6E4A               	movwf	sendVSCPFrame@id+3,c
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;main.c: 1459: if ( !sendCANFrame( id, size, pData ) ) {
  8672  00292E  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  8673  002932  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  8674  002936  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  8675  00293A  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  8676  00293E  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  8677  002942  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  8678  002946  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  8679  00294A  EC4C  F016         	call	_sendCANFrame	;wreg free
  8680  00294E  0900               	iorlw	0
  8681  002950  E101               	bnz	l6624
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;main.c: 1460: return 0;
  8685  002952  0C00               	retlw	0
  8686  002954                     l6624:
  8687                           
  8688                           ; BSR set to: 0
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;main.c: 1461: }
  8692                           ;main.c: 1463: return 1;
  8693  002954  0C01               	retlw	1
  8694  002956                     __end_of_sendVSCPFrame:
  8695                           	opt stack 0
  8696                           tblptru	equ	0xFF8
  8697                           tblptrh	equ	0xFF7
  8698                           tblptrl	equ	0xFF6
  8699                           tablat	equ	0xFF5
  8700                           prodh	equ	0xFF4
  8701                           prodl	equ	0xFF3
  8702                           postinc0	equ	0xFEE
  8703                           wreg	equ	0xFE8
  8704                           indf1	equ	0xFE7
  8705                           fsr1h	equ	0xFE2
  8706                           fsr1l	equ	0xFE1
  8707                           indf2	equ	0xFDF
  8708                           postinc2	equ	0xFDE
  8709                           postdec2	equ	0xFDD
  8710                           fsr2h	equ	0xFDA
  8711                           fsr2l	equ	0xFD9
  8712                           status	equ	0xFD8
  8713                           
  8714 ;; *************** function _sendCANFrame *****************
  8715 ;; Defined at:
  8716 ;;		line 1498 in file "../main.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;  id              4   54[COMRAM] unsigned long 
  8719 ;;  dlc             1   58[COMRAM] unsigned char 
  8720 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  8721 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;  rv              1   61[COMRAM] unsigned char 
  8724 ;; Return value:  Size  Location     Type
  8725 ;;                  1    wreg      unsigned char 
  8726 ;; Registers used:
  8727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8728 ;; Tracked objects:
  8729 ;;		On entry : F/0
  8730 ;;		On exit  : F/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8733 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8736 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8737 ;;Total ram usage:        8 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    4
  8740 ;; This function calls:
  8741 ;;		_ECANSendMessage
  8742 ;; This function is called by:
  8743 ;;		_sendVSCPFrame
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           	psect	text51
  8748  002C98                     __ptext51:
  8749                           	opt stack 0
  8750  002C98                     _sendCANFrame:
  8751                           	opt stack 22
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;main.c: 1499: uint8_t rv = 0;
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;incstack = 0
  8758                           ;incstack = 0
  8759  002C98  6A3E               	clrf	sendCANFrame@rv,c
  8760                           
  8761                           ;main.c: 1500: sendTimer = 0;
  8762  002C9A  6A55               	clrf	_sendTimer,c
  8763                           
  8764                           ;main.c: 1502: while ( sendTimer < 1 ) {
  8765  002C9C  D017               	goto	l6722
  8766  002C9E                     l6718:
  8767                           
  8768                           ;main.c: 1503: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  8769  002C9E  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  8770  002CA2  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  8771  002CA6  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  8772  002CAA  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  8773  002CAE  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  8774  002CB2  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  8775  002CB6  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  8776  002CBA  0E20               	movlw	32
  8777  002CBC  6E19               	movwf	?_ECANSendMessage+7,c
  8778  002CBE  EC9D  F00E         	call	_ECANSendMessage	;wreg free
  8779  002CC2  0900               	iorlw	0
  8780  002CC4  E003               	bz	l6722
  8781                           
  8782                           ;main.c: 1504: rv = 1;
  8783  002CC6  0E01               	movlw	1
  8784  002CC8  6E3E               	movwf	sendCANFrame@rv,c
  8785                           
  8786                           ;main.c: 1505: break;
  8787  002CCA  D002               	goto	l456
  8788  002CCC                     l6722:
  8789  002CCC  5055               	movf	_sendTimer,w,c
  8790  002CCE  E0E7               	bz	l6718
  8791  002CD0                     l456:
  8792                           
  8793                           ;main.c: 1506: }
  8794                           ;main.c: 1507: }
  8795                           ;main.c: 1509: vscp_omsg.flags = 0;
  8796  002CD0  0100               	movlb	0	; () banked
  8797  002CD2  6B83               	clrf	_vscp_omsg& (0+255),b
  8798                           
  8799                           ; BSR set to: 0
  8800                           ;main.c: 1511: return rv;
  8801  002CD4  503E               	movf	sendCANFrame@rv,w,c
  8802                           
  8803                           ; BSR set to: 0
  8804  002CD6  0012               	return	
  8805  002CD8                     __end_of_sendCANFrame:
  8806                           	opt stack 0
  8807                           tblptru	equ	0xFF8
  8808                           tblptrh	equ	0xFF7
  8809                           tblptrl	equ	0xFF6
  8810                           tablat	equ	0xFF5
  8811                           prodh	equ	0xFF4
  8812                           prodl	equ	0xFF3
  8813                           postinc0	equ	0xFEE
  8814                           wreg	equ	0xFE8
  8815                           indf1	equ	0xFE7
  8816                           fsr1h	equ	0xFE2
  8817                           fsr1l	equ	0xFE1
  8818                           indf2	equ	0xFDF
  8819                           postinc2	equ	0xFDE
  8820                           postdec2	equ	0xFDD
  8821                           fsr2h	equ	0xFDA
  8822                           fsr2l	equ	0xFD9
  8823                           status	equ	0xFD8
  8824                           
  8825 ;; *************** function _ECANSendMessage *****************
  8826 ;; Defined at:
  8827 ;;		line 617 in file "../ECAN.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;  id              4   17[COMRAM] unsigned long 
  8830 ;;  data            2   21[COMRAM] PTR unsigned char 
  8831 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8832 ;;  dataLen         1   23[COMRAM] unsigned char 
  8833 ;;  msgFlags        1   24[COMRAM] enum E18958
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  8836 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8837 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8838 ;;		 -> B0CON(1), 
  8839 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  8840 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8841 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8842 ;;		 -> B0CON(1), 
  8843 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  8844 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8845 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8846 ;;		 -> B0CON(1), 
  8847 ;;  i               1   51[COMRAM] unsigned char 
  8848 ;;  temp            1   50[COMRAM] unsigned char 
  8849 ;;  tempBSEL0       1   47[COMRAM] struct .
  8850 ;;  j               1   46[COMRAM] unsigned char 
  8851 ;;  buffers         1   45[COMRAM] unsigned char 
  8852 ;;  mode            1   44[COMRAM] unsigned char 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      enum E18242
  8855 ;; Registers used:
  8856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8862 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8863 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8865 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8866 ;;Total ram usage:       37 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    3
  8869 ;; This function calls:
  8870 ;;		__CANIDToRegs
  8871 ;; This function is called by:
  8872 ;;		_sendCANFrame
  8873 ;; This function uses a non-reentrant model
  8874 ;;
  8875                           
  8876                           	psect	text52
  8877  001D3A                     __ptext52:
  8878                           	opt stack 0
  8879  001D3A                     _ECANSendMessage:
  8880                           	opt stack 22
  8881                           
  8882                           ;ECAN.c: 619: BYTE mode;
  8883                           ;ECAN.c: 620: BYTE buffers;
  8884                           ;ECAN.c: 628: BYTE i,j;
  8885                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  8886                           ;ECAN.c: 630: BYTE* pb[9];
  8887                           ;ECAN.c: 631: BYTE temp;
  8888                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  8889                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  8890                           
  8891                           ; BSR set to: 0
  8892                           ;incstack = 0
  8893                           ;incstack = 0
  8894  001D3A  0E0F               	movlw	15	;volatile
  8895  001D3C  6E1C               	movwf	ECANSendMessage@pb+1,c
  8896  001D3E  0E20               	movlw	32	;volatile
  8897  001D40  6E1B               	movwf	ECANSendMessage@pb,c
  8898                           
  8899                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  8900  001D42  0E0F               	movlw	15	;volatile
  8901  001D44  6E1E               	movwf	ECANSendMessage@pb+3,c
  8902  001D46  0E10               	movlw	16	;volatile
  8903  001D48  6E1D               	movwf	ECANSendMessage@pb+2,c
  8904                           
  8905                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  8906  001D4A  0E0F               	movlw	15	;volatile
  8907  001D4C  6E20               	movwf	ECANSendMessage@pb+5,c
  8908  001D4E  6A1F               	clrf	ECANSendMessage@pb+4,c
  8909                           
  8910                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  8911  001D50  010E               	movlb	14	; () banked
  8912  001D52  0E0E               	movlw	14	;volatile
  8913  001D54  6E22               	movwf	ECANSendMessage@pb+7,c
  8914  001D56  0E80               	movlw	128	;volatile
  8915  001D58  6E21               	movwf	ECANSendMessage@pb+6,c
  8916                           
  8917                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  8918  001D5A  0E0E               	movlw	14	;volatile
  8919  001D5C  6E24               	movwf	ECANSendMessage@pb+9,c
  8920  001D5E  0E90               	movlw	144	;volatile
  8921  001D60  6E23               	movwf	ECANSendMessage@pb+8,c
  8922                           
  8923                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  8924  001D62  0E0E               	movlw	14	;volatile
  8925  001D64  6E26               	movwf	ECANSendMessage@pb+11,c
  8926  001D66  0EA0               	movlw	160	;volatile
  8927  001D68  6E25               	movwf	ECANSendMessage@pb+10,c
  8928                           
  8929                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  8930  001D6A  0E0E               	movlw	14	;volatile
  8931  001D6C  6E28               	movwf	ECANSendMessage@pb+13,c
  8932  001D6E  0EB0               	movlw	176	;volatile
  8933  001D70  6E27               	movwf	ECANSendMessage@pb+12,c
  8934                           
  8935                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  8936  001D72  0E0E               	movlw	14	;volatile
  8937  001D74  6E2A               	movwf	ECANSendMessage@pb+15,c
  8938  001D76  0EC0               	movlw	192	;volatile
  8939  001D78  6E29               	movwf	ECANSendMessage@pb+14,c
  8940                           
  8941                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  8942  001D7A  0E0E               	movlw	14	;volatile
  8943  001D7C  6E2C               	movwf	ECANSendMessage@pb+17,c
  8944  001D7E  0ED0               	movlw	208	;volatile
  8945  001D80  6E2B               	movwf	ECANSendMessage@pb+16,c
  8946                           
  8947                           ; BSR set to: 14
  8948                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  8949  001D82  5072               	movf	3954,w,c	;volatile
  8950  001D84  0BC0               	andlw	192
  8951  001D86  6E2D               	movwf	ECANSendMessage@mode,c
  8952                           
  8953                           ; BSR set to: 14
  8954                           ;ECAN.c: 660: if ( mode == 0x00 )
  8955  001D88  662D               	tstfsz	ECANSendMessage@mode,c
  8956  001D8A  D002               	goto	l6736
  8957                           
  8958                           ; BSR set to: 14
  8959                           ;ECAN.c: 661: buffers = 2;
  8960  001D8C  0E02               	movlw	2
  8961  001D8E  D001               	goto	L27
  8962  001D90                     l6736:
  8963                           
  8964                           ; BSR set to: 14
  8965                           ;ECAN.c: 662: else
  8966                           ;ECAN.c: 663: buffers = 8;
  8967  001D90  0E08               	movlw	8
  8968  001D92                     L27:
  8969  001D92  6E2E               	movwf	ECANSendMessage@buffers,c
  8970                           
  8971                           ; BSR set to: 14
  8972                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  8973  001D94  90D8               	bcf	status,0,c
  8974  001D96  317D               	rrcf	125,w,b	;volatile
  8975  001D98  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  8976                           
  8977                           ; BSR set to: 14
  8978                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  8979  001D9A  6A34               	clrf	ECANSendMessage@i,c
  8980  001D9C  D07C               	goto	l6796
  8981  001D9E                     l6742:
  8982                           
  8983                           ;ECAN.c: 688: {
  8984                           ;ECAN.c: 693: ptr = pb[i];
  8985  001D9E  5034               	movf	ECANSendMessage@i,w,c
  8986  001DA0  0D02               	mullw	2
  8987  001DA2  50F3               	movf	prodl,w,c
  8988  001DA4  0F1B               	addlw	low ECANSendMessage@pb
  8989  001DA6  6ED9               	movwf	fsr2l,c
  8990  001DA8  6ADA               	clrf	fsr2h,c
  8991  001DAA  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  8992  001DAE  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  8993                           
  8994                           ;ECAN.c: 694: tempPtr = ptr;
  8995  001DB2  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  8996  001DB6  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  8997                           
  8998                           ;ECAN.c: 702: if ( i > 2 )
  8999  001DBA  0E02               	movlw	2
  9000  001DBC  6434               	cpfsgt	ECANSendMessage@i,c
  9001  001DBE  D004               	goto	l6754
  9002                           
  9003                           ;ECAN.c: 703: {
  9004                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  9005  001DC0  90D8               	bcf	status,0,c
  9006  001DC2  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  9007                           
  9008                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  9009  001DC4  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  9010  001DC6  D066               	goto	l6794
  9011  001DC8                     l6754:
  9012                           
  9013                           ;ECAN.c: 714: }
  9014                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  9015  001DC8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9016  001DCC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9017  001DD0  50DF               	movf	indf2,w,c
  9018  001DD2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9019  001DD4  B61A               	btfsc	??_ECANSendMessage,3,c
  9020  001DD6  D05E               	goto	l6794
  9021                           
  9022                           ;ECAN.c: 721: {
  9023                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  9024  001DD8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9025  001DDC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9026  001DE0  0EFC               	movlw	252
  9027  001DE2  16DF               	andwf	indf2,f,c
  9028                           
  9029                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  9030  001DE4  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  9031  001DE8  0E03               	movlw	3
  9032  001DEA  161A               	andwf	??_ECANSendMessage,f,c
  9033  001DEC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9034  001DF0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9035  001DF4  501A               	movf	??_ECANSendMessage,w,c
  9036  001DF6  12DF               	iorwf	indf2,f,c
  9037                           
  9038                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  9039  001DF8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  9040  001DFA  D004               	goto	l648
  9041                           
  9042                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  9043  001DFC  5018               	movf	ECANSendMessage@dataLen,w,c
  9044  001DFE  0940               	iorlw	64
  9045  001E00  6E33               	movwf	ECANSendMessage@temp,c
  9046  001E02  D002               	goto	l6764
  9047  001E04                     l648:
  9048                           
  9049                           ;ECAN.c: 729: else
  9050                           ;ECAN.c: 730: temp = dataLen;
  9051  001E04  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  9052  001E08                     l6764:
  9053                           
  9054                           ;ECAN.c: 732: *(ptr+5) = temp;
  9055  001E08  EE20 F005          	lfsr	2,5
  9056  001E0C  5035               	movf	ECANSendMessage@ptr,w,c
  9057  001E0E  26D9               	addwf	fsr2l,f,c
  9058  001E10  5036               	movf	ECANSendMessage@ptr+1,w,c
  9059  001E12  22DA               	addwfc	fsr2h,f,c
  9060  001E14  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  9061                           
  9062                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  9063  001E18  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  9064  001E1A  D003               	goto	l650
  9065                           
  9066                           ;ECAN.c: 736: temp = 1;
  9067  001E1C  0E01               	movlw	1
  9068  001E1E  6E33               	movwf	ECANSendMessage@temp,c
  9069  001E20  D001               	goto	l6770
  9070  001E22                     l650:
  9071                           
  9072                           ;ECAN.c: 738: else
  9073                           ;ECAN.c: 739: temp = 0;
  9074  001E22  6A33               	clrf	ECANSendMessage@temp,c
  9075  001E24                     l6770:
  9076                           
  9077                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  9078  001E24  2835               	incf	ECANSendMessage@ptr,w,c
  9079  001E26  6E08               	movwf	?__CANIDToRegs,c
  9080  001E28  0E00               	movlw	0
  9081  001E2A  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  9082  001E2C  6E09               	movwf	?__CANIDToRegs+1,c
  9083  001E2E  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  9084  001E32  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  9085  001E36  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  9086  001E3A  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  9087  001E3E  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  9088  001E42  EC01  F010         	call	__CANIDToRegs	;wreg free
  9089                           
  9090                           ;ECAN.c: 745: ptr += 6;
  9091  001E46  0E06               	movlw	6
  9092  001E48  2635               	addwf	ECANSendMessage@ptr,f,c
  9093  001E4A  0E00               	movlw	0
  9094  001E4C  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  9095                           
  9096                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  9097  001E4E  6A2F               	clrf	ECANSendMessage@j,c
  9098  001E50  D00F               	goto	l6784
  9099  001E52                     l6776:
  9100                           
  9101                           ;ECAN.c: 748: *ptr++ = *data++;
  9102  001E52  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  9103  001E56  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  9104  001E5A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  9105  001E5E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  9106  001E62  CFDF FFE7          	movff	indf2,indf1
  9107  001E66  4A16               	infsnz	ECANSendMessage@data,f,c
  9108  001E68  2A17               	incf	ECANSendMessage@data+1,f,c
  9109  001E6A  4A35               	infsnz	ECANSendMessage@ptr,f,c
  9110  001E6C  2A36               	incf	ECANSendMessage@ptr+1,f,c
  9111  001E6E  2A2F               	incf	ECANSendMessage@j,f,c
  9112  001E70                     l6784:
  9113  001E70  5018               	movf	ECANSendMessage@dataLen,w,c
  9114  001E72  5C2F               	subwf	ECANSendMessage@j,w,c
  9115  001E74  E3EE               	bnc	l6776
  9116                           
  9117                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  9118  001E76  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9119  001E7A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9120  001E7E  50DF               	movf	indf2,w,c
  9121  001E80  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9122  001E82  B41A               	btfsc	??_ECANSendMessage,2,c
  9123  001E84  0C01               	retlw	1
  9124                           
  9125                           ;ECAN.c: 753: *tempPtr |= 0x08;
  9126  001E86  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9127  001E8A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9128  001E8E  0E00               	movlw	0
  9129  001E90  86DB               	bsf	plusw2,3,c
  9130                           
  9131                           ;ECAN.c: 755: return TRUE;
  9132  001E92  0C01               	retlw	1
  9133  001E94                     l6794:
  9134  001E94  2A34               	incf	ECANSendMessage@i,f,c
  9135  001E96                     l6796:
  9136  001E96  502E               	movf	ECANSendMessage@buffers,w,c
  9137  001E98  5C34               	subwf	ECANSendMessage@i,w,c
  9138  001E9A  E381               	bnc	l6742
  9139                           
  9140                           ;ECAN.c: 756: }
  9141                           ;ECAN.c: 757: }
  9142                           ;ECAN.c: 760: return FALSE;
  9143  001E9C  0C00               	retlw	0
  9144  001E9E                     __end_of_ECANSendMessage:
  9145                           	opt stack 0
  9146                           tblptru	equ	0xFF8
  9147                           tblptrh	equ	0xFF7
  9148                           tblptrl	equ	0xFF6
  9149                           tablat	equ	0xFF5
  9150                           prodh	equ	0xFF4
  9151                           prodl	equ	0xFF3
  9152                           postinc0	equ	0xFEE
  9153                           wreg	equ	0xFE8
  9154                           indf1	equ	0xFE7
  9155                           fsr1h	equ	0xFE2
  9156                           fsr1l	equ	0xFE1
  9157                           indf2	equ	0xFDF
  9158                           postinc2	equ	0xFDE
  9159                           postdec2	equ	0xFDD
  9160                           plusw2	equ	0xFDB
  9161                           fsr2h	equ	0xFDA
  9162                           fsr2l	equ	0xFD9
  9163                           status	equ	0xFD8
  9164                           
  9165 ;; *************** function __CANIDToRegs *****************
  9166 ;; Defined at:
  9167 ;;		line 1099 in file "../ECAN.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9170 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9171 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9172 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  9173 ;;  val             4    9[COMRAM] unsigned long 
  9174 ;;  type            1   13[COMRAM] unsigned char 
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  9177 ;;		 -> _CANIDToRegs@val(4), 
  9178 ;; Return value:  Size  Location     Type
  9179 ;;		None               void
  9180 ;; Registers used:
  9181 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/E
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9187 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9190 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9191 ;;Total ram usage:       10 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    2
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_ECANSendMessage
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           	psect	text53
  9202  002002                     __ptext53:
  9203                           	opt stack 0
  9204  002002                     __CANIDToRegs:
  9205                           	opt stack 22
  9206                           
  9207                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9208                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9209                           
  9210                           ;incstack = 0
  9211                           ;incstack = 0
  9212  002002  0E0A               	movlw	low __CANIDToRegs@val
  9213  002004  6E11               	movwf	__CANIDToRegs@Value,c
  9214                           
  9215                           ;ECAN.c: 1104: if ( type == 0 )
  9216  002006  660E               	tstfsz	__CANIDToRegs@type,c
  9217  002008  D037               	goto	l6812
  9218                           
  9219                           ;ECAN.c: 1105: {
  9220                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9221  00200A  5011               	movf	__CANIDToRegs@Value,w,c
  9222  00200C  6ED9               	movwf	fsr2l,c
  9223  00200E  6ADA               	clrf	fsr2h,c
  9224  002010  50DF               	movf	indf2,w,c
  9225  002012  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9226  002014  90D8               	bcf	status,0,c
  9227  002016  320F               	rrcf	??__CANIDToRegs,f,c
  9228  002018  90D8               	bcf	status,0,c
  9229  00201A  320F               	rrcf	??__CANIDToRegs,f,c
  9230  00201C  90D8               	bcf	status,0,c
  9231  00201E  300F               	rrcf	??__CANIDToRegs,w,c
  9232  002020  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9233  002024  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9234  002028  6EDF               	movwf	indf2,c
  9235                           
  9236                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9237  00202A  5011               	movf	__CANIDToRegs@Value,w,c
  9238  00202C  6ED9               	movwf	fsr2l,c
  9239  00202E  6ADA               	clrf	fsr2h,c
  9240  002030  2AD9               	incf	fsr2l,f,c
  9241  002032  6ADA               	clrf	fsr2h,c
  9242  002034  50DF               	movf	indf2,w,c
  9243  002036  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9244  002038  0E05               	movlw	5
  9245  00203A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9246  00203C                     u7035:
  9247  00203C  90D8               	bcf	status,0,c
  9248  00203E  360F               	rlcf	??__CANIDToRegs,f,c
  9249  002040  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9250  002042  D7FC               	goto	u7035
  9251  002044  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9252  002048  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9253  00204C  500F               	movf	??__CANIDToRegs,w,c
  9254  00204E  12DF               	iorwf	indf2,f,c
  9255                           
  9256                           ;ECAN.c: 1109: ptr++;
  9257  002050  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9258  002052  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9259                           
  9260                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9261  002054  5011               	movf	__CANIDToRegs@Value,w,c
  9262  002056  6ED9               	movwf	fsr2l,c
  9263  002058  6ADA               	clrf	fsr2h,c
  9264  00205A  50DF               	movf	indf2,w,c
  9265  00205C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9266  00205E  0E05               	movlw	5
  9267  002060  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9268  002062                     u7045:
  9269  002062  90D8               	bcf	status,0,c
  9270  002064  360F               	rlcf	??__CANIDToRegs,f,c
  9271  002066  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9272  002068  D7FC               	goto	u7045
  9273  00206A  500F               	movf	??__CANIDToRegs,w,c
  9274  00206C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9275  002070  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9276  002074  6EDF               	movwf	indf2,c
  9277                           
  9278                           ;ECAN.c: 1111: }
  9279  002076  0012               	return	
  9280  002078                     l6812:
  9281                           
  9282                           ;ECAN.c: 1112: else
  9283                           ;ECAN.c: 1113: {
  9284                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9285  002078  5011               	movf	__CANIDToRegs@Value,w,c
  9286  00207A  6ED9               	movwf	fsr2l,c
  9287  00207C  6ADA               	clrf	fsr2h,c
  9288  00207E  0E02               	movlw	2
  9289  002080  26D9               	addwf	fsr2l,f,c
  9290  002082  6ADA               	clrf	fsr2h,c
  9291  002084  50DF               	movf	indf2,w,c
  9292  002086  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9293  002088  0E05               	movlw	5
  9294  00208A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9295  00208C                     u7055:
  9296  00208C  90D8               	bcf	status,0,c
  9297  00208E  320F               	rrcf	??__CANIDToRegs,f,c
  9298  002090  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9299  002092  D7FC               	goto	u7055
  9300  002094  500F               	movf	??__CANIDToRegs,w,c
  9301  002096  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9302  00209A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9303  00209E  6EDF               	movwf	indf2,c
  9304                           
  9305                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9306  0020A0  5011               	movf	__CANIDToRegs@Value,w,c
  9307  0020A2  6ED9               	movwf	fsr2l,c
  9308  0020A4  6ADA               	clrf	fsr2h,c
  9309  0020A6  0E03               	movlw	3
  9310  0020A8  26D9               	addwf	fsr2l,f,c
  9311  0020AA  6ADA               	clrf	fsr2h,c
  9312  0020AC  50DF               	movf	indf2,w,c
  9313  0020AE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9314  0020B0  90D8               	bcf	status,0,c
  9315  0020B2  360F               	rlcf	??__CANIDToRegs,f,c
  9316  0020B4  90D8               	bcf	status,0,c
  9317  0020B6  360F               	rlcf	??__CANIDToRegs,f,c
  9318  0020B8  90D8               	bcf	status,0,c
  9319  0020BA  360F               	rlcf	??__CANIDToRegs,f,c
  9320  0020BC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9321  0020C0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9322  0020C4  500F               	movf	??__CANIDToRegs,w,c
  9323  0020C6  12DF               	iorwf	indf2,f,c
  9324                           
  9325                           ;ECAN.c: 1117: ptr++;
  9326  0020C8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9327  0020CA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9328                           
  9329                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9330  0020CC  5011               	movf	__CANIDToRegs@Value,w,c
  9331  0020CE  6ED9               	movwf	fsr2l,c
  9332  0020D0  6ADA               	clrf	fsr2h,c
  9333  0020D2  0E02               	movlw	2
  9334  0020D4  26D9               	addwf	fsr2l,f,c
  9335  0020D6  6ADA               	clrf	fsr2h,c
  9336  0020D8  50DF               	movf	indf2,w,c
  9337  0020DA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9338  0020DC  90D8               	bcf	status,0,c
  9339  0020DE  360F               	rlcf	??__CANIDToRegs,f,c
  9340  0020E0  90D8               	bcf	status,0,c
  9341  0020E2  360F               	rlcf	??__CANIDToRegs,f,c
  9342  0020E4  90D8               	bcf	status,0,c
  9343  0020E6  340F               	rlcf	??__CANIDToRegs,w,c
  9344  0020E8  0BE0               	andlw	224
  9345  0020EA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9346  0020EE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9347  0020F2  6EDF               	movwf	indf2,c
  9348                           
  9349                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9350  0020F4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9351  0020F8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9352  0020FC  0E00               	movlw	0
  9353  0020FE  86DB               	bsf	plusw2,3,c
  9354                           
  9355                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9356  002100  5011               	movf	__CANIDToRegs@Value,w,c
  9357  002102  6ED9               	movwf	fsr2l,c
  9358  002104  6ADA               	clrf	fsr2h,c
  9359  002106  0E02               	movlw	2
  9360  002108  26D9               	addwf	fsr2l,f,c
  9361  00210A  6ADA               	clrf	fsr2h,c
  9362  00210C  50DF               	movf	indf2,w,c
  9363  00210E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9364  002110  0E03               	movlw	3
  9365  002112  160F               	andwf	??__CANIDToRegs,f,c
  9366  002114  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9367  002118  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9368  00211C  500F               	movf	??__CANIDToRegs,w,c
  9369  00211E  12DF               	iorwf	indf2,f,c
  9370                           
  9371                           ;ECAN.c: 1122: ptr++;
  9372  002120  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9373  002122  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9374                           
  9375                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9376  002124  5011               	movf	__CANIDToRegs@Value,w,c
  9377  002126  6ED9               	movwf	fsr2l,c
  9378  002128  6ADA               	clrf	fsr2h,c
  9379  00212A  2AD9               	incf	fsr2l,f,c
  9380  00212C  6ADA               	clrf	fsr2h,c
  9381  00212E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9382  002132  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9383  002136  CFDF FFE7          	movff	indf2,indf1
  9384                           
  9385                           ;ECAN.c: 1124: ptr++;
  9386  00213A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9387  00213C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9388                           
  9389                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9390  00213E  5011               	movf	__CANIDToRegs@Value,w,c
  9391  002140  6ED9               	movwf	fsr2l,c
  9392  002142  6ADA               	clrf	fsr2h,c
  9393  002144  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9394  002148  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9395  00214C  CFDF FFE7          	movff	indf2,indf1
  9396  002150  0012               	return	
  9397  002152                     __end_of__CANIDToRegs:
  9398                           	opt stack 0
  9399                           tblptru	equ	0xFF8
  9400                           tblptrh	equ	0xFF7
  9401                           tblptrl	equ	0xFF6
  9402                           tablat	equ	0xFF5
  9403                           prodh	equ	0xFF4
  9404                           prodl	equ	0xFF3
  9405                           postinc0	equ	0xFEE
  9406                           wreg	equ	0xFE8
  9407                           indf1	equ	0xFE7
  9408                           fsr1h	equ	0xFE2
  9409                           fsr1l	equ	0xFE1
  9410                           indf2	equ	0xFDF
  9411                           postinc2	equ	0xFDE
  9412                           postdec2	equ	0xFDD
  9413                           plusw2	equ	0xFDB
  9414                           fsr2h	equ	0xFDA
  9415                           fsr2l	equ	0xFD9
  9416                           status	equ	0xFD8
  9417                           
  9418 ;; *************** function _vscp_getEvent *****************
  9419 ;; Defined at:
  9420 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  rv              1   43[COMRAM] unsigned char 
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      unsigned char 
  9427 ;; Registers used:
  9428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9429 ;; Tracked objects:
  9430 ;;		On entry : F/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9435 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9437 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9438 ;;Total ram usage:        1 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    6
  9441 ;; This function calls:
  9442 ;;		_getVSCPFrame
  9443 ;; This function is called by:
  9444 ;;		_main
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           	psect	text54
  9449  002DD8                     __ptext54:
  9450                           	opt stack 0
  9451  002DD8                     _vscp_getEvent:
  9452                           	opt stack 24
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;vscp_firmware.c: 1309: int8_t rv;
  9456                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
  9457                           
  9458                           ;incstack = 0
  9459                           ;incstack = 0
  9460  002DD8  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9461  002DDA  0012               	return	
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
  9465                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
  9466                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
  9467                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
  9468                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
  9469                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
  9470  002DDC  0E79               	movlw	low (_vscp_imsg+4)
  9471  002DDE  6E1E               	movwf	?_getVSCPFrame,c
  9472  002DE0  0E7A               	movlw	low (_vscp_imsg+5)
  9473  002DE2  6E1F               	movwf	?_getVSCPFrame+1,c
  9474  002DE4  0E76               	movlw	low (_vscp_imsg+1)
  9475  002DE6  6E20               	movwf	?_getVSCPFrame+2,c
  9476  002DE8  0E75               	movlw	low _vscp_imsg
  9477  002DEA  6E21               	movwf	?_getVSCPFrame+3,c
  9478  002DEC  0E7B               	movlw	low (_vscp_imsg+6)
  9479  002DEE  6E22               	movwf	?_getVSCPFrame+4,c
  9480  002DF0  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  9481  002DF2  EC7D  F015         	call	_getVSCPFrame
  9482  002DF6  6E2C               	movwf	vscp_getEvent@rv,c
  9483  002DF8  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9484  002DFA  B4D8               	btfsc	status,2,c
  9485  002DFC  0012               	return	
  9486                           
  9487                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
  9488  002DFE  0100               	movlb	0	; () banked
  9489  002E00  8F75               	bsf	_vscp_imsg& (0+255),7,b
  9490  002E02  0012               	return	
  9491  002E04                     __end_of_vscp_getEvent:
  9492                           	opt stack 0
  9493                           tblptru	equ	0xFF8
  9494                           tblptrh	equ	0xFF7
  9495                           tblptrl	equ	0xFF6
  9496                           tablat	equ	0xFF5
  9497                           prodh	equ	0xFF4
  9498                           prodl	equ	0xFF3
  9499                           postinc0	equ	0xFEE
  9500                           wreg	equ	0xFE8
  9501                           indf1	equ	0xFE7
  9502                           fsr1h	equ	0xFE2
  9503                           fsr1l	equ	0xFE1
  9504                           indf2	equ	0xFDF
  9505                           postinc2	equ	0xFDE
  9506                           postdec2	equ	0xFDD
  9507                           plusw2	equ	0xFDB
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function _getVSCPFrame *****************
  9513 ;; Defined at:
  9514 ;;		line 1477 in file "../main.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9517 ;;		 -> vscp_imsg(14), 
  9518 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9519 ;;		 -> vscp_imsg(14), 
  9520 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9521 ;;		 -> vscp_imsg(14), 
  9522 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9523 ;;		 -> vscp_imsg(14), 
  9524 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9525 ;;		 -> vscp_imsg(14), 
  9526 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9527 ;;		 -> vscp_imsg(14), 
  9528 ;; Auto vars:     Size  Location     Type
  9529 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9530 ;;		 -> vscp_imsg(14), 
  9531 ;;  id              4   39[COMRAM] unsigned long 
  9532 ;; Return value:  Size  Location     Type
  9533 ;;                  1    wreg      unsigned char 
  9534 ;; Registers used:
  9535 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : F/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9541 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9542 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9543 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9544 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9545 ;;Total ram usage:       14 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    5
  9548 ;; This function calls:
  9549 ;;		_getCANFrame
  9550 ;; This function is called by:
  9551 ;;		_vscp_getEvent
  9552 ;; This function uses a non-reentrant model
  9553 ;;
  9554                           
  9555                           	psect	text55
  9556  002AFA                     __ptext55:
  9557                           	opt stack 0
  9558  002AFA                     _getVSCPFrame:
  9559                           	opt stack 24
  9560                           
  9561                           ;incstack = 0
  9562                           ;incstack = 0
  9563                           ;getVSCPFrame@pvscpclass stored from wreg
  9564  002AFA  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;main.c: 1478: uint32_t id;
  9568                           ;main.c: 1480: if ( !getCANFrame(&id, pSize, pData) ) {
  9569  002AFE  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9570  002B02  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9571  002B06  0E28               	movlw	getVSCPFrame@id& (0+255)
  9572  002B08  EC51  F017         	call	_getCANFrame
  9573  002B0C  0900               	iorlw	0
  9574  002B0E  E101               	bnz	l5098
  9575                           
  9576                           ;main.c: 1481: return 0;
  9577  002B10  0C00               	retlw	0
  9578  002B12                     l5098:
  9579                           
  9580                           ;main.c: 1482: }
  9581                           ;main.c: 1484: *pNodeId = id & 0x0ff;
  9582  002B12  501F               	movf	getVSCPFrame@pNodeId,w,c
  9583  002B14  6ED9               	movwf	fsr2l,c
  9584  002B16  6ADA               	clrf	fsr2h,c
  9585  002B18  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9586                           
  9587                           ;main.c: 1485: *pvscptype = (id >> 8) & 0xff;
  9588  002B1C  501E               	movf	getVSCPFrame@pvscptype,w,c
  9589  002B1E  6ED9               	movwf	fsr2l,c
  9590  002B20  6ADA               	clrf	fsr2h,c
  9591  002B22  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9592                           
  9593                           ;main.c: 1486: *pvscpclass = (id >> 16) & 0x1ff;
  9594  002B26  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9595  002B28  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9596  002B2A  0E01               	movlw	1
  9597  002B2C  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9598  002B2E  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9599  002B30  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9600  002B32  6ED9               	movwf	fsr2l,c
  9601  002B34  6ADA               	clrf	fsr2h,c
  9602  002B36  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9603  002B3A  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  9604                           
  9605                           ;main.c: 1487: *pPriority = (uint16_t) (0x07 & (id >> 26));
  9606  002B3E  5020               	movf	getVSCPFrame@pPriority,w,c
  9607  002B40  6ED9               	movwf	fsr2l,c
  9608  002B42  6ADA               	clrf	fsr2h,c
  9609  002B44  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  9610  002B48  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  9611  002B4C  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  9612  002B50  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  9613  002B54  0E1B               	movlw	27
  9614  002B56  D005               	goto	u4440
  9615  002B58                     u4445:
  9616  002B58  90D8               	bcf	status,0,c
  9617  002B5A  3226               	rrcf	??_getVSCPFrame+3,f,c
  9618  002B5C  3225               	rrcf	??_getVSCPFrame+2,f,c
  9619  002B5E  3224               	rrcf	??_getVSCPFrame+1,f,c
  9620  002B60  3223               	rrcf	??_getVSCPFrame,f,c
  9621  002B62                     u4440:
  9622  002B62  2EE8               	decfsz	wreg,f,c
  9623  002B64  D7F9               	goto	u4445
  9624  002B66  5023               	movf	??_getVSCPFrame,w,c
  9625  002B68  0B07               	andlw	7
  9626  002B6A  6EDF               	movwf	indf2,c
  9627                           
  9628                           ;main.c: 1489: return 1;
  9629  002B6C  0C01               	retlw	1
  9630  002B6E                     __end_of_getVSCPFrame:
  9631                           	opt stack 0
  9632                           tblptru	equ	0xFF8
  9633                           tblptrh	equ	0xFF7
  9634                           tblptrl	equ	0xFF6
  9635                           tablat	equ	0xFF5
  9636                           prodh	equ	0xFF4
  9637                           prodl	equ	0xFF3
  9638                           postinc0	equ	0xFEE
  9639                           wreg	equ	0xFE8
  9640                           indf1	equ	0xFE7
  9641                           fsr1h	equ	0xFE2
  9642                           fsr1l	equ	0xFE1
  9643                           indf2	equ	0xFDF
  9644                           postinc2	equ	0xFDE
  9645                           postdec2	equ	0xFDD
  9646                           plusw2	equ	0xFDB
  9647                           fsr2h	equ	0xFDA
  9648                           fsr2l	equ	0xFD9
  9649                           status	equ	0xFD8
  9650                           
  9651 ;; *************** function _getCANFrame *****************
  9652 ;; Defined at:
  9653 ;;		line 1519 in file "../main.c"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;  pid             1    wreg     PTR unsigned long 
  9656 ;;		 -> getVSCPFrame@id(4), 
  9657 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
  9658 ;;		 -> vscp_imsg(14), 
  9659 ;;  pdata           1   26[COMRAM] PTR unsigned char 
  9660 ;;		 -> vscp_imsg(14), 
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  pid             1   27[COMRAM] PTR unsigned long 
  9663 ;;		 -> getVSCPFrame@id(4), 
  9664 ;;  flags           1   28[COMRAM] enum E18984
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      unsigned char 
  9667 ;; Registers used:
  9668 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9669 ;; Tracked objects:
  9670 ;;		On entry : F/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9674 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9677 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9678 ;;Total ram usage:        4 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    4
  9681 ;; This function calls:
  9682 ;;		_ECANReceiveMessage
  9683 ;; This function is called by:
  9684 ;;		_getVSCPFrame
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text56
  9689  002EA2                     __ptext56:
  9690                           	opt stack 0
  9691  002EA2                     _getCANFrame:
  9692                           	opt stack 24
  9693                           
  9694                           ;incstack = 0
  9695                           ;incstack = 0
  9696                           ;getCANFrame@pid stored from wreg
  9697  002EA2  CFE8 F01C          	movff	wreg,getCANFrame@pid
  9698                           
  9699                           ; BSR set to: 0
  9700                           ;main.c: 1520: ECAN_RX_MSG_FLAGS flags;
  9701                           ;main.c: 1524: if (vscp_imsg.flags & 0x80) return 0;
  9702  002EA6  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9703  002EA8                     l5110:
  9704  002EA8  0C00               	retlw	0
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;main.c: 1526: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
  9708  002EAA  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
  9709  002EAE  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
  9710  002EB2  0E1D               	movlw	low getCANFrame@flags
  9711  002EB4  6E11               	movwf	?_ECANReceiveMessage+2,c
  9712  002EB6  501C               	movf	getCANFrame@pid,w,c
  9713  002EB8  EC04  F00C         	call	_ECANReceiveMessage
  9714  002EBC  0900               	iorlw	0
  9715  002EBE  E0F4               	bz	l5110
  9716                           
  9717                           ;main.c: 1529: if (flags & ECAN_RX_RTR_FRAME) return 0;
  9718  002EC0  AC1D               	btfss	getCANFrame@flags,6,c
  9719                           
  9720                           ;main.c: 1532: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
  9721  002EC2  AA1D               	btfss	getCANFrame@flags,5,c
  9722  002EC4  0C00               	retlw	0
  9723                           
  9724                           ;main.c: 1534: return 1;
  9725  002EC6  0C01               	retlw	1
  9726  002EC8                     __end_of_getCANFrame:
  9727                           	opt stack 0
  9728                           tblptru	equ	0xFF8
  9729                           tblptrh	equ	0xFF7
  9730                           tblptrl	equ	0xFF6
  9731                           tablat	equ	0xFF5
  9732                           prodh	equ	0xFF4
  9733                           prodl	equ	0xFF3
  9734                           postinc0	equ	0xFEE
  9735                           wreg	equ	0xFE8
  9736                           indf1	equ	0xFE7
  9737                           fsr1h	equ	0xFE2
  9738                           fsr1l	equ	0xFE1
  9739                           indf2	equ	0xFDF
  9740                           postinc2	equ	0xFDE
  9741                           postdec2	equ	0xFDD
  9742                           plusw2	equ	0xFDB
  9743                           fsr2h	equ	0xFDA
  9744                           fsr2l	equ	0xFD9
  9745                           status	equ	0xFD8
  9746                           
  9747 ;; *************** function _ECANReceiveMessage *****************
  9748 ;; Defined at:
  9749 ;;		line 803 in file "../ECAN.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;  id              1    wreg     PTR unsigned long 
  9752 ;;		 -> getVSCPFrame@id(4), 
  9753 ;;  data            1   14[COMRAM] PTR unsigned char 
  9754 ;;		 -> vscp_imsg(14), 
  9755 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
  9756 ;;		 -> vscp_imsg(14), 
  9757 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
  9758 ;;		 -> getCANFrame@flags(1), 
  9759 ;; Auto vars:     Size  Location     Type
  9760 ;;  id              1   19[COMRAM] PTR unsigned long 
  9761 ;;		 -> getVSCPFrame@id(4), 
  9762 ;;  ptr             2   23[COMRAM] PTR unsigned char 
  9763 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9764 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9765 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
  9766 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9767 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9768 ;;  temp            1   22[COMRAM] struct .
  9769 ;;  mode            1   21[COMRAM] unsigned char 
  9770 ;;  i               1   20[COMRAM] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;                  1    wreg      enum E18242
  9773 ;; Registers used:
  9774 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : F/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9780 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9781 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9783 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9784 ;;Total ram usage:       11 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    3
  9787 ;; This function calls:
  9788 ;;		__ECANPointBuffer
  9789 ;;		__RegsToCANID
  9790 ;; This function is called by:
  9791 ;;		_getCANFrame
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text57
  9796  001808                     __ptext57:
  9797                           	opt stack 0
  9798  001808                     _ECANReceiveMessage:
  9799                           	opt stack 24
  9800                           
  9801                           ;incstack = 0
  9802                           ;incstack = 0
  9803                           ;ECANReceiveMessage@id stored from wreg
  9804  001808  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;ECAN.c: 805: BYTE mode;
  9808                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  9809                           ;ECAN.c: 809: char i;
  9810                           ;ECAN.c: 810: BYTE_VAL temp;
  9811                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  9812  00180C  6A54               	clrf	__ECANRxFilterHitInfo,c
  9813                           
  9814                           ; BSR set to: 0
  9815                           ;ECAN.c: 815: mode = ECANCON&0xC0;
  9816  00180E  5072               	movf	3954,w,c	;volatile
  9817  001810  0BC0               	andlw	192
  9818  001812  6E16               	movwf	ECANReceiveMessage@mode,c
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;ECAN.c: 816: if ( mode == 0x00 )
  9822  001814  6616               	tstfsz	ECANReceiveMessage@mode,c
  9823  001816  D030               	goto	l5246
  9824                           
  9825                           ; BSR set to: 0
  9826                           ;ECAN.c: 822: {
  9827                           ;ECAN.c: 824: if ( RXB0FUL )
  9828  001818  AE60               	btfss	3936,7,c	;volatile
  9829  00181A  D012               	goto	l661
  9830                           
  9831                           ; BSR set to: 0
  9832                           ;ECAN.c: 825: {
  9833                           ;ECAN.c: 827: RXB0IF = 0;
  9834  00181C  9077               	bcf	3959,0,c	;volatile
  9835                           
  9836                           ;ECAN.c: 830: if ( RXB0OVFL )
  9837  00181E  AE71               	btfss	3953,7,c	;volatile
  9838  001820  D006               	goto	l5222
  9839                           
  9840                           ; BSR set to: 0
  9841                           ;ECAN.c: 831: {
  9842                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
  9843  001822  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9844  001824  6ED9               	movwf	fsr2l,c
  9845  001826  6ADA               	clrf	fsr2h,c
  9846  001828  0E00               	movlw	0
  9847  00182A  86DB               	bsf	plusw2,3,c
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;ECAN.c: 833: RXB0OVFL = 0;
  9851  00182C  9E71               	bcf	3953,7,c	;volatile
  9852  00182E                     l5222:
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;ECAN.c: 834: }
  9856                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  9857  00182E  A060               	btfss	3936,0,c	;volatile
  9858  001830  D002               	bra	u4615
  9859  001832  8054               	bsf	__ECANRxFilterHitInfo,0,c
  9860  001834  D001               	bra	u4617
  9861  001836                     u4615:
  9862  001836  9054               	bcf	__ECANRxFilterHitInfo,0,c
  9863  001838                     u4617:
  9864                           
  9865                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
  9866  001838  0E0F               	movlw	15	;volatile
  9867  00183A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9868  00183C  0E60               	movlw	96	;volatile
  9869  00183E  D01A               	goto	L28
  9870  001840                     l661:
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
  9874  001840  010F               	movlb	15	; () banked
  9875  001842  AF30               	btfss	48,7,b	;volatile
  9876  001844  0C00               	retlw	0
  9877                           
  9878                           ; BSR set to: 15
  9879                           ;ECAN.c: 842: {
  9880                           ;ECAN.c: 844: RXB1IF = 0;
  9881  001846  9277               	bcf	3959,1,c	;volatile
  9882                           
  9883                           ;ECAN.c: 847: if ( RXB1OVFL )
  9884  001848  AC71               	btfss	3953,6,c	;volatile
  9885  00184A  D006               	goto	l5232
  9886                           
  9887                           ; BSR set to: 15
  9888                           ;ECAN.c: 848: {
  9889                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
  9890  00184C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9891  00184E  6ED9               	movwf	fsr2l,c
  9892  001850  6ADA               	clrf	fsr2h,c
  9893  001852  0E00               	movlw	0
  9894  001854  86DB               	bsf	plusw2,3,c
  9895                           
  9896                           ; BSR set to: 15
  9897                           ;ECAN.c: 850: RXB1OVFL = 0;
  9898  001856  9C71               	bcf	3953,6,c	;volatile
  9899  001858                     l5232:
  9900                           
  9901                           ; BSR set to: 15
  9902                           ;ECAN.c: 851: }
  9903                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  9904  001858  5130               	movf	48,w,b	;volatile
  9905  00185A  0B07               	andlw	7
  9906  00185C  6E54               	movwf	__ECANRxFilterHitInfo,c
  9907                           
  9908                           ; BSR set to: 15
  9909                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  9910  00185E  0E02               	movlw	2
  9911  001860  6054               	cpfslt	__ECANRxFilterHitInfo,c
  9912  001862  D005               	goto	l5238
  9913                           
  9914                           ; BSR set to: 15
  9915                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  9916  001864  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9917  001866  6ED9               	movwf	fsr2l,c
  9918  001868  6ADA               	clrf	fsr2h,c
  9919  00186A  0E00               	movlw	0
  9920  00186C  8EDB               	bsf	plusw2,7,c
  9921  00186E                     l5238:
  9922                           
  9923                           ; BSR set to: 15
  9924                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
  9925  00186E  0E0F               	movlw	15	;volatile
  9926  001870  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9927  001872  0E30               	movlw	48	;volatile
  9928  001874                     L28:
  9929  001874  6E18               	movwf	ECANReceiveMessage@ptr,c
  9930                           
  9931                           ;ECAN.c: 860: }
  9932  001876  D05B               	goto	l5300
  9933  001878                     l5246:
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;ECAN.c: 869: else if ( mode == 0x40 )
  9937  001878  5016               	movf	ECANReceiveMessage@mode,w,c
  9938  00187A  0A40               	xorlw	64
  9939  00187C  E13E               	bnz	l671
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;ECAN.c: 875: {
  9943                           ;ECAN.c: 876: if ( RXB0FUL )
  9944  00187E  AE60               	btfss	3936,7,c	;volatile
  9945  001880  D004               	goto	l672
  9946                           
  9947                           ; BSR set to: 0
  9948                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
  9949  001882  0E0F               	movlw	15	;volatile
  9950  001884  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9951  001886  0E60               	movlw	96	;volatile
  9952  001888  D036               	goto	L35
  9953  00188A                     l672:
  9954                           
  9955                           ; BSR set to: 0
  9956                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
  9957  00188A  010F               	movlb	15	; () banked
  9958  00188C  AF30               	btfss	48,7,b	;volatile
  9959  00188E  D004               	goto	l674
  9960                           
  9961                           ; BSR set to: 15
  9962                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
  9963  001890  0E0F               	movlw	15	;volatile
  9964  001892  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9965  001894  0E30               	movlw	48	;volatile
  9966  001896  D02F               	goto	L35
  9967  001898                     l674:
  9968                           
  9969                           ; BSR set to: 15
  9970                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
  9971  001898  010E               	movlb	14
  9972  00189A  A57D               	btfss	125,2,b	;volatile
  9973  00189C  AF80               	btfss	128,7,b	;volatile
  9974  00189E  D004               	goto	l676
  9975                           
  9976                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
  9977  0018A0  0E0E               	movlw	14	;volatile
  9978  0018A2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9979  0018A4  0E80               	movlw	128	;volatile
  9980  0018A6  D027               	goto	L35
  9981  0018A8                     l676:
  9982                           
  9983                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
  9984  0018A8  010E               	movlb	14
  9985  0018AA  A77D               	btfss	125,3,b	;volatile
  9986  0018AC  AF90               	btfss	144,7,b	;volatile
  9987  0018AE  D004               	goto	l678
  9988                           
  9989                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
  9990  0018B0  0E0E               	movlw	14	;volatile
  9991  0018B2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9992  0018B4  0E90               	movlw	144	;volatile
  9993  0018B6  D01F               	goto	L35
  9994  0018B8                     l678:
  9995                           
  9996                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
  9997  0018B8  010E               	movlb	14
  9998  0018BA  A97D               	btfss	125,4,b	;volatile
  9999  0018BC  AFA0               	btfss	160,7,b	;volatile
 10000  0018BE  D004               	goto	l680
 10001                           
 10002                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 10003  0018C0  0E0E               	movlw	14	;volatile
 10004  0018C2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10005  0018C4  0EA0               	movlw	160	;volatile
 10006  0018C6  D017               	goto	L35
 10007  0018C8                     l680:
 10008                           
 10009                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 10010  0018C8  010E               	movlb	14
 10011  0018CA  AB7D               	btfss	125,5,b	;volatile
 10012  0018CC  AFB0               	btfss	176,7,b	;volatile
 10013  0018CE  D004               	goto	l682
 10014                           
 10015                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 10016  0018D0  0E0E               	movlw	14	;volatile
 10017  0018D2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10018  0018D4  0EB0               	movlw	176	;volatile
 10019  0018D6  D00F               	goto	L35
 10020  0018D8                     l682:
 10021                           
 10022                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 10023  0018D8  010E               	movlb	14
 10024  0018DA  AD7D               	btfss	125,6,b	;volatile
 10025  0018DC  AFC0               	btfss	192,7,b	;volatile
 10026  0018DE  D004               	goto	l684
 10027                           
 10028                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 10029  0018E0  0E0E               	movlw	14	;volatile
 10030  0018E2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10031  0018E4  0EC0               	movlw	192	;volatile
 10032  0018E6  D007               	goto	L35
 10033  0018E8                     l684:
 10034                           
 10035                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 10036  0018E8  010E               	movlb	14
 10037  0018EA  AF7D               	btfss	125,7,b	;volatile
 10038  0018EC  AFD0               	btfss	208,7,b	;volatile
 10039  0018EE  0C00               	retlw	0
 10040                           
 10041                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 10042  0018F0  0E0E               	movlw	14	;volatile
 10043  0018F2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10044  0018F4  0ED0               	movlw	208	;volatile
 10045  0018F6                     L35:
 10046  0018F6  6E18               	movwf	ECANReceiveMessage@ptr,c
 10047  0018F8  D00A               	goto	l5290
 10048  0018FA                     l671:
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;ECAN.c: 910: else
 10052                           ;ECAN.c: 915: {
 10053                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 10054  0018FA  AE71               	btfss	3953,7,c	;volatile
 10055  0018FC  0C00               	retlw	0
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;ECAN.c: 917: {
 10059                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 10060  0018FE  506F               	movf	3951,w,c	;volatile
 10061  001900  0B07               	andlw	7
 10062  001902  EC3E  F015         	call	__ECANPointBuffer
 10063  001906  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 10064  00190A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 10065  00190E                     l5290:
 10066                           
 10067                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 10068  00190E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10069  001912  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10070  001916  50DF               	movf	indf2,w,c
 10071  001918  0B1F               	andlw	31
 10072  00191A  6E54               	movwf	__ECANRxFilterHitInfo,c
 10073                           
 10074                           ;ECAN.c: 932: RXB1IF = 0;
 10075  00191C  9277               	bcf	3959,1,c	;volatile
 10076                           
 10077                           ;ECAN.c: 934: if ( RXB1OVFL )
 10078  00191E  AC71               	btfss	3953,6,c	;volatile
 10079  001920  D006               	goto	l5300
 10080                           
 10081                           ;ECAN.c: 935: {
 10082                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 10083  001922  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10084  001924  6ED9               	movwf	fsr2l,c
 10085  001926  6ADA               	clrf	fsr2h,c
 10086  001928  0E00               	movlw	0
 10087  00192A  86DB               	bsf	plusw2,3,c
 10088                           
 10089                           ;ECAN.c: 937: RXB1OVFL = 0;
 10090  00192C  9C71               	bcf	3953,6,c	;volatile
 10091  00192E                     l5300:
 10092                           
 10093                           ;ECAN.c: 942: savedPtr = ptr;
 10094  00192E  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 10095  001932  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 10096                           
 10097                           ;ECAN.c: 943: *msgFlags = 0;
 10098  001936  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10099  001938  6ED9               	movwf	fsr2l,c
 10100  00193A  6ADA               	clrf	fsr2h,c
 10101  00193C  6ADF               	clrf	indf2,c
 10102                           
 10103                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 10104  00193E  EE20 F005          	lfsr	2,5
 10105  001942  5018               	movf	ECANReceiveMessage@ptr,w,c
 10106  001944  26D9               	addwf	fsr2l,f,c
 10107  001946  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10108  001948  22DA               	addwfc	fsr2h,f,c
 10109  00194A  50DF               	movf	indf2,w,c
 10110  00194C  6E17               	movwf	ECANReceiveMessage@temp,c
 10111                           
 10112                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 10113  00194E  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10114  001950  6ED9               	movwf	fsr2l,c
 10115  001952  6ADA               	clrf	fsr2h,c
 10116  001954  5017               	movf	ECANReceiveMessage@temp,w,c
 10117  001956  0B0F               	andlw	15
 10118  001958  6EDF               	movwf	indf2,c
 10119                           
 10120                           ;ECAN.c: 950: if ( temp.bits.b6 )
 10121  00195A  AC17               	btfss	ECANReceiveMessage@temp,6,c
 10122  00195C  D005               	goto	l692
 10123                           
 10124                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 10125  00195E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10126  001960  6ED9               	movwf	fsr2l,c
 10127  001962  6ADA               	clrf	fsr2h,c
 10128  001964  0E00               	movlw	0
 10129  001966  8CDB               	bsf	plusw2,6,c
 10130  001968                     l692:
 10131                           
 10132                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 10133  001968  EE20 F002          	lfsr	2,2
 10134  00196C  5018               	movf	ECANReceiveMessage@ptr,w,c
 10135  00196E  26D9               	addwf	fsr2l,f,c
 10136  001970  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10137  001972  22DA               	addwfc	fsr2h,f,c
 10138  001974  50DF               	movf	indf2,w,c
 10139  001976  6E17               	movwf	ECANReceiveMessage@temp,c
 10140                           
 10141                           ;ECAN.c: 955: if ( temp.bits.b3 )
 10142  001978  A617               	btfss	ECANReceiveMessage@temp,3,c
 10143  00197A  D008               	goto	l693
 10144                           
 10145                           ;ECAN.c: 956: {
 10146                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 10147  00197C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10148  00197E  6ED9               	movwf	fsr2l,c
 10149  001980  6ADA               	clrf	fsr2h,c
 10150  001982  0E00               	movlw	0
 10151  001984  8ADB               	bsf	plusw2,5,c
 10152                           
 10153                           ;ECAN.c: 958: temp.Val = 1;
 10154  001986  0E01               	movlw	1
 10155  001988  6E17               	movwf	ECANReceiveMessage@temp,c
 10156                           
 10157                           ;ECAN.c: 959: }
 10158  00198A  D001               	goto	l5318
 10159  00198C                     l693:
 10160                           
 10161                           ;ECAN.c: 960: else
 10162                           ;ECAN.c: 961: temp.Val = 0;
 10163  00198C  6A17               	clrf	ECANReceiveMessage@temp,c
 10164  00198E                     l5318:
 10165                           
 10166                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 10167  00198E  2818               	incf	ECANReceiveMessage@ptr,w,c
 10168  001990  6E08               	movwf	?__RegsToCANID,c
 10169  001992  0E00               	movlw	0
 10170  001994  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 10171  001996  6E09               	movwf	?__RegsToCANID+1,c
 10172  001998  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 10173  00199C  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 10174  0019A0  EC4F  F00F         	call	__RegsToCANID	;wreg free
 10175                           
 10176                           ;ECAN.c: 966: ptr += 6;
 10177  0019A4  0E06               	movlw	6
 10178  0019A6  2618               	addwf	ECANReceiveMessage@ptr,f,c
 10179  0019A8  0E00               	movlw	0
 10180  0019AA  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 10181                           
 10182                           ;ECAN.c: 967: temp.Val = *dataLen;
 10183  0019AC  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10184  0019AE  6ED9               	movwf	fsr2l,c
 10185  0019B0  6ADA               	clrf	fsr2h,c
 10186  0019B2  50DF               	movf	indf2,w,c
 10187  0019B4  6E17               	movwf	ECANReceiveMessage@temp,c
 10188                           
 10189                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 10190  0019B6  6A15               	clrf	ECANReceiveMessage@i,c
 10191  0019B8  D00D               	goto	l5334
 10192  0019BA                     l5326:
 10193                           
 10194                           ;ECAN.c: 969: *data++ = *ptr++;
 10195  0019BA  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10196  0019BE  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10197  0019C2  500F               	movf	ECANReceiveMessage@data,w,c
 10198  0019C4  6EE1               	movwf	fsr1l,c
 10199  0019C6  6AE2               	clrf	fsr1h,c
 10200  0019C8  CFDF FFE7          	movff	indf2,indf1
 10201  0019CC  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10202  0019CE  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10203  0019D0  2A0F               	incf	ECANReceiveMessage@data,f,c
 10204  0019D2  2A15               	incf	ECANReceiveMessage@i,f,c
 10205  0019D4                     l5334:
 10206  0019D4  5017               	movf	ECANReceiveMessage@temp,w,c
 10207  0019D6  5C15               	subwf	ECANReceiveMessage@i,w,c
 10208  0019D8  E3F0               	bnc	l5326
 10209                           
 10210                           ;ECAN.c: 972: if ( IRXIF )
 10211  0019DA  AE77               	btfss	3959,7,c	;volatile
 10212  0019DC  D006               	goto	l5340
 10213                           
 10214                           ;ECAN.c: 973: {
 10215                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10216  0019DE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10217  0019E0  6ED9               	movwf	fsr2l,c
 10218  0019E2  6ADA               	clrf	fsr2h,c
 10219  0019E4  0E00               	movlw	0
 10220  0019E6  88DB               	bsf	plusw2,4,c
 10221                           
 10222                           ;ECAN.c: 975: IRXIF = 0;
 10223  0019E8  9E77               	bcf	3959,7,c	;volatile
 10224  0019EA                     l5340:
 10225                           
 10226                           ;ECAN.c: 976: }
 10227                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10228  0019EA  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10229  0019EE  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10230  0019F2  0E7F               	movlw	127
 10231  0019F4  16DF               	andwf	indf2,f,c
 10232                           
 10233                           ;ECAN.c: 983: if ( mode == 0x80 )
 10234  0019F6  5016               	movf	ECANReceiveMessage@mode,w,c
 10235  0019F8  0A80               	xorlw	128
 10236  0019FA  B4D8               	btfsc	status,2,c
 10237                           
 10238                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10239  0019FC  9E71               	bcf	3953,7,c	;volatile
 10240                           
 10241                           ;ECAN.c: 990: return TRUE;
 10242  0019FE  0C01               	retlw	1
 10243  001A00                     __end_of_ECANReceiveMessage:
 10244                           	opt stack 0
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           postinc0	equ	0xFEE
 10252                           wreg	equ	0xFE8
 10253                           indf1	equ	0xFE7
 10254                           fsr1h	equ	0xFE2
 10255                           fsr1l	equ	0xFE1
 10256                           indf2	equ	0xFDF
 10257                           postinc2	equ	0xFDE
 10258                           postdec2	equ	0xFDD
 10259                           plusw2	equ	0xFDB
 10260                           fsr2h	equ	0xFDA
 10261                           fsr2l	equ	0xFD9
 10262                           status	equ	0xFD8
 10263                           
 10264 ;; *************** function __RegsToCANID *****************
 10265 ;; Defined at:
 10266 ;;		line 1156 in file "../ECAN.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10269 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10270 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10271 ;;  val             1    9[COMRAM] PTR unsigned long 
 10272 ;;		 -> getVSCPFrame@id(4), 
 10273 ;;  type            1   10[COMRAM] unsigned char 
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10276 ;;		 -> getVSCPFrame@id(4), 
 10277 ;; Return value:  Size  Location     Type
 10278 ;;		None               void
 10279 ;; Registers used:
 10280 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10281 ;; Tracked objects:
 10282 ;;		On entry : 0/0
 10283 ;;		On exit  : 0/0
 10284 ;;		Unchanged: 0/0
 10285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10288 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10289 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10290 ;;Total ram usage:        7 bytes
 10291 ;; Hardware stack levels used:    1
 10292 ;; Hardware stack levels required when called:    2
 10293 ;; This function calls:
 10294 ;;		Nothing
 10295 ;; This function is called by:
 10296 ;;		_ECANReceiveMessage
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           	psect	text58
 10301  001E9E                     __ptext58:
 10302                           	opt stack 0
 10303  001E9E                     __RegsToCANID:
 10304                           	opt stack 24
 10305                           
 10306                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10307                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10308                           
 10309                           ;incstack = 0
 10310                           ;incstack = 0
 10311  001E9E  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10312                           
 10313                           ;ECAN.c: 1161: if ( type == 0 )
 10314  001EA2  660B               	tstfsz	__RegsToCANID@type,c
 10315  001EA4  D046               	goto	l5414
 10316                           
 10317                           ;ECAN.c: 1162: {
 10318                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10319  001EA6  500E               	movf	__RegsToCANID@Value,w,c
 10320  001EA8  6ED9               	movwf	fsr2l,c
 10321  001EAA  6ADA               	clrf	fsr2h,c
 10322  001EAC  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10323  001EB0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10324  001EB4  50E7               	movf	indf1,w,c
 10325  001EB6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10326  001EB8  90D8               	bcf	status,0,c
 10327  001EBA  360C               	rlcf	??__RegsToCANID,f,c
 10328  001EBC  90D8               	bcf	status,0,c
 10329  001EBE  360C               	rlcf	??__RegsToCANID,f,c
 10330  001EC0  90D8               	bcf	status,0,c
 10331  001EC2  340C               	rlcf	??__RegsToCANID,w,c
 10332  001EC4  6EDF               	movwf	indf2,c
 10333                           
 10334                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10335  001EC6  500E               	movf	__RegsToCANID@Value,w,c
 10336  001EC8  6ED9               	movwf	fsr2l,c
 10337  001ECA  6ADA               	clrf	fsr2h,c
 10338  001ECC  2AD9               	incf	fsr2l,f,c
 10339  001ECE  6ADA               	clrf	fsr2h,c
 10340  001ED0  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10341  001ED4  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10342  001ED8  50E7               	movf	indf1,w,c
 10343  001EDA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10344  001EDC  0E05               	movlw	5
 10345  001EDE  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10346  001EE0                     u4935:
 10347  001EE0  90D8               	bcf	status,0,c
 10348  001EE2  320C               	rrcf	??__RegsToCANID,f,c
 10349  001EE4  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10350  001EE6  D7FC               	goto	u4935
 10351  001EE8  500C               	movf	??__RegsToCANID,w,c
 10352  001EEA  6EDF               	movwf	indf2,c
 10353                           
 10354                           ;ECAN.c: 1166: ptr++;
 10355  001EEC  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10356  001EEE  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10357                           
 10358                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10359  001EF0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10360  001EF4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10361  001EF8  50DF               	movf	indf2,w,c
 10362  001EFA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10363  001EFC  0E05               	movlw	5
 10364  001EFE  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10365  001F00                     u4945:
 10366  001F00  90D8               	bcf	status,0,c
 10367  001F02  320C               	rrcf	??__RegsToCANID,f,c
 10368  001F04  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10369  001F06  D7FC               	goto	u4945
 10370  001F08  500E               	movf	__RegsToCANID@Value,w,c
 10371  001F0A  6ED9               	movwf	fsr2l,c
 10372  001F0C  6ADA               	clrf	fsr2h,c
 10373  001F0E  500C               	movf	??__RegsToCANID,w,c
 10374  001F10  12DF               	iorwf	indf2,f,c
 10375                           
 10376                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10377  001F12  500E               	movf	__RegsToCANID@Value,w,c
 10378  001F14  6ED9               	movwf	fsr2l,c
 10379  001F16  6ADA               	clrf	fsr2h,c
 10380  001F18  0E02               	movlw	2
 10381  001F1A  26D9               	addwf	fsr2l,f,c
 10382  001F1C  6ADA               	clrf	fsr2h,c
 10383  001F1E  6ADF               	clrf	indf2,c
 10384                           
 10385                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10386  001F20  500E               	movf	__RegsToCANID@Value,w,c
 10387  001F22  6ED9               	movwf	fsr2l,c
 10388  001F24  6ADA               	clrf	fsr2h,c
 10389  001F26  0E03               	movlw	3
 10390  001F28  26D9               	addwf	fsr2l,f,c
 10391  001F2A  6ADA               	clrf	fsr2h,c
 10392  001F2C  0E00               	movlw	0
 10393  001F2E  6EDF               	movwf	indf2,c
 10394                           
 10395                           ;ECAN.c: 1170: }
 10396  001F30  0C00               	retlw	0
 10397  001F32                     l5414:
 10398                           
 10399                           ;ECAN.c: 1171: else
 10400                           ;ECAN.c: 1172: {
 10401                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10402  001F32  500E               	movf	__RegsToCANID@Value,w,c
 10403  001F34  6ED9               	movwf	fsr2l,c
 10404  001F36  6ADA               	clrf	fsr2h,c
 10405  001F38  0E02               	movlw	2
 10406  001F3A  26D9               	addwf	fsr2l,f,c
 10407  001F3C  6ADA               	clrf	fsr2h,c
 10408  001F3E  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10409  001F42  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10410  001F46  50E7               	movf	indf1,w,c
 10411  001F48  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10412  001F4A  0E05               	movlw	5
 10413  001F4C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10414  001F4E                     u4955:
 10415  001F4E  90D8               	bcf	status,0,c
 10416  001F50  360C               	rlcf	??__RegsToCANID,f,c
 10417  001F52  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10418  001F54  D7FC               	goto	u4955
 10419  001F56  500C               	movf	??__RegsToCANID,w,c
 10420  001F58  6EDF               	movwf	indf2,c
 10421                           
 10422                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10423  001F5A  500E               	movf	__RegsToCANID@Value,w,c
 10424  001F5C  6ED9               	movwf	fsr2l,c
 10425  001F5E  6ADA               	clrf	fsr2h,c
 10426  001F60  0E03               	movlw	3
 10427  001F62  26D9               	addwf	fsr2l,f,c
 10428  001F64  6ADA               	clrf	fsr2h,c
 10429  001F66  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10430  001F6A  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10431  001F6E  50E7               	movf	indf1,w,c
 10432  001F70  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10433  001F72  90D8               	bcf	status,0,c
 10434  001F74  320C               	rrcf	??__RegsToCANID,f,c
 10435  001F76  90D8               	bcf	status,0,c
 10436  001F78  320C               	rrcf	??__RegsToCANID,f,c
 10437  001F7A  90D8               	bcf	status,0,c
 10438  001F7C  300C               	rrcf	??__RegsToCANID,w,c
 10439  001F7E  6EDF               	movwf	indf2,c
 10440                           
 10441                           ;ECAN.c: 1176: ptr++;
 10442  001F80  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10443  001F82  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10444                           
 10445                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10446  001F84  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10447  001F88  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10448  001F8C  50DF               	movf	indf2,w,c
 10449  001F8E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10450  001F90  0E03               	movlw	3
 10451  001F92  160C               	andwf	??__RegsToCANID,f,c
 10452  001F94  500E               	movf	__RegsToCANID@Value,w,c
 10453  001F96  6ED9               	movwf	fsr2l,c
 10454  001F98  6ADA               	clrf	fsr2h,c
 10455  001F9A  0E02               	movlw	2
 10456  001F9C  26D9               	addwf	fsr2l,f,c
 10457  001F9E  6ADA               	clrf	fsr2h,c
 10458  001FA0  500C               	movf	??__RegsToCANID,w,c
 10459  001FA2  12DF               	iorwf	indf2,f,c
 10460                           
 10461                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10462  001FA4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10463  001FA8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10464  001FAC  50DF               	movf	indf2,w,c
 10465  001FAE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10466  001FB0  90D8               	bcf	status,0,c
 10467  001FB2  320C               	rrcf	??__RegsToCANID,f,c
 10468  001FB4  90D8               	bcf	status,0,c
 10469  001FB6  320C               	rrcf	??__RegsToCANID,f,c
 10470  001FB8  90D8               	bcf	status,0,c
 10471  001FBA  320C               	rrcf	??__RegsToCANID,f,c
 10472  001FBC  0E1C               	movlw	28
 10473  001FBE  160C               	andwf	??__RegsToCANID,f,c
 10474  001FC0  500E               	movf	__RegsToCANID@Value,w,c
 10475  001FC2  6ED9               	movwf	fsr2l,c
 10476  001FC4  6ADA               	clrf	fsr2h,c
 10477  001FC6  0E02               	movlw	2
 10478  001FC8  26D9               	addwf	fsr2l,f,c
 10479  001FCA  6ADA               	clrf	fsr2h,c
 10480  001FCC  500C               	movf	??__RegsToCANID,w,c
 10481  001FCE  12DF               	iorwf	indf2,f,c
 10482                           
 10483                           ;ECAN.c: 1180: ptr++;
 10484  001FD0  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10485  001FD2  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10486                           
 10487                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10488  001FD4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10489  001FD8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10490  001FDC  500E               	movf	__RegsToCANID@Value,w,c
 10491  001FDE  6EE1               	movwf	fsr1l,c
 10492  001FE0  6AE2               	clrf	fsr1h,c
 10493  001FE2  2AE1               	incf	fsr1l,f,c
 10494  001FE4  6AE2               	clrf	fsr1h,c
 10495  001FE6  CFDF FFE7          	movff	indf2,indf1
 10496                           
 10497                           ;ECAN.c: 1182: ptr++;
 10498  001FEA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10499  001FEC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10500                           
 10501                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10502  001FEE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10503  001FF2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10504  001FF6  500E               	movf	__RegsToCANID@Value,w,c
 10505  001FF8  6EE1               	movwf	fsr1l,c
 10506  001FFA  6AE2               	clrf	fsr1h,c
 10507  001FFC  CFDF FFE7          	movff	indf2,indf1
 10508  002000  0012               	return	
 10509  002002                     __end_of__RegsToCANID:
 10510                           	opt stack 0
 10511                           tblptru	equ	0xFF8
 10512                           tblptrh	equ	0xFF7
 10513                           tblptrl	equ	0xFF6
 10514                           tablat	equ	0xFF5
 10515                           prodh	equ	0xFF4
 10516                           prodl	equ	0xFF3
 10517                           postinc0	equ	0xFEE
 10518                           wreg	equ	0xFE8
 10519                           indf1	equ	0xFE7
 10520                           fsr1h	equ	0xFE2
 10521                           fsr1l	equ	0xFE1
 10522                           indf2	equ	0xFDF
 10523                           postinc2	equ	0xFDE
 10524                           postdec2	equ	0xFDD
 10525                           plusw2	equ	0xFDB
 10526                           fsr2h	equ	0xFDA
 10527                           fsr2l	equ	0xFD9
 10528                           status	equ	0xFD8
 10529                           
 10530 ;; *************** function __ECANPointBuffer *****************
 10531 ;; Defined at:
 10532 ;;		line 1207 in file "../ECAN.c"
 10533 ;; Parameters:    Size  Location     Type
 10534 ;;  b               1    wreg     unsigned char 
 10535 ;; Auto vars:     Size  Location     Type
 10536 ;;  b               1   10[COMRAM] unsigned char 
 10537 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10538 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10539 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  2    7[COMRAM] PTR unsigned char 
 10542 ;; Registers used:
 10543 ;;		wreg, status,2, status,0
 10544 ;; Tracked objects:
 10545 ;;		On entry : F/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10549 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10550 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10553 ;;Total ram usage:        6 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    2
 10556 ;; This function calls:
 10557 ;;		Nothing
 10558 ;; This function is called by:
 10559 ;;		_ECANReceiveMessage
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           	psect	text59
 10564  002A7C                     __ptext59:
 10565                           	opt stack 0
 10566  002A7C                     __ECANPointBuffer:
 10567                           	opt stack 24
 10568                           
 10569                           ;incstack = 0
 10570                           ;incstack = 0
 10571                           ;__ECANPointBuffer@b stored from wreg
 10572  002A7C  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;ECAN.c: 1208: BYTE* pt;
 10576                           ;ECAN.c: 1210: switch(b)
 10577  002A80  D028               	goto	l5400
 10578  002A82                     l5382:
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10582  002A82  0E0F               	movlw	15	;volatile
 10583  002A84  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10584  002A86  0E60               	movlw	96	;volatile
 10585  002A88  D022               	goto	L42
 10586  002A8A                     l5384:
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10590  002A8A  010F               	movlb	15	; () banked
 10591  002A8C  0E0F               	movlw	15	;volatile
 10592  002A8E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10593  002A90  0E30               	movlw	48	;volatile
 10594  002A92  D01D               	goto	L42
 10595  002A94                     l5386:
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10599  002A94  010E               	movlb	14	; () banked
 10600  002A96  0E0E               	movlw	14	;volatile
 10601  002A98  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10602  002A9A  0E80               	movlw	128	;volatile
 10603  002A9C  D018               	goto	L42
 10604  002A9E                     l5388:
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 10608  002A9E  010E               	movlb	14	; () banked
 10609  002AA0  0E0E               	movlw	14	;volatile
 10610  002AA2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10611  002AA4  0E90               	movlw	144	;volatile
 10612  002AA6  D013               	goto	L42
 10613  002AA8                     l5390:
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 10617  002AA8  010E               	movlb	14	; () banked
 10618  002AAA  0E0E               	movlw	14	;volatile
 10619  002AAC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10620  002AAE  0EA0               	movlw	160	;volatile
 10621  002AB0  D00E               	goto	L42
 10622  002AB2                     l5392:
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 10626  002AB2  010E               	movlb	14	; () banked
 10627  002AB4  0E0E               	movlw	14	;volatile
 10628  002AB6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10629  002AB8  0EB0               	movlw	176	;volatile
 10630  002ABA  D009               	goto	L42
 10631  002ABC                     l5394:
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 10635  002ABC  010E               	movlb	14	; () banked
 10636  002ABE  0E0E               	movlw	14	;volatile
 10637  002AC0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10638  002AC2  0EC0               	movlw	192	;volatile
 10639  002AC4  D004               	goto	L42
 10640  002AC6                     l5396:
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 10644  002AC6  010E               	movlb	14	; () banked
 10645  002AC8  0E0E               	movlw	14	;volatile
 10646  002ACA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10647  002ACC  0ED0               	movlw	208	;volatile
 10648  002ACE                     L42:
 10649  002ACE  6E0C               	movwf	__ECANPointBuffer@pt,c
 10650                           
 10651                           ;ECAN.c: 1235: break;
 10652  002AD0  D00F               	goto	l720
 10653  002AD2                     l5400:
 10654                           
 10655                           ; BSR set to: 0
 10656  002AD2  500B               	movf	__ECANPointBuffer@b,w,c
 10657                           
 10658                           ; Switch size 1, requested type "speed"
 10659                           ; Number of cases is 7, Range of values is 0 to 6
 10660                           ; switch strategies available:
 10661                           ; Name         Instructions Cycles
 10662                           ; simple_byte           22    12 (average)
 10663                           ;	Chosen strategy is simple_byte
 10664  002AD4  E0D6               	bz	l5382
 10665  002AD6  0A01               	xorlw	1	; case 1
 10666  002AD8  E0D8               	bz	l5384
 10667  002ADA  0A03               	xorlw	3	; case 2
 10668  002ADC  E0DB               	bz	l5386
 10669  002ADE  0A01               	xorlw	1	; case 3
 10670  002AE0  E0DE               	bz	l5388
 10671  002AE2  0A07               	xorlw	7	; case 4
 10672  002AE4  E0E1               	bz	l5390
 10673  002AE6  0A01               	xorlw	1	; case 5
 10674  002AE8  E0E4               	bz	l5392
 10675  002AEA  0A03               	xorlw	3	; case 6
 10676  002AEC  E0E7               	bz	l5394
 10677  002AEE  D7EB               	goto	l5396
 10678  002AF0                     l720:
 10679                           
 10680                           ;ECAN.c: 1237: return (pt);
 10681  002AF0  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 10682  002AF4  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 10683  002AF8  0012               	return	
 10684  002AFA                     __end_of__ECANPointBuffer:
 10685                           	opt stack 0
 10686                           tblptru	equ	0xFF8
 10687                           tblptrh	equ	0xFF7
 10688                           tblptrl	equ	0xFF6
 10689                           tablat	equ	0xFF5
 10690                           prodh	equ	0xFF4
 10691                           prodl	equ	0xFF3
 10692                           postinc0	equ	0xFEE
 10693                           wreg	equ	0xFE8
 10694                           indf1	equ	0xFE7
 10695                           fsr1h	equ	0xFE2
 10696                           fsr1l	equ	0xFE1
 10697                           indf2	equ	0xFDF
 10698                           postinc2	equ	0xFDE
 10699                           postdec2	equ	0xFDD
 10700                           plusw2	equ	0xFDB
 10701                           fsr2h	equ	0xFDA
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705 ;; *************** function _vscp_check_pstorage *****************
 10706 ;; Defined at:
 10707 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      unsigned char 
 10714 ;; Registers used:
 10715 ;;		wreg, status,2, status,0, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : E/E
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    4
 10728 ;; This function calls:
 10729 ;;		_vscp_writeNicknamePermanent
 10730 ;;		_vscp_getSegmentCRC
 10731 ;;		_vscp_setSegmentCRC
 10732 ;;		_vscp_setControlByte
 10733 ;; This function is called by:
 10734 ;;		_main
 10735 ;; This function uses a non-reentrant model
 10736 ;;
 10737                           
 10738                           	psect	text60
 10739  002F54                     __ptext60:
 10740                           	opt stack 0
 10741  002F54                     _vscp_check_pstorage:
 10742                           	opt stack 26
 10743                           
 10744                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 10745                           
 10746                           ;incstack = 0
 10747                           ;incstack = 0
 10748  002F54  ECB7  F018         	call	_vscp_getSegmentCRC	;wreg free
 10749  002F58  0BC0               	andlw	192
 10750  002F5A  0A40               	xorlw	64
 10751  002F5C  E101               	bnz	l5842
 10752                           
 10753                           ;vscp_firmware.c: 172: return !0;
 10754  002F5E  0C01               	retlw	1
 10755  002F60                     l5842:
 10756                           
 10757                           ;vscp_firmware.c: 173: }
 10758                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 10759  002F60  0EFF               	movlw	255
 10760  002F62  EC5A  F018         	call	_vscp_writeNicknamePermanent
 10761                           
 10762                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 10763  002F66  0E00               	movlw	0
 10764  002F68  EC4F  F018         	call	_vscp_setSegmentCRC
 10765                           
 10766                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 10767  002F6C  0EA0               	movlw	160
 10768  002F6E  EC44  F018         	call	_vscp_setControlByte
 10769                           
 10770                           ;vscp_firmware.c: 185: return 0;
 10771  002F72  0C00               	retlw	0
 10772  002F74                     __end_of_vscp_check_pstorage:
 10773                           	opt stack 0
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           postinc0	equ	0xFEE
 10781                           wreg	equ	0xFE8
 10782                           indf1	equ	0xFE7
 10783                           fsr1h	equ	0xFE2
 10784                           fsr1l	equ	0xFE1
 10785                           indf2	equ	0xFDF
 10786                           postinc2	equ	0xFDE
 10787                           postdec2	equ	0xFDD
 10788                           plusw2	equ	0xFDB
 10789                           fsr2h	equ	0xFDA
 10790                           fsr2l	equ	0xFD9
 10791                           status	equ	0xFD8
 10792                           
 10793 ;; *************** function _vscp_setControlByte *****************
 10794 ;; Defined at:
 10795 ;;		line 1337 in file "../main.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;  ctrl            1    wreg     unsigned char 
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;  ctrl            1   11[COMRAM] unsigned char 
 10800 ;; Return value:  Size  Location     Type
 10801 ;;		None               void
 10802 ;; Registers used:
 10803 ;;		wreg, status,2, status,0, cstack
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/E
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10813 ;;Total ram usage:        1 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    3
 10816 ;; This function calls:
 10817 ;;		_Busy_eep
 10818 ;;		_Write_b_eep
 10819 ;; This function is called by:
 10820 ;;		_vscp_check_pstorage
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           	psect	text61
 10825  003088                     __ptext61:
 10826                           	opt stack 0
 10827  003088                     _vscp_setControlByte:
 10828                           	opt stack 26
 10829                           
 10830                           ;incstack = 0
 10831                           ;incstack = 0
 10832                           ;vscp_setControlByte@ctrl stored from wreg
 10833  003088  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 10834                           
 10835                           ;main.c: 1338: (Busy_eep(), Write_b_eep(0x03,ctrl));
 10836  00308C  ECC0  F018         	call	_Busy_eep	;wreg free
 10837  003090  6A09               	clrf	?_Write_b_eep+1,c
 10838  003092  0E03               	movlw	3
 10839  003094  6E08               	movwf	?_Write_b_eep,c
 10840  003096  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 10841  00309A  EF6C  F016         	goto	_Write_b_eep	;wreg free
 10842  00309E                     __end_of_vscp_setControlByte:
 10843                           	opt stack 0
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           postinc0	equ	0xFEE
 10851                           wreg	equ	0xFE8
 10852                           indf1	equ	0xFE7
 10853                           fsr1h	equ	0xFE2
 10854                           fsr1l	equ	0xFE1
 10855                           indf2	equ	0xFDF
 10856                           postinc2	equ	0xFDE
 10857                           postdec2	equ	0xFDD
 10858                           plusw2	equ	0xFDB
 10859                           fsr2h	equ	0xFDA
 10860                           fsr2l	equ	0xFD9
 10861                           status	equ	0xFD8
 10862                           
 10863 ;; *************** function _vscp_setSegmentCRC *****************
 10864 ;; Defined at:
 10865 ;;		line 1328 in file "../main.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;  crc             1    wreg     unsigned char 
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;  crc             1   11[COMRAM] unsigned char 
 10870 ;; Return value:  Size  Location     Type
 10871 ;;		None               void
 10872 ;; Registers used:
 10873 ;;		wreg, status,2, status,0, cstack
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10883 ;;Total ram usage:        1 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    3
 10886 ;; This function calls:
 10887 ;;		_Busy_eep
 10888 ;;		_Write_b_eep
 10889 ;; This function is called by:
 10890 ;;		_vscp_check_pstorage
 10891 ;;		_vscp_handleProbeState
 10892 ;;		_vscp_handleHeartbeat
 10893 ;;		_vscp_handleSetNickname
 10894 ;; This function uses a non-reentrant model
 10895 ;;
 10896                           
 10897                           	psect	text62
 10898  00309E                     __ptext62:
 10899                           	opt stack 0
 10900  00309E                     _vscp_setSegmentCRC:
 10901                           	opt stack 25
 10902                           
 10903                           ;incstack = 0
 10904                           ;incstack = 0
 10905                           ;vscp_setSegmentCRC@crc stored from wreg
 10906  00309E  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 10907                           
 10908                           ;main.c: 1329: (Busy_eep(), Write_b_eep(0x02,crc));
 10909  0030A2  ECC0  F018         	call	_Busy_eep	;wreg free
 10910  0030A6  6A09               	clrf	?_Write_b_eep+1,c
 10911  0030A8  0E02               	movlw	2
 10912  0030AA  6E08               	movwf	?_Write_b_eep,c
 10913  0030AC  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 10914  0030B0  EF6C  F016         	goto	_Write_b_eep	;wreg free
 10915  0030B4                     __end_of_vscp_setSegmentCRC:
 10916                           	opt stack 0
 10917                           tblptru	equ	0xFF8
 10918                           tblptrh	equ	0xFF7
 10919                           tblptrl	equ	0xFF6
 10920                           tablat	equ	0xFF5
 10921                           prodh	equ	0xFF4
 10922                           prodl	equ	0xFF3
 10923                           postinc0	equ	0xFEE
 10924                           wreg	equ	0xFE8
 10925                           indf1	equ	0xFE7
 10926                           fsr1h	equ	0xFE2
 10927                           fsr1l	equ	0xFE1
 10928                           indf2	equ	0xFDF
 10929                           postinc2	equ	0xFDE
 10930                           postdec2	equ	0xFDD
 10931                           plusw2	equ	0xFDB
 10932                           fsr2h	equ	0xFDA
 10933                           fsr2l	equ	0xFD9
 10934                           status	equ	0xFD8
 10935                           
 10936 ;; *************** function _vscp_getSegmentCRC *****************
 10937 ;; Defined at:
 10938 ;;		line 1319 in file "../main.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;		None
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;		None
 10943 ;; Return value:  Size  Location     Type
 10944 ;;                  1    wreg      unsigned char 
 10945 ;; Registers used:
 10946 ;;		wreg, status,2, status,0, cstack
 10947 ;; Tracked objects:
 10948 ;;		On entry : 0/0
 10949 ;;		On exit  : 0/0
 10950 ;;		Unchanged: 0/0
 10951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10956 ;;Total ram usage:        0 bytes
 10957 ;; Hardware stack levels used:    1
 10958 ;; Hardware stack levels required when called:    3
 10959 ;; This function calls:
 10960 ;;		_Read_b_eep
 10961 ;; This function is called by:
 10962 ;;		_vscp_check_pstorage
 10963 ;;		_vscp_handleHeartbeat
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           	psect	text63
 10968  00316E                     __ptext63:
 10969                           	opt stack 0
 10970  00316E                     _vscp_getSegmentCRC:
 10971                           	opt stack 25
 10972                           
 10973                           ;main.c: 1320: return Read_b_eep(0x02);
 10974                           
 10975                           ;incstack = 0
 10976                           ;incstack = 0
 10977  00316E  6A09               	clrf	?_Read_b_eep+1,c
 10978  003170  0E02               	movlw	2
 10979  003172  6E08               	movwf	?_Read_b_eep,c
 10980  003174  EF21  F018         	goto	_Read_b_eep	;wreg free
 10981  003178                     __end_of_vscp_getSegmentCRC:
 10982                           	opt stack 0
 10983                           tblptru	equ	0xFF8
 10984                           tblptrh	equ	0xFF7
 10985                           tblptrl	equ	0xFF6
 10986                           tablat	equ	0xFF5
 10987                           prodh	equ	0xFF4
 10988                           prodl	equ	0xFF3
 10989                           postinc0	equ	0xFEE
 10990                           wreg	equ	0xFE8
 10991                           indf1	equ	0xFE7
 10992                           fsr1h	equ	0xFE2
 10993                           fsr1l	equ	0xFE1
 10994                           indf2	equ	0xFDF
 10995                           postinc2	equ	0xFDE
 10996                           postdec2	equ	0xFDD
 10997                           plusw2	equ	0xFDB
 10998                           fsr2h	equ	0xFDA
 10999                           fsr2l	equ	0xFD9
 11000                           status	equ	0xFD8
 11001                           
 11002 ;; *************** function _Read_b_eep *****************
 11003 ;; Defined at:
 11004 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 11005 ;; Parameters:    Size  Location     Type
 11006 ;;  badd            2    7[COMRAM] unsigned int 
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;		None
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      unsigned char 
 11011 ;; Registers used:
 11012 ;;		wreg, status,2, status,0
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11022 ;;Total ram usage:        2 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    2
 11025 ;; This function calls:
 11026 ;;		Nothing
 11027 ;; This function is called by:
 11028 ;;		_main
 11029 ;;		_vscp_readNicknamePermanent
 11030 ;;		_vscp_getZone
 11031 ;;		_vscp_getSubzone
 11032 ;;		_vscp_readAppReg
 11033 ;;		_vscp_writeAppReg
 11034 ;;		_SendInformationEvent
 11035 ;;		_doDM
 11036 ;;		_actionSet
 11037 ;;		_actionClr
 11038 ;;		_vscp_getGUID
 11039 ;;		_vscp_getUserID
 11040 ;;		_vscp_getManufacturerId
 11041 ;;		_vscp_getSegmentCRC
 11042 ;; This function uses a non-reentrant model
 11043 ;;
 11044                           
 11045                           	psect	text64
 11046  003042                     __ptext64:
 11047                           	opt stack 0
 11048  003042                     _Read_b_eep:
 11049                           	opt stack 26
 11050                           
 11051                           ;incstack = 0
 11052                           ;incstack = 0
 11053  003042  5009               	movf	Read_b_eep@badd+1,w,c
 11054  003044  0B03               	andlw	3
 11055  003046  6E75               	movwf	3957,c	;volatile
 11056  003048  C008  FF74         	movff	Read_b_eep@badd,3956	;volatile
 11057  00304C  9C7F               	bcf	3967,6,c	;volatile
 11058  00304E  9E7F               	bcf	3967,7,c	;volatile
 11059  003050  807F               	bsf	3967,0,c	;volatile
 11060  003052  F000               	nop		;# 
 11061  003054  F000               	nop		;# 
 11062  003056  5073               	movf	3955,w,c	;volatile
 11063  003058  0012               	return	
 11064  00305A                     __end_of_Read_b_eep:
 11065                           	opt stack 0
 11066                           tblptru	equ	0xFF8
 11067                           tblptrh	equ	0xFF7
 11068                           tblptrl	equ	0xFF6
 11069                           tablat	equ	0xFF5
 11070                           prodh	equ	0xFF4
 11071                           prodl	equ	0xFF3
 11072                           postinc0	equ	0xFEE
 11073                           wreg	equ	0xFE8
 11074                           indf1	equ	0xFE7
 11075                           fsr1h	equ	0xFE2
 11076                           fsr1l	equ	0xFE1
 11077                           indf2	equ	0xFDF
 11078                           postinc2	equ	0xFDE
 11079                           postdec2	equ	0xFDD
 11080                           plusw2	equ	0xFDB
 11081                           fsr2h	equ	0xFDA
 11082                           fsr2l	equ	0xFD9
 11083                           status	equ	0xFD8
 11084                           
 11085 ;; *************** function _vscp_writeNicknamePermanent *****************
 11086 ;; Defined at:
 11087 ;;		line 545 in file "../main.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;  nickname        1    wreg     unsigned char 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  nickname        1   11[COMRAM] unsigned char 
 11092 ;; Return value:  Size  Location     Type
 11093 ;;		None               void
 11094 ;; Registers used:
 11095 ;;		wreg, status,2, status,0, cstack
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11104 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11105 ;;Total ram usage:        1 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    3
 11108 ;; This function calls:
 11109 ;;		_Busy_eep
 11110 ;;		_Write_b_eep
 11111 ;; This function is called by:
 11112 ;;		_vscp_check_pstorage
 11113 ;;		_vscp_handleProbeState
 11114 ;;		_vscp_handleHeartbeat
 11115 ;;		_vscp_handleSetNickname
 11116 ;;		_vscp_handleDropNickname
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           	psect	text65
 11121  0030B4                     __ptext65:
 11122                           	opt stack 0
 11123  0030B4                     _vscp_writeNicknamePermanent:
 11124                           	opt stack 25
 11125                           
 11126                           ;incstack = 0
 11127                           ;incstack = 0
 11128                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11129  0030B4  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11130                           
 11131                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x01,nickname));
 11132  0030B8  ECC0  F018         	call	_Busy_eep	;wreg free
 11133  0030BC  6A09               	clrf	?_Write_b_eep+1,c
 11134  0030BE  0E01               	movlw	1
 11135  0030C0  6E08               	movwf	?_Write_b_eep,c
 11136  0030C2  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 11137  0030C6  EF6C  F016         	goto	_Write_b_eep	;wreg free
 11138  0030CA                     __end_of_vscp_writeNicknamePermanent:
 11139                           	opt stack 0
 11140                           tblptru	equ	0xFF8
 11141                           tblptrh	equ	0xFF7
 11142                           tblptrl	equ	0xFF6
 11143                           tablat	equ	0xFF5
 11144                           prodh	equ	0xFF4
 11145                           prodl	equ	0xFF3
 11146                           postinc0	equ	0xFEE
 11147                           wreg	equ	0xFE8
 11148                           indf1	equ	0xFE7
 11149                           fsr1h	equ	0xFE2
 11150                           fsr1l	equ	0xFE1
 11151                           indf2	equ	0xFDF
 11152                           postinc2	equ	0xFDE
 11153                           postdec2	equ	0xFDD
 11154                           plusw2	equ	0xFDB
 11155                           fsr2h	equ	0xFDA
 11156                           fsr2l	equ	0xFD9
 11157                           status	equ	0xFD8
 11158                           
 11159 ;; *************** function _Write_b_eep *****************
 11160 ;; Defined at:
 11161 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;  badd            2    7[COMRAM] unsigned int 
 11164 ;;  bdat            1    9[COMRAM] unsigned char 
 11165 ;; Auto vars:     Size  Location     Type
 11166 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 11167 ;; Return value:  Size  Location     Type
 11168 ;;		None               void
 11169 ;; Registers used:
 11170 ;;		wreg, status,2, status,0
 11171 ;; Tracked objects:
 11172 ;;		On entry : 0/0
 11173 ;;		On exit  : 0/0
 11174 ;;		Unchanged: 0/0
 11175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11176 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11179 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11180 ;;Total ram usage:        4 bytes
 11181 ;; Hardware stack levels used:    1
 11182 ;; Hardware stack levels required when called:    2
 11183 ;; This function calls:
 11184 ;;		Nothing
 11185 ;; This function is called by:
 11186 ;;		_main
 11187 ;;		_init_app_eeprom
 11188 ;;		_vscp_setGUID
 11189 ;;		_vscp_setManufacturerId
 11190 ;;		_vscp_writeNicknamePermanent
 11191 ;;		_vscp_writeAppReg
 11192 ;;		_vscp_setUserID
 11193 ;;		_vscp_setSegmentCRC
 11194 ;;		_vscp_setControlByte
 11195 ;;		_vscp_goBootloaderMode
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           	psect	text66
 11200  002CD8                     __ptext66:
 11201                           	opt stack 0
 11202  002CD8                     _Write_b_eep:
 11203                           	opt stack 24
 11204                           
 11205                           ;incstack = 0
 11206                           ;incstack = 0
 11207  002CD8  5009               	movf	Write_b_eep@badd+1,w,c
 11208  002CDA  0B03               	andlw	3
 11209  002CDC  6E75               	movwf	3957,c	;volatile
 11210  002CDE  C008  FF74         	movff	Write_b_eep@badd,3956	;volatile
 11211  002CE2  C00A  FF73         	movff	Write_b_eep@bdat,3955	;volatile
 11212  002CE6  9E7F               	bcf	3967,7,c	;volatile
 11213  002CE8  9C7F               	bcf	3967,6,c	;volatile
 11214  002CEA  847F               	bsf	3967,2,c	;volatile
 11215  002CEC  0E00               	movlw	0
 11216  002CEE  BEF2               	btfsc	intcon,7,c	;volatile
 11217  002CF0  0E01               	movlw	1
 11218  002CF2  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 11219  002CF4  9EF2               	bcf	intcon,7,c	;volatile
 11220  002CF6  0E55               	movlw	85
 11221  002CF8  6E7E               	movwf	3966,c	;volatile
 11222  002CFA  0EAA               	movlw	170
 11223  002CFC  6E7E               	movwf	3966,c	;volatile
 11224  002CFE  827F               	bsf	3967,1,c	;volatile
 11225  002D00                     l1119:
 11226  002D00  B27F               	btfsc	3967,1,c	;volatile
 11227  002D02  D7FE               	goto	l1119
 11228  002D04  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 11229  002D06  D002               	bra	u3145
 11230  002D08  9EF2               	bcf	intcon,7,c	;volatile
 11231  002D0A  D001               	bra	u3146
 11232  002D0C                     u3145:
 11233  002D0C  8EF2               	bsf	intcon,7,c	;volatile
 11234  002D0E                     u3146:
 11235  002D0E  947F               	bcf	3967,2,c	;volatile
 11236  002D10  0012               	return	
 11237  002D12                     __end_of_Write_b_eep:
 11238                           	opt stack 0
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           postinc0	equ	0xFEE
 11247                           wreg	equ	0xFE8
 11248                           indf1	equ	0xFE7
 11249                           fsr1h	equ	0xFE2
 11250                           fsr1l	equ	0xFE1
 11251                           indf2	equ	0xFDF
 11252                           postinc2	equ	0xFDE
 11253                           postdec2	equ	0xFDD
 11254                           plusw2	equ	0xFDB
 11255                           fsr2h	equ	0xFDA
 11256                           fsr2l	equ	0xFD9
 11257                           status	equ	0xFD8
 11258                           
 11259 ;; *************** function _Busy_eep *****************
 11260 ;; Defined at:
 11261 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 11262 ;; Parameters:    Size  Location     Type
 11263 ;;		None
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;		None
 11266 ;; Return value:  Size  Location     Type
 11267 ;;		None               void
 11268 ;; Registers used:
 11269 ;;		None
 11270 ;; Tracked objects:
 11271 ;;		On entry : 0/0
 11272 ;;		On exit  : 0/0
 11273 ;;		Unchanged: 0/0
 11274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11279 ;;Total ram usage:        0 bytes
 11280 ;; Hardware stack levels used:    1
 11281 ;; Hardware stack levels required when called:    2
 11282 ;; This function calls:
 11283 ;;		Nothing
 11284 ;; This function is called by:
 11285 ;;		_main
 11286 ;;		_init_app_eeprom
 11287 ;;		_vscp_setGUID
 11288 ;;		_vscp_setManufacturerId
 11289 ;;		_vscp_writeNicknamePermanent
 11290 ;;		_vscp_writeAppReg
 11291 ;;		_vscp_setUserID
 11292 ;;		_vscp_setSegmentCRC
 11293 ;;		_vscp_setControlByte
 11294 ;;		_vscp_goBootloaderMode
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           	psect	text67
 11299  003180                     __ptext67:
 11300                           	opt stack 0
 11301  003180                     _Busy_eep:
 11302                           	opt stack 24
 11303  003180                     l1090:
 11304  003180  A27F               	btfss	3967,1,c	;volatile
 11305  003182  0012               	return	
 11306  003184  D7FD               	goto	l1090
 11307  003186                     __end_of_Busy_eep:
 11308                           	opt stack 0
 11309                           tblptru	equ	0xFF8
 11310                           tblptrh	equ	0xFF7
 11311                           tblptrl	equ	0xFF6
 11312                           tablat	equ	0xFF5
 11313                           prodh	equ	0xFF4
 11314                           prodl	equ	0xFF3
 11315                           intcon	equ	0xFF2
 11316                           postinc0	equ	0xFEE
 11317                           wreg	equ	0xFE8
 11318                           indf1	equ	0xFE7
 11319                           fsr1h	equ	0xFE2
 11320                           fsr1l	equ	0xFE1
 11321                           indf2	equ	0xFDF
 11322                           postinc2	equ	0xFDE
 11323                           postdec2	equ	0xFDD
 11324                           plusw2	equ	0xFDB
 11325                           fsr2h	equ	0xFDA
 11326                           fsr2l	equ	0xFD9
 11327                           status	equ	0xFD8
 11328                           
 11329 ;; *************** function _init *****************
 11330 ;; Defined at:
 11331 ;;		line 302 in file "../main.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;		None
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;		None
 11336 ;; Return value:  Size  Location     Type
 11337 ;;		None               void
 11338 ;; Registers used:
 11339 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 0/0
 11342 ;;		On exit  : E/E
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11349 ;;Total ram usage:        0 bytes
 11350 ;; Hardware stack levels used:    1
 11351 ;; Hardware stack levels required when called:    4
 11352 ;; This function calls:
 11353 ;;		_WriteTimer0
 11354 ;;		_init_app_ram
 11355 ;;		_OpenTimer0
 11356 ;;		_ECANInitialize
 11357 ;; This function is called by:
 11358 ;;		_main
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           	psect	text68
 11363  002D12                     __ptext68:
 11364                           	opt stack 0
 11365  002D12                     _init:
 11366                           	opt stack 26
 11367                           
 11368                           ;main.c: 306: init_app_ram();
 11369                           
 11370                           ;incstack = 0
 11371                           ;incstack = 0
 11372  002D12  EC83  F018         	call	_init_app_ram	;wreg free
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;main.c: 311: ANCON0 = 0;
 11376  002D16  010F               	movlb	15	; () banked
 11377  002D18  6B5D               	clrf	93,b	;volatile
 11378                           
 11379                           ; BSR set to: 15
 11380                           ;main.c: 312: ANCON1 = 0;
 11381  002D1A  6B5C               	clrf	92,b	;volatile
 11382                           
 11383                           ; BSR set to: 15
 11384                           ;main.c: 321: TRISA = 0x00;
 11385  002D1C  6A92               	clrf	3986,c	;volatile
 11386                           
 11387                           ; BSR set to: 15
 11388                           ;main.c: 322: PORTA = 0x00;
 11389  002D1E  6A80               	clrf	3968,c	;volatile
 11390                           
 11391                           ; BSR set to: 15
 11392                           ;main.c: 334: TRISB = 0b00001100;
 11393  002D20  0E0C               	movlw	12
 11394  002D22  6E93               	movwf	3987,c	;volatile
 11395                           
 11396                           ; BSR set to: 15
 11397                           ;main.c: 335: PORTB = 0x00;
 11398  002D24  6A81               	clrf	3969,c	;volatile
 11399                           
 11400                           ; BSR set to: 15
 11401                           ;main.c: 345: TRISC = 0b00000001;
 11402  002D26  0E01               	movlw	1
 11403  002D28  6E94               	movwf	3988,c	;volatile
 11404                           
 11405                           ; BSR set to: 15
 11406                           ;main.c: 346: PORTC = 0x00;
 11407  002D2A  6A82               	clrf	3970,c	;volatile
 11408                           
 11409                           ; BSR set to: 15
 11410                           ;main.c: 372: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11411  002D2C  0E92               	movlw	146
 11412  002D2E  ECF6  F017         	call	_OpenTimer0
 11413                           
 11414                           ; BSR set to: 15
 11415                           ;main.c: 373: WriteTimer0( 0xfb1d );
 11416  002D32  0EFB               	movlw	251
 11417  002D34  6E09               	movwf	?_WriteTimer0+1,c
 11418  002D36  0E1D               	movlw	29
 11419  002D38  6E08               	movwf	?_WriteTimer0,c
 11420  002D3A  EC8C  F018         	call	_WriteTimer0	;wreg free
 11421                           
 11422                           ; BSR set to: 15
 11423                           ;main.c: 376: ECANInitialize();
 11424  002D3E  ECF9  F014         	call	_ECANInitialize	;wreg free
 11425                           
 11426                           ;main.c: 397: INTCONbits.PEIE = 1;
 11427  002D42  8CF2               	bsf	intcon,6,c	;volatile
 11428                           
 11429                           ;main.c: 400: INTCONbits.GIE = 1;
 11430  002D44  8EF2               	bsf	intcon,7,c	;volatile
 11431  002D46  0012               	return	
 11432  002D48                     __end_of_init:
 11433                           	opt stack 0
 11434                           tblptru	equ	0xFF8
 11435                           tblptrh	equ	0xFF7
 11436                           tblptrl	equ	0xFF6
 11437                           tablat	equ	0xFF5
 11438                           prodh	equ	0xFF4
 11439                           prodl	equ	0xFF3
 11440                           intcon	equ	0xFF2
 11441                           postinc0	equ	0xFEE
 11442                           wreg	equ	0xFE8
 11443                           indf1	equ	0xFE7
 11444                           fsr1h	equ	0xFE2
 11445                           fsr1l	equ	0xFE1
 11446                           indf2	equ	0xFDF
 11447                           postinc2	equ	0xFDE
 11448                           postdec2	equ	0xFDD
 11449                           plusw2	equ	0xFDB
 11450                           fsr2h	equ	0xFDA
 11451                           fsr2l	equ	0xFD9
 11452                           status	equ	0xFD8
 11453                           
 11454 ;; *************** function _ECANInitialize *****************
 11455 ;; Defined at:
 11456 ;;		line 168 in file "../ECAN.c"
 11457 ;; Parameters:    Size  Location     Type
 11458 ;;		None
 11459 ;; Auto vars:     Size  Location     Type
 11460 ;;		None
 11461 ;; Return value:  Size  Location     Type
 11462 ;;		None               void
 11463 ;; Registers used:
 11464 ;;		wreg, status,2, status,0, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : F/F
 11467 ;;		On exit  : E/E
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11474 ;;Total ram usage:        0 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    3
 11477 ;; This function calls:
 11478 ;;		_ECANSetOperationMode
 11479 ;; This function is called by:
 11480 ;;		_init
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           	psect	text69
 11485  0029F2                     __ptext69:
 11486                           	opt stack 0
 11487  0029F2                     _ECANInitialize:
 11488                           	opt stack 26
 11489                           
 11490                           ; BSR set to: 15
 11491                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11492                           
 11493                           ;incstack = 0
 11494                           ;incstack = 0
 11495  0029F2  0E80               	movlw	128
 11496  0029F4  EC2D  F018         	call	_ECANSetOperationMode
 11497                           
 11498                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11499  0029F8  0E09               	movlw	9
 11500  0029FA  010E               	movlb	14	; () banked
 11501  0029FC  6F43               	movwf	67,b	;volatile
 11502                           
 11503                           ; BSR set to: 14
 11504                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11505  0029FE  0EFC               	movlw	252
 11506  002A00  6F44               	movwf	68,b	;volatile
 11507                           
 11508                           ; BSR set to: 14
 11509                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11510                           ;ECAN.c: 181: (0 << 6) |
 11511                           ;ECAN.c: 182: (2-1);
 11512  002A02  0E01               	movlw	1
 11513  002A04  6F45               	movwf	69,b	;volatile
 11514                           
 11515                           ; BSR set to: 14
 11516                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11517  002A06  0E20               	movlw	32
 11518  002A08  6E70               	movwf	3952,c	;volatile
 11519                           
 11520                           ; BSR set to: 14
 11521                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11522  002A0A  8E72               	bsf	3954,7,c	;volatile
 11523                           
 11524                           ; BSR set to: 14
 11525                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11526  002A0C  9C72               	bcf	3954,6,c	;volatile
 11527                           
 11528                           ; BSR set to: 14
 11529                           ;ECAN.c: 205: RXB0CON = 0;
 11530  002A0E  6A60               	clrf	3936,c	;volatile
 11531                           
 11532                           ; BSR set to: 14
 11533                           ;ECAN.c: 211: RXB1CON = 0;
 11534  002A10  010F               	movlb	15	; () banked
 11535  002A12  6B30               	clrf	48,b	;volatile
 11536                           
 11537                           ; BSR set to: 15
 11538                           ;ECAN.c: 221: B0CON = 0;
 11539  002A14  010E               	movlb	14	; () banked
 11540  002A16  6B80               	clrf	128,b	;volatile
 11541                           
 11542                           ; BSR set to: 14
 11543                           ;ECAN.c: 231: B1CON = 0;
 11544  002A18  6B90               	clrf	144,b	;volatile
 11545                           
 11546                           ; BSR set to: 14
 11547                           ;ECAN.c: 241: B2CON = 0;
 11548  002A1A  6BA0               	clrf	160,b	;volatile
 11549                           
 11550                           ; BSR set to: 14
 11551                           ;ECAN.c: 254: B3CON = 0 << 2;
 11552  002A1C  6BB0               	clrf	176,b	;volatile
 11553                           
 11554                           ; BSR set to: 14
 11555                           ;ECAN.c: 264: B4CON = 0 << 2;
 11556  002A1E  6BC0               	clrf	192,b	;volatile
 11557                           
 11558                           ; BSR set to: 14
 11559                           ;ECAN.c: 274: B5CON = 0 << 2;
 11560  002A20  6BD0               	clrf	208,b	;volatile
 11561                           
 11562                           ; BSR set to: 14
 11563                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11564  002A22  0EE0               	movlw	224
 11565  002A24  6F7D               	movwf	125,b	;volatile
 11566                           
 11567                           ; BSR set to: 14
 11568                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11569  002A26  6BE0               	clrf	224,b	;volatile
 11570                           
 11571                           ; BSR set to: 14
 11572  002A28  0E08               	movlw	8
 11573  002A2A  6FE1               	movwf	225,b	;volatile
 11574                           
 11575                           ; BSR set to: 14
 11576  002A2C  6BE2               	clrf	226,b	;volatile
 11577                           
 11578                           ; BSR set to: 14
 11579  002A2E  6BE3               	clrf	227,b	;volatile
 11580                           
 11581                           ; BSR set to: 14
 11582                           ;ECAN.c: 303: RXF1SIDH = (long)0x00000000L >> 21L;RXF1SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF1EIDH = (long)0x00000000L >> 8L;RXF1E
      +                          IDL = 0x00000000L;;
 11583  002A30  6BE4               	clrf	228,b	;volatile
 11584                           
 11585                           ; BSR set to: 14
 11586  002A32  0E08               	movlw	8
 11587  002A34  6FE5               	movwf	229,b	;volatile
 11588                           
 11589                           ; BSR set to: 14
 11590  002A36  6BE6               	clrf	230,b	;volatile
 11591                           
 11592                           ; BSR set to: 14
 11593  002A38  6BE7               	clrf	231,b	;volatile
 11594                           
 11595                           ; BSR set to: 14
 11596                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11597  002A3A  0E03               	movlw	3
 11598  002A3C  6F46               	movwf	70,b	;volatile
 11599                           
 11600                           ; BSR set to: 14
 11601                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 11602  002A3E  6B47               	clrf	71,b	;volatile
 11603                           
 11604                           ; BSR set to: 14
 11605                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 11606  002A40  6B71               	clrf	113,b	;volatile
 11607                           
 11608                           ; BSR set to: 14
 11609                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 11610  002A42  0E11               	movlw	17
 11611  002A44  6F72               	movwf	114,b	;volatile
 11612                           
 11613                           ; BSR set to: 14
 11614                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 11615  002A46  6F73               	movwf	115,b	;volatile
 11616                           
 11617                           ; BSR set to: 14
 11618                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 11619  002A48  6B74               	clrf	116,b	;volatile
 11620                           
 11621                           ; BSR set to: 14
 11622                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 11623  002A4A  6B75               	clrf	117,b	;volatile
 11624                           
 11625                           ; BSR set to: 14
 11626                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 11627  002A4C  6B76               	clrf	118,b	;volatile
 11628                           
 11629                           ; BSR set to: 14
 11630                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 11631  002A4E  6B77               	clrf	119,b	;volatile
 11632                           
 11633                           ; BSR set to: 14
 11634                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 11635  002A50  6B78               	clrf	120,b	;volatile
 11636                           
 11637                           ; BSR set to: 14
 11638                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 11639  002A52  0E54               	movlw	84
 11640  002A54  6F79               	movwf	121,b	;volatile
 11641                           
 11642                           ; BSR set to: 14
 11643                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 11644  002A56  0E05               	movlw	5
 11645  002A58  6F7A               	movwf	122,b	;volatile
 11646                           
 11647                           ; BSR set to: 14
 11648                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11649  002A5A  6B7B               	clrf	123,b	;volatile
 11650                           
 11651                           ; BSR set to: 14
 11652                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11653  002A5C  6B7B               	clrf	123,b	;volatile
 11654                           
 11655                           ; BSR set to: 14
 11656                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 11657  002A5E  0E0F               	movlw	15
 11658  002A60  6FF8               	movwf	248,b	;volatile
 11659                           
 11660                           ; BSR set to: 14
 11661  002A62  0EE0               	movlw	224
 11662  002A64  6FF9               	movwf	249,b	;volatile
 11663                           
 11664                           ; BSR set to: 14
 11665  002A66  6BFA               	clrf	250,b	;volatile
 11666                           
 11667                           ; BSR set to: 14
 11668  002A68  6BFB               	clrf	251,b	;volatile
 11669                           
 11670                           ; BSR set to: 14
 11671                           ;ECAN.c: 482: RXM0EXIDM = 1;
 11672  002A6A  87F9               	bsf	249,3,b	;volatile
 11673                           
 11674                           ; BSR set to: 14
 11675                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 11676  002A6C  6BFC               	clrf	252,b	;volatile
 11677                           
 11678                           ; BSR set to: 14
 11679  002A6E  6BFD               	clrf	253,b	;volatile
 11680                           
 11681                           ; BSR set to: 14
 11682  002A70  6BFE               	clrf	254,b	;volatile
 11683                           
 11684                           ; BSR set to: 14
 11685  002A72  6BFF               	clrf	255,b	;volatile
 11686                           
 11687                           ; BSR set to: 14
 11688                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 11689  002A74  87FD               	bsf	253,3,b	;volatile
 11690                           
 11691                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 11692  002A76  0E00               	movlw	0
 11693  002A78  EF2D  F018         	goto	_ECANSetOperationMode
 11694  002A7C                     __end_of_ECANInitialize:
 11695                           	opt stack 0
 11696                           tblptru	equ	0xFF8
 11697                           tblptrh	equ	0xFF7
 11698                           tblptrl	equ	0xFF6
 11699                           tablat	equ	0xFF5
 11700                           prodh	equ	0xFF4
 11701                           prodl	equ	0xFF3
 11702                           intcon	equ	0xFF2
 11703                           postinc0	equ	0xFEE
 11704                           wreg	equ	0xFE8
 11705                           indf1	equ	0xFE7
 11706                           fsr1h	equ	0xFE2
 11707                           fsr1l	equ	0xFE1
 11708                           indf2	equ	0xFDF
 11709                           postinc2	equ	0xFDE
 11710                           postdec2	equ	0xFDD
 11711                           plusw2	equ	0xFDB
 11712                           fsr2h	equ	0xFDA
 11713                           fsr2l	equ	0xFD9
 11714                           status	equ	0xFD8
 11715                           
 11716 ;; *************** function _ECANSetOperationMode *****************
 11717 ;; Defined at:
 11718 ;;		line 1012 in file "../ECAN.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;  mode            1    wreg     enum E18989
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;  mode            1    7[COMRAM] enum E18989
 11723 ;; Return value:  Size  Location     Type
 11724 ;;		None               void
 11725 ;; Registers used:
 11726 ;;		wreg, status,2, status,0
 11727 ;; Tracked objects:
 11728 ;;		On entry : E/F
 11729 ;;		On exit  : E/E
 11730 ;;		Unchanged: E/0
 11731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11736 ;;Total ram usage:        1 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    2
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_ECANInitialize
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           	psect	text70
 11747  00305A                     __ptext70:
 11748                           	opt stack 0
 11749  00305A                     _ECANSetOperationMode:
 11750                           	opt stack 26
 11751                           
 11752                           ;incstack = 0
 11753                           ;incstack = 0
 11754                           ;ECANSetOperationMode@mode stored from wreg
 11755  00305A  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 11756                           
 11757                           ;ECAN.c: 1013: CANCON &= 0x1F;
 11758  00305E  0E1F               	movlw	31
 11759  003060  166F               	andwf	3951,f,c	;volatile
 11760                           
 11761                           ;ECAN.c: 1014: CANCON |= mode;
 11762  003062  5008               	movf	ECANSetOperationMode@mode,w,c
 11763  003064  126F               	iorwf	3951,f,c	;volatile
 11764  003066                     l5352:
 11765  003066  506F               	movf	3951,w,c	;volatile
 11766  003068  0BE0               	andlw	224
 11767  00306A  1808               	xorwf	ECANSetOperationMode@mode,w,c
 11768  00306C  B4D8               	btfsc	status,2,c
 11769  00306E  0012               	return	
 11770  003070  D7FA               	goto	l5352
 11771  003072                     __end_of_ECANSetOperationMode:
 11772                           	opt stack 0
 11773                           tblptru	equ	0xFF8
 11774                           tblptrh	equ	0xFF7
 11775                           tblptrl	equ	0xFF6
 11776                           tablat	equ	0xFF5
 11777                           prodh	equ	0xFF4
 11778                           prodl	equ	0xFF3
 11779                           intcon	equ	0xFF2
 11780                           postinc0	equ	0xFEE
 11781                           wreg	equ	0xFE8
 11782                           indf1	equ	0xFE7
 11783                           fsr1h	equ	0xFE2
 11784                           fsr1l	equ	0xFE1
 11785                           indf2	equ	0xFDF
 11786                           postinc2	equ	0xFDE
 11787                           postdec2	equ	0xFDD
 11788                           plusw2	equ	0xFDB
 11789                           fsr2h	equ	0xFDA
 11790                           fsr2l	equ	0xFD9
 11791                           status	equ	0xFD8
 11792                           
 11793 ;; *************** function _OpenTimer0 *****************
 11794 ;; Defined at:
 11795 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 11796 ;; Parameters:    Size  Location     Type
 11797 ;;  config          1    wreg     unsigned char 
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  config          1    7[COMRAM] unsigned char 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;		None               void
 11802 ;; Registers used:
 11803 ;;		wreg, status,2, status,0
 11804 ;; Tracked objects:
 11805 ;;		On entry : F/F
 11806 ;;		On exit  : F/F
 11807 ;;		Unchanged: E/0
 11808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11810 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11813 ;;Total ram usage:        1 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; Hardware stack levels required when called:    2
 11816 ;; This function calls:
 11817 ;;		Nothing
 11818 ;; This function is called by:
 11819 ;;		_init
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           	psect	text71
 11824  002FEC                     __ptext71:
 11825                           	opt stack 0
 11826  002FEC                     _OpenTimer0:
 11827                           	opt stack 27
 11828                           
 11829                           ;incstack = 0
 11830                           ;incstack = 0
 11831                           ;OpenTimer0@config stored from wreg
 11832  002FEC  CFE8 F008          	movff	wreg,OpenTimer0@config
 11833                           
 11834                           ; BSR set to: 15
 11835  002FF0  5008               	movf	OpenTimer0@config,w,c
 11836  002FF2  0B7F               	andlw	127
 11837  002FF4  6ED5               	movwf	4053,c	;volatile
 11838                           
 11839                           ; BSR set to: 15
 11840  002FF6  6AD7               	clrf	4055,c	;volatile
 11841                           
 11842                           ; BSR set to: 15
 11843  002FF8  6AD6               	clrf	4054,c	;volatile
 11844                           
 11845                           ; BSR set to: 15
 11846  002FFA  94F2               	bcf	intcon,2,c	;volatile
 11847                           
 11848                           ; BSR set to: 15
 11849  002FFC  AE08               	btfss	OpenTimer0@config,7,c
 11850  002FFE  D002               	goto	l1135
 11851                           
 11852                           ; BSR set to: 15
 11853  003000  8AF2               	bsf	intcon,5,c	;volatile
 11854  003002  D001               	goto	l1136
 11855  003004                     l1135:
 11856                           
 11857                           ; BSR set to: 15
 11858  003004  9AF2               	bcf	intcon,5,c	;volatile
 11859  003006                     l1136:
 11860                           
 11861                           ; BSR set to: 15
 11862  003006  8ED5               	bsf	4053,7,c	;volatile
 11863                           
 11864                           ; BSR set to: 15
 11865  003008  0012               	return	
 11866  00300A                     __end_of_OpenTimer0:
 11867                           	opt stack 0
 11868                           tblptru	equ	0xFF8
 11869                           tblptrh	equ	0xFF7
 11870                           tblptrl	equ	0xFF6
 11871                           tablat	equ	0xFF5
 11872                           prodh	equ	0xFF4
 11873                           prodl	equ	0xFF3
 11874                           intcon	equ	0xFF2
 11875                           postinc0	equ	0xFEE
 11876                           wreg	equ	0xFE8
 11877                           indf1	equ	0xFE7
 11878                           fsr1h	equ	0xFE2
 11879                           fsr1l	equ	0xFE1
 11880                           indf2	equ	0xFDF
 11881                           postinc2	equ	0xFDE
 11882                           postdec2	equ	0xFDD
 11883                           plusw2	equ	0xFDB
 11884                           fsr2h	equ	0xFDA
 11885                           fsr2l	equ	0xFD9
 11886                           status	equ	0xFD8
 11887                           
 11888 ;; *************** function _init_app_ram *****************
 11889 ;; Defined at:
 11890 ;;		line 410 in file "../main.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;		None
 11893 ;; Auto vars:     Size  Location     Type
 11894 ;;  i               1    0        unsigned char 
 11895 ;; Return value:  Size  Location     Type
 11896 ;;		None               void
 11897 ;; Registers used:
 11898 ;;		None
 11899 ;; Tracked objects:
 11900 ;;		On entry : 0/E
 11901 ;;		On exit  : F/0
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11908 ;;Total ram usage:        0 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    2
 11911 ;; This function calls:
 11912 ;;		Nothing
 11913 ;; This function is called by:
 11914 ;;		_main
 11915 ;;		_init
 11916 ;;		_vscp_restoreDefaults
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           	psect	text72
 11921  003106                     __ptext72:
 11922                           	opt stack 0
 11923  003106                     _init_app_ram:
 11924                           	opt stack 25
 11925                           
 11926                           ;main.c: 411: uint8_t i;
 11927                           ;main.c: 413: measurement_clock = 0;
 11928                           
 11929                           ; BSR set to: 15
 11930                           ;incstack = 0
 11931                           ;incstack = 0
 11932  003106  0100               	movlb	0	; () banked
 11933  003108  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 11934  00310A  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 11935  00310C  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 11936  00310E  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 11937                           
 11938                           ;main.c: 415: seconds = 0;
 11939  003110  6B6A               	clrf	_seconds& (0+255),b
 11940                           
 11941                           ;main.c: 416: minutes = 0;
 11942  003112  6B69               	clrf	_minutes& (0+255),b
 11943                           
 11944                           ;main.c: 417: hours = 0;
 11945  003114  6B68               	clrf	_hours& (0+255),b
 11946                           
 11947                           ; BSR set to: 0
 11948  003116  0012               	return	
 11949  003118                     __end_of_init_app_ram:
 11950                           	opt stack 0
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           postinc0	equ	0xFEE
 11959                           wreg	equ	0xFE8
 11960                           indf1	equ	0xFE7
 11961                           fsr1h	equ	0xFE2
 11962                           fsr1l	equ	0xFE1
 11963                           indf2	equ	0xFDF
 11964                           postinc2	equ	0xFDE
 11965                           postdec2	equ	0xFDD
 11966                           plusw2	equ	0xFDB
 11967                           fsr2h	equ	0xFDA
 11968                           fsr2l	equ	0xFD9
 11969                           status	equ	0xFD8
 11970                           
 11971 ;; *************** function _WriteTimer0 *****************
 11972 ;; Defined at:
 11973 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11974 ;; Parameters:    Size  Location     Type
 11975 ;;  timer0          2    7[COMRAM] unsigned int 
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  timer           2    9[COMRAM] struct Timers
 11978 ;; Return value:  Size  Location     Type
 11979 ;;		None               void
 11980 ;; Registers used:
 11981 ;;		None
 11982 ;; Tracked objects:
 11983 ;;		On entry : F/F
 11984 ;;		On exit  : F/F
 11985 ;;		Unchanged: E/0
 11986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11990 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11991 ;;Total ram usage:        4 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    2
 11994 ;; This function calls:
 11995 ;;		Nothing
 11996 ;; This function is called by:
 11997 ;;		_init
 11998 ;; This function uses a non-reentrant model
 11999 ;;
 12000                           
 12001                           	psect	text73
 12002  003118                     __ptext73:
 12003                           	opt stack 0
 12004  003118                     _WriteTimer0:
 12005                           	opt stack 27
 12006                           
 12007                           ; BSR set to: 15
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;incstack = 0
 12011                           ;incstack = 0
 12012  003118  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 12013  00311C  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 12014  003120  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 12015  003124  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 12016                           
 12017                           ; BSR set to: 15
 12018  003128  0012               	return	
 12019  00312A                     __end_of_WriteTimer0:
 12020                           	opt stack 0
 12021                           tblptru	equ	0xFF8
 12022                           tblptrh	equ	0xFF7
 12023                           tblptrl	equ	0xFF6
 12024                           tablat	equ	0xFF5
 12025                           prodh	equ	0xFF4
 12026                           prodl	equ	0xFF3
 12027                           intcon	equ	0xFF2
 12028                           postinc0	equ	0xFEE
 12029                           wreg	equ	0xFE8
 12030                           indf1	equ	0xFE7
 12031                           fsr1h	equ	0xFE2
 12032                           fsr1l	equ	0xFE1
 12033                           indf2	equ	0xFDF
 12034                           postinc2	equ	0xFDE
 12035                           postdec2	equ	0xFDD
 12036                           plusw2	equ	0xFDB
 12037                           fsr2h	equ	0xFDA
 12038                           fsr2l	equ	0xFD9
 12039                           status	equ	0xFD8
 12040                           
 12041 ;; *************** function _readControlReg *****************
 12042 ;; Defined at:
 12043 ;;		line 751 in file "../main.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;  ctrlreg         1    wreg     unsigned char 
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 12048 ;;  rv              1   15[COMRAM] unsigned char 
 12049 ;; Return value:  Size  Location     Type
 12050 ;;                  1    wreg      unsigned char 
 12051 ;; Registers used:
 12052 ;;		wreg, status,2, status,0, prodl, prodh
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12060 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12061 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12062 ;;Total ram usage:        9 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    2
 12065 ;; This function calls:
 12066 ;;		Nothing
 12067 ;; This function is called by:
 12068 ;;		_vscp_readAppReg
 12069 ;;		_writeControlReg
 12070 ;; This function uses a non-reentrant model
 12071 ;;
 12072                           
 12073                           	psect	text74
 12074  0024A6                     __ptext74:
 12075                           	opt stack 0
 12076  0024A6                     _readControlReg:
 12077                           	opt stack 24
 12078                           
 12079                           ; BSR set to: 15
 12080                           ;incstack = 0
 12081                           ;incstack = 0
 12082                           ;readControlReg@ctrlreg stored from wreg
 12083  0024A6  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 12084                           
 12085                           ;main.c: 752: uint8_t rv = 0;
 12086  0024AA  6A10               	clrf	readControlReg@rv,c
 12087                           
 12088                           ;main.c: 754: switch ( ctrlreg ) {
 12089  0024AC  D060               	goto	l4826
 12090  0024AE                     l4818:
 12091                           
 12092                           ;main.c: 757: rv = ( PORTCbits.RC7 << 0 ) +
 12093                           ;main.c: 758: ( PORTCbits.RC6 << 1 ) +
 12094                           ;main.c: 759: ( PORTCbits.RC3 << 2 ) +
 12095                           ;main.c: 760: ( PORTCbits.RC4 << 3 ) +
 12096                           ;main.c: 761: ( PORTCbits.RC5 << 4 ) +
 12097                           ;main.c: 762: ( PORTAbits.RA0 << 5 ) +
 12098                           ;main.c: 763: ( PORTAbits.RA1 << 6 ) +
 12099                           ;main.c: 764: ( PORTAbits.RA2 << 7 );
 12100  0024AE  3482               	rlcf	3970,w,c	;volatile
 12101  0024B0  36E8               	rlcf	wreg,f,c
 12102  0024B2  0B01               	andlw	1
 12103  0024B4  6E08               	movwf	??_readControlReg& (0+255),c
 12104  0024B6  3882               	swapf	3970,w,c	;volatile
 12105  0024B8  32E8               	rrcf	wreg,f,c
 12106  0024BA  32E8               	rrcf	wreg,f,c
 12107  0024BC  0B01               	andlw	1
 12108  0024BE  0D02               	mullw	2
 12109  0024C0  CFF3 F009          	movff	prodl,??_readControlReg+1
 12110  0024C4  3082               	rrcf	3970,w,c	;volatile
 12111  0024C6  32E8               	rrcf	wreg,f,c
 12112  0024C8  32E8               	rrcf	wreg,f,c
 12113  0024CA  0B01               	andlw	1
 12114  0024CC  0D04               	mullw	4
 12115  0024CE  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12116  0024D2  3882               	swapf	3970,w,c	;volatile
 12117  0024D4  0B01               	andlw	1
 12118  0024D6  0D08               	mullw	8
 12119  0024D8  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12120  0024DC  3882               	swapf	3970,w,c	;volatile
 12121  0024DE  32E8               	rrcf	wreg,f,c
 12122  0024E0  0B01               	andlw	1
 12123  0024E2  0D10               	mullw	16
 12124  0024E4  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12125  0024E8  5080               	movf	3968,w,c	;volatile
 12126  0024EA  0B01               	andlw	1
 12127  0024EC  0D20               	mullw	32
 12128  0024EE  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12129  0024F2  3080               	rrcf	3968,w,c	;volatile
 12130  0024F4  0B01               	andlw	1
 12131  0024F6  0D40               	mullw	64
 12132  0024F8  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12133  0024FC  3080               	rrcf	3968,w,c	;volatile
 12134  0024FE  32E8               	rrcf	wreg,f,c
 12135  002500  0B01               	andlw	1
 12136  002502  0D80               	mullw	128
 12137  002504  50F3               	movf	prodl,w,c
 12138  002506  240E               	addwf	??_readControlReg+6,w,c
 12139  002508  240D               	addwf	??_readControlReg+5,w,c
 12140  00250A  D01F               	goto	L43
 12141  00250C                     l4820:
 12142                           
 12143                           ;main.c: 768: rv = ( PORTAbits.RA3 << 0 ) +
 12144                           ;main.c: 769: ( PORTAbits.RA5 << 1 ) +
 12145                           ;main.c: 772: ( PORTBbits.RB4 << 4 ) +
 12146                           ;main.c: 773: ( PORTCbits.RC2 << 5 ) +
 12147                           ;main.c: 774: ( PORTBbits.RB1 << 6 ) +
 12148                           ;main.c: 775: ( PORTBbits.RB0 << 7 );
 12149  00250C  3080               	rrcf	3968,w,c	;volatile
 12150  00250E  32E8               	rrcf	wreg,f,c
 12151  002510  32E8               	rrcf	wreg,f,c
 12152  002512  0B01               	andlw	1
 12153  002514  6E08               	movwf	??_readControlReg& (0+255),c
 12154  002516  3880               	swapf	3968,w,c	;volatile
 12155  002518  32E8               	rrcf	wreg,f,c
 12156  00251A  0B01               	andlw	1
 12157  00251C  0D02               	mullw	2
 12158  00251E  CFF3 F009          	movff	prodl,??_readControlReg+1
 12159  002522  3881               	swapf	3969,w,c	;volatile
 12160  002524  0B01               	andlw	1
 12161  002526  0D10               	mullw	16
 12162  002528  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12163  00252C  3082               	rrcf	3970,w,c	;volatile
 12164  00252E  32E8               	rrcf	wreg,f,c
 12165  002530  0B01               	andlw	1
 12166  002532  0D20               	mullw	32
 12167  002534  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12168  002538  3081               	rrcf	3969,w,c	;volatile
 12169  00253A  0B01               	andlw	1
 12170  00253C  0D40               	mullw	64
 12171  00253E  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12172  002542  5081               	movf	3969,w,c	;volatile
 12173  002544  0B01               	andlw	1
 12174  002546  0D80               	mullw	128
 12175  002548  50F3               	movf	prodl,w,c
 12176  00254A                     L43:
 12177  00254A  240C               	addwf	??_readControlReg+4,w,c
 12178  00254C  240B               	addwf	??_readControlReg+3,w,c
 12179  00254E  240A               	addwf	??_readControlReg+2,w,c
 12180  002550  2409               	addwf	??_readControlReg+1,w,c
 12181  002552  D00A               	goto	L44
 12182  002554                     l4822:
 12183                           
 12184                           ;main.c: 779: rv = ( PORTBbits.RB6 << 0 ) +
 12185                           ;main.c: 780: ( PORTBbits.RB5 << 1 );
 12186  002554  3881               	swapf	3969,w,c	;volatile
 12187  002556  32E8               	rrcf	wreg,f,c
 12188  002558  32E8               	rrcf	wreg,f,c
 12189  00255A  0B01               	andlw	1
 12190  00255C  6E08               	movwf	??_readControlReg& (0+255),c
 12191  00255E  3881               	swapf	3969,w,c	;volatile
 12192  002560  32E8               	rrcf	wreg,f,c
 12193  002562  0B01               	andlw	1
 12194  002564  0D02               	mullw	2
 12195  002566  50F3               	movf	prodl,w,c
 12196  002568                     L44:
 12197  002568  2408               	addwf	??_readControlReg,w,c
 12198  00256A  6E10               	movwf	readControlReg@rv,c
 12199                           
 12200                           ;main.c: 781: break;
 12201  00256C  D006               	goto	l4828
 12202  00256E                     l4826:
 12203  00256E  500F               	movf	readControlReg@ctrlreg,w,c
 12204                           
 12205                           ; Switch size 1, requested type "speed"
 12206                           ; Number of cases is 3, Range of values is 0 to 2
 12207                           ; switch strategies available:
 12208                           ; Name         Instructions Cycles
 12209                           ; simple_byte           10     6 (average)
 12210                           ;	Chosen strategy is simple_byte
 12211  002570  E09E               	bz	l4818
 12212  002572  0A01               	xorlw	1	; case 1
 12213  002574  E0CB               	bz	l4820
 12214  002576  0A03               	xorlw	3	; case 2
 12215  002578  E0ED               	bz	l4822
 12216  00257A                     l4828:
 12217                           
 12218                           ;main.c: 784: return rv;
 12219  00257A  5010               	movf	readControlReg@rv,w,c
 12220  00257C  0012               	return	
 12221  00257E                     __end_of_readControlReg:
 12222                           	opt stack 0
 12223                           tblptru	equ	0xFF8
 12224                           tblptrh	equ	0xFF7
 12225                           tblptrl	equ	0xFF6
 12226                           tablat	equ	0xFF5
 12227                           prodh	equ	0xFF4
 12228                           prodl	equ	0xFF3
 12229                           intcon	equ	0xFF2
 12230                           postinc0	equ	0xFEE
 12231                           wreg	equ	0xFE8
 12232                           indf1	equ	0xFE7
 12233                           fsr1h	equ	0xFE2
 12234                           fsr1l	equ	0xFE1
 12235                           indf2	equ	0xFDF
 12236                           postinc2	equ	0xFDE
 12237                           postdec2	equ	0xFDD
 12238                           plusw2	equ	0xFDB
 12239                           fsr2h	equ	0xFDA
 12240                           fsr2l	equ	0xFD9
 12241                           status	equ	0xFD8
 12242                           
 12243 ;; *************** function _vscp_readAppReg *****************
 12244 ;; Defined at:
 12245 ;;		line 586 in file "../main.c"
 12246 ;; Parameters:    Size  Location     Type
 12247 ;;  reg             1    wreg     unsigned char 
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;  reg             1   17[COMRAM] unsigned char 
 12250 ;;  rv              1   16[COMRAM] unsigned char 
 12251 ;; Return value:  Size  Location     Type
 12252 ;;                  1    wreg      unsigned char 
 12253 ;; Registers used:
 12254 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12255 ;; Tracked objects:
 12256 ;;		On entry : F/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12261 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12264 ;;Total ram usage:        2 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; Hardware stack levels required when called:    3
 12267 ;; This function calls:
 12268 ;;		_Read_b_eep
 12269 ;;		_readControlReg
 12270 ;; This function is called by:
 12271 ;;		_vscp_readRegister
 12272 ;;		_vscp_handleProtocolEvent
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text75
 12277  002956                     __ptext75:
 12278                           	opt stack 0
 12279  002956                     _vscp_readAppReg:
 12280                           	opt stack 25
 12281                           
 12282                           ;incstack = 0
 12283                           ;incstack = 0
 12284                           ;vscp_readAppReg@reg stored from wreg
 12285  002956  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12286                           
 12287                           ; BSR set to: 0
 12288                           ;main.c: 587: uint8_t rv;
 12289                           ;main.c: 589: rv = 0x00;
 12290  00295A  6A11               	clrf	vscp_readAppReg@rv,c
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;main.c: 592: if ( 0 == vscp_page_select ) {
 12294  00295C  5053               	movf	_vscp_page_select+1,w,c
 12295  00295E  1052               	iorwf	_vscp_page_select,w,c
 12296  002960  E137               	bnz	l6526
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;main.c: 594: if ( reg == 0x00 ) {
 12300  002962  6612               	tstfsz	vscp_readAppReg@reg,c
 12301  002964  D006               	goto	l6502
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;main.c: 595: rv = Read_b_eep(0x21 + 0);
 12305  002966  6A09               	clrf	?_Read_b_eep+1,c
 12306  002968  0E21               	movlw	33
 12307  00296A  6E08               	movwf	?_Read_b_eep,c
 12308  00296C  EC21  F018         	call	_Read_b_eep	;wreg free
 12309  002970  D03D               	goto	L45
 12310  002972                     l6502:
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;main.c: 598: else if ( reg == 0x01 ) {
 12314  002972  0412               	decf	vscp_readAppReg@reg,w,c
 12315  002974  E106               	bnz	l6506
 12316                           
 12317                           ; BSR set to: 0
 12318                           ;main.c: 599: rv = Read_b_eep(0x21 + 1);
 12319  002976  6A09               	clrf	?_Read_b_eep+1,c
 12320  002978  0E22               	movlw	34
 12321  00297A  6E08               	movwf	?_Read_b_eep,c
 12322  00297C  EC21  F018         	call	_Read_b_eep	;wreg free
 12323  002980  D035               	goto	L45
 12324  002982                     l6506:
 12325                           
 12326                           ; BSR set to: 0
 12327                           ;main.c: 602: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12328  002982  0E04               	movlw	4
 12329  002984  6412               	cpfsgt	vscp_readAppReg@reg,c
 12330  002986  D00C               	goto	l6512
 12331                           
 12332                           ; BSR set to: 0
 12333  002988  0E17               	movlw	23
 12334  00298A  6012               	cpfslt	vscp_readAppReg@reg,c
 12335  00298C  D009               	goto	l6512
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;main.c: 603: rv = Read_b_eep(0x21 + 5 + ( reg - 5 ));
 12339  00298E  0E21               	movlw	33
 12340  002990  2412               	addwf	vscp_readAppReg@reg,w,c
 12341  002992  6E08               	movwf	?_Read_b_eep,c
 12342  002994  6A09               	clrf	?_Read_b_eep+1,c
 12343  002996  0E00               	movlw	0
 12344  002998  2209               	addwfc	?_Read_b_eep+1,f,c
 12345  00299A  EC21  F018         	call	_Read_b_eep	;wreg free
 12346  00299E  D026               	goto	L45
 12347  0029A0                     l6512:
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;main.c: 607: else if ( reg == 2 ) {
 12351  0029A0  5012               	movf	vscp_readAppReg@reg,w,c
 12352  0029A2  0A02               	xorlw	2
 12353  0029A4  E104               	bnz	l6516
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;main.c: 608: rv = readControlReg( 0 );
 12357  0029A6  0E00               	movlw	0
 12358  0029A8  EC53  F012         	call	_readControlReg
 12359  0029AC  D01F               	goto	L45
 12360  0029AE                     l6516:
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;main.c: 611: else if ( reg == 3 ) {
 12364  0029AE  5012               	movf	vscp_readAppReg@reg,w,c
 12365  0029B0  0A03               	xorlw	3
 12366  0029B2  E104               	bnz	l6520
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;main.c: 612: rv = readControlReg( 1 );
 12370  0029B4  0E01               	movlw	1
 12371  0029B6  EC53  F012         	call	_readControlReg
 12372  0029BA  D018               	goto	L45
 12373  0029BC                     l6520:
 12374                           
 12375                           ; BSR set to: 0
 12376                           ;main.c: 615: else if ( reg == 4 ) {
 12377  0029BC  5012               	movf	vscp_readAppReg@reg,w,c
 12378  0029BE  0A04               	xorlw	4
 12379  0029C0  E116               	bnz	l6532
 12380                           
 12381                           ; BSR set to: 0
 12382                           ;main.c: 616: rv = readControlReg( 2 );
 12383  0029C2  0E02               	movlw	2
 12384  0029C4  EC53  F012         	call	_readControlReg
 12385  0029C8  6E11               	movwf	vscp_readAppReg@rv,c
 12386                           
 12387                           ;main.c: 617: rv &= 0x03;
 12388  0029CA  0E03               	movlw	3
 12389  0029CC  1611               	andwf	vscp_readAppReg@rv,f,c
 12390  0029CE  D00F               	goto	l6532
 12391  0029D0                     l6526:
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;main.c: 621: else if ( 1 == vscp_page_select ) {
 12395  0029D0  0452               	decf	_vscp_page_select,w,c
 12396  0029D2  1053               	iorwf	_vscp_page_select+1,w,c
 12397  0029D4  E10C               	bnz	l6532
 12398                           
 12399                           ; BSR set to: 0
 12400                           ;main.c: 624: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12401                           ;main.c: 625: ( 8 * 8 ) ) ) ) {
 12402  0029D6  0E41               	movlw	65
 12403  0029D8  6012               	cpfslt	vscp_readAppReg@reg,c
 12404  0029DA  D009               	goto	l6532
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;main.c: 626: rv = Read_b_eep(0x21 + 23 + ( reg - 0 ));
 12408  0029DC  0E38               	movlw	56
 12409  0029DE  2412               	addwf	vscp_readAppReg@reg,w,c
 12410  0029E0  6E08               	movwf	?_Read_b_eep,c
 12411  0029E2  6A09               	clrf	?_Read_b_eep+1,c
 12412  0029E4  0E00               	movlw	0
 12413  0029E6  2209               	addwfc	?_Read_b_eep+1,f,c
 12414  0029E8  EC21  F018         	call	_Read_b_eep	;wreg free
 12415  0029EC                     L45:
 12416  0029EC  6E11               	movwf	vscp_readAppReg@rv,c
 12417  0029EE                     l6532:
 12418                           
 12419                           ;main.c: 628: }
 12420                           ;main.c: 630: }
 12421                           ;main.c: 632: return rv;
 12422  0029EE  5011               	movf	vscp_readAppReg@rv,w,c
 12423  0029F0  0012               	return	
 12424  0029F2                     __end_of_vscp_readAppReg:
 12425                           	opt stack 0
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           postinc0	equ	0xFEE
 12434                           wreg	equ	0xFE8
 12435                           indf1	equ	0xFE7
 12436                           fsr1h	equ	0xFE2
 12437                           fsr1l	equ	0xFE1
 12438                           indf2	equ	0xFDF
 12439                           postinc2	equ	0xFDE
 12440                           postdec2	equ	0xFDD
 12441                           plusw2	equ	0xFDB
 12442                           fsr2h	equ	0xFDA
 12443                           fsr2l	equ	0xFD9
 12444                           status	equ	0xFD8
 12445                           
 12446 ;; *************** function _interrupt_at_low_vector *****************
 12447 ;; Defined at:
 12448 ;;		line 111 in file "../main.c"
 12449 ;; Parameters:    Size  Location     Type
 12450 ;;		None
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;		None
 12453 ;; Return value:  Size  Location     Type
 12454 ;;		None               void
 12455 ;; Registers used:
 12456 ;;		wreg, status,2, status,0, cstack
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12464 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12465 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12466 ;;Total ram usage:        3 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    1
 12469 ;; This function calls:
 12470 ;;		i1_WriteTimer0
 12471 ;; This function is called by:
 12472 ;;		Interrupt level 1
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           	psect	intcodelo
 12477  000818                     __pintcodelo:
 12478                           	opt stack 0
 12479  000818                     _interrupt_at_low_vector:
 12480                           	opt stack 22
 12481                           
 12482                           ;incstack = 0
 12483  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12484  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12485  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12486  000824                     
 12487                           ;main.c: 113: if ( INTCONbits.TMR0IF ) {
 12488  000824  A4F2               	btfss	intcon,2,c	;volatile
 12489  000826  D001               	goto	i1u552_21
 12490  000828  D001               	goto	i1u552_20
 12491  00082A                     i1u552_21:
 12492  00082A  D03E               	goto	i1l143
 12493  00082C                     i1u552_20:
 12494  00082C                     
 12495                           ;main.c: 116: WriteTimer0(0xfb1d);
 12496  00082C  0EFB               	movlw	251
 12497  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 12498  000830  0E1D               	movlw	29
 12499  000832  6E01               	movwf	?i1_WriteTimer0,c
 12500  000834  EC95  F018         	call	i1_WriteTimer0	;wreg free
 12501  000838                     
 12502                           ;main.c: 118: vscp_timer++;
 12503  000838  0100               	movlb	0	; () banked
 12504  00083A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12505  00083C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12506  00083E                     
 12507                           ; BSR set to: 0
 12508                           ;main.c: 119: vscp_configtimer++;
 12509  00083E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12510  000840  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12511  000842                     
 12512                           ; BSR set to: 0
 12513                           ;main.c: 120: measurement_clock++;
 12514  000842  0E01               	movlw	1
 12515  000844  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12516  000846  0E00               	movlw	0
 12517  000848  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12518  00084A  0E00               	movlw	0
 12519  00084C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12520  00084E  0E00               	movlw	0
 12521  000850  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12522  000852                     
 12523                           ; BSR set to: 0
 12524                           ;main.c: 123: if ( PORTCbits.RC0 ) {
 12525  000852  A082               	btfss	3970,0,c	;volatile
 12526  000854  D001               	goto	i1u553_21
 12527  000856  D001               	goto	i1u553_20
 12528  000858                     i1u553_21:
 12529  000858  D002               	goto	i1l5708
 12530  00085A                     i1u553_20:
 12531  00085A                     
 12532                           ; BSR set to: 0
 12533                           ;main.c: 124: vscp_initbtncnt = 0;
 12534  00085A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12535                           
 12536                           ;main.c: 125: } else {
 12537  00085C  D001               	goto	i1l135
 12538  00085E                     i1l5708:
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;main.c: 127: vscp_initbtncnt++;
 12542  00085E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12543  000860                     i1l135:
 12544                           
 12545                           ; BSR set to: 0
 12546                           ;main.c: 128: }
 12547                           ;main.c: 131: vscp_statuscnt++;
 12548  000860  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 12549  000862                     
 12550                           ; BSR set to: 0
 12551                           ;main.c: 132: if ( ( 0x02 == vscp_initledfunc ) &&
 12552                           ;main.c: 133: ( vscp_statuscnt > 100 ) ) {
 12553  000862  5056               	movf	_vscp_initledfunc,w,c
 12554  000864  0A02               	xorlw	2
 12555  000866  A4D8               	btfss	status,2,c
 12556  000868  D001               	goto	i1u554_21
 12557  00086A  D001               	goto	i1u554_20
 12558  00086C                     i1u554_21:
 12559  00086C  D00E               	goto	i1l5718
 12560  00086E                     i1u554_20:
 12561  00086E                     
 12562                           ; BSR set to: 0
 12563  00086E  0E64               	movlw	100
 12564  000870  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 12565  000872  D001               	goto	i1u555_21
 12566  000874  D001               	goto	i1u555_20
 12567  000876                     i1u555_21:
 12568  000876  D009               	goto	i1l5718
 12569  000878                     i1u555_20:
 12570  000878                     
 12571                           ; BSR set to: 0
 12572                           ;main.c: 135: if ( PORTCbits.RC1 ) {
 12573  000878  A282               	btfss	3970,1,c	;volatile
 12574  00087A  D001               	goto	i1u556_21
 12575  00087C  D001               	goto	i1u556_20
 12576  00087E                     i1u556_21:
 12577  00087E  D002               	goto	i1l137
 12578  000880                     i1u556_20:
 12579  000880                     
 12580                           ; BSR set to: 0
 12581                           ;main.c: 136: PORTCbits.RC1 = 0;
 12582  000880  9282               	bcf	3970,1,c	;volatile
 12583                           
 12584                           ;main.c: 137: }
 12585  000882  D001               	goto	i1l138
 12586  000884                     i1l137:
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;main.c: 138: else {
 12590                           ;main.c: 139: PORTCbits.RC1 = 1;
 12591  000884  8282               	bsf	3970,1,c	;volatile
 12592  000886                     i1l138:
 12593                           
 12594                           ; BSR set to: 0
 12595                           ;main.c: 140: }
 12596                           ;main.c: 142: vscp_statuscnt = 0;
 12597  000886  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12598                           
 12599                           ;main.c: 144: }
 12600  000888  D00E               	goto	i1l139
 12601  00088A                     i1l5718:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;main.c: 145: else if (0x01 == vscp_initledfunc) {
 12605  00088A  0456               	decf	_vscp_initledfunc,w,c
 12606  00088C  A4D8               	btfss	status,2,c
 12607  00088E  D001               	goto	i1u557_21
 12608  000890  D001               	goto	i1u557_20
 12609  000892                     i1u557_21:
 12610  000892  D003               	goto	i1l140
 12611  000894                     i1u557_20:
 12612  000894                     
 12613                           ; BSR set to: 0
 12614                           ;main.c: 146: PORTCbits.RC1 = 1;
 12615  000894  8282               	bsf	3970,1,c	;volatile
 12616                           
 12617                           ;main.c: 147: vscp_statuscnt = 0;
 12618  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12619                           
 12620                           ;main.c: 148: }
 12621  000898  D006               	goto	i1l139
 12622  00089A                     i1l140:
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;main.c: 149: else if (0x00 == vscp_initledfunc) {
 12626  00089A  6656               	tstfsz	_vscp_initledfunc,c
 12627  00089C  D001               	goto	i1u558_21
 12628  00089E  D001               	goto	i1u558_20
 12629  0008A0                     i1u558_21:
 12630  0008A0  D002               	goto	i1l139
 12631  0008A2                     i1u558_20:
 12632  0008A2                     
 12633                           ; BSR set to: 0
 12634                           ;main.c: 150: PORTCbits.RC1 = 0;
 12635  0008A2  9282               	bcf	3970,1,c	;volatile
 12636                           
 12637                           ;main.c: 151: vscp_statuscnt = 0;
 12638  0008A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12639  0008A6                     i1l139:
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;main.c: 152: }
 12643                           ;main.c: 154: INTCONbits.TMR0IF = 0;
 12644  0008A6  94F2               	bcf	intcon,2,c	;volatile
 12645  0008A8                     i1l143:
 12646  0008A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 12647  0008AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 12648  0008B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 12649  0008B4  0010               	retfie	
 12650  0008B6                     __end_of_interrupt_at_low_vector:
 12651                           	opt stack 0
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           postinc0	equ	0xFEE
 12660                           wreg	equ	0xFE8
 12661                           indf1	equ	0xFE7
 12662                           fsr1h	equ	0xFE2
 12663                           fsr1l	equ	0xFE1
 12664                           bsr	equ	0xFE0
 12665                           indf2	equ	0xFDF
 12666                           postinc2	equ	0xFDE
 12667                           postdec2	equ	0xFDD
 12668                           plusw2	equ	0xFDB
 12669                           fsr2h	equ	0xFDA
 12670                           fsr2l	equ	0xFD9
 12671                           status	equ	0xFD8
 12672                           
 12673 ;; *************** function i1_WriteTimer0 *****************
 12674 ;; Defined at:
 12675 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12676 ;; Parameters:    Size  Location     Type
 12677 ;;  timer0          2    0[COMRAM] unsigned int 
 12678 ;; Auto vars:     Size  Location     Type
 12679 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 12680 ;; Return value:  Size  Location     Type
 12681 ;;		None               void
 12682 ;; Registers used:
 12683 ;;		None
 12684 ;; Tracked objects:
 12685 ;;		On entry : 0/0
 12686 ;;		On exit  : 0/0
 12687 ;;		Unchanged: 0/0
 12688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12692 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12693 ;;Total ram usage:        4 bytes
 12694 ;; Hardware stack levels used:    1
 12695 ;; This function calls:
 12696 ;;		Nothing
 12697 ;; This function is called by:
 12698 ;;		_interrupt_at_low_vector
 12699 ;; This function uses a non-reentrant model
 12700 ;;
 12701                           
 12702                           	psect	text77
 12703  00312A                     __ptext77:
 12704                           	opt stack 0
 12705  00312A                     i1_WriteTimer0:
 12706                           	opt stack 22
 12707                           
 12708                           ;incstack = 0
 12709                           ;incstack = 0
 12710  00312A  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 12711  00312E  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 12712  003132  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 12713  003136  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 12714  00313A  0012               	return	
 12715  00313C                     __end_ofi1_WriteTimer0:
 12716                           	opt stack 0
 12717                           tblptru	equ	0xFF8
 12718                           tblptrh	equ	0xFF7
 12719                           tblptrl	equ	0xFF6
 12720                           tablat	equ	0xFF5
 12721                           prodh	equ	0xFF4
 12722                           prodl	equ	0xFF3
 12723                           intcon	equ	0xFF2
 12724                           postinc0	equ	0xFEE
 12725                           wreg	equ	0xFE8
 12726                           indf1	equ	0xFE7
 12727                           fsr1h	equ	0xFE2
 12728                           fsr1l	equ	0xFE1
 12729                           bsr	equ	0xFE0
 12730                           indf2	equ	0xFDF
 12731                           postinc2	equ	0xFDE
 12732                           postdec2	equ	0xFDD
 12733                           plusw2	equ	0xFDB
 12734                           fsr2h	equ	0xFDA
 12735                           fsr2l	equ	0xFD9
 12736                           status	equ	0xFD8
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           postinc0	equ	0xFEE
 12745                           wreg	equ	0xFE8
 12746                           indf1	equ	0xFE7
 12747                           fsr1h	equ	0xFE2
 12748                           fsr1l	equ	0xFE1
 12749                           bsr	equ	0xFE0
 12750                           indf2	equ	0xFDF
 12751                           postinc2	equ	0xFDE
 12752                           postdec2	equ	0xFDD
 12753                           plusw2	equ	0xFDB
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758                           	psect	rparam
 12759  0000                     tblptru	equ	0xFF8
 12760                           tblptrh	equ	0xFF7
 12761                           tblptrl	equ	0xFF6
 12762                           tablat	equ	0xFF5
 12763                           prodh	equ	0xFF4
 12764                           prodl	equ	0xFF3
 12765                           intcon	equ	0xFF2
 12766                           postinc0	equ	0xFEE
 12767                           wreg	equ	0xFE8
 12768                           indf1	equ	0xFE7
 12769                           fsr1h	equ	0xFE2
 12770                           fsr1l	equ	0xFE1
 12771                           bsr	equ	0xFE0
 12772                           indf2	equ	0xFDF
 12773                           postinc2	equ	0xFDE
 12774                           postdec2	equ	0xFDD
 12775                           plusw2	equ	0xFDB
 12776                           fsr2h	equ	0xFDA
 12777                           fsr2l	equ	0xFD9
 12778                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     48      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   44193
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2432
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                15    15      0   12274
                                             22 BANK0     15    15      0
                         _Read_b_eep
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    2536
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   19392
                                             20 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    3440
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1914
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     316
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     316
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1371
                                             20 COMRAM     3     2      1
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _Read_b_eep (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1998
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1427
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     270
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      62
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     224
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     286
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4716
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     398
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      62
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3      90
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     478
                                             16 COMRAM     2     2      0
                         _Read_b_eep
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Read_b_eep
   _writeControlReg
     _Read_b_eep (ARG)
     _readControlReg (ARG)
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
       _readControlReg
     _vscp_writeAppReg
       _Read_b_eep
       _writeControlReg
         _Read_b_eep (ARG)
         _readControlReg (ARG)
       _Busy_eep
       _Write_b_eep
       _vscp_readAppReg (ARG)
         _Read_b_eep
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Read_b_eep
         _writeControlReg
           _Read_b_eep (ARG)
           _readControlReg (ARG)
         _Busy_eep
         _Write_b_eep
         _vscp_readAppReg (ARG)
           _Read_b_eep
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
     ___lbmod
   _doDM
     _Read_b_eep
     _actionSet
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClr
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionSetAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClrAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      60       5       60.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8       6        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Jul 10 15:30:18 2015

                __end_of_vscp_readAppReg 29F2                    __end_of_sendVSCPFrame 2956  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1BAE  
                                    l320 269C                                      l160 2336  
                                    l321 26A0                                      l330 26BC  
                                    l322 26A4                                      l331 26C0  
                                    l323 26A8                                      l315 268C  
                                    l147 22D4                                      l332 26C4  
                                    l324 26AC                                      l156 231C  
                                    l333 26C8                                      l325 26B0  
                                    l317 2690                                      l318 2694  
                                    l350 25D8                                      l342 25BC  
                                    l319 2698                                      l351 25DC  
                                    l328 26B4                                      l360 25F8  
                                    l352 25E0                                      l344 25C0  
                                    l329 26B8                                      l345 25C4  
                     vscp_readStdReg@idx 0019                                      l346 25C8  
                                    l179 279E                                      l355 25E4  
                                    l347 25CC                                      l291 15C4  
                                    l356 25E8                                      l348 25D0  
                                    l357 25EC                                      l349 25D4  
                                    l293 15DE                                      l358 25F0  
                                    l359 25F4                                      l720 2AF0  
                                    l456 2CD0                                      l650 1E22  
                                    l661 1840                                      l671 18FA  
                                    l680 18C8                                      l672 188A  
                                    l648 1E04                                      l682 18D8  
                                    l674 1898                                      l850 289E  
                                    l851 282A                                      l835 2C26  
                                    l692 1968                                      l684 18E8  
                                    l676 18A8                                      l693 198C  
                                    l678 18B8                       vscp_readStdReg@reg 001C  
                                    l858 288C                                      l859 286C  
                                    l893 2DCC                                      l982 24A0  
         __size_of_vscp_handleProbeState 00BA                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2D78            __end_of_vscp_handleProbeState 28A2  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 003A                                      wreg 000FE8  
                   __end_of_actionSetAll 2DA8              ?_doApplicationOneSecondWork 0001  
                                   l1040 126C                                     l1016 10DC  
                                   l1041 1280                                     l1042 12C2  
                                   l1051 12FE                                     l1135 3004  
                                   l1119 2D00                                     l1136 3006  
                                   l1090 3180                                     l5110 2EA8  
                                   l5300 192E                                     l5222 182E  
                                   l5062 2F40                                     l5400 2AD2  
                                   l5232 1858                      vscp_readStdReg@code 0011  
                                   l5340 19EA                                     l7020 2406  
                                   l5414 1F32                                     l5326 19BA  
                                   l5334 19D4                                     l5318 198E  
                                   l5238 186E                                     l5246 1878  
                                   l3902 2746                                     l7030 2428  
                                   l7014 23EA                                     l7102 229A  
                                   l5352 3066                                     l7032 243E  
                                   l7008 23CA                                     l5290 190E  
                                   l5098 2B12                                     l7210 0F78  
                                   l7130 230C                                     l7122 22FA  
                                   l4820 250C                                     l7052 2486  
                                   l7044 2472                                     l7028 2424  
                                   l7132 2310                                     l6502 2972  
                                   l4822 2554                                     l5390 2AA8  
                                   l5382 2A82                                     l7062 24A2  
                                   l7142 2330                                     l7134 2316  
                                   l7126 2302                vscp_getManufacturerId@idx 000A  
                                   l6520 29BC                                     l6512 29A0  
                                   l5392 2AB2                                     l5384 2A8A  
                                   l6600 2282                                     l3928 27A0  
                                   l7304 10A8                                     l7224 0F80  
                                   l7160 237E                                     l6506 2982  
                                   l4818 24AE                                     l4826 256E  
                                   l5394 2ABC                                     l5386 2A94  
                                   l4746 2EF8                                     l4754 2ED4  
                                   l7322 110C                                     l7146 233A  
                                   l6516 29AE                                     l6532 29EE  
                                   l4828 257A                                     l5396 2AC6  
                                   l5388 2A9E                                     l5900 280E  
                                   l3972 1CF0                                     l3980 1D36  
                                   l3964 1BB6                                     l7500 132E  
                                   l7332 116A                                     l7316 10E0  
                                   l7244 0FA6                                     l7172 2392  
                                   l7148 2352                                     l6526 29D0  
                                   l7510 1352                                     l7414 1260  
                                   l7326 1124                                     l7318 10FE  
                                   l7190 0F3C                                     l7182 0F2C  
                                   l6470 2BF0                                     l6624 2954  
                                   l3968 1C6A                                     l7336 1180  
                                   l7352 11B0                                     l7184 0F30  
                                   l7600 14F0                                     l6640 2674  
                                   l6464 2BE6                                     l7176 239A  
                                   l5842 2F60                                     l6722 2CCC  
                                   l5922 2848                                     l3978 1D28  
                                   l6554 21A4                                     l6546 2182  
                                   l7522 137E                                     l7450 12B6  
                                   l7442 12A6                                     l7434 1288  
                                   l7370 1202                                     l7354 11B2  
                                   l7274 100C                                     l7258 0FB2  
                                   l7186 0F34                                     l6474 2BF8  
                                   l6812 2078                                     l5924 284C  
                                   l6900 1A1E                                     l6580 2222  
                                   l6572 21FE                                     l6564 21DA  
                                   l7460 12C4                                     l7364 11D6  
                                   l7356 11BC                                     l7284 1040  
                                   l7188 0F38                                     l6644 267C  
                                   l6636 266C                                     l6742 1D9E  
                                   l6718 2C9E                                     l5918 2844  
                                   l6590 224C                                     l5686 2E4E  
                                   l5678 2E38                                     l7526 1390  
                                   l7446 12AE                                     l7382 1220  
                                   l7294 1074                                     l6670 25FC  
                                   l6662 25A4                                     l6736 1D90  
                                   l6920 1A56                                     l6912 1A3E  
                                   l6904 1A28                                     l7552 13FA  
                                   l7544 13CA                                     l7528 1396  
                                   l7464 12DE                                     l6648 26CC  
                                   l6680 2D84                                     l7616 1560  
                                   l6770 1E24                                     l6754 1DC8  
                                   l5954 2890                                     l6850 2C90  
                                   l6930 1A7C                                     l6666 25AC  
                                   l6658 259C                                     l7650 16D6  
                                   l6764 1E08                                     l5884 27EA  
                                   l6924 1A66                                     l6916 1A4A  
                                   l6908 1A32                                     l7556 1412  
                                   l7548 13E4                                     l6950 1AB6  
                                   l6942 1A9E                                     l6934 1A88  
                                   l7574 146A                                     l7566 143C  
                                   l7486 1306                                     l7398 1240  
                                   l6694 2D54                                     l7662 1784  
                                   l7654 1710                                     l7638 15F8  
                                   l7670 17FC                                     l6776 1E52  
                                   l6784 1E70                                     l6794 1E94  
                                   l5898 2808                                     l6954 1AC2  
                                   l6946 1AAA                                     l6938 1A94  
                                   l7578 148E                                     l7658 174A  
                                   l6796 1E96                                     l6980 1B9A  
                                   l6964 1B24                                     l7668 17BE  
                                   l6974 1B84                                     l6886 3082  
                                   l6984 1BAA                                     l6896 1A14  
                                   l6996 2FA6                                     u3145 2D0C  
                                   u3146 2D0E              __size_of_vscp_getMatrixInfo 0020  
                                   u4440 2B62                           sendCANFrame@id 0037  
                                   u4445 2B58                                     u4615 1836  
                                   u4617 1838                                     u7035 203C  
                                   u7045 2062                                     u7055 208C  
                                   u7350 1B1A                                     u4935 1EE0  
                                   u4945 1F00                                     u4955 1F4E  
                                   u7355 1B10                                     u7380 1B7C  
                                   u7385 1B72                           sendCANFrame@rv 003E  
                                   u6795 28DE                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 1554  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 2286                                     _init 2D12  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 2152                              _vscp_minute 006F  
                            _vscp_second 0074                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08B6  
          __size_of_vscp_doOneSecondWork 0050                            __CFG_FOSC$HS2 000000  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0024  
                          __CFG_MCLRE$ON 000000                         _vscp_writeStdReg 23A0  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 2B6E              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 0026                                    _B0CON 000E80  
                                  _B1CON 000E90                                    ?_doDM 0001  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_SendInformationEvent 0056  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 2FEC            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 312A  
                                  _EEADR 000F74                          __end_of___lbmod 2E56  
                _vscp_handleDropNickname 2DA8                                    _BSEL0 000E7D  
                                  _T0CON 000FD5                                    i1l140 089A  
                                  i1l135 0860                                    i1l143 08A8  
                                  i1l137 0884                                    i1l138 0886  
                                  i1l139 08A6                            __CFG_WDTEN$ON 000000  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                         readControlReg@rv 0010  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 316E               _vscp_readNicknamePermanent 3164  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                             _vscp_getGUID 30F2  
                                  doDM@i 00B4                           Read_b_eep@badd 0008  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 3146  
                     vscp_writeAppReg@rv 0016                                    _hours 0068  
              _vscp_getRegisterPagesUsed 318E                   __size_of_vscp_getEvent 002C  
                           _vscp_setGUID 2EEC                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3194                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 2E7C  
                   _ECANSetOperationMode 305A                          __initialization 2F74  
                           __end_of_doDM 1808                             __end_of_main 23A0  
                           __end_of_init 2D48                        ??_writeControlReg 0012  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 3042  
                _interrupt_at_low_vector 0818                         __end_of_Busy_eep 3186  
                         doDM@class_mask 00AB                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00A6  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0F22                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEADRH 000F75  
                                 _EEDATA 000F73                                   _EECON2 000F7E  
                                 _ANCON0 000F5D                                   _ANCON1 000F5C  
                                 _CIOCON 000F70                            doDM@type_mask 00AE  
                     vscp_writeStdReg@rv 0015                            ?_init_app_ram 0001  
                                 _MDSEL0 007B96                                   _MDSEL1 007B97  
                        __CFG_BBSIZ$BB2K 000000                                   i1l5700 083E  
                                 i1l5710 0862                                   i1l5702 0842  
                                 i1l5720 0894                                   i1l5712 086E  
                                 i1l5704 0852                               _OpenTimer0 2FEC  
                                 i1l5722 08A2                                   i1l5714 0878  
                                 i1l5706 085A                                   i1l5716 0880  
                                 i1l5708 085E                                   i1l5718 088A  
                                 i1l5694 0824                                   i1l5696 082C  
                                 i1l5698 0838                          _init_app_eeprom 271E  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 2E04                   writeControlReg@ctrlreg 0013  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1144 00AD  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 2DD8  
                                 _doWork 318A                         OpenTimer0@config 0008  
                  __size_of_actionClrAll 0030                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@reg 0017  
             __end_of_vscp_setSegmentCRC 30B4                      vscp_writeAppReg@val 0015  
                                 clear_0 2F7A                                   clear_1 2F86  
                  __size_of_actionSetAll 0030                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00BA                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0070                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0008                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                               __accesstop 0060  
                __end_of__initialization 2F8C                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                             _actionClrAll 2D48  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 2F92  
              ??_interrupt_at_low_vector 0005                             _actionSetAll 2D78  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 2F74  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                       __size_of_actionClr 00D0  
                     __size_of_actionSet 00D0                      ?_vscp_writeRegister 0018  
                         ??_sendCANFrame 003E               __end_of_vscp_getFamilyCode 3164  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01F8  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 315A  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0018  
        __size_of_vscp_setManufacturerId 0024                 __end_of_vscp_writeAppReg 2286  
                __size_of_readControlReg 00D8                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 27E8              __end_of_vscp_setControlByte 309E  
               __end_of_vscp_writeStdReg 24A6                       __RegsToCANID@Value 000E  
                          actionClrAll@i 0050                     ??_vscp_writeRegister 0019  
        __end_of_vscp_handleDropNickname 2DD8                             _getVSCPFrame 2AFA  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3192                                ?_Busy_eep 0001  
                  vscp_writeRegister@reg 0019                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                            actionSetAll@i 0050  
        __end_of_vscp_getSubMinorVersion 3196                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007687                         WriteTimer0@timer 000A  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000E43  
                                _BRGCON2 000E44                                  _BRGCON3 000E45  
         SendInformationEvent@eventClass 00A4                      vscp_writeStdReg@reg 0016  
           __end_of_vscp_doOneSecondWork 2C14                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
        __end_of_interrupt_at_low_vector 08B6                 vscp_readStdReg@code_1117 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 27E8  
                                _RXB0CON 000F60                                  _RXB1CON 000F30  
                                _RXB0FUL 007B07                         __ECANPointBuffer 2A7C  
             __end_of_vscp_getMatrixInfo 2F54                                  _TXB0CON 000F20  
                                _TXB1CON 000F10                                  _TXB2CON 000F00  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                     _vscp_goActiveState 2FCE                        __end_of_actionClr 264E  
                      __end_of_actionSet 271E                   __size_of_sendVSCPFrame 00B4  
           __end_of_SendInformationEvent 2BC4             __end_of_vscp_getMajorVersion 319A  
                    __size_of_Read_b_eep 0018                        writeControlReg@rv 0014  
                        _writeControlReg 1BAE                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 30CA                   _vscp_setManufacturerId 2EC8  
                      actionSetAll@param 004F                          _ECANSendMessage 1D3A  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0072               __end_of_vscp_getSegmentCRC 3178  
             ??_vscp_handleProtocolEvent 00A4                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 3190                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 2E2E                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 3118  
                     _vscp_sendHeartBeat 2E56                                  __pcinit 2F74  
                         _vscp_deviceURL 0F00                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 2286  
                                __ptext1 318A                                  __ptext2 318C  
                                __ptext3 2BC4                                  __ptext4 2E56  
                                __ptext5 313C                                  __ptext6 3146  
                                __ptext7 3186                                  __ptext8 1554  
                                __ptext9 2D48                           _vscp_getUserID 30DE  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 0010                      ?_vscp_sendHeartBeat 00A4  
               ??_vscp_handleSetNickname 000D                                  _minutes 0069  
                                _seconds 006A                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 312A                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 2D12                        vscp_readAppReg@rv 0011  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00B1  
                   end_of_initialization 2F8C             __end_of_vscp_handleHeartbeat 2C98  
               __size_of_vscp_getSubzone 000A                     __end_of_sendCANFrame 2CD8  
              vscp_handleProtocolEvent@i 00BE                vscp_handleProtocolEvent@j 00BF  
              vscp_handleProtocolEvent@k 00B8                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 2E7C                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 008A                           _vscp_setUserID 300A  
                                postinc0 000FEE                                  postinc2 000FDE  
                       actionClr@dmflags 0001                   __end_of_vscp_deviceURL 0F20  
    __end_of_vscp_writeNicknamePermanent 30CA              _vscp_writeNicknamePermanent 30B4  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 28A2  
                 __end_of_vscp_getUserID 30F2             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0077CB                        __end_of_vscp_init 2C58  
                         _vscp_probe_cnt 0073                                _PORTAbits 000F80  
                              _PORTBbits 000F81                                _PORTCbits 000F82  
                    __end_of_getCANFrame 2EC8                           _readControlReg 24A6  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 009C                         ___lbmod@dividend 0009  
                __end_of_writeControlReg 1D3A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 01AE                       _vscp_setSegmentCRC 309E  
             vscp_handleProtocolEvent@cb 00B6                  __end_of_ECANSendMessage 1E9E  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00B3  
                   __end_of__RegsToCANID 2002                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 2EA2                               _vscp_error 3186  
                   _vscp_doOneSecondWork 2BC4                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0066                   __end_of_vscp_setUserID 3026  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F                          ?_vscp_getUserID 0001  
                    actionSetAll@dmflags 0001                           __end_of_doWork 318C  
           __end_of_vscp_getMinorVersion 3198                              _WriteTimer0 3118  
                 __end_of_readControlReg 257E                     _SendInformationEvent 2B6E  
                   _vscp_getMajorVersion 3198                              _Write_b_eep 2CD8  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0015  
                    start_initialization 2F74          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 0016                        ?_vscp_writeStdReg 0010  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0011                       _vscp_getFamilyCode 315A  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 3150  
                       doDM@class_filter 00A9                       __end_of_Read_b_eep 305A  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 3072  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00B5  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1554  
                              _doDM$2000 00B1                                _doDM$2001 00B2  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 0012                                _doDM$1998 00AF  
                              _doDM$1999 00B0                 ?_vscp_handleDropNickname 0001  
                      ??_vscp_getSubzone 000A                 __end_of__ECANPointBuffer 2AFA  
                      __CANIDToRegs@type 000E                              _getCANFrame 2EA2  
                               ??_doWork 0008                       _vscp_getBufferSize 3190  
            vscp_handleProtocolEvent@len 00B2              vscp_handleProtocolEvent@pos 00B0  
             __end_of_ECANReceiveMessage 1A00                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001E                    ?_SendInformationEvent 00A4  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 313C  
          __end_of_vscp_goBootloaderMode 2FCE                          ?_readControlReg 0001  
                         actionClr@param 004F                     _vscp_handleHeartbeat 2C58  
                     __end_of_OpenTimer0 300A      __size_of_doApplicationOneSecondWork 0002  
                    ?_vscp_getBufferSize 0001             __size_of_vscp_check_pstorage 0020  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0090  
                       _vscp_alarmstatus 006B                         ?_writeControlReg 0011  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0040  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 001E  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 0011  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3088  
                           _init_app_ram 3106             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                _actionClr 257E  
                              _actionSet 264E                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 2F34                   _vscp_handleSetNickname 2F10  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 0090  
                         _ECANInitialize 29F2                                 ?___lbmod 0008  
                         actionSet@param 004F                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 000A                              __pintcodelo 0818  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1134 00B4  
                vscp_readStdReg@idx_1118 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 2C98                              __smallconst 0F00  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 316E  
                       actionSet@dmflags 0001                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A           __end_of_vscp_getManufacturerId 30DE  
         __end_of_vscp_setManufacturerId 2EEC                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1133 00B3                          doDM@type_filter 00AD  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0064  
        SendInformationEvent@eventTypeId 00A5                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 3196  
                              _sendTimer 0055                               ?_actionClr 004F  
                             ?_actionSet 004F                   __end_of_ECANInitialize 2A7C  
                               i1u552_20 082C                                 i1u552_21 082A  
                               i1u553_20 085A                                 i1u553_21 0858  
                               i1u554_20 086E                                 i1u554_21 086C  
                               i1u555_20 0878                                 i1u555_21 0876  
                               i1u556_20 0880                                 i1u556_21 087E  
                               i1u557_20 0894                                 i1u557_21 0892  
                               i1u558_20 08A2                                 i1u558_21 08A0  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 2E04                                 _RXF0EIDH 000EE2  
                               _RXF0EIDL 000EE3                                 _RXB0OVFL 007B8F  
                               _RXF1EIDH 000EE6                                 _RXF1EIDL 000EE7  
                               _RXB1OVFL 007B8E                                 _RXF0SIDH 000EE0  
                               _RXF0SIDL 000EE1                                 _RXF1SIDH 000EE4  
                               _RXF1SIDL 000EE5                                 _RXM0EIDH 000EFA  
                               _RXM0EIDL 000EFB                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000EFE                                 _RXM1EIDL 000EFF  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000E71  
                               _RXFBCON1 000E72                                 _RXFBCON2 000E73  
                               _RXFBCON3 000E74                                 _RXFBCON4 000E75  
                               _RXFBCON5 000E76                                 _RXFBCON6 000E77  
                               _RXFBCON7 000E78                                 _RXM0SIDH 000EF8  
                               _RXM0SIDL 000EF9                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 2152                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1E9E                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
            __size_of_vscp_goActiveState 001E                       writeControlReg@val 0011  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 2C14  
                              _vscp_imsg 0075                                _vscp_hour 006D  
                              _vscp_omsg 0083                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 0632                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 318E  
             _doApplicationOneSecondWork 318C                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0060  
                               _Busy_eep 3180                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 00CA                      actionClrAll@dmflags 0001  
           __end_of_vscp_restoreDefaults 3180                               _EECON1bits 000F7F  
                          ?_actionClrAll 004F                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                            ?_actionSetAll 004F  
                       ??_vscp_getUserID 000A                          _vscp_getMDF_URL 3026  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                       __CFG_BOREN$SBORDIS 000000  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                           ?_Write_b_eep 0008                               ?_vscp_init 0001  
                               __ptext10 2D78                                 __ptext11 257E  
                               __ptext20 300A                                 __ptext12 264E  
                               __ptext21 2EC8                                 __ptext13 2B6E  
                               __ptext30 3190                                 __ptext22 2EEC  
                               __ptext14 0F22                                 __ptext31 3192  
                               __ptext23 2152                                 __ptext15 2E2E  
                               __ptext40 2DA8                                 __ptext32 30CA  
                               __ptext24 1BAE                                 __ptext16 2F92  
                               __ptext41 2C14                                 __ptext33 30DE  
                               __ptext25 3072                                 __ptext17 23A0  
                               __ptext50 28A2                                 __ptext42 3164  
                               __ptext34 3026                                 __ptext26 1A00  
                               __ptext18 3178                                 __ptext51 2C98  
                               __ptext43 2F10                                 __ptext35 30F2  
                               __ptext27 318E                                 __ptext19 271E  
                               __ptext60 2F54                                 __ptext52 1D3A  
                               __ptext44 2C58                                 __ptext36 3194  
                               __ptext28 3150                                 __ptext61 3088  
                               __ptext53 2002                                 __ptext45 2F34  
                               __ptext37 3196                                 __ptext29 315A  
                               __ptext70 305A                                 __ptext62 309E  
                               __ptext54 2DD8                                 __ptext46 2FB0  
                               __ptext38 3198                                 __ptext71 2FEC  
                               __ptext63 316E                                 __ptext55 2AFA  
                               __ptext47 27E8                                 __ptext39 2E04  
                               __ptext72 3106                                 __ptext64 3042  
                               __ptext56 2EA2                                 __ptext48 2FCE  
                               __ptext73 3118                                 __ptext65 30B4  
                               __ptext57 1808                                 __ptext49 2E7C  
                               __ptext74 24A6                                 __ptext66 2CD8  
                               __ptext58 1E9E                                 __ptext75 2956  
                               __ptext67 3180                                 __ptext59 2A7C  
                               __ptext68 2D12                                 __ptext77 312A  
                               __ptext69 29F2           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00A4                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 313C  
                       ??_vscp_setUserID 000D                            __size_of_doDM 02B4  
                          __size_of_main 011A                            __size_of_init 0036  
                         ??_actionClrAll 0050                              ??_actionClr 0050  
                            ??_actionSet 0050                __size_of_vscp_writeAppReg 0134  
                    _vscp_check_pstorage 2F54                           ??_actionSetAll 0050  
         vscp_handleProtocolEvent@i_1132 00B9           vscp_handleProtocolEvent@i_1135 00BD  
         vscp_handleProtocolEvent@i_1143 00B7                     __end_of_vscp_getGUID 3106  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                         ??_readControlReg 0008  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 3150                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 2F10                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00AF  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000F  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 3088  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 2956  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 006C                          _vscp_readStdReg 1A00  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 2E2E  
                     _ECANReceiveMessage 1808                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 006E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 3042  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0071                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 0150  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3194              _vscp_getBootLoaderAlgorithm 3192  
                  readControlReg@ctrlreg 000F         __size_of_interrupt_at_low_vector 009E  
                      actionClrAll@param 004F                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2FB0             __end_of_ECANSetOperationMode 3072  
                   _vscp_restoreDefaults 3178              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3146  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2FB0                       __end_of_vscp_error 318A  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2F34  
     vscp_handleProtocolEvent@bytes_1139 00BB                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 2002                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00AB  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
