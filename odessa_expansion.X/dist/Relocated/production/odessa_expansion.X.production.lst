

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Nov 17 17:44:04 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           	psect	smallconst
    93  000F00                     __psmallconst:
    94                           	opt stack 0
    95  000F00                     _vscp_deviceURL:
    96                           	opt stack 0
    97  000F00  77                 	db	119
    98  000F01  77                 	db	119
    99  000F02  77                 	db	119
   100  000F03  2E                 	db	46
   101  000F04  65                 	db	101
   102  000F05  75                 	db	117
   103  000F06  72                 	db	114
   104  000F07  6F                 	db	111
   105  000F08  73                 	db	115
   106  000F09  6F                 	db	111
   107  000F0A  75                 	db	117
   108  000F0B  72                 	db	114
   109  000F0C  63                 	db	99
   110  000F0D  65                 	db	101
   111  000F0E  2E                 	db	46
   112  000F0F  73                 	db	115
   113  000F10  65                 	db	101
   114  000F11  2F                 	db	47
   115  000F12  6F                 	db	111
   116  000F13  64                 	db	100
   117  000F14  65                 	db	101
   118  000F15  73                 	db	115
   119  000F16  73                 	db	115
   120  000F17  61                 	db	97
   121  000F18  30                 	db	48
   122  000F19  30                 	db	48
   123  000F1A  31                 	db	49
   124  000F1B  2E                 	db	46
   125  000F1C  78                 	db	120
   126  000F1D  6D                 	db	109
   127  000F1E  6C                 	db	108
   128  000F1F  00                 	db	0
   129  000F20                     __end_of_vscp_deviceURL:
   130                           	opt stack 0
   131  0000                     _ANCON0	set	3933
   132  0000                     _ANCON1	set	3932
   133  0000                     _BRGCON1	set	3651
   134  0000                     _BRGCON2	set	3652
   135  0000                     _BRGCON3	set	3653
   136  0000                     _BSEL0	set	3709
   137  0000                     _CANCON	set	3951
   138  0000                     _CIOCON	set	3952
   139  0000                     _ECANCON	set	3954
   140  0000                     _EEADR	set	3956
   141  0000                     _EEADRH	set	3957
   142  0000                     _EECON1bits	set	3967
   143  0000                     _EECON2	set	3966
   144  0000                     _EEDATA	set	3955
   145  0000                     _INTCONbits	set	4082
   146  0000                     _MSEL0	set	3705
   147  0000                     _MSEL1	set	3706
   148  0000                     _MSEL2	set	3707
   149  0000                     _PORTA	set	3968
   150  0000                     _PORTAbits	set	3968
   151  0000                     _PORTB	set	3969
   152  0000                     _PORTBbits	set	3969
   153  0000                     _PORTC	set	3970
   154  0000                     _PORTCbits	set	3970
   155  0000                     _RXB1CONbits	set	3888
   156  0000                     _RXF0EIDH	set	3810
   157  0000                     _RXF0EIDL	set	3811
   158  0000                     _RXF0SIDH	set	3808
   159  0000                     _RXF0SIDL	set	3809
   160  0000                     _RXF1EIDH	set	3814
   161  0000                     _RXF1EIDL	set	3815
   162  0000                     _RXF1SIDL	set	3813
   163  0000                     _RXFBCON0	set	3697
   164  0000                     _RXFBCON1	set	3698
   165  0000                     _RXFBCON2	set	3699
   166  0000                     _RXFBCON3	set	3700
   167  0000                     _RXFBCON4	set	3701
   168  0000                     _RXFBCON5	set	3702
   169  0000                     _RXFBCON6	set	3703
   170  0000                     _RXFBCON7	set	3704
   171  0000                     _RXFCON0	set	3654
   172  0000                     _RXFCON1	set	3655
   173  0000                     _RXM0EIDH	set	3834
   174  0000                     _RXM0EIDL	set	3835
   175  0000                     _RXM0SIDH	set	3832
   176  0000                     _RXM0SIDL	set	3833
   177  0000                     _RXM1EIDH	set	3838
   178  0000                     _RXM1EIDL	set	3839
   179  0000                     _RXM1SIDL	set	3837
   180  0000                     _T0CON	set	4053
   181  0000                     _T0CONbits	set	4053
   182  0000                     _TMR0H	set	4055
   183  0000                     _TMR0L	set	4054
   184  0000                     _TRISA	set	3986
   185  0000                     _TRISB	set	3987
   186  0000                     _TRISC	set	3988
   187  0000                     _B0RXFUL	set	29703
   188  0000                     _B0TXEN	set	29674
   189  0000                     _B1RXFUL	set	29831
   190  0000                     _B1TXEN	set	29675
   191  0000                     _B2RXFUL	set	29959
   192  0000                     _B2TXEN	set	29676
   193  0000                     _B3RXFUL	set	30087
   194  0000                     _B3TXEN	set	29677
   195  0000                     _B4RXFUL	set	30215
   196  0000                     _B4TXEN	set	29678
   197  0000                     _B5RXFUL	set	30343
   198  0000                     _B5TXEN	set	29679
   199  0000                     _FIFOEMPTY	set	31631
   200  0000                     _IRXIF	set	31679
   201  0000                     _MDSEL0	set	31638
   202  0000                     _MDSEL1	set	31639
   203  0000                     _RXB0FILHIT0	set	31488
   204  0000                     _RXB0FUL	set	31495
   205  0000                     _RXB0IF	set	31672
   206  0000                     _RXB0OVFL	set	31631
   207  0000                     _RXB1IF	set	31673
   208  0000                     _RXB1OVFL	set	31630
   209  0000                     _RXF1EN	set	29233
   210  0000                     _RXM0EXIDM	set	30667
   211  0000                     _RXM1EXIDEN	set	30699
   212  0000                     _B0CON	set	3712
   213  0000                     _B1CON	set	3728
   214  0000                     _B2CON	set	3744
   215  0000                     _B3CON	set	3760
   216  0000                     _B4CON	set	3776
   217  0000                     _B5CON	set	3792
   218  0000                     _RXB0CON	set	3936
   219  0000                     _RXB1CON	set	3888
   220  0000                     _RXF1SIDH	set	3812
   221  0000                     _RXM1SIDH	set	3836
   222  0000                     _TXB0CON	set	3872
   223  0000                     _TXB1CON	set	3856
   224  0000                     _TXB2CON	set	3840
   225                           
   226                           ; #config settings
   227  000F20  00                 	db	0	; dummy byte at the end
   228  0000                     
   229                           	psect	cinit
   230  002F40                     __pcinit:
   231                           	opt stack 0
   232  002F40                     start_initialization:
   233                           	opt stack 0
   234  002F40                     __initialization:
   235                           	opt stack 0
   236                           
   237                           ; Clear objects allocated to BANK0 (47 bytes)
   238  002F40  EE00  F090         	lfsr	0,__pbssBANK0
   239  002F44  0E2F               	movlw	47
   240  002F46                     clear_0:
   241  002F46  6AEE               	clrf	postinc0,c
   242  002F48  06E8               	decf	wreg,f,c
   243  002F4A  E1FD               	bnz	clear_0
   244                           
   245                           ; Clear objects allocated to COMRAM (7 bytes)
   246  002F4C  EE00  F052         	lfsr	0,__pbssCOMRAM
   247  002F50  0E07               	movlw	7
   248  002F52                     clear_1:
   249  002F52  6AEE               	clrf	postinc0,c
   250  002F54  06E8               	decf	wreg,f,c
   251  002F56  E1FD               	bnz	clear_1
   252  002F58                     end_of_initialization:
   253                           	opt stack 0
   254  002F58                     __end_of__initialization:
   255                           	opt stack 0
   256  002F58  0100               	movlb	0
   257  002F5A  EF43  F011         	goto	_main	;jump to C main() function
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           
   261                           	psect	bssCOMRAM
   262  000052                     __pbssCOMRAM:
   263                           	opt stack 0
   264  000052                     _vscp_page_select:
   265                           	opt stack 0
   266  000052                     	ds	2
   267  000054                     __ECANRxFilterHitInfo:
   268                           	opt stack 0
   269  000054                     	ds	1
   270  000055                     _vscp_alarmstatus:
   271                           	opt stack 0
   272  000055                     	ds	1
   273  000056                     _vscp_initledfunc:
   274                           	opt stack 0
   275  000056                     	ds	1
   276  000057                     _vscp_probe_address:
   277                           	opt stack 0
   278  000057                     	ds	1
   279  000058                     _vscp_statuscnt:
   280                           	opt stack 0
   281  000058                     	ds	1
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           
   285                           	psect	bssBANK0
   286  000090                     __pbssBANK0:
   287                           	opt stack 0
   288  000090                     _measurement_clock:
   289                           	opt stack 0
   290  000090                     	ds	4
   291  000094                     _vscp_configtimer:
   292                           	opt stack 0
   293  000094                     	ds	2
   294  000096                     _vscp_timer:
   295                           	opt stack 0
   296  000096                     	ds	2
   297  000098                     _hours:
   298                           	opt stack 0
   299  000098                     	ds	1
   300  000099                     _minutes:
   301                           	opt stack 0
   302  000099                     	ds	1
   303  00009A                     _seconds:
   304                           	opt stack 0
   305  00009A                     	ds	1
   306  00009B                     _vscp_guid_reset:
   307                           	opt stack 0
   308  00009B                     	ds	1
   309  00009C                     _vscp_hour:
   310                           	opt stack 0
   311  00009C                     	ds	1
   312  00009D                     _vscp_initbtncnt:
   313                           	opt stack 0
   314  00009D                     	ds	1
   315  00009E                     _vscp_minute:
   316                           	opt stack 0
   317  00009E                     	ds	1
   318  00009F                     _vscp_nickname:
   319                           	opt stack 0
   320  00009F                     	ds	1
   321  0000A0                     _vscp_node_state:
   322                           	opt stack 0
   323  0000A0                     	ds	1
   324  0000A1                     _vscp_node_substate:
   325                           	opt stack 0
   326  0000A1                     	ds	1
   327  0000A2                     _vscp_probe_cnt:
   328                           	opt stack 0
   329  0000A2                     	ds	1
   330  0000A3                     _vscp_second:
   331                           	opt stack 0
   332  0000A3                     	ds	1
   333  0000A4                     _vscp_imsg:
   334                           	opt stack 0
   335  0000A4                     	ds	14
   336  0000B2                     _vscp_omsg:
   337                           	opt stack 0
   338  0000B2                     	ds	13
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           
   342                           	psect	cstackBANK0
   343  000060                     __pcstackBANK0:
   344                           	opt stack 0
   345  000060                     ??_sendVSCPFrame:
   346                           
   347                           ; 0 bytes @ 0x0
   348  000060                     	ds	20
   349  000074                     ??_vscp_handleProtocolEvent:
   350  000074                     ?_SendInformationEvent:
   351                           	opt stack 0
   352  000074                     ?_vscp_sendHeartBeat:
   353                           	opt stack 0
   354  000074                     SendInformationEvent@eventClass:
   355                           	opt stack 0
   356  000074                     vscp_sendHeartBeat@subzone:
   357                           	opt stack 0
   358                           
   359                           ; 1 bytes @ 0x14
   360  000074                     	ds	1
   361  000075                     SendInformationEvent@eventTypeId:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x15
   365  000075                     	ds	1
   366  000076                     ??_doDM:
   367                           
   368                           ; 0 bytes @ 0x16
   369  000076                     	ds	3
   370  000079                     doDM@class_filter:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x19
   374  000079                     	ds	2
   375  00007B                     doDM@class_mask:
   376                           	opt stack 0
   377  00007B                     vscp_handleProtocolEvent@page_save:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x1B
   381  00007B                     	ds	2
   382  00007D                     doDM@type_filter:
   383                           	opt stack 0
   384  00007D                     vscp_handleProtocolEvent@page_save_1144:
   385                           	opt stack 0
   386                           
   387                           ; 2 bytes @ 0x1D
   388  00007D                     	ds	1
   389  00007E                     doDM@type_mask:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x1E
   393  00007E                     	ds	1
   394  00007F                     vscp_handleProtocolEvent@offset:
   395                           	opt stack 0
   396  00007F                     _doDM$1998:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x1F
   400  00007F                     	ds	1
   401  000080                     vscp_handleProtocolEvent@pos:
   402                           	opt stack 0
   403  000080                     _doDM$1999:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x20
   407  000080                     	ds	1
   408  000081                     vscp_handleProtocolEvent@bytes:
   409                           	opt stack 0
   410  000081                     _doDM$2000:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x21
   414  000081                     	ds	1
   415  000082                     vscp_handleProtocolEvent@len:
   416                           	opt stack 0
   417  000082                     _doDM$2001:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x22
   421  000082                     	ds	1
   422  000083                     doDM@dmflags:
   423                           	opt stack 0
   424  000083                     vscp_handleProtocolEvent@pos_1133:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x23
   428  000083                     	ds	1
   429  000084                     doDM@i:
   430                           	opt stack 0
   431  000084                     vscp_handleProtocolEvent@len_1134:
   432                           	opt stack 0
   433                           
   434                           ; 1 bytes @ 0x24
   435  000084                     	ds	1
   436  000085                     vscp_handleProtocolEvent@bytes_this_time:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x25
   440  000085                     	ds	1
   441  000086                     vscp_handleProtocolEvent@cb:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x26
   445  000086                     	ds	1
   446  000087                     vscp_handleProtocolEvent@i_1143:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x27
   450  000087                     	ds	1
   451  000088                     vscp_handleProtocolEvent@k:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x28
   455  000088                     	ds	1
   456  000089                     vscp_handleProtocolEvent@i_1132:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x29
   460  000089                     	ds	1
   461  00008A                     vscp_handleProtocolEvent@byte:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x2A
   465  00008A                     	ds	1
   466  00008B                     vscp_handleProtocolEvent@bytes_1139:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x2B
   470  00008B                     	ds	2
   471  00008D                     vscp_handleProtocolEvent@i_1135:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x2D
   475  00008D                     	ds	1
   476  00008E                     vscp_handleProtocolEvent@i:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x2E
   480  00008E                     	ds	1
   481  00008F                     vscp_handleProtocolEvent@j:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x2F
   485  00008F                     	ds	1
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           
   489                           	psect	cstackCOMRAM
   490  000001                     __pcstackCOMRAM:
   491                           	opt stack 0
   492  000001                     ?i1_WriteTimer0:
   493                           	opt stack 0
   494  000001                     i1WriteTimer0@timer0:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x0
   498  000001                     	ds	2
   499  000003                     i1WriteTimer0@timer:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x2
   503  000003                     	ds	2
   504  000005                     ??_interrupt_at_low_vector:
   505                           
   506                           ; 0 bytes @ 0x4
   507  000005                     	ds	3
   508  000008                     ?_WriteTimer0:
   509                           	opt stack 0
   510  000008                     ?_Write_b_eep:
   511                           	opt stack 0
   512  000008                     ??_readControlReg:
   513  000008                     ?__CANIDToRegs:
   514                           	opt stack 0
   515  000008                     ?__RegsToCANID:
   516                           	opt stack 0
   517  000008                     ??_vscp_getMDF_URL:
   518  000008                     ?_Read_b_eep:
   519                           	opt stack 0
   520  000008                     ?___lbmod:
   521                           	opt stack 0
   522  000008                     ?__ECANPointBuffer:
   523                           	opt stack 0
   524  000008                     ?_vscp_getFamilyCode:
   525                           	opt stack 0
   526  000008                     ?_vscp_getFamilyType:
   527                           	opt stack 0
   528  000008                     ECANSetOperationMode@mode:
   529                           	opt stack 0
   530  000008                     OpenTimer0@config:
   531                           	opt stack 0
   532  000008                     ___lbmod@divisor:
   533                           	opt stack 0
   534  000008                     __CANIDToRegs@ptr:
   535                           	opt stack 0
   536  000008                     __RegsToCANID@ptr:
   537                           	opt stack 0
   538  000008                     Read_b_eep@badd:
   539                           	opt stack 0
   540  000008                     Write_b_eep@badd:
   541                           	opt stack 0
   542  000008                     WriteTimer0@timer0:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x7
   546  000008                     	ds	1
   547  000009                     vscp_getMDF_URL@idx:
   548                           	opt stack 0
   549  000009                     ___lbmod@dividend:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x8
   553  000009                     	ds	1
   554  00000A                     vscp_getGUID@idx:
   555                           	opt stack 0
   556  00000A                     vscp_getUserID@idx:
   557                           	opt stack 0
   558  00000A                     vscp_getManufacturerId@idx:
   559                           	opt stack 0
   560  00000A                     __RegsToCANID@val:
   561                           	opt stack 0
   562  00000A                     Write_b_eep@bdat:
   563                           	opt stack 0
   564  00000A                     ___lbmod@counter:
   565                           	opt stack 0
   566  00000A                     WriteTimer0@timer:
   567                           	opt stack 0
   568  00000A                     __CANIDToRegs@val:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x9
   572  00000A                     	ds	1
   573  00000B                     __RegsToCANID@type:
   574                           	opt stack 0
   575  00000B                     __ECANPointBuffer@b:
   576                           	opt stack 0
   577  00000B                     Write_b_eep@GIE_BIT_VAL:
   578                           	opt stack 0
   579  00000B                     ___lbmod@rem:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0xA
   583  00000B                     	ds	1
   584  00000C                     ??_init_app_eeprom:
   585  00000C                     ??__RegsToCANID:
   586  00000C                     ??_vscp_readStdReg:
   587  00000C                     ?_vscp_setGUID:
   588                           	opt stack 0
   589  00000C                     ?_vscp_setManufacturerId:
   590                           	opt stack 0
   591  00000C                     ?_vscp_setUserID:
   592                           	opt stack 0
   593  00000C                     vscp_setGUID@data:
   594                           	opt stack 0
   595  00000C                     vscp_setManufacturerId@data:
   596                           	opt stack 0
   597  00000C                     vscp_writeNicknamePermanent@nickname:
   598                           	opt stack 0
   599  00000C                     vscp_setUserID@data:
   600                           	opt stack 0
   601  00000C                     vscp_setSegmentCRC@crc:
   602                           	opt stack 0
   603  00000C                     vscp_setControlByte@ctrl:
   604                           	opt stack 0
   605  00000C                     vscp_goBootloaderMode@algorithm:
   606                           	opt stack 0
   607  00000C                     __ECANPointBuffer@pt:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0xB
   611  00000C                     	ds	1
   612  00000D                     vscp_setGUID@idx:
   613                           	opt stack 0
   614  00000D                     vscp_setManufacturerId@idx:
   615                           	opt stack 0
   616  00000D                     vscp_setUserID@idx:
   617                           	opt stack 0
   618  00000D                     vscp_handleDropNickname@bytes:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0xC
   622  00000D                     	ds	1
   623  00000E                     init_app_eeprom@j:
   624                           	opt stack 0
   625  00000E                     __CANIDToRegs@type:
   626                           	opt stack 0
   627  00000E                     __RegsToCANID@Value:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0xD
   631  00000E                     	ds	1
   632  00000F                     ??__CANIDToRegs:
   633  00000F                     ?_ECANReceiveMessage:
   634                           	opt stack 0
   635  00000F                     init_app_eeprom@i:
   636                           	opt stack 0
   637  00000F                     readControlReg@ctrlreg:
   638                           	opt stack 0
   639  00000F                     ECANReceiveMessage@data:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0xE
   643  00000F                     	ds	1
   644  000010                     ?_vscp_writeStdReg:
   645                           	opt stack 0
   646  000010                     readControlReg@rv:
   647                           	opt stack 0
   648  000010                     ECANReceiveMessage@dataLen:
   649                           	opt stack 0
   650  000010                     vscp_writeStdReg@value:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0xF
   654  000010                     	ds	1
   655  000011                     ??_vscp_writeStdReg:
   656  000011                     ?_writeControlReg:
   657                           	opt stack 0
   658  000011                     vscp_readAppReg@rv:
   659                           	opt stack 0
   660  000011                     writeControlReg@val:
   661                           	opt stack 0
   662  000011                     ECANReceiveMessage@msgFlags:
   663                           	opt stack 0
   664  000011                     __CANIDToRegs@Value:
   665                           	opt stack 0
   666  000011                     vscp_readStdReg@code:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x10
   670  000011                     	ds	1
   671  000012                     ??_writeControlReg:
   672  000012                     ?_ECANSendMessage:
   673                           	opt stack 0
   674  000012                     vscp_readAppReg@reg:
   675                           	opt stack 0
   676  000012                     ECANReceiveMessage@savedPtr:
   677                           	opt stack 0
   678  000012                     ECANSendMessage@id:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x11
   682  000012                     	ds	1
   683  000013                     writeControlReg@ctrlreg:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x12
   687  000013                     	ds	1
   688  000014                     writeControlReg@rv:
   689                           	opt stack 0
   690  000014                     ECANReceiveMessage@id:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x13
   694  000014                     	ds	1
   695  000015                     ?_vscp_writeAppReg:
   696                           	opt stack 0
   697  000015                     vscp_writeAppReg@val:
   698                           	opt stack 0
   699  000015                     ECANReceiveMessage@i:
   700                           	opt stack 0
   701  000015                     vscp_writeStdReg@rv:
   702                           	opt stack 0
   703  000015                     vscp_readStdReg@code_1117:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x14
   707  000015                     	ds	1
   708  000016                     vscp_writeAppReg@rv:
   709                           	opt stack 0
   710  000016                     ECANReceiveMessage@mode:
   711                           	opt stack 0
   712  000016                     vscp_writeStdReg@reg:
   713                           	opt stack 0
   714  000016                     ECANSendMessage@data:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x15
   718  000016                     	ds	1
   719  000017                     vscp_writeAppReg@reg:
   720                           	opt stack 0
   721  000017                     ECANReceiveMessage@temp:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x16
   725  000017                     	ds	1
   726  000018                     ?_vscp_writeRegister:
   727                           	opt stack 0
   728  000018                     ECANSendMessage@dataLen:
   729                           	opt stack 0
   730  000018                     vscp_writeRegister@value:
   731                           	opt stack 0
   732  000018                     ECANReceiveMessage@ptr:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x17
   736  000018                     	ds	1
   737  000019                     ECANSendMessage@msgFlags:
   738                           	opt stack 0
   739  000019                     vscp_readStdReg@idx:
   740                           	opt stack 0
   741  000019                     vscp_writeRegister@reg:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x18
   745  000019                     	ds	1
   746  00001A                     ??_ECANSendMessage:
   747  00001A                     ?_getCANFrame:
   748                           	opt stack 0
   749  00001A                     getCANFrame@pdlc:
   750                           	opt stack 0
   751  00001A                     vscp_readStdReg@idx_1118:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x19
   755  00001A                     	ds	1
   756  00001B                     getCANFrame@pdata:
   757                           	opt stack 0
   758  00001B                     vscp_readStdReg@rv:
   759                           	opt stack 0
   760  00001B                     ECANSendMessage@pb:
   761                           	opt stack 0
   762                           
   763                           ; 18 bytes @ 0x1A
   764  00001B                     	ds	1
   765  00001C                     getCANFrame@pid:
   766                           	opt stack 0
   767  00001C                     vscp_readStdReg@reg:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x1B
   771  00001C                     	ds	1
   772  00001D                     getCANFrame@flags:
   773                           	opt stack 0
   774  00001D                     vscp_readRegister@reg:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x1C
   778  00001D                     	ds	1
   779  00001E                     ?_getVSCPFrame:
   780                           	opt stack 0
   781  00001E                     getVSCPFrame@pvscptype:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x1D
   785  00001E                     	ds	1
   786  00001F                     getVSCPFrame@pNodeId:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x1E
   790  00001F                     	ds	1
   791  000020                     getVSCPFrame@pPriority:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x1F
   795  000020                     	ds	1
   796  000021                     getVSCPFrame@pSize:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x20
   800  000021                     	ds	1
   801  000022                     getVSCPFrame@pData:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x21
   805  000022                     	ds	1
   806  000023                     ??_getVSCPFrame:
   807                           
   808                           ; 0 bytes @ 0x22
   809  000023                     	ds	4
   810  000027                     getVSCPFrame@pvscpclass:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x26
   814  000027                     	ds	1
   815  000028                     getVSCPFrame@id:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x27
   819  000028                     	ds	4
   820  00002C                     vscp_getEvent@rv:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x2B
   824  00002C                     	ds	1
   825  00002D                     ECANSendMessage@mode:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x2C
   829  00002D                     	ds	1
   830  00002E                     ECANSendMessage@buffers:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x2D
   834  00002E                     	ds	1
   835  00002F                     ECANSendMessage@j:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x2E
   839  00002F                     	ds	1
   840  000030                     ECANSendMessage@tempBSEL0:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x2F
   844  000030                     	ds	1
   845  000031                     ECANSendMessage@tempPtr:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x30
   849  000031                     	ds	2
   850  000033                     ECANSendMessage@temp:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x32
   854  000033                     	ds	1
   855  000034                     ECANSendMessage@i:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x33
   859  000034                     	ds	1
   860  000035                     ECANSendMessage@ptr:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x34
   864  000035                     	ds	2
   865  000037                     ?_sendCANFrame:
   866                           	opt stack 0
   867  000037                     sendCANFrame@id:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x36
   871  000037                     	ds	4
   872  00003B                     sendCANFrame@dlc:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x3A
   876  00003B                     	ds	1
   877  00003C                     sendCANFrame@pdata:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x3B
   881  00003C                     	ds	2
   882  00003E                     
   883                           ; 0 bytes @ 0x3D
   884  00003E                     	ds	1
   885  00003F                     ?_sendVSCPFrame:
   886                           	opt stack 0
   887  00003F                     sendVSCPFrame@vscpclass:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x3E
   891  00003F                     	ds	2
   892  000041                     sendVSCPFrame@vscptype:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x40
   896  000041                     	ds	1
   897  000042                     sendVSCPFrame@nodeid:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x41
   901  000042                     	ds	1
   902  000043                     sendVSCPFrame@priority:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x42
   906  000043                     	ds	1
   907  000044                     sendVSCPFrame@size:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x43
   911  000044                     	ds	1
   912  000045                     sendVSCPFrame@pData:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x44
   916  000045                     	ds	2
   917  000047                     sendVSCPFrame@id:
   918                           	opt stack 0
   919                           
   920                           ; 4 bytes @ 0x46
   921  000047                     	ds	4
   922  00004B                     SendInformationEvent@data:
   923                           	opt stack 0
   924                           
   925                           ; 3 bytes @ 0x4A
   926  00004B                     	ds	1
   927  00004C                     ??_vscp_newNodeOnline:
   928  00004C                     vscp_sendHeartBeat@zone:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x4B
   932  00004C                     	ds	1
   933  00004D                     ??_vscp_doOneSecondWork:
   934                           
   935                           ; 0 bytes @ 0x4C
   936  00004D                     	ds	1
   937  00004E                     SendInformationEvent@idx:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x4D
   941  00004E                     	ds	1
   942  00004F                     ?_actionSet:
   943                           	opt stack 0
   944  00004F                     ?_actionClr:
   945                           	opt stack 0
   946  00004F                     ?_actionSetAll:
   947                           	opt stack 0
   948  00004F                     ?_actionClrAll:
   949                           	opt stack 0
   950  00004F                     actionSet@param:
   951                           	opt stack 0
   952  00004F                     actionClr@param:
   953                           	opt stack 0
   954  00004F                     
   955                           ; 1 bytes @ 0x4E
   956  00004F                     	ds	1
   957  000050                     actionSetAll@i:
   958                           	opt stack 0
   959  000050                     actionClrAll@i:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x4F
   963  000050                     	ds	2
   964  000052                     postinc0	equ	0xFEE
   965                           wreg	equ	0xFE8
   966                           
   967                           ; 0 bytes @ 0x51
   968 ;;
   969 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   970 ;;
   971 ;; *************** function _main *****************
   972 ;; Defined at:
   973 ;;		line 168 in file "../main.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;		None
   978 ;; Return value:  Size  Location     Type
   979 ;;		None               void
   980 ;; Registers used:
   981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : F/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   991 ;;Total ram usage:        0 bytes
   992 ;; Hardware stack levels required when called:    9
   993 ;; This function calls:
   994 ;;		_init
   995 ;;		_vscp_check_pstorage
   996 ;;		_init_app_eeprom
   997 ;;		_init_app_ram
   998 ;;		_vscp_init
   999 ;;		_Read_b_eep
  1000 ;;		_writeControlReg
  1001 ;;		_Busy_eep
  1002 ;;		_Write_b_eep
  1003 ;;		_vscp_getEvent
  1004 ;;		_vscp_goActiveState
  1005 ;;		_vscp_handleProbeState
  1006 ;;		_vscp_handleProtocolEvent
  1007 ;;		_doDM
  1008 ;;		_vscp_error
  1009 ;;		_vscp_doOneSecondWork
  1010 ;;		_doApplicationOneSecondWork
  1011 ;;		_doWork
  1012 ;; This function is called by:
  1013 ;;		Startup code after reset
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text0
  1018  002286                     __ptext0:
  1019                           	opt stack 0
  1020  002286                     _main:
  1021                           	opt stack 22
  1022                           
  1023                           ;main.c: 169: init();
  1024                           
  1025                           ;incstack = 0
  1026                           ;incstack = 0
  1027  002286  EC68  F016         	call	_init	;wreg free
  1028                           
  1029                           ;main.c: 173: if ( !vscp_check_pstorage() ) {
  1030  00228A  EC90  F017         	call	_vscp_check_pstorage	;wreg free
  1031  00228E  0900               	iorlw	0
  1032  002290  E104               	bnz	l7084
  1033                           
  1034                           ;main.c: 176: init_app_eeprom();
  1035  002292  EC8E  F013         	call	_init_app_eeprom	;wreg free
  1036                           
  1037                           ;main.c: 177: init_app_ram();
  1038  002296  EC74  F018         	call	_init_app_ram	;wreg free
  1039  00229A                     l7084:
  1040                           
  1041                           ;main.c: 180: }
  1042                           ;main.c: 182: vscp_init();
  1043  00229A  EC09  F016         	call	_vscp_init	;wreg free
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 185: writeControlReg( 0, Read_b_eep(0x21 + 2) );
  1047  00229E  6A09               	clrf	?_Read_b_eep+1,c
  1048  0022A0  0E23               	movlw	35
  1049  0022A2  6E08               	movwf	?_Read_b_eep,c
  1050  0022A4  EC07  F018         	call	_Read_b_eep	;wreg free
  1051  0022A8  6E11               	movwf	?_writeControlReg,c
  1052  0022AA  0E00               	movlw	0
  1053  0022AC  ECD7  F00D         	call	_writeControlReg
  1054                           
  1055                           ;main.c: 186: writeControlReg( 1, Read_b_eep(0x21 + 3) );
  1056  0022B0  6A09               	clrf	?_Read_b_eep+1,c
  1057  0022B2  0E24               	movlw	36
  1058  0022B4  6E08               	movwf	?_Read_b_eep,c
  1059  0022B6  EC07  F018         	call	_Read_b_eep	;wreg free
  1060  0022BA  6E11               	movwf	?_writeControlReg,c
  1061  0022BC  0E01               	movlw	1
  1062  0022BE  ECD7  F00D         	call	_writeControlReg
  1063                           
  1064                           ;main.c: 187: writeControlReg( 2, Read_b_eep(0x21 + 4) );
  1065  0022C2  6A09               	clrf	?_Read_b_eep+1,c
  1066  0022C4  0E25               	movlw	37
  1067  0022C6  6E08               	movwf	?_Read_b_eep,c
  1068  0022C8  EC07  F018         	call	_Read_b_eep	;wreg free
  1069  0022CC  6E11               	movwf	?_writeControlReg,c
  1070  0022CE  0E02               	movlw	2
  1071  0022D0  ECD7  F00D         	call	_writeControlReg
  1072  0022D4                     l147:
  1073  0022D4  0004               	clrwdt		;# 
  1074                           
  1075                           ;main.c: 193: if ( ( vscp_initbtncnt > 250 ) &&
  1076                           ;main.c: 194: ( 0x01 != vscp_node_state ) ) {
  1077  0022D6  0EFA               	movlw	250
  1078  0022D8  0100               	movlb	0	; () banked
  1079  0022DA  659D               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1080  0022DC  D00E               	goto	l7104
  1081                           
  1082                           ; BSR set to: 0
  1083  0022DE  05A0               	decf	_vscp_node_state& (0+255),w,b
  1084  0022E0  E00C               	bz	l7104
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 197: vscp_nickname = 0xff;
  1088  0022E2  699F               	setf	_vscp_nickname& (0+255),b
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;main.c: 198: (Busy_eep(), Write_b_eep(0x01,0xff));
  1092  0022E4  ECB1  F018         	call	_Busy_eep	;wreg free
  1093  0022E8  6A09               	clrf	?_Write_b_eep+1,c
  1094  0022EA  0E01               	movlw	1
  1095  0022EC  6E08               	movwf	?_Write_b_eep,c
  1096  0022EE  0EFF               	movlw	255
  1097  0022F0  680A               	setf	?_Write_b_eep+2,c
  1098  0022F2  EC4B  F016         	call	_Write_b_eep	;wreg free
  1099                           
  1100                           ;main.c: 199: vscp_init();
  1101  0022F6  EC09  F016         	call	_vscp_init	;wreg free
  1102  0022FA                     l7104:
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 201: }
  1106                           ;main.c: 204: vscp_imsg.flags = 0;
  1107  0022FA  6BA4               	clrf	_vscp_imsg& (0+255),b
  1108                           
  1109                           ; BSR set to: 0
  1110                           ;main.c: 205: vscp_getEvent();
  1111  0022FC  ECE2  F016         	call	_vscp_getEvent	;wreg free
  1112                           
  1113                           ;main.c: 207: switch ( vscp_node_state ) {
  1114  002300  D01C               	goto	l7128
  1115  002302                     l7108:
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 212: if (0xff == vscp_nickname) {
  1119  002302  299F               	incf	_vscp_nickname& (0+255),w,b
  1120  002304  E103               	bnz	l7112
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;main.c: 214: vscp_node_state = 0x01;
  1124  002306  0E01               	movlw	1
  1125  002308  6FA0               	movwf	_vscp_node_state& (0+255),b
  1126                           
  1127                           ;main.c: 215: } else {
  1128  00230A  D023               	goto	l7130
  1129  00230C                     l7112:
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;main.c: 217: vscp_node_state = 0x03;
  1133  00230C  0E03               	movlw	3
  1134  00230E  6FA0               	movwf	_vscp_node_state& (0+255),b
  1135  002310                     l7114:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 218: vscp_goActiveState();
  1139  002310  ECCD  F017         	call	_vscp_goActiveState	;wreg free
  1140  002314  D01E               	goto	l7130
  1141  002316                     l7116:
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 223: vscp_handleProbeState();
  1145  002316  ECF3  F013         	call	_vscp_handleProbeState	;wreg free
  1146                           
  1147                           ;main.c: 224: break;
  1148  00231A  D01B               	goto	l7130
  1149  00231C                     l156:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 233: if (vscp_imsg.flags & 0x80) {
  1153  00231C  AFA4               	btfss	_vscp_imsg& (0+255),7,b
  1154  00231E  D019               	goto	l7130
  1155                           
  1156                           ; BSR set to: 0
  1157                           ;main.c: 235: if ( 0 == vscp_imsg.vscp_class ) {
  1158  002320  51A7               	movf	(_vscp_imsg+3)& (0+255),w,b
  1159  002322  11A6               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1160  002324  B4D8               	btfsc	status,2,c
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 238: vscp_handleProtocolEvent();
  1164  002326  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1165                           
  1166                           ;main.c: 240: }
  1167                           ;main.c: 242: doDM();
  1168  00232A  ECAA  F00A         	call	_doDM	;wreg free
  1169  00232E  D011               	goto	l7130
  1170  002330                     l7124:
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 248: vscp_error();
  1174  002330  ECB4  F018         	call	_vscp_error	;wreg free
  1175                           
  1176                           ;main.c: 249: break;
  1177  002334  D00E               	goto	l7130
  1178  002336                     l160:
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;main.c: 252: vscp_node_state = 0x00;
  1182  002336  6BA0               	clrf	_vscp_node_state& (0+255),b
  1183                           
  1184                           ;main.c: 253: break;
  1185  002338  D00C               	goto	l7130
  1186  00233A                     l7128:
  1187  00233A  0100               	movlb	0	; () banked
  1188  00233C  51A0               	movf	_vscp_node_state& (0+255),w,b
  1189                           
  1190                           ; Switch size 1, requested type "speed"
  1191                           ; Number of cases is 5, Range of values is 0 to 4
  1192                           ; switch strategies available:
  1193                           ; Name         Instructions Cycles
  1194                           ; simple_byte           16     9 (average)
  1195                           ;	Chosen strategy is simple_byte
  1196  00233E  E0E1               	bz	l7108
  1197  002340  0A01               	xorlw	1	; case 1
  1198  002342  E0E9               	bz	l7116
  1199  002344  0A03               	xorlw	3	; case 2
  1200  002346  E0E4               	bz	l7114
  1201  002348  0A01               	xorlw	1	; case 3
  1202  00234A  E0E8               	bz	l156
  1203  00234C  0A07               	xorlw	7	; case 4
  1204  00234E  E0F0               	bz	l7124
  1205  002350  D7F2               	goto	l160
  1206  002352                     l7130:
  1207                           
  1208                           ;main.c: 258: if ( measurement_clock > 1000 ) {
  1209  002352  0EE9               	movlw	233
  1210  002354  0100               	movlb	0	; () banked
  1211  002356  5D90               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1212  002358  0E03               	movlw	3
  1213  00235A  5991               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1214  00235C  0E00               	movlw	0
  1215  00235E  5992               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1216  002360  0E00               	movlw	0
  1217  002362  5993               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1218  002364  E30B               	bnc	l7140
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;main.c: 260: measurement_clock = 0;
  1222  002366  6B90               	clrf	_measurement_clock& (0+255),b	;volatile
  1223  002368  6B91               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1224  00236A  6B92               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1225  00236C  6B93               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 263: vscp_doOneSecondWork();
  1229  00236E  ECE1  F015         	call	_vscp_doOneSecondWork	;wreg free
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;main.c: 267: if ( 0x03 == vscp_node_state ) {
  1233  002372  51A0               	movf	_vscp_node_state& (0+255),w,b
  1234  002374  0A03               	xorlw	3
  1235  002376  B4D8               	btfsc	status,2,c
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 270: doApplicationOneSecondWork();
  1239  002378  ECB7  F018         	call	_doApplicationOneSecondWork	;wreg free
  1240  00237C                     l7140:
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 272: }
  1244                           ;main.c: 274: }
  1245                           ;main.c: 277: if ( seconds > 59 ) {
  1246  00237C  0E3B               	movlw	59
  1247  00237E  659A               	cpfsgt	_seconds& (0+255),b
  1248  002380  D00B               	goto	l7156
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 279: seconds = 0;
  1252  002382  6B9A               	clrf	_seconds& (0+255),b
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;main.c: 280: minutes++;
  1256  002384  2B99               	incf	_minutes& (0+255),f,b
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 282: if ( minutes > 59 ) {
  1260  002386  0E3B               	movlw	59
  1261  002388  6599               	cpfsgt	_minutes& (0+255),b
  1262  00238A  D002               	goto	l7152
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 283: minutes = 0;
  1266  00238C  6B99               	clrf	_minutes& (0+255),b
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;main.c: 284: hours++;
  1270  00238E  2B98               	incf	_hours& (0+255),f,b
  1271  002390                     l7152:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;main.c: 285: }
  1275                           ;main.c: 287: if ( hours > 23 ) hours = 0;
  1276  002390  0E17               	movlw	23
  1277  002392  6598               	cpfsgt	_hours& (0+255),b
  1278  002394  D001               	goto	l7156
  1279                           
  1280                           ; BSR set to: 0
  1281  002396  6B98               	clrf	_hours& (0+255),b
  1282  002398                     l7156:
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;main.c: 289: }
  1286                           ;main.c: 291: doWork();
  1287  002398  ECB6  F018         	call	_doWork	;wreg free
  1288  00239C  D79B               	goto	l147
  1289  00239E                     __end_of_main:
  1290                           	opt stack 0
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           status	equ	0xFD8
  1294                           
  1295 ;; *************** function _doWork *****************
  1296 ;; Defined at:
  1297 ;;		line 573 in file "../main.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;		None
  1302 ;; Return value:  Size  Location     Type
  1303 ;;		None               void
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0
  1306 ;; Tracked objects:
  1307 ;;		On entry : F/0
  1308 ;;		On exit  : F/0
  1309 ;;		Unchanged: F/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1315 ;;Total ram usage:        0 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    2
  1318 ;; This function calls:
  1319 ;;		Nothing
  1320 ;; This function is called by:
  1321 ;;		_main
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325                           	psect	text1
  1326  00316C                     __ptext1:
  1327                           	opt stack 0
  1328  00316C                     _doWork:
  1329                           	opt stack 28
  1330                           
  1331                           ; BSR set to: 0
  1332                           
  1333                           ; BSR set to: 0
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;incstack = 0
  1337                           ;incstack = 0
  1338  00316C  0012               	return	
  1339  00316E                     __end_of_doWork:
  1340                           	opt stack 0
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           status	equ	0xFD8
  1344                           
  1345 ;; *************** function _doApplicationOneSecondWork *****************
  1346 ;; Defined at:
  1347 ;;		line 455 in file "../main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;		None               void
  1354 ;; Registers used:
  1355 ;;		None
  1356 ;; Tracked objects:
  1357 ;;		On entry : F/0
  1358 ;;		On exit  : F/0
  1359 ;;		Unchanged: F/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    2
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text2
  1376  00316E                     __ptext2:
  1377                           	opt stack 0
  1378  00316E                     _doApplicationOneSecondWork:
  1379                           	opt stack 28
  1380                           
  1381                           ; BSR set to: 0
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;incstack = 0
  1385                           ;incstack = 0
  1386  00316E  0012               	return	
  1387  003170                     __end_of_doApplicationOneSecondWork:
  1388                           	opt stack 0
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           status	equ	0xFD8
  1392                           
  1393 ;; *************** function _vscp_doOneSecondWork *****************
  1394 ;; Defined at:
  1395 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;		None
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;		None
  1400 ;; Return value:  Size  Location     Type
  1401 ;;		None               void
  1402 ;; Registers used:
  1403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1404 ;; Tracked objects:
  1405 ;;		On entry : F/0
  1406 ;;		On exit  : F/0
  1407 ;;		Unchanged: 0/0
  1408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1413 ;;Total ram usage:        1 bytes
  1414 ;; Hardware stack levels used:    1
  1415 ;; Hardware stack levels required when called:    8
  1416 ;; This function calls:
  1417 ;;		_vscp_getZone
  1418 ;;		_vscp_getSubzone
  1419 ;;		_vscp_sendHeartBeat
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text3
  1426  002BC2                     __ptext3:
  1427                           	opt stack 0
  1428  002BC2                     _vscp_doOneSecondWork:
  1429                           	opt stack 22
  1430                           
  1431                           ; BSR set to: 0
  1432                           ;vscp_firmware.c: 526: ++vscp_second;
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;incstack = 0
  1436                           ;incstack = 0
  1437  002BC2  2BA3               	incf	_vscp_second& (0+255),f,b
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  1441  002BC4  0E3B               	movlw	59
  1442  002BC6  65A3               	cpfsgt	_vscp_second& (0+255),b
  1443  002BC8  D00D               	goto	l6448
  1444                           
  1445                           ; BSR set to: 0
  1446                           ;vscp_firmware.c: 529: vscp_second = 0;
  1447  002BCA  6BA3               	clrf	_vscp_second& (0+255),b
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;vscp_firmware.c: 530: vscp_minute++;
  1451  002BCC  2B9E               	incf	_vscp_minute& (0+255),f,b
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  1455  002BCE  51A0               	movf	_vscp_node_state& (0+255),w,b
  1456  002BD0  0A03               	xorlw	3
  1457  002BD2  E108               	bnz	l6448
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  1461                           ;vscp_firmware.c: 535: vscp_getSubzone());
  1462  002BD4  EC8F  F018         	call	_vscp_getSubzone	;wreg free
  1463  002BD8  0100               	movlb	0	; () banked
  1464  002BDA  6F74               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1465  002BDC  EC94  F018         	call	_vscp_getZone	;wreg free
  1466  002BE0  EC21  F017         	call	_vscp_sendHeartBeat
  1467  002BE4                     l6448:
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;vscp_firmware.c: 536: }
  1471                           ;vscp_firmware.c: 537: }
  1472                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  1473  002BE4  0E3B               	movlw	59
  1474  002BE6  659E               	cpfsgt	_vscp_minute& (0+255),b
  1475  002BE8  D002               	goto	l6454
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;vscp_firmware.c: 540: vscp_minute = 0;
  1479  002BEA  6B9E               	clrf	_vscp_minute& (0+255),b
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;vscp_firmware.c: 541: vscp_hour++;
  1483  002BEC  2B9C               	incf	_vscp_hour& (0+255),f,b
  1484  002BEE                     l6454:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;vscp_firmware.c: 542: }
  1488                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  1489  002BEE  0E17               	movlw	23
  1490  002BF0  659C               	cpfsgt	_vscp_hour& (0+255),b
  1491  002BF2  D001               	goto	l6458
  1492                           
  1493                           ; BSR set to: 0
  1494  002BF4  6B9C               	clrf	_vscp_hour& (0+255),b
  1495  002BF6                     l6458:
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  1499  002BF6  51A0               	movf	_vscp_node_state& (0+255),w,b
  1500  002BF8  0A03               	xorlw	3
  1501  002BFA  A4D8               	btfss	status,2,c
  1502  002BFC  0012               	return	
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  1506  002BFE  2B9B               	incf	_vscp_guid_reset& (0+255),f,b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  1510  002C00  C09B  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1511  002C04  0E0F               	movlw	15
  1512  002C06  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1513  002C08  0E02               	movlw	2
  1514  002C0A  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1515  002C0C  B0D8               	btfsc	status,0,c
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  1519  002C0E  6B9B               	clrf	_vscp_guid_reset& (0+255),b
  1520                           
  1521                           ; BSR set to: 0
  1522  002C10  0012               	return	
  1523  002C12                     __end_of_vscp_doOneSecondWork:
  1524                           	opt stack 0
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function _vscp_sendHeartBeat *****************
  1530 ;; Defined at:
  1531 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  zone            1    wreg     unsigned char 
  1534 ;;  subzone         1   20[BANK0 ] unsigned char 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;  zone            1   75[COMRAM] unsigned char 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;		None               void
  1539 ;; Registers used:
  1540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : F/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1546 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1549 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1550 ;;Total ram usage:        2 bytes
  1551 ;; Hardware stack levels used:    1
  1552 ;; Hardware stack levels required when called:    7
  1553 ;; This function calls:
  1554 ;;		_vscp_sendEvent
  1555 ;; This function is called by:
  1556 ;;		_vscp_doOneSecondWork
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text4
  1561  002E42                     __ptext4:
  1562                           	opt stack 0
  1563  002E42                     _vscp_sendHeartBeat:
  1564                           	opt stack 22
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;incstack = 0
  1568                           ;incstack = 0
  1569                           ;vscp_sendHeartBeat@zone stored from wreg
  1570  002E42  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1571                           
  1572                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  1573  002E46  0E83               	movlw	131
  1574  002E48  0100               	movlb	0	; () banked
  1575  002E4A  6FB2               	movwf	_vscp_omsg& (0+255),b
  1576                           
  1577                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  1578  002E4C  0E07               	movlw	7
  1579  002E4E  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  1580                           
  1581                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  1582  002E50  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  1583  002E52  0E14               	movlw	20
  1584  002E54  6FB4               	movwf	(_vscp_omsg+2)& (0+255),b
  1585                           
  1586                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  1587  002E56  0E09               	movlw	9
  1588  002E58  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  1592  002E5A  6BB7               	clrf	(_vscp_omsg+5)& (0+255),b
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  1596  002E5C  C04C  F0B8         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  1600  002E60  C074  F0B9         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;vscp_firmware.c: 388: vscp_sendEvent();
  1604  002E64  EF34  F017         	goto	_vscp_sendEvent	;wreg free
  1605  002E68                     __end_of_vscp_sendHeartBeat:
  1606                           	opt stack 0
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _vscp_getSubzone *****************
  1612 ;; Defined at:
  1613 ;;		line 562 in file "../main.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      unsigned char 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : F/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    3
  1634 ;; This function calls:
  1635 ;;		_Read_b_eep
  1636 ;; This function is called by:
  1637 ;;		_vscp_doOneSecondWork
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text5
  1642  00311E                     __ptext5:
  1643                           	opt stack 0
  1644  00311E                     _vscp_getSubzone:
  1645                           	opt stack 26
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 563: return Read_b_eep(0x21 + 1);
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;incstack = 0
  1652                           ;incstack = 0
  1653  00311E  6A09               	clrf	?_Read_b_eep+1,c
  1654  003120  0E22               	movlw	34
  1655  003122  6E08               	movwf	?_Read_b_eep,c
  1656  003124  EF07  F018         	goto	_Read_b_eep	;wreg free
  1657  003128                     __end_of_vscp_getSubzone:
  1658                           	opt stack 0
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _vscp_getZone *****************
  1664 ;; Defined at:
  1665 ;;		line 553 in file "../main.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;		None
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;                  1    wreg      unsigned char 
  1672 ;; Registers used:
  1673 ;;		wreg, status,2, status,0, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : F/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1683 ;;Total ram usage:        0 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    3
  1686 ;; This function calls:
  1687 ;;		_Read_b_eep
  1688 ;; This function is called by:
  1689 ;;		_vscp_doOneSecondWork
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text6
  1694  003128                     __ptext6:
  1695                           	opt stack 0
  1696  003128                     _vscp_getZone:
  1697                           	opt stack 26
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 554: return Read_b_eep(0x21 + 0);
  1701                           
  1702                           ;incstack = 0
  1703                           ;incstack = 0
  1704  003128  6A09               	clrf	?_Read_b_eep+1,c
  1705  00312A  0E21               	movlw	33
  1706  00312C  6E08               	movwf	?_Read_b_eep,c
  1707  00312E  EF07  F018         	goto	_Read_b_eep	;wreg free
  1708  003132                     __end_of_vscp_getZone:
  1709                           	opt stack 0
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           status	equ	0xFD8
  1713                           
  1714 ;; *************** function _vscp_error *****************
  1715 ;; Defined at:
  1716 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;		None               void
  1723 ;; Registers used:
  1724 ;;		None
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1734 ;;Total ram usage:        0 bytes
  1735 ;; Hardware stack levels used:    1
  1736 ;; Hardware stack levels required when called:    2
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_main
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           	psect	text7
  1745  003168                     __ptext7:
  1746                           	opt stack 0
  1747  003168                     _vscp_error:
  1748                           	opt stack 28
  1749                           
  1750                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  1751                           
  1752                           ;incstack = 0
  1753                           ;incstack = 0
  1754  003168  6A56               	clrf	_vscp_initledfunc,c
  1755  00316A  0012               	return	
  1756  00316C                     __end_of_vscp_error:
  1757                           	opt stack 0
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           status	equ	0xFD8
  1761                           
  1762 ;; *************** function _doDM *****************
  1763 ;; Defined at:
  1764 ;;		line 834 in file "../main.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  class_mask      2   27[BANK0 ] unsigned short 
  1769 ;;  class_filter    2   25[BANK0 ] unsigned short 
  1770 ;;  i               1   36[BANK0 ] unsigned char 
  1771 ;;  dmflags         1   35[BANK0 ] unsigned char 
  1772 ;;  type_mask       1   30[BANK0 ] unsigned char 
  1773 ;;  type_filter     1   29[BANK0 ] unsigned char 
  1774 ;; Return value:  Size  Location     Type
  1775 ;;		None               void
  1776 ;; Registers used:
  1777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1778 ;; Tracked objects:
  1779 ;;		On entry : 0/0
  1780 ;;		On exit  : F/0
  1781 ;;		Unchanged: 0/0
  1782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1784 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1785 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1786 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1787 ;;Total ram usage:       15 bytes
  1788 ;; Hardware stack levels used:    1
  1789 ;; Hardware stack levels required when called:    8
  1790 ;; This function calls:
  1791 ;;		_Read_b_eep
  1792 ;;		_actionSet
  1793 ;;		_actionClr
  1794 ;;		_actionSetAll
  1795 ;;		_actionClrAll
  1796 ;; This function is called by:
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text8
  1802  001554                     __ptext8:
  1803                           	opt stack 0
  1804  001554                     _doDM:
  1805                           	opt stack 22
  1806                           
  1807                           ;main.c: 835: unsigned char i;
  1808                           ;main.c: 836: unsigned char dmflags;
  1809                           ;main.c: 837: unsigned short class_filter;
  1810                           ;main.c: 838: unsigned short class_mask;
  1811                           ;main.c: 839: unsigned char type_filter;
  1812                           ;main.c: 840: unsigned char type_mask;
  1813                           ;main.c: 843: if ( 0 == vscp_imsg.vscp_class ) return;
  1814                           
  1815                           ;incstack = 0
  1816                           ;incstack = 0
  1817  001554  0100               	movlb	0	; () banked
  1818  001556  51A7               	movf	(_vscp_imsg+3)& (0+255),w,b
  1819  001558  11A6               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1820  00155A  B4D8               	btfsc	status,2,c
  1821  00155C  0012               	return	
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 845: for (i = 0; i < 8; i++) {
  1825  00155E  6B84               	clrf	doDM@i& (0+255),b
  1826  001560                     l7596:
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 848: dmflags = Read_b_eep(0x21 + 23 + 0 + 1 + (8 * i));
  1830  001560  5184               	movf	doDM@i& (0+255),w,b
  1831  001562  6F76               	movwf	??_doDM& (0+255),b
  1832  001564  6B77               	clrf	(??_doDM+1)& (0+255),b
  1833  001566  90D8               	bcf	status,0,c
  1834  001568  3776               	rlcf	??_doDM& (0+255),f,b
  1835  00156A  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1836  00156C  90D8               	bcf	status,0,c
  1837  00156E  3776               	rlcf	??_doDM& (0+255),f,b
  1838  001570  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1839  001572  90D8               	bcf	status,0,c
  1840  001574  3776               	rlcf	??_doDM& (0+255),f,b
  1841  001576  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1842  001578  0E39               	movlw	57
  1843  00157A  2576               	addwf	??_doDM& (0+255),w,b
  1844  00157C  6E08               	movwf	?_Read_b_eep,c
  1845  00157E  0E00               	movlw	0
  1846  001580  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  1847  001582  6E09               	movwf	?_Read_b_eep+1,c
  1848  001584  EC07  F018         	call	_Read_b_eep	;wreg free
  1849  001588  0100               	movlb	0	; () banked
  1850  00158A  6F83               	movwf	doDM@dmflags& (0+255),b
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;main.c: 852: if ( dmflags & 0x80 ) {
  1854  00158C  AF83               	btfss	doDM@dmflags& (0+255),7,b
  1855  00158E  D136               	goto	l7650
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 855: if ( ( dmflags & 0x40 ) &&
  1859                           ;main.c: 856: ( vscp_imsg.oaddr != Read_b_eep(0x21 + 23 + 0 + (8 * i)) ) ) {
  1860  001590  AD83               	btfss	doDM@dmflags& (0+255),6,b
  1861  001592  D018               	goto	l291
  1862                           
  1863                           ; BSR set to: 0
  1864  001594  5184               	movf	doDM@i& (0+255),w,b
  1865  001596  6F76               	movwf	??_doDM& (0+255),b
  1866  001598  6B77               	clrf	(??_doDM+1)& (0+255),b
  1867  00159A  90D8               	bcf	status,0,c
  1868  00159C  3776               	rlcf	??_doDM& (0+255),f,b
  1869  00159E  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1870  0015A0  90D8               	bcf	status,0,c
  1871  0015A2  3776               	rlcf	??_doDM& (0+255),f,b
  1872  0015A4  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1873  0015A6  90D8               	bcf	status,0,c
  1874  0015A8  3776               	rlcf	??_doDM& (0+255),f,b
  1875  0015AA  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1876  0015AC  0E38               	movlw	56
  1877  0015AE  2576               	addwf	??_doDM& (0+255),w,b
  1878  0015B0  6E08               	movwf	?_Read_b_eep,c
  1879  0015B2  0E00               	movlw	0
  1880  0015B4  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  1881  0015B6  6E09               	movwf	?_Read_b_eep+1,c
  1882  0015B8  EC07  F018         	call	_Read_b_eep	;wreg free
  1883  0015BC  0100               	movlb	0	; () banked
  1884  0015BE  19A9               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  1885  0015C0  E001 D11C          	bnz	l7650
  1886  0015C4                     l291:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;main.c: 859: }
  1890                           ;main.c: 862: if ( dmflags & 0x10 ) {
  1891  0015C4  A983               	btfss	doDM@dmflags& (0+255),4,b
  1892  0015C6  D00B               	goto	l293
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 863: if ( 255 != vscp_imsg.data[ 1 ] ) {
  1896  0015C8  29AB               	incf	(_vscp_imsg+7)& (0+255),w,b
  1897  0015CA  E009               	bz	l293
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 864: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x21 + 0) ) {
  1901  0015CC  6A09               	clrf	?_Read_b_eep+1,c
  1902  0015CE  0E21               	movlw	33
  1903  0015D0  6E08               	movwf	?_Read_b_eep,c
  1904  0015D2  EC07  F018         	call	_Read_b_eep	;wreg free
  1905  0015D6  0100               	movlb	0	; () banked
  1906  0015D8  19AB               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  1907  0015DA  E001 D10F          	bnz	l7650
  1908  0015DE                     l293:
  1909                           
  1910                           ; BSR set to: 0
  1911                           ;main.c: 866: }
  1912                           ;main.c: 867: }
  1913                           ;main.c: 868: }
  1914                           ;main.c: 871: if ( dmflags & 0x08 ) {
  1915  0015DE  A783               	btfss	doDM@dmflags& (0+255),3,b
  1916  0015E0  D00B               	goto	l7618
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;main.c: 872: if ( 255 != vscp_imsg.data[ 2 ] ) {
  1920  0015E2  29AC               	incf	(_vscp_imsg+8)& (0+255),w,b
  1921  0015E4  E009               	bz	l7618
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;main.c: 873: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x21 + 0) ) {
  1925  0015E6  6A09               	clrf	?_Read_b_eep+1,c
  1926  0015E8  0E21               	movlw	33
  1927  0015EA  6E08               	movwf	?_Read_b_eep,c
  1928  0015EC  EC07  F018         	call	_Read_b_eep	;wreg free
  1929  0015F0  0100               	movlb	0	; () banked
  1930  0015F2  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  1931  0015F4  E001 D102          	bnz	l7650
  1932  0015F8                     l7618:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 875: }
  1936                           ;main.c: 876: }
  1937                           ;main.c: 877: }
  1938                           ;main.c: 879: class_filter = ( dmflags & 0x01)*256 +
  1939                           ;main.c: 880: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 3);
  1940  0015F8  5184               	movf	doDM@i& (0+255),w,b
  1941  0015FA  0D08               	mullw	8
  1942  0015FC  0E3B               	movlw	59
  1943  0015FE  24F3               	addwf	prodl,w,c
  1944  001600  6E08               	movwf	?_Read_b_eep,c
  1945  001602  0E00               	movlw	0
  1946  001604  20F4               	addwfc	prodh,w,c
  1947  001606  6E09               	movwf	?_Read_b_eep+1,c
  1948  001608  EC07  F018         	call	_Read_b_eep	;wreg free
  1949  00160C  0100               	movlb	0	; () banked
  1950  00160E  6F76               	movwf	??_doDM& (0+255),b
  1951  001610  5183               	movf	doDM@dmflags& (0+255),w,b
  1952  001612  0B01               	andlw	1
  1953  001614  6F78               	movwf	(??_doDM+2)& (0+255),b
  1954  001616  6B77               	clrf	(??_doDM+1)& (0+255),b
  1955  001618  5176               	movf	??_doDM& (0+255),w,b
  1956  00161A  2577               	addwf	(??_doDM+1)& (0+255),w,b
  1957  00161C  6F79               	movwf	doDM@class_filter& (0+255),b
  1958  00161E  0E00               	movlw	0
  1959  001620  2178               	addwfc	(??_doDM+2)& (0+255),w,b
  1960  001622  6F7A               	movwf	(doDM@class_filter+1)& (0+255),b
  1961                           
  1962                           ;main.c: 884: class_mask = ( dmflags & 0x02)*256 +
  1963                           ;main.c: 885: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 2);
  1964  001624  5184               	movf	doDM@i& (0+255),w,b
  1965  001626  0D08               	mullw	8
  1966  001628  0E3A               	movlw	58
  1967  00162A  24F3               	addwf	prodl,w,c
  1968  00162C  6E08               	movwf	?_Read_b_eep,c
  1969  00162E  0E00               	movlw	0
  1970  001630  20F4               	addwfc	prodh,w,c
  1971  001632  6E09               	movwf	?_Read_b_eep+1,c
  1972  001634  EC07  F018         	call	_Read_b_eep	;wreg free
  1973  001638  0100               	movlb	0	; () banked
  1974  00163A  6F76               	movwf	??_doDM& (0+255),b
  1975  00163C  5183               	movf	doDM@dmflags& (0+255),w,b
  1976  00163E  0B02               	andlw	2
  1977  001640  6F78               	movwf	(??_doDM+2)& (0+255),b
  1978  001642  6B77               	clrf	(??_doDM+1)& (0+255),b
  1979  001644  5176               	movf	??_doDM& (0+255),w,b
  1980  001646  2577               	addwf	(??_doDM+1)& (0+255),w,b
  1981  001648  6F7B               	movwf	doDM@class_mask& (0+255),b
  1982  00164A  0E00               	movlw	0
  1983  00164C  2178               	addwfc	(??_doDM+2)& (0+255),w,b
  1984  00164E  6F7C               	movwf	(doDM@class_mask+1)& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;main.c: 889: type_filter = Read_b_eep(0x21 + 23 + 0 + (8 * i) + 5);
  1988  001650  5184               	movf	doDM@i& (0+255),w,b
  1989  001652  6F76               	movwf	??_doDM& (0+255),b
  1990  001654  6B77               	clrf	(??_doDM+1)& (0+255),b
  1991  001656  90D8               	bcf	status,0,c
  1992  001658  3776               	rlcf	??_doDM& (0+255),f,b
  1993  00165A  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1994  00165C  90D8               	bcf	status,0,c
  1995  00165E  3776               	rlcf	??_doDM& (0+255),f,b
  1996  001660  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  1997  001662  90D8               	bcf	status,0,c
  1998  001664  3776               	rlcf	??_doDM& (0+255),f,b
  1999  001666  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2000  001668  0E3D               	movlw	61
  2001  00166A  2576               	addwf	??_doDM& (0+255),w,b
  2002  00166C  6E08               	movwf	?_Read_b_eep,c
  2003  00166E  0E00               	movlw	0
  2004  001670  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2005  001672  6E09               	movwf	?_Read_b_eep+1,c
  2006  001674  EC07  F018         	call	_Read_b_eep	;wreg free
  2007  001678  0100               	movlb	0	; () banked
  2008  00167A  6F7D               	movwf	doDM@type_filter& (0+255),b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;main.c: 893: type_mask = Read_b_eep(0x21 + 23 + 0 + (8 * i) + 4);
  2012  00167C  5184               	movf	doDM@i& (0+255),w,b
  2013  00167E  6F76               	movwf	??_doDM& (0+255),b
  2014  001680  6B77               	clrf	(??_doDM+1)& (0+255),b
  2015  001682  90D8               	bcf	status,0,c
  2016  001684  3776               	rlcf	??_doDM& (0+255),f,b
  2017  001686  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2018  001688  90D8               	bcf	status,0,c
  2019  00168A  3776               	rlcf	??_doDM& (0+255),f,b
  2020  00168C  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2021  00168E  90D8               	bcf	status,0,c
  2022  001690  3776               	rlcf	??_doDM& (0+255),f,b
  2023  001692  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2024  001694  0E3C               	movlw	60
  2025  001696  2576               	addwf	??_doDM& (0+255),w,b
  2026  001698  6E08               	movwf	?_Read_b_eep,c
  2027  00169A  0E00               	movlw	0
  2028  00169C  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2029  00169E  6E09               	movwf	?_Read_b_eep+1,c
  2030  0016A0  EC07  F018         	call	_Read_b_eep	;wreg free
  2031  0016A4  0100               	movlb	0	; () banked
  2032  0016A6  6F7E               	movwf	doDM@type_mask& (0+255),b
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;main.c: 898: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2036                           ;main.c: 899: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2037  0016A8  EE20  F0A6         	lfsr	2,_vscp_imsg+2
  2038  0016AC  CFDE F076          	movff	postinc2,??_doDM
  2039  0016B0  CFDD F077          	movff	postdec2,??_doDM+1
  2040  0016B4  5179               	movf	doDM@class_filter& (0+255),w,b
  2041  0016B6  1B76               	xorwf	??_doDM& (0+255),f,b
  2042  0016B8  517A               	movf	(doDM@class_filter+1)& (0+255),w,b
  2043  0016BA  1B77               	xorwf	(??_doDM+1)& (0+255),f,b
  2044  0016BC  517B               	movf	doDM@class_mask& (0+255),w,b
  2045  0016BE  1776               	andwf	??_doDM& (0+255),f,b
  2046  0016C0  517C               	movf	(doDM@class_mask+1)& (0+255),w,b
  2047  0016C2  1777               	andwf	(??_doDM+1)& (0+255),f,b
  2048  0016C4  5177               	movf	(??_doDM+1)& (0+255),w,b
  2049  0016C6  1176               	iorwf	??_doDM& (0+255),w,b
  2050  0016C8  E001 D098          	bnz	l7650
  2051                           
  2052                           ; BSR set to: 0
  2053  0016CC  51A8               	movf	(_vscp_imsg+4)& (0+255),w,b
  2054  0016CE  197D               	xorwf	doDM@type_filter& (0+255),w,b
  2055  0016D0  157E               	andwf	doDM@type_mask& (0+255),w,b
  2056  0016D2  E075               	bz	l7648
  2057  0016D4  D093               	goto	l7650
  2058  0016D6                     l7630:
  2059                           
  2060                           ;main.c: 910: actionSet( dmflags,
  2061                           ;main.c: 911: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2062  0016D6  0100               	movlb	0	; () banked
  2063  0016D8  5184               	movf	doDM@i& (0+255),w,b
  2064  0016DA  6F76               	movwf	??_doDM& (0+255),b
  2065  0016DC  6B77               	clrf	(??_doDM+1)& (0+255),b
  2066  0016DE  90D8               	bcf	status,0,c
  2067  0016E0  3776               	rlcf	??_doDM& (0+255),f,b
  2068  0016E2  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2069  0016E4  90D8               	bcf	status,0,c
  2070  0016E6  3776               	rlcf	??_doDM& (0+255),f,b
  2071  0016E8  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2072  0016EA  90D8               	bcf	status,0,c
  2073  0016EC  3776               	rlcf	??_doDM& (0+255),f,b
  2074  0016EE  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2075  0016F0  0E3F               	movlw	63
  2076  0016F2  2576               	addwf	??_doDM& (0+255),w,b
  2077  0016F4  6E08               	movwf	?_Read_b_eep,c
  2078  0016F6  0E00               	movlw	0
  2079  0016F8  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2080  0016FA  6E09               	movwf	?_Read_b_eep+1,c
  2081  0016FC  EC07  F018         	call	_Read_b_eep	;wreg free
  2082  001700  0100               	movlb	0	; () banked
  2083  001702  6F7F               	movwf	_doDM$1998& (0+255),b
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;main.c: 910: actionSet( dmflags,
  2087                           ;main.c: 911: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2088  001704  C07F  F04F         	movff	_doDM$1998,?_actionSet
  2089  001708  5183               	movf	doDM@dmflags& (0+255),w,b
  2090  00170A  EC26  F013         	call	_actionSet
  2091                           
  2092                           ;main.c: 914: break;
  2093  00170E  D076               	goto	l7650
  2094  001710                     l7634:
  2095                           
  2096                           ;main.c: 917: actionClr( dmflags,
  2097                           ;main.c: 918: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2098  001710  0100               	movlb	0	; () banked
  2099  001712  5184               	movf	doDM@i& (0+255),w,b
  2100  001714  6F76               	movwf	??_doDM& (0+255),b
  2101  001716  6B77               	clrf	(??_doDM+1)& (0+255),b
  2102  001718  90D8               	bcf	status,0,c
  2103  00171A  3776               	rlcf	??_doDM& (0+255),f,b
  2104  00171C  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2105  00171E  90D8               	bcf	status,0,c
  2106  001720  3776               	rlcf	??_doDM& (0+255),f,b
  2107  001722  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2108  001724  90D8               	bcf	status,0,c
  2109  001726  3776               	rlcf	??_doDM& (0+255),f,b
  2110  001728  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2111  00172A  0E3F               	movlw	63
  2112  00172C  2576               	addwf	??_doDM& (0+255),w,b
  2113  00172E  6E08               	movwf	?_Read_b_eep,c
  2114  001730  0E00               	movlw	0
  2115  001732  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2116  001734  6E09               	movwf	?_Read_b_eep+1,c
  2117  001736  EC07  F018         	call	_Read_b_eep	;wreg free
  2118  00173A  0100               	movlb	0	; () banked
  2119  00173C  6F80               	movwf	_doDM$1999& (0+255),b
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;main.c: 917: actionClr( dmflags,
  2123                           ;main.c: 918: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2124  00173E  C080  F04F         	movff	_doDM$1999,?_actionClr
  2125  001742  5183               	movf	doDM@dmflags& (0+255),w,b
  2126  001744  ECBE  F012         	call	_actionClr
  2127                           
  2128                           ;main.c: 921: break;
  2129  001748  D059               	goto	l7650
  2130  00174A                     l7638:
  2131                           
  2132                           ;main.c: 924: actionSetAll( dmflags,
  2133                           ;main.c: 925: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2134  00174A  0100               	movlb	0	; () banked
  2135  00174C  5184               	movf	doDM@i& (0+255),w,b
  2136  00174E  6F76               	movwf	??_doDM& (0+255),b
  2137  001750  6B77               	clrf	(??_doDM+1)& (0+255),b
  2138  001752  90D8               	bcf	status,0,c
  2139  001754  3776               	rlcf	??_doDM& (0+255),f,b
  2140  001756  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2141  001758  90D8               	bcf	status,0,c
  2142  00175A  3776               	rlcf	??_doDM& (0+255),f,b
  2143  00175C  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2144  00175E  90D8               	bcf	status,0,c
  2145  001760  3776               	rlcf	??_doDM& (0+255),f,b
  2146  001762  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2147  001764  0E3F               	movlw	63
  2148  001766  2576               	addwf	??_doDM& (0+255),w,b
  2149  001768  6E08               	movwf	?_Read_b_eep,c
  2150  00176A  0E00               	movlw	0
  2151  00176C  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2152  00176E  6E09               	movwf	?_Read_b_eep+1,c
  2153  001770  EC07  F018         	call	_Read_b_eep	;wreg free
  2154  001774  0100               	movlb	0	; () banked
  2155  001776  6F81               	movwf	_doDM$2000& (0+255),b
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 924: actionSetAll( dmflags,
  2159                           ;main.c: 925: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2160  001778  C081  F04F         	movff	_doDM$2000,?_actionSetAll
  2161  00177C  5183               	movf	doDM@dmflags& (0+255),w,b
  2162  00177E  EC9B  F016         	call	_actionSetAll
  2163                           
  2164                           ;main.c: 928: break;
  2165  001782  D03C               	goto	l7650
  2166  001784                     l7642:
  2167                           
  2168                           ;main.c: 931: actionClrAll( dmflags,
  2169                           ;main.c: 932: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2170  001784  0100               	movlb	0	; () banked
  2171  001786  5184               	movf	doDM@i& (0+255),w,b
  2172  001788  6F76               	movwf	??_doDM& (0+255),b
  2173  00178A  6B77               	clrf	(??_doDM+1)& (0+255),b
  2174  00178C  90D8               	bcf	status,0,c
  2175  00178E  3776               	rlcf	??_doDM& (0+255),f,b
  2176  001790  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2177  001792  90D8               	bcf	status,0,c
  2178  001794  3776               	rlcf	??_doDM& (0+255),f,b
  2179  001796  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2180  001798  90D8               	bcf	status,0,c
  2181  00179A  3776               	rlcf	??_doDM& (0+255),f,b
  2182  00179C  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2183  00179E  0E3F               	movlw	63
  2184  0017A0  2576               	addwf	??_doDM& (0+255),w,b
  2185  0017A2  6E08               	movwf	?_Read_b_eep,c
  2186  0017A4  0E00               	movlw	0
  2187  0017A6  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2188  0017A8  6E09               	movwf	?_Read_b_eep+1,c
  2189  0017AA  EC07  F018         	call	_Read_b_eep	;wreg free
  2190  0017AE  0100               	movlb	0	; () banked
  2191  0017B0  6F82               	movwf	_doDM$2001& (0+255),b
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;main.c: 931: actionClrAll( dmflags,
  2195                           ;main.c: 932: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2196  0017B2  C082  F04F         	movff	_doDM$2001,?_actionClrAll
  2197  0017B6  5183               	movf	doDM@dmflags& (0+255),w,b
  2198  0017B8  EC83  F016         	call	_actionClrAll
  2199                           
  2200                           ;main.c: 935: break;
  2201  0017BC  D01F               	goto	l7650
  2202  0017BE                     l7648:
  2203                           
  2204                           ; BSR set to: 0
  2205  0017BE  5184               	movf	doDM@i& (0+255),w,b
  2206  0017C0  6F76               	movwf	??_doDM& (0+255),b
  2207  0017C2  6B77               	clrf	(??_doDM+1)& (0+255),b
  2208  0017C4  90D8               	bcf	status,0,c
  2209  0017C6  3776               	rlcf	??_doDM& (0+255),f,b
  2210  0017C8  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2211  0017CA  90D8               	bcf	status,0,c
  2212  0017CC  3776               	rlcf	??_doDM& (0+255),f,b
  2213  0017CE  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2214  0017D0  90D8               	bcf	status,0,c
  2215  0017D2  3776               	rlcf	??_doDM& (0+255),f,b
  2216  0017D4  3777               	rlcf	(??_doDM+1)& (0+255),f,b
  2217  0017D6  0E3E               	movlw	62
  2218  0017D8  2576               	addwf	??_doDM& (0+255),w,b
  2219  0017DA  6E08               	movwf	?_Read_b_eep,c
  2220  0017DC  0E00               	movlw	0
  2221  0017DE  2177               	addwfc	(??_doDM+1)& (0+255),w,b
  2222  0017E0  6E09               	movwf	?_Read_b_eep+1,c
  2223  0017E2  EC07  F018         	call	_Read_b_eep	;wreg free
  2224                           
  2225                           ; Switch size 1, requested type "speed"
  2226                           ; Number of cases is 5, Range of values is 0 to 4
  2227                           ; switch strategies available:
  2228                           ; Name         Instructions Cycles
  2229                           ; simple_byte           16     9 (average)
  2230                           ;	Chosen strategy is simple_byte
  2231  0017E6  0A00               	xorlw	0	; case 0
  2232  0017E8  E009               	bz	l7650
  2233  0017EA  0A01               	xorlw	1	; case 1
  2234  0017EC  E101 D773          	bz	l7630
  2235  0017F0  0A03               	xorlw	3	; case 2
  2236  0017F2  E08E               	bz	l7634
  2237  0017F4  0A01               	xorlw	1	; case 3
  2238  0017F6  E0A9               	bz	l7638
  2239  0017F8  0A07               	xorlw	7	; case 4
  2240  0017FA  E0C4               	bz	l7642
  2241  0017FC                     l7650:
  2242  0017FC  0100               	movlb	0	; () banked
  2243  0017FE  2B84               	incf	doDM@i& (0+255),f,b
  2244                           
  2245                           ; BSR set to: 0
  2246  001800  0E07               	movlw	7
  2247  001802  6584               	cpfsgt	doDM@i& (0+255),b
  2248  001804  D6AD               	goto	l7596
  2249  001806  0C07               	retlw	7
  2250  001808                     __end_of_doDM:
  2251                           	opt stack 0
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           postinc0	equ	0xFEE
  2255                           wreg	equ	0xFE8
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           status	equ	0xFD8
  2259                           
  2260 ;; *************** function _actionClrAll *****************
  2261 ;; Defined at:
  2262 ;;		line 1178 in file "../main.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  dmflags         1    wreg     unsigned char 
  2265 ;;  param           1   78[COMRAM] unsigned char 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  dmflags         1    0[COMRAM] unsigned char 
  2268 ;;  i               2   79[COMRAM] int 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;		None               void
  2271 ;; Registers used:
  2272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2273 ;; Tracked objects:
  2274 ;;		On entry : F/0
  2275 ;;		On exit  : F/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2278 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2281 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2282 ;;Total ram usage:        3 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    7
  2285 ;; This function calls:
  2286 ;;		_SendInformationEvent
  2287 ;; This function is called by:
  2288 ;;		_doDM
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text9
  2293  002D06                     __ptext9:
  2294                           	opt stack 0
  2295  002D06                     _actionClrAll:
  2296                           	opt stack 22
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;main.c: 1179: PORTA = 0x00;
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;incstack = 0
  2303                           ;incstack = 0
  2304  002D06  6A80               	clrf	3968,c	;volatile
  2305                           
  2306                           ;main.c: 1180: PORTB = 0x00;
  2307  002D08  6A81               	clrf	3969,c	;volatile
  2308                           
  2309                           ;main.c: 1181: PORTC = 0x00;
  2310  002D0A  6A82               	clrf	3970,c	;volatile
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 1183: for ( int i=3; i<21; i++ ) {
  2314  002D0C  6A51               	clrf	actionClrAll@i+1,c
  2315  002D0E  0E03               	movlw	3
  2316  002D10  6E50               	movwf	actionClrAll@i,c
  2317  002D12                     l6678:
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;main.c: 1184: SendInformationEvent( i,
  2321                           ;main.c: 1185: 20,
  2322                           ;main.c: 1186: 4 );
  2323  002D12  0E14               	movlw	20
  2324  002D14  6F74               	movwf	?_SendInformationEvent& (0+255),b
  2325  002D16  0E04               	movlw	4
  2326  002D18  6F75               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2327  002D1A  5050               	movf	actionClrAll@i,w,c
  2328  002D1C  ECB6  F015         	call	_SendInformationEvent
  2329                           
  2330                           ; BSR set to: 0
  2331  002D20  4A50               	infsnz	actionClrAll@i,f,c
  2332  002D22  2A51               	incf	actionClrAll@i+1,f,c
  2333                           
  2334                           ; BSR set to: 0
  2335  002D24  5051               	movf	actionClrAll@i+1,w,c
  2336  002D26  0A80               	xorlw	128
  2337  002D28  0F80               	addlw	-128
  2338  002D2A  0E15               	movlw	21
  2339  002D2C  B4D8               	btfsc	status,2,c
  2340  002D2E  5C50               	subwf	actionClrAll@i,w,c
  2341  002D30  B0D8               	btfsc	status,0,c
  2342  002D32  0012               	return	
  2343  002D34  D7EE               	goto	l6678
  2344  002D36                     __end_of_actionClrAll:
  2345                           	opt stack 0
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           postinc2	equ	0xFDE
  2351                           postdec2	equ	0xFDD
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _actionSetAll *****************
  2355 ;; Defined at:
  2356 ;;		line 1159 in file "../main.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  dmflags         1    wreg     unsigned char 
  2359 ;;  param           1   78[COMRAM] unsigned char 
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;  dmflags         1    0[COMRAM] unsigned char 
  2362 ;;  i               2   79[COMRAM] int 
  2363 ;; Return value:  Size  Location     Type
  2364 ;;		None               void
  2365 ;; Registers used:
  2366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2367 ;; Tracked objects:
  2368 ;;		On entry : F/0
  2369 ;;		On exit  : F/0
  2370 ;;		Unchanged: 0/0
  2371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2372 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2375 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2376 ;;Total ram usage:        3 bytes
  2377 ;; Hardware stack levels used:    1
  2378 ;; Hardware stack levels required when called:    7
  2379 ;; This function calls:
  2380 ;;		_SendInformationEvent
  2381 ;; This function is called by:
  2382 ;;		_doDM
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text10
  2387  002D36                     __ptext10:
  2388                           	opt stack 0
  2389  002D36                     _actionSetAll:
  2390                           	opt stack 22
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;main.c: 1160: PORTA = 0xff;
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;incstack = 0
  2397                           ;incstack = 0
  2398  002D36  6880               	setf	3968,c	;volatile
  2399                           
  2400                           ;main.c: 1161: PORTB = 0xff;
  2401  002D38  6881               	setf	3969,c	;volatile
  2402                           
  2403                           ;main.c: 1162: PORTC = 0xff;
  2404  002D3A  6882               	setf	3970,c	;volatile
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;main.c: 1164: for ( int i=3; i<21; i++ ) {
  2408  002D3C  6A51               	clrf	actionSetAll@i+1,c
  2409  002D3E  0E03               	movlw	3
  2410  002D40  6E50               	movwf	actionSetAll@i,c
  2411  002D42                     l6664:
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;main.c: 1165: SendInformationEvent( i,
  2415                           ;main.c: 1166: 20,
  2416                           ;main.c: 1167: 3 );
  2417  002D42  0E14               	movlw	20
  2418  002D44  6F74               	movwf	?_SendInformationEvent& (0+255),b
  2419  002D46  0E03               	movlw	3
  2420  002D48  6F75               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2421  002D4A  5050               	movf	actionSetAll@i,w,c
  2422  002D4C  ECB6  F015         	call	_SendInformationEvent
  2423                           
  2424                           ; BSR set to: 0
  2425  002D50  4A50               	infsnz	actionSetAll@i,f,c
  2426  002D52  2A51               	incf	actionSetAll@i+1,f,c
  2427                           
  2428                           ; BSR set to: 0
  2429  002D54  5051               	movf	actionSetAll@i+1,w,c
  2430  002D56  0A80               	xorlw	128
  2431  002D58  0F80               	addlw	-128
  2432  002D5A  0E15               	movlw	21
  2433  002D5C  B4D8               	btfsc	status,2,c
  2434  002D5E  5C50               	subwf	actionSetAll@i,w,c
  2435  002D60  B0D8               	btfsc	status,0,c
  2436  002D62  0012               	return	
  2437  002D64  D7EE               	goto	l6664
  2438  002D66                     __end_of_actionSetAll:
  2439                           	opt stack 0
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           postinc0	equ	0xFEE
  2443                           wreg	equ	0xFE8
  2444                           postinc2	equ	0xFDE
  2445                           postdec2	equ	0xFDD
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _actionClr *****************
  2449 ;; Defined at:
  2450 ;;		line 1055 in file "../main.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  dmflags         1    wreg     unsigned char 
  2453 ;;  param           1   78[COMRAM] unsigned char 
  2454 ;; Auto vars:     Size  Location     Type
  2455 ;;  dmflags         1    0[COMRAM] unsigned char 
  2456 ;; Return value:  Size  Location     Type
  2457 ;;		None               void
  2458 ;; Registers used:
  2459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2460 ;; Tracked objects:
  2461 ;;		On entry : F/0
  2462 ;;		On exit  : F/0
  2463 ;;		Unchanged: 0/0
  2464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2465 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2468 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2469 ;;Total ram usage:        1 bytes
  2470 ;; Hardware stack levels used:    1
  2471 ;; Hardware stack levels required when called:    7
  2472 ;; This function calls:
  2473 ;;		_Read_b_eep
  2474 ;;		_SendInformationEvent
  2475 ;; This function is called by:
  2476 ;;		_doDM
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text11
  2481  00257C                     __ptext11:
  2482                           	opt stack 0
  2483  00257C                     _actionClr:
  2484                           	opt stack 22
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;main.c: 1057: if ( param & 0x80 ) {
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;incstack = 0
  2491                           ;incstack = 0
  2492  00257C  AE4F               	btfss	actionClr@param,7,c
  2493  00257E  D00D               	goto	l6642
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;main.c: 1059: param &= 0x7f;
  2497  002580  9E4F               	bcf	actionClr@param,7,c
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;main.c: 1061: if ( Read_b_eep(0x21 + 5 + (param - 3))
  2501                           ;main.c: 1062: != vscp_imsg.data[ 2 ] ) {
  2502  002582  0E23               	movlw	35
  2503  002584  244F               	addwf	actionClr@param,w,c
  2504  002586  6E08               	movwf	?_Read_b_eep,c
  2505  002588  6A09               	clrf	?_Read_b_eep+1,c
  2506  00258A  0E00               	movlw	0
  2507  00258C  2209               	addwfc	?_Read_b_eep+1,f,c
  2508  00258E  EC07  F018         	call	_Read_b_eep	;wreg free
  2509  002592  0100               	movlb	0	; () banked
  2510  002594  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2511  002596  A4D8               	btfss	status,2,c
  2512  002598  0012               	return	
  2513  00259A                     l6642:
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;main.c: 1064: }
  2517                           ;main.c: 1065: }
  2518                           ;main.c: 1067: if ( param < 3) return;
  2519  00259A  0E03               	movlw	3
  2520  00259C  604F               	cpfslt	actionClr@param,c
  2521  00259E  D001               	goto	l6646
  2522  0025A0  0C03               	retlw	3
  2523  0025A2                     l6646:
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;main.c: 1068: if ( param > 20 ) return;
  2527  0025A2  0E14               	movlw	20
  2528  0025A4  644F               	cpfsgt	actionClr@param,c
  2529  0025A6  D001               	goto	l6650
  2530  0025A8  0C14               	retlw	20
  2531  0025AA                     l6650:
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 1070: SendInformationEvent( param,
  2535                           ;main.c: 1071: 20,
  2536                           ;main.c: 1072: 4 );
  2537  0025AA  0E14               	movlw	20
  2538  0025AC  6F74               	movwf	?_SendInformationEvent& (0+255),b
  2539  0025AE  0E04               	movlw	4
  2540  0025B0  6F75               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2541  0025B2  504F               	movf	actionClr@param,w,c
  2542  0025B4  ECB6  F015         	call	_SendInformationEvent
  2543                           
  2544                           ;main.c: 1074: switch ( param ) {
  2545  0025B8  D020               	goto	l6654
  2546  0025BA                     l342:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 1077: PORTCbits.RC7 = 0;
  2550  0025BA  9E82               	bcf	3970,7,c	;volatile
  2551                           
  2552                           ;main.c: 1078: break;
  2553  0025BC  0012               	return	
  2554  0025BE                     l344:
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;main.c: 1081: PORTCbits.RC6 = 0;
  2558  0025BE  9C82               	bcf	3970,6,c	;volatile
  2559                           
  2560                           ;main.c: 1082: break;
  2561  0025C0  0012               	return	
  2562  0025C2                     l345:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;main.c: 1085: PORTCbits.RC3 = 0;
  2566  0025C2  9682               	bcf	3970,3,c	;volatile
  2567                           
  2568                           ;main.c: 1086: break;
  2569  0025C4  0012               	return	
  2570  0025C6                     l346:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 1089: PORTCbits.RC4 = 0;
  2574  0025C6  9882               	bcf	3970,4,c	;volatile
  2575                           
  2576                           ;main.c: 1090: break;
  2577  0025C8  0012               	return	
  2578  0025CA                     l347:
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;main.c: 1093: PORTCbits.RC5 = 0;
  2582  0025CA  9A82               	bcf	3970,5,c	;volatile
  2583                           
  2584                           ;main.c: 1094: break;
  2585  0025CC  0012               	return	
  2586  0025CE                     l348:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 1097: PORTAbits.RA0 = 0;
  2590  0025CE  9080               	bcf	3968,0,c	;volatile
  2591                           
  2592                           ;main.c: 1098: break;
  2593  0025D0  0012               	return	
  2594  0025D2                     l349:
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;main.c: 1101: PORTAbits.RA1 = 0;
  2598  0025D2  9280               	bcf	3968,1,c	;volatile
  2599                           
  2600                           ;main.c: 1102: break;
  2601  0025D4  0012               	return	
  2602  0025D6                     l350:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;main.c: 1105: PORTAbits.RA2 = 0;
  2606  0025D6  9480               	bcf	3968,2,c	;volatile
  2607                           
  2608                           ;main.c: 1106: break;
  2609  0025D8  0012               	return	
  2610  0025DA                     l351:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 1109: PORTAbits.RA3 = 0;
  2614  0025DA  9680               	bcf	3968,3,c	;volatile
  2615                           
  2616                           ;main.c: 1110: break;
  2617  0025DC  0012               	return	
  2618  0025DE                     l352:
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;main.c: 1113: PORTAbits.RA5 = 0;
  2622  0025DE  9A80               	bcf	3968,5,c	;volatile
  2623                           
  2624                           ;main.c: 1114: break;
  2625  0025E0  0012               	return	
  2626  0025E2                     l355:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;main.c: 1125: PORTBbits.RB4 = 0;
  2630  0025E2  9881               	bcf	3969,4,c	;volatile
  2631                           
  2632                           ;main.c: 1126: break;
  2633  0025E4  0012               	return	
  2634  0025E6                     l356:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;main.c: 1129: PORTCbits.RC2 = 0;
  2638  0025E6  9482               	bcf	3970,2,c	;volatile
  2639                           
  2640                           ;main.c: 1130: break;
  2641  0025E8  0012               	return	
  2642  0025EA                     l357:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;main.c: 1133: PORTBbits.RB1 = 0;
  2646  0025EA  9281               	bcf	3969,1,c	;volatile
  2647                           
  2648                           ;main.c: 1134: break;
  2649  0025EC  0012               	return	
  2650  0025EE                     l358:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;main.c: 1137: PORTBbits.RB0 = 0;
  2654  0025EE  9081               	bcf	3969,0,c	;volatile
  2655                           
  2656                           ;main.c: 1138: break;
  2657  0025F0  0012               	return	
  2658  0025F2                     l359:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 1141: PORTBbits.RB6 = 0;
  2662  0025F2  9C81               	bcf	3969,6,c	;volatile
  2663                           
  2664                           ;main.c: 1142: break;
  2665  0025F4  0012               	return	
  2666  0025F6                     l360:
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 1145: PORTBbits.RB5 = 0;
  2670  0025F6  9A81               	bcf	3969,5,c	;volatile
  2671                           
  2672                           ;main.c: 1146: break;
  2673  0025F8  0012               	return	
  2674  0025FA                     l6654:
  2675                           
  2676                           ; BSR set to: 0
  2677  0025FA  504F               	movf	actionClr@param,w,c
  2678                           
  2679                           ; Switch size 1, requested type "speed"
  2680                           ; Number of cases is 18, Range of values is 3 to 20
  2681                           ; switch strategies available:
  2682                           ; Name         Instructions Cycles
  2683                           ; simple_byte           55    28 (average)
  2684                           ;	Chosen strategy is simple_byte
  2685  0025FC  0A03               	xorlw	3	; case 3
  2686  0025FE  E0DD               	bz	l342
  2687  002600  0A07               	xorlw	7	; case 4
  2688  002602  E0DD               	bz	l344
  2689  002604  0A01               	xorlw	1	; case 5
  2690  002606  E0DD               	bz	l345
  2691  002608  0A03               	xorlw	3	; case 6
  2692  00260A  E0DD               	bz	l346
  2693  00260C  0A01               	xorlw	1	; case 7
  2694  00260E  E0DD               	bz	l347
  2695  002610  0A0F               	xorlw	15	; case 8
  2696  002612  E0DD               	bz	l348
  2697  002614  0A01               	xorlw	1	; case 9
  2698  002616  E0DD               	bz	l349
  2699  002618  0A03               	xorlw	3	; case 10
  2700  00261A  E0DD               	bz	l350
  2701  00261C  0A01               	xorlw	1	; case 11
  2702  00261E  E0DD               	bz	l351
  2703  002620  0A07               	xorlw	7	; case 12
  2704  002622  E0DD               	bz	l352
  2705  002624  0A01               	xorlw	1	; case 13
  2706  002626  B4D8               	btfsc	status,2,c
  2707  002628  0012               	return	
  2708  00262A  0A03               	xorlw	3	; case 14
  2709  00262C  B4D8               	btfsc	status,2,c
  2710  00262E  0012               	return	
  2711  002630  0A01               	xorlw	1	; case 15
  2712  002632  E0D7               	bz	l355
  2713  002634  0A1F               	xorlw	31	; case 16
  2714  002636  E0D7               	bz	l356
  2715  002638  0A01               	xorlw	1	; case 17
  2716  00263A  E0D7               	bz	l357
  2717  00263C  0A03               	xorlw	3	; case 18
  2718  00263E  E0D7               	bz	l358
  2719  002640  0A01               	xorlw	1	; case 19
  2720  002642  E0D7               	bz	l359
  2721  002644  0A07               	xorlw	7	; case 20
  2722  002646  A4D8               	btfss	status,2,c
  2723  002648  0012               	return	
  2724  00264A  D7D5               	goto	l360
  2725  00264C                     __end_of_actionClr:
  2726                           	opt stack 0
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           postinc0	equ	0xFEE
  2730                           wreg	equ	0xFE8
  2731                           postinc2	equ	0xFDE
  2732                           postdec2	equ	0xFDD
  2733                           status	equ	0xFD8
  2734                           
  2735 ;; *************** function _actionSet *****************
  2736 ;; Defined at:
  2737 ;;		line 952 in file "../main.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;  dmflags         1    wreg     unsigned char 
  2740 ;;  param           1   78[COMRAM] unsigned char 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;  dmflags         1    0[COMRAM] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;		None               void
  2745 ;; Registers used:
  2746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : F/0
  2749 ;;		On exit  : F/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2752 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2756 ;;Total ram usage:        1 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    7
  2759 ;; This function calls:
  2760 ;;		_Read_b_eep
  2761 ;;		_SendInformationEvent
  2762 ;; This function is called by:
  2763 ;;		_doDM
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text12
  2768  00264C                     __ptext12:
  2769                           	opt stack 0
  2770  00264C                     _actionSet:
  2771                           	opt stack 22
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;main.c: 954: if ( param & 0x80 ) {
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;incstack = 0
  2778                           ;incstack = 0
  2779  00264C  AE4F               	btfss	actionSet@param,7,c
  2780  00264E  D00D               	goto	l6620
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 956: param &= 0x7f;
  2784  002650  9E4F               	bcf	actionSet@param,7,c
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 958: if ( Read_b_eep(0x21 + 5 + (param - 3))
  2788                           ;main.c: 959: != vscp_imsg.data[ 2 ] ) {
  2789  002652  0E23               	movlw	35
  2790  002654  244F               	addwf	actionSet@param,w,c
  2791  002656  6E08               	movwf	?_Read_b_eep,c
  2792  002658  6A09               	clrf	?_Read_b_eep+1,c
  2793  00265A  0E00               	movlw	0
  2794  00265C  2209               	addwfc	?_Read_b_eep+1,f,c
  2795  00265E  EC07  F018         	call	_Read_b_eep	;wreg free
  2796  002662  0100               	movlb	0	; () banked
  2797  002664  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2798  002666  A4D8               	btfss	status,2,c
  2799  002668  0012               	return	
  2800  00266A                     l6620:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 961: }
  2804                           ;main.c: 962: }
  2805                           ;main.c: 964: if ( param < 3) return;
  2806  00266A  0E03               	movlw	3
  2807  00266C  604F               	cpfslt	actionSet@param,c
  2808  00266E  D001               	goto	l6624
  2809  002670  0C03               	retlw	3
  2810  002672                     l6624:
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;main.c: 965: if ( param > 20 ) return;
  2814  002672  0E14               	movlw	20
  2815  002674  644F               	cpfsgt	actionSet@param,c
  2816  002676  D001               	goto	l6628
  2817  002678  0C14               	retlw	20
  2818  00267A                     l6628:
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 967: SendInformationEvent( param,
  2822                           ;main.c: 968: 20,
  2823                           ;main.c: 969: 3 );
  2824  00267A  0E14               	movlw	20
  2825  00267C  6F74               	movwf	?_SendInformationEvent& (0+255),b
  2826  00267E  0E03               	movlw	3
  2827  002680  6F75               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2828  002682  504F               	movf	actionSet@param,w,c
  2829  002684  ECB6  F015         	call	_SendInformationEvent
  2830                           
  2831                           ;main.c: 971: switch ( param ) {
  2832  002688  D020               	goto	l6632
  2833  00268A                     l315:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;main.c: 974: PORTCbits.RC7 = 1;
  2837  00268A  8E82               	bsf	3970,7,c	;volatile
  2838                           
  2839                           ;main.c: 975: break;
  2840  00268C  0012               	return	
  2841  00268E                     l317:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 978: PORTCbits.RC6 = 1;
  2845  00268E  8C82               	bsf	3970,6,c	;volatile
  2846                           
  2847                           ;main.c: 979: break;
  2848  002690  0012               	return	
  2849  002692                     l318:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 982: PORTCbits.RC3 = 1;
  2853  002692  8682               	bsf	3970,3,c	;volatile
  2854                           
  2855                           ;main.c: 983: break;
  2856  002694  0012               	return	
  2857  002696                     l319:
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 986: PORTCbits.RC4 = 1;
  2861  002696  8882               	bsf	3970,4,c	;volatile
  2862                           
  2863                           ;main.c: 987: break;
  2864  002698  0012               	return	
  2865  00269A                     l320:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;main.c: 990: PORTCbits.RC5 = 1;
  2869  00269A  8A82               	bsf	3970,5,c	;volatile
  2870                           
  2871                           ;main.c: 991: break;
  2872  00269C  0012               	return	
  2873  00269E                     l321:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 994: PORTAbits.RA0 = 1;
  2877  00269E  8080               	bsf	3968,0,c	;volatile
  2878                           
  2879                           ;main.c: 995: break;
  2880  0026A0  0012               	return	
  2881  0026A2                     l322:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 998: PORTAbits.RA1 = 1;
  2885  0026A2  8280               	bsf	3968,1,c	;volatile
  2886                           
  2887                           ;main.c: 999: break;
  2888  0026A4  0012               	return	
  2889  0026A6                     l323:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;main.c: 1002: PORTAbits.RA2 = 1;
  2893  0026A6  8480               	bsf	3968,2,c	;volatile
  2894                           
  2895                           ;main.c: 1003: break;
  2896  0026A8  0012               	return	
  2897  0026AA                     l324:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;main.c: 1006: PORTAbits.RA3 = 1;
  2901  0026AA  8680               	bsf	3968,3,c	;volatile
  2902                           
  2903                           ;main.c: 1007: break;
  2904  0026AC  0012               	return	
  2905  0026AE                     l325:
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 1010: PORTAbits.RA5 = 1;
  2909  0026AE  8A80               	bsf	3968,5,c	;volatile
  2910                           
  2911                           ;main.c: 1011: break;
  2912  0026B0  0012               	return	
  2913  0026B2                     l328:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;main.c: 1022: PORTBbits.RB4 = 1;
  2917  0026B2  8881               	bsf	3969,4,c	;volatile
  2918                           
  2919                           ;main.c: 1023: break;
  2920  0026B4  0012               	return	
  2921  0026B6                     l329:
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;main.c: 1026: PORTCbits.RC2 = 1;
  2925  0026B6  8482               	bsf	3970,2,c	;volatile
  2926                           
  2927                           ;main.c: 1027: break;
  2928  0026B8  0012               	return	
  2929  0026BA                     l330:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;main.c: 1030: PORTBbits.RB1 = 1;
  2933  0026BA  8281               	bsf	3969,1,c	;volatile
  2934                           
  2935                           ;main.c: 1031: break;
  2936  0026BC  0012               	return	
  2937  0026BE                     l331:
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 1034: PORTBbits.RB0 = 1;
  2941  0026BE  8081               	bsf	3969,0,c	;volatile
  2942                           
  2943                           ;main.c: 1035: break;
  2944  0026C0  0012               	return	
  2945  0026C2                     l332:
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;main.c: 1038: PORTBbits.RB6 = 1;
  2949  0026C2  8C81               	bsf	3969,6,c	;volatile
  2950                           
  2951                           ;main.c: 1039: break;
  2952  0026C4  0012               	return	
  2953  0026C6                     l333:
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;main.c: 1042: PORTBbits.RB5 = 1;
  2957  0026C6  8A81               	bsf	3969,5,c	;volatile
  2958                           
  2959                           ;main.c: 1043: break;
  2960  0026C8  0012               	return	
  2961  0026CA                     l6632:
  2962                           
  2963                           ; BSR set to: 0
  2964  0026CA  504F               	movf	actionSet@param,w,c
  2965                           
  2966                           ; Switch size 1, requested type "speed"
  2967                           ; Number of cases is 18, Range of values is 3 to 20
  2968                           ; switch strategies available:
  2969                           ; Name         Instructions Cycles
  2970                           ; simple_byte           55    28 (average)
  2971                           ;	Chosen strategy is simple_byte
  2972  0026CC  0A03               	xorlw	3	; case 3
  2973  0026CE  E0DD               	bz	l315
  2974  0026D0  0A07               	xorlw	7	; case 4
  2975  0026D2  E0DD               	bz	l317
  2976  0026D4  0A01               	xorlw	1	; case 5
  2977  0026D6  E0DD               	bz	l318
  2978  0026D8  0A03               	xorlw	3	; case 6
  2979  0026DA  E0DD               	bz	l319
  2980  0026DC  0A01               	xorlw	1	; case 7
  2981  0026DE  E0DD               	bz	l320
  2982  0026E0  0A0F               	xorlw	15	; case 8
  2983  0026E2  E0DD               	bz	l321
  2984  0026E4  0A01               	xorlw	1	; case 9
  2985  0026E6  E0DD               	bz	l322
  2986  0026E8  0A03               	xorlw	3	; case 10
  2987  0026EA  E0DD               	bz	l323
  2988  0026EC  0A01               	xorlw	1	; case 11
  2989  0026EE  E0DD               	bz	l324
  2990  0026F0  0A07               	xorlw	7	; case 12
  2991  0026F2  E0DD               	bz	l325
  2992  0026F4  0A01               	xorlw	1	; case 13
  2993  0026F6  B4D8               	btfsc	status,2,c
  2994  0026F8  0012               	return	
  2995  0026FA  0A03               	xorlw	3	; case 14
  2996  0026FC  B4D8               	btfsc	status,2,c
  2997  0026FE  0012               	return	
  2998  002700  0A01               	xorlw	1	; case 15
  2999  002702  E0D7               	bz	l328
  3000  002704  0A1F               	xorlw	31	; case 16
  3001  002706  E0D7               	bz	l329
  3002  002708  0A01               	xorlw	1	; case 17
  3003  00270A  E0D7               	bz	l330
  3004  00270C  0A03               	xorlw	3	; case 18
  3005  00270E  E0D7               	bz	l331
  3006  002710  0A01               	xorlw	1	; case 19
  3007  002712  E0D7               	bz	l332
  3008  002714  0A07               	xorlw	7	; case 20
  3009  002716  A4D8               	btfss	status,2,c
  3010  002718  0012               	return	
  3011  00271A  D7D5               	goto	l333
  3012  00271C                     __end_of_actionSet:
  3013                           	opt stack 0
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           postinc0	equ	0xFEE
  3017                           wreg	equ	0xFE8
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           status	equ	0xFD8
  3021                           
  3022 ;; *************** function _SendInformationEvent *****************
  3023 ;; Defined at:
  3024 ;;		line 812 in file "../main.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  idx             1    wreg     unsigned char 
  3027 ;;  eventClass      1   20[BANK0 ] unsigned char 
  3028 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;  idx             1   77[COMRAM] unsigned char 
  3031 ;;  data            3   74[COMRAM] unsigned char [3]
  3032 ;; Return value:  Size  Location     Type
  3033 ;;		None               void
  3034 ;; Registers used:
  3035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3036 ;; Tracked objects:
  3037 ;;		On entry : F/0
  3038 ;;		On exit  : F/0
  3039 ;;		Unchanged: 0/0
  3040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3041 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3042 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3044 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3045 ;;Total ram usage:        6 bytes
  3046 ;; Hardware stack levels used:    1
  3047 ;; Hardware stack levels required when called:    6
  3048 ;; This function calls:
  3049 ;;		_Read_b_eep
  3050 ;;		_sendVSCPFrame
  3051 ;; This function is called by:
  3052 ;;		_actionSet
  3053 ;;		_actionClr
  3054 ;;		_actionSetAll
  3055 ;;		_actionClrAll
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           	psect	text13
  3060  002B6C                     __ptext13:
  3061                           	opt stack 0
  3062  002B6C                     _SendInformationEvent:
  3063                           	opt stack 22
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;incstack = 0
  3067                           ;incstack = 0
  3068                           ;SendInformationEvent@idx stored from wreg
  3069  002B6C  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;main.c: 813: uint8_t data[3];
  3073                           ;main.c: 814: idx -= 3;
  3074  002B70  0E03               	movlw	3
  3075  002B72  5E4E               	subwf	SendInformationEvent@idx,f,c
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 816: data[ 0 ] = idx;
  3079  002B74  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;main.c: 817: data[ 1 ] = Read_b_eep(0x21 + 0);
  3083  002B78  6A09               	clrf	?_Read_b_eep+1,c
  3084  002B7A  0E21               	movlw	33
  3085  002B7C  6E08               	movwf	?_Read_b_eep,c
  3086  002B7E  EC07  F018         	call	_Read_b_eep	;wreg free
  3087  002B82  6E4C               	movwf	SendInformationEvent@data+1,c
  3088                           
  3089                           ;main.c: 818: data[ 2 ] = Read_b_eep(0x21 + 5 + idx);
  3090  002B84  0E26               	movlw	38
  3091  002B86  244E               	addwf	SendInformationEvent@idx,w,c
  3092  002B88  6E08               	movwf	?_Read_b_eep,c
  3093  002B8A  6A09               	clrf	?_Read_b_eep+1,c
  3094  002B8C  0E00               	movlw	0
  3095  002B8E  2209               	addwfc	?_Read_b_eep+1,f,c
  3096  002B90  EC07  F018         	call	_Read_b_eep	;wreg free
  3097  002B94  6E4D               	movwf	SendInformationEvent@data+2,c
  3098                           
  3099                           ;main.c: 819: sendVSCPFrame( eventClass,
  3100                           ;main.c: 820: eventTypeId,
  3101                           ;main.c: 821: vscp_nickname,
  3102                           ;main.c: 822: 0x03,
  3103                           ;main.c: 823: 3,
  3104                           ;main.c: 824: data );
  3105  002B96  0100               	movlb	0	; () banked
  3106  002B98  C074  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  3107  002B9C  6A40               	clrf	?_sendVSCPFrame+1,c
  3108  002B9E  C075  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  3109  002BA2  C09F  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3110  002BA6  0E03               	movlw	3
  3111  002BA8  6E43               	movwf	?_sendVSCPFrame+4,c
  3112  002BAA  6E44               	movwf	?_sendVSCPFrame+5,c
  3113  002BAC  0E4B               	movlw	low SendInformationEvent@data
  3114  002BAE  6E45               	movwf	?_sendVSCPFrame+6,c
  3115  002BB0  0E00               	movlw	high SendInformationEvent@data
  3116  002BB2  6E46               	movwf	?_sendVSCPFrame+7,c
  3117  002BB4  0E0F               	movlw	15
  3118  002BB6  6E46               	movwf	?_sendVSCPFrame+7,c
  3119  002BB8  0E5F               	movlw	__accesstop+-1
  3120  002BBA  6445               	cpfsgt	?_sendVSCPFrame+6,c
  3121  002BBC  6A46               	clrf	?_sendVSCPFrame+7,c
  3122  002BBE  EF50  F014         	goto	_sendVSCPFrame	;wreg free
  3123  002BC2                     __end_of_SendInformationEvent:
  3124                           	opt stack 0
  3125                           prodh	equ	0xFF4
  3126                           prodl	equ	0xFF3
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           postinc2	equ	0xFDE
  3130                           postdec2	equ	0xFDD
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _vscp_handleProtocolEvent *****************
  3134 ;; Defined at:
  3135 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  bytes           1   33[BANK0 ] unsigned char 
  3140 ;;  page_save       2   29[BANK0 ] unsigned short 
  3141 ;;  i               1   39[BANK0 ] unsigned char 
  3142 ;;  bytes           2   43[BANK0 ] unsigned short 
  3143 ;;  page_save       2   27[BANK0 ] unsigned short 
  3144 ;;  byte            1   42[BANK0 ] unsigned char 
  3145 ;;  cb              1   38[BANK0 ] unsigned char 
  3146 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3147 ;;  j               1   47[BANK0 ] unsigned char 
  3148 ;;  i               1   45[BANK0 ] unsigned char 
  3149 ;;  k               1   40[BANK0 ] unsigned char 
  3150 ;;  i               1   41[BANK0 ] unsigned char 
  3151 ;;  len             1   36[BANK0 ] unsigned char 
  3152 ;;  pos             1   35[BANK0 ] unsigned char 
  3153 ;;  i               1   46[BANK0 ] unsigned char 
  3154 ;;  len             1   34[BANK0 ] unsigned char 
  3155 ;;  pos             1   32[BANK0 ] unsigned char 
  3156 ;;  offset          1   31[BANK0 ] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;		None               void
  3159 ;; Registers used:
  3160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : F/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3167 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3168 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3169 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3170 ;;Total ram usage:       28 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    8
  3173 ;; This function calls:
  3174 ;;		_vscp_init
  3175 ;;		_vscp_readAppReg
  3176 ;;		_vscp_writeAppReg
  3177 ;;		_vscp_sendEvent
  3178 ;;		_vscp_getGUID
  3179 ;;		_vscp_getMDF_URL
  3180 ;;		_vscp_goBootloaderMode
  3181 ;;		_vscp_getMatrixInfo
  3182 ;;		_vscp_handleHeartbeat
  3183 ;;		_vscp_handleSetNickname
  3184 ;;		_vscp_handleDropNickname
  3185 ;;		_vscp_newNodeOnline
  3186 ;;		_vscp_readRegister
  3187 ;;		_vscp_readStdReg
  3188 ;;		_vscp_writeRegister
  3189 ;;		_vscp_writeStdReg
  3190 ;;		___lbmod
  3191 ;; This function is called by:
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text14
  3197  000F22                     __ptext14:
  3198                           	opt stack 0
  3199  000F22                     _vscp_handleProtocolEvent:
  3200                           	opt stack 22
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;incstack = 0
  3207                           ;incstack = 0
  3208  000F22  51A7               	movf	(_vscp_imsg+3)& (0+255),w,b
  3209  000F24  11A6               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3210  000F26  A4D8               	btfss	status,2,c
  3211  000F28  0012               	return	
  3212  000F2A  D2E2               	goto	l7580
  3213  000F2C                     l7162:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  3217  000F2C  EF2B  F016         	goto	_vscp_handleHeartbeat	;wreg free
  3218  000F30                     l7164:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  3222  000F30  EFF8  F016         	goto	_vscp_newNodeOnline	;wreg free
  3223  000F34                     l7166:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  3227  000F34  EF7E  F017         	goto	_vscp_handleSetNickname	;wreg free
  3228  000F38                     l7168:
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  3232  000F38  EFB3  F016         	goto	_vscp_handleDropNickname	;wreg free
  3233  000F3C                     l7170:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  3237                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3238  000F3C  51A4               	movf	_vscp_imsg& (0+255),w,b
  3239  000F3E  0B0F               	andlw	15
  3240  000F40  0A02               	xorlw	2
  3241  000F42  A4D8               	btfss	status,2,c
  3242  000F44  0012               	return	
  3243                           
  3244                           ; BSR set to: 0
  3245  000F46  519F               	movf	_vscp_nickname& (0+255),w,b
  3246  000F48  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3247  000F4C  62DF               	cpfseq	indf2,c
  3248  000F4E  0012               	return	
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  3252  000F50  0E80               	movlw	128
  3253  000F52  61AB               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3254  000F54  D011               	goto	l7190
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3258  000F56  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3259  000F58  ECAA  F014         	call	_vscp_readAppReg
  3260  000F5C                     L1:
  3261  000F5C  0100               	movlb	0	; () banked
  3262  000F5E  6FB8               	movwf	(_vscp_omsg+6)& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3266  000F60  C0AB  F0B7         	movff	_vscp_imsg+7,_vscp_omsg+5
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  3270  000F64  0E03               	movlw	3
  3271  000F66  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  3275  000F68  0E82               	movlw	130
  3276  000F6A  6FB2               	movwf	_vscp_omsg& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  3280  000F6C  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  3281  000F6E  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  3285  000F70  0E0A               	movlw	10
  3286  000F72  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;vscp_firmware.c: 843: vscp_sendEvent();
  3290  000F74  EF34  F017         	goto	_vscp_sendEvent	;wreg free
  3291  000F78                     l7190:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;vscp_firmware.c: 845: else {
  3295                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  3296                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3297  000F78  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3298  000F7A  EC00  F00D         	call	_vscp_readStdReg
  3299  000F7E  D7EE               	goto	L1
  3300  000F80                     l7204:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3304                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3305  000F80  51A4               	movf	_vscp_imsg& (0+255),w,b
  3306  000F82  0B0F               	andlw	15
  3307  000F84  0A03               	xorlw	3
  3308  000F86  A4D8               	btfss	status,2,c
  3309  000F88  0012               	return	
  3310                           
  3311                           ; BSR set to: 0
  3312  000F8A  519F               	movf	_vscp_nickname& (0+255),w,b
  3313  000F8C  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3314  000F90  62DF               	cpfseq	indf2,c
  3315  000F92  0012               	return	
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  3319  000F94  0E80               	movlw	128
  3320  000F96  61AB               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3321  000F98  D006               	goto	l7224
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  3325                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3326  000F9A  C0AC  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3327  000F9E  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3328  000FA0  ECA9  F010         	call	_vscp_writeAppReg
  3329  000FA4  D7DB               	goto	L1
  3330  000FA6                     l7224:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;vscp_firmware.c: 888: else {
  3334                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  3335                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3336  000FA6  C0AC  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3337  000FAA  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3338  000FAC  ECCF  F011         	call	_vscp_writeStdReg
  3339  000FB0  D7D5               	goto	L1
  3340  000FB2                     l7238:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3344                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3345                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3346                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3347                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3348                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3349                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3350  000FB2  519F               	movf	_vscp_nickname& (0+255),w,b
  3351  000FB4  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3352  000FB8  62DF               	cpfseq	indf2,c
  3353  000FBA  0012               	return	
  3354                           
  3355                           ; BSR set to: 0
  3356  000FBC  0E00               	movlw	0
  3357  000FBE  EC6A  F018         	call	_vscp_getGUID
  3358  000FC2  0100               	movlb	0	; () banked
  3359  000FC4  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3360  000FC6  A4D8               	btfss	status,2,c
  3361  000FC8  0012               	return	
  3362                           
  3363                           ; BSR set to: 0
  3364  000FCA  0E03               	movlw	3
  3365  000FCC  EC6A  F018         	call	_vscp_getGUID
  3366  000FD0  0100               	movlb	0	; () banked
  3367  000FD2  19AD               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3368  000FD4  A4D8               	btfss	status,2,c
  3369  000FD6  0012               	return	
  3370                           
  3371                           ; BSR set to: 0
  3372  000FD8  0E05               	movlw	5
  3373  000FDA  EC6A  F018         	call	_vscp_getGUID
  3374  000FDE  0100               	movlb	0	; () banked
  3375  000FE0  19AE               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3376  000FE2  A4D8               	btfss	status,2,c
  3377  000FE4  0012               	return	
  3378                           
  3379                           ; BSR set to: 0
  3380  000FE6  0E07               	movlw	7
  3381  000FE8  EC6A  F018         	call	_vscp_getGUID
  3382  000FEC  0100               	movlb	0	; () banked
  3383  000FEE  19AF               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3384  000FF0  A4D8               	btfss	status,2,c
  3385  000FF2  0012               	return	
  3386                           
  3387                           ; BSR set to: 0
  3388  000FF4  5053               	movf	_vscp_page_select+1,w,c
  3389  000FF6  19B0               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3390  000FF8  A4D8               	btfss	status,2,c
  3391  000FFA  0012               	return	
  3392                           
  3393                           ; BSR set to: 0
  3394  000FFC  5052               	movf	_vscp_page_select,w,c
  3395  000FFE  EE20  F0B1         	lfsr	2,_vscp_imsg+13
  3396  001002  62DF               	cpfseq	indf2,c
  3397  001004  0012               	return	
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3401  001006  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3402  001008  EFBE  F017         	goto	_vscp_goBootloaderMode
  3403  00100C                     l7254:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3407                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3408                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3409                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3410  00100C  0E00               	movlw	0
  3411  00100E  EC6A  F018         	call	_vscp_getGUID
  3412  001012  0100               	movlb	0	; () banked
  3413  001014  19AB               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3414  001016  E173               	bnz	l7298
  3415                           
  3416                           ; BSR set to: 0
  3417  001018  0E01               	movlw	1
  3418  00101A  EC6A  F018         	call	_vscp_getGUID
  3419  00101E  0100               	movlb	0	; () banked
  3420  001020  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3421  001022  E16D               	bnz	l7298
  3422                           
  3423                           ; BSR set to: 0
  3424  001024  0E02               	movlw	2
  3425  001026  EC6A  F018         	call	_vscp_getGUID
  3426  00102A  0100               	movlb	0	; () banked
  3427  00102C  19AD               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3428  00102E  E167               	bnz	l7298
  3429                           
  3430                           ; BSR set to: 0
  3431  001030  0E03               	movlw	3
  3432  001032  EC6A  F018         	call	_vscp_getGUID
  3433  001036  0100               	movlb	0	; () banked
  3434  001038  19AE               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3435  00103A  E161               	bnz	l7298
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  3439  00103C  899B               	bsf	_vscp_guid_reset& (0+255),4,b
  3440  00103E  D05F               	goto	l7298
  3441  001040                     l7264:
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3445                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3446                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3447                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3448  001040  0E04               	movlw	4
  3449  001042  EC6A  F018         	call	_vscp_getGUID
  3450  001046  0100               	movlb	0	; () banked
  3451  001048  19AB               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3452  00104A  E159               	bnz	l7298
  3453                           
  3454                           ; BSR set to: 0
  3455  00104C  0E05               	movlw	5
  3456  00104E  EC6A  F018         	call	_vscp_getGUID
  3457  001052  0100               	movlb	0	; () banked
  3458  001054  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3459  001056  E153               	bnz	l7298
  3460                           
  3461                           ; BSR set to: 0
  3462  001058  0E06               	movlw	6
  3463  00105A  EC6A  F018         	call	_vscp_getGUID
  3464  00105E  0100               	movlb	0	; () banked
  3465  001060  19AD               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3466  001062  E14D               	bnz	l7298
  3467                           
  3468                           ; BSR set to: 0
  3469  001064  0E07               	movlw	7
  3470  001066  EC6A  F018         	call	_vscp_getGUID
  3471  00106A  0100               	movlb	0	; () banked
  3472  00106C  19AE               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3473  00106E  E147               	bnz	l7298
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  3477  001070  8B9B               	bsf	_vscp_guid_reset& (0+255),5,b
  3478  001072  D045               	goto	l7298
  3479  001074                     l7274:
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3483                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3484                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3485                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3486  001074  0E08               	movlw	8
  3487  001076  EC6A  F018         	call	_vscp_getGUID
  3488  00107A  0100               	movlb	0	; () banked
  3489  00107C  19AB               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3490  00107E  E13F               	bnz	l7298
  3491                           
  3492                           ; BSR set to: 0
  3493  001080  0E09               	movlw	9
  3494  001082  EC6A  F018         	call	_vscp_getGUID
  3495  001086  0100               	movlb	0	; () banked
  3496  001088  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3497  00108A  E139               	bnz	l7298
  3498                           
  3499                           ; BSR set to: 0
  3500  00108C  0E0A               	movlw	10
  3501  00108E  EC6A  F018         	call	_vscp_getGUID
  3502  001092  0100               	movlb	0	; () banked
  3503  001094  19AD               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3504  001096  E133               	bnz	l7298
  3505                           
  3506                           ; BSR set to: 0
  3507  001098  0E0B               	movlw	11
  3508  00109A  EC6A  F018         	call	_vscp_getGUID
  3509  00109E  0100               	movlb	0	; () banked
  3510  0010A0  19AE               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3511  0010A2  E12D               	bnz	l7298
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  3515  0010A4  8D9B               	bsf	_vscp_guid_reset& (0+255),6,b
  3516  0010A6  D02B               	goto	l7298
  3517  0010A8                     l7284:
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3521                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3522                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3523                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3524  0010A8  0E0C               	movlw	12
  3525  0010AA  EC6A  F018         	call	_vscp_getGUID
  3526  0010AE  0100               	movlb	0	; () banked
  3527  0010B0  19AB               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3528  0010B2  E125               	bnz	l7298
  3529                           
  3530                           ; BSR set to: 0
  3531  0010B4  0E0D               	movlw	13
  3532  0010B6  EC6A  F018         	call	_vscp_getGUID
  3533  0010BA  0100               	movlb	0	; () banked
  3534  0010BC  19AC               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3535  0010BE  E11F               	bnz	l7298
  3536                           
  3537                           ; BSR set to: 0
  3538  0010C0  0E0E               	movlw	14
  3539  0010C2  EC6A  F018         	call	_vscp_getGUID
  3540  0010C6  0100               	movlb	0	; () banked
  3541  0010C8  19AD               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3542  0010CA  E119               	bnz	l7298
  3543                           
  3544                           ; BSR set to: 0
  3545  0010CC  0E0F               	movlw	15
  3546  0010CE  EC6A  F018         	call	_vscp_getGUID
  3547  0010D2  0100               	movlb	0	; () banked
  3548  0010D4  19AE               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3549  0010D6  E113               	bnz	l7298
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  3553  0010D8  8F9B               	bsf	_vscp_guid_reset& (0+255),7,b
  3554  0010DA  D011               	goto	l7298
  3555  0010DC                     l1014:
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  3559  0010DC  6B9B               	clrf	_vscp_guid_reset& (0+255),b
  3560                           
  3561                           ;vscp_firmware.c: 965: break;
  3562  0010DE  D00F               	goto	l7298
  3563  0010E0                     l7296:
  3564                           
  3565                           ; BSR set to: 0
  3566  0010E0  39AA               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3567  0010E2  0B0F               	andlw	15
  3568  0010E4  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3569  0010E6  6B75               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3570                           
  3571                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3572                           ; Switch size 1, requested type "speed"
  3573                           ; Number of cases is 1, Range of values is 0 to 0
  3574                           ; switch strategies available:
  3575                           ; Name         Instructions Cycles
  3576                           ; simple_byte            4     3 (average)
  3577                           ;	Chosen strategy is simple_byte
  3578  0010E8  5175               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3579  0010EA  E1F8               	bnz	l1014
  3580                           
  3581                           ; BSR set to: 0
  3582                           ; Switch size 1, requested type "speed"
  3583                           ; Number of cases is 4, Range of values is 0 to 3
  3584                           ; switch strategies available:
  3585                           ; Name         Instructions Cycles
  3586                           ; simple_byte           13     7 (average)
  3587                           ;	Chosen strategy is simple_byte
  3588  0010EC  5174               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3589  0010EE  E08E               	bz	l7254
  3590  0010F0  0A01               	xorlw	1	; case 1
  3591  0010F2  E0A6               	bz	l7264
  3592  0010F4  0A03               	xorlw	3	; case 2
  3593  0010F6  E0BE               	bz	l7274
  3594  0010F8  0A01               	xorlw	1	; case 3
  3595  0010FA  E0D6               	bz	l7284
  3596  0010FC  D7EF               	goto	l1014
  3597  0010FE                     l7298:
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3601  0010FE  519B               	movf	_vscp_guid_reset& (0+255),w,b
  3602  001100  0BF0               	andlw	240
  3603  001102  0AF0               	xorlw	240
  3604  001104  B4D8               	btfsc	status,2,c
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;vscp_firmware.c: 970: vscp_init();
  3608  001106  EC09  F016         	call	_vscp_init	;wreg free
  3609  00110A  0012               	return	
  3610  00110C                     l7302:
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3614  00110C  519F               	movf	_vscp_nickname& (0+255),w,b
  3615  00110E  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3616  001112  62DF               	cpfseq	indf2,c
  3617  001114  0012               	return	
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;vscp_firmware.c: 978: uint8_t i;
  3621                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  3622  001116  6B80               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3623                           
  3624                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  3625  001118  C0AB  F07F         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3626                           
  3627                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  3628  00111C  C0AC  F082         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3629                           
  3630                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  3631  001120  6B8E               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3632  001122  D047               	goto	l7334
  3633  001124                     l7306:
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3637  001124  0E07               	movlw	7
  3638  001126  6E08               	movwf	?___lbmod,c
  3639  001128  518E               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3640  00112A  EC0D  F017         	call	___lbmod
  3641  00112E  0100               	movlb	0	; () banked
  3642  001130  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3643  001132  5174               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3644  001134  0FB8               	addlw	low (_vscp_omsg+6)
  3645  001136  6ED9               	movwf	fsr2l,c
  3646  001138  6ADA               	clrf	fsr2h,c
  3647  00113A  517F               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3648  00113C  258E               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3649  00113E  EC1F  F018         	call	_vscp_readRegister
  3650  001142  6EDF               	movwf	indf2,c
  3651                           
  3652                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  3653  001144  0E07               	movlw	7
  3654  001146  6E08               	movwf	?___lbmod,c
  3655  001148  0100               	movlb	0	; () banked
  3656  00114A  518E               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3657  00114C  EC0D  F017         	call	___lbmod
  3658  001150  0A06               	xorlw	6
  3659  001152  E00B               	bz	l7312
  3660  001154  0EFF               	movlw	255
  3661  001156  0100               	movlb	0	; () banked
  3662  001158  2582               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3663  00115A  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3664  00115C  6B75               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3665  00115E  0EFF               	movlw	255
  3666  001160  2375               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3667  001162  518E               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3668  001164  1974               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3669  001166  1175               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3670  001168  E123               	bnz	l7332
  3671  00116A                     l7312:
  3672                           
  3673                           ;vscp_firmware.c: 988: uint8_t bytes;
  3674                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  3675  00116A  0E07               	movlw	7
  3676  00116C  6E08               	movwf	?___lbmod,c
  3677  00116E  0100               	movlb	0	; () banked
  3678  001170  518E               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3679  001172  EC0D  F017         	call	___lbmod
  3680  001176  0A06               	xorlw	6
  3681  001178  E103               	bnz	l7316
  3682                           
  3683                           ;vscp_firmware.c: 991: bytes = 7;
  3684  00117A  0E07               	movlw	7
  3685  00117C  0100               	movlb	0	; () banked
  3686  00117E  D009               	goto	L2
  3687  001180                     l7316:
  3688                           
  3689                           ;vscp_firmware.c: 993: else {
  3690                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  3691  001180  0E07               	movlw	7
  3692  001182  6E08               	movwf	?___lbmod,c
  3693  001184  0100               	movlb	0	; () banked
  3694  001186  518E               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3695  001188  EC0D  F017         	call	___lbmod
  3696  00118C  0100               	movlb	0	; () banked
  3697  00118E  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3698  001190  2974               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3699  001192                     L2:
  3700  001192  6F81               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;vscp_firmware.c: 995: }
  3704                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  3705  001194  5181               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3706  001196  0F81               	addlw	129
  3707  001198  6FB2               	movwf	_vscp_omsg& (0+255),b
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  3711  00119A  0E07               	movlw	7
  3712  00119C  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  3716  00119E  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  3717  0011A0  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  3721  0011A2  0E1A               	movlw	26
  3722  0011A4  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  3726  0011A6  C080  F0B7         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  3730  0011AA  EC34  F017         	call	_vscp_sendEvent	;wreg free
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;vscp_firmware.c: 1005: pos++;
  3734  0011AE  2B80               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3735  0011B0                     l7332:
  3736                           
  3737                           ; BSR set to: 0
  3738  0011B0  2B8E               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3739  0011B2                     l7334:
  3740                           
  3741                           ; BSR set to: 0
  3742  0011B2  5182               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3743  0011B4  5D8E               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3744  0011B6  B0D8               	btfsc	status,0,c
  3745  0011B8  0012               	return	
  3746  0011BA  D7B4               	goto	l7306
  3747  0011BC                     l7336:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3751  0011BC  519F               	movf	_vscp_nickname& (0+255),w,b
  3752  0011BE  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3753  0011C2  62DF               	cpfseq	indf2,c
  3754  0011C4  0012               	return	
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;vscp_firmware.c: 1014: uint8_t i;
  3758                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  3759  0011C6  C0AB  F083         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1133
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  3763  0011CA  51A4               	movf	_vscp_imsg& (0+255),w,b
  3764  0011CC  0FFE               	addlw	254
  3765  0011CE  0B07               	andlw	7
  3766  0011D0  6F84               	movwf	vscp_handleProtocolEvent@len_1134& (0+255),b
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  3770  0011D2  6B89               	clrf	vscp_handleProtocolEvent@i_1132& (0+255),b
  3771  0011D4  D016               	goto	l7350
  3772  0011D6                     l7344:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  3776  0011D6  5189               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3777  0011D8  0FAC               	addlw	low (_vscp_imsg+8)
  3778  0011DA  6ED9               	movwf	fsr2l,c
  3779  0011DC  6ADA               	clrf	fsr2h,c
  3780  0011DE  50DF               	movf	indf2,w,c
  3781  0011E0  6E18               	movwf	?_vscp_writeRegister,c
  3782  0011E2  5183               	movf	vscp_handleProtocolEvent@pos_1133& (0+255),w,b
  3783  0011E4  2589               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3784  0011E6  ECAF  F017         	call	_vscp_writeRegister
  3785                           
  3786                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  3787  0011EA  0100               	movlb	0	; () banked
  3788  0011EC  5189               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3789  0011EE  0FB8               	addlw	low (_vscp_omsg+6)
  3790  0011F0  6ED9               	movwf	fsr2l,c
  3791  0011F2  6ADA               	clrf	fsr2h,c
  3792  0011F4  5183               	movf	vscp_handleProtocolEvent@pos_1133& (0+255),w,b
  3793  0011F6  2589               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3794  0011F8  EC1F  F018         	call	_vscp_readRegister
  3795  0011FC  6EDF               	movwf	indf2,c
  3796  0011FE  0100               	movlb	0	; () banked
  3797  001200  2B89               	incf	vscp_handleProtocolEvent@i_1132& (0+255),f,b
  3798  001202                     l7350:
  3799                           
  3800                           ; BSR set to: 0
  3801  001202  5184               	movf	vscp_handleProtocolEvent@len_1134& (0+255),w,b
  3802  001204  5D89               	subwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  3803  001206  E3E7               	bnc	l7344
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;vscp_firmware.c: 1022: }
  3807                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  3808  001208  0E07               	movlw	7
  3809  00120A  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  3813  00120C  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  3814  00120E  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  3815                           
  3816                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  3817  001210  0E1A               	movlw	26
  3818  001212  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  3822  001214  6BB7               	clrf	(_vscp_omsg+5)& (0+255),b
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  3826  001216  5184               	movf	vscp_handleProtocolEvent@len_1134& (0+255),w,b
  3827  001218  0F81               	addlw	129
  3828  00121A  6FB2               	movwf	_vscp_omsg& (0+255),b
  3829  00121C  EF34  F017         	goto	_vscp_sendEvent
  3830  001220                     l7362:
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3834  001220  519F               	movf	_vscp_nickname& (0+255),w,b
  3835  001222  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3836  001226  62DF               	cpfseq	indf2,c
  3837  001228  0012               	return	
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3841                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  3842                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  3843  00122A  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3844  00122C  ECAA  F014         	call	_vscp_readAppReg
  3845  001230  0100               	movlb	0	; () banked
  3846  001232  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3847  001234  2974               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3848  001236  6E15               	movwf	?_vscp_writeAppReg,c
  3849  001238  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3850  00123A  ECA9  F010         	call	_vscp_writeAppReg
  3851  00123E  D68E               	goto	L1
  3852  001240                     l7378:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3856  001240  519F               	movf	_vscp_nickname& (0+255),w,b
  3857  001242  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  3858  001246  62DF               	cpfseq	indf2,c
  3859  001248  0012               	return	
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3863                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  3864                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  3865  00124A  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3866  00124C  ECAA  F014         	call	_vscp_readAppReg
  3867  001250  0100               	movlb	0	; () banked
  3868  001252  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3869  001254  0574               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  3870  001256  6E15               	movwf	?_vscp_writeAppReg,c
  3871  001258  51AB               	movf	(_vscp_imsg+7)& (0+255),w,b
  3872  00125A  ECA9  F010         	call	_vscp_writeAppReg
  3873  00125E  D67E               	goto	L1
  3874  001260                     l7394:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  3878                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  3879  001260  51AA               	movf	(_vscp_imsg+6)& (0+255),w,b
  3880  001262  199F               	xorwf	_vscp_nickname& (0+255),w,b
  3881  001264  E003               	bz	l1038
  3882                           
  3883                           ; BSR set to: 0
  3884  001266  29AA               	incf	(_vscp_imsg+6)& (0+255),w,b
  3885  001268  A4D8               	btfss	status,2,c
  3886  00126A  0012               	return	
  3887  00126C                     l1038:
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  3891  00126C  6B88               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  3895  00126E  0E03               	movlw	3
  3896  001270  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  3897                           
  3898                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  3899  001272  0E88               	movlw	136
  3900  001274  6FB2               	movwf	_vscp_omsg& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  3904  001276  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  3905  001278  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  3906                           
  3907                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  3908  00127A  0E20               	movlw	32
  3909  00127C  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  3913  00127E  6B8D               	clrf	vscp_handleProtocolEvent@i_1135& (0+255),b
  3914  001280                     l1039:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;vscp_firmware.c: 1091: {
  3918                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  3919  001280  C08D  F0B7         	movff	vscp_handleProtocolEvent@i_1135,_vscp_omsg+5
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  3923  001284  0E01               	movlw	1
  3924  001286  6F8F               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  3925  001288                     l7414:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  3929  001288  518F               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3930  00128A  0FB7               	addlw	low (_vscp_omsg+5)
  3931  00128C  6ED9               	movwf	fsr2l,c
  3932  00128E  6ADA               	clrf	fsr2h,c
  3933  001290  5188               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3934  001292  080F               	sublw	15
  3935  001294  EC6A  F018         	call	_vscp_getGUID
  3936  001298  6EDF               	movwf	indf2,c
  3937  00129A  0100               	movlb	0	; () banked
  3938  00129C  2B88               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;vscp_firmware.c: 1096: if (k > 16)
  3942  00129E  0E10               	movlw	16
  3943  0012A0  6588               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3944  0012A2  D001               	goto	l7422
  3945  0012A4  D004               	goto	l7426
  3946  0012A6                     l7422:
  3947                           
  3948                           ; BSR set to: 0
  3949  0012A6  2B8F               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3950                           
  3951                           ; BSR set to: 0
  3952  0012A8  0E07               	movlw	7
  3953  0012AA  658F               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3954  0012AC  D7ED               	goto	l7414
  3955  0012AE                     l7426:
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;vscp_firmware.c: 1098: }
  3959                           ;vscp_firmware.c: 1100: if (k > 16)
  3960  0012AE  0E10               	movlw	16
  3961  0012B0  6588               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3962  0012B2  D001               	goto	l7430
  3963  0012B4  D006               	goto	l1040
  3964  0012B6                     l7430:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  3968  0012B6  EC34  F017         	call	_vscp_sendEvent	;wreg free
  3969                           
  3970                           ; BSR set to: 0
  3971  0012BA  2B8D               	incf	vscp_handleProtocolEvent@i_1135& (0+255),f,b
  3972                           
  3973                           ; BSR set to: 0
  3974  0012BC  0E02               	movlw	2
  3975  0012BE  658D               	cpfsgt	vscp_handleProtocolEvent@i_1135& (0+255),b
  3976  0012C0  D7DF               	goto	l1039
  3977  0012C2                     l1040:
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;vscp_firmware.c: 1104: }
  3981                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  3982  0012C2  6B8F               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  3983  0012C4                     l7440:
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;vscp_firmware.c: 1107: {
  3987                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  3988  0012C4  518F               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3989  0012C6  ECF9  F017         	call	_vscp_getMDF_URL
  3990  0012CA  0900               	iorlw	0
  3991  0012CC  E008               	bz	l7444
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  3995  0012CE  518F               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3996  0012D0  0FBA               	addlw	low (_vscp_omsg+8)
  3997  0012D2  6ED9               	movwf	fsr2l,c
  3998  0012D4  6ADA               	clrf	fsr2h,c
  3999  0012D6  518F               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4000  0012D8  ECF9  F017         	call	_vscp_getMDF_URL
  4001  0012DC  D005               	goto	L3
  4002  0012DE                     l7444:
  4003                           
  4004                           ; BSR set to: 0
  4005                           ;vscp_firmware.c: 1110: else
  4006                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  4007  0012DE  518F               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4008  0012E0  0FBA               	addlw	low (_vscp_omsg+8)
  4009  0012E2  6ED9               	movwf	fsr2l,c
  4010  0012E4  6ADA               	clrf	fsr2h,c
  4011  0012E6  0E00               	movlw	0
  4012  0012E8                     L3:
  4013  0012E8  6EDF               	movwf	indf2,c
  4014                           
  4015                           ; BSR set to: 0
  4016  0012EA  2B8F               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4017                           
  4018                           ; BSR set to: 0
  4019  0012EC  0E04               	movlw	4
  4020  0012EE  658F               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4021  0012F0  D7E9               	goto	l7440
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;vscp_firmware.c: 1112: }
  4025                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  4026  0012F2  EC34  F017         	call	_vscp_sendEvent	;wreg free
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;vscp_firmware.c: 1116: k = 5;
  4030  0012F6  0E05               	movlw	5
  4031  0012F8  6F88               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  4035  0012FA  0E03               	movlw	3
  4036  0012FC  6F8D               	movwf	vscp_handleProtocolEvent@i_1135& (0+255),b
  4037  0012FE                     l1049:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;vscp_firmware.c: 1118: {
  4041                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  4042  0012FE  C08D  F0B7         	movff	vscp_handleProtocolEvent@i_1135,_vscp_omsg+5
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  4046  001302  0E01               	movlw	1
  4047  001304  6F8F               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4048  001306                     l7466:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  4052  001306  518F               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4053  001308  0FB7               	addlw	low (_vscp_omsg+5)
  4054  00130A  6ED9               	movwf	fsr2l,c
  4055  00130C  6ADA               	clrf	fsr2h,c
  4056  00130E  5188               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4057  001310  ECF9  F017         	call	_vscp_getMDF_URL
  4058  001314  6EDF               	movwf	indf2,c
  4059                           
  4060                           ; BSR set to: 0
  4061  001316  2B88               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4062                           
  4063                           ; BSR set to: 0
  4064  001318  2B8F               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4065                           
  4066                           ; BSR set to: 0
  4067  00131A  0E07               	movlw	7
  4068  00131C  658F               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4069  00131E  D7F3               	goto	l7466
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;vscp_firmware.c: 1123: }
  4073                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  4074  001320  EC34  F017         	call	_vscp_sendEvent	;wreg free
  4075                           
  4076                           ; BSR set to: 0
  4077  001324  2B8D               	incf	vscp_handleProtocolEvent@i_1135& (0+255),f,b
  4078                           
  4079                           ; BSR set to: 0
  4080  001326  0E06               	movlw	6
  4081  001328  658D               	cpfsgt	vscp_handleProtocolEvent@i_1135& (0+255),b
  4082  00132A  D7E9               	goto	l1049
  4083  00132C  0C06               	retlw	6
  4084  00132E                     l7480:
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4088  00132E  519F               	movf	_vscp_nickname& (0+255),w,b
  4089  001330  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  4090  001334  62DF               	cpfseq	indf2,c
  4091  001336  0012               	return	
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  4095  001338  0E03               	movlw	3
  4096  00133A  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  4097                           
  4098                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  4099  00133C  0E87               	movlw	135
  4100  00133E  6FB2               	movwf	_vscp_omsg& (0+255),b
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  4104  001340  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  4105  001342  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  4106                           
  4107                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  4108  001344  0E22               	movlw	34
  4109  001346  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  4113  001348  0EB7               	movlw	(_vscp_omsg+5)& (0+255)
  4114  00134A  EC2A  F018         	call	_vscp_getMatrixInfo
  4115  00134E  EF34  F017         	goto	_vscp_sendEvent
  4116  001352                     l7490:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  4120  001352  519F               	movf	_vscp_nickname& (0+255),w,b
  4121  001354  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  4122  001358  62DF               	cpfseq	indf2,c
  4123  00135A  0012               	return	
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  4127  00135C  6B8A               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  4131                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  4132  00135E  C0A4  F074         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  4133  001362  0E0F               	movlw	15
  4134  001364  1774               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4135  001366  0E04               	movlw	4
  4136  001368  5D74               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4137  00136A  E312               	bnc	l7506
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  4141  00136C  C0AE  F08B         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1139
  4142  001370  6B8C               	clrf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  4146  001372  518C               	movf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4147  001374  118B               	iorwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4148  001376  E103               	bnz	l7502
  4149                           
  4150                           ; BSR set to: 0
  4151  001378  0E01               	movlw	1
  4152  00137A  6F8C               	movwf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4153  00137C  6B8B               	clrf	vscp_handleProtocolEvent@bytes_1139& (0+255),b
  4154  00137E                     l7502:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  4158  00137E  0E01               	movlw	1
  4159  001380  5D8B               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4160  001382  0E01               	movlw	1
  4161  001384  598C               	subwfb	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4162  001386  E307               	bnc	l7508
  4163                           
  4164                           ; BSR set to: 0
  4165  001388  0E01               	movlw	1
  4166  00138A  6F8C               	movwf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4167  00138C  0E00               	movlw	0
  4168  00138E  D002               	goto	L4
  4169  001390                     l7506:
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;vscp_firmware.c: 1173: else {
  4173                           ;vscp_firmware.c: 1174: bytes = 1;
  4174  001390  6B8C               	clrf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4175  001392  0E01               	movlw	1
  4176  001394                     L4:
  4177  001394  6F8B               	movwf	vscp_handleProtocolEvent@bytes_1139& (0+255),b
  4178  001396                     l7508:
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;vscp_firmware.c: 1175: }
  4182                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  4183  001396  C052  F07B         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4184  00139A  C053  F07C         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4188  00139E  51AC               	movf	(_vscp_imsg+8)& (0+255),w,b
  4189  0013A0  C0AB  F074         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4190  0013A4  6B75               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4191  0013A6  C074  F075         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4192  0013AA  6B74               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4193  0013AC  1174               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4194  0013AE  6E52               	movwf	_vscp_page_select,c
  4195  0013B0  5175               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4196  0013B2  6E53               	movwf	_vscp_page_select+1,c
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  4200  0013B4  0E07               	movlw	7
  4201  0013B6  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  4205  0013B8  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  4206  0013BA  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  4210  0013BC  0E27               	movlw	39
  4211  0013BE  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  4215  0013C0  6BB7               	clrf	(_vscp_omsg+5)& (0+255),b
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  4219  0013C2  C0AB  F0B8         	movff	_vscp_imsg+7,_vscp_omsg+6
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  4223  0013C6  C0AC  F0B9         	movff	_vscp_imsg+8,_vscp_omsg+7
  4224  0013CA                     l7524:
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  4228  0013CA  518A               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4229  0013CC  5D8B               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4230  0013CE  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4231  0013D0  0E00               	movlw	0
  4232  0013D2  598C               	subwfb	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4233  0013D4  6F75               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4234  0013D6  0E04               	movlw	4
  4235  0013D8  5D74               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4236  0013DA  0E00               	movlw	0
  4237  0013DC  5975               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4238  0013DE  E302               	bnc	l7528
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  4242  0013E0  0E04               	movlw	4
  4243  0013E2  D002               	goto	L5
  4244  0013E4                     l7528:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;vscp_firmware.c: 1198: else {
  4248                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  4249  0013E4  518A               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4250  0013E6  5D8B               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4251  0013E8                     L5:
  4252  0013E8  6F85               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;vscp_firmware.c: 1200: }
  4256                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4257  0013EA  5185               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4258  0013EC  0F84               	addlw	132
  4259  0013EE  6FB2               	movwf	_vscp_omsg& (0+255),b
  4260                           
  4261                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  4262                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  4263  0013F0  51AD               	movf	(_vscp_imsg+9)& (0+255),w,b
  4264  0013F2  258A               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4265  0013F4  6FBA               	movwf	(_vscp_omsg+8)& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4269  0013F6  6B86               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4270  0013F8  D00C               	goto	l7536
  4271  0013FA                     l7532:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  4275                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4276  0013FA  5186               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4277  0013FC  0FBB               	addlw	low (_vscp_omsg+9)
  4278  0013FE  6ED9               	movwf	fsr2l,c
  4279  001400  6ADA               	clrf	fsr2h,c
  4280  001402  51AD               	movf	(_vscp_imsg+9)& (0+255),w,b
  4281  001404  258A               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4282  001406  2586               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4283  001408  EC1F  F018         	call	_vscp_readRegister
  4284  00140C  6EDF               	movwf	indf2,c
  4285  00140E  0100               	movlb	0	; () banked
  4286  001410  2B86               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4287  001412                     l7536:
  4288                           
  4289                           ; BSR set to: 0
  4290  001412  5185               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4291  001414  5D86               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4292  001416  E3F1               	bnc	l7532
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;vscp_firmware.c: 1211: }
  4296                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  4297  001418  EC34  F017         	call	_vscp_sendEvent	;wreg free
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  4301  00141C  5185               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4302  00141E  278A               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  4306  001420  2BB7               	incf	(_vscp_omsg+5)& (0+255),f,b
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  4310  001422  518A               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4311  001424  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4312  001426  6B75               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4313  001428  518B               	movf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4314  00142A  5D74               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4315  00142C  518C               	movf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4316  00142E  5975               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4317  001430  E3CC               	bnc	l7524
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  4321  001432  C07B  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4322  001436  C07C  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4323  00143A  0012               	return	
  4324  00143C                     l7546:
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4328  00143C  519F               	movf	_vscp_nickname& (0+255),w,b
  4329  00143E  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  4330  001442  62DF               	cpfseq	indf2,c
  4331  001444  0012               	return	
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;vscp_firmware.c: 1234: uint8_t i;
  4335                           ;vscp_firmware.c: 1235: uint16_t page_save;
  4336                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  4337  001446  C052  F07D         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1144
  4338  00144A  C053  F07E         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1144+1
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4342  00144E  51AC               	movf	(_vscp_imsg+8)& (0+255),w,b
  4343  001450  C0AB  F074         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4344  001454  6B75               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4345  001456  C074  F075         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4346  00145A  6B74               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4347  00145C  1174               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4348  00145E  6E52               	movwf	_vscp_page_select,c
  4349  001460  5175               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4350  001462  6E53               	movwf	_vscp_page_select+1,c
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  4354  001464  C0AD  F087         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1143
  4355                           
  4356                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4357                           ;vscp_firmware.c: 1248: i++) {
  4358  001468  D012               	goto	l7558
  4359  00146A                     l7554:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4363                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4364  00146A  51AD               	movf	(_vscp_imsg+9)& (0+255),w,b
  4365  00146C  08BB               	sublw	low (_vscp_omsg+9)
  4366  00146E  2587               	addwf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4367  001470  6ED9               	movwf	fsr2l,c
  4368  001472  6ADA               	clrf	fsr2h,c
  4369  001474  51AD               	movf	(_vscp_imsg+9)& (0+255),w,b
  4370  001476  08AE               	sublw	low (_vscp_imsg+10)
  4371  001478  2587               	addwf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4372  00147A  6EE1               	movwf	fsr1l,c
  4373  00147C  6AE2               	clrf	fsr1h,c
  4374  00147E  50E7               	movf	indf1,w,c
  4375  001480  6E18               	movwf	?_vscp_writeRegister,c
  4376  001482  5187               	movf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4377  001484  ECAF  F017         	call	_vscp_writeRegister
  4378  001488  6EDF               	movwf	indf2,c
  4379  00148A  0100               	movlb	0	; () banked
  4380  00148C  2B87               	incf	vscp_handleProtocolEvent@i_1143& (0+255),f,b
  4381  00148E                     l7558:
  4382                           
  4383                           ; BSR set to: 0
  4384  00148E  51A4               	movf	_vscp_imsg& (0+255),w,b
  4385  001490  0B0F               	andlw	15
  4386  001492  6F74               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4387  001494  6B75               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4388  001496  51AD               	movf	(_vscp_imsg+9)& (0+255),w,b
  4389  001498  2774               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4390  00149A  0E00               	movlw	0
  4391  00149C  2375               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4392  00149E  0EFC               	movlw	252
  4393  0014A0  2574               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4394  0014A2  6F76               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4395  0014A4  0EFF               	movlw	255
  4396  0014A6  2175               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4397  0014A8  6F77               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4398  0014AA  5187               	movf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4399  0014AC  6F78               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4400  0014AE  6B79               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4401  0014B0  5179               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4402  0014B2  0A80               	xorlw	128
  4403  0014B4  6F7A               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4404  0014B6  5176               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4405  0014B8  5D78               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4406  0014BA  5177               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4407  0014BC  0A80               	xorlw	128
  4408  0014BE  597A               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4409  0014C0  E3D4               	bnc	l7554
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;vscp_firmware.c: 1251: }
  4413                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  4414  0014C2  C07D  F052         	movff	vscp_handleProtocolEvent@page_save_1144,_vscp_page_select
  4415  0014C6  C07E  F053         	movff	vscp_handleProtocolEvent@page_save_1144+1,_vscp_page_select+1
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  4419  0014CA  0E07               	movlw	7
  4420  0014CC  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4424  0014CE  51A4               	movf	_vscp_imsg& (0+255),w,b
  4425  0014D0  0B0F               	andlw	15
  4426  0014D2  0F80               	addlw	128
  4427  0014D4  6FB2               	movwf	_vscp_omsg& (0+255),b
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  4431  0014D6  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  4432  0014D8  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  4436  0014DA  0E27               	movlw	39
  4437  0014DC  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  4441  0014DE  6BB7               	clrf	(_vscp_omsg+5)& (0+255),b
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  4445  0014E0  C0AB  F0B8         	movff	_vscp_imsg+7,_vscp_omsg+6
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  4449  0014E4  C0AC  F0B9         	movff	_vscp_imsg+8,_vscp_omsg+7
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  4453  0014E8  C0AD  F0BA         	movff	_vscp_imsg+9,_vscp_omsg+8
  4454  0014EC  EF34  F017         	goto	_vscp_sendEvent
  4455  0014F0                     l7580:
  4456                           
  4457                           ; BSR set to: 0
  4458  0014F0  51A8               	movf	(_vscp_imsg+4)& (0+255),w,b
  4459                           
  4460                           ; Switch size 1, requested type "speed"
  4461                           ; Number of cases is 16, Range of values is 1 to 38
  4462                           ; switch strategies available:
  4463                           ; Name         Instructions Cycles
  4464                           ; simple_byte           49    25 (average)
  4465                           ;	Chosen strategy is simple_byte
  4466  0014F2  0A01               	xorlw	1	; case 1
  4467  0014F4  E101 D51A          	bz	l7162
  4468  0014F8  0A03               	xorlw	3	; case 2
  4469  0014FA  E101 D519          	bz	l7164
  4470  0014FE  0A04               	xorlw	4	; case 6
  4471  001500  E101 D518          	bz	l7166
  4472  001504  0A0E               	xorlw	14	; case 8
  4473  001506  E101 D517          	bz	l7168
  4474  00150A  0A01               	xorlw	1	; case 9
  4475  00150C  E101 D516          	bz	l7170
  4476  001510  0A02               	xorlw	2	; case 11
  4477  001512  E101 D535          	bz	l7204
  4478  001516  0A07               	xorlw	7	; case 12
  4479  001518  E101 D54B          	bz	l7238
  4480  00151C  0A1B               	xorlw	27	; case 23
  4481  00151E  E101 D5DF          	bz	l7296
  4482  001522  0A0F               	xorlw	15	; case 24
  4483  001524  E101 D5F2          	bz	l7302
  4484  001528  0A01               	xorlw	1	; case 25
  4485  00152A  E101 D647          	bz	l7336
  4486  00152E  0A04               	xorlw	4	; case 29
  4487  001530  E101 D676          	bz	l7362
  4488  001534  0A03               	xorlw	3	; case 30
  4489  001536  E101 D683          	bz	l7378
  4490  00153A  0A01               	xorlw	1	; case 31
  4491  00153C  E101 D690          	bz	l7394
  4492  001540  0A3E               	xorlw	62	; case 33
  4493  001542  E101 D6F4          	bz	l7480
  4494  001546  0A04               	xorlw	4	; case 37
  4495  001548  E101 D703          	bz	l7490
  4496  00154C  0A03               	xorlw	3	; case 38
  4497  00154E  A4D8               	btfss	status,2,c
  4498  001550  0012               	return	
  4499  001552  D774               	goto	l7546
  4500  001554                     __end_of_vscp_handleProtocolEvent:
  4501                           	opt stack 0
  4502                           prodh	equ	0xFF4
  4503                           prodl	equ	0xFF3
  4504                           postinc0	equ	0xFEE
  4505                           wreg	equ	0xFE8
  4506                           indf1	equ	0xFE7
  4507                           fsr1h	equ	0xFE2
  4508                           fsr1l	equ	0xFE1
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function ___lbmod *****************
  4517 ;; Defined at:
  4518 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  dividend        1    wreg     unsigned char 
  4521 ;;  divisor         1    7[COMRAM] unsigned char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  dividend        1    8[COMRAM] unsigned char 
  4524 ;;  rem             1   10[COMRAM] unsigned char 
  4525 ;;  counter         1    9[COMRAM] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      unsigned char 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : F/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4535 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4536 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4538 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4539 ;;Total ram usage:        4 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    2
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_vscp_handleProtocolEvent
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           	psect	text15
  4550  002E1A                     __ptext15:
  4551                           	opt stack 0
  4552  002E1A                     ___lbmod:
  4553                           	opt stack 27
  4554                           
  4555                           ;incstack = 0
  4556                           ;incstack = 0
  4557                           ;___lbmod@dividend stored from wreg
  4558  002E1A  CFE8 F009          	movff	wreg,___lbmod@dividend
  4559                           
  4560                           ; BSR set to: 0
  4561  002E1E  0E08               	movlw	8
  4562  002E20  6E0A               	movwf	___lbmod@counter,c
  4563                           
  4564                           ; BSR set to: 0
  4565  002E22  6A0B               	clrf	___lbmod@rem,c
  4566  002E24                     l5664:
  4567  002E24  90D8               	bcf	status,0,c
  4568  002E26  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4569  002E28  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4570  002E2A  6E0B               	movwf	___lbmod@rem,c
  4571  002E2C  90D8               	bcf	status,0,c
  4572  002E2E  3609               	rlcf	___lbmod@dividend,f,c
  4573  002E30  5008               	movf	___lbmod@divisor,w,c
  4574  002E32  5C0B               	subwf	___lbmod@rem,w,c
  4575  002E34  E302               	bnc	l5672
  4576  002E36  5008               	movf	___lbmod@divisor,w,c
  4577  002E38  5E0B               	subwf	___lbmod@rem,f,c
  4578  002E3A                     l5672:
  4579  002E3A  2E0A               	decfsz	___lbmod@counter,f,c
  4580  002E3C  D7F3               	goto	l5664
  4581  002E3E  500B               	movf	___lbmod@rem,w,c
  4582  002E40  0012               	return	
  4583  002E42                     __end_of___lbmod:
  4584                           	opt stack 0
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           postinc0	equ	0xFEE
  4588                           wreg	equ	0xFE8
  4589                           indf1	equ	0xFE7
  4590                           fsr1h	equ	0xFE2
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function _vscp_writeRegister *****************
  4600 ;; Defined at:
  4601 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;  reg             1    wreg     unsigned char 
  4604 ;;  value           1   23[COMRAM] unsigned char 
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;  reg             1   24[COMRAM] unsigned char 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      unsigned char 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : F/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4616 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4620 ;;Total ram usage:        2 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    6
  4623 ;; This function calls:
  4624 ;;		_vscp_writeAppReg
  4625 ;;		_vscp_writeStdReg
  4626 ;; This function is called by:
  4627 ;;		_vscp_handleProtocolEvent
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text16
  4632  002F5E                     __ptext16:
  4633                           	opt stack 0
  4634  002F5E                     _vscp_writeRegister:
  4635                           	opt stack 23
  4636                           
  4637                           ;incstack = 0
  4638                           ;incstack = 0
  4639                           ;vscp_writeRegister@reg stored from wreg
  4640  002F5E  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  4644  002F62  0E7F               	movlw	127
  4645  002F64  6419               	cpfsgt	vscp_writeRegister@reg,c
  4646  002F66  D005               	goto	l6978
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  4650  002F68  C018  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4651  002F6C  5019               	movf	vscp_writeRegister@reg,w,c
  4652  002F6E  EFCF  F011         	goto	_vscp_writeStdReg
  4653  002F72                     l6978:
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;vscp_firmware.c: 705: else {
  4657                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  4658  002F72  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4659  002F76  5019               	movf	vscp_writeRegister@reg,w,c
  4660  002F78  EFA9  F010         	goto	_vscp_writeAppReg
  4661  002F7C                     __end_of_vscp_writeRegister:
  4662                           	opt stack 0
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           indf1	equ	0xFE7
  4668                           fsr1h	equ	0xFE2
  4669                           fsr1l	equ	0xFE1
  4670                           indf2	equ	0xFDF
  4671                           postinc2	equ	0xFDE
  4672                           postdec2	equ	0xFDD
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           
  4677 ;; *************** function _vscp_writeStdReg *****************
  4678 ;; Defined at:
  4679 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;  reg             1    wreg     unsigned char 
  4682 ;;  value           1   15[COMRAM] unsigned char 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  reg             1   21[COMRAM] unsigned char 
  4685 ;;  rv              1   20[COMRAM] unsigned char 
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      unsigned char 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2, status,0, cstack
  4690 ;; Tracked objects:
  4691 ;;		On entry : F/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4695 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4697 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4698 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4699 ;;Total ram usage:        7 bytes
  4700 ;; Hardware stack levels used:    1
  4701 ;; Hardware stack levels required when called:    5
  4702 ;; This function calls:
  4703 ;;		_vscp_setGUID
  4704 ;;		_vscp_setManufacturerId
  4705 ;;		_vscp_getGUID
  4706 ;;		_vscp_getUserID
  4707 ;;		_vscp_setUserID
  4708 ;;		_vscp_getManufacturerId
  4709 ;;		_vscp_restoreDefaults
  4710 ;; This function is called by:
  4711 ;;		_vscp_writeRegister
  4712 ;;		_vscp_handleProtocolEvent
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text17
  4717  00239E                     __ptext17:
  4718                           	opt stack 0
  4719  00239E                     _vscp_writeStdReg:
  4720                           	opt stack 24
  4721                           
  4722                           ;incstack = 0
  4723                           ;incstack = 0
  4724                           ;vscp_writeStdReg@reg stored from wreg
  4725  00239E  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  4729  0023A2  1C10               	comf	vscp_writeStdReg@value,w,c
  4730  0023A4  6E15               	movwf	vscp_writeStdReg@rv,c
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  4734                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  4735  0023A6  0E83               	movlw	131
  4736  0023A8  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4737  0023AA  D00E               	goto	l6990
  4738                           
  4739                           ; BSR set to: 0
  4740  0023AC  0E89               	movlw	137
  4741  0023AE  6016               	cpfslt	vscp_writeStdReg@reg,c
  4742  0023B0  D00B               	goto	l6990
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  4746  0023B2  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  4747  0023B6  5016               	movf	vscp_writeStdReg@reg,w,c
  4748  0023B8  0F7C               	addlw	124
  4749  0023BA  ECEB  F017         	call	_vscp_setUserID
  4750                           
  4751                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  4752  0023BE  5016               	movf	vscp_writeStdReg@reg,w,c
  4753  0023C0  0F7C               	addlw	124
  4754  0023C2  EC60  F018         	call	_vscp_getUserID
  4755  0023C6  D069               	goto	L11
  4756  0023C8                     l6990:
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  4760  0023C8  5016               	movf	vscp_writeStdReg@reg,w,c
  4761  0023CA  0A92               	xorlw	146
  4762  0023CC  E10D               	bnz	l6996
  4763                           
  4764                           ; BSR set to: 0
  4765                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  4766  0023CE  5010               	movf	vscp_writeStdReg@value,w,c
  4767  0023D0  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4768  0023D2  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  4769  0023D4  5052               	movf	_vscp_page_select,w,c
  4770  0023D6  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  4771  0023D8  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  4772  0023DA  1011               	iorwf	??_vscp_writeStdReg,w,c
  4773  0023DC  6E52               	movwf	_vscp_page_select,c
  4774  0023DE  5012               	movf	??_vscp_writeStdReg+1,w,c
  4775  0023E0  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  4776  0023E2  6E53               	movwf	_vscp_page_select+1,c
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  4780  0023E4  5053               	movf	_vscp_page_select+1,w,c
  4781  0023E6  D059               	goto	L11
  4782  0023E8                     l6996:
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  4786  0023E8  5016               	movf	vscp_writeStdReg@reg,w,c
  4787  0023EA  0A93               	xorlw	147
  4788  0023EC  E10B               	bnz	l7002
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  4792  0023EE  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  4793  0023F0  5053               	movf	_vscp_page_select+1,w,c
  4794  0023F2  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4795  0023F4  5010               	movf	vscp_writeStdReg@value,w,c
  4796  0023F6  1011               	iorwf	??_vscp_writeStdReg,w,c
  4797  0023F8  6E52               	movwf	_vscp_page_select,c
  4798  0023FA  5012               	movf	??_vscp_writeStdReg+1,w,c
  4799  0023FC  6E53               	movwf	_vscp_page_select+1,c
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  4803  0023FE  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  4804                           
  4805                           ;vscp_firmware.c: 737: }
  4806  002402  D04E               	goto	l7044
  4807  002404                     l7002:
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  4811  002404  0E88               	movlw	136
  4812  002406  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4813  002408  D019               	goto	l7014
  4814                           
  4815                           ; BSR set to: 0
  4816  00240A  0E91               	movlw	145
  4817  00240C  6016               	cpfslt	vscp_writeStdReg@reg,c
  4818  00240E  D016               	goto	l7014
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4822                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  4823  002410  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4824  002414  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4825  002418  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4826  00241A  2812               	incf	??_vscp_writeStdReg+1,w,c
  4827  00241C  E102               	bnz	l7010
  4828                           
  4829                           ; BSR set to: 0
  4830  00241E  2852               	incf	_vscp_page_select,w,c
  4831  002420  E002               	bz	l7012
  4832  002422                     l7010:
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;vscp_firmware.c: 747: rv = ~value;
  4836  002422  1C10               	comf	vscp_writeStdReg@value,w,c
  4837  002424  D03A               	goto	L11
  4838  002426                     l7012:
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;vscp_firmware.c: 749: else {
  4842                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  4843  002426  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  4844  00242A  5016               	movf	vscp_writeStdReg@reg,w,c
  4845  00242C  0F77               	addlw	119
  4846  00242E  EC5A  F017         	call	_vscp_setManufacturerId
  4847                           
  4848                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  4849  002432  5016               	movf	vscp_writeStdReg@reg,w,c
  4850  002434  0F77               	addlw	119
  4851  002436  EC56  F018         	call	_vscp_getManufacturerId
  4852  00243A  D02F               	goto	L11
  4853  00243C                     l7014:
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  4857  00243C  0ECF               	movlw	207
  4858  00243E  6416               	cpfsgt	vscp_writeStdReg@reg,c
  4859  002440  D017               	goto	l7026
  4860                           
  4861                           ; BSR set to: 0
  4862  002442  0EE0               	movlw	224
  4863  002444  6016               	cpfslt	vscp_writeStdReg@reg,c
  4864  002446  D014               	goto	l7026
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4868                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  4869  002448  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4870  00244C  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4871  002450  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4872  002452  2812               	incf	??_vscp_writeStdReg+1,w,c
  4873  002454  E1E6               	bnz	l7010
  4874                           
  4875                           ; BSR set to: 0
  4876  002456  2852               	incf	_vscp_page_select,w,c
  4877  002458  E1E4               	bnz	l7010
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;vscp_firmware.c: 762: else {
  4881                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  4882  00245A  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  4883  00245E  5016               	movf	vscp_writeStdReg@reg,w,c
  4884  002460  0F30               	addlw	48
  4885  002462  EC6C  F017         	call	_vscp_setGUID
  4886                           
  4887                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  4888  002466  5016               	movf	vscp_writeStdReg@reg,w,c
  4889  002468  0F30               	addlw	48
  4890  00246A  EC6A  F018         	call	_vscp_getGUID
  4891  00246E  D015               	goto	L11
  4892  002470                     l7026:
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  4896  002470  5016               	movf	vscp_writeStdReg@reg,w,c
  4897  002472  0AA2               	xorlw	162
  4898  002474  E1D6               	bnz	l7010
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  4902  002476  5010               	movf	vscp_writeStdReg@value,w,c
  4903  002478  0A55               	xorlw	85
  4904  00247A  E104               	bnz	l7034
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  4908  00247C  6B94               	clrf	_vscp_configtimer& (0+255),b	;volatile
  4909  00247E  6B95               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;vscp_firmware.c: 771: rv = 0x55;
  4913  002480  0E55               	movlw	85
  4914  002482  D00B               	goto	L11
  4915  002484                     l7034:
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  4919  002484  5010               	movf	vscp_writeStdReg@value,w,c
  4920  002486  0AAA               	xorlw	170
  4921  002488  E10B               	bnz	l7044
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  4925  00248A  0EE8               	movlw	232
  4926  00248C  5D94               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  4927  00248E  0E03               	movlw	3
  4928  002490  5995               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  4929  002492  E205               	bc	l980
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  4933  002494  ECAD  F018         	call	_vscp_restoreDefaults	;wreg free
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;vscp_firmware.c: 776: rv = 0xaa;
  4937  002498  0EAA               	movlw	170
  4938  00249A                     L11:
  4939  00249A  6E15               	movwf	vscp_writeStdReg@rv,c
  4940                           
  4941                           ;vscp_firmware.c: 777: }
  4942  00249C  D001               	goto	l7044
  4943  00249E                     l980:
  4944                           
  4945                           ; BSR set to: 0
  4946                           ;vscp_firmware.c: 778: else {
  4947                           ;vscp_firmware.c: 779: rv = 0;
  4948  00249E  6A15               	clrf	vscp_writeStdReg@rv,c
  4949  0024A0                     l7044:
  4950                           
  4951                           ;vscp_firmware.c: 787: }
  4952                           ;vscp_firmware.c: 789: return rv;
  4953  0024A0  5015               	movf	vscp_writeStdReg@rv,w,c
  4954  0024A2  0012               	return	
  4955  0024A4                     __end_of_vscp_writeStdReg:
  4956                           	opt stack 0
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           indf1	equ	0xFE7
  4962                           fsr1h	equ	0xFE2
  4963                           fsr1l	equ	0xFE1
  4964                           indf2	equ	0xFDF
  4965                           postinc2	equ	0xFDE
  4966                           postdec2	equ	0xFDD
  4967                           fsr2h	equ	0xFDA
  4968                           fsr2l	equ	0xFD9
  4969                           status	equ	0xFD8
  4970                           
  4971 ;; *************** function _vscp_restoreDefaults *****************
  4972 ;; Defined at:
  4973 ;;		line 1426 in file "../main.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;		None
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;		None
  4978 ;; Return value:  Size  Location     Type
  4979 ;;		None               void
  4980 ;; Registers used:
  4981 ;;		wreg, status,2, status,0, cstack
  4982 ;; Tracked objects:
  4983 ;;		On entry : F/0
  4984 ;;		On exit  : F/0
  4985 ;;		Unchanged: 0/0
  4986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4991 ;;Total ram usage:        0 bytes
  4992 ;; Hardware stack levels used:    1
  4993 ;; Hardware stack levels required when called:    4
  4994 ;; This function calls:
  4995 ;;		_init_app_eeprom
  4996 ;;		_init_app_ram
  4997 ;; This function is called by:
  4998 ;;		_vscp_writeStdReg
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text18
  5003  00315A                     __ptext18:
  5004                           	opt stack 0
  5005  00315A                     _vscp_restoreDefaults:
  5006                           	opt stack 24
  5007                           
  5008                           ; BSR set to: 0
  5009                           ;main.c: 1427: init_app_eeprom();
  5010                           
  5011                           ;incstack = 0
  5012                           ;incstack = 0
  5013  00315A  EC8E  F013         	call	_init_app_eeprom	;wreg free
  5014                           
  5015                           ;main.c: 1428: init_app_ram();
  5016  00315E  EF74  F018         	goto	_init_app_ram	;wreg free
  5017  003162                     __end_of_vscp_restoreDefaults:
  5018                           	opt stack 0
  5019                           prodh	equ	0xFF4
  5020                           prodl	equ	0xFF3
  5021                           postinc0	equ	0xFEE
  5022                           wreg	equ	0xFE8
  5023                           indf1	equ	0xFE7
  5024                           fsr1h	equ	0xFE2
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           postdec2	equ	0xFDD
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _init_app_eeprom *****************
  5034 ;; Defined at:
  5035 ;;		line 426 in file "../main.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  i               1   14[COMRAM] unsigned char 
  5040 ;;  j               1   13[COMRAM] unsigned char 
  5041 ;; Return value:  Size  Location     Type
  5042 ;;		None               void
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0, cstack
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/E
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5051 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5052 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5053 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5054 ;;Total ram usage:        4 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    3
  5057 ;; This function calls:
  5058 ;;		_Busy_eep
  5059 ;;		_Write_b_eep
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;;		_vscp_restoreDefaults
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text19
  5067  00271C                     __ptext19:
  5068                           	opt stack 0
  5069  00271C                     _init_app_eeprom:
  5070                           	opt stack 24
  5071                           
  5072                           ;main.c: 427: unsigned char i, j;
  5073                           ;main.c: 429: (Busy_eep(), Write_b_eep(0x21 + 0,0));
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;incstack = 0
  5077                           ;incstack = 0
  5078  00271C  ECB1  F018         	call	_Busy_eep	;wreg free
  5079  002720  6A09               	clrf	?_Write_b_eep+1,c
  5080  002722  0E21               	movlw	33
  5081  002724  6E08               	movwf	?_Write_b_eep,c
  5082  002726  0E00               	movlw	0
  5083  002728  6A0A               	clrf	?_Write_b_eep+2,c
  5084  00272A  EC4B  F016         	call	_Write_b_eep	;wreg free
  5085                           
  5086                           ;main.c: 430: (Busy_eep(), Write_b_eep(0x21 + 1,0));
  5087  00272E  ECB1  F018         	call	_Busy_eep	;wreg free
  5088  002732  6A09               	clrf	?_Write_b_eep+1,c
  5089  002734  0E22               	movlw	34
  5090  002736  6E08               	movwf	?_Write_b_eep,c
  5091  002738  0E00               	movlw	0
  5092  00273A  6A0A               	clrf	?_Write_b_eep+2,c
  5093  00273C  EC4B  F016         	call	_Write_b_eep	;wreg free
  5094                           
  5095                           ;main.c: 432: for ( i=3; i<21; i++ ) {
  5096  002740  0E03               	movlw	3
  5097  002742  6E0F               	movwf	init_app_eeprom@i,c
  5098  002744                     l3892:
  5099                           
  5100                           ;main.c: 433: (Busy_eep(), Write_b_eep(0x21 + 5 + (i-3),i));
  5101  002744  ECB1  F018         	call	_Busy_eep	;wreg free
  5102  002748  0E23               	movlw	35
  5103  00274A  240F               	addwf	init_app_eeprom@i,w,c
  5104  00274C  6E08               	movwf	?_Write_b_eep,c
  5105  00274E  6A09               	clrf	?_Write_b_eep+1,c
  5106  002750  0E00               	movlw	0
  5107  002752  2209               	addwfc	?_Write_b_eep+1,f,c
  5108  002754  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  5109  002758  EC4B  F016         	call	_Write_b_eep	;wreg free
  5110  00275C  2A0F               	incf	init_app_eeprom@i,f,c
  5111  00275E  0E14               	movlw	20
  5112  002760  640F               	cpfsgt	init_app_eeprom@i,c
  5113  002762  D7F0               	goto	l3892
  5114                           
  5115                           ;main.c: 434: }
  5116                           ;main.c: 436: (Busy_eep(), Write_b_eep(0x21 + 2,0));
  5117  002764  ECB1  F018         	call	_Busy_eep	;wreg free
  5118  002768  6A09               	clrf	?_Write_b_eep+1,c
  5119  00276A  0E23               	movlw	35
  5120  00276C  6E08               	movwf	?_Write_b_eep,c
  5121  00276E  0E00               	movlw	0
  5122  002770  6A0A               	clrf	?_Write_b_eep+2,c
  5123  002772  EC4B  F016         	call	_Write_b_eep	;wreg free
  5124                           
  5125                           ;main.c: 437: (Busy_eep(), Write_b_eep(0x21 + 3,0));
  5126  002776  ECB1  F018         	call	_Busy_eep	;wreg free
  5127  00277A  6A09               	clrf	?_Write_b_eep+1,c
  5128  00277C  0E24               	movlw	36
  5129  00277E  6E08               	movwf	?_Write_b_eep,c
  5130  002780  0E00               	movlw	0
  5131  002782  6A0A               	clrf	?_Write_b_eep+2,c
  5132  002784  EC4B  F016         	call	_Write_b_eep	;wreg free
  5133                           
  5134                           ;main.c: 438: (Busy_eep(), Write_b_eep(0x21 + 4,0));
  5135  002788  ECB1  F018         	call	_Busy_eep	;wreg free
  5136  00278C  6A09               	clrf	?_Write_b_eep+1,c
  5137  00278E  0E25               	movlw	37
  5138  002790  6E08               	movwf	?_Write_b_eep,c
  5139  002792  0E00               	movlw	0
  5140  002794  6A0A               	clrf	?_Write_b_eep+2,c
  5141  002796  EC4B  F016         	call	_Write_b_eep	;wreg free
  5142                           
  5143                           ;main.c: 442: for ( i = 0; i < 8; i++ ) {
  5144  00279A  6A0F               	clrf	init_app_eeprom@i,c
  5145  00279C                     l179:
  5146                           
  5147                           ;main.c: 443: for ( j = 0; j < 8; j++ ) {
  5148  00279C  6A0E               	clrf	init_app_eeprom@j,c
  5149  00279E                     l3918:
  5150                           
  5151                           ;main.c: 444: (Busy_eep(), Write_b_eep(0x21 + 23 + 0 + i * 8 + j,0));
  5152  00279E  ECB1  F018         	call	_Busy_eep	;wreg free
  5153  0027A2  500E               	movf	init_app_eeprom@j,w,c
  5154  0027A4  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  5155  0027A8  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  5156  0027AA  90D8               	bcf	status,0,c
  5157  0027AC  360C               	rlcf	??_init_app_eeprom,f,c
  5158  0027AE  360D               	rlcf	??_init_app_eeprom+1,f,c
  5159  0027B0  90D8               	bcf	status,0,c
  5160  0027B2  360C               	rlcf	??_init_app_eeprom,f,c
  5161  0027B4  360D               	rlcf	??_init_app_eeprom+1,f,c
  5162  0027B6  90D8               	bcf	status,0,c
  5163  0027B8  360C               	rlcf	??_init_app_eeprom,f,c
  5164  0027BA  360D               	rlcf	??_init_app_eeprom+1,f,c
  5165  0027BC  260C               	addwf	??_init_app_eeprom,f,c
  5166  0027BE  0E00               	movlw	0
  5167  0027C0  220D               	addwfc	??_init_app_eeprom+1,f,c
  5168  0027C2  0E38               	movlw	56
  5169  0027C4  240C               	addwf	??_init_app_eeprom,w,c
  5170  0027C6  6E08               	movwf	?_Write_b_eep,c
  5171  0027C8  0E00               	movlw	0
  5172  0027CA  200D               	addwfc	??_init_app_eeprom+1,w,c
  5173  0027CC  6E09               	movwf	?_Write_b_eep+1,c
  5174  0027CE  0E00               	movlw	0
  5175  0027D0  6A0A               	clrf	?_Write_b_eep+2,c
  5176  0027D2  EC4B  F016         	call	_Write_b_eep	;wreg free
  5177  0027D6  2A0E               	incf	init_app_eeprom@j,f,c
  5178  0027D8  0E07               	movlw	7
  5179  0027DA  640E               	cpfsgt	init_app_eeprom@j,c
  5180  0027DC  D7E0               	goto	l3918
  5181  0027DE  2A0F               	incf	init_app_eeprom@i,f,c
  5182  0027E0  640F               	cpfsgt	init_app_eeprom@i,c
  5183  0027E2  D7DC               	goto	l179
  5184  0027E4  0C07               	retlw	7
  5185  0027E6                     __end_of_init_app_eeprom:
  5186                           	opt stack 0
  5187                           prodh	equ	0xFF4
  5188                           prodl	equ	0xFF3
  5189                           postinc0	equ	0xFEE
  5190                           wreg	equ	0xFE8
  5191                           indf1	equ	0xFE7
  5192                           fsr1h	equ	0xFE2
  5193                           fsr1l	equ	0xFE1
  5194                           indf2	equ	0xFDF
  5195                           postinc2	equ	0xFDE
  5196                           postdec2	equ	0xFDD
  5197                           fsr2h	equ	0xFDA
  5198                           fsr2l	equ	0xFD9
  5199                           status	equ	0xFD8
  5200                           
  5201 ;; *************** function _vscp_setUserID *****************
  5202 ;; Defined at:
  5203 ;;		line 1261 in file "../main.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;  idx             1    wreg     unsigned char 
  5206 ;;  data            1   11[COMRAM] unsigned char 
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;  idx             1   12[COMRAM] unsigned char 
  5209 ;; Return value:  Size  Location     Type
  5210 ;;		None               void
  5211 ;; Registers used:
  5212 ;;		wreg, status,2, status,0, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : F/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5218 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5222 ;;Total ram usage:        2 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    3
  5225 ;; This function calls:
  5226 ;;		_Busy_eep
  5227 ;;		_Write_b_eep
  5228 ;; This function is called by:
  5229 ;;		_vscp_writeStdReg
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	text20
  5234  002FD6                     __ptext20:
  5235                           	opt stack 0
  5236  002FD6                     _vscp_setUserID:
  5237                           	opt stack 25
  5238                           
  5239                           ;incstack = 0
  5240                           ;incstack = 0
  5241                           ;vscp_setUserID@idx stored from wreg
  5242  002FD6  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;main.c: 1262: (Busy_eep(), Write_b_eep(idx + 0x04,data));
  5246  002FDA  ECB1  F018         	call	_Busy_eep	;wreg free
  5247  002FDE  0E04               	movlw	4
  5248  002FE0  240D               	addwf	vscp_setUserID@idx,w,c
  5249  002FE2  6E08               	movwf	?_Write_b_eep,c
  5250  002FE4  6A09               	clrf	?_Write_b_eep+1,c
  5251  002FE6  0E00               	movlw	0
  5252  002FE8  2209               	addwfc	?_Write_b_eep+1,f,c
  5253  002FEA  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  5254  002FEE  EF4B  F016         	goto	_Write_b_eep	;wreg free
  5255  002FF2                     __end_of_vscp_setUserID:
  5256                           	opt stack 0
  5257                           prodh	equ	0xFF4
  5258                           prodl	equ	0xFF3
  5259                           postinc0	equ	0xFEE
  5260                           wreg	equ	0xFE8
  5261                           indf1	equ	0xFE7
  5262                           fsr1h	equ	0xFE2
  5263                           fsr1l	equ	0xFE1
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           fsr2h	equ	0xFDA
  5268                           fsr2l	equ	0xFD9
  5269                           status	equ	0xFD8
  5270                           
  5271 ;; *************** function _vscp_setManufacturerId *****************
  5272 ;; Defined at:
  5273 ;;		line 506 in file "../main.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  idx             1    wreg     unsigned char 
  5276 ;;  data            1   11[COMRAM] unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  idx             1   12[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;		None               void
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : F/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5288 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5289 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5291 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5292 ;;Total ram usage:        2 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    3
  5295 ;; This function calls:
  5296 ;;		_Busy_eep
  5297 ;;		_Write_b_eep
  5298 ;; This function is called by:
  5299 ;;		_vscp_writeStdReg
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text21
  5304  002EB4                     __ptext21:
  5305                           	opt stack 0
  5306  002EB4                     _vscp_setManufacturerId:
  5307                           	opt stack 25
  5308                           
  5309                           ;incstack = 0
  5310                           ;incstack = 0
  5311                           ;vscp_setManufacturerId@idx stored from wreg
  5312  002EB4  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;main.c: 507: if ( idx>7 ) return;
  5316  002EB8  0E07               	movlw	7
  5317  002EBA  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  5318  002EBC  D001               	goto	l4744
  5319  002EBE  0C07               	retlw	7
  5320  002EC0                     l4744:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;main.c: 508: (Busy_eep(), Write_b_eep(0x09 + idx,data));
  5324  002EC0  ECB1  F018         	call	_Busy_eep	;wreg free
  5325  002EC4  0E09               	movlw	9
  5326  002EC6  240D               	addwf	vscp_setManufacturerId@idx,w,c
  5327  002EC8  6E08               	movwf	?_Write_b_eep,c
  5328  002ECA  6A09               	clrf	?_Write_b_eep+1,c
  5329  002ECC  0E00               	movlw	0
  5330  002ECE  2209               	addwfc	?_Write_b_eep+1,f,c
  5331  002ED0  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  5332  002ED4  EF4B  F016         	goto	_Write_b_eep	;wreg free
  5333  002ED8                     __end_of_vscp_setManufacturerId:
  5334                           	opt stack 0
  5335                           prodh	equ	0xFF4
  5336                           prodl	equ	0xFF3
  5337                           postinc0	equ	0xFEE
  5338                           wreg	equ	0xFE8
  5339                           indf1	equ	0xFE7
  5340                           fsr1h	equ	0xFE2
  5341                           fsr1l	equ	0xFE1
  5342                           indf2	equ	0xFDF
  5343                           postinc2	equ	0xFDE
  5344                           postdec2	equ	0xFDD
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8
  5348                           
  5349 ;; *************** function _vscp_setGUID *****************
  5350 ;; Defined at:
  5351 ;;		line 494 in file "../main.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;  idx             1    wreg     unsigned char 
  5354 ;;  data            1   11[COMRAM] unsigned char 
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;  idx             1   12[COMRAM] unsigned char 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;		None               void
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : F/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5366 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5370 ;;Total ram usage:        2 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    3
  5373 ;; This function calls:
  5374 ;;		_Busy_eep
  5375 ;;		_Write_b_eep
  5376 ;; This function is called by:
  5377 ;;		_vscp_writeStdReg
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text22
  5382  002ED8                     __ptext22:
  5383                           	opt stack 0
  5384  002ED8                     _vscp_setGUID:
  5385                           	opt stack 25
  5386                           
  5387                           ;incstack = 0
  5388                           ;incstack = 0
  5389                           ;vscp_setGUID@idx stored from wreg
  5390  002ED8  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;main.c: 495: if ( idx>15 ) return;
  5394  002EDC  0E0F               	movlw	15
  5395  002EDE  640D               	cpfsgt	vscp_setGUID@idx,c
  5396  002EE0  D001               	goto	l4736
  5397  002EE2  0C0F               	retlw	15
  5398  002EE4                     l4736:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x11 + idx,data));
  5402  002EE4  ECB1  F018         	call	_Busy_eep	;wreg free
  5403  002EE8  0E11               	movlw	17
  5404  002EEA  240D               	addwf	vscp_setGUID@idx,w,c
  5405  002EEC  6E08               	movwf	?_Write_b_eep,c
  5406  002EEE  6A09               	clrf	?_Write_b_eep+1,c
  5407  002EF0  0E00               	movlw	0
  5408  002EF2  2209               	addwfc	?_Write_b_eep+1,f,c
  5409  002EF4  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  5410  002EF8  EF4B  F016         	goto	_Write_b_eep	;wreg free
  5411  002EFC                     __end_of_vscp_setGUID:
  5412                           	opt stack 0
  5413                           prodh	equ	0xFF4
  5414                           prodl	equ	0xFF3
  5415                           postinc0	equ	0xFEE
  5416                           wreg	equ	0xFE8
  5417                           indf1	equ	0xFE7
  5418                           fsr1h	equ	0xFE2
  5419                           fsr1l	equ	0xFE1
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           postdec2	equ	0xFDD
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           
  5427 ;; *************** function _vscp_writeAppReg *****************
  5428 ;; Defined at:
  5429 ;;		line 640 in file "../main.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  reg             1    wreg     unsigned char 
  5432 ;;  val             1   20[COMRAM] unsigned char 
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  reg             1   22[COMRAM] unsigned char 
  5435 ;;  rv              1   21[COMRAM] unsigned char 
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  1    wreg      unsigned char 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5440 ;; Tracked objects:
  5441 ;;		On entry : F/0
  5442 ;;		On exit  : 0/0
  5443 ;;		Unchanged: 0/0
  5444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5445 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5448 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5449 ;;Total ram usage:        3 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; Hardware stack levels required when called:    4
  5452 ;; This function calls:
  5453 ;;		_Read_b_eep
  5454 ;;		_writeControlReg
  5455 ;;		_Busy_eep
  5456 ;;		_Write_b_eep
  5457 ;; This function is called by:
  5458 ;;		_vscp_writeRegister
  5459 ;;		_vscp_handleProtocolEvent
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text23
  5464  002152                     __ptext23:
  5465                           	opt stack 0
  5466  002152                     _vscp_writeAppReg:
  5467                           	opt stack 24
  5468                           
  5469                           ;incstack = 0
  5470                           ;incstack = 0
  5471                           ;vscp_writeAppReg@reg stored from wreg
  5472  002152  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;main.c: 641: uint8_t rv;
  5476                           ;main.c: 643: rv = ~val;
  5477  002156  1C15               	comf	vscp_writeAppReg@val,w,c
  5478  002158  6E16               	movwf	vscp_writeAppReg@rv,c
  5479                           
  5480                           ;main.c: 646: if ( 0 == vscp_page_select ) {
  5481  00215A  5053               	movf	_vscp_page_select+1,w,c
  5482  00215C  1052               	iorwf	_vscp_page_select,w,c
  5483  00215E  E176               	bnz	l6574
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;main.c: 649: if ( reg == 0 ) {
  5487  002160  6617               	tstfsz	vscp_writeAppReg@reg,c
  5488  002162  D00F               	goto	l6530
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;main.c: 650: (Busy_eep(), Write_b_eep(0x21 + 0,val));
  5492  002164  ECB1  F018         	call	_Busy_eep	;wreg free
  5493  002168  6A09               	clrf	?_Write_b_eep+1,c
  5494  00216A  0E21               	movlw	33
  5495  00216C  6E08               	movwf	?_Write_b_eep,c
  5496  00216E  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5497  002172  EC4B  F016         	call	_Write_b_eep	;wreg free
  5498                           
  5499                           ;main.c: 651: rv = Read_b_eep(0x21 + 0);
  5500  002176  6A09               	clrf	?_Read_b_eep+1,c
  5501  002178  0E21               	movlw	33
  5502  00217A  6E08               	movwf	?_Read_b_eep,c
  5503  00217C  EC07  F018         	call	_Read_b_eep	;wreg free
  5504  002180  D07F               	goto	L12
  5505  002182                     l6530:
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;main.c: 653: else if ( reg == 1 ) {
  5509  002182  0417               	decf	vscp_writeAppReg@reg,w,c
  5510  002184  E10F               	bnz	l6538
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;main.c: 655: (Busy_eep(), Write_b_eep(0x21 + 1,val));
  5514  002186  ECB1  F018         	call	_Busy_eep	;wreg free
  5515  00218A  6A09               	clrf	?_Write_b_eep+1,c
  5516  00218C  0E22               	movlw	34
  5517  00218E  6E08               	movwf	?_Write_b_eep,c
  5518  002190  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5519  002194  EC4B  F016         	call	_Write_b_eep	;wreg free
  5520                           
  5521                           ;main.c: 656: rv = Read_b_eep(0x21 + 1);
  5522  002198  6A09               	clrf	?_Read_b_eep+1,c
  5523  00219A  0E22               	movlw	34
  5524  00219C  6E08               	movwf	?_Read_b_eep,c
  5525  00219E  EC07  F018         	call	_Read_b_eep	;wreg free
  5526  0021A2  D06E               	goto	L12
  5527  0021A4                     l6538:
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;main.c: 659: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5531  0021A4  0E04               	movlw	4
  5532  0021A6  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5533  0021A8  D018               	goto	l6548
  5534                           
  5535                           ; BSR set to: 0
  5536  0021AA  0E17               	movlw	23
  5537  0021AC  6017               	cpfslt	vscp_writeAppReg@reg,c
  5538  0021AE  D015               	goto	l6548
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;main.c: 660: (Busy_eep(), Write_b_eep(0x21 + 5 + ( reg - 5 ),val));
  5542  0021B0  ECB1  F018         	call	_Busy_eep	;wreg free
  5543  0021B4  0E21               	movlw	33
  5544  0021B6  2417               	addwf	vscp_writeAppReg@reg,w,c
  5545  0021B8  6E08               	movwf	?_Write_b_eep,c
  5546  0021BA  6A09               	clrf	?_Write_b_eep+1,c
  5547  0021BC  0E00               	movlw	0
  5548  0021BE  2209               	addwfc	?_Write_b_eep+1,f,c
  5549  0021C0  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5550  0021C4  EC4B  F016         	call	_Write_b_eep	;wreg free
  5551                           
  5552                           ;main.c: 662: rv = Read_b_eep(0x21 + 5 + ( reg - 5 ));
  5553  0021C8  0E21               	movlw	33
  5554  0021CA  2417               	addwf	vscp_writeAppReg@reg,w,c
  5555  0021CC  6E08               	movwf	?_Read_b_eep,c
  5556  0021CE  6A09               	clrf	?_Read_b_eep+1,c
  5557  0021D0  0E00               	movlw	0
  5558  0021D2  2209               	addwfc	?_Read_b_eep+1,f,c
  5559  0021D4  EC07  F018         	call	_Read_b_eep	;wreg free
  5560  0021D8  D053               	goto	L12
  5561  0021DA                     l6548:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;main.c: 666: else if ( reg == 2 ) {
  5565  0021DA  5017               	movf	vscp_writeAppReg@reg,w,c
  5566  0021DC  0A02               	xorlw	2
  5567  0021DE  E10F               	bnz	l6556
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;main.c: 667: (Busy_eep(), Write_b_eep(0x21 + 2,val));
  5571  0021E0  ECB1  F018         	call	_Busy_eep	;wreg free
  5572  0021E4  6A09               	clrf	?_Write_b_eep+1,c
  5573  0021E6  0E23               	movlw	35
  5574  0021E8  6E08               	movwf	?_Write_b_eep,c
  5575  0021EA  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5576  0021EE  EC4B  F016         	call	_Write_b_eep	;wreg free
  5577                           
  5578                           ;main.c: 668: rv = writeControlReg( 0, val );
  5579  0021F2  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5580  0021F6  0E00               	movlw	0
  5581  0021F8  ECD7  F00D         	call	_writeControlReg
  5582  0021FC  D041               	goto	L12
  5583  0021FE                     l6556:
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;main.c: 671: else if ( reg == 3 ) {
  5587  0021FE  5017               	movf	vscp_writeAppReg@reg,w,c
  5588  002200  0A03               	xorlw	3
  5589  002202  E10F               	bnz	l6564
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;main.c: 672: (Busy_eep(), Write_b_eep(0x21 + 3,val));
  5593  002204  ECB1  F018         	call	_Busy_eep	;wreg free
  5594  002208  6A09               	clrf	?_Write_b_eep+1,c
  5595  00220A  0E24               	movlw	36
  5596  00220C  6E08               	movwf	?_Write_b_eep,c
  5597  00220E  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5598  002212  EC4B  F016         	call	_Write_b_eep	;wreg free
  5599                           
  5600                           ;main.c: 673: rv = writeControlReg( 1, val );
  5601  002216  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5602  00221A  0E01               	movlw	1
  5603  00221C  ECD7  F00D         	call	_writeControlReg
  5604  002220  D02F               	goto	L12
  5605  002222                     l6564:
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;main.c: 676: else if ( reg == 4 ) {
  5609  002222  5017               	movf	vscp_writeAppReg@reg,w,c
  5610  002224  0A04               	xorlw	4
  5611  002226  E12D               	bnz	l6584
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;main.c: 677: (Busy_eep(), Write_b_eep(0x21 + 4,val));
  5615  002228  ECB1  F018         	call	_Busy_eep	;wreg free
  5616  00222C  6A09               	clrf	?_Write_b_eep+1,c
  5617  00222E  0E25               	movlw	37
  5618  002230  6E08               	movwf	?_Write_b_eep,c
  5619  002232  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5620  002236  EC4B  F016         	call	_Write_b_eep	;wreg free
  5621                           
  5622                           ;main.c: 678: rv = writeControlReg( 2, val );
  5623  00223A  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5624  00223E  0E02               	movlw	2
  5625  002240  ECD7  F00D         	call	_writeControlReg
  5626  002244  6E16               	movwf	vscp_writeAppReg@rv,c
  5627                           
  5628                           ;main.c: 679: rv &= 0x03;
  5629  002246  0E03               	movlw	3
  5630  002248  1616               	andwf	vscp_writeAppReg@rv,f,c
  5631  00224A  D01B               	goto	l6584
  5632  00224C                     l6574:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;main.c: 684: else if ( 1 == vscp_page_select ) {
  5636  00224C  0452               	decf	_vscp_page_select,w,c
  5637  00224E  1053               	iorwf	_vscp_page_select+1,w,c
  5638  002250  E118               	bnz	l6584
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;main.c: 687: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5642                           ;main.c: 688: ( 8 * 8 ) ) ) ) {
  5643  002252  0E41               	movlw	65
  5644  002254  6017               	cpfslt	vscp_writeAppReg@reg,c
  5645  002256  D015               	goto	l6584
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;main.c: 689: (Busy_eep(), Write_b_eep(0x21 + 23 + ( reg - 0 ),val));
  5649  002258  ECB1  F018         	call	_Busy_eep	;wreg free
  5650  00225C  0E38               	movlw	56
  5651  00225E  2417               	addwf	vscp_writeAppReg@reg,w,c
  5652  002260  6E08               	movwf	?_Write_b_eep,c
  5653  002262  6A09               	clrf	?_Write_b_eep+1,c
  5654  002264  0E00               	movlw	0
  5655  002266  2209               	addwfc	?_Write_b_eep+1,f,c
  5656  002268  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5657  00226C  EC4B  F016         	call	_Write_b_eep	;wreg free
  5658                           
  5659                           ;main.c: 691: rv = Read_b_eep(0x21 + 23 + ( reg - 0 ));
  5660  002270  0E38               	movlw	56
  5661  002272  2417               	addwf	vscp_writeAppReg@reg,w,c
  5662  002274  6E08               	movwf	?_Read_b_eep,c
  5663  002276  6A09               	clrf	?_Read_b_eep+1,c
  5664  002278  0E00               	movlw	0
  5665  00227A  2209               	addwfc	?_Read_b_eep+1,f,c
  5666  00227C  EC07  F018         	call	_Read_b_eep	;wreg free
  5667  002280                     L12:
  5668  002280  6E16               	movwf	vscp_writeAppReg@rv,c
  5669  002282                     l6584:
  5670                           
  5671                           ;main.c: 693: }
  5672                           ;main.c: 695: }
  5673                           ;main.c: 697: return rv;
  5674  002282  5016               	movf	vscp_writeAppReg@rv,w,c
  5675  002284  0012               	return	
  5676  002286                     __end_of_vscp_writeAppReg:
  5677                           	opt stack 0
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           indf1	equ	0xFE7
  5683                           fsr1h	equ	0xFE2
  5684                           fsr1l	equ	0xFE1
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _writeControlReg *****************
  5693 ;; Defined at:
  5694 ;;		line 705 in file "../main.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  ctrlreg         1    wreg     unsigned char 
  5697 ;;  val             1   16[COMRAM] unsigned char 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  5700 ;;  rv              1   19[COMRAM] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  1    wreg      unsigned char 
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5710 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5714 ;;Total ram usage:        4 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    3
  5717 ;; This function calls:
  5718 ;;		_readControlReg
  5719 ;; This function is called by:
  5720 ;;		_main
  5721 ;;		_vscp_writeAppReg
  5722 ;; This function uses a non-reentrant model
  5723 ;;
  5724                           
  5725                           	psect	text24
  5726  001BAE                     __ptext24:
  5727                           	opt stack 0
  5728  001BAE                     _writeControlReg:
  5729                           	opt stack 24
  5730                           
  5731                           ;incstack = 0
  5732                           ;incstack = 0
  5733                           ;writeControlReg@ctrlreg stored from wreg
  5734  001BAE  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  5735                           
  5736                           ;main.c: 706: uint8_t rv = 0;
  5737  001BB2  6A14               	clrf	writeControlReg@rv,c
  5738                           
  5739                           ;main.c: 708: switch ( ctrlreg ) {
  5740  001BB4  D0B9               	goto	l3968
  5741  001BB6                     l3954:
  5742  001BB6  0E01               	movlw	1
  5743                           
  5744                           ;main.c: 711: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  5745  001BB8  A011               	btfss	writeControlReg@val,0,c
  5746  001BBA  0E00               	movlw	0
  5747  001BBC  6E12               	movwf	??_writeControlReg& (0+255),c
  5748  001BBE  3212               	rrcf	??_writeControlReg,f,c
  5749  001BC0  3212               	rrcf	??_writeControlReg,f,c
  5750  001BC2  5082               	movf	3970,w,c	;volatile
  5751  001BC4  1812               	xorwf	??_writeControlReg,w,c
  5752  001BC6  0B7F               	andlw	-129
  5753  001BC8  1812               	xorwf	??_writeControlReg,w,c
  5754  001BCA  6E82               	movwf	3970,c	;volatile
  5755  001BCC  0E01               	movlw	1
  5756                           
  5757                           ;main.c: 712: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  5758  001BCE  A211               	btfss	writeControlReg@val,1,c
  5759  001BD0  0E00               	movlw	0
  5760  001BD2  6E12               	movwf	??_writeControlReg& (0+255),c
  5761  001BD4  3A12               	swapf	??_writeControlReg,f,c
  5762  001BD6  4612               	rlncf	??_writeControlReg,f,c
  5763  001BD8  4612               	rlncf	??_writeControlReg,f,c
  5764  001BDA  5082               	movf	3970,w,c	;volatile
  5765  001BDC  1812               	xorwf	??_writeControlReg,w,c
  5766  001BDE  0BBF               	andlw	-65
  5767  001BE0  1812               	xorwf	??_writeControlReg,w,c
  5768  001BE2  6E82               	movwf	3970,c	;volatile
  5769  001BE4  0E01               	movlw	1
  5770                           
  5771                           ;main.c: 713: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  5772  001BE6  A411               	btfss	writeControlReg@val,2,c
  5773  001BE8  0E00               	movlw	0
  5774  001BEA  6E12               	movwf	??_writeControlReg& (0+255),c
  5775  001BEC  4612               	rlncf	??_writeControlReg,f,c
  5776  001BEE  4612               	rlncf	??_writeControlReg,f,c
  5777  001BF0  4612               	rlncf	??_writeControlReg,f,c
  5778  001BF2  5082               	movf	3970,w,c	;volatile
  5779  001BF4  1812               	xorwf	??_writeControlReg,w,c
  5780  001BF6  0BF7               	andlw	-9
  5781  001BF8  1812               	xorwf	??_writeControlReg,w,c
  5782  001BFA  6E82               	movwf	3970,c	;volatile
  5783  001BFC  0E01               	movlw	1
  5784                           
  5785                           ;main.c: 714: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  5786  001BFE  A611               	btfss	writeControlReg@val,3,c
  5787  001C00  0E00               	movlw	0
  5788  001C02  6E12               	movwf	??_writeControlReg& (0+255),c
  5789  001C04  3A12               	swapf	??_writeControlReg,f,c
  5790  001C06  5082               	movf	3970,w,c	;volatile
  5791  001C08  1812               	xorwf	??_writeControlReg,w,c
  5792  001C0A  0BEF               	andlw	-17
  5793  001C0C  1812               	xorwf	??_writeControlReg,w,c
  5794  001C0E  6E82               	movwf	3970,c	;volatile
  5795  001C10  0E01               	movlw	1
  5796                           
  5797                           ;main.c: 715: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  5798  001C12  A811               	btfss	writeControlReg@val,4,c
  5799  001C14  0E00               	movlw	0
  5800  001C16  6E12               	movwf	??_writeControlReg& (0+255),c
  5801  001C18  3A12               	swapf	??_writeControlReg,f,c
  5802  001C1A  4612               	rlncf	??_writeControlReg,f,c
  5803  001C1C  5082               	movf	3970,w,c	;volatile
  5804  001C1E  1812               	xorwf	??_writeControlReg,w,c
  5805  001C20  0BDF               	andlw	-33
  5806  001C22  1812               	xorwf	??_writeControlReg,w,c
  5807  001C24  6E82               	movwf	3970,c	;volatile
  5808  001C26  0E01               	movlw	1
  5809                           
  5810                           ;main.c: 716: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  5811  001C28  AA11               	btfss	writeControlReg@val,5,c
  5812  001C2A  0E00               	movlw	0
  5813  001C2C  6E12               	movwf	??_writeControlReg& (0+255),c
  5814  001C2E  5080               	movf	3968,w,c	;volatile
  5815  001C30  1812               	xorwf	??_writeControlReg,w,c
  5816  001C32  0BFE               	andlw	-2
  5817  001C34  1812               	xorwf	??_writeControlReg,w,c
  5818  001C36  6E80               	movwf	3968,c	;volatile
  5819  001C38  0E01               	movlw	1
  5820                           
  5821                           ;main.c: 717: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  5822  001C3A  AC11               	btfss	writeControlReg@val,6,c
  5823  001C3C  0E00               	movlw	0
  5824  001C3E  6E12               	movwf	??_writeControlReg& (0+255),c
  5825  001C40  4612               	rlncf	??_writeControlReg,f,c
  5826  001C42  5080               	movf	3968,w,c	;volatile
  5827  001C44  1812               	xorwf	??_writeControlReg,w,c
  5828  001C46  0BFD               	andlw	-3
  5829  001C48  1812               	xorwf	??_writeControlReg,w,c
  5830  001C4A  6E80               	movwf	3968,c	;volatile
  5831  001C4C  0E01               	movlw	1
  5832                           
  5833                           ;main.c: 718: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  5834  001C4E  AE11               	btfss	writeControlReg@val,7,c
  5835  001C50  0E00               	movlw	0
  5836  001C52  6E12               	movwf	??_writeControlReg& (0+255),c
  5837  001C54  4612               	rlncf	??_writeControlReg,f,c
  5838  001C56  4612               	rlncf	??_writeControlReg,f,c
  5839  001C58  5080               	movf	3968,w,c	;volatile
  5840  001C5A  1812               	xorwf	??_writeControlReg,w,c
  5841  001C5C  0BFB               	andlw	-5
  5842  001C5E  1812               	xorwf	??_writeControlReg,w,c
  5843  001C60  6E80               	movwf	3968,c	;volatile
  5844                           
  5845                           ;main.c: 719: rv = readControlReg( 0 );
  5846  001C62  0E00               	movlw	0
  5847  001C64  EC52  F012         	call	_readControlReg
  5848  001C68  D05D               	goto	L14
  5849  001C6A                     l3958:
  5850  001C6A  0E01               	movlw	1
  5851                           
  5852                           ;main.c: 723: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  5853  001C6C  A011               	btfss	writeControlReg@val,0,c
  5854  001C6E  0E00               	movlw	0
  5855  001C70  6E12               	movwf	??_writeControlReg& (0+255),c
  5856  001C72  4612               	rlncf	??_writeControlReg,f,c
  5857  001C74  4612               	rlncf	??_writeControlReg,f,c
  5858  001C76  4612               	rlncf	??_writeControlReg,f,c
  5859  001C78  5080               	movf	3968,w,c	;volatile
  5860  001C7A  1812               	xorwf	??_writeControlReg,w,c
  5861  001C7C  0BF7               	andlw	-9
  5862  001C7E  1812               	xorwf	??_writeControlReg,w,c
  5863  001C80  6E80               	movwf	3968,c	;volatile
  5864  001C82  0E01               	movlw	1
  5865                           
  5866                           ;main.c: 724: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  5867  001C84  A211               	btfss	writeControlReg@val,1,c
  5868  001C86  0E00               	movlw	0
  5869  001C88  6E12               	movwf	??_writeControlReg& (0+255),c
  5870  001C8A  3A12               	swapf	??_writeControlReg,f,c
  5871  001C8C  4612               	rlncf	??_writeControlReg,f,c
  5872  001C8E  5080               	movf	3968,w,c	;volatile
  5873  001C90  1812               	xorwf	??_writeControlReg,w,c
  5874  001C92  0BDF               	andlw	-33
  5875  001C94  1812               	xorwf	??_writeControlReg,w,c
  5876  001C96  6E80               	movwf	3968,c	;volatile
  5877  001C98  0E01               	movlw	1
  5878                           
  5879                           ;main.c: 727: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  5880  001C9A  A811               	btfss	writeControlReg@val,4,c
  5881  001C9C  0E00               	movlw	0
  5882  001C9E  6E12               	movwf	??_writeControlReg& (0+255),c
  5883  001CA0  3A12               	swapf	??_writeControlReg,f,c
  5884  001CA2  5081               	movf	3969,w,c	;volatile
  5885  001CA4  1812               	xorwf	??_writeControlReg,w,c
  5886  001CA6  0BEF               	andlw	-17
  5887  001CA8  1812               	xorwf	??_writeControlReg,w,c
  5888  001CAA  6E81               	movwf	3969,c	;volatile
  5889  001CAC  0E01               	movlw	1
  5890                           
  5891                           ;main.c: 728: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  5892  001CAE  AA11               	btfss	writeControlReg@val,5,c
  5893  001CB0  0E00               	movlw	0
  5894  001CB2  6E12               	movwf	??_writeControlReg& (0+255),c
  5895  001CB4  4612               	rlncf	??_writeControlReg,f,c
  5896  001CB6  4612               	rlncf	??_writeControlReg,f,c
  5897  001CB8  5082               	movf	3970,w,c	;volatile
  5898  001CBA  1812               	xorwf	??_writeControlReg,w,c
  5899  001CBC  0BFB               	andlw	-5
  5900  001CBE  1812               	xorwf	??_writeControlReg,w,c
  5901  001CC0  6E82               	movwf	3970,c	;volatile
  5902  001CC2  0E01               	movlw	1
  5903                           
  5904                           ;main.c: 729: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  5905  001CC4  AC11               	btfss	writeControlReg@val,6,c
  5906  001CC6  0E00               	movlw	0
  5907  001CC8  6E12               	movwf	??_writeControlReg& (0+255),c
  5908  001CCA  4612               	rlncf	??_writeControlReg,f,c
  5909  001CCC  5081               	movf	3969,w,c	;volatile
  5910  001CCE  1812               	xorwf	??_writeControlReg,w,c
  5911  001CD0  0BFD               	andlw	-3
  5912  001CD2  1812               	xorwf	??_writeControlReg,w,c
  5913  001CD4  6E81               	movwf	3969,c	;volatile
  5914  001CD6  0E01               	movlw	1
  5915                           
  5916                           ;main.c: 730: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  5917  001CD8  AE11               	btfss	writeControlReg@val,7,c
  5918  001CDA  0E00               	movlw	0
  5919  001CDC  6E12               	movwf	??_writeControlReg& (0+255),c
  5920  001CDE  5081               	movf	3969,w,c	;volatile
  5921  001CE0  1812               	xorwf	??_writeControlReg,w,c
  5922  001CE2  0BFE               	andlw	-2
  5923  001CE4  1812               	xorwf	??_writeControlReg,w,c
  5924  001CE6  6E81               	movwf	3969,c	;volatile
  5925                           
  5926                           ;main.c: 731: rv = readControlReg( 1 );
  5927  001CE8  0E01               	movlw	1
  5928  001CEA  EC52  F012         	call	_readControlReg
  5929  001CEE  D01A               	goto	L14
  5930  001CF0                     l3962:
  5931  001CF0  0E01               	movlw	1
  5932                           
  5933                           ;main.c: 735: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  5934  001CF2  A011               	btfss	writeControlReg@val,0,c
  5935  001CF4  0E00               	movlw	0
  5936  001CF6  6E12               	movwf	??_writeControlReg& (0+255),c
  5937  001CF8  3A12               	swapf	??_writeControlReg,f,c
  5938  001CFA  4612               	rlncf	??_writeControlReg,f,c
  5939  001CFC  4612               	rlncf	??_writeControlReg,f,c
  5940  001CFE  5081               	movf	3969,w,c	;volatile
  5941  001D00  1812               	xorwf	??_writeControlReg,w,c
  5942  001D02  0BBF               	andlw	-65
  5943  001D04  1812               	xorwf	??_writeControlReg,w,c
  5944  001D06  6E81               	movwf	3969,c	;volatile
  5945  001D08  0E01               	movlw	1
  5946                           
  5947                           ;main.c: 736: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  5948  001D0A  A211               	btfss	writeControlReg@val,1,c
  5949  001D0C  0E00               	movlw	0
  5950  001D0E  6E12               	movwf	??_writeControlReg& (0+255),c
  5951  001D10  3A12               	swapf	??_writeControlReg,f,c
  5952  001D12  4612               	rlncf	??_writeControlReg,f,c
  5953  001D14  5081               	movf	3969,w,c	;volatile
  5954  001D16  1812               	xorwf	??_writeControlReg,w,c
  5955  001D18  0BDF               	andlw	-33
  5956  001D1A  1812               	xorwf	??_writeControlReg,w,c
  5957  001D1C  6E81               	movwf	3969,c	;volatile
  5958                           
  5959                           ;main.c: 737: rv = readControlReg( 2 );
  5960  001D1E  0E02               	movlw	2
  5961  001D20  EC52  F012         	call	_readControlReg
  5962  001D24                     L14:
  5963  001D24  6E14               	movwf	writeControlReg@rv,c
  5964                           
  5965                           ;main.c: 738: break;
  5966  001D26  D007               	goto	l3970
  5967  001D28                     l3968:
  5968  001D28  5013               	movf	writeControlReg@ctrlreg,w,c
  5969                           
  5970                           ; Switch size 1, requested type "speed"
  5971                           ; Number of cases is 3, Range of values is 0 to 2
  5972                           ; switch strategies available:
  5973                           ; Name         Instructions Cycles
  5974                           ; simple_byte           10     6 (average)
  5975                           ;	Chosen strategy is simple_byte
  5976  001D2A  E101 D744          	bz	l3954
  5977  001D2E  0A01               	xorlw	1	; case 1
  5978  001D30  E09C               	bz	l3958
  5979  001D32  0A03               	xorlw	3	; case 2
  5980  001D34  E0DD               	bz	l3962
  5981  001D36                     l3970:
  5982                           
  5983                           ;main.c: 741: return rv;
  5984  001D36  5014               	movf	writeControlReg@rv,w,c
  5985  001D38  0012               	return	
  5986  001D3A                     __end_of_writeControlReg:
  5987                           	opt stack 0
  5988                           prodh	equ	0xFF4
  5989                           prodl	equ	0xFF3
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           indf1	equ	0xFE7
  5993                           fsr1h	equ	0xFE2
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           postinc2	equ	0xFDE
  5997                           postdec2	equ	0xFDD
  5998                           fsr2h	equ	0xFDA
  5999                           fsr2l	equ	0xFD9
  6000                           status	equ	0xFD8
  6001                           
  6002 ;; *************** function _vscp_readRegister *****************
  6003 ;; Defined at:
  6004 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  reg             1    wreg     unsigned char 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  reg             1   28[COMRAM] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : F/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6021 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6022 ;;Total ram usage:        1 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    5
  6025 ;; This function calls:
  6026 ;;		_vscp_readAppReg
  6027 ;;		_vscp_readStdReg
  6028 ;; This function is called by:
  6029 ;;		_vscp_handleProtocolEvent
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text25
  6034  00303E                     __ptext25:
  6035                           	opt stack 0
  6036  00303E                     _vscp_readRegister:
  6037                           	opt stack 24
  6038                           
  6039                           ;incstack = 0
  6040                           ;incstack = 0
  6041                           ;vscp_readRegister@reg stored from wreg
  6042  00303E  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
  6046  003042  0E7F               	movlw	127
  6047  003044  641D               	cpfsgt	vscp_readRegister@reg,c
  6048  003046  D003               	goto	l6868
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
  6052  003048  501D               	movf	vscp_readRegister@reg,w,c
  6053  00304A  EF00  F00D         	goto	_vscp_readStdReg
  6054  00304E                     l6868:
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;vscp_firmware.c: 565: else {
  6058                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
  6059  00304E  501D               	movf	vscp_readRegister@reg,w,c
  6060  003050  EFAA  F014         	goto	_vscp_readAppReg
  6061  003054                     __end_of_vscp_readRegister:
  6062                           	opt stack 0
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           indf1	equ	0xFE7
  6068                           fsr1h	equ	0xFE2
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _vscp_readStdReg *****************
  6078 ;; Defined at:
  6079 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  reg             1    wreg     unsigned char 
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;  reg             1   27[COMRAM] unsigned char 
  6084 ;;  code            4   20[COMRAM] unsigned long 
  6085 ;;  idx             1   25[COMRAM] unsigned char 
  6086 ;;  code            4   16[COMRAM] unsigned long 
  6087 ;;  idx             1   24[COMRAM] unsigned char 
  6088 ;;  rv              1   26[COMRAM] unsigned char 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      unsigned char 
  6091 ;; Registers used:
  6092 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : F/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6099 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6100 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6101 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6102 ;;Total ram usage:       17 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    4
  6105 ;; This function calls:
  6106 ;;		_vscp_getMajorVersion
  6107 ;;		_vscp_getMinorVersion
  6108 ;;		_vscp_getSubMinorVersion
  6109 ;;		_vscp_getGUID
  6110 ;;		_vscp_getMDF_URL
  6111 ;;		_vscp_getUserID
  6112 ;;		_vscp_getManufacturerId
  6113 ;;		_vscp_getBootLoaderAlgorithm
  6114 ;;		_vscp_getBufferSize
  6115 ;;		_vscp_getFamilyCode
  6116 ;;		_vscp_getFamilyType
  6117 ;;		_vscp_getRegisterPagesUsed
  6118 ;; This function is called by:
  6119 ;;		_vscp_readRegister
  6120 ;;		_vscp_handleProtocolEvent
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text26
  6125  001A00                     __ptext26:
  6126                           	opt stack 0
  6127  001A00                     _vscp_readStdReg:
  6128                           	opt stack 25
  6129                           
  6130                           ;incstack = 0
  6131                           ;incstack = 0
  6132                           ;vscp_readStdReg@reg stored from wreg
  6133  001A00  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;vscp_firmware.c: 576: uint8_t rv = 0;
  6137  001A04  6A1B               	clrf	vscp_readStdReg@rv,c
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;vscp_firmware.c: 578: if (0x80 == reg) {
  6141  001A06  501C               	movf	vscp_readStdReg@reg,w,c
  6142  001A08  0A80               	xorlw	128
  6143  001A0A  E104               	bnz	l6878
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
  6147  001A0C  C055  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  6148                           
  6149                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
  6150  001A10  6A55               	clrf	_vscp_alarmstatus,c
  6151                           
  6152                           ;vscp_firmware.c: 584: }
  6153  001A12  D0CB               	goto	l6966
  6154  001A14                     l6878:
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
  6158  001A14  501C               	movf	vscp_readStdReg@reg,w,c
  6159  001A16  0A81               	xorlw	129
  6160  001A18  E102               	bnz	l6882
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;vscp_firmware.c: 588: rv = 1;
  6164  001A1A  0E01               	movlw	1
  6165  001A1C  D081               	goto	L25
  6166  001A1E                     l6882:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
  6170  001A1E  501C               	movf	vscp_readStdReg@reg,w,c
  6171  001A20  0A82               	xorlw	130
  6172  001A22  E102               	bnz	l6886
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;vscp_firmware.c: 594: rv = 5;
  6176  001A24  0E05               	movlw	5
  6177  001A26  D07C               	goto	L25
  6178  001A28                     l6886:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
  6182  001A28  501C               	movf	vscp_readStdReg@reg,w,c
  6183  001A2A  0A83               	xorlw	131
  6184  001A2C  E102               	bnz	l6890
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;vscp_firmware.c: 600: rv = 0;
  6188  001A2E  6A1B               	clrf	vscp_readStdReg@rv,c
  6189                           
  6190                           ;vscp_firmware.c: 602: }
  6191  001A30  D0BC               	goto	l6966
  6192  001A32                     l6890:
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
  6196  001A32  501C               	movf	vscp_readStdReg@reg,w,c
  6197  001A34  0A94               	xorlw	148
  6198  001A36  E103               	bnz	l6894
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
  6202  001A38  ECBD  F018         	call	_vscp_getMajorVersion	;wreg free
  6203  001A3C  D071               	goto	L25
  6204  001A3E                     l6894:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
  6208  001A3E  501C               	movf	vscp_readStdReg@reg,w,c
  6209  001A40  0A95               	xorlw	149
  6210  001A42  E103               	bnz	l6898
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
  6214  001A44  ECBC  F018         	call	_vscp_getMinorVersion	;wreg free
  6215  001A48  D06B               	goto	L25
  6216  001A4A                     l6898:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
  6220  001A4A  501C               	movf	vscp_readStdReg@reg,w,c
  6221  001A4C  0A96               	xorlw	150
  6222  001A4E  E103               	bnz	l6902
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
  6226  001A50  ECBB  F018         	call	_vscp_getSubMinorVersion	;wreg free
  6227  001A54  D065               	goto	L25
  6228  001A56                     l6902:
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
  6232  001A56  0E89               	movlw	137
  6233  001A58  601C               	cpfslt	vscp_readStdReg@reg,c
  6234  001A5A  D005               	goto	l6906
  6235                           
  6236                           ; BSR set to: 0
  6237                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
  6238  001A5C  501C               	movf	vscp_readStdReg@reg,w,c
  6239  001A5E  0F7C               	addlw	124
  6240  001A60  EC60  F018         	call	_vscp_getUserID
  6241  001A64  D05D               	goto	L25
  6242  001A66                     l6906:
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
  6246                           ;vscp_firmware.c: 628: (reg < 0x91)) {
  6247  001A66  0E88               	movlw	136
  6248  001A68  641C               	cpfsgt	vscp_readStdReg@reg,c
  6249  001A6A  D008               	goto	l6912
  6250                           
  6251                           ; BSR set to: 0
  6252  001A6C  0E91               	movlw	145
  6253  001A6E  601C               	cpfslt	vscp_readStdReg@reg,c
  6254  001A70  D005               	goto	l6912
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
  6258  001A72  501C               	movf	vscp_readStdReg@reg,w,c
  6259  001A74  0F77               	addlw	119
  6260  001A76  EC56  F018         	call	_vscp_getManufacturerId
  6261  001A7A  D052               	goto	L25
  6262  001A7C                     l6912:
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
  6266  001A7C  501C               	movf	vscp_readStdReg@reg,w,c
  6267  001A7E  0A91               	xorlw	145
  6268  001A80  E103               	bnz	l6916
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;vscp_firmware.c: 637: rv = vscp_nickname;
  6272  001A82  C09F  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6273                           
  6274                           ;vscp_firmware.c: 639: }
  6275  001A86  D091               	goto	l6966
  6276  001A88                     l6916:
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
  6280  001A88  501C               	movf	vscp_readStdReg@reg,w,c
  6281  001A8A  0A93               	xorlw	147
  6282  001A8C  E103               	bnz	l6920
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
  6286  001A8E  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6287                           
  6288                           ;vscp_firmware.c: 645: }
  6289  001A92  D08B               	goto	l6966
  6290  001A94                     l6920:
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
  6294  001A94  501C               	movf	vscp_readStdReg@reg,w,c
  6295  001A96  0A92               	xorlw	146
  6296  001A98  E102               	bnz	l6924
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
  6300  001A9A  5053               	movf	_vscp_page_select+1,w,c
  6301  001A9C  D041               	goto	L25
  6302  001A9E                     l6924:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
  6306  001A9E  501C               	movf	vscp_readStdReg@reg,w,c
  6307  001AA0  0A97               	xorlw	151
  6308  001AA2  E103               	bnz	l6928
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
  6312  001AA4  ECBA  F018         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6313  001AA8  D03B               	goto	L25
  6314  001AAA                     l6928:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
  6318  001AAA  501C               	movf	vscp_readStdReg@reg,w,c
  6319  001AAC  0A98               	xorlw	152
  6320  001AAE  E103               	bnz	l6932
  6321                           
  6322                           ; BSR set to: 0
  6323                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
  6324  001AB0  ECB9  F018         	call	_vscp_getBufferSize	;wreg free
  6325  001AB4  D035               	goto	L25
  6326  001AB6                     l6932:
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
  6330  001AB6  501C               	movf	vscp_readStdReg@reg,w,c
  6331  001AB8  0A99               	xorlw	153
  6332  001ABA  E103               	bnz	l6936
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
  6336  001ABC  ECB8  F018         	call	_vscp_getRegisterPagesUsed	;wreg free
  6337  001AC0  D02F               	goto	L25
  6338  001AC2                     l6936:
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
  6342                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
  6343  001AC2  0E99               	movlw	153
  6344  001AC4  641C               	cpfsgt	vscp_readStdReg@reg,c
  6345  001AC6  D02E               	goto	l6946
  6346                           
  6347                           ; BSR set to: 0
  6348  001AC8  0E9E               	movlw	158
  6349  001ACA  601C               	cpfslt	vscp_readStdReg@reg,c
  6350  001ACC  D02B               	goto	l6946
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
  6354  001ACE  EC9E  F018         	call	_vscp_getFamilyCode	;wreg free
  6355  001AD2  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6356  001AD6  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6357  001ADA  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6358  001ADE  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
  6362  001AE2  501C               	movf	vscp_readStdReg@reg,w,c
  6363  001AE4  0F66               	addlw	102
  6364  001AE6  6E19               	movwf	vscp_readStdReg@idx,c
  6365                           
  6366                           ; BSR set to: 0
  6367                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6368  001AE8  5019               	movf	vscp_readStdReg@idx,w,c
  6369  001AEA  0803               	sublw	3
  6370  001AEC  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6371  001AEE  90D8               	bcf	status,0,c
  6372  001AF0  360C               	rlcf	??_vscp_readStdReg,f,c
  6373  001AF2  90D8               	bcf	status,0,c
  6374  001AF4  360C               	rlcf	??_vscp_readStdReg,f,c
  6375  001AF6  90D8               	bcf	status,0,c
  6376  001AF8  360C               	rlcf	??_vscp_readStdReg,f,c
  6377  001AFA  500C               	movf	??_vscp_readStdReg,w,c
  6378  001AFC  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6379  001B00  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6380  001B04  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6381  001B08  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6382  001B0C  2AE8               	incf	wreg,f,c
  6383  001B0E  D005               	goto	u7300
  6384  001B10                     u7305:
  6385  001B10  90D8               	bcf	status,0,c
  6386  001B12  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6387  001B14  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6388  001B16  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6389  001B18  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6390  001B1A                     u7300:
  6391  001B1A  2EE8               	decfsz	wreg,f,c
  6392  001B1C  D7F9               	goto	u7305
  6393  001B1E  D030               	goto	L26
  6394  001B20                     L25:
  6395  001B20  6E1B               	movwf	vscp_readStdReg@rv,c
  6396                           
  6397                           ;vscp_firmware.c: 671: }
  6398  001B22  D043               	goto	l6966
  6399  001B24                     l6946:
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
  6403                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
  6404  001B24  0E9D               	movlw	157
  6405  001B26  641C               	cpfsgt	vscp_readStdReg@reg,c
  6406  001B28  D02D               	goto	l6956
  6407                           
  6408                           ; BSR set to: 0
  6409  001B2A  0EA2               	movlw	162
  6410  001B2C  601C               	cpfslt	vscp_readStdReg@reg,c
  6411  001B2E  D02A               	goto	l6956
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
  6415  001B30  EC99  F018         	call	_vscp_getFamilyType	;wreg free
  6416  001B34  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1117+3
  6417  001B38  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1117+2
  6418  001B3C  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1117+1
  6419  001B40  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1117
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
  6423  001B44  501C               	movf	vscp_readStdReg@reg,w,c
  6424  001B46  0F62               	addlw	98
  6425  001B48  6E1A               	movwf	vscp_readStdReg@idx_1118,c
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6429  001B4A  501A               	movf	vscp_readStdReg@idx_1118,w,c
  6430  001B4C  0803               	sublw	3
  6431  001B4E  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6432  001B50  90D8               	bcf	status,0,c
  6433  001B52  360C               	rlcf	??_vscp_readStdReg,f,c
  6434  001B54  90D8               	bcf	status,0,c
  6435  001B56  360C               	rlcf	??_vscp_readStdReg,f,c
  6436  001B58  90D8               	bcf	status,0,c
  6437  001B5A  360C               	rlcf	??_vscp_readStdReg,f,c
  6438  001B5C  500C               	movf	??_vscp_readStdReg,w,c
  6439  001B5E  C015  F00D         	movff	vscp_readStdReg@code_1117,??_vscp_readStdReg+1
  6440  001B62  C016  F00E         	movff	vscp_readStdReg@code_1117+1,??_vscp_readStdReg+2
  6441  001B66  C017  F00F         	movff	vscp_readStdReg@code_1117+2,??_vscp_readStdReg+3
  6442  001B6A  C018  F010         	movff	vscp_readStdReg@code_1117+3,??_vscp_readStdReg+4
  6443  001B6E  2AE8               	incf	wreg,f,c
  6444  001B70  D005               	goto	u7330
  6445  001B72                     u7335:
  6446  001B72  90D8               	bcf	status,0,c
  6447  001B74  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6448  001B76  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6449  001B78  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6450  001B7A  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6451  001B7C                     u7330:
  6452  001B7C  2EE8               	decfsz	wreg,f,c
  6453  001B7E  D7F9               	goto	u7335
  6454  001B80                     L26:
  6455  001B80  500D               	movf	??_vscp_readStdReg+1,w,c
  6456  001B82  D7CE               	goto	L25
  6457  001B84                     l6956:
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
  6461                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
  6462  001B84  0ECF               	movlw	207
  6463  001B86  641C               	cpfsgt	vscp_readStdReg@reg,c
  6464  001B88  D008               	goto	l6962
  6465                           
  6466                           ; BSR set to: 0
  6467  001B8A  0EE0               	movlw	224
  6468  001B8C  601C               	cpfslt	vscp_readStdReg@reg,c
  6469  001B8E  D005               	goto	l6962
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
  6473  001B90  501C               	movf	vscp_readStdReg@reg,w,c
  6474  001B92  0F30               	addlw	48
  6475  001B94  EC6A  F018         	call	_vscp_getGUID
  6476  001B98  D7C3               	goto	L25
  6477  001B9A                     l6962:
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
  6481  001B9A  0EDF               	movlw	223
  6482  001B9C  641C               	cpfsgt	vscp_readStdReg@reg,c
  6483  001B9E  D005               	goto	l6966
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
  6487  001BA0  501C               	movf	vscp_readStdReg@reg,w,c
  6488  001BA2  0F20               	addlw	32
  6489  001BA4  ECF9  F017         	call	_vscp_getMDF_URL
  6490  001BA8  D7BB               	goto	L25
  6491  001BAA                     l6966:
  6492                           
  6493                           ;vscp_firmware.c: 691: }
  6494                           ;vscp_firmware.c: 693: return rv;
  6495  001BAA  501B               	movf	vscp_readStdReg@rv,w,c
  6496  001BAC  0012               	return	
  6497  001BAE                     __end_of_vscp_readStdReg:
  6498                           	opt stack 0
  6499                           prodh	equ	0xFF4
  6500                           prodl	equ	0xFF3
  6501                           postinc0	equ	0xFEE
  6502                           wreg	equ	0xFE8
  6503                           indf1	equ	0xFE7
  6504                           fsr1h	equ	0xFE2
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           postdec2	equ	0xFDD
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8
  6512                           
  6513 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6514 ;; Defined at:
  6515 ;;		line 1437 in file "../main.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;		None
  6518 ;; Auto vars:     Size  Location     Type
  6519 ;;		None
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      unsigned char 
  6522 ;; Registers used:
  6523 ;;		wreg
  6524 ;; Tracked objects:
  6525 ;;		On entry : F/0
  6526 ;;		On exit  : F/0
  6527 ;;		Unchanged: F/0
  6528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6533 ;;Total ram usage:        0 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    2
  6536 ;; This function calls:
  6537 ;;		Nothing
  6538 ;; This function is called by:
  6539 ;;		_vscp_readStdReg
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text27
  6544  003170                     __ptext27:
  6545                           	opt stack 0
  6546  003170                     _vscp_getRegisterPagesUsed:
  6547                           	opt stack 26
  6548                           
  6549                           ; BSR set to: 0
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;main.c: 1438: return 1;
  6553                           
  6554                           ;incstack = 0
  6555                           ;incstack = 0
  6556  003170  0C01               	retlw	1
  6557  003172                     __end_of_vscp_getRegisterPagesUsed:
  6558                           	opt stack 0
  6559                           prodh	equ	0xFF4
  6560                           prodl	equ	0xFF3
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           indf1	equ	0xFE7
  6564                           fsr1h	equ	0xFE2
  6565                           fsr1l	equ	0xFE1
  6566                           indf2	equ	0xFDF
  6567                           postinc2	equ	0xFDE
  6568                           postdec2	equ	0xFDD
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _vscp_getFamilyType *****************
  6574 ;; Defined at:
  6575 ;;		line 1418 in file "../main.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;		None
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;		None
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  4    7[COMRAM] unsigned long 
  6582 ;; Registers used:
  6583 ;;		None
  6584 ;; Tracked objects:
  6585 ;;		On entry : F/0
  6586 ;;		On exit  : F/0
  6587 ;;		Unchanged: F/0
  6588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6593 ;;Total ram usage:        4 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    2
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		_vscp_readStdReg
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           	psect	text28
  6604  003132                     __ptext28:
  6605                           	opt stack 0
  6606  003132                     _vscp_getFamilyType:
  6607                           	opt stack 26
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;main.c: 1419: return 0;
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;incstack = 0
  6614                           ;incstack = 0
  6615  003132  6A08               	clrf	?_vscp_getFamilyType,c
  6616  003134  6A09               	clrf	?_vscp_getFamilyType+1,c
  6617  003136  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6618  003138  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6619                           
  6620                           ; BSR set to: 0
  6621  00313A  0012               	return	
  6622  00313C                     __end_of_vscp_getFamilyType:
  6623                           	opt stack 0
  6624                           prodh	equ	0xFF4
  6625                           prodl	equ	0xFF3
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           indf1	equ	0xFE7
  6629                           fsr1h	equ	0xFE2
  6630                           fsr1l	equ	0xFE1
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638 ;; *************** function _vscp_getFamilyCode *****************
  6639 ;; Defined at:
  6640 ;;		line 1409 in file "../main.c"
  6641 ;; Parameters:    Size  Location     Type
  6642 ;;		None
  6643 ;; Auto vars:     Size  Location     Type
  6644 ;;		None
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  4    7[COMRAM] unsigned long 
  6647 ;; Registers used:
  6648 ;;		None
  6649 ;; Tracked objects:
  6650 ;;		On entry : F/0
  6651 ;;		On exit  : F/0
  6652 ;;		Unchanged: F/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6657 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6658 ;;Total ram usage:        4 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    2
  6661 ;; This function calls:
  6662 ;;		Nothing
  6663 ;; This function is called by:
  6664 ;;		_vscp_readStdReg
  6665 ;; This function uses a non-reentrant model
  6666 ;;
  6667                           
  6668                           	psect	text29
  6669  00313C                     __ptext29:
  6670                           	opt stack 0
  6671  00313C                     _vscp_getFamilyCode:
  6672                           	opt stack 26
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;main.c: 1410: return 0L;
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;incstack = 0
  6679                           ;incstack = 0
  6680  00313C  6A08               	clrf	?_vscp_getFamilyCode,c
  6681  00313E  6A09               	clrf	?_vscp_getFamilyCode+1,c
  6682  003140  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  6683  003142  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  6684                           
  6685                           ; BSR set to: 0
  6686  003144  0012               	return	
  6687  003146                     __end_of_vscp_getFamilyCode:
  6688                           	opt stack 0
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           postinc0	equ	0xFEE
  6692                           wreg	equ	0xFE8
  6693                           indf1	equ	0xFE7
  6694                           fsr1h	equ	0xFE2
  6695                           fsr1l	equ	0xFE1
  6696                           indf2	equ	0xFDF
  6697                           postinc2	equ	0xFDE
  6698                           postdec2	equ	0xFDD
  6699                           fsr2h	equ	0xFDA
  6700                           fsr2l	equ	0xFD9
  6701                           status	equ	0xFD8
  6702                           
  6703 ;; *************** function _vscp_getBufferSize *****************
  6704 ;; Defined at:
  6705 ;;		line 1290 in file "../main.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;		None
  6708 ;; Auto vars:     Size  Location     Type
  6709 ;;		None
  6710 ;; Return value:  Size  Location     Type
  6711 ;;                  1    wreg      unsigned char 
  6712 ;; Registers used:
  6713 ;;		wreg
  6714 ;; Tracked objects:
  6715 ;;		On entry : F/0
  6716 ;;		On exit  : F/0
  6717 ;;		Unchanged: F/0
  6718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6723 ;;Total ram usage:        0 bytes
  6724 ;; Hardware stack levels used:    1
  6725 ;; Hardware stack levels required when called:    2
  6726 ;; This function calls:
  6727 ;;		Nothing
  6728 ;; This function is called by:
  6729 ;;		_vscp_readStdReg
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text30
  6734  003172                     __ptext30:
  6735                           	opt stack 0
  6736  003172                     _vscp_getBufferSize:
  6737                           	opt stack 26
  6738                           
  6739                           ; BSR set to: 0
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;main.c: 1291: return 8;
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;incstack = 0
  6746                           ;incstack = 0
  6747  003172  0C08               	retlw	8
  6748  003174                     __end_of_vscp_getBufferSize:
  6749                           	opt stack 0
  6750                           prodh	equ	0xFF4
  6751                           prodl	equ	0xFF3
  6752                           postinc0	equ	0xFEE
  6753                           wreg	equ	0xFE8
  6754                           indf1	equ	0xFE7
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  6765 ;; Defined at:
  6766 ;;		line 1281 in file "../main.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;                  1    wreg      unsigned char 
  6773 ;; Registers used:
  6774 ;;		wreg
  6775 ;; Tracked objects:
  6776 ;;		On entry : F/0
  6777 ;;		On exit  : F/0
  6778 ;;		Unchanged: F/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6784 ;;Total ram usage:        0 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    2
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		_vscp_readStdReg
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text31
  6795  003174                     __ptext31:
  6796                           	opt stack 0
  6797  003174                     _vscp_getBootLoaderAlgorithm:
  6798                           	opt stack 26
  6799                           
  6800                           ; BSR set to: 0
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;main.c: 1282: return 0x01;
  6804                           
  6805                           ; BSR set to: 0
  6806                           ;incstack = 0
  6807                           ;incstack = 0
  6808  003174  0C01               	retlw	1
  6809  003176                     __end_of_vscp_getBootLoaderAlgorithm:
  6810                           	opt stack 0
  6811                           prodh	equ	0xFF4
  6812                           prodl	equ	0xFF3
  6813                           postinc0	equ	0xFEE
  6814                           wreg	equ	0xFE8
  6815                           indf1	equ	0xFE7
  6816                           fsr1h	equ	0xFE2
  6817                           fsr1l	equ	0xFE1
  6818                           indf2	equ	0xFDF
  6819                           postinc2	equ	0xFDE
  6820                           postdec2	equ	0xFDD
  6821                           fsr2h	equ	0xFDA
  6822                           fsr2l	equ	0xFD9
  6823                           status	equ	0xFD8
  6824                           
  6825 ;; *************** function _vscp_getManufacturerId *****************
  6826 ;; Defined at:
  6827 ;;		line 1272 in file "../main.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;  idx             1    wreg     unsigned char 
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  idx             1    9[COMRAM] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;                  1    wreg      unsigned char 
  6834 ;; Registers used:
  6835 ;;		wreg, status,2, status,0, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6842 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6844 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6845 ;;Total ram usage:        1 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:    3
  6848 ;; This function calls:
  6849 ;;		_Read_b_eep
  6850 ;; This function is called by:
  6851 ;;		_vscp_readStdReg
  6852 ;;		_vscp_writeStdReg
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text32
  6857  0030AC                     __ptext32:
  6858                           	opt stack 0
  6859  0030AC                     _vscp_getManufacturerId:
  6860                           	opt stack 25
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;incstack = 0
  6864                           ;incstack = 0
  6865                           ;vscp_getManufacturerId@idx stored from wreg
  6866  0030AC  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
  6867                           
  6868                           ;main.c: 1273: return Read_b_eep(0x09 + idx);
  6869  0030B0  0E09               	movlw	9
  6870  0030B2  240A               	addwf	vscp_getManufacturerId@idx,w,c
  6871  0030B4  6E08               	movwf	?_Read_b_eep,c
  6872  0030B6  6A09               	clrf	?_Read_b_eep+1,c
  6873  0030B8  0E00               	movlw	0
  6874  0030BA  2209               	addwfc	?_Read_b_eep+1,f,c
  6875  0030BC  EF07  F018         	goto	_Read_b_eep	;wreg free
  6876  0030C0                     __end_of_vscp_getManufacturerId:
  6877                           	opt stack 0
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           postinc0	equ	0xFEE
  6881                           wreg	equ	0xFE8
  6882                           indf1	equ	0xFE7
  6883                           fsr1h	equ	0xFE2
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _vscp_getUserID *****************
  6893 ;; Defined at:
  6894 ;;		line 1252 in file "../main.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;  idx             1    wreg     unsigned char 
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;  idx             1    9[COMRAM] unsigned char 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      unsigned char 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6912 ;;Total ram usage:        1 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    3
  6915 ;; This function calls:
  6916 ;;		_Read_b_eep
  6917 ;; This function is called by:
  6918 ;;		_vscp_readStdReg
  6919 ;;		_vscp_writeStdReg
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text33
  6924  0030C0                     __ptext33:
  6925                           	opt stack 0
  6926  0030C0                     _vscp_getUserID:
  6927                           	opt stack 25
  6928                           
  6929                           ;incstack = 0
  6930                           ;incstack = 0
  6931                           ;vscp_getUserID@idx stored from wreg
  6932  0030C0  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
  6933                           
  6934                           ;main.c: 1253: return Read_b_eep(0x04 + idx);
  6935  0030C4  0E04               	movlw	4
  6936  0030C6  240A               	addwf	vscp_getUserID@idx,w,c
  6937  0030C8  6E08               	movwf	?_Read_b_eep,c
  6938  0030CA  6A09               	clrf	?_Read_b_eep+1,c
  6939  0030CC  0E00               	movlw	0
  6940  0030CE  2209               	addwfc	?_Read_b_eep+1,f,c
  6941  0030D0  EF07  F018         	goto	_Read_b_eep	;wreg free
  6942  0030D4                     __end_of_vscp_getUserID:
  6943                           	opt stack 0
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           postinc0	equ	0xFEE
  6947                           wreg	equ	0xFE8
  6948                           indf1	equ	0xFE7
  6949                           fsr1h	equ	0xFE2
  6950                           fsr1l	equ	0xFE1
  6951                           indf2	equ	0xFDF
  6952                           postinc2	equ	0xFDE
  6953                           postdec2	equ	0xFDD
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _vscp_getMDF_URL *****************
  6959 ;; Defined at:
  6960 ;;		line 1243 in file "../main.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;  idx             1    wreg     unsigned char 
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;  idx             1    8[COMRAM] unsigned char 
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      unsigned char 
  6967 ;; Registers used:
  6968 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6969 ;; Tracked objects:
  6970 ;;		On entry : F/0
  6971 ;;		On exit  : F/0
  6972 ;;		Unchanged: F/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6975 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6978 ;;Total ram usage:        2 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    2
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_vscp_readStdReg
  6985 ;;		_vscp_handleProtocolEvent
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text34
  6990  002FF2                     __ptext34:
  6991                           	opt stack 0
  6992  002FF2                     _vscp_getMDF_URL:
  6993                           	opt stack 26
  6994                           
  6995                           ;incstack = 0
  6996                           ;incstack = 0
  6997                           ;vscp_getMDF_URL@idx stored from wreg
  6998  002FF2  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;main.c: 1244: return vscp_deviceURL[ idx ];
  7002  002FF6  5009               	movf	vscp_getMDF_URL@idx,w,c
  7003  002FF8  0F00               	addlw	low _vscp_deviceURL
  7004  002FFA  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  7005  002FFC  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  7006  003000  0E0F               	movlw	high __smallconst
  7007  003002  6EF7               	movwf	tblptrh,c
  7008  003004  0E00               	movlw	low (__smallconst shr (0+16))
  7009  003006  6EF8               	movwf	tblptru,c
  7010  003008  0008               	tblrd		*
  7011  00300A  50F5               	movf	tablat,w,c
  7012                           
  7013                           ; BSR set to: 0
  7014  00300C  0012               	return	
  7015  00300E                     __end_of_vscp_getMDF_URL:
  7016                           	opt stack 0
  7017                           tblptru	equ	0xFF8
  7018                           tblptrh	equ	0xFF7
  7019                           tblptrl	equ	0xFF6
  7020                           tablat	equ	0xFF5
  7021                           prodh	equ	0xFF4
  7022                           prodl	equ	0xFF3
  7023                           postinc0	equ	0xFEE
  7024                           wreg	equ	0xFE8
  7025                           indf1	equ	0xFE7
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _vscp_getGUID *****************
  7036 ;; Defined at:
  7037 ;;		line 1231 in file "../main.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  idx             1    wreg     unsigned char 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  idx             1    9[COMRAM] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;                  1    wreg      unsigned char 
  7044 ;; Registers used:
  7045 ;;		wreg, status,2, status,0, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7052 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7054 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7055 ;;Total ram usage:        1 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    3
  7058 ;; This function calls:
  7059 ;;		_Read_b_eep
  7060 ;; This function is called by:
  7061 ;;		_vscp_readStdReg
  7062 ;;		_vscp_writeStdReg
  7063 ;;		_vscp_handleProtocolEvent
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text35
  7068  0030D4                     __ptext35:
  7069                           	opt stack 0
  7070  0030D4                     _vscp_getGUID:
  7071                           	opt stack 25
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;incstack = 0
  7075                           ;incstack = 0
  7076                           ;vscp_getGUID@idx stored from wreg
  7077  0030D4  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
  7078                           
  7079                           ;main.c: 1232: return Read_b_eep(0x11 + idx);
  7080  0030D8  0E11               	movlw	17
  7081  0030DA  240A               	addwf	vscp_getGUID@idx,w,c
  7082  0030DC  6E08               	movwf	?_Read_b_eep,c
  7083  0030DE  6A09               	clrf	?_Read_b_eep+1,c
  7084  0030E0  0E00               	movlw	0
  7085  0030E2  2209               	addwfc	?_Read_b_eep+1,f,c
  7086  0030E4  EF07  F018         	goto	_Read_b_eep	;wreg free
  7087  0030E8                     __end_of_vscp_getGUID:
  7088                           	opt stack 0
  7089                           tblptru	equ	0xFF8
  7090                           tblptrh	equ	0xFF7
  7091                           tblptrl	equ	0xFF6
  7092                           tablat	equ	0xFF5
  7093                           prodh	equ	0xFF4
  7094                           prodl	equ	0xFF3
  7095                           postinc0	equ	0xFEE
  7096                           wreg	equ	0xFE8
  7097                           indf1	equ	0xFE7
  7098                           fsr1h	equ	0xFE2
  7099                           fsr1l	equ	0xFE1
  7100                           indf2	equ	0xFDF
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           fsr2h	equ	0xFDA
  7104                           fsr2l	equ	0xFD9
  7105                           status	equ	0xFD8
  7106                           
  7107 ;; *************** function _vscp_getSubMinorVersion *****************
  7108 ;; Defined at:
  7109 ;;		line 1220 in file "../main.c"
  7110 ;; Parameters:    Size  Location     Type
  7111 ;;		None
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;		None
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  1    wreg      unsigned char 
  7116 ;; Registers used:
  7117 ;;		wreg
  7118 ;; Tracked objects:
  7119 ;;		On entry : F/0
  7120 ;;		On exit  : F/0
  7121 ;;		Unchanged: F/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7127 ;;Total ram usage:        0 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    2
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		_vscp_readStdReg
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text36
  7138  003176                     __ptext36:
  7139                           	opt stack 0
  7140  003176                     _vscp_getSubMinorVersion:
  7141                           	opt stack 26
  7142                           
  7143                           ; BSR set to: 0
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;main.c: 1221: return 0;
  7147                           
  7148                           ;incstack = 0
  7149                           ;incstack = 0
  7150  003176  0C00               	retlw	0
  7151  003178                     __end_of_vscp_getSubMinorVersion:
  7152                           	opt stack 0
  7153                           tblptru	equ	0xFF8
  7154                           tblptrh	equ	0xFF7
  7155                           tblptrl	equ	0xFF6
  7156                           tablat	equ	0xFF5
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           postinc0	equ	0xFEE
  7160                           wreg	equ	0xFE8
  7161                           indf1	equ	0xFE7
  7162                           fsr1h	equ	0xFE2
  7163                           fsr1l	equ	0xFE1
  7164                           indf2	equ	0xFDF
  7165                           postinc2	equ	0xFDE
  7166                           postdec2	equ	0xFDD
  7167                           fsr2h	equ	0xFDA
  7168                           fsr2l	equ	0xFD9
  7169                           status	equ	0xFD8
  7170                           
  7171 ;; *************** function _vscp_getMinorVersion *****************
  7172 ;; Defined at:
  7173 ;;		line 1211 in file "../main.c"
  7174 ;; Parameters:    Size  Location     Type
  7175 ;;		None
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;		None
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  1    wreg      unsigned char 
  7180 ;; Registers used:
  7181 ;;		wreg
  7182 ;; Tracked objects:
  7183 ;;		On entry : F/0
  7184 ;;		On exit  : F/0
  7185 ;;		Unchanged: F/0
  7186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7191 ;;Total ram usage:        0 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    2
  7194 ;; This function calls:
  7195 ;;		Nothing
  7196 ;; This function is called by:
  7197 ;;		_vscp_readStdReg
  7198 ;; This function uses a non-reentrant model
  7199 ;;
  7200                           
  7201                           	psect	text37
  7202  003178                     __ptext37:
  7203                           	opt stack 0
  7204  003178                     _vscp_getMinorVersion:
  7205                           	opt stack 26
  7206                           
  7207                           ; BSR set to: 0
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;main.c: 1212: return 0;
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;incstack = 0
  7214                           ;incstack = 0
  7215  003178  0C00               	retlw	0
  7216  00317A                     __end_of_vscp_getMinorVersion:
  7217                           	opt stack 0
  7218                           tblptru	equ	0xFF8
  7219                           tblptrh	equ	0xFF7
  7220                           tblptrl	equ	0xFF6
  7221                           tablat	equ	0xFF5
  7222                           prodh	equ	0xFF4
  7223                           prodl	equ	0xFF3
  7224                           postinc0	equ	0xFEE
  7225                           wreg	equ	0xFE8
  7226                           indf1	equ	0xFE7
  7227                           fsr1h	equ	0xFE2
  7228                           fsr1l	equ	0xFE1
  7229                           indf2	equ	0xFDF
  7230                           postinc2	equ	0xFDE
  7231                           postdec2	equ	0xFDD
  7232                           fsr2h	equ	0xFDA
  7233                           fsr2l	equ	0xFD9
  7234                           status	equ	0xFD8
  7235                           
  7236 ;; *************** function _vscp_getMajorVersion *****************
  7237 ;; Defined at:
  7238 ;;		line 1202 in file "../main.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;		None
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;		None
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  1    wreg      unsigned char 
  7245 ;; Registers used:
  7246 ;;		wreg
  7247 ;; Tracked objects:
  7248 ;;		On entry : F/0
  7249 ;;		On exit  : F/0
  7250 ;;		Unchanged: F/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7256 ;;Total ram usage:        0 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    2
  7259 ;; This function calls:
  7260 ;;		Nothing
  7261 ;; This function is called by:
  7262 ;;		_vscp_readStdReg
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           	psect	text38
  7267  00317A                     __ptext38:
  7268                           	opt stack 0
  7269  00317A                     _vscp_getMajorVersion:
  7270                           	opt stack 26
  7271                           
  7272                           ; BSR set to: 0
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;main.c: 1203: return 1;
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;incstack = 0
  7279                           ;incstack = 0
  7280  00317A  0C01               	retlw	1
  7281  00317C                     __end_of_vscp_getMajorVersion:
  7282                           	opt stack 0
  7283                           tblptru	equ	0xFF8
  7284                           tblptrh	equ	0xFF7
  7285                           tblptrl	equ	0xFF6
  7286                           tablat	equ	0xFF5
  7287                           prodh	equ	0xFF4
  7288                           prodl	equ	0xFF3
  7289                           postinc0	equ	0xFEE
  7290                           wreg	equ	0xFE8
  7291                           indf1	equ	0xFE7
  7292                           fsr1h	equ	0xFE2
  7293                           fsr1l	equ	0xFE1
  7294                           indf2	equ	0xFDF
  7295                           postinc2	equ	0xFDE
  7296                           postdec2	equ	0xFDD
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301 ;; *************** function _vscp_newNodeOnline *****************
  7302 ;; Defined at:
  7303 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;		None               void
  7310 ;; Registers used:
  7311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : F/0
  7314 ;;		On exit  : F/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7321 ;;Total ram usage:        1 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    7
  7324 ;; This function calls:
  7325 ;;		_vscp_sendEvent
  7326 ;; This function is called by:
  7327 ;;		_vscp_handleProtocolEvent
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text39
  7332  002DF0                     __ptext39:
  7333                           	opt stack 0
  7334  002DF0                     _vscp_newNodeOnline:
  7335                           	opt stack 22
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
  7339                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;incstack = 0
  7343                           ;incstack = 0
  7344  002DF0  C0A4  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7345  002DF4  0E0F               	movlw	15
  7346  002DF6  164C               	andwf	??_vscp_newNodeOnline,f,c
  7347  002DF8  044C               	decf	??_vscp_newNodeOnline,w,c
  7348  002DFA  A4D8               	btfss	status,2,c
  7349  002DFC  0012               	return	
  7350                           
  7351                           ; BSR set to: 0
  7352  002DFE  519F               	movf	_vscp_nickname& (0+255),w,b
  7353  002E00  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  7354  002E04  62DF               	cpfseq	indf2,c
  7355  002E06  0012               	return	
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
  7359  002E08  0E80               	movlw	128
  7360  002E0A  6FB2               	movwf	_vscp_omsg& (0+255),b
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
  7364  002E0C  6BB3               	clrf	(_vscp_omsg+1)& (0+255),b
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
  7368  002E0E  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  7369  002E10  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  7370                           
  7371                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
  7372  002E12  0E03               	movlw	3
  7373  002E14  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  7374                           
  7375                           ; BSR set to: 0
  7376                           ;vscp_firmware.c: 514: vscp_sendEvent();
  7377  002E16  EF34  F017         	goto	_vscp_sendEvent	;wreg free
  7378  002E1A                     __end_of_vscp_newNodeOnline:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           indf1	equ	0xFE7
  7389                           fsr1h	equ	0xFE2
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           postinc2	equ	0xFDE
  7393                           postdec2	equ	0xFDD
  7394                           fsr2h	equ	0xFDA
  7395                           fsr2l	equ	0xFD9
  7396                           status	equ	0xFD8
  7397                           
  7398 ;; *************** function _vscp_handleDropNickname *****************
  7399 ;; Defined at:
  7400 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;		None
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  bytes           1   12[COMRAM] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;		None               void
  7407 ;; Registers used:
  7408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7409 ;; Tracked objects:
  7410 ;;		On entry : F/0
  7411 ;;		On exit  : F/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7418 ;;Total ram usage:        1 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    5
  7421 ;; This function calls:
  7422 ;;		_vscp_init
  7423 ;;		_vscp_writeNicknamePermanent
  7424 ;; This function is called by:
  7425 ;;		_vscp_handleProtocolEvent
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text40
  7430  002D66                     __ptext40:
  7431                           	opt stack 0
  7432  002D66                     _vscp_handleDropNickname:
  7433                           	opt stack 24
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7437                           
  7438                           ; BSR set to: 0
  7439                           ;incstack = 0
  7440                           ;incstack = 0
  7441  002D66  51A4               	movf	_vscp_imsg& (0+255),w,b
  7442  002D68  0B0F               	andlw	15
  7443  002D6A  6E0D               	movwf	vscp_handleDropNickname@bytes,c
  7444                           
  7445                           ; BSR set to: 0
  7446                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7447  002D6C  500D               	movf	vscp_handleDropNickname@bytes,w,c
  7448  002D6E  B4D8               	btfsc	status,2,c
  7449  002D70  0012               	return	
  7450                           
  7451                           ; BSR set to: 0
  7452  002D72  519F               	movf	_vscp_nickname& (0+255),w,b
  7453  002D74  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  7454  002D78  62DF               	cpfseq	indf2,c
  7455  002D7A  0012               	return	
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7459  002D7C  040D               	decf	vscp_handleDropNickname@bytes,w,c
  7460  002D7E  E005               	bz	l891
  7461                           
  7462                           ; BSR set to: 0
  7463  002D80  0E01               	movlw	1
  7464  002D82  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
  7465  002D84  0C01               	retlw	1
  7466                           
  7467                           ; BSR set to: 0
  7468  002D86  67AB               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7469  002D88  0C01               	retlw	1
  7470  002D8A                     l891:
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
  7474  002D8A  699F               	setf	_vscp_nickname& (0+255),b
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
  7478  002D8C  0EFF               	movlw	255
  7479  002D8E  EC4B  F018         	call	_vscp_writeNicknamePermanent
  7480                           
  7481                           ;vscp_firmware.c: 481: vscp_init();
  7482  002D92  EF09  F016         	goto	_vscp_init	;wreg free
  7483  002D96                     __end_of_vscp_handleDropNickname:
  7484                           	opt stack 0
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           prodh	equ	0xFF4
  7490                           prodl	equ	0xFF3
  7491                           postinc0	equ	0xFEE
  7492                           wreg	equ	0xFE8
  7493                           indf1	equ	0xFE7
  7494                           fsr1h	equ	0xFE2
  7495                           fsr1l	equ	0xFE1
  7496                           indf2	equ	0xFDF
  7497                           postinc2	equ	0xFDE
  7498                           postdec2	equ	0xFDD
  7499                           fsr2h	equ	0xFDA
  7500                           fsr2l	equ	0xFD9
  7501                           status	equ	0xFD8
  7502                           
  7503 ;; *************** function _vscp_init *****************
  7504 ;; Defined at:
  7505 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;		None
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;		None
  7510 ;; Return value:  Size  Location     Type
  7511 ;;		None               void
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/E
  7516 ;;		On exit  : F/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7523 ;;Total ram usage:        0 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    4
  7526 ;; This function calls:
  7527 ;;		_vscp_readNicknamePermanent
  7528 ;; This function is called by:
  7529 ;;		_main
  7530 ;;		_vscp_handleDropNickname
  7531 ;;		_vscp_handleProtocolEvent
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text41
  7536  002C12                     __ptext41:
  7537                           	opt stack 0
  7538  002C12                     _vscp_init:
  7539                           	opt stack 24
  7540                           
  7541                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;incstack = 0
  7545                           ;incstack = 0
  7546  002C12  0E02               	movlw	2
  7547  002C14  6E56               	movwf	_vscp_initledfunc,c
  7548                           
  7549                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
  7550  002C16  ECA3  F018         	call	_vscp_readNicknamePermanent	;wreg free
  7551  002C1A  0100               	movlb	0	; () banked
  7552  002C1C  6F9F               	movwf	_vscp_nickname& (0+255),b
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
  7556  002C1E  679F               	tstfsz	_vscp_nickname& (0+255),b
  7557  002C20  D001               	goto	l833
  7558                           
  7559                           ; BSR set to: 0
  7560  002C22  699F               	setf	_vscp_nickname& (0+255),b
  7561  002C24                     l833:
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
  7565  002C24  6BA4               	clrf	_vscp_imsg& (0+255),b
  7566                           
  7567                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
  7568  002C26  6BA5               	clrf	(_vscp_imsg+1)& (0+255),b
  7569                           
  7570                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
  7571  002C28  6BA6               	clrf	(_vscp_imsg+2)& (0+255),b
  7572  002C2A  6BA7               	clrf	(_vscp_imsg+3)& (0+255),b
  7573                           
  7574                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
  7575  002C2C  6BA8               	clrf	(_vscp_imsg+4)& (0+255),b
  7576                           
  7577                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
  7578  002C2E  6BB2               	clrf	_vscp_omsg& (0+255),b
  7579                           
  7580                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
  7581  002C30  6BB3               	clrf	(_vscp_omsg+1)& (0+255),b
  7582                           
  7583                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
  7584  002C32  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  7585  002C34  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  7586                           
  7587                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
  7588  002C36  6BB6               	clrf	(_vscp_omsg+4)& (0+255),b
  7589                           
  7590                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
  7591  002C38  6A55               	clrf	_vscp_alarmstatus,c
  7592                           
  7593                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
  7594  002C3A  6A57               	clrf	_vscp_probe_address,c
  7595                           
  7596                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
  7597  002C3C  6BA0               	clrf	_vscp_node_state& (0+255),b
  7598                           
  7599                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
  7600  002C3E  6BA1               	clrf	_vscp_node_substate& (0+255),b
  7601                           
  7602                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
  7603  002C40  6BA2               	clrf	_vscp_probe_cnt& (0+255),b
  7604                           
  7605                           ;vscp_firmware.c: 150: vscp_page_select = 0;
  7606  002C42  6A52               	clrf	_vscp_page_select,c
  7607  002C44  6A53               	clrf	_vscp_page_select+1,c
  7608                           
  7609                           ;vscp_firmware.c: 153: vscp_timer = 0;
  7610  002C46  6B96               	clrf	_vscp_timer& (0+255),b	;volatile
  7611  002C48  6B97               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7612                           
  7613                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
  7614  002C4A  6B94               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7615  002C4C  6B95               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7616                           
  7617                           ;vscp_firmware.c: 155: vscp_second = 0;
  7618  002C4E  6BA3               	clrf	_vscp_second& (0+255),b
  7619                           
  7620                           ;vscp_firmware.c: 156: vscp_minute = 0;
  7621  002C50  6B9E               	clrf	_vscp_minute& (0+255),b
  7622                           
  7623                           ;vscp_firmware.c: 157: vscp_hour = 0;
  7624  002C52  6B9C               	clrf	_vscp_hour& (0+255),b
  7625                           
  7626                           ; BSR set to: 0
  7627  002C54  0012               	return	
  7628  002C56                     __end_of_vscp_init:
  7629                           	opt stack 0
  7630                           tblptru	equ	0xFF8
  7631                           tblptrh	equ	0xFF7
  7632                           tblptrl	equ	0xFF6
  7633                           tablat	equ	0xFF5
  7634                           prodh	equ	0xFF4
  7635                           prodl	equ	0xFF3
  7636                           postinc0	equ	0xFEE
  7637                           wreg	equ	0xFE8
  7638                           indf1	equ	0xFE7
  7639                           fsr1h	equ	0xFE2
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           fsr2h	equ	0xFDA
  7645                           fsr2l	equ	0xFD9
  7646                           status	equ	0xFD8
  7647                           
  7648 ;; *************** function _vscp_readNicknamePermanent *****************
  7649 ;; Defined at:
  7650 ;;		line 535 in file "../main.c"
  7651 ;; Parameters:    Size  Location     Type
  7652 ;;		None
  7653 ;; Auto vars:     Size  Location     Type
  7654 ;;		None
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  1    wreg      unsigned char 
  7657 ;; Registers used:
  7658 ;;		wreg, status,2, status,0, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/E
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7668 ;;Total ram usage:        0 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    3
  7671 ;; This function calls:
  7672 ;;		_Read_b_eep
  7673 ;; This function is called by:
  7674 ;;		_vscp_init
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           	psect	text42
  7679  003146                     __ptext42:
  7680                           	opt stack 0
  7681  003146                     _vscp_readNicknamePermanent:
  7682                           	opt stack 24
  7683                           
  7684                           ;main.c: 536: return Read_b_eep(0x01);
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;incstack = 0
  7688                           ;incstack = 0
  7689  003146  6A09               	clrf	?_Read_b_eep+1,c
  7690  003148  0E01               	movlw	1
  7691  00314A  6E08               	movwf	?_Read_b_eep,c
  7692  00314C  EF07  F018         	goto	_Read_b_eep	;wreg free
  7693  003150                     __end_of_vscp_readNicknamePermanent:
  7694                           	opt stack 0
  7695                           tblptru	equ	0xFF8
  7696                           tblptrh	equ	0xFF7
  7697                           tblptrl	equ	0xFF6
  7698                           tablat	equ	0xFF5
  7699                           prodh	equ	0xFF4
  7700                           prodl	equ	0xFF3
  7701                           postinc0	equ	0xFEE
  7702                           wreg	equ	0xFE8
  7703                           indf1	equ	0xFE7
  7704                           fsr1h	equ	0xFE2
  7705                           fsr1l	equ	0xFE1
  7706                           indf2	equ	0xFDF
  7707                           postinc2	equ	0xFDE
  7708                           postdec2	equ	0xFDD
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function _vscp_handleSetNickname *****************
  7714 ;; Defined at:
  7715 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;		None
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;		None
  7720 ;; Return value:  Size  Location     Type
  7721 ;;		None               void
  7722 ;; Registers used:
  7723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7724 ;; Tracked objects:
  7725 ;;		On entry : F/0
  7726 ;;		On exit  : 0/0
  7727 ;;		Unchanged: 0/0
  7728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7733 ;;Total ram usage:        0 bytes
  7734 ;; Hardware stack levels used:    1
  7735 ;; Hardware stack levels required when called:    4
  7736 ;; This function calls:
  7737 ;;		_vscp_writeNicknamePermanent
  7738 ;;		_vscp_setSegmentCRC
  7739 ;; This function is called by:
  7740 ;;		_vscp_handleProtocolEvent
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           	psect	text43
  7745  002EFC                     __ptext43:
  7746                           	opt stack 0
  7747  002EFC                     _vscp_handleSetNickname:
  7748                           	opt stack 25
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
  7752                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7753                           
  7754                           ;incstack = 0
  7755                           ;incstack = 0
  7756  002EFC  51A4               	movf	_vscp_imsg& (0+255),w,b
  7757  002EFE  0B0F               	andlw	15
  7758  002F00  0A02               	xorlw	2
  7759  002F02  A4D8               	btfss	status,2,c
  7760  002F04  0012               	return	
  7761                           
  7762                           ; BSR set to: 0
  7763  002F06  519F               	movf	_vscp_nickname& (0+255),w,b
  7764  002F08  EE20  F0AA         	lfsr	2,_vscp_imsg+6
  7765  002F0C  62DF               	cpfseq	indf2,c
  7766  002F0E  0012               	return	
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
  7770  002F10  C0AB  F09F         	movff	_vscp_imsg+7,_vscp_nickname
  7771                           
  7772                           ; BSR set to: 0
  7773                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
  7774  002F14  519F               	movf	_vscp_nickname& (0+255),w,b
  7775  002F16  EC4B  F018         	call	_vscp_writeNicknamePermanent
  7776                           
  7777                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
  7778  002F1A  0E40               	movlw	64
  7779  002F1C  EF40  F018         	goto	_vscp_setSegmentCRC
  7780  002F20                     __end_of_vscp_handleSetNickname:
  7781                           	opt stack 0
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           postinc0	equ	0xFEE
  7789                           wreg	equ	0xFE8
  7790                           indf1	equ	0xFE7
  7791                           fsr1h	equ	0xFE2
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           fsr2h	equ	0xFDA
  7797                           fsr2l	equ	0xFD9
  7798                           status	equ	0xFD8
  7799                           
  7800 ;; *************** function _vscp_handleHeartbeat *****************
  7801 ;; Defined at:
  7802 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
  7803 ;; Parameters:    Size  Location     Type
  7804 ;;		None
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;		None
  7807 ;; Return value:  Size  Location     Type
  7808 ;;		None               void
  7809 ;; Registers used:
  7810 ;;		wreg, status,2, status,0, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : F/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7820 ;;Total ram usage:        0 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    4
  7823 ;; This function calls:
  7824 ;;		_vscp_writeNicknamePermanent
  7825 ;;		_vscp_getSegmentCRC
  7826 ;;		_vscp_setSegmentCRC
  7827 ;; This function is called by:
  7828 ;;		_vscp_handleProtocolEvent
  7829 ;; This function uses a non-reentrant model
  7830 ;;
  7831                           
  7832                           	psect	text44
  7833  002C56                     __ptext44:
  7834                           	opt stack 0
  7835  002C56                     _vscp_handleHeartbeat:
  7836                           	opt stack 25
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
  7840                           
  7841                           ;incstack = 0
  7842                           ;incstack = 0
  7843  002C56  ECA8  F018         	call	_vscp_getSegmentCRC	;wreg free
  7844  002C5A  0900               	iorlw	0
  7845  002C5C  E118               	bnz	l6832
  7846                           
  7847                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  7848                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  7849  002C5E  0100               	movlb	0	; () banked
  7850  002C60  51A4               	movf	_vscp_imsg& (0+255),w,b
  7851  002C62  0B0F               	andlw	15
  7852  002C64  0A05               	xorlw	5
  7853  002C66  A4D8               	btfss	status,2,c
  7854  002C68  0012               	return	
  7855                           
  7856                           ; BSR set to: 0
  7857  002C6A  ECA8  F018         	call	_vscp_getSegmentCRC	;wreg free
  7858  002C6E  0100               	movlb	0	; () banked
  7859  002C70  19AA               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  7860  002C72  B4D8               	btfsc	status,2,c
  7861  002C74  0012               	return	
  7862                           
  7863                           ; BSR set to: 0
  7864                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7865  002C76  51AA               	movf	(_vscp_imsg+6)& (0+255),w,b
  7866  002C78  EC40  F018         	call	_vscp_setSegmentCRC
  7867                           
  7868                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
  7869  002C7C  0100               	movlb	0	; () banked
  7870  002C7E  699F               	setf	_vscp_nickname& (0+255),b
  7871                           
  7872                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
  7873  002C80  0EFF               	movlw	255
  7874  002C82  EC4B  F018         	call	_vscp_writeNicknamePermanent
  7875                           
  7876                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
  7877  002C86  0E01               	movlw	1
  7878  002C88  0100               	movlb	0	; () banked
  7879  002C8A  6FA0               	movwf	_vscp_node_state& (0+255),b
  7880  002C8C  0C01               	retlw	1
  7881  002C8E                     l6832:
  7882                           
  7883                           ;vscp_firmware.c: 411: else {
  7884                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7885  002C8E  0100               	movlb	0	; () banked
  7886  002C90  51AA               	movf	(_vscp_imsg+6)& (0+255),w,b
  7887  002C92  EF40  F018         	goto	_vscp_setSegmentCRC
  7888  002C96                     __end_of_vscp_handleHeartbeat:
  7889                           	opt stack 0
  7890                           tblptru	equ	0xFF8
  7891                           tblptrh	equ	0xFF7
  7892                           tblptrl	equ	0xFF6
  7893                           tablat	equ	0xFF5
  7894                           prodh	equ	0xFF4
  7895                           prodl	equ	0xFF3
  7896                           postinc0	equ	0xFEE
  7897                           wreg	equ	0xFE8
  7898                           indf1	equ	0xFE7
  7899                           fsr1h	equ	0xFE2
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function _vscp_getMatrixInfo *****************
  7909 ;; Defined at:
  7910 ;;		line 1393 in file "../main.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  pData           1    wreg     PTR unsigned char 
  7913 ;;		 -> vscp_omsg(13), 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  pData           1    0[COMRAM] PTR unsigned char 
  7916 ;;		 -> vscp_omsg(13), 
  7917 ;;  i               1    0        unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;		None               void
  7920 ;; Registers used:
  7921 ;;		wreg, status,2
  7922 ;; Tracked objects:
  7923 ;;		On entry : F/0
  7924 ;;		On exit  : F/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7931 ;;Total ram usage:        0 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    2
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		_vscp_handleProtocolEvent
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text45
  7942  003054                     __ptext45:
  7943                           	opt stack 0
  7944  003054                     _vscp_getMatrixInfo:
  7945                           	opt stack 27
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;main.c: 1394: uint8_t i;
  7949                           ;main.c: 1396: vscp_omsg.data[ 0 ] = 8;
  7950                           
  7951                           ;incstack = 0
  7952                           ;incstack = 0
  7953  003054  0E08               	movlw	8
  7954  003056  6FB7               	movwf	(_vscp_omsg+5)& (0+255),b
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;main.c: 1397: vscp_omsg.data[ 1 ] = 0;
  7958  003058  6BB8               	clrf	(_vscp_omsg+6)& (0+255),b
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;main.c: 1398: vscp_omsg.data[ 2 ] = 0;
  7962  00305A  6BB9               	clrf	(_vscp_omsg+7)& (0+255),b
  7963                           
  7964                           ;main.c: 1399: vscp_omsg.data[ 3 ] = 1;
  7965  00305C  0E01               	movlw	1
  7966  00305E  6FBA               	movwf	(_vscp_omsg+8)& (0+255),b
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;main.c: 1400: vscp_omsg.data[ 4 ] = 0;
  7970  003060  6BBB               	clrf	(_vscp_omsg+9)& (0+255),b
  7971                           
  7972                           ;main.c: 1401: vscp_omsg.data[ 5 ] = 1;
  7973  003062  0E01               	movlw	1
  7974  003064  6FBC               	movwf	(_vscp_omsg+10)& (0+255),b
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 1402: vscp_omsg.data[ 6 ] = 0;
  7978  003066  6BBD               	clrf	(_vscp_omsg+11)& (0+255),b
  7979                           
  7980                           ; BSR set to: 0
  7981  003068  0012               	return	
  7982  00306A                     __end_of_vscp_getMatrixInfo:
  7983                           	opt stack 0
  7984                           tblptru	equ	0xFF8
  7985                           tblptrh	equ	0xFF7
  7986                           tblptrl	equ	0xFF6
  7987                           tablat	equ	0xFF5
  7988                           prodh	equ	0xFF4
  7989                           prodl	equ	0xFF3
  7990                           postinc0	equ	0xFEE
  7991                           wreg	equ	0xFE8
  7992                           indf1	equ	0xFE7
  7993                           fsr1h	equ	0xFE2
  7994                           fsr1l	equ	0xFE1
  7995                           indf2	equ	0xFDF
  7996                           postinc2	equ	0xFDE
  7997                           postdec2	equ	0xFDD
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function _vscp_goBootloaderMode *****************
  8003 ;; Defined at:
  8004 ;;		line 1377 in file "../main.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  algorithm       1    wreg     unsigned char 
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;  algorithm       1   11[COMRAM] unsigned char 
  8009 ;; Return value:  Size  Location     Type
  8010 ;;		None               void
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0, cstack
  8013 ;; Tracked objects:
  8014 ;;		On entry : F/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8021 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8022 ;;Total ram usage:        1 bytes
  8023 ;; Hardware stack levels used:    1
  8024 ;; Hardware stack levels required when called:    3
  8025 ;; This function calls:
  8026 ;;		_Busy_eep
  8027 ;;		_Write_b_eep
  8028 ;; This function is called by:
  8029 ;;		_vscp_handleProtocolEvent
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           	psect	text46
  8034  002F7C                     __ptext46:
  8035                           	opt stack 0
  8036  002F7C                     _vscp_goBootloaderMode:
  8037                           	opt stack 26
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;incstack = 0
  8041                           ;incstack = 0
  8042                           ;vscp_goBootloaderMode@algorithm stored from wreg
  8043  002F7C  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;main.c: 1378: if ( 0x01 != algorithm ) return;
  8047  002F80  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
  8048  002F82  A4D8               	btfss	status,2,c
  8049  002F84  0012               	return	
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 1382: (Busy_eep(), Write_b_eep(0x00,0xff));
  8053  002F86  ECB1  F018         	call	_Busy_eep	;wreg free
  8054  002F8A  6A09               	clrf	?_Write_b_eep+1,c
  8055  002F8C  6A08               	clrf	?_Write_b_eep,c
  8056  002F8E  0EFF               	movlw	255
  8057  002F90  680A               	setf	?_Write_b_eep+2,c
  8058  002F92  EC4B  F016         	call	_Write_b_eep	;wreg free
  8059  002F96  00FF               	reset		;# 
  8060  002F98  0012               	return	
  8061  002F9A                     __end_of_vscp_goBootloaderMode:
  8062                           	opt stack 0
  8063                           tblptru	equ	0xFF8
  8064                           tblptrh	equ	0xFF7
  8065                           tblptrl	equ	0xFF6
  8066                           tablat	equ	0xFF5
  8067                           prodh	equ	0xFF4
  8068                           prodl	equ	0xFF3
  8069                           postinc0	equ	0xFEE
  8070                           wreg	equ	0xFE8
  8071                           indf1	equ	0xFE7
  8072                           fsr1h	equ	0xFE2
  8073                           fsr1l	equ	0xFE1
  8074                           indf2	equ	0xFDF
  8075                           postinc2	equ	0xFDE
  8076                           postdec2	equ	0xFDD
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _vscp_handleProbeState *****************
  8082 ;; Defined at:
  8083 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : F/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    8
  8104 ;; This function calls:
  8105 ;;		_vscp_goActiveState
  8106 ;;		_vscp_writeNicknamePermanent
  8107 ;;		_vscp_sendEvent
  8108 ;;		_vscp_setSegmentCRC
  8109 ;; This function is called by:
  8110 ;;		_main
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           	psect	text47
  8115  0027E6                     __ptext47:
  8116                           	opt stack 0
  8117  0027E6                     _vscp_handleProbeState:
  8118                           	opt stack 22
  8119                           
  8120                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
  8121                           
  8122                           ;incstack = 0
  8123                           ;incstack = 0
  8124  0027E6  D053               	goto	l5938
  8125  0027E8                     l5868:
  8126                           
  8127                           ; BSR set to: 0
  8128                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
  8129  0027E8  2857               	incf	_vscp_probe_address,w,c
  8130  0027EA  E010               	bz	l5884
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
  8134  0027EC  0E81               	movlw	129
  8135  0027EE  6FB2               	movwf	_vscp_omsg& (0+255),b
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
  8139  0027F0  6BB3               	clrf	(_vscp_omsg+1)& (0+255),b
  8140                           
  8141                           ; BSR set to: 0
  8142                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
  8143  0027F2  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  8144  0027F4  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  8145                           
  8146                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
  8147  0027F6  0E02               	movlw	2
  8148  0027F8  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
  8152  0027FA  C057  F0B7         	movff	_vscp_probe_address,_vscp_omsg+5
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;vscp_firmware.c: 216: vscp_sendEvent();
  8156  0027FE  EC34  F017         	call	_vscp_sendEvent	;wreg free
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
  8160  002802  0E01               	movlw	1
  8161  002804  6FA1               	movwf	_vscp_node_substate& (0+255),b
  8162  002806                     l5882:
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;vscp_firmware.c: 219: vscp_timer = 0;
  8166  002806  6B96               	clrf	_vscp_timer& (0+255),b	;volatile
  8167  002808  6B97               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8168                           
  8169                           ;vscp_firmware.c: 221: }
  8170  00280A  D048               	goto	l848
  8171  00280C                     l5884:
  8172                           
  8173                           ; BSR set to: 0
  8174                           ;vscp_firmware.c: 222: else {
  8175                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
  8176  00280C  0E04               	movlw	4
  8177  00280E  6FA0               	movwf	_vscp_node_state& (0+255),b
  8178                           
  8179                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
  8180  002810  0E81               	movlw	129
  8181  002812  6FB2               	movwf	_vscp_omsg& (0+255),b
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
  8185  002814  69B7               	setf	(_vscp_omsg+5)& (0+255),b
  8186                           
  8187                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
  8188  002816  0E07               	movlw	7
  8189  002818  6FB3               	movwf	(_vscp_omsg+1)& (0+255),b
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
  8193  00281A  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  8194  00281C  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  8195                           
  8196                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
  8197  00281E  0E03               	movlw	3
  8198  002820  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  8199                           
  8200                           ; BSR set to: 0
  8201                           ;vscp_firmware.c: 235: vscp_sendEvent();
  8202  002822  EC34  F017         	call	_vscp_sendEvent	;wreg free
  8203  002826  D03A               	goto	l848
  8204  002828                     l849:
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
  8208  002828  AFA4               	btfss	_vscp_imsg& (0+255),7,b
  8209  00282A  D00F               	goto	l5908
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
  8213                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
  8214  00282C  51A7               	movf	(_vscp_imsg+3)& (0+255),w,b
  8215  00282E  11A6               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8216  002830  E135               	bnz	l848
  8217                           
  8218                           ; BSR set to: 0
  8219  002832  51A8               	movf	(_vscp_imsg+4)& (0+255),w,b
  8220  002834  0A03               	xorlw	3
  8221  002836  E132               	bnz	l848
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
  8225  002838  6657               	tstfsz	_vscp_probe_address,c
  8226  00283A  D003               	goto	l5902
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
  8230  00283C  0E02               	movlw	2
  8231  00283E  6FA0               	movwf	_vscp_node_state& (0+255),b
  8232  002840  D7E2               	goto	l5882
  8233  002842                     l5902:
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;vscp_firmware.c: 257: else {
  8237                           ;vscp_firmware.c: 260: vscp_probe_address++;
  8238  002842  2A57               	incf	_vscp_probe_address,f,c
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
  8242  002844  6BA1               	clrf	_vscp_node_substate& (0+255),b
  8243  002846                     l5906:
  8244                           
  8245                           ; BSR set to: 0
  8246                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
  8247  002846  6BA2               	clrf	_vscp_probe_cnt& (0+255),b
  8248  002848  D029               	goto	l848
  8249  00284A                     l5908:
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;vscp_firmware.c: 267: else {
  8253                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
  8254  00284A  0EE9               	movlw	233
  8255  00284C  5D96               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8256  00284E  0E03               	movlw	3
  8257  002850  5997               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8258  002852  E324               	bnc	l848
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
  8262  002854  2BA2               	incf	_vscp_probe_cnt& (0+255),f,b
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
  8266  002856  0E02               	movlw	2
  8267  002858  65A2               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8268  00285A  D017               	goto	l856
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
  8272  00285C  6657               	tstfsz	_vscp_probe_address,c
  8273  00285E  D005               	goto	l857
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;vscp_firmware.c: 279: vscp_probe_address++;
  8277  002860  2A57               	incf	_vscp_probe_address,f,c
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
  8281  002862  6BA1               	clrf	_vscp_node_substate& (0+255),b
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;vscp_firmware.c: 281: vscp_timer = 0;
  8285  002864  6B96               	clrf	_vscp_timer& (0+255),b	;volatile
  8286  002866  6B97               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8287  002868  D7EE               	goto	l5906
  8288  00286A                     l857:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;vscp_firmware.c: 285: else {
  8292                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
  8293  00286A  C057  F09F         	movff	_vscp_probe_address,_vscp_nickname
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
  8297  00286E  0E03               	movlw	3
  8298  002870  6FA0               	movwf	_vscp_node_state& (0+255),b
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
  8302  002872  6BA1               	clrf	_vscp_node_substate& (0+255),b
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
  8306  002874  519F               	movf	_vscp_nickname& (0+255),w,b
  8307  002876  EC4B  F018         	call	_vscp_writeNicknamePermanent
  8308                           
  8309                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
  8310  00287A  0E40               	movlw	64
  8311  00287C  EC40  F018         	call	_vscp_setSegmentCRC
  8312                           
  8313                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
  8314  002880  0100               	movlb	0	; () banked
  8315  002882  6BA2               	clrf	_vscp_probe_cnt& (0+255),b
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;vscp_firmware.c: 296: vscp_goActiveState();
  8319  002884  ECCD  F017         	call	_vscp_goActiveState	;wreg free
  8320  002888  D009               	goto	l848
  8321  00288A                     l856:
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;vscp_firmware.c: 300: else {
  8325                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
  8326  00288A  6BA1               	clrf	_vscp_node_substate& (0+255),b
  8327  00288C  D007               	goto	l848
  8328  00288E                     l5938:
  8329  00288E  0100               	movlb	0	; () banked
  8330  002890  51A1               	movf	_vscp_node_substate& (0+255),w,b
  8331                           
  8332                           ; Switch size 1, requested type "speed"
  8333                           ; Number of cases is 3, Range of values is 0 to 2
  8334                           ; switch strategies available:
  8335                           ; Name         Instructions Cycles
  8336                           ; simple_byte           10     6 (average)
  8337                           ;	Chosen strategy is simple_byte
  8338  002892  E0AA               	bz	l5868
  8339  002894  0A01               	xorlw	1	; case 1
  8340  002896  E0C8               	bz	l849
  8341  002898  0A03               	xorlw	3	; case 2
  8342  00289A  E1F7               	bnz	l856
  8343  00289C                     l848:
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
  8347  00289C  6BA4               	clrf	_vscp_imsg& (0+255),b
  8348                           
  8349                           ; BSR set to: 0
  8350  00289E  0012               	return	
  8351  0028A0                     __end_of_vscp_handleProbeState:
  8352                           	opt stack 0
  8353                           tblptru	equ	0xFF8
  8354                           tblptrh	equ	0xFF7
  8355                           tblptrl	equ	0xFF6
  8356                           tablat	equ	0xFF5
  8357                           prodh	equ	0xFF4
  8358                           prodl	equ	0xFF3
  8359                           postinc0	equ	0xFEE
  8360                           wreg	equ	0xFE8
  8361                           indf1	equ	0xFE7
  8362                           fsr1h	equ	0xFE2
  8363                           fsr1l	equ	0xFE1
  8364                           indf2	equ	0xFDF
  8365                           postinc2	equ	0xFDE
  8366                           postdec2	equ	0xFDD
  8367                           fsr2h	equ	0xFDA
  8368                           fsr2l	equ	0xFD9
  8369                           status	equ	0xFD8
  8370                           
  8371 ;; *************** function _vscp_goActiveState *****************
  8372 ;; Defined at:
  8373 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;		None
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;		None
  8378 ;; Return value:  Size  Location     Type
  8379 ;;		None               void
  8380 ;; Registers used:
  8381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : F/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8391 ;;Total ram usage:        0 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    7
  8394 ;; This function calls:
  8395 ;;		_vscp_sendEvent
  8396 ;; This function is called by:
  8397 ;;		_main
  8398 ;;		_vscp_handleProbeState
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           	psect	text48
  8403  002F9A                     __ptext48:
  8404                           	opt stack 0
  8405  002F9A                     _vscp_goActiveState:
  8406                           	opt stack 22
  8407                           
  8408                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;incstack = 0
  8412                           ;incstack = 0
  8413  002F9A  0E81               	movlw	129
  8414  002F9C  0100               	movlb	0	; () banked
  8415  002F9E  6FB2               	movwf	_vscp_omsg& (0+255),b
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
  8419  002FA0  6BB3               	clrf	(_vscp_omsg+1)& (0+255),b
  8420                           
  8421                           ; BSR set to: 0
  8422                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
  8423  002FA2  6BB4               	clrf	(_vscp_omsg+2)& (0+255),b
  8424  002FA4  6BB5               	clrf	(_vscp_omsg+3)& (0+255),b
  8425                           
  8426                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
  8427  002FA6  0E02               	movlw	2
  8428  002FA8  6FB6               	movwf	(_vscp_omsg+4)& (0+255),b
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
  8432  002FAA  C09F  F0B7         	movff	_vscp_nickname,_vscp_omsg+5
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;vscp_firmware.c: 366: vscp_sendEvent();
  8436  002FAE  EC34  F017         	call	_vscp_sendEvent	;wreg free
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
  8440  002FB2  0E01               	movlw	1
  8441  002FB4  6E56               	movwf	_vscp_initledfunc,c
  8442                           
  8443                           ; BSR set to: 0
  8444  002FB6  0C01               	retlw	1
  8445  002FB8                     __end_of_vscp_goActiveState:
  8446                           	opt stack 0
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           postinc0	equ	0xFEE
  8454                           wreg	equ	0xFE8
  8455                           indf1	equ	0xFE7
  8456                           fsr1h	equ	0xFE2
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           fsr2h	equ	0xFDA
  8462                           fsr2l	equ	0xFD9
  8463                           status	equ	0xFD8
  8464                           
  8465 ;; *************** function _vscp_sendEvent *****************
  8466 ;; Defined at:
  8467 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;		None
  8470 ;; Auto vars:     Size  Location     Type
  8471 ;;  rv              1    0        unsigned char 
  8472 ;; Return value:  Size  Location     Type
  8473 ;;                  1    wreg      unsigned char 
  8474 ;; Registers used:
  8475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8476 ;; Tracked objects:
  8477 ;;		On entry : F/0
  8478 ;;		On exit  : F/0
  8479 ;;		Unchanged: 0/0
  8480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8485 ;;Total ram usage:        1 bytes
  8486 ;; Hardware stack levels used:    1
  8487 ;; Hardware stack levels required when called:    6
  8488 ;; This function calls:
  8489 ;;		_sendVSCPFrame
  8490 ;; This function is called by:
  8491 ;;		_vscp_handleProbeState
  8492 ;;		_vscp_goActiveState
  8493 ;;		_vscp_sendHeartBeat
  8494 ;;		_vscp_newNodeOnline
  8495 ;;		_vscp_handleProtocolEvent
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	text49
  8500  002E68                     __ptext49:
  8501                           	opt stack 0
  8502  002E68                     _vscp_sendEvent:
  8503                           	opt stack 22
  8504                           
  8505                           ; BSR set to: 0
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;incstack = 0
  8509                           ;incstack = 0
  8510  002E68  C0B4  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8511  002E6C  C0B5  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8512  002E70  C0B6  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8513  002E74  C09F  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8514  002E78  C0B3  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8515  002E7C  51B2               	movf	_vscp_omsg& (0+255),w,b
  8516  002E7E  0B0F               	andlw	15
  8517  002E80  6E44               	movwf	?_sendVSCPFrame+5,c
  8518  002E82  0E00               	movlw	high (_vscp_omsg+5)
  8519  002E84  6E46               	movwf	?_sendVSCPFrame+7,c
  8520  002E86  0EB7               	movlw	low (_vscp_omsg+5)
  8521  002E88  6E45               	movwf	?_sendVSCPFrame+6,c
  8522  002E8A  EF50  F014         	goto	_sendVSCPFrame	;wreg free
  8523  002E8E                     __end_of_vscp_sendEvent:
  8524                           	opt stack 0
  8525                           tblptru	equ	0xFF8
  8526                           tblptrh	equ	0xFF7
  8527                           tblptrl	equ	0xFF6
  8528                           tablat	equ	0xFF5
  8529                           prodh	equ	0xFF4
  8530                           prodl	equ	0xFF3
  8531                           postinc0	equ	0xFEE
  8532                           wreg	equ	0xFE8
  8533                           indf1	equ	0xFE7
  8534                           fsr1h	equ	0xFE2
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543 ;; *************** function _sendVSCPFrame *****************
  8544 ;; Defined at:
  8545 ;;		line 1451 in file "../main.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8548 ;;  vscptype        1   64[COMRAM] unsigned char 
  8549 ;;  nodeid          1   65[COMRAM] unsigned char 
  8550 ;;  priority        1   66[COMRAM] unsigned char 
  8551 ;;  size            1   67[COMRAM] unsigned char 
  8552 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8553 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  id              4   70[COMRAM] unsigned long 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  1    wreg      unsigned char 
  8558 ;; Registers used:
  8559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8560 ;; Tracked objects:
  8561 ;;		On entry : F/0
  8562 ;;		On exit  : F/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8565 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8566 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8567 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8568 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8569 ;;Total ram usage:       32 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    5
  8572 ;; This function calls:
  8573 ;;		_sendCANFrame
  8574 ;; This function is called by:
  8575 ;;		_SendInformationEvent
  8576 ;;		_vscp_sendEvent
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           	psect	text50
  8581  0028A0                     __ptext50:
  8582                           	opt stack 0
  8583  0028A0                     _sendVSCPFrame:
  8584                           	opt stack 22
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;main.c: 1452: uint32_t id = ( (uint32_t)priority << 26 ) |
  8588                           ;main.c: 1453: ( (uint32_t)vscpclass << 16 ) |
  8589                           ;main.c: 1454: ( (uint32_t)vscptype << 8 ) |
  8590                           ;main.c: 1455: nodeid;
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;incstack = 0
  8594                           ;incstack = 0
  8595  0028A0  C041  F060         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  8596  0028A4  6B61               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  8597  0028A6  6B62               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  8598  0028A8  6B63               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  8599  0028AA  C062  F063         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  8600  0028AE  C061  F062         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  8601  0028B2  C060  F061         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  8602  0028B6  6B60               	clrf	??_sendVSCPFrame& (0+255),b
  8603  0028B8  503F               	movf	sendVSCPFrame@vscpclass,w,c
  8604  0028BA  6F64               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  8605  0028BC  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  8606  0028BE  6F65               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  8607  0028C0  6B66               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  8608  0028C2  6B67               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  8609  0028C4  C065  F067         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  8610  0028C8  C064  F066         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  8611  0028CC  6B65               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  8612  0028CE  6B64               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  8613  0028D0  C043  F068         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  8614  0028D4  6B69               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  8615  0028D6  6B6A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  8616  0028D8  6B6B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  8617  0028DA  0E1A               	movlw	26
  8618  0028DC                     u6755:
  8619  0028DC  90D8               	bcf	status,0,c
  8620  0028DE  3768               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  8621  0028E0  3769               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  8622  0028E2  376A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  8623  0028E4  376B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  8624  0028E6  2EE8               	decfsz	wreg,f,c
  8625  0028E8  D7F9               	goto	u6755
  8626  0028EA  5164               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  8627  0028EC  1168               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  8628  0028EE  6F6C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  8629  0028F0  5165               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  8630  0028F2  1169               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  8631  0028F4  6F6D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  8632  0028F6  5166               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  8633  0028F8  116A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  8634  0028FA  6F6E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  8635  0028FC  5167               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  8636  0028FE  116B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  8637  002900  6F6F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  8638  002902  5160               	movf	??_sendVSCPFrame& (0+255),w,b
  8639  002904  116C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  8640  002906  6F70               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  8641  002908  5161               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  8642  00290A  116D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  8643  00290C  6F71               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  8644  00290E  5162               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  8645  002910  116E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  8646  002912  6F72               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  8647  002914  5163               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  8648  002916  116F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  8649  002918  6F73               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  8650  00291A  5042               	movf	sendVSCPFrame@nodeid,w,c
  8651  00291C  1170               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  8652  00291E  6E47               	movwf	sendVSCPFrame@id,c
  8653  002920  5171               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  8654  002922  6E48               	movwf	sendVSCPFrame@id+1,c
  8655  002924  5172               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  8656  002926  6E49               	movwf	sendVSCPFrame@id+2,c
  8657  002928  5173               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  8658  00292A  6E4A               	movwf	sendVSCPFrame@id+3,c
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;main.c: 1457: if ( !sendCANFrame( id, size, pData ) ) {
  8662  00292C  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  8663  002930  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  8664  002934  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  8665  002938  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  8666  00293C  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  8667  002940  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  8668  002944  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  8669  002948  ECCB  F016         	call	_sendCANFrame	;wreg free
  8670  00294C  0900               	iorlw	0
  8671  00294E  E101               	bnz	l6608
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;main.c: 1458: return 0;
  8675  002950  0C00               	retlw	0
  8676  002952                     l6608:
  8677                           
  8678                           ; BSR set to: 0
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;main.c: 1459: }
  8682                           ;main.c: 1461: return 1;
  8683  002952  0C01               	retlw	1
  8684  002954                     __end_of_sendVSCPFrame:
  8685                           	opt stack 0
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           postinc0	equ	0xFEE
  8693                           wreg	equ	0xFE8
  8694                           indf1	equ	0xFE7
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function _sendCANFrame *****************
  8705 ;; Defined at:
  8706 ;;		line 1496 in file "../main.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  id              4   54[COMRAM] unsigned long 
  8709 ;;  dlc             1   58[COMRAM] unsigned char 
  8710 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  8711 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  rv              1    0        unsigned char 
  8714 ;; Return value:  Size  Location     Type
  8715 ;;                  1    wreg      unsigned char 
  8716 ;; Registers used:
  8717 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8718 ;; Tracked objects:
  8719 ;;		On entry : F/0
  8720 ;;		On exit  : F/0
  8721 ;;		Unchanged: 0/0
  8722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8723 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8726 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8727 ;;Total ram usage:        8 bytes
  8728 ;; Hardware stack levels used:    1
  8729 ;; Hardware stack levels required when called:    4
  8730 ;; This function calls:
  8731 ;;		_ECANSendMessage
  8732 ;; This function is called by:
  8733 ;;		_sendVSCPFrame
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text51
  8738  002D96                     __ptext51:
  8739                           	opt stack 0
  8740  002D96                     _sendCANFrame:
  8741                           	opt stack 22
  8742  002D96                     l6702:
  8743                           
  8744                           ;main.c: 1501: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  8745  002D96  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  8746  002D9A  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  8747  002D9E  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  8748  002DA2  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  8749  002DA6  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  8750  002DAA  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  8751  002DAE  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  8752  002DB2  0E20               	movlw	32
  8753  002DB4  6E19               	movwf	?_ECANSendMessage+7,c
  8754  002DB6  EC9D  F00E         	call	_ECANSendMessage	;wreg free
  8755  002DBA  0900               	iorlw	0
  8756  002DBC  E0EC               	bz	l6702
  8757                           
  8758                           ;main.c: 1504: }
  8759                           ;main.c: 1505: }
  8760                           ;main.c: 1507: vscp_omsg.flags = 0;
  8761                           
  8762                           ;main.c: 1503: break;
  8763  002DBE  0100               	movlb	0	; () banked
  8764  002DC0  6BB2               	clrf	_vscp_omsg& (0+255),b
  8765                           
  8766                           ; BSR set to: 0
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;main.c: 1509: return rv;
  8770  002DC2  0C01               	retlw	1
  8771  002DC4                     __end_of_sendCANFrame:
  8772                           	opt stack 0
  8773                           tblptru	equ	0xFF8
  8774                           tblptrh	equ	0xFF7
  8775                           tblptrl	equ	0xFF6
  8776                           tablat	equ	0xFF5
  8777                           prodh	equ	0xFF4
  8778                           prodl	equ	0xFF3
  8779                           postinc0	equ	0xFEE
  8780                           wreg	equ	0xFE8
  8781                           indf1	equ	0xFE7
  8782                           fsr1h	equ	0xFE2
  8783                           fsr1l	equ	0xFE1
  8784                           indf2	equ	0xFDF
  8785                           postinc2	equ	0xFDE
  8786                           postdec2	equ	0xFDD
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function _ECANSendMessage *****************
  8792 ;; Defined at:
  8793 ;;		line 617 in file "../ECAN.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;  id              4   17[COMRAM] unsigned long 
  8796 ;;  data            2   21[COMRAM] PTR unsigned char 
  8797 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8798 ;;  dataLen         1   23[COMRAM] unsigned char 
  8799 ;;  msgFlags        1   24[COMRAM] enum E18958
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  8802 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8803 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8804 ;;		 -> B0CON(1), 
  8805 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  8806 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8807 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8808 ;;		 -> B0CON(1), 
  8809 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  8810 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8811 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8812 ;;		 -> B0CON(1), 
  8813 ;;  i               1   51[COMRAM] unsigned char 
  8814 ;;  temp            1   50[COMRAM] unsigned char 
  8815 ;;  tempBSEL0       1   47[COMRAM] struct .
  8816 ;;  j               1   46[COMRAM] unsigned char 
  8817 ;;  buffers         1   45[COMRAM] unsigned char 
  8818 ;;  mode            1   44[COMRAM] unsigned char 
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      enum E18242
  8821 ;; Registers used:
  8822 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8828 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8829 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8831 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8832 ;;Total ram usage:       37 bytes
  8833 ;; Hardware stack levels used:    1
  8834 ;; Hardware stack levels required when called:    3
  8835 ;; This function calls:
  8836 ;;		__CANIDToRegs
  8837 ;; This function is called by:
  8838 ;;		_sendCANFrame
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           	psect	text52
  8843  001D3A                     __ptext52:
  8844                           	opt stack 0
  8845  001D3A                     _ECANSendMessage:
  8846                           	opt stack 22
  8847                           
  8848                           ;ECAN.c: 619: BYTE mode;
  8849                           ;ECAN.c: 620: BYTE buffers;
  8850                           ;ECAN.c: 628: BYTE i,j;
  8851                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  8852                           ;ECAN.c: 630: BYTE* pb[9];
  8853                           ;ECAN.c: 631: BYTE temp;
  8854                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  8855                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;incstack = 0
  8859                           ;incstack = 0
  8860  001D3A  0E0F               	movlw	15	;volatile
  8861  001D3C  6E1C               	movwf	ECANSendMessage@pb+1,c
  8862  001D3E  0E20               	movlw	32	;volatile
  8863  001D40  6E1B               	movwf	ECANSendMessage@pb,c
  8864                           
  8865                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  8866  001D42  0E0F               	movlw	15	;volatile
  8867  001D44  6E1E               	movwf	ECANSendMessage@pb+3,c
  8868  001D46  0E10               	movlw	16	;volatile
  8869  001D48  6E1D               	movwf	ECANSendMessage@pb+2,c
  8870                           
  8871                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  8872  001D4A  0E0F               	movlw	15	;volatile
  8873  001D4C  6E20               	movwf	ECANSendMessage@pb+5,c
  8874  001D4E  6A1F               	clrf	ECANSendMessage@pb+4,c
  8875                           
  8876                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  8877  001D50  010E               	movlb	14	; () banked
  8878  001D52  0E0E               	movlw	14	;volatile
  8879  001D54  6E22               	movwf	ECANSendMessage@pb+7,c
  8880  001D56  0E80               	movlw	128	;volatile
  8881  001D58  6E21               	movwf	ECANSendMessage@pb+6,c
  8882                           
  8883                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  8884  001D5A  0E0E               	movlw	14	;volatile
  8885  001D5C  6E24               	movwf	ECANSendMessage@pb+9,c
  8886  001D5E  0E90               	movlw	144	;volatile
  8887  001D60  6E23               	movwf	ECANSendMessage@pb+8,c
  8888                           
  8889                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  8890  001D62  0E0E               	movlw	14	;volatile
  8891  001D64  6E26               	movwf	ECANSendMessage@pb+11,c
  8892  001D66  0EA0               	movlw	160	;volatile
  8893  001D68  6E25               	movwf	ECANSendMessage@pb+10,c
  8894                           
  8895                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  8896  001D6A  0E0E               	movlw	14	;volatile
  8897  001D6C  6E28               	movwf	ECANSendMessage@pb+13,c
  8898  001D6E  0EB0               	movlw	176	;volatile
  8899  001D70  6E27               	movwf	ECANSendMessage@pb+12,c
  8900                           
  8901                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  8902  001D72  0E0E               	movlw	14	;volatile
  8903  001D74  6E2A               	movwf	ECANSendMessage@pb+15,c
  8904  001D76  0EC0               	movlw	192	;volatile
  8905  001D78  6E29               	movwf	ECANSendMessage@pb+14,c
  8906                           
  8907                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  8908  001D7A  0E0E               	movlw	14	;volatile
  8909  001D7C  6E2C               	movwf	ECANSendMessage@pb+17,c
  8910  001D7E  0ED0               	movlw	208	;volatile
  8911  001D80  6E2B               	movwf	ECANSendMessage@pb+16,c
  8912                           
  8913                           ; BSR set to: 14
  8914                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  8915  001D82  5072               	movf	3954,w,c	;volatile
  8916  001D84  0BC0               	andlw	192
  8917  001D86  6E2D               	movwf	ECANSendMessage@mode,c
  8918                           
  8919                           ; BSR set to: 14
  8920                           ;ECAN.c: 660: if ( mode == 0x00 )
  8921  001D88  662D               	tstfsz	ECANSendMessage@mode,c
  8922  001D8A  D002               	goto	l6718
  8923                           
  8924                           ; BSR set to: 14
  8925                           ;ECAN.c: 661: buffers = 2;
  8926  001D8C  0E02               	movlw	2
  8927  001D8E  D001               	goto	L27
  8928  001D90                     l6718:
  8929                           
  8930                           ; BSR set to: 14
  8931                           ;ECAN.c: 662: else
  8932                           ;ECAN.c: 663: buffers = 8;
  8933  001D90  0E08               	movlw	8
  8934  001D92                     L27:
  8935  001D92  6E2E               	movwf	ECANSendMessage@buffers,c
  8936                           
  8937                           ; BSR set to: 14
  8938                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  8939  001D94  90D8               	bcf	status,0,c
  8940  001D96  317D               	rrcf	125,w,b	;volatile
  8941  001D98  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  8942                           
  8943                           ; BSR set to: 14
  8944                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  8945  001D9A  6A34               	clrf	ECANSendMessage@i,c
  8946  001D9C  D07C               	goto	l6778
  8947  001D9E                     l6724:
  8948                           
  8949                           ;ECAN.c: 688: {
  8950                           ;ECAN.c: 693: ptr = pb[i];
  8951  001D9E  5034               	movf	ECANSendMessage@i,w,c
  8952  001DA0  0D02               	mullw	2
  8953  001DA2  50F3               	movf	prodl,w,c
  8954  001DA4  0F1B               	addlw	low ECANSendMessage@pb
  8955  001DA6  6ED9               	movwf	fsr2l,c
  8956  001DA8  6ADA               	clrf	fsr2h,c
  8957  001DAA  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  8958  001DAE  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  8959                           
  8960                           ;ECAN.c: 694: tempPtr = ptr;
  8961  001DB2  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  8962  001DB6  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  8963                           
  8964                           ;ECAN.c: 702: if ( i > 2 )
  8965  001DBA  0E02               	movlw	2
  8966  001DBC  6434               	cpfsgt	ECANSendMessage@i,c
  8967  001DBE  D004               	goto	l6736
  8968                           
  8969                           ;ECAN.c: 703: {
  8970                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  8971  001DC0  90D8               	bcf	status,0,c
  8972  001DC2  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  8973                           
  8974                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  8975  001DC4  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  8976  001DC6  D066               	goto	l6776
  8977  001DC8                     l6736:
  8978                           
  8979                           ;ECAN.c: 714: }
  8980                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  8981  001DC8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8982  001DCC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8983  001DD0  50DF               	movf	indf2,w,c
  8984  001DD2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  8985  001DD4  B61A               	btfsc	??_ECANSendMessage,3,c
  8986  001DD6  D05E               	goto	l6776
  8987                           
  8988                           ;ECAN.c: 721: {
  8989                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  8990  001DD8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8991  001DDC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8992  001DE0  0EFC               	movlw	252
  8993  001DE2  16DF               	andwf	indf2,f,c
  8994                           
  8995                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  8996  001DE4  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  8997  001DE8  0E03               	movlw	3
  8998  001DEA  161A               	andwf	??_ECANSendMessage,f,c
  8999  001DEC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9000  001DF0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9001  001DF4  501A               	movf	??_ECANSendMessage,w,c
  9002  001DF6  12DF               	iorwf	indf2,f,c
  9003                           
  9004                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  9005  001DF8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  9006  001DFA  D004               	goto	l646
  9007                           
  9008                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  9009  001DFC  5018               	movf	ECANSendMessage@dataLen,w,c
  9010  001DFE  0940               	iorlw	64
  9011  001E00  6E33               	movwf	ECANSendMessage@temp,c
  9012  001E02  D002               	goto	l6746
  9013  001E04                     l646:
  9014                           
  9015                           ;ECAN.c: 729: else
  9016                           ;ECAN.c: 730: temp = dataLen;
  9017  001E04  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  9018  001E08                     l6746:
  9019                           
  9020                           ;ECAN.c: 732: *(ptr+5) = temp;
  9021  001E08  EE20 F005          	lfsr	2,5
  9022  001E0C  5035               	movf	ECANSendMessage@ptr,w,c
  9023  001E0E  26D9               	addwf	fsr2l,f,c
  9024  001E10  5036               	movf	ECANSendMessage@ptr+1,w,c
  9025  001E12  22DA               	addwfc	fsr2h,f,c
  9026  001E14  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  9027                           
  9028                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  9029  001E18  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  9030  001E1A  D003               	goto	l648
  9031                           
  9032                           ;ECAN.c: 736: temp = 1;
  9033  001E1C  0E01               	movlw	1
  9034  001E1E  6E33               	movwf	ECANSendMessage@temp,c
  9035  001E20  D001               	goto	l6752
  9036  001E22                     l648:
  9037                           
  9038                           ;ECAN.c: 738: else
  9039                           ;ECAN.c: 739: temp = 0;
  9040  001E22  6A33               	clrf	ECANSendMessage@temp,c
  9041  001E24                     l6752:
  9042                           
  9043                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  9044  001E24  2835               	incf	ECANSendMessage@ptr,w,c
  9045  001E26  6E08               	movwf	?__CANIDToRegs,c
  9046  001E28  0E00               	movlw	0
  9047  001E2A  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  9048  001E2C  6E09               	movwf	?__CANIDToRegs+1,c
  9049  001E2E  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  9050  001E32  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  9051  001E36  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  9052  001E3A  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  9053  001E3E  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  9054  001E42  EC01  F010         	call	__CANIDToRegs	;wreg free
  9055                           
  9056                           ;ECAN.c: 745: ptr += 6;
  9057  001E46  0E06               	movlw	6
  9058  001E48  2635               	addwf	ECANSendMessage@ptr,f,c
  9059  001E4A  0E00               	movlw	0
  9060  001E4C  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  9061                           
  9062                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  9063  001E4E  6A2F               	clrf	ECANSendMessage@j,c
  9064  001E50  D00F               	goto	l6766
  9065  001E52                     l6758:
  9066                           
  9067                           ;ECAN.c: 748: *ptr++ = *data++;
  9068  001E52  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  9069  001E56  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  9070  001E5A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  9071  001E5E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  9072  001E62  CFDF FFE7          	movff	indf2,indf1
  9073  001E66  4A16               	infsnz	ECANSendMessage@data,f,c
  9074  001E68  2A17               	incf	ECANSendMessage@data+1,f,c
  9075  001E6A  4A35               	infsnz	ECANSendMessage@ptr,f,c
  9076  001E6C  2A36               	incf	ECANSendMessage@ptr+1,f,c
  9077  001E6E  2A2F               	incf	ECANSendMessage@j,f,c
  9078  001E70                     l6766:
  9079  001E70  5018               	movf	ECANSendMessage@dataLen,w,c
  9080  001E72  5C2F               	subwf	ECANSendMessage@j,w,c
  9081  001E74  E3EE               	bnc	l6758
  9082                           
  9083                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  9084  001E76  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9085  001E7A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9086  001E7E  50DF               	movf	indf2,w,c
  9087  001E80  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9088  001E82  B41A               	btfsc	??_ECANSendMessage,2,c
  9089  001E84  0C01               	retlw	1
  9090                           
  9091                           ;ECAN.c: 753: *tempPtr |= 0x08;
  9092  001E86  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9093  001E8A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9094  001E8E  0E00               	movlw	0
  9095  001E90  86DB               	bsf	plusw2,3,c
  9096                           
  9097                           ;ECAN.c: 755: return TRUE;
  9098  001E92  0C01               	retlw	1
  9099  001E94                     l6776:
  9100  001E94  2A34               	incf	ECANSendMessage@i,f,c
  9101  001E96                     l6778:
  9102  001E96  502E               	movf	ECANSendMessage@buffers,w,c
  9103  001E98  5C34               	subwf	ECANSendMessage@i,w,c
  9104  001E9A  E381               	bnc	l6724
  9105                           
  9106                           ;ECAN.c: 756: }
  9107                           ;ECAN.c: 757: }
  9108                           ;ECAN.c: 760: return FALSE;
  9109  001E9C  0C00               	retlw	0
  9110  001E9E                     __end_of_ECANSendMessage:
  9111                           	opt stack 0
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           postinc0	equ	0xFEE
  9119                           wreg	equ	0xFE8
  9120                           indf1	equ	0xFE7
  9121                           fsr1h	equ	0xFE2
  9122                           fsr1l	equ	0xFE1
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           plusw2	equ	0xFDB
  9127                           fsr2h	equ	0xFDA
  9128                           fsr2l	equ	0xFD9
  9129                           status	equ	0xFD8
  9130                           
  9131 ;; *************** function __CANIDToRegs *****************
  9132 ;; Defined at:
  9133 ;;		line 1099 in file "../ECAN.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9136 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9137 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9138 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  9139 ;;  val             4    9[COMRAM] unsigned long 
  9140 ;;  type            1   13[COMRAM] unsigned char 
  9141 ;; Auto vars:     Size  Location     Type
  9142 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  9143 ;;		 -> _CANIDToRegs@val(4), 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;		None               void
  9146 ;; Registers used:
  9147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/E
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9153 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9155 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9156 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9157 ;;Total ram usage:       10 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    2
  9160 ;; This function calls:
  9161 ;;		Nothing
  9162 ;; This function is called by:
  9163 ;;		_ECANSendMessage
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text53
  9168  002002                     __ptext53:
  9169                           	opt stack 0
  9170  002002                     __CANIDToRegs:
  9171                           	opt stack 22
  9172                           
  9173                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9174                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9175                           
  9176                           ;incstack = 0
  9177                           ;incstack = 0
  9178  002002  0E0A               	movlw	low __CANIDToRegs@val
  9179  002004  6E11               	movwf	__CANIDToRegs@Value,c
  9180                           
  9181                           ;ECAN.c: 1104: if ( type == 0 )
  9182  002006  660E               	tstfsz	__CANIDToRegs@type,c
  9183  002008  D037               	goto	l6794
  9184                           
  9185                           ;ECAN.c: 1105: {
  9186                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9187  00200A  5011               	movf	__CANIDToRegs@Value,w,c
  9188  00200C  6ED9               	movwf	fsr2l,c
  9189  00200E  6ADA               	clrf	fsr2h,c
  9190  002010  50DF               	movf	indf2,w,c
  9191  002012  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9192  002014  90D8               	bcf	status,0,c
  9193  002016  320F               	rrcf	??__CANIDToRegs,f,c
  9194  002018  90D8               	bcf	status,0,c
  9195  00201A  320F               	rrcf	??__CANIDToRegs,f,c
  9196  00201C  90D8               	bcf	status,0,c
  9197  00201E  300F               	rrcf	??__CANIDToRegs,w,c
  9198  002020  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9199  002024  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9200  002028  6EDF               	movwf	indf2,c
  9201                           
  9202                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9203  00202A  5011               	movf	__CANIDToRegs@Value,w,c
  9204  00202C  6ED9               	movwf	fsr2l,c
  9205  00202E  6ADA               	clrf	fsr2h,c
  9206  002030  2AD9               	incf	fsr2l,f,c
  9207  002032  6ADA               	clrf	fsr2h,c
  9208  002034  50DF               	movf	indf2,w,c
  9209  002036  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9210  002038  0E05               	movlw	5
  9211  00203A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9212  00203C                     u6985:
  9213  00203C  90D8               	bcf	status,0,c
  9214  00203E  360F               	rlcf	??__CANIDToRegs,f,c
  9215  002040  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9216  002042  D7FC               	goto	u6985
  9217  002044  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9218  002048  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9219  00204C  500F               	movf	??__CANIDToRegs,w,c
  9220  00204E  12DF               	iorwf	indf2,f,c
  9221                           
  9222                           ;ECAN.c: 1109: ptr++;
  9223  002050  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9224  002052  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9225                           
  9226                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9227  002054  5011               	movf	__CANIDToRegs@Value,w,c
  9228  002056  6ED9               	movwf	fsr2l,c
  9229  002058  6ADA               	clrf	fsr2h,c
  9230  00205A  50DF               	movf	indf2,w,c
  9231  00205C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9232  00205E  0E05               	movlw	5
  9233  002060  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9234  002062                     u6995:
  9235  002062  90D8               	bcf	status,0,c
  9236  002064  360F               	rlcf	??__CANIDToRegs,f,c
  9237  002066  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9238  002068  D7FC               	goto	u6995
  9239  00206A  500F               	movf	??__CANIDToRegs,w,c
  9240  00206C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9241  002070  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9242  002074  6EDF               	movwf	indf2,c
  9243                           
  9244                           ;ECAN.c: 1111: }
  9245  002076  0012               	return	
  9246  002078                     l6794:
  9247                           
  9248                           ;ECAN.c: 1112: else
  9249                           ;ECAN.c: 1113: {
  9250                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9251  002078  5011               	movf	__CANIDToRegs@Value,w,c
  9252  00207A  6ED9               	movwf	fsr2l,c
  9253  00207C  6ADA               	clrf	fsr2h,c
  9254  00207E  0E02               	movlw	2
  9255  002080  26D9               	addwf	fsr2l,f,c
  9256  002082  6ADA               	clrf	fsr2h,c
  9257  002084  50DF               	movf	indf2,w,c
  9258  002086  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9259  002088  0E05               	movlw	5
  9260  00208A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9261  00208C                     u7005:
  9262  00208C  90D8               	bcf	status,0,c
  9263  00208E  320F               	rrcf	??__CANIDToRegs,f,c
  9264  002090  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9265  002092  D7FC               	goto	u7005
  9266  002094  500F               	movf	??__CANIDToRegs,w,c
  9267  002096  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9268  00209A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9269  00209E  6EDF               	movwf	indf2,c
  9270                           
  9271                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9272  0020A0  5011               	movf	__CANIDToRegs@Value,w,c
  9273  0020A2  6ED9               	movwf	fsr2l,c
  9274  0020A4  6ADA               	clrf	fsr2h,c
  9275  0020A6  0E03               	movlw	3
  9276  0020A8  26D9               	addwf	fsr2l,f,c
  9277  0020AA  6ADA               	clrf	fsr2h,c
  9278  0020AC  50DF               	movf	indf2,w,c
  9279  0020AE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9280  0020B0  90D8               	bcf	status,0,c
  9281  0020B2  360F               	rlcf	??__CANIDToRegs,f,c
  9282  0020B4  90D8               	bcf	status,0,c
  9283  0020B6  360F               	rlcf	??__CANIDToRegs,f,c
  9284  0020B8  90D8               	bcf	status,0,c
  9285  0020BA  360F               	rlcf	??__CANIDToRegs,f,c
  9286  0020BC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9287  0020C0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9288  0020C4  500F               	movf	??__CANIDToRegs,w,c
  9289  0020C6  12DF               	iorwf	indf2,f,c
  9290                           
  9291                           ;ECAN.c: 1117: ptr++;
  9292  0020C8  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9293  0020CA  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9294                           
  9295                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9296  0020CC  5011               	movf	__CANIDToRegs@Value,w,c
  9297  0020CE  6ED9               	movwf	fsr2l,c
  9298  0020D0  6ADA               	clrf	fsr2h,c
  9299  0020D2  0E02               	movlw	2
  9300  0020D4  26D9               	addwf	fsr2l,f,c
  9301  0020D6  6ADA               	clrf	fsr2h,c
  9302  0020D8  50DF               	movf	indf2,w,c
  9303  0020DA  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9304  0020DC  90D8               	bcf	status,0,c
  9305  0020DE  360F               	rlcf	??__CANIDToRegs,f,c
  9306  0020E0  90D8               	bcf	status,0,c
  9307  0020E2  360F               	rlcf	??__CANIDToRegs,f,c
  9308  0020E4  90D8               	bcf	status,0,c
  9309  0020E6  340F               	rlcf	??__CANIDToRegs,w,c
  9310  0020E8  0BE0               	andlw	224
  9311  0020EA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9312  0020EE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9313  0020F2  6EDF               	movwf	indf2,c
  9314                           
  9315                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9316  0020F4  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9317  0020F8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9318  0020FC  0E00               	movlw	0
  9319  0020FE  86DB               	bsf	plusw2,3,c
  9320                           
  9321                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9322  002100  5011               	movf	__CANIDToRegs@Value,w,c
  9323  002102  6ED9               	movwf	fsr2l,c
  9324  002104  6ADA               	clrf	fsr2h,c
  9325  002106  0E02               	movlw	2
  9326  002108  26D9               	addwf	fsr2l,f,c
  9327  00210A  6ADA               	clrf	fsr2h,c
  9328  00210C  50DF               	movf	indf2,w,c
  9329  00210E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9330  002110  0E03               	movlw	3
  9331  002112  160F               	andwf	??__CANIDToRegs,f,c
  9332  002114  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9333  002118  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9334  00211C  500F               	movf	??__CANIDToRegs,w,c
  9335  00211E  12DF               	iorwf	indf2,f,c
  9336                           
  9337                           ;ECAN.c: 1122: ptr++;
  9338  002120  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9339  002122  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9340                           
  9341                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9342  002124  5011               	movf	__CANIDToRegs@Value,w,c
  9343  002126  6ED9               	movwf	fsr2l,c
  9344  002128  6ADA               	clrf	fsr2h,c
  9345  00212A  2AD9               	incf	fsr2l,f,c
  9346  00212C  6ADA               	clrf	fsr2h,c
  9347  00212E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9348  002132  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9349  002136  CFDF FFE7          	movff	indf2,indf1
  9350                           
  9351                           ;ECAN.c: 1124: ptr++;
  9352  00213A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9353  00213C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9354                           
  9355                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9356  00213E  5011               	movf	__CANIDToRegs@Value,w,c
  9357  002140  6ED9               	movwf	fsr2l,c
  9358  002142  6ADA               	clrf	fsr2h,c
  9359  002144  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9360  002148  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9361  00214C  CFDF FFE7          	movff	indf2,indf1
  9362  002150  0012               	return	
  9363  002152                     __end_of__CANIDToRegs:
  9364                           	opt stack 0
  9365                           tblptru	equ	0xFF8
  9366                           tblptrh	equ	0xFF7
  9367                           tblptrl	equ	0xFF6
  9368                           tablat	equ	0xFF5
  9369                           prodh	equ	0xFF4
  9370                           prodl	equ	0xFF3
  9371                           postinc0	equ	0xFEE
  9372                           wreg	equ	0xFE8
  9373                           indf1	equ	0xFE7
  9374                           fsr1h	equ	0xFE2
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           plusw2	equ	0xFDB
  9380                           fsr2h	equ	0xFDA
  9381                           fsr2l	equ	0xFD9
  9382                           status	equ	0xFD8
  9383                           
  9384 ;; *************** function _vscp_getEvent *****************
  9385 ;; Defined at:
  9386 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;  rv              1   43[COMRAM] unsigned char 
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      unsigned char 
  9393 ;; Registers used:
  9394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : F/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9401 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9403 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9404 ;;Total ram usage:        1 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    6
  9407 ;; This function calls:
  9408 ;;		_getVSCPFrame
  9409 ;; This function is called by:
  9410 ;;		_main
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text54
  9415  002DC4                     __ptext54:
  9416                           	opt stack 0
  9417  002DC4                     _vscp_getEvent:
  9418                           	opt stack 24
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;vscp_firmware.c: 1309: int8_t rv;
  9422                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
  9423                           
  9424                           ;incstack = 0
  9425                           ;incstack = 0
  9426  002DC4  BFA4               	btfsc	_vscp_imsg& (0+255),7,b
  9427  002DC6  0012               	return	
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
  9431                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
  9432                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
  9433                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
  9434                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
  9435                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
  9436  002DC8  0EA8               	movlw	low (_vscp_imsg+4)
  9437  002DCA  6E1E               	movwf	?_getVSCPFrame,c
  9438  002DCC  0EA9               	movlw	low (_vscp_imsg+5)
  9439  002DCE  6E1F               	movwf	?_getVSCPFrame+1,c
  9440  002DD0  0EA5               	movlw	low (_vscp_imsg+1)
  9441  002DD2  6E20               	movwf	?_getVSCPFrame+2,c
  9442  002DD4  0EA4               	movlw	low _vscp_imsg
  9443  002DD6  6E21               	movwf	?_getVSCPFrame+3,c
  9444  002DD8  0EAA               	movlw	low (_vscp_imsg+6)
  9445  002DDA  6E22               	movwf	?_getVSCPFrame+4,c
  9446  002DDC  0EA6               	movlw	(_vscp_imsg+2)& (0+255)
  9447  002DDE  EC7C  F015         	call	_getVSCPFrame
  9448  002DE2  6E2C               	movwf	vscp_getEvent@rv,c
  9449  002DE4  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9450  002DE6  B4D8               	btfsc	status,2,c
  9451  002DE8  0012               	return	
  9452                           
  9453                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
  9454  002DEA  0100               	movlb	0	; () banked
  9455  002DEC  8FA4               	bsf	_vscp_imsg& (0+255),7,b
  9456  002DEE  0012               	return	
  9457  002DF0                     __end_of_vscp_getEvent:
  9458                           	opt stack 0
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodh	equ	0xFF4
  9464                           prodl	equ	0xFF3
  9465                           postinc0	equ	0xFEE
  9466                           wreg	equ	0xFE8
  9467                           indf1	equ	0xFE7
  9468                           fsr1h	equ	0xFE2
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           plusw2	equ	0xFDB
  9474                           fsr2h	equ	0xFDA
  9475                           fsr2l	equ	0xFD9
  9476                           status	equ	0xFD8
  9477                           
  9478 ;; *************** function _getVSCPFrame *****************
  9479 ;; Defined at:
  9480 ;;		line 1475 in file "../main.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9483 ;;		 -> vscp_imsg(14), 
  9484 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9485 ;;		 -> vscp_imsg(14), 
  9486 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9487 ;;		 -> vscp_imsg(14), 
  9488 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9489 ;;		 -> vscp_imsg(14), 
  9490 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9491 ;;		 -> vscp_imsg(14), 
  9492 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9493 ;;		 -> vscp_imsg(14), 
  9494 ;; Auto vars:     Size  Location     Type
  9495 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9496 ;;		 -> vscp_imsg(14), 
  9497 ;;  id              4   39[COMRAM] unsigned long 
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      unsigned char 
  9500 ;; Registers used:
  9501 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9502 ;; Tracked objects:
  9503 ;;		On entry : F/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9507 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9508 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9509 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9510 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9511 ;;Total ram usage:       14 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    5
  9514 ;; This function calls:
  9515 ;;		_getCANFrame
  9516 ;; This function is called by:
  9517 ;;		_vscp_getEvent
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           	psect	text55
  9522  002AF8                     __ptext55:
  9523                           	opt stack 0
  9524  002AF8                     _getVSCPFrame:
  9525                           	opt stack 24
  9526                           
  9527                           ;incstack = 0
  9528                           ;incstack = 0
  9529                           ;getVSCPFrame@pvscpclass stored from wreg
  9530  002AF8  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;main.c: 1476: uint32_t id;
  9534                           ;main.c: 1478: if ( !getCANFrame(&id, pSize, pData) ) {
  9535  002AFC  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9536  002B00  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9537  002B04  0E28               	movlw	getVSCPFrame@id& (0+255)
  9538  002B06  EC47  F017         	call	_getCANFrame
  9539  002B0A  0900               	iorlw	0
  9540  002B0C  E101               	bnz	l5084
  9541                           
  9542                           ;main.c: 1479: return 0;
  9543  002B0E  0C00               	retlw	0
  9544  002B10                     l5084:
  9545                           
  9546                           ;main.c: 1480: }
  9547                           ;main.c: 1482: *pNodeId = id & 0x0ff;
  9548  002B10  501F               	movf	getVSCPFrame@pNodeId,w,c
  9549  002B12  6ED9               	movwf	fsr2l,c
  9550  002B14  6ADA               	clrf	fsr2h,c
  9551  002B16  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9552                           
  9553                           ;main.c: 1483: *pvscptype = (id >> 8) & 0xff;
  9554  002B1A  501E               	movf	getVSCPFrame@pvscptype,w,c
  9555  002B1C  6ED9               	movwf	fsr2l,c
  9556  002B1E  6ADA               	clrf	fsr2h,c
  9557  002B20  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9558                           
  9559                           ;main.c: 1484: *pvscpclass = (id >> 16) & 0x1ff;
  9560  002B24  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9561  002B26  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9562  002B28  0E01               	movlw	1
  9563  002B2A  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9564  002B2C  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9565  002B2E  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9566  002B30  6ED9               	movwf	fsr2l,c
  9567  002B32  6ADA               	clrf	fsr2h,c
  9568  002B34  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9569  002B38  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  9570                           
  9571                           ;main.c: 1485: *pPriority = (uint16_t) (0x07 & (id >> 26));
  9572  002B3C  5020               	movf	getVSCPFrame@pPriority,w,c
  9573  002B3E  6ED9               	movwf	fsr2l,c
  9574  002B40  6ADA               	clrf	fsr2h,c
  9575  002B42  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  9576  002B46  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  9577  002B4A  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  9578  002B4E  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  9579  002B52  0E1B               	movlw	27
  9580  002B54  D005               	goto	u4400
  9581  002B56                     u4405:
  9582  002B56  90D8               	bcf	status,0,c
  9583  002B58  3226               	rrcf	??_getVSCPFrame+3,f,c
  9584  002B5A  3225               	rrcf	??_getVSCPFrame+2,f,c
  9585  002B5C  3224               	rrcf	??_getVSCPFrame+1,f,c
  9586  002B5E  3223               	rrcf	??_getVSCPFrame,f,c
  9587  002B60                     u4400:
  9588  002B60  2EE8               	decfsz	wreg,f,c
  9589  002B62  D7F9               	goto	u4405
  9590  002B64  5023               	movf	??_getVSCPFrame,w,c
  9591  002B66  0B07               	andlw	7
  9592  002B68  6EDF               	movwf	indf2,c
  9593                           
  9594                           ;main.c: 1487: return 1;
  9595  002B6A  0C01               	retlw	1
  9596  002B6C                     __end_of_getVSCPFrame:
  9597                           	opt stack 0
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           postinc0	equ	0xFEE
  9605                           wreg	equ	0xFE8
  9606                           indf1	equ	0xFE7
  9607                           fsr1h	equ	0xFE2
  9608                           fsr1l	equ	0xFE1
  9609                           indf2	equ	0xFDF
  9610                           postinc2	equ	0xFDE
  9611                           postdec2	equ	0xFDD
  9612                           plusw2	equ	0xFDB
  9613                           fsr2h	equ	0xFDA
  9614                           fsr2l	equ	0xFD9
  9615                           status	equ	0xFD8
  9616                           
  9617 ;; *************** function _getCANFrame *****************
  9618 ;; Defined at:
  9619 ;;		line 1517 in file "../main.c"
  9620 ;; Parameters:    Size  Location     Type
  9621 ;;  pid             1    wreg     PTR unsigned long 
  9622 ;;		 -> getVSCPFrame@id(4), 
  9623 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
  9624 ;;		 -> vscp_imsg(14), 
  9625 ;;  pdata           1   26[COMRAM] PTR unsigned char 
  9626 ;;		 -> vscp_imsg(14), 
  9627 ;; Auto vars:     Size  Location     Type
  9628 ;;  pid             1   27[COMRAM] PTR unsigned long 
  9629 ;;		 -> getVSCPFrame@id(4), 
  9630 ;;  flags           1   28[COMRAM] enum E18984
  9631 ;; Return value:  Size  Location     Type
  9632 ;;                  1    wreg      unsigned char 
  9633 ;; Registers used:
  9634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9635 ;; Tracked objects:
  9636 ;;		On entry : F/0
  9637 ;;		On exit  : 0/0
  9638 ;;		Unchanged: 0/0
  9639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9643 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9644 ;;Total ram usage:        4 bytes
  9645 ;; Hardware stack levels used:    1
  9646 ;; Hardware stack levels required when called:    4
  9647 ;; This function calls:
  9648 ;;		_ECANReceiveMessage
  9649 ;; This function is called by:
  9650 ;;		_getVSCPFrame
  9651 ;; This function uses a non-reentrant model
  9652 ;;
  9653                           
  9654                           	psect	text56
  9655  002E8E                     __ptext56:
  9656                           	opt stack 0
  9657  002E8E                     _getCANFrame:
  9658                           	opt stack 24
  9659                           
  9660                           ;incstack = 0
  9661                           ;incstack = 0
  9662                           ;getCANFrame@pid stored from wreg
  9663  002E8E  CFE8 F01C          	movff	wreg,getCANFrame@pid
  9664                           
  9665                           ; BSR set to: 0
  9666                           ;main.c: 1518: ECAN_RX_MSG_FLAGS flags;
  9667                           ;main.c: 1522: if (vscp_imsg.flags & 0x80) return 0;
  9668  002E92  BFA4               	btfsc	_vscp_imsg& (0+255),7,b
  9669  002E94                     l5096:
  9670  002E94  0C00               	retlw	0
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;main.c: 1524: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
  9674  002E96  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
  9675  002E9A  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
  9676  002E9E  0E1D               	movlw	low getCANFrame@flags
  9677  002EA0  6E11               	movwf	?_ECANReceiveMessage+2,c
  9678  002EA2  501C               	movf	getCANFrame@pid,w,c
  9679  002EA4  EC04  F00C         	call	_ECANReceiveMessage
  9680  002EA8  0900               	iorlw	0
  9681  002EAA  E0F4               	bz	l5096
  9682                           
  9683                           ;main.c: 1527: if (flags & ECAN_RX_RTR_FRAME) return 0;
  9684  002EAC  AC1D               	btfss	getCANFrame@flags,6,c
  9685                           
  9686                           ;main.c: 1530: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
  9687  002EAE  AA1D               	btfss	getCANFrame@flags,5,c
  9688  002EB0  0C00               	retlw	0
  9689                           
  9690                           ;main.c: 1532: return 1;
  9691  002EB2  0C01               	retlw	1
  9692  002EB4                     __end_of_getCANFrame:
  9693                           	opt stack 0
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           postinc0	equ	0xFEE
  9701                           wreg	equ	0xFE8
  9702                           indf1	equ	0xFE7
  9703                           fsr1h	equ	0xFE2
  9704                           fsr1l	equ	0xFE1
  9705                           indf2	equ	0xFDF
  9706                           postinc2	equ	0xFDE
  9707                           postdec2	equ	0xFDD
  9708                           plusw2	equ	0xFDB
  9709                           fsr2h	equ	0xFDA
  9710                           fsr2l	equ	0xFD9
  9711                           status	equ	0xFD8
  9712                           
  9713 ;; *************** function _ECANReceiveMessage *****************
  9714 ;; Defined at:
  9715 ;;		line 803 in file "../ECAN.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;  id              1    wreg     PTR unsigned long 
  9718 ;;		 -> getVSCPFrame@id(4), 
  9719 ;;  data            1   14[COMRAM] PTR unsigned char 
  9720 ;;		 -> vscp_imsg(14), 
  9721 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
  9722 ;;		 -> vscp_imsg(14), 
  9723 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
  9724 ;;		 -> getCANFrame@flags(1), 
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  id              1   19[COMRAM] PTR unsigned long 
  9727 ;;		 -> getVSCPFrame@id(4), 
  9728 ;;  ptr             2   23[COMRAM] PTR unsigned char 
  9729 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9730 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9731 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
  9732 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9733 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9734 ;;  temp            1   22[COMRAM] struct .
  9735 ;;  mode            1   21[COMRAM] unsigned char 
  9736 ;;  i               1   20[COMRAM] unsigned char 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      enum E18242
  9739 ;; Registers used:
  9740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9741 ;; Tracked objects:
  9742 ;;		On entry : F/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9746 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9747 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9749 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9750 ;;Total ram usage:       11 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    3
  9753 ;; This function calls:
  9754 ;;		__ECANPointBuffer
  9755 ;;		__RegsToCANID
  9756 ;; This function is called by:
  9757 ;;		_getCANFrame
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           	psect	text57
  9762  001808                     __ptext57:
  9763                           	opt stack 0
  9764  001808                     _ECANReceiveMessage:
  9765                           	opt stack 24
  9766                           
  9767                           ;incstack = 0
  9768                           ;incstack = 0
  9769                           ;ECANReceiveMessage@id stored from wreg
  9770  001808  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;ECAN.c: 805: BYTE mode;
  9774                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  9775                           ;ECAN.c: 809: char i;
  9776                           ;ECAN.c: 810: BYTE_VAL temp;
  9777                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  9778  00180C  6A54               	clrf	__ECANRxFilterHitInfo,c
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;ECAN.c: 815: mode = ECANCON&0xC0;
  9782  00180E  5072               	movf	3954,w,c	;volatile
  9783  001810  0BC0               	andlw	192
  9784  001812  6E16               	movwf	ECANReceiveMessage@mode,c
  9785                           
  9786                           ; BSR set to: 0
  9787                           ;ECAN.c: 816: if ( mode == 0x00 )
  9788  001814  6616               	tstfsz	ECANReceiveMessage@mode,c
  9789  001816  D030               	goto	l5232
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;ECAN.c: 822: {
  9793                           ;ECAN.c: 824: if ( RXB0FUL )
  9794  001818  AE60               	btfss	3936,7,c	;volatile
  9795  00181A  D012               	goto	l659
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;ECAN.c: 825: {
  9799                           ;ECAN.c: 827: RXB0IF = 0;
  9800  00181C  9077               	bcf	3959,0,c	;volatile
  9801                           
  9802                           ;ECAN.c: 830: if ( RXB0OVFL )
  9803  00181E  AE71               	btfss	3953,7,c	;volatile
  9804  001820  D006               	goto	l5208
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;ECAN.c: 831: {
  9808                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
  9809  001822  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9810  001824  6ED9               	movwf	fsr2l,c
  9811  001826  6ADA               	clrf	fsr2h,c
  9812  001828  0E00               	movlw	0
  9813  00182A  86DB               	bsf	plusw2,3,c
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;ECAN.c: 833: RXB0OVFL = 0;
  9817  00182C  9E71               	bcf	3953,7,c	;volatile
  9818  00182E                     l5208:
  9819                           
  9820                           ; BSR set to: 0
  9821                           ;ECAN.c: 834: }
  9822                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  9823  00182E  A060               	btfss	3936,0,c	;volatile
  9824  001830  D002               	bra	u4575
  9825  001832  8054               	bsf	__ECANRxFilterHitInfo,0,c
  9826  001834  D001               	bra	u4577
  9827  001836                     u4575:
  9828  001836  9054               	bcf	__ECANRxFilterHitInfo,0,c
  9829  001838                     u4577:
  9830                           
  9831                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
  9832  001838  0E0F               	movlw	15	;volatile
  9833  00183A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9834  00183C  0E60               	movlw	96	;volatile
  9835  00183E  D01A               	goto	L28
  9836  001840                     l659:
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
  9840  001840  010F               	movlb	15	; () banked
  9841  001842  AF30               	btfss	48,7,b	;volatile
  9842  001844  0C00               	retlw	0
  9843                           
  9844                           ; BSR set to: 15
  9845                           ;ECAN.c: 842: {
  9846                           ;ECAN.c: 844: RXB1IF = 0;
  9847  001846  9277               	bcf	3959,1,c	;volatile
  9848                           
  9849                           ;ECAN.c: 847: if ( RXB1OVFL )
  9850  001848  AC71               	btfss	3953,6,c	;volatile
  9851  00184A  D006               	goto	l5218
  9852                           
  9853                           ; BSR set to: 15
  9854                           ;ECAN.c: 848: {
  9855                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
  9856  00184C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9857  00184E  6ED9               	movwf	fsr2l,c
  9858  001850  6ADA               	clrf	fsr2h,c
  9859  001852  0E00               	movlw	0
  9860  001854  86DB               	bsf	plusw2,3,c
  9861                           
  9862                           ; BSR set to: 15
  9863                           ;ECAN.c: 850: RXB1OVFL = 0;
  9864  001856  9C71               	bcf	3953,6,c	;volatile
  9865  001858                     l5218:
  9866                           
  9867                           ; BSR set to: 15
  9868                           ;ECAN.c: 851: }
  9869                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  9870  001858  5130               	movf	48,w,b	;volatile
  9871  00185A  0B07               	andlw	7
  9872  00185C  6E54               	movwf	__ECANRxFilterHitInfo,c
  9873                           
  9874                           ; BSR set to: 15
  9875                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  9876  00185E  0E02               	movlw	2
  9877  001860  6054               	cpfslt	__ECANRxFilterHitInfo,c
  9878  001862  D005               	goto	l5224
  9879                           
  9880                           ; BSR set to: 15
  9881                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  9882  001864  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9883  001866  6ED9               	movwf	fsr2l,c
  9884  001868  6ADA               	clrf	fsr2h,c
  9885  00186A  0E00               	movlw	0
  9886  00186C  8EDB               	bsf	plusw2,7,c
  9887  00186E                     l5224:
  9888                           
  9889                           ; BSR set to: 15
  9890                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
  9891  00186E  0E0F               	movlw	15	;volatile
  9892  001870  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9893  001872  0E30               	movlw	48	;volatile
  9894  001874                     L28:
  9895  001874  6E18               	movwf	ECANReceiveMessage@ptr,c
  9896                           
  9897                           ;ECAN.c: 860: }
  9898  001876  D05B               	goto	l5286
  9899  001878                     l5232:
  9900                           
  9901                           ; BSR set to: 0
  9902                           ;ECAN.c: 869: else if ( mode == 0x40 )
  9903  001878  5016               	movf	ECANReceiveMessage@mode,w,c
  9904  00187A  0A40               	xorlw	64
  9905  00187C  E13E               	bnz	l669
  9906                           
  9907                           ; BSR set to: 0
  9908                           ;ECAN.c: 875: {
  9909                           ;ECAN.c: 876: if ( RXB0FUL )
  9910  00187E  AE60               	btfss	3936,7,c	;volatile
  9911  001880  D004               	goto	l670
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
  9915  001882  0E0F               	movlw	15	;volatile
  9916  001884  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9917  001886  0E60               	movlw	96	;volatile
  9918  001888  D036               	goto	L35
  9919  00188A                     l670:
  9920                           
  9921                           ; BSR set to: 0
  9922                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
  9923  00188A  010F               	movlb	15	; () banked
  9924  00188C  AF30               	btfss	48,7,b	;volatile
  9925  00188E  D004               	goto	l672
  9926                           
  9927                           ; BSR set to: 15
  9928                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
  9929  001890  0E0F               	movlw	15	;volatile
  9930  001892  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9931  001894  0E30               	movlw	48	;volatile
  9932  001896  D02F               	goto	L35
  9933  001898                     l672:
  9934                           
  9935                           ; BSR set to: 15
  9936                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
  9937  001898  010E               	movlb	14
  9938  00189A  A57D               	btfss	125,2,b	;volatile
  9939  00189C  AF80               	btfss	128,7,b	;volatile
  9940  00189E  D004               	goto	l674
  9941                           
  9942                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
  9943  0018A0  0E0E               	movlw	14	;volatile
  9944  0018A2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9945  0018A4  0E80               	movlw	128	;volatile
  9946  0018A6  D027               	goto	L35
  9947  0018A8                     l674:
  9948                           
  9949                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
  9950  0018A8  010E               	movlb	14
  9951  0018AA  A77D               	btfss	125,3,b	;volatile
  9952  0018AC  AF90               	btfss	144,7,b	;volatile
  9953  0018AE  D004               	goto	l676
  9954                           
  9955                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
  9956  0018B0  0E0E               	movlw	14	;volatile
  9957  0018B2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9958  0018B4  0E90               	movlw	144	;volatile
  9959  0018B6  D01F               	goto	L35
  9960  0018B8                     l676:
  9961                           
  9962                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
  9963  0018B8  010E               	movlb	14
  9964  0018BA  A97D               	btfss	125,4,b	;volatile
  9965  0018BC  AFA0               	btfss	160,7,b	;volatile
  9966  0018BE  D004               	goto	l678
  9967                           
  9968                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
  9969  0018C0  0E0E               	movlw	14	;volatile
  9970  0018C2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9971  0018C4  0EA0               	movlw	160	;volatile
  9972  0018C6  D017               	goto	L35
  9973  0018C8                     l678:
  9974                           
  9975                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
  9976  0018C8  010E               	movlb	14
  9977  0018CA  AB7D               	btfss	125,5,b	;volatile
  9978  0018CC  AFB0               	btfss	176,7,b	;volatile
  9979  0018CE  D004               	goto	l680
  9980                           
  9981                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
  9982  0018D0  0E0E               	movlw	14	;volatile
  9983  0018D2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9984  0018D4  0EB0               	movlw	176	;volatile
  9985  0018D6  D00F               	goto	L35
  9986  0018D8                     l680:
  9987                           
  9988                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
  9989  0018D8  010E               	movlb	14
  9990  0018DA  AD7D               	btfss	125,6,b	;volatile
  9991  0018DC  AFC0               	btfss	192,7,b	;volatile
  9992  0018DE  D004               	goto	l682
  9993                           
  9994                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
  9995  0018E0  0E0E               	movlw	14	;volatile
  9996  0018E2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9997  0018E4  0EC0               	movlw	192	;volatile
  9998  0018E6  D007               	goto	L35
  9999  0018E8                     l682:
 10000                           
 10001                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 10002  0018E8  010E               	movlb	14
 10003  0018EA  AF7D               	btfss	125,7,b	;volatile
 10004  0018EC  AFD0               	btfss	208,7,b	;volatile
 10005  0018EE  0C00               	retlw	0
 10006                           
 10007                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 10008  0018F0  0E0E               	movlw	14	;volatile
 10009  0018F2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10010  0018F4  0ED0               	movlw	208	;volatile
 10011  0018F6                     L35:
 10012  0018F6  6E18               	movwf	ECANReceiveMessage@ptr,c
 10013  0018F8  D00A               	goto	l5276
 10014  0018FA                     l669:
 10015                           
 10016                           ; BSR set to: 0
 10017                           ;ECAN.c: 910: else
 10018                           ;ECAN.c: 915: {
 10019                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 10020  0018FA  AE71               	btfss	3953,7,c	;volatile
 10021  0018FC  0C00               	retlw	0
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;ECAN.c: 917: {
 10025                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 10026  0018FE  506F               	movf	3951,w,c	;volatile
 10027  001900  0B07               	andlw	7
 10028  001902  EC3D  F015         	call	__ECANPointBuffer
 10029  001906  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 10030  00190A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 10031  00190E                     l5276:
 10032                           
 10033                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 10034  00190E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10035  001912  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10036  001916  50DF               	movf	indf2,w,c
 10037  001918  0B1F               	andlw	31
 10038  00191A  6E54               	movwf	__ECANRxFilterHitInfo,c
 10039                           
 10040                           ;ECAN.c: 932: RXB1IF = 0;
 10041  00191C  9277               	bcf	3959,1,c	;volatile
 10042                           
 10043                           ;ECAN.c: 934: if ( RXB1OVFL )
 10044  00191E  AC71               	btfss	3953,6,c	;volatile
 10045  001920  D006               	goto	l5286
 10046                           
 10047                           ;ECAN.c: 935: {
 10048                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 10049  001922  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10050  001924  6ED9               	movwf	fsr2l,c
 10051  001926  6ADA               	clrf	fsr2h,c
 10052  001928  0E00               	movlw	0
 10053  00192A  86DB               	bsf	plusw2,3,c
 10054                           
 10055                           ;ECAN.c: 937: RXB1OVFL = 0;
 10056  00192C  9C71               	bcf	3953,6,c	;volatile
 10057  00192E                     l5286:
 10058                           
 10059                           ;ECAN.c: 942: savedPtr = ptr;
 10060  00192E  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 10061  001932  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 10062                           
 10063                           ;ECAN.c: 943: *msgFlags = 0;
 10064  001936  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10065  001938  6ED9               	movwf	fsr2l,c
 10066  00193A  6ADA               	clrf	fsr2h,c
 10067  00193C  6ADF               	clrf	indf2,c
 10068                           
 10069                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 10070  00193E  EE20 F005          	lfsr	2,5
 10071  001942  5018               	movf	ECANReceiveMessage@ptr,w,c
 10072  001944  26D9               	addwf	fsr2l,f,c
 10073  001946  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10074  001948  22DA               	addwfc	fsr2h,f,c
 10075  00194A  50DF               	movf	indf2,w,c
 10076  00194C  6E17               	movwf	ECANReceiveMessage@temp,c
 10077                           
 10078                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 10079  00194E  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10080  001950  6ED9               	movwf	fsr2l,c
 10081  001952  6ADA               	clrf	fsr2h,c
 10082  001954  5017               	movf	ECANReceiveMessage@temp,w,c
 10083  001956  0B0F               	andlw	15
 10084  001958  6EDF               	movwf	indf2,c
 10085                           
 10086                           ;ECAN.c: 950: if ( temp.bits.b6 )
 10087  00195A  AC17               	btfss	ECANReceiveMessage@temp,6,c
 10088  00195C  D005               	goto	l690
 10089                           
 10090                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 10091  00195E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10092  001960  6ED9               	movwf	fsr2l,c
 10093  001962  6ADA               	clrf	fsr2h,c
 10094  001964  0E00               	movlw	0
 10095  001966  8CDB               	bsf	plusw2,6,c
 10096  001968                     l690:
 10097                           
 10098                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 10099  001968  EE20 F002          	lfsr	2,2
 10100  00196C  5018               	movf	ECANReceiveMessage@ptr,w,c
 10101  00196E  26D9               	addwf	fsr2l,f,c
 10102  001970  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10103  001972  22DA               	addwfc	fsr2h,f,c
 10104  001974  50DF               	movf	indf2,w,c
 10105  001976  6E17               	movwf	ECANReceiveMessage@temp,c
 10106                           
 10107                           ;ECAN.c: 955: if ( temp.bits.b3 )
 10108  001978  A617               	btfss	ECANReceiveMessage@temp,3,c
 10109  00197A  D008               	goto	l691
 10110                           
 10111                           ;ECAN.c: 956: {
 10112                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 10113  00197C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10114  00197E  6ED9               	movwf	fsr2l,c
 10115  001980  6ADA               	clrf	fsr2h,c
 10116  001982  0E00               	movlw	0
 10117  001984  8ADB               	bsf	plusw2,5,c
 10118                           
 10119                           ;ECAN.c: 958: temp.Val = 1;
 10120  001986  0E01               	movlw	1
 10121  001988  6E17               	movwf	ECANReceiveMessage@temp,c
 10122                           
 10123                           ;ECAN.c: 959: }
 10124  00198A  D001               	goto	l5304
 10125  00198C                     l691:
 10126                           
 10127                           ;ECAN.c: 960: else
 10128                           ;ECAN.c: 961: temp.Val = 0;
 10129  00198C  6A17               	clrf	ECANReceiveMessage@temp,c
 10130  00198E                     l5304:
 10131                           
 10132                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 10133  00198E  2818               	incf	ECANReceiveMessage@ptr,w,c
 10134  001990  6E08               	movwf	?__RegsToCANID,c
 10135  001992  0E00               	movlw	0
 10136  001994  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 10137  001996  6E09               	movwf	?__RegsToCANID+1,c
 10138  001998  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 10139  00199C  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 10140  0019A0  EC4F  F00F         	call	__RegsToCANID	;wreg free
 10141                           
 10142                           ;ECAN.c: 966: ptr += 6;
 10143  0019A4  0E06               	movlw	6
 10144  0019A6  2618               	addwf	ECANReceiveMessage@ptr,f,c
 10145  0019A8  0E00               	movlw	0
 10146  0019AA  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 10147                           
 10148                           ;ECAN.c: 967: temp.Val = *dataLen;
 10149  0019AC  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10150  0019AE  6ED9               	movwf	fsr2l,c
 10151  0019B0  6ADA               	clrf	fsr2h,c
 10152  0019B2  50DF               	movf	indf2,w,c
 10153  0019B4  6E17               	movwf	ECANReceiveMessage@temp,c
 10154                           
 10155                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 10156  0019B6  6A15               	clrf	ECANReceiveMessage@i,c
 10157  0019B8  D00D               	goto	l5320
 10158  0019BA                     l5312:
 10159                           
 10160                           ;ECAN.c: 969: *data++ = *ptr++;
 10161  0019BA  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10162  0019BE  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10163  0019C2  500F               	movf	ECANReceiveMessage@data,w,c
 10164  0019C4  6EE1               	movwf	fsr1l,c
 10165  0019C6  6AE2               	clrf	fsr1h,c
 10166  0019C8  CFDF FFE7          	movff	indf2,indf1
 10167  0019CC  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10168  0019CE  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10169  0019D0  2A0F               	incf	ECANReceiveMessage@data,f,c
 10170  0019D2  2A15               	incf	ECANReceiveMessage@i,f,c
 10171  0019D4                     l5320:
 10172  0019D4  5017               	movf	ECANReceiveMessage@temp,w,c
 10173  0019D6  5C15               	subwf	ECANReceiveMessage@i,w,c
 10174  0019D8  E3F0               	bnc	l5312
 10175                           
 10176                           ;ECAN.c: 972: if ( IRXIF )
 10177  0019DA  AE77               	btfss	3959,7,c	;volatile
 10178  0019DC  D006               	goto	l5326
 10179                           
 10180                           ;ECAN.c: 973: {
 10181                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10182  0019DE  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10183  0019E0  6ED9               	movwf	fsr2l,c
 10184  0019E2  6ADA               	clrf	fsr2h,c
 10185  0019E4  0E00               	movlw	0
 10186  0019E6  88DB               	bsf	plusw2,4,c
 10187                           
 10188                           ;ECAN.c: 975: IRXIF = 0;
 10189  0019E8  9E77               	bcf	3959,7,c	;volatile
 10190  0019EA                     l5326:
 10191                           
 10192                           ;ECAN.c: 976: }
 10193                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10194  0019EA  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10195  0019EE  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10196  0019F2  0E7F               	movlw	127
 10197  0019F4  16DF               	andwf	indf2,f,c
 10198                           
 10199                           ;ECAN.c: 983: if ( mode == 0x80 )
 10200  0019F6  5016               	movf	ECANReceiveMessage@mode,w,c
 10201  0019F8  0A80               	xorlw	128
 10202  0019FA  B4D8               	btfsc	status,2,c
 10203                           
 10204                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10205  0019FC  9E71               	bcf	3953,7,c	;volatile
 10206                           
 10207                           ;ECAN.c: 990: return TRUE;
 10208  0019FE  0C01               	retlw	1
 10209  001A00                     __end_of_ECANReceiveMessage:
 10210                           	opt stack 0
 10211                           tblptru	equ	0xFF8
 10212                           tblptrh	equ	0xFF7
 10213                           tblptrl	equ	0xFF6
 10214                           tablat	equ	0xFF5
 10215                           prodh	equ	0xFF4
 10216                           prodl	equ	0xFF3
 10217                           postinc0	equ	0xFEE
 10218                           wreg	equ	0xFE8
 10219                           indf1	equ	0xFE7
 10220                           fsr1h	equ	0xFE2
 10221                           fsr1l	equ	0xFE1
 10222                           indf2	equ	0xFDF
 10223                           postinc2	equ	0xFDE
 10224                           postdec2	equ	0xFDD
 10225                           plusw2	equ	0xFDB
 10226                           fsr2h	equ	0xFDA
 10227                           fsr2l	equ	0xFD9
 10228                           status	equ	0xFD8
 10229                           
 10230 ;; *************** function __RegsToCANID *****************
 10231 ;; Defined at:
 10232 ;;		line 1156 in file "../ECAN.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10235 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10236 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10237 ;;  val             1    9[COMRAM] PTR unsigned long 
 10238 ;;		 -> getVSCPFrame@id(4), 
 10239 ;;  type            1   10[COMRAM] unsigned char 
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10242 ;;		 -> getVSCPFrame@id(4), 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;		None               void
 10245 ;; Registers used:
 10246 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10252 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10254 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10255 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10256 ;;Total ram usage:        7 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    2
 10259 ;; This function calls:
 10260 ;;		Nothing
 10261 ;; This function is called by:
 10262 ;;		_ECANReceiveMessage
 10263 ;; This function uses a non-reentrant model
 10264 ;;
 10265                           
 10266                           	psect	text58
 10267  001E9E                     __ptext58:
 10268                           	opt stack 0
 10269  001E9E                     __RegsToCANID:
 10270                           	opt stack 24
 10271                           
 10272                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10273                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10274                           
 10275                           ;incstack = 0
 10276                           ;incstack = 0
 10277  001E9E  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10278                           
 10279                           ;ECAN.c: 1161: if ( type == 0 )
 10280  001EA2  660B               	tstfsz	__RegsToCANID@type,c
 10281  001EA4  D046               	goto	l5400
 10282                           
 10283                           ;ECAN.c: 1162: {
 10284                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10285  001EA6  500E               	movf	__RegsToCANID@Value,w,c
 10286  001EA8  6ED9               	movwf	fsr2l,c
 10287  001EAA  6ADA               	clrf	fsr2h,c
 10288  001EAC  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10289  001EB0  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10290  001EB4  50E7               	movf	indf1,w,c
 10291  001EB6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10292  001EB8  90D8               	bcf	status,0,c
 10293  001EBA  360C               	rlcf	??__RegsToCANID,f,c
 10294  001EBC  90D8               	bcf	status,0,c
 10295  001EBE  360C               	rlcf	??__RegsToCANID,f,c
 10296  001EC0  90D8               	bcf	status,0,c
 10297  001EC2  340C               	rlcf	??__RegsToCANID,w,c
 10298  001EC4  6EDF               	movwf	indf2,c
 10299                           
 10300                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10301  001EC6  500E               	movf	__RegsToCANID@Value,w,c
 10302  001EC8  6ED9               	movwf	fsr2l,c
 10303  001ECA  6ADA               	clrf	fsr2h,c
 10304  001ECC  2AD9               	incf	fsr2l,f,c
 10305  001ECE  6ADA               	clrf	fsr2h,c
 10306  001ED0  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10307  001ED4  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10308  001ED8  50E7               	movf	indf1,w,c
 10309  001EDA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10310  001EDC  0E05               	movlw	5
 10311  001EDE  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10312  001EE0                     u4895:
 10313  001EE0  90D8               	bcf	status,0,c
 10314  001EE2  320C               	rrcf	??__RegsToCANID,f,c
 10315  001EE4  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10316  001EE6  D7FC               	goto	u4895
 10317  001EE8  500C               	movf	??__RegsToCANID,w,c
 10318  001EEA  6EDF               	movwf	indf2,c
 10319                           
 10320                           ;ECAN.c: 1166: ptr++;
 10321  001EEC  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10322  001EEE  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10323                           
 10324                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10325  001EF0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10326  001EF4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10327  001EF8  50DF               	movf	indf2,w,c
 10328  001EFA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10329  001EFC  0E05               	movlw	5
 10330  001EFE  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10331  001F00                     u4905:
 10332  001F00  90D8               	bcf	status,0,c
 10333  001F02  320C               	rrcf	??__RegsToCANID,f,c
 10334  001F04  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10335  001F06  D7FC               	goto	u4905
 10336  001F08  500E               	movf	__RegsToCANID@Value,w,c
 10337  001F0A  6ED9               	movwf	fsr2l,c
 10338  001F0C  6ADA               	clrf	fsr2h,c
 10339  001F0E  500C               	movf	??__RegsToCANID,w,c
 10340  001F10  12DF               	iorwf	indf2,f,c
 10341                           
 10342                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10343  001F12  500E               	movf	__RegsToCANID@Value,w,c
 10344  001F14  6ED9               	movwf	fsr2l,c
 10345  001F16  6ADA               	clrf	fsr2h,c
 10346  001F18  0E02               	movlw	2
 10347  001F1A  26D9               	addwf	fsr2l,f,c
 10348  001F1C  6ADA               	clrf	fsr2h,c
 10349  001F1E  6ADF               	clrf	indf2,c
 10350                           
 10351                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10352  001F20  500E               	movf	__RegsToCANID@Value,w,c
 10353  001F22  6ED9               	movwf	fsr2l,c
 10354  001F24  6ADA               	clrf	fsr2h,c
 10355  001F26  0E03               	movlw	3
 10356  001F28  26D9               	addwf	fsr2l,f,c
 10357  001F2A  6ADA               	clrf	fsr2h,c
 10358  001F2C  0E00               	movlw	0
 10359  001F2E  6EDF               	movwf	indf2,c
 10360                           
 10361                           ;ECAN.c: 1170: }
 10362  001F30  0C00               	retlw	0
 10363  001F32                     l5400:
 10364                           
 10365                           ;ECAN.c: 1171: else
 10366                           ;ECAN.c: 1172: {
 10367                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10368  001F32  500E               	movf	__RegsToCANID@Value,w,c
 10369  001F34  6ED9               	movwf	fsr2l,c
 10370  001F36  6ADA               	clrf	fsr2h,c
 10371  001F38  0E02               	movlw	2
 10372  001F3A  26D9               	addwf	fsr2l,f,c
 10373  001F3C  6ADA               	clrf	fsr2h,c
 10374  001F3E  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10375  001F42  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10376  001F46  50E7               	movf	indf1,w,c
 10377  001F48  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10378  001F4A  0E05               	movlw	5
 10379  001F4C  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10380  001F4E                     u4915:
 10381  001F4E  90D8               	bcf	status,0,c
 10382  001F50  360C               	rlcf	??__RegsToCANID,f,c
 10383  001F52  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10384  001F54  D7FC               	goto	u4915
 10385  001F56  500C               	movf	??__RegsToCANID,w,c
 10386  001F58  6EDF               	movwf	indf2,c
 10387                           
 10388                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10389  001F5A  500E               	movf	__RegsToCANID@Value,w,c
 10390  001F5C  6ED9               	movwf	fsr2l,c
 10391  001F5E  6ADA               	clrf	fsr2h,c
 10392  001F60  0E03               	movlw	3
 10393  001F62  26D9               	addwf	fsr2l,f,c
 10394  001F64  6ADA               	clrf	fsr2h,c
 10395  001F66  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10396  001F6A  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10397  001F6E  50E7               	movf	indf1,w,c
 10398  001F70  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10399  001F72  90D8               	bcf	status,0,c
 10400  001F74  320C               	rrcf	??__RegsToCANID,f,c
 10401  001F76  90D8               	bcf	status,0,c
 10402  001F78  320C               	rrcf	??__RegsToCANID,f,c
 10403  001F7A  90D8               	bcf	status,0,c
 10404  001F7C  300C               	rrcf	??__RegsToCANID,w,c
 10405  001F7E  6EDF               	movwf	indf2,c
 10406                           
 10407                           ;ECAN.c: 1176: ptr++;
 10408  001F80  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10409  001F82  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10410                           
 10411                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10412  001F84  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10413  001F88  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10414  001F8C  50DF               	movf	indf2,w,c
 10415  001F8E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10416  001F90  0E03               	movlw	3
 10417  001F92  160C               	andwf	??__RegsToCANID,f,c
 10418  001F94  500E               	movf	__RegsToCANID@Value,w,c
 10419  001F96  6ED9               	movwf	fsr2l,c
 10420  001F98  6ADA               	clrf	fsr2h,c
 10421  001F9A  0E02               	movlw	2
 10422  001F9C  26D9               	addwf	fsr2l,f,c
 10423  001F9E  6ADA               	clrf	fsr2h,c
 10424  001FA0  500C               	movf	??__RegsToCANID,w,c
 10425  001FA2  12DF               	iorwf	indf2,f,c
 10426                           
 10427                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10428  001FA4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10429  001FA8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10430  001FAC  50DF               	movf	indf2,w,c
 10431  001FAE  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10432  001FB0  90D8               	bcf	status,0,c
 10433  001FB2  320C               	rrcf	??__RegsToCANID,f,c
 10434  001FB4  90D8               	bcf	status,0,c
 10435  001FB6  320C               	rrcf	??__RegsToCANID,f,c
 10436  001FB8  90D8               	bcf	status,0,c
 10437  001FBA  320C               	rrcf	??__RegsToCANID,f,c
 10438  001FBC  0E1C               	movlw	28
 10439  001FBE  160C               	andwf	??__RegsToCANID,f,c
 10440  001FC0  500E               	movf	__RegsToCANID@Value,w,c
 10441  001FC2  6ED9               	movwf	fsr2l,c
 10442  001FC4  6ADA               	clrf	fsr2h,c
 10443  001FC6  0E02               	movlw	2
 10444  001FC8  26D9               	addwf	fsr2l,f,c
 10445  001FCA  6ADA               	clrf	fsr2h,c
 10446  001FCC  500C               	movf	??__RegsToCANID,w,c
 10447  001FCE  12DF               	iorwf	indf2,f,c
 10448                           
 10449                           ;ECAN.c: 1180: ptr++;
 10450  001FD0  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10451  001FD2  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10452                           
 10453                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10454  001FD4  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10455  001FD8  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10456  001FDC  500E               	movf	__RegsToCANID@Value,w,c
 10457  001FDE  6EE1               	movwf	fsr1l,c
 10458  001FE0  6AE2               	clrf	fsr1h,c
 10459  001FE2  2AE1               	incf	fsr1l,f,c
 10460  001FE4  6AE2               	clrf	fsr1h,c
 10461  001FE6  CFDF FFE7          	movff	indf2,indf1
 10462                           
 10463                           ;ECAN.c: 1182: ptr++;
 10464  001FEA  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10465  001FEC  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10466                           
 10467                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10468  001FEE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10469  001FF2  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10470  001FF6  500E               	movf	__RegsToCANID@Value,w,c
 10471  001FF8  6EE1               	movwf	fsr1l,c
 10472  001FFA  6AE2               	clrf	fsr1h,c
 10473  001FFC  CFDF FFE7          	movff	indf2,indf1
 10474  002000  0012               	return	
 10475  002002                     __end_of__RegsToCANID:
 10476                           	opt stack 0
 10477                           tblptru	equ	0xFF8
 10478                           tblptrh	equ	0xFF7
 10479                           tblptrl	equ	0xFF6
 10480                           tablat	equ	0xFF5
 10481                           prodh	equ	0xFF4
 10482                           prodl	equ	0xFF3
 10483                           postinc0	equ	0xFEE
 10484                           wreg	equ	0xFE8
 10485                           indf1	equ	0xFE7
 10486                           fsr1h	equ	0xFE2
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           plusw2	equ	0xFDB
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function __ECANPointBuffer *****************
 10497 ;; Defined at:
 10498 ;;		line 1207 in file "../ECAN.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  b               1    wreg     unsigned char 
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  b               1   10[COMRAM] unsigned char 
 10503 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10504 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10505 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  2    7[COMRAM] PTR unsigned char 
 10508 ;; Registers used:
 10509 ;;		wreg, status,2, status,0
 10510 ;; Tracked objects:
 10511 ;;		On entry : F/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10515 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10516 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10518 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10519 ;;Total ram usage:        6 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    2
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_ECANReceiveMessage
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           	psect	text59
 10530  002A7A                     __ptext59:
 10531                           	opt stack 0
 10532  002A7A                     __ECANPointBuffer:
 10533                           	opt stack 24
 10534                           
 10535                           ;incstack = 0
 10536                           ;incstack = 0
 10537                           ;__ECANPointBuffer@b stored from wreg
 10538  002A7A  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;ECAN.c: 1208: BYTE* pt;
 10542                           ;ECAN.c: 1210: switch(b)
 10543  002A7E  D028               	goto	l5386
 10544  002A80                     l5368:
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10548  002A80  0E0F               	movlw	15	;volatile
 10549  002A82  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10550  002A84  0E60               	movlw	96	;volatile
 10551  002A86  D022               	goto	L42
 10552  002A88                     l5370:
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10556  002A88  010F               	movlb	15	; () banked
 10557  002A8A  0E0F               	movlw	15	;volatile
 10558  002A8C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10559  002A8E  0E30               	movlw	48	;volatile
 10560  002A90  D01D               	goto	L42
 10561  002A92                     l5372:
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10565  002A92  010E               	movlb	14	; () banked
 10566  002A94  0E0E               	movlw	14	;volatile
 10567  002A96  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10568  002A98  0E80               	movlw	128	;volatile
 10569  002A9A  D018               	goto	L42
 10570  002A9C                     l5374:
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 10574  002A9C  010E               	movlb	14	; () banked
 10575  002A9E  0E0E               	movlw	14	;volatile
 10576  002AA0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10577  002AA2  0E90               	movlw	144	;volatile
 10578  002AA4  D013               	goto	L42
 10579  002AA6                     l5376:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 10583  002AA6  010E               	movlb	14	; () banked
 10584  002AA8  0E0E               	movlw	14	;volatile
 10585  002AAA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10586  002AAC  0EA0               	movlw	160	;volatile
 10587  002AAE  D00E               	goto	L42
 10588  002AB0                     l5378:
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 10592  002AB0  010E               	movlb	14	; () banked
 10593  002AB2  0E0E               	movlw	14	;volatile
 10594  002AB4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10595  002AB6  0EB0               	movlw	176	;volatile
 10596  002AB8  D009               	goto	L42
 10597  002ABA                     l5380:
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 10601  002ABA  010E               	movlb	14	; () banked
 10602  002ABC  0E0E               	movlw	14	;volatile
 10603  002ABE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10604  002AC0  0EC0               	movlw	192	;volatile
 10605  002AC2  D004               	goto	L42
 10606  002AC4                     l5382:
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 10610  002AC4  010E               	movlb	14	; () banked
 10611  002AC6  0E0E               	movlw	14	;volatile
 10612  002AC8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10613  002ACA  0ED0               	movlw	208	;volatile
 10614  002ACC                     L42:
 10615  002ACC  6E0C               	movwf	__ECANPointBuffer@pt,c
 10616                           
 10617                           ;ECAN.c: 1235: break;
 10618  002ACE  D00F               	goto	l718
 10619  002AD0                     l5386:
 10620                           
 10621                           ; BSR set to: 0
 10622  002AD0  500B               	movf	__ECANPointBuffer@b,w,c
 10623                           
 10624                           ; Switch size 1, requested type "speed"
 10625                           ; Number of cases is 7, Range of values is 0 to 6
 10626                           ; switch strategies available:
 10627                           ; Name         Instructions Cycles
 10628                           ; simple_byte           22    12 (average)
 10629                           ;	Chosen strategy is simple_byte
 10630  002AD2  E0D6               	bz	l5368
 10631  002AD4  0A01               	xorlw	1	; case 1
 10632  002AD6  E0D8               	bz	l5370
 10633  002AD8  0A03               	xorlw	3	; case 2
 10634  002ADA  E0DB               	bz	l5372
 10635  002ADC  0A01               	xorlw	1	; case 3
 10636  002ADE  E0DE               	bz	l5374
 10637  002AE0  0A07               	xorlw	7	; case 4
 10638  002AE2  E0E1               	bz	l5376
 10639  002AE4  0A01               	xorlw	1	; case 5
 10640  002AE6  E0E4               	bz	l5378
 10641  002AE8  0A03               	xorlw	3	; case 6
 10642  002AEA  E0E7               	bz	l5380
 10643  002AEC  D7EB               	goto	l5382
 10644  002AEE                     l718:
 10645                           
 10646                           ;ECAN.c: 1237: return (pt);
 10647  002AEE  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 10648  002AF2  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 10649  002AF6  0012               	return	
 10650  002AF8                     __end_of__ECANPointBuffer:
 10651                           	opt stack 0
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           postinc0	equ	0xFEE
 10659                           wreg	equ	0xFE8
 10660                           indf1	equ	0xFE7
 10661                           fsr1h	equ	0xFE2
 10662                           fsr1l	equ	0xFE1
 10663                           indf2	equ	0xFDF
 10664                           postinc2	equ	0xFDE
 10665                           postdec2	equ	0xFDD
 10666                           plusw2	equ	0xFDB
 10667                           fsr2h	equ	0xFDA
 10668                           fsr2l	equ	0xFD9
 10669                           status	equ	0xFD8
 10670                           
 10671 ;; *************** function _vscp_check_pstorage *****************
 10672 ;; Defined at:
 10673 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;		None
 10678 ;; Return value:  Size  Location     Type
 10679 ;;                  1    wreg      unsigned char 
 10680 ;; Registers used:
 10681 ;;		wreg, status,2, status,0, cstack
 10682 ;; Tracked objects:
 10683 ;;		On entry : E/E
 10684 ;;		On exit  : 0/0
 10685 ;;		Unchanged: 0/0
 10686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10691 ;;Total ram usage:        0 bytes
 10692 ;; Hardware stack levels used:    1
 10693 ;; Hardware stack levels required when called:    4
 10694 ;; This function calls:
 10695 ;;		_vscp_writeNicknamePermanent
 10696 ;;		_vscp_getSegmentCRC
 10697 ;;		_vscp_setSegmentCRC
 10698 ;;		_vscp_setControlByte
 10699 ;; This function is called by:
 10700 ;;		_main
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	text60
 10705  002F20                     __ptext60:
 10706                           	opt stack 0
 10707  002F20                     _vscp_check_pstorage:
 10708                           	opt stack 26
 10709                           
 10710                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 10711                           
 10712                           ;incstack = 0
 10713                           ;incstack = 0
 10714  002F20  ECA8  F018         	call	_vscp_getSegmentCRC	;wreg free
 10715  002F24  0BC0               	andlw	192
 10716  002F26  0A40               	xorlw	64
 10717  002F28  E101               	bnz	l5826
 10718                           
 10719                           ;vscp_firmware.c: 172: return !0;
 10720  002F2A  0C01               	retlw	1
 10721  002F2C                     l5826:
 10722                           
 10723                           ;vscp_firmware.c: 173: }
 10724                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 10725  002F2C  0EFF               	movlw	255
 10726  002F2E  EC4B  F018         	call	_vscp_writeNicknamePermanent
 10727                           
 10728                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 10729  002F32  0E00               	movlw	0
 10730  002F34  EC40  F018         	call	_vscp_setSegmentCRC
 10731                           
 10732                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 10733  002F38  0EA0               	movlw	160
 10734  002F3A  EC35  F018         	call	_vscp_setControlByte
 10735                           
 10736                           ;vscp_firmware.c: 185: return 0;
 10737  002F3E  0C00               	retlw	0
 10738  002F40                     __end_of_vscp_check_pstorage:
 10739                           	opt stack 0
 10740                           tblptru	equ	0xFF8
 10741                           tblptrh	equ	0xFF7
 10742                           tblptrl	equ	0xFF6
 10743                           tablat	equ	0xFF5
 10744                           prodh	equ	0xFF4
 10745                           prodl	equ	0xFF3
 10746                           postinc0	equ	0xFEE
 10747                           wreg	equ	0xFE8
 10748                           indf1	equ	0xFE7
 10749                           fsr1h	equ	0xFE2
 10750                           fsr1l	equ	0xFE1
 10751                           indf2	equ	0xFDF
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           plusw2	equ	0xFDB
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function _vscp_setControlByte *****************
 10760 ;; Defined at:
 10761 ;;		line 1336 in file "../main.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;  ctrl            1    wreg     unsigned char 
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;  ctrl            1   11[COMRAM] unsigned char 
 10766 ;; Return value:  Size  Location     Type
 10767 ;;		None               void
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : 0/E
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10779 ;;Total ram usage:        1 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    3
 10782 ;; This function calls:
 10783 ;;		_Busy_eep
 10784 ;;		_Write_b_eep
 10785 ;; This function is called by:
 10786 ;;		_vscp_check_pstorage
 10787 ;; This function uses a non-reentrant model
 10788 ;;
 10789                           
 10790                           	psect	text61
 10791  00306A                     __ptext61:
 10792                           	opt stack 0
 10793  00306A                     _vscp_setControlByte:
 10794                           	opt stack 26
 10795                           
 10796                           ;incstack = 0
 10797                           ;incstack = 0
 10798                           ;vscp_setControlByte@ctrl stored from wreg
 10799  00306A  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 10800                           
 10801                           ;main.c: 1337: (Busy_eep(), Write_b_eep(0x03,ctrl));
 10802  00306E  ECB1  F018         	call	_Busy_eep	;wreg free
 10803  003072  6A09               	clrf	?_Write_b_eep+1,c
 10804  003074  0E03               	movlw	3
 10805  003076  6E08               	movwf	?_Write_b_eep,c
 10806  003078  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 10807  00307C  EF4B  F016         	goto	_Write_b_eep	;wreg free
 10808  003080                     __end_of_vscp_setControlByte:
 10809                           	opt stack 0
 10810                           tblptru	equ	0xFF8
 10811                           tblptrh	equ	0xFF7
 10812                           tblptrl	equ	0xFF6
 10813                           tablat	equ	0xFF5
 10814                           prodh	equ	0xFF4
 10815                           prodl	equ	0xFF3
 10816                           postinc0	equ	0xFEE
 10817                           wreg	equ	0xFE8
 10818                           indf1	equ	0xFE7
 10819                           fsr1h	equ	0xFE2
 10820                           fsr1l	equ	0xFE1
 10821                           indf2	equ	0xFDF
 10822                           postinc2	equ	0xFDE
 10823                           postdec2	equ	0xFDD
 10824                           plusw2	equ	0xFDB
 10825                           fsr2h	equ	0xFDA
 10826                           fsr2l	equ	0xFD9
 10827                           status	equ	0xFD8
 10828                           
 10829 ;; *************** function _vscp_setSegmentCRC *****************
 10830 ;; Defined at:
 10831 ;;		line 1327 in file "../main.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;  crc             1    wreg     unsigned char 
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  crc             1   11[COMRAM] unsigned char 
 10836 ;; Return value:  Size  Location     Type
 10837 ;;		None               void
 10838 ;; Registers used:
 10839 ;;		wreg, status,2, status,0, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10848 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10849 ;;Total ram usage:        1 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    3
 10852 ;; This function calls:
 10853 ;;		_Busy_eep
 10854 ;;		_Write_b_eep
 10855 ;; This function is called by:
 10856 ;;		_vscp_check_pstorage
 10857 ;;		_vscp_handleProbeState
 10858 ;;		_vscp_handleHeartbeat
 10859 ;;		_vscp_handleSetNickname
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           	psect	text62
 10864  003080                     __ptext62:
 10865                           	opt stack 0
 10866  003080                     _vscp_setSegmentCRC:
 10867                           	opt stack 25
 10868                           
 10869                           ;incstack = 0
 10870                           ;incstack = 0
 10871                           ;vscp_setSegmentCRC@crc stored from wreg
 10872  003080  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 10873                           
 10874                           ;main.c: 1328: (Busy_eep(), Write_b_eep(0x02,crc));
 10875  003084  ECB1  F018         	call	_Busy_eep	;wreg free
 10876  003088  6A09               	clrf	?_Write_b_eep+1,c
 10877  00308A  0E02               	movlw	2
 10878  00308C  6E08               	movwf	?_Write_b_eep,c
 10879  00308E  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 10880  003092  EF4B  F016         	goto	_Write_b_eep	;wreg free
 10881  003096                     __end_of_vscp_setSegmentCRC:
 10882                           	opt stack 0
 10883                           tblptru	equ	0xFF8
 10884                           tblptrh	equ	0xFF7
 10885                           tblptrl	equ	0xFF6
 10886                           tablat	equ	0xFF5
 10887                           prodh	equ	0xFF4
 10888                           prodl	equ	0xFF3
 10889                           postinc0	equ	0xFEE
 10890                           wreg	equ	0xFE8
 10891                           indf1	equ	0xFE7
 10892                           fsr1h	equ	0xFE2
 10893                           fsr1l	equ	0xFE1
 10894                           indf2	equ	0xFDF
 10895                           postinc2	equ	0xFDE
 10896                           postdec2	equ	0xFDD
 10897                           plusw2	equ	0xFDB
 10898                           fsr2h	equ	0xFDA
 10899                           fsr2l	equ	0xFD9
 10900                           status	equ	0xFD8
 10901                           
 10902 ;; *************** function _vscp_getSegmentCRC *****************
 10903 ;; Defined at:
 10904 ;;		line 1318 in file "../main.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;		None
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;		None
 10909 ;; Return value:  Size  Location     Type
 10910 ;;                  1    wreg      unsigned char 
 10911 ;; Registers used:
 10912 ;;		wreg, status,2, status,0, cstack
 10913 ;; Tracked objects:
 10914 ;;		On entry : 0/0
 10915 ;;		On exit  : 0/0
 10916 ;;		Unchanged: 0/0
 10917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10922 ;;Total ram usage:        0 bytes
 10923 ;; Hardware stack levels used:    1
 10924 ;; Hardware stack levels required when called:    3
 10925 ;; This function calls:
 10926 ;;		_Read_b_eep
 10927 ;; This function is called by:
 10928 ;;		_vscp_check_pstorage
 10929 ;;		_vscp_handleHeartbeat
 10930 ;; This function uses a non-reentrant model
 10931 ;;
 10932                           
 10933                           	psect	text63
 10934  003150                     __ptext63:
 10935                           	opt stack 0
 10936  003150                     _vscp_getSegmentCRC:
 10937                           	opt stack 25
 10938                           
 10939                           ;main.c: 1319: return Read_b_eep(0x02);
 10940                           
 10941                           ;incstack = 0
 10942                           ;incstack = 0
 10943  003150  6A09               	clrf	?_Read_b_eep+1,c
 10944  003152  0E02               	movlw	2
 10945  003154  6E08               	movwf	?_Read_b_eep,c
 10946  003156  EF07  F018         	goto	_Read_b_eep	;wreg free
 10947  00315A                     __end_of_vscp_getSegmentCRC:
 10948                           	opt stack 0
 10949                           tblptru	equ	0xFF8
 10950                           tblptrh	equ	0xFF7
 10951                           tblptrl	equ	0xFF6
 10952                           tablat	equ	0xFF5
 10953                           prodh	equ	0xFF4
 10954                           prodl	equ	0xFF3
 10955                           postinc0	equ	0xFEE
 10956                           wreg	equ	0xFE8
 10957                           indf1	equ	0xFE7
 10958                           fsr1h	equ	0xFE2
 10959                           fsr1l	equ	0xFE1
 10960                           indf2	equ	0xFDF
 10961                           postinc2	equ	0xFDE
 10962                           postdec2	equ	0xFDD
 10963                           plusw2	equ	0xFDB
 10964                           fsr2h	equ	0xFDA
 10965                           fsr2l	equ	0xFD9
 10966                           status	equ	0xFD8
 10967                           
 10968 ;; *************** function _Read_b_eep *****************
 10969 ;; Defined at:
 10970 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  badd            2    7[COMRAM] unsigned int 
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;		None
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      unsigned char 
 10977 ;; Registers used:
 10978 ;;		wreg, status,2, status,0
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10987 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10988 ;;Total ram usage:        2 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    2
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_main
 10995 ;;		_vscp_readNicknamePermanent
 10996 ;;		_vscp_getZone
 10997 ;;		_vscp_getSubzone
 10998 ;;		_vscp_readAppReg
 10999 ;;		_vscp_writeAppReg
 11000 ;;		_SendInformationEvent
 11001 ;;		_doDM
 11002 ;;		_actionSet
 11003 ;;		_actionClr
 11004 ;;		_vscp_getGUID
 11005 ;;		_vscp_getUserID
 11006 ;;		_vscp_getManufacturerId
 11007 ;;		_vscp_getSegmentCRC
 11008 ;; This function uses a non-reentrant model
 11009 ;;
 11010                           
 11011                           	psect	text64
 11012  00300E                     __ptext64:
 11013                           	opt stack 0
 11014  00300E                     _Read_b_eep:
 11015                           	opt stack 26
 11016                           
 11017                           ;incstack = 0
 11018                           ;incstack = 0
 11019  00300E  5009               	movf	Read_b_eep@badd+1,w,c
 11020  003010  0B03               	andlw	3
 11021  003012  6E75               	movwf	3957,c	;volatile
 11022  003014  C008  FF74         	movff	Read_b_eep@badd,3956	;volatile
 11023  003018  9C7F               	bcf	3967,6,c	;volatile
 11024  00301A  9E7F               	bcf	3967,7,c	;volatile
 11025  00301C  807F               	bsf	3967,0,c	;volatile
 11026  00301E  F000               	nop		;# 
 11027  003020  F000               	nop		;# 
 11028  003022  5073               	movf	3955,w,c	;volatile
 11029  003024  0012               	return	
 11030  003026                     __end_of_Read_b_eep:
 11031                           	opt stack 0
 11032                           tblptru	equ	0xFF8
 11033                           tblptrh	equ	0xFF7
 11034                           tblptrl	equ	0xFF6
 11035                           tablat	equ	0xFF5
 11036                           prodh	equ	0xFF4
 11037                           prodl	equ	0xFF3
 11038                           postinc0	equ	0xFEE
 11039                           wreg	equ	0xFE8
 11040                           indf1	equ	0xFE7
 11041                           fsr1h	equ	0xFE2
 11042                           fsr1l	equ	0xFE1
 11043                           indf2	equ	0xFDF
 11044                           postinc2	equ	0xFDE
 11045                           postdec2	equ	0xFDD
 11046                           plusw2	equ	0xFDB
 11047                           fsr2h	equ	0xFDA
 11048                           fsr2l	equ	0xFD9
 11049                           status	equ	0xFD8
 11050                           
 11051 ;; *************** function _vscp_writeNicknamePermanent *****************
 11052 ;; Defined at:
 11053 ;;		line 544 in file "../main.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;  nickname        1    wreg     unsigned char 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  nickname        1   11[COMRAM] unsigned char 
 11058 ;; Return value:  Size  Location     Type
 11059 ;;		None               void
 11060 ;; Registers used:
 11061 ;;		wreg, status,2, status,0, cstack
 11062 ;; Tracked objects:
 11063 ;;		On entry : 0/0
 11064 ;;		On exit  : 0/0
 11065 ;;		Unchanged: 0/0
 11066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11071 ;;Total ram usage:        1 bytes
 11072 ;; Hardware stack levels used:    1
 11073 ;; Hardware stack levels required when called:    3
 11074 ;; This function calls:
 11075 ;;		_Busy_eep
 11076 ;;		_Write_b_eep
 11077 ;; This function is called by:
 11078 ;;		_vscp_check_pstorage
 11079 ;;		_vscp_handleProbeState
 11080 ;;		_vscp_handleHeartbeat
 11081 ;;		_vscp_handleSetNickname
 11082 ;;		_vscp_handleDropNickname
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text65
 11087  003096                     __ptext65:
 11088                           	opt stack 0
 11089  003096                     _vscp_writeNicknamePermanent:
 11090                           	opt stack 25
 11091                           
 11092                           ;incstack = 0
 11093                           ;incstack = 0
 11094                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11095  003096  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11096                           
 11097                           ;main.c: 545: (Busy_eep(), Write_b_eep(0x01,nickname));
 11098  00309A  ECB1  F018         	call	_Busy_eep	;wreg free
 11099  00309E  6A09               	clrf	?_Write_b_eep+1,c
 11100  0030A0  0E01               	movlw	1
 11101  0030A2  6E08               	movwf	?_Write_b_eep,c
 11102  0030A4  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 11103  0030A8  EF4B  F016         	goto	_Write_b_eep	;wreg free
 11104  0030AC                     __end_of_vscp_writeNicknamePermanent:
 11105                           	opt stack 0
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           postinc0	equ	0xFEE
 11113                           wreg	equ	0xFE8
 11114                           indf1	equ	0xFE7
 11115                           fsr1h	equ	0xFE2
 11116                           fsr1l	equ	0xFE1
 11117                           indf2	equ	0xFDF
 11118                           postinc2	equ	0xFDE
 11119                           postdec2	equ	0xFDD
 11120                           plusw2	equ	0xFDB
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function _Write_b_eep *****************
 11126 ;; Defined at:
 11127 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;  badd            2    7[COMRAM] unsigned int 
 11130 ;;  bdat            1    9[COMRAM] unsigned char 
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;		None               void
 11135 ;; Registers used:
 11136 ;;		wreg, status,2, status,0
 11137 ;; Tracked objects:
 11138 ;;		On entry : 0/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11142 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11146 ;;Total ram usage:        4 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    2
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		_main
 11153 ;;		_init_app_eeprom
 11154 ;;		_vscp_setGUID
 11155 ;;		_vscp_setManufacturerId
 11156 ;;		_vscp_writeNicknamePermanent
 11157 ;;		_vscp_writeAppReg
 11158 ;;		_vscp_setUserID
 11159 ;;		_vscp_setSegmentCRC
 11160 ;;		_vscp_setControlByte
 11161 ;;		_vscp_goBootloaderMode
 11162 ;; This function uses a non-reentrant model
 11163 ;;
 11164                           
 11165                           	psect	text66
 11166  002C96                     __ptext66:
 11167                           	opt stack 0
 11168  002C96                     _Write_b_eep:
 11169                           	opt stack 24
 11170                           
 11171                           ;incstack = 0
 11172                           ;incstack = 0
 11173  002C96  5009               	movf	Write_b_eep@badd+1,w,c
 11174  002C98  0B03               	andlw	3
 11175  002C9A  6E75               	movwf	3957,c	;volatile
 11176  002C9C  C008  FF74         	movff	Write_b_eep@badd,3956	;volatile
 11177  002CA0  C00A  FF73         	movff	Write_b_eep@bdat,3955	;volatile
 11178  002CA4  9E7F               	bcf	3967,7,c	;volatile
 11179  002CA6  9C7F               	bcf	3967,6,c	;volatile
 11180  002CA8  847F               	bsf	3967,2,c	;volatile
 11181  002CAA  0E00               	movlw	0
 11182  002CAC  BEF2               	btfsc	intcon,7,c	;volatile
 11183  002CAE  0E01               	movlw	1
 11184  002CB0  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 11185  002CB2  9EF2               	bcf	intcon,7,c	;volatile
 11186  002CB4  0E55               	movlw	85
 11187  002CB6  6E7E               	movwf	3966,c	;volatile
 11188  002CB8  0EAA               	movlw	170
 11189  002CBA  6E7E               	movwf	3966,c	;volatile
 11190  002CBC  827F               	bsf	3967,1,c	;volatile
 11191  002CBE                     l1117:
 11192  002CBE  B27F               	btfsc	3967,1,c	;volatile
 11193  002CC0  D7FE               	goto	l1117
 11194  002CC2  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 11195  002CC4  D002               	bra	u3125
 11196  002CC6  9EF2               	bcf	intcon,7,c	;volatile
 11197  002CC8  D001               	bra	u3126
 11198  002CCA                     u3125:
 11199  002CCA  8EF2               	bsf	intcon,7,c	;volatile
 11200  002CCC                     u3126:
 11201  002CCC  947F               	bcf	3967,2,c	;volatile
 11202  002CCE  0012               	return	
 11203  002CD0                     __end_of_Write_b_eep:
 11204                           	opt stack 0
 11205                           tblptru	equ	0xFF8
 11206                           tblptrh	equ	0xFF7
 11207                           tblptrl	equ	0xFF6
 11208                           tablat	equ	0xFF5
 11209                           prodh	equ	0xFF4
 11210                           prodl	equ	0xFF3
 11211                           intcon	equ	0xFF2
 11212                           postinc0	equ	0xFEE
 11213                           wreg	equ	0xFE8
 11214                           indf1	equ	0xFE7
 11215                           fsr1h	equ	0xFE2
 11216                           fsr1l	equ	0xFE1
 11217                           indf2	equ	0xFDF
 11218                           postinc2	equ	0xFDE
 11219                           postdec2	equ	0xFDD
 11220                           plusw2	equ	0xFDB
 11221                           fsr2h	equ	0xFDA
 11222                           fsr2l	equ	0xFD9
 11223                           status	equ	0xFD8
 11224                           
 11225 ;; *************** function _Busy_eep *****************
 11226 ;; Defined at:
 11227 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;		None
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;		None
 11232 ;; Return value:  Size  Location     Type
 11233 ;;		None               void
 11234 ;; Registers used:
 11235 ;;		None
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11245 ;;Total ram usage:        0 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    2
 11248 ;; This function calls:
 11249 ;;		Nothing
 11250 ;; This function is called by:
 11251 ;;		_main
 11252 ;;		_init_app_eeprom
 11253 ;;		_vscp_setGUID
 11254 ;;		_vscp_setManufacturerId
 11255 ;;		_vscp_writeNicknamePermanent
 11256 ;;		_vscp_writeAppReg
 11257 ;;		_vscp_setUserID
 11258 ;;		_vscp_setSegmentCRC
 11259 ;;		_vscp_setControlByte
 11260 ;;		_vscp_goBootloaderMode
 11261 ;; This function uses a non-reentrant model
 11262 ;;
 11263                           
 11264                           	psect	text67
 11265  003162                     __ptext67:
 11266                           	opt stack 0
 11267  003162                     _Busy_eep:
 11268                           	opt stack 24
 11269  003162                     l1088:
 11270  003162  A27F               	btfss	3967,1,c	;volatile
 11271  003164  0012               	return	
 11272  003166  D7FD               	goto	l1088
 11273  003168                     __end_of_Busy_eep:
 11274                           	opt stack 0
 11275                           tblptru	equ	0xFF8
 11276                           tblptrh	equ	0xFF7
 11277                           tblptrl	equ	0xFF6
 11278                           tablat	equ	0xFF5
 11279                           prodh	equ	0xFF4
 11280                           prodl	equ	0xFF3
 11281                           intcon	equ	0xFF2
 11282                           postinc0	equ	0xFEE
 11283                           wreg	equ	0xFE8
 11284                           indf1	equ	0xFE7
 11285                           fsr1h	equ	0xFE2
 11286                           fsr1l	equ	0xFE1
 11287                           indf2	equ	0xFDF
 11288                           postinc2	equ	0xFDE
 11289                           postdec2	equ	0xFDD
 11290                           plusw2	equ	0xFDB
 11291                           fsr2h	equ	0xFDA
 11292                           fsr2l	equ	0xFD9
 11293                           status	equ	0xFD8
 11294                           
 11295 ;; *************** function _init *****************
 11296 ;; Defined at:
 11297 ;;		line 301 in file "../main.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;		None
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;		None
 11302 ;; Return value:  Size  Location     Type
 11303 ;;		None               void
 11304 ;; Registers used:
 11305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : E/E
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11315 ;;Total ram usage:        0 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; Hardware stack levels required when called:    4
 11318 ;; This function calls:
 11319 ;;		_WriteTimer0
 11320 ;;		_init_app_ram
 11321 ;;		_OpenTimer0
 11322 ;;		_ECANInitialize
 11323 ;; This function is called by:
 11324 ;;		_main
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           	psect	text68
 11329  002CD0                     __ptext68:
 11330                           	opt stack 0
 11331  002CD0                     _init:
 11332                           	opt stack 26
 11333                           
 11334                           ;main.c: 305: init_app_ram();
 11335                           
 11336                           ;incstack = 0
 11337                           ;incstack = 0
 11338  002CD0  EC74  F018         	call	_init_app_ram	;wreg free
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;main.c: 310: ANCON0 = 0;
 11342  002CD4  010F               	movlb	15	; () banked
 11343  002CD6  6B5D               	clrf	93,b	;volatile
 11344                           
 11345                           ; BSR set to: 15
 11346                           ;main.c: 311: ANCON1 = 0;
 11347  002CD8  6B5C               	clrf	92,b	;volatile
 11348                           
 11349                           ; BSR set to: 15
 11350                           ;main.c: 320: TRISA = 0x00;
 11351  002CDA  6A92               	clrf	3986,c	;volatile
 11352                           
 11353                           ; BSR set to: 15
 11354                           ;main.c: 321: PORTA = 0x00;
 11355  002CDC  6A80               	clrf	3968,c	;volatile
 11356                           
 11357                           ; BSR set to: 15
 11358                           ;main.c: 333: TRISB = 0b00001100;
 11359  002CDE  0E0C               	movlw	12
 11360  002CE0  6E93               	movwf	3987,c	;volatile
 11361                           
 11362                           ; BSR set to: 15
 11363                           ;main.c: 334: PORTB = 0x00;
 11364  002CE2  6A81               	clrf	3969,c	;volatile
 11365                           
 11366                           ; BSR set to: 15
 11367                           ;main.c: 344: TRISC = 0b00000001;
 11368  002CE4  0E01               	movlw	1
 11369  002CE6  6E94               	movwf	3988,c	;volatile
 11370                           
 11371                           ; BSR set to: 15
 11372                           ;main.c: 345: PORTC = 0x00;
 11373  002CE8  6A82               	clrf	3970,c	;volatile
 11374                           
 11375                           ; BSR set to: 15
 11376                           ;main.c: 371: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11377  002CEA  0E92               	movlw	146
 11378  002CEC  ECDC  F017         	call	_OpenTimer0
 11379                           
 11380                           ; BSR set to: 15
 11381                           ;main.c: 372: WriteTimer0( 0xfb1d );
 11382  002CF0  0EFB               	movlw	251
 11383  002CF2  6E09               	movwf	?_WriteTimer0+1,c
 11384  002CF4  0E1D               	movlw	29
 11385  002CF6  6E08               	movwf	?_WriteTimer0,c
 11386  002CF8  EC7D  F018         	call	_WriteTimer0	;wreg free
 11387                           
 11388                           ; BSR set to: 15
 11389                           ;main.c: 375: ECANInitialize();
 11390  002CFC  ECF8  F014         	call	_ECANInitialize	;wreg free
 11391                           
 11392                           ;main.c: 396: INTCONbits.PEIE = 1;
 11393  002D00  8CF2               	bsf	intcon,6,c	;volatile
 11394                           
 11395                           ;main.c: 399: INTCONbits.GIE = 1;
 11396  002D02  8EF2               	bsf	intcon,7,c	;volatile
 11397  002D04  0012               	return	
 11398  002D06                     __end_of_init:
 11399                           	opt stack 0
 11400                           tblptru	equ	0xFF8
 11401                           tblptrh	equ	0xFF7
 11402                           tblptrl	equ	0xFF6
 11403                           tablat	equ	0xFF5
 11404                           prodh	equ	0xFF4
 11405                           prodl	equ	0xFF3
 11406                           intcon	equ	0xFF2
 11407                           postinc0	equ	0xFEE
 11408                           wreg	equ	0xFE8
 11409                           indf1	equ	0xFE7
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           plusw2	equ	0xFDB
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           
 11420 ;; *************** function _ECANInitialize *****************
 11421 ;; Defined at:
 11422 ;;		line 168 in file "../ECAN.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;		None
 11425 ;; Auto vars:     Size  Location     Type
 11426 ;;		None
 11427 ;; Return value:  Size  Location     Type
 11428 ;;		None               void
 11429 ;; Registers used:
 11430 ;;		wreg, status,2, status,0, cstack
 11431 ;; Tracked objects:
 11432 ;;		On entry : F/F
 11433 ;;		On exit  : E/E
 11434 ;;		Unchanged: 0/0
 11435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11440 ;;Total ram usage:        0 bytes
 11441 ;; Hardware stack levels used:    1
 11442 ;; Hardware stack levels required when called:    3
 11443 ;; This function calls:
 11444 ;;		_ECANSetOperationMode
 11445 ;; This function is called by:
 11446 ;;		_init
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450                           	psect	text69
 11451  0029F0                     __ptext69:
 11452                           	opt stack 0
 11453  0029F0                     _ECANInitialize:
 11454                           	opt stack 26
 11455                           
 11456                           ; BSR set to: 15
 11457                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11458                           
 11459                           ;incstack = 0
 11460                           ;incstack = 0
 11461  0029F0  0E80               	movlw	128
 11462  0029F2  EC13  F018         	call	_ECANSetOperationMode
 11463                           
 11464                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11465  0029F6  0E09               	movlw	9
 11466  0029F8  010E               	movlb	14	; () banked
 11467  0029FA  6F43               	movwf	67,b	;volatile
 11468                           
 11469                           ; BSR set to: 14
 11470                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11471  0029FC  0EFC               	movlw	252
 11472  0029FE  6F44               	movwf	68,b	;volatile
 11473                           
 11474                           ; BSR set to: 14
 11475                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11476                           ;ECAN.c: 181: (0 << 6) |
 11477                           ;ECAN.c: 182: (2-1);
 11478  002A00  0E01               	movlw	1
 11479  002A02  6F45               	movwf	69,b	;volatile
 11480                           
 11481                           ; BSR set to: 14
 11482                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11483  002A04  0E20               	movlw	32
 11484  002A06  6E70               	movwf	3952,c	;volatile
 11485                           
 11486                           ; BSR set to: 14
 11487                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11488  002A08  8E72               	bsf	3954,7,c	;volatile
 11489                           
 11490                           ; BSR set to: 14
 11491                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11492  002A0A  9C72               	bcf	3954,6,c	;volatile
 11493                           
 11494                           ; BSR set to: 14
 11495                           ;ECAN.c: 205: RXB0CON = 0;
 11496  002A0C  6A60               	clrf	3936,c	;volatile
 11497                           
 11498                           ; BSR set to: 14
 11499                           ;ECAN.c: 211: RXB1CON = 0;
 11500  002A0E  010F               	movlb	15	; () banked
 11501  002A10  6B30               	clrf	48,b	;volatile
 11502                           
 11503                           ; BSR set to: 15
 11504                           ;ECAN.c: 221: B0CON = 0;
 11505  002A12  010E               	movlb	14	; () banked
 11506  002A14  6B80               	clrf	128,b	;volatile
 11507                           
 11508                           ; BSR set to: 14
 11509                           ;ECAN.c: 231: B1CON = 0;
 11510  002A16  6B90               	clrf	144,b	;volatile
 11511                           
 11512                           ; BSR set to: 14
 11513                           ;ECAN.c: 241: B2CON = 0;
 11514  002A18  6BA0               	clrf	160,b	;volatile
 11515                           
 11516                           ; BSR set to: 14
 11517                           ;ECAN.c: 254: B3CON = 0 << 2;
 11518  002A1A  6BB0               	clrf	176,b	;volatile
 11519                           
 11520                           ; BSR set to: 14
 11521                           ;ECAN.c: 264: B4CON = 0 << 2;
 11522  002A1C  6BC0               	clrf	192,b	;volatile
 11523                           
 11524                           ; BSR set to: 14
 11525                           ;ECAN.c: 274: B5CON = 0 << 2;
 11526  002A1E  6BD0               	clrf	208,b	;volatile
 11527                           
 11528                           ; BSR set to: 14
 11529                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11530  002A20  0EE0               	movlw	224
 11531  002A22  6F7D               	movwf	125,b	;volatile
 11532                           
 11533                           ; BSR set to: 14
 11534                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11535  002A24  6BE0               	clrf	224,b	;volatile
 11536                           
 11537                           ; BSR set to: 14
 11538  002A26  0E08               	movlw	8
 11539  002A28  6FE1               	movwf	225,b	;volatile
 11540                           
 11541                           ; BSR set to: 14
 11542  002A2A  6BE2               	clrf	226,b	;volatile
 11543                           
 11544                           ; BSR set to: 14
 11545  002A2C  6BE3               	clrf	227,b	;volatile
 11546                           
 11547                           ; BSR set to: 14
 11548                           ;ECAN.c: 303: RXF1SIDH = (long)0x00000000L >> 21L;RXF1SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF1EIDH = (long)0x00000000L >> 8L;RXF1E
      +                          IDL = 0x00000000L;;
 11549  002A2E  6BE4               	clrf	228,b	;volatile
 11550                           
 11551                           ; BSR set to: 14
 11552  002A30  0E08               	movlw	8
 11553  002A32  6FE5               	movwf	229,b	;volatile
 11554                           
 11555                           ; BSR set to: 14
 11556  002A34  6BE6               	clrf	230,b	;volatile
 11557                           
 11558                           ; BSR set to: 14
 11559  002A36  6BE7               	clrf	231,b	;volatile
 11560                           
 11561                           ; BSR set to: 14
 11562                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11563  002A38  0E03               	movlw	3
 11564  002A3A  6F46               	movwf	70,b	;volatile
 11565                           
 11566                           ; BSR set to: 14
 11567                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 11568  002A3C  6B47               	clrf	71,b	;volatile
 11569                           
 11570                           ; BSR set to: 14
 11571                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 11572  002A3E  6B71               	clrf	113,b	;volatile
 11573                           
 11574                           ; BSR set to: 14
 11575                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 11576  002A40  0E11               	movlw	17
 11577  002A42  6F72               	movwf	114,b	;volatile
 11578                           
 11579                           ; BSR set to: 14
 11580                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 11581  002A44  6F73               	movwf	115,b	;volatile
 11582                           
 11583                           ; BSR set to: 14
 11584                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 11585  002A46  6B74               	clrf	116,b	;volatile
 11586                           
 11587                           ; BSR set to: 14
 11588                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 11589  002A48  6B75               	clrf	117,b	;volatile
 11590                           
 11591                           ; BSR set to: 14
 11592                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 11593  002A4A  6B76               	clrf	118,b	;volatile
 11594                           
 11595                           ; BSR set to: 14
 11596                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 11597  002A4C  6B77               	clrf	119,b	;volatile
 11598                           
 11599                           ; BSR set to: 14
 11600                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 11601  002A4E  6B78               	clrf	120,b	;volatile
 11602                           
 11603                           ; BSR set to: 14
 11604                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 11605  002A50  0E54               	movlw	84
 11606  002A52  6F79               	movwf	121,b	;volatile
 11607                           
 11608                           ; BSR set to: 14
 11609                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 11610  002A54  0E05               	movlw	5
 11611  002A56  6F7A               	movwf	122,b	;volatile
 11612                           
 11613                           ; BSR set to: 14
 11614                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11615  002A58  6B7B               	clrf	123,b	;volatile
 11616                           
 11617                           ; BSR set to: 14
 11618                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11619  002A5A  6B7B               	clrf	123,b	;volatile
 11620                           
 11621                           ; BSR set to: 14
 11622                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 11623  002A5C  0E0F               	movlw	15
 11624  002A5E  6FF8               	movwf	248,b	;volatile
 11625                           
 11626                           ; BSR set to: 14
 11627  002A60  0EE0               	movlw	224
 11628  002A62  6FF9               	movwf	249,b	;volatile
 11629                           
 11630                           ; BSR set to: 14
 11631  002A64  6BFA               	clrf	250,b	;volatile
 11632                           
 11633                           ; BSR set to: 14
 11634  002A66  6BFB               	clrf	251,b	;volatile
 11635                           
 11636                           ; BSR set to: 14
 11637                           ;ECAN.c: 482: RXM0EXIDM = 1;
 11638  002A68  87F9               	bsf	249,3,b	;volatile
 11639                           
 11640                           ; BSR set to: 14
 11641                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 11642  002A6A  6BFC               	clrf	252,b	;volatile
 11643                           
 11644                           ; BSR set to: 14
 11645  002A6C  6BFD               	clrf	253,b	;volatile
 11646                           
 11647                           ; BSR set to: 14
 11648  002A6E  6BFE               	clrf	254,b	;volatile
 11649                           
 11650                           ; BSR set to: 14
 11651  002A70  6BFF               	clrf	255,b	;volatile
 11652                           
 11653                           ; BSR set to: 14
 11654                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 11655  002A72  87FD               	bsf	253,3,b	;volatile
 11656                           
 11657                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 11658  002A74  0E00               	movlw	0
 11659  002A76  EF13  F018         	goto	_ECANSetOperationMode
 11660  002A7A                     __end_of_ECANInitialize:
 11661                           	opt stack 0
 11662                           tblptru	equ	0xFF8
 11663                           tblptrh	equ	0xFF7
 11664                           tblptrl	equ	0xFF6
 11665                           tablat	equ	0xFF5
 11666                           prodh	equ	0xFF4
 11667                           prodl	equ	0xFF3
 11668                           intcon	equ	0xFF2
 11669                           postinc0	equ	0xFEE
 11670                           wreg	equ	0xFE8
 11671                           indf1	equ	0xFE7
 11672                           fsr1h	equ	0xFE2
 11673                           fsr1l	equ	0xFE1
 11674                           indf2	equ	0xFDF
 11675                           postinc2	equ	0xFDE
 11676                           postdec2	equ	0xFDD
 11677                           plusw2	equ	0xFDB
 11678                           fsr2h	equ	0xFDA
 11679                           fsr2l	equ	0xFD9
 11680                           status	equ	0xFD8
 11681                           
 11682 ;; *************** function _ECANSetOperationMode *****************
 11683 ;; Defined at:
 11684 ;;		line 1012 in file "../ECAN.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;  mode            1    wreg     enum E18989
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;  mode            1    7[COMRAM] enum E18989
 11689 ;; Return value:  Size  Location     Type
 11690 ;;		None               void
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0
 11693 ;; Tracked objects:
 11694 ;;		On entry : E/F
 11695 ;;		On exit  : E/E
 11696 ;;		Unchanged: E/0
 11697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11701 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11702 ;;Total ram usage:        1 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    2
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_ECANInitialize
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           	psect	text70
 11713  003026                     __ptext70:
 11714                           	opt stack 0
 11715  003026                     _ECANSetOperationMode:
 11716                           	opt stack 26
 11717                           
 11718                           ;incstack = 0
 11719                           ;incstack = 0
 11720                           ;ECANSetOperationMode@mode stored from wreg
 11721  003026  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 11722                           
 11723                           ;ECAN.c: 1013: CANCON &= 0x1F;
 11724  00302A  0E1F               	movlw	31
 11725  00302C  166F               	andwf	3951,f,c	;volatile
 11726                           
 11727                           ;ECAN.c: 1014: CANCON |= mode;
 11728  00302E  5008               	movf	ECANSetOperationMode@mode,w,c
 11729  003030  126F               	iorwf	3951,f,c	;volatile
 11730  003032                     l5338:
 11731  003032  506F               	movf	3951,w,c	;volatile
 11732  003034  0BE0               	andlw	224
 11733  003036  1808               	xorwf	ECANSetOperationMode@mode,w,c
 11734  003038  B4D8               	btfsc	status,2,c
 11735  00303A  0012               	return	
 11736  00303C  D7FA               	goto	l5338
 11737  00303E                     __end_of_ECANSetOperationMode:
 11738                           	opt stack 0
 11739                           tblptru	equ	0xFF8
 11740                           tblptrh	equ	0xFF7
 11741                           tblptrl	equ	0xFF6
 11742                           tablat	equ	0xFF5
 11743                           prodh	equ	0xFF4
 11744                           prodl	equ	0xFF3
 11745                           intcon	equ	0xFF2
 11746                           postinc0	equ	0xFEE
 11747                           wreg	equ	0xFE8
 11748                           indf1	equ	0xFE7
 11749                           fsr1h	equ	0xFE2
 11750                           fsr1l	equ	0xFE1
 11751                           indf2	equ	0xFDF
 11752                           postinc2	equ	0xFDE
 11753                           postdec2	equ	0xFDD
 11754                           plusw2	equ	0xFDB
 11755                           fsr2h	equ	0xFDA
 11756                           fsr2l	equ	0xFD9
 11757                           status	equ	0xFD8
 11758                           
 11759 ;; *************** function _OpenTimer0 *****************
 11760 ;; Defined at:
 11761 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 11762 ;; Parameters:    Size  Location     Type
 11763 ;;  config          1    wreg     unsigned char 
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;  config          1    7[COMRAM] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;		None               void
 11768 ;; Registers used:
 11769 ;;		wreg, status,2, status,0
 11770 ;; Tracked objects:
 11771 ;;		On entry : F/F
 11772 ;;		On exit  : F/F
 11773 ;;		Unchanged: E/0
 11774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11779 ;;Total ram usage:        1 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; Hardware stack levels required when called:    2
 11782 ;; This function calls:
 11783 ;;		Nothing
 11784 ;; This function is called by:
 11785 ;;		_init
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           	psect	text71
 11790  002FB8                     __ptext71:
 11791                           	opt stack 0
 11792  002FB8                     _OpenTimer0:
 11793                           	opt stack 27
 11794                           
 11795                           ;incstack = 0
 11796                           ;incstack = 0
 11797                           ;OpenTimer0@config stored from wreg
 11798  002FB8  CFE8 F008          	movff	wreg,OpenTimer0@config
 11799                           
 11800                           ; BSR set to: 15
 11801  002FBC  5008               	movf	OpenTimer0@config,w,c
 11802  002FBE  0B7F               	andlw	127
 11803  002FC0  6ED5               	movwf	4053,c	;volatile
 11804                           
 11805                           ; BSR set to: 15
 11806  002FC2  6AD7               	clrf	4055,c	;volatile
 11807                           
 11808                           ; BSR set to: 15
 11809  002FC4  6AD6               	clrf	4054,c	;volatile
 11810                           
 11811                           ; BSR set to: 15
 11812  002FC6  94F2               	bcf	intcon,2,c	;volatile
 11813                           
 11814                           ; BSR set to: 15
 11815  002FC8  AE08               	btfss	OpenTimer0@config,7,c
 11816  002FCA  D002               	goto	l1133
 11817                           
 11818                           ; BSR set to: 15
 11819  002FCC  8AF2               	bsf	intcon,5,c	;volatile
 11820  002FCE  D001               	goto	l1134
 11821  002FD0                     l1133:
 11822                           
 11823                           ; BSR set to: 15
 11824  002FD0  9AF2               	bcf	intcon,5,c	;volatile
 11825  002FD2                     l1134:
 11826                           
 11827                           ; BSR set to: 15
 11828  002FD2  8ED5               	bsf	4053,7,c	;volatile
 11829                           
 11830                           ; BSR set to: 15
 11831  002FD4  0012               	return	
 11832  002FD6                     __end_of_OpenTimer0:
 11833                           	opt stack 0
 11834                           tblptru	equ	0xFF8
 11835                           tblptrh	equ	0xFF7
 11836                           tblptrl	equ	0xFF6
 11837                           tablat	equ	0xFF5
 11838                           prodh	equ	0xFF4
 11839                           prodl	equ	0xFF3
 11840                           intcon	equ	0xFF2
 11841                           postinc0	equ	0xFEE
 11842                           wreg	equ	0xFE8
 11843                           indf1	equ	0xFE7
 11844                           fsr1h	equ	0xFE2
 11845                           fsr1l	equ	0xFE1
 11846                           indf2	equ	0xFDF
 11847                           postinc2	equ	0xFDE
 11848                           postdec2	equ	0xFDD
 11849                           plusw2	equ	0xFDB
 11850                           fsr2h	equ	0xFDA
 11851                           fsr2l	equ	0xFD9
 11852                           status	equ	0xFD8
 11853                           
 11854 ;; *************** function _init_app_ram *****************
 11855 ;; Defined at:
 11856 ;;		line 409 in file "../main.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  i               1    0        unsigned char 
 11861 ;; Return value:  Size  Location     Type
 11862 ;;		None               void
 11863 ;; Registers used:
 11864 ;;		None
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/E
 11867 ;;		On exit  : F/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11874 ;;Total ram usage:        0 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:    2
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_main
 11881 ;;		_init
 11882 ;;		_vscp_restoreDefaults
 11883 ;; This function uses a non-reentrant model
 11884 ;;
 11885                           
 11886                           	psect	text72
 11887  0030E8                     __ptext72:
 11888                           	opt stack 0
 11889  0030E8                     _init_app_ram:
 11890                           	opt stack 25
 11891                           
 11892                           ;main.c: 410: uint8_t i;
 11893                           ;main.c: 412: measurement_clock = 0;
 11894                           
 11895                           ; BSR set to: 15
 11896                           ;incstack = 0
 11897                           ;incstack = 0
 11898  0030E8  0100               	movlb	0	; () banked
 11899  0030EA  6B90               	clrf	_measurement_clock& (0+255),b	;volatile
 11900  0030EC  6B91               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 11901  0030EE  6B92               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 11902  0030F0  6B93               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 11903                           
 11904                           ;main.c: 414: seconds = 0;
 11905  0030F2  6B9A               	clrf	_seconds& (0+255),b
 11906                           
 11907                           ;main.c: 415: minutes = 0;
 11908  0030F4  6B99               	clrf	_minutes& (0+255),b
 11909                           
 11910                           ;main.c: 416: hours = 0;
 11911  0030F6  6B98               	clrf	_hours& (0+255),b
 11912                           
 11913                           ; BSR set to: 0
 11914  0030F8  0012               	return	
 11915  0030FA                     __end_of_init_app_ram:
 11916                           	opt stack 0
 11917                           tblptru	equ	0xFF8
 11918                           tblptrh	equ	0xFF7
 11919                           tblptrl	equ	0xFF6
 11920                           tablat	equ	0xFF5
 11921                           prodh	equ	0xFF4
 11922                           prodl	equ	0xFF3
 11923                           intcon	equ	0xFF2
 11924                           postinc0	equ	0xFEE
 11925                           wreg	equ	0xFE8
 11926                           indf1	equ	0xFE7
 11927                           fsr1h	equ	0xFE2
 11928                           fsr1l	equ	0xFE1
 11929                           indf2	equ	0xFDF
 11930                           postinc2	equ	0xFDE
 11931                           postdec2	equ	0xFDD
 11932                           plusw2	equ	0xFDB
 11933                           fsr2h	equ	0xFDA
 11934                           fsr2l	equ	0xFD9
 11935                           status	equ	0xFD8
 11936                           
 11937 ;; *************** function _WriteTimer0 *****************
 11938 ;; Defined at:
 11939 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  timer0          2    7[COMRAM] unsigned int 
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;  timer           2    9[COMRAM] struct Timers
 11944 ;; Return value:  Size  Location     Type
 11945 ;;		None               void
 11946 ;; Registers used:
 11947 ;;		None
 11948 ;; Tracked objects:
 11949 ;;		On entry : F/F
 11950 ;;		On exit  : F/F
 11951 ;;		Unchanged: E/0
 11952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11956 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11957 ;;Total ram usage:        4 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; Hardware stack levels required when called:    2
 11960 ;; This function calls:
 11961 ;;		Nothing
 11962 ;; This function is called by:
 11963 ;;		_init
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           	psect	text73
 11968  0030FA                     __ptext73:
 11969                           	opt stack 0
 11970  0030FA                     _WriteTimer0:
 11971                           	opt stack 27
 11972                           
 11973                           ; BSR set to: 15
 11974                           
 11975                           ; BSR set to: 0
 11976                           ;incstack = 0
 11977                           ;incstack = 0
 11978  0030FA  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 11979  0030FE  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 11980  003102  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 11981  003106  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 11982                           
 11983                           ; BSR set to: 15
 11984  00310A  0012               	return	
 11985  00310C                     __end_of_WriteTimer0:
 11986                           	opt stack 0
 11987                           tblptru	equ	0xFF8
 11988                           tblptrh	equ	0xFF7
 11989                           tblptrl	equ	0xFF6
 11990                           tablat	equ	0xFF5
 11991                           prodh	equ	0xFF4
 11992                           prodl	equ	0xFF3
 11993                           intcon	equ	0xFF2
 11994                           postinc0	equ	0xFEE
 11995                           wreg	equ	0xFE8
 11996                           indf1	equ	0xFE7
 11997                           fsr1h	equ	0xFE2
 11998                           fsr1l	equ	0xFE1
 11999                           indf2	equ	0xFDF
 12000                           postinc2	equ	0xFDE
 12001                           postdec2	equ	0xFDD
 12002                           plusw2	equ	0xFDB
 12003                           fsr2h	equ	0xFDA
 12004                           fsr2l	equ	0xFD9
 12005                           status	equ	0xFD8
 12006                           
 12007 ;; *************** function _vscp_readAppReg *****************
 12008 ;; Defined at:
 12009 ;;		line 585 in file "../main.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;  reg             1    wreg     unsigned char 
 12012 ;; Auto vars:     Size  Location     Type
 12013 ;;  reg             1   17[COMRAM] unsigned char 
 12014 ;;  rv              1   16[COMRAM] unsigned char 
 12015 ;; Return value:  Size  Location     Type
 12016 ;;                  1    wreg      unsigned char 
 12017 ;; Registers used:
 12018 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12019 ;; Tracked objects:
 12020 ;;		On entry : F/0
 12021 ;;		On exit  : 0/0
 12022 ;;		Unchanged: 0/0
 12023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12027 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12028 ;;Total ram usage:        2 bytes
 12029 ;; Hardware stack levels used:    1
 12030 ;; Hardware stack levels required when called:    3
 12031 ;; This function calls:
 12032 ;;		_Read_b_eep
 12033 ;;		_readControlReg
 12034 ;; This function is called by:
 12035 ;;		_vscp_readRegister
 12036 ;;		_vscp_handleProtocolEvent
 12037 ;; This function uses a non-reentrant model
 12038 ;;
 12039                           
 12040                           	psect	text74
 12041  002954                     __ptext74:
 12042                           	opt stack 0
 12043  002954                     _vscp_readAppReg:
 12044                           	opt stack 25
 12045                           
 12046                           ; BSR set to: 15
 12047                           ;incstack = 0
 12048                           ;incstack = 0
 12049                           ;vscp_readAppReg@reg stored from wreg
 12050  002954  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12051                           
 12052                           ; BSR set to: 0
 12053                           ;main.c: 586: uint8_t rv;
 12054                           ;main.c: 588: rv = 0x00;
 12055  002958  6A11               	clrf	vscp_readAppReg@rv,c
 12056                           
 12057                           ; BSR set to: 0
 12058                           ;main.c: 591: if ( 0 == vscp_page_select ) {
 12059  00295A  5053               	movf	_vscp_page_select+1,w,c
 12060  00295C  1052               	iorwf	_vscp_page_select,w,c
 12061  00295E  E137               	bnz	l6510
 12062                           
 12063                           ; BSR set to: 0
 12064                           ;main.c: 593: if ( reg == 0x00 ) {
 12065  002960  6612               	tstfsz	vscp_readAppReg@reg,c
 12066  002962  D006               	goto	l6486
 12067                           
 12068                           ; BSR set to: 0
 12069                           ;main.c: 594: rv = Read_b_eep(0x21 + 0);
 12070  002964  6A09               	clrf	?_Read_b_eep+1,c
 12071  002966  0E21               	movlw	33
 12072  002968  6E08               	movwf	?_Read_b_eep,c
 12073  00296A  EC07  F018         	call	_Read_b_eep	;wreg free
 12074  00296E  D03D               	goto	L43
 12075  002970                     l6486:
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;main.c: 597: else if ( reg == 0x01 ) {
 12079  002970  0412               	decf	vscp_readAppReg@reg,w,c
 12080  002972  E106               	bnz	l6490
 12081                           
 12082                           ; BSR set to: 0
 12083                           ;main.c: 598: rv = Read_b_eep(0x21 + 1);
 12084  002974  6A09               	clrf	?_Read_b_eep+1,c
 12085  002976  0E22               	movlw	34
 12086  002978  6E08               	movwf	?_Read_b_eep,c
 12087  00297A  EC07  F018         	call	_Read_b_eep	;wreg free
 12088  00297E  D035               	goto	L43
 12089  002980                     l6490:
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;main.c: 601: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12093  002980  0E04               	movlw	4
 12094  002982  6412               	cpfsgt	vscp_readAppReg@reg,c
 12095  002984  D00C               	goto	l6496
 12096                           
 12097                           ; BSR set to: 0
 12098  002986  0E17               	movlw	23
 12099  002988  6012               	cpfslt	vscp_readAppReg@reg,c
 12100  00298A  D009               	goto	l6496
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;main.c: 602: rv = Read_b_eep(0x21 + 5 + ( reg - 5 ));
 12104  00298C  0E21               	movlw	33
 12105  00298E  2412               	addwf	vscp_readAppReg@reg,w,c
 12106  002990  6E08               	movwf	?_Read_b_eep,c
 12107  002992  6A09               	clrf	?_Read_b_eep+1,c
 12108  002994  0E00               	movlw	0
 12109  002996  2209               	addwfc	?_Read_b_eep+1,f,c
 12110  002998  EC07  F018         	call	_Read_b_eep	;wreg free
 12111  00299C  D026               	goto	L43
 12112  00299E                     l6496:
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;main.c: 606: else if ( reg == 2 ) {
 12116  00299E  5012               	movf	vscp_readAppReg@reg,w,c
 12117  0029A0  0A02               	xorlw	2
 12118  0029A2  E104               	bnz	l6500
 12119                           
 12120                           ; BSR set to: 0
 12121                           ;main.c: 607: rv = readControlReg( 0 );
 12122  0029A4  0E00               	movlw	0
 12123  0029A6  EC52  F012         	call	_readControlReg
 12124  0029AA  D01F               	goto	L43
 12125  0029AC                     l6500:
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;main.c: 610: else if ( reg == 3 ) {
 12129  0029AC  5012               	movf	vscp_readAppReg@reg,w,c
 12130  0029AE  0A03               	xorlw	3
 12131  0029B0  E104               	bnz	l6504
 12132                           
 12133                           ; BSR set to: 0
 12134                           ;main.c: 611: rv = readControlReg( 1 );
 12135  0029B2  0E01               	movlw	1
 12136  0029B4  EC52  F012         	call	_readControlReg
 12137  0029B8  D018               	goto	L43
 12138  0029BA                     l6504:
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;main.c: 614: else if ( reg == 4 ) {
 12142  0029BA  5012               	movf	vscp_readAppReg@reg,w,c
 12143  0029BC  0A04               	xorlw	4
 12144  0029BE  E116               	bnz	l6516
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;main.c: 615: rv = readControlReg( 2 );
 12148  0029C0  0E02               	movlw	2
 12149  0029C2  EC52  F012         	call	_readControlReg
 12150  0029C6  6E11               	movwf	vscp_readAppReg@rv,c
 12151                           
 12152                           ;main.c: 616: rv &= 0x03;
 12153  0029C8  0E03               	movlw	3
 12154  0029CA  1611               	andwf	vscp_readAppReg@rv,f,c
 12155  0029CC  D00F               	goto	l6516
 12156  0029CE                     l6510:
 12157                           
 12158                           ; BSR set to: 0
 12159                           ;main.c: 620: else if ( 1 == vscp_page_select ) {
 12160  0029CE  0452               	decf	_vscp_page_select,w,c
 12161  0029D0  1053               	iorwf	_vscp_page_select+1,w,c
 12162  0029D2  E10C               	bnz	l6516
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;main.c: 623: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12166                           ;main.c: 624: ( 8 * 8 ) ) ) ) {
 12167  0029D4  0E41               	movlw	65
 12168  0029D6  6012               	cpfslt	vscp_readAppReg@reg,c
 12169  0029D8  D009               	goto	l6516
 12170                           
 12171                           ; BSR set to: 0
 12172                           ;main.c: 625: rv = Read_b_eep(0x21 + 23 + ( reg - 0 ));
 12173  0029DA  0E38               	movlw	56
 12174  0029DC  2412               	addwf	vscp_readAppReg@reg,w,c
 12175  0029DE  6E08               	movwf	?_Read_b_eep,c
 12176  0029E0  6A09               	clrf	?_Read_b_eep+1,c
 12177  0029E2  0E00               	movlw	0
 12178  0029E4  2209               	addwfc	?_Read_b_eep+1,f,c
 12179  0029E6  EC07  F018         	call	_Read_b_eep	;wreg free
 12180  0029EA                     L43:
 12181  0029EA  6E11               	movwf	vscp_readAppReg@rv,c
 12182  0029EC                     l6516:
 12183                           
 12184                           ;main.c: 627: }
 12185                           ;main.c: 629: }
 12186                           ;main.c: 631: return rv;
 12187  0029EC  5011               	movf	vscp_readAppReg@rv,w,c
 12188  0029EE  0012               	return	
 12189  0029F0                     __end_of_vscp_readAppReg:
 12190                           	opt stack 0
 12191                           tblptru	equ	0xFF8
 12192                           tblptrh	equ	0xFF7
 12193                           tblptrl	equ	0xFF6
 12194                           tablat	equ	0xFF5
 12195                           prodh	equ	0xFF4
 12196                           prodl	equ	0xFF3
 12197                           intcon	equ	0xFF2
 12198                           postinc0	equ	0xFEE
 12199                           wreg	equ	0xFE8
 12200                           indf1	equ	0xFE7
 12201                           fsr1h	equ	0xFE2
 12202                           fsr1l	equ	0xFE1
 12203                           indf2	equ	0xFDF
 12204                           postinc2	equ	0xFDE
 12205                           postdec2	equ	0xFDD
 12206                           plusw2	equ	0xFDB
 12207                           fsr2h	equ	0xFDA
 12208                           fsr2l	equ	0xFD9
 12209                           status	equ	0xFD8
 12210                           
 12211 ;; *************** function _readControlReg *****************
 12212 ;; Defined at:
 12213 ;;		line 750 in file "../main.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;  ctrlreg         1    wreg     unsigned char 
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 12218 ;;  rv              1   15[COMRAM] unsigned char 
 12219 ;; Return value:  Size  Location     Type
 12220 ;;                  1    wreg      unsigned char 
 12221 ;; Registers used:
 12222 ;;		wreg, status,2, status,0, prodl, prodh
 12223 ;; Tracked objects:
 12224 ;;		On entry : 0/0
 12225 ;;		On exit  : 0/0
 12226 ;;		Unchanged: 0/0
 12227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12230 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12231 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12232 ;;Total ram usage:        9 bytes
 12233 ;; Hardware stack levels used:    1
 12234 ;; Hardware stack levels required when called:    2
 12235 ;; This function calls:
 12236 ;;		Nothing
 12237 ;; This function is called by:
 12238 ;;		_vscp_readAppReg
 12239 ;;		_writeControlReg
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           	psect	text75
 12244  0024A4                     __ptext75:
 12245                           	opt stack 0
 12246  0024A4                     _readControlReg:
 12247                           	opt stack 24
 12248                           
 12249                           ;incstack = 0
 12250                           ;incstack = 0
 12251                           ;readControlReg@ctrlreg stored from wreg
 12252  0024A4  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 12253                           
 12254                           ;main.c: 751: uint8_t rv = 0;
 12255  0024A8  6A10               	clrf	readControlReg@rv,c
 12256                           
 12257                           ;main.c: 753: switch ( ctrlreg ) {
 12258  0024AA  D060               	goto	l4816
 12259  0024AC                     l4808:
 12260                           
 12261                           ;main.c: 756: rv = ( PORTCbits.RC7 << 0 ) +
 12262                           ;main.c: 757: ( PORTCbits.RC6 << 1 ) +
 12263                           ;main.c: 758: ( PORTCbits.RC3 << 2 ) +
 12264                           ;main.c: 759: ( PORTCbits.RC4 << 3 ) +
 12265                           ;main.c: 760: ( PORTCbits.RC5 << 4 ) +
 12266                           ;main.c: 761: ( PORTAbits.RA0 << 5 ) +
 12267                           ;main.c: 762: ( PORTAbits.RA1 << 6 ) +
 12268                           ;main.c: 763: ( PORTAbits.RA2 << 7 );
 12269  0024AC  3482               	rlcf	3970,w,c	;volatile
 12270  0024AE  36E8               	rlcf	wreg,f,c
 12271  0024B0  0B01               	andlw	1
 12272  0024B2  6E08               	movwf	??_readControlReg& (0+255),c
 12273  0024B4  3882               	swapf	3970,w,c	;volatile
 12274  0024B6  32E8               	rrcf	wreg,f,c
 12275  0024B8  32E8               	rrcf	wreg,f,c
 12276  0024BA  0B01               	andlw	1
 12277  0024BC  0D02               	mullw	2
 12278  0024BE  CFF3 F009          	movff	prodl,??_readControlReg+1
 12279  0024C2  3082               	rrcf	3970,w,c	;volatile
 12280  0024C4  32E8               	rrcf	wreg,f,c
 12281  0024C6  32E8               	rrcf	wreg,f,c
 12282  0024C8  0B01               	andlw	1
 12283  0024CA  0D04               	mullw	4
 12284  0024CC  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12285  0024D0  3882               	swapf	3970,w,c	;volatile
 12286  0024D2  0B01               	andlw	1
 12287  0024D4  0D08               	mullw	8
 12288  0024D6  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12289  0024DA  3882               	swapf	3970,w,c	;volatile
 12290  0024DC  32E8               	rrcf	wreg,f,c
 12291  0024DE  0B01               	andlw	1
 12292  0024E0  0D10               	mullw	16
 12293  0024E2  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12294  0024E6  5080               	movf	3968,w,c	;volatile
 12295  0024E8  0B01               	andlw	1
 12296  0024EA  0D20               	mullw	32
 12297  0024EC  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12298  0024F0  3080               	rrcf	3968,w,c	;volatile
 12299  0024F2  0B01               	andlw	1
 12300  0024F4  0D40               	mullw	64
 12301  0024F6  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12302  0024FA  3080               	rrcf	3968,w,c	;volatile
 12303  0024FC  32E8               	rrcf	wreg,f,c
 12304  0024FE  0B01               	andlw	1
 12305  002500  0D80               	mullw	128
 12306  002502  50F3               	movf	prodl,w,c
 12307  002504  240E               	addwf	??_readControlReg+6,w,c
 12308  002506  240D               	addwf	??_readControlReg+5,w,c
 12309  002508  D01F               	goto	L44
 12310  00250A                     l4810:
 12311                           
 12312                           ;main.c: 767: rv = ( PORTAbits.RA3 << 0 ) +
 12313                           ;main.c: 768: ( PORTAbits.RA5 << 1 ) +
 12314                           ;main.c: 771: ( PORTBbits.RB4 << 4 ) +
 12315                           ;main.c: 772: ( PORTCbits.RC2 << 5 ) +
 12316                           ;main.c: 773: ( PORTBbits.RB1 << 6 ) +
 12317                           ;main.c: 774: ( PORTBbits.RB0 << 7 );
 12318  00250A  3080               	rrcf	3968,w,c	;volatile
 12319  00250C  32E8               	rrcf	wreg,f,c
 12320  00250E  32E8               	rrcf	wreg,f,c
 12321  002510  0B01               	andlw	1
 12322  002512  6E08               	movwf	??_readControlReg& (0+255),c
 12323  002514  3880               	swapf	3968,w,c	;volatile
 12324  002516  32E8               	rrcf	wreg,f,c
 12325  002518  0B01               	andlw	1
 12326  00251A  0D02               	mullw	2
 12327  00251C  CFF3 F009          	movff	prodl,??_readControlReg+1
 12328  002520  3881               	swapf	3969,w,c	;volatile
 12329  002522  0B01               	andlw	1
 12330  002524  0D10               	mullw	16
 12331  002526  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12332  00252A  3082               	rrcf	3970,w,c	;volatile
 12333  00252C  32E8               	rrcf	wreg,f,c
 12334  00252E  0B01               	andlw	1
 12335  002530  0D20               	mullw	32
 12336  002532  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12337  002536  3081               	rrcf	3969,w,c	;volatile
 12338  002538  0B01               	andlw	1
 12339  00253A  0D40               	mullw	64
 12340  00253C  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12341  002540  5081               	movf	3969,w,c	;volatile
 12342  002542  0B01               	andlw	1
 12343  002544  0D80               	mullw	128
 12344  002546  50F3               	movf	prodl,w,c
 12345  002548                     L44:
 12346  002548  240C               	addwf	??_readControlReg+4,w,c
 12347  00254A  240B               	addwf	??_readControlReg+3,w,c
 12348  00254C  240A               	addwf	??_readControlReg+2,w,c
 12349  00254E  2409               	addwf	??_readControlReg+1,w,c
 12350  002550  D00A               	goto	L45
 12351  002552                     l4812:
 12352                           
 12353                           ;main.c: 778: rv = ( PORTBbits.RB6 << 0 ) +
 12354                           ;main.c: 779: ( PORTBbits.RB5 << 1 );
 12355  002552  3881               	swapf	3969,w,c	;volatile
 12356  002554  32E8               	rrcf	wreg,f,c
 12357  002556  32E8               	rrcf	wreg,f,c
 12358  002558  0B01               	andlw	1
 12359  00255A  6E08               	movwf	??_readControlReg& (0+255),c
 12360  00255C  3881               	swapf	3969,w,c	;volatile
 12361  00255E  32E8               	rrcf	wreg,f,c
 12362  002560  0B01               	andlw	1
 12363  002562  0D02               	mullw	2
 12364  002564  50F3               	movf	prodl,w,c
 12365  002566                     L45:
 12366  002566  2408               	addwf	??_readControlReg,w,c
 12367  002568  6E10               	movwf	readControlReg@rv,c
 12368                           
 12369                           ;main.c: 780: break;
 12370  00256A  D006               	goto	l4818
 12371  00256C                     l4816:
 12372  00256C  500F               	movf	readControlReg@ctrlreg,w,c
 12373                           
 12374                           ; Switch size 1, requested type "speed"
 12375                           ; Number of cases is 3, Range of values is 0 to 2
 12376                           ; switch strategies available:
 12377                           ; Name         Instructions Cycles
 12378                           ; simple_byte           10     6 (average)
 12379                           ;	Chosen strategy is simple_byte
 12380  00256E  E09E               	bz	l4808
 12381  002570  0A01               	xorlw	1	; case 1
 12382  002572  E0CB               	bz	l4810
 12383  002574  0A03               	xorlw	3	; case 2
 12384  002576  E0ED               	bz	l4812
 12385  002578                     l4818:
 12386                           
 12387                           ;main.c: 783: return rv;
 12388  002578  5010               	movf	readControlReg@rv,w,c
 12389  00257A  0012               	return	
 12390  00257C                     __end_of_readControlReg:
 12391                           	opt stack 0
 12392                           tblptru	equ	0xFF8
 12393                           tblptrh	equ	0xFF7
 12394                           tblptrl	equ	0xFF6
 12395                           tablat	equ	0xFF5
 12396                           prodh	equ	0xFF4
 12397                           prodl	equ	0xFF3
 12398                           intcon	equ	0xFF2
 12399                           postinc0	equ	0xFEE
 12400                           wreg	equ	0xFE8
 12401                           indf1	equ	0xFE7
 12402                           fsr1h	equ	0xFE2
 12403                           fsr1l	equ	0xFE1
 12404                           indf2	equ	0xFDF
 12405                           postinc2	equ	0xFDE
 12406                           postdec2	equ	0xFDD
 12407                           plusw2	equ	0xFDB
 12408                           fsr2h	equ	0xFDA
 12409                           fsr2l	equ	0xFD9
 12410                           status	equ	0xFD8
 12411                           
 12412 ;; *************** function _interrupt_at_low_vector *****************
 12413 ;; Defined at:
 12414 ;;		line 111 in file "../main.c"
 12415 ;; Parameters:    Size  Location     Type
 12416 ;;		None
 12417 ;; Auto vars:     Size  Location     Type
 12418 ;;		None
 12419 ;; Return value:  Size  Location     Type
 12420 ;;		None               void
 12421 ;; Registers used:
 12422 ;;		wreg, status,2, status,0, cstack
 12423 ;; Tracked objects:
 12424 ;;		On entry : 0/0
 12425 ;;		On exit  : 0/0
 12426 ;;		Unchanged: 0/0
 12427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12430 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12431 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12432 ;;Total ram usage:        3 bytes
 12433 ;; Hardware stack levels used:    1
 12434 ;; Hardware stack levels required when called:    1
 12435 ;; This function calls:
 12436 ;;		i1_WriteTimer0
 12437 ;; This function is called by:
 12438 ;;		Interrupt level 1
 12439 ;; This function uses a non-reentrant model
 12440 ;;
 12441                           
 12442                           	psect	intcodelo
 12443  000818                     __pintcodelo:
 12444                           	opt stack 0
 12445  000818                     _interrupt_at_low_vector:
 12446                           	opt stack 22
 12447                           
 12448                           ;incstack = 0
 12449  000818  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12450  00081C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12451  000820  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12452  000824                     
 12453                           ;main.c: 113: if ( INTCONbits.TMR0IF ) {
 12454  000824  A4F2               	btfss	intcon,2,c	;volatile
 12455  000826  D001               	goto	i1u548_21
 12456  000828  D001               	goto	i1u548_20
 12457  00082A                     i1u548_21:
 12458  00082A  D03E               	goto	i1l143
 12459  00082C                     i1u548_20:
 12460  00082C                     
 12461                           ;main.c: 116: WriteTimer0(0xfb1d);
 12462  00082C  0EFB               	movlw	251
 12463  00082E  6E02               	movwf	?i1_WriteTimer0+1,c
 12464  000830  0E1D               	movlw	29
 12465  000832  6E01               	movwf	?i1_WriteTimer0,c
 12466  000834  EC86  F018         	call	i1_WriteTimer0	;wreg free
 12467  000838                     
 12468                           ;main.c: 118: vscp_timer++;
 12469  000838  0100               	movlb	0	; () banked
 12470  00083A  4B96               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12471  00083C  2B97               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12472  00083E                     
 12473                           ; BSR set to: 0
 12474                           ;main.c: 119: vscp_configtimer++;
 12475  00083E  4B94               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12476  000840  2B95               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12477  000842                     
 12478                           ; BSR set to: 0
 12479                           ;main.c: 121: sendTimer++;
 12480  000842  0E01               	movlw	1
 12481  000844  2790               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12482  000846  0E00               	movlw	0
 12483  000848  2391               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12484  00084A  0E00               	movlw	0
 12485  00084C  2392               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12486  00084E  0E00               	movlw	0
 12487  000850  2393               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12488  000852                     
 12489                           ; BSR set to: 0
 12490                           ;main.c: 124: if ( PORTCbits.RC0 ) {
 12491  000852  A082               	btfss	3970,0,c	;volatile
 12492  000854  D001               	goto	i1u549_21
 12493  000856  D001               	goto	i1u549_20
 12494  000858                     i1u549_21:
 12495  000858  D002               	goto	i1l5694
 12496  00085A                     i1u549_20:
 12497  00085A                     
 12498                           ; BSR set to: 0
 12499                           ;main.c: 125: vscp_initbtncnt = 0;
 12500  00085A  6B9D               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12501                           
 12502                           ;main.c: 126: } else {
 12503  00085C  D001               	goto	i1l135
 12504  00085E                     i1l5694:
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;main.c: 128: vscp_initbtncnt++;
 12508  00085E  2B9D               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12509  000860                     i1l135:
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;main.c: 129: }
 12513                           ;main.c: 132: vscp_statuscnt++;
 12514  000860  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 12515  000862                     
 12516                           ; BSR set to: 0
 12517                           ;main.c: 133: if ( ( 0x02 == vscp_initledfunc ) &&
 12518                           ;main.c: 134: ( vscp_statuscnt > 100 ) ) {
 12519  000862  5056               	movf	_vscp_initledfunc,w,c
 12520  000864  0A02               	xorlw	2
 12521  000866  A4D8               	btfss	status,2,c
 12522  000868  D001               	goto	i1u550_21
 12523  00086A  D001               	goto	i1u550_20
 12524  00086C                     i1u550_21:
 12525  00086C  D00E               	goto	i1l5704
 12526  00086E                     i1u550_20:
 12527  00086E                     
 12528                           ; BSR set to: 0
 12529  00086E  0E64               	movlw	100
 12530  000870  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 12531  000872  D001               	goto	i1u551_21
 12532  000874  D001               	goto	i1u551_20
 12533  000876                     i1u551_21:
 12534  000876  D009               	goto	i1l5704
 12535  000878                     i1u551_20:
 12536  000878                     
 12537                           ; BSR set to: 0
 12538                           ;main.c: 136: if ( PORTCbits.RC1 ) {
 12539  000878  A282               	btfss	3970,1,c	;volatile
 12540  00087A  D001               	goto	i1u552_21
 12541  00087C  D001               	goto	i1u552_20
 12542  00087E                     i1u552_21:
 12543  00087E  D002               	goto	i1l137
 12544  000880                     i1u552_20:
 12545  000880                     
 12546                           ; BSR set to: 0
 12547                           ;main.c: 137: PORTCbits.RC1 = 0;
 12548  000880  9282               	bcf	3970,1,c	;volatile
 12549                           
 12550                           ;main.c: 138: }
 12551  000882  D001               	goto	i1l138
 12552  000884                     i1l137:
 12553                           
 12554                           ; BSR set to: 0
 12555                           ;main.c: 139: else {
 12556                           ;main.c: 140: PORTCbits.RC1 = 1;
 12557  000884  8282               	bsf	3970,1,c	;volatile
 12558  000886                     i1l138:
 12559                           
 12560                           ; BSR set to: 0
 12561                           ;main.c: 141: }
 12562                           ;main.c: 143: vscp_statuscnt = 0;
 12563  000886  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12564                           
 12565                           ;main.c: 145: }
 12566  000888  D00E               	goto	i1l139
 12567  00088A                     i1l5704:
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;main.c: 146: else if (0x01 == vscp_initledfunc) {
 12571  00088A  0456               	decf	_vscp_initledfunc,w,c
 12572  00088C  A4D8               	btfss	status,2,c
 12573  00088E  D001               	goto	i1u553_21
 12574  000890  D001               	goto	i1u553_20
 12575  000892                     i1u553_21:
 12576  000892  D003               	goto	i1l140
 12577  000894                     i1u553_20:
 12578  000894                     
 12579                           ; BSR set to: 0
 12580                           ;main.c: 147: PORTCbits.RC1 = 1;
 12581  000894  8282               	bsf	3970,1,c	;volatile
 12582                           
 12583                           ;main.c: 148: vscp_statuscnt = 0;
 12584  000896  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12585                           
 12586                           ;main.c: 149: }
 12587  000898  D006               	goto	i1l139
 12588  00089A                     i1l140:
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;main.c: 150: else if (0x00 == vscp_initledfunc) {
 12592  00089A  6656               	tstfsz	_vscp_initledfunc,c
 12593  00089C  D001               	goto	i1u554_21
 12594  00089E  D001               	goto	i1u554_20
 12595  0008A0                     i1u554_21:
 12596  0008A0  D002               	goto	i1l139
 12597  0008A2                     i1u554_20:
 12598  0008A2                     
 12599                           ; BSR set to: 0
 12600                           ;main.c: 151: PORTCbits.RC1 = 0;
 12601  0008A2  9282               	bcf	3970,1,c	;volatile
 12602                           
 12603                           ;main.c: 152: vscp_statuscnt = 0;
 12604  0008A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12605  0008A6                     i1l139:
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;main.c: 153: }
 12609                           ;main.c: 155: INTCONbits.TMR0IF = 0;
 12610  0008A6  94F2               	bcf	intcon,2,c	;volatile
 12611  0008A8                     i1l143:
 12612  0008A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 12613  0008AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 12614  0008B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 12615  0008B4  0010               	retfie	
 12616  0008B6                     __end_of_interrupt_at_low_vector:
 12617                           	opt stack 0
 12618                           tblptru	equ	0xFF8
 12619                           tblptrh	equ	0xFF7
 12620                           tblptrl	equ	0xFF6
 12621                           tablat	equ	0xFF5
 12622                           prodh	equ	0xFF4
 12623                           prodl	equ	0xFF3
 12624                           intcon	equ	0xFF2
 12625                           postinc0	equ	0xFEE
 12626                           wreg	equ	0xFE8
 12627                           indf1	equ	0xFE7
 12628                           fsr1h	equ	0xFE2
 12629                           fsr1l	equ	0xFE1
 12630                           bsr	equ	0xFE0
 12631                           indf2	equ	0xFDF
 12632                           postinc2	equ	0xFDE
 12633                           postdec2	equ	0xFDD
 12634                           plusw2	equ	0xFDB
 12635                           fsr2h	equ	0xFDA
 12636                           fsr2l	equ	0xFD9
 12637                           status	equ	0xFD8
 12638                           
 12639 ;; *************** function i1_WriteTimer0 *****************
 12640 ;; Defined at:
 12641 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12642 ;; Parameters:    Size  Location     Type
 12643 ;;  timer0          2    0[COMRAM] unsigned int 
 12644 ;; Auto vars:     Size  Location     Type
 12645 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 12646 ;; Return value:  Size  Location     Type
 12647 ;;		None               void
 12648 ;; Registers used:
 12649 ;;		None
 12650 ;; Tracked objects:
 12651 ;;		On entry : 0/0
 12652 ;;		On exit  : 0/0
 12653 ;;		Unchanged: 0/0
 12654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12658 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12659 ;;Total ram usage:        4 bytes
 12660 ;; Hardware stack levels used:    1
 12661 ;; This function calls:
 12662 ;;		Nothing
 12663 ;; This function is called by:
 12664 ;;		_interrupt_at_low_vector
 12665 ;; This function uses a non-reentrant model
 12666 ;;
 12667                           
 12668                           	psect	text77
 12669  00310C                     __ptext77:
 12670                           	opt stack 0
 12671  00310C                     i1_WriteTimer0:
 12672                           	opt stack 22
 12673                           
 12674                           ;incstack = 0
 12675                           ;incstack = 0
 12676  00310C  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 12677  003110  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 12678  003114  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 12679  003118  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 12680  00311C  0012               	return	
 12681  00311E                     __end_ofi1_WriteTimer0:
 12682                           	opt stack 0
 12683                           tblptru	equ	0xFF8
 12684                           tblptrh	equ	0xFF7
 12685                           tblptrl	equ	0xFF6
 12686                           tablat	equ	0xFF5
 12687                           prodh	equ	0xFF4
 12688                           prodl	equ	0xFF3
 12689                           intcon	equ	0xFF2
 12690                           postinc0	equ	0xFEE
 12691                           wreg	equ	0xFE8
 12692                           indf1	equ	0xFE7
 12693                           fsr1h	equ	0xFE2
 12694                           fsr1l	equ	0xFE1
 12695                           bsr	equ	0xFE0
 12696                           indf2	equ	0xFDF
 12697                           postinc2	equ	0xFDE
 12698                           postdec2	equ	0xFDD
 12699                           plusw2	equ	0xFDB
 12700                           fsr2h	equ	0xFDA
 12701                           fsr2l	equ	0xFD9
 12702                           status	equ	0xFD8
 12703                           tblptru	equ	0xFF8
 12704                           tblptrh	equ	0xFF7
 12705                           tblptrl	equ	0xFF6
 12706                           tablat	equ	0xFF5
 12707                           prodh	equ	0xFF4
 12708                           prodl	equ	0xFF3
 12709                           intcon	equ	0xFF2
 12710                           postinc0	equ	0xFEE
 12711                           wreg	equ	0xFE8
 12712                           indf1	equ	0xFE7
 12713                           fsr1h	equ	0xFE2
 12714                           fsr1l	equ	0xFE1
 12715                           bsr	equ	0xFE0
 12716                           indf2	equ	0xFDF
 12717                           postinc2	equ	0xFDE
 12718                           postdec2	equ	0xFDD
 12719                           plusw2	equ	0xFDB
 12720                           fsr2h	equ	0xFDA
 12721                           fsr2l	equ	0xFD9
 12722                           status	equ	0xFD8
 12723                           
 12724                           	psect	rparam
 12725  0000                     tblptru	equ	0xFF8
 12726                           tblptrh	equ	0xFF7
 12727                           tblptrl	equ	0xFF6
 12728                           tablat	equ	0xFF5
 12729                           prodh	equ	0xFF4
 12730                           prodl	equ	0xFF3
 12731                           intcon	equ	0xFF2
 12732                           postinc0	equ	0xFEE
 12733                           wreg	equ	0xFE8
 12734                           indf1	equ	0xFE7
 12735                           fsr1h	equ	0xFE2
 12736                           fsr1l	equ	0xFE1
 12737                           bsr	equ	0xFE0
 12738                           indf2	equ	0xFDF
 12739                           postinc2	equ	0xFDE
 12740                           postdec2	equ	0xFDD
 12741                           plusw2	equ	0xFDB
 12742                           fsr2h	equ	0xFDA
 12743                           fsr2l	equ	0xFD9
 12744                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     48      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   44125
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2432
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                15    15      0   12274
                                             22 BANK0     15    15      0
                         _Read_b_eep
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    2536
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   19324
                                             20 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    3440
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1914
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     316
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     316
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1371
                                             20 COMRAM     3     2      1
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _Read_b_eep (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1998
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1427
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     270
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      62
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     224
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     286
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4716
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     398
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      62
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3      90
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     478
                                             16 COMRAM     2     2      0
                         _Read_b_eep
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Read_b_eep
   _writeControlReg
     _Read_b_eep (ARG)
     _readControlReg (ARG)
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
       _readControlReg
     _vscp_writeAppReg
       _Read_b_eep
       _writeControlReg
         _Read_b_eep (ARG)
         _readControlReg (ARG)
       _Busy_eep
       _Write_b_eep
       _vscp_readAppReg (ARG)
         _Read_b_eep
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Read_b_eep
         _writeControlReg
           _Read_b_eep (ARG)
           _readControlReg (ARG)
         _Busy_eep
         _Write_b_eep
         _vscp_readAppReg (ARG)
           _Read_b_eep
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
     ___lbmod
   _doDM
     _Read_b_eep
     _actionSet
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClr
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionSetAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClrAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      5F       5       59.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B7       6        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Nov 17 17:44:04 2015

                __end_of_vscp_readAppReg 29F0                    __end_of_sendVSCPFrame 2954  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1BAE  
                                    l320 269A                                      l160 2336  
                                    l321 269E                                      l330 26BA  
                                    l322 26A2                                      l331 26BE  
                                    l323 26A6                                      l315 268A  
                                    l147 22D4                                      l332 26C2  
                                    l324 26AA                                      l156 231C  
                                    l333 26C6                                      l325 26AE  
                                    l317 268E                                      l318 2692  
                                    l350 25D6                                      l342 25BA  
                                    l319 2696                                      l351 25DA  
                                    l328 26B2                                      l360 25F6  
                                    l352 25DE                                      l344 25BE  
                                    l329 26B6                                      l345 25C2  
                     vscp_readStdReg@idx 0019                                      l346 25C6  
                                    l179 279C                                      l355 25E2  
                                    l347 25CA                                      l291 15C4  
                                    l356 25E6                                      l348 25CE  
                                    l357 25EA                                      l349 25D2  
                                    l293 15DE                                      l358 25EE  
                                    l359 25F2                                      l718 2AEE  
                                    l670 188A                                      l646 1E04  
                                    l680 18D8                                      l672 1898  
                                    l648 1E22                                      l833 2C24  
                                    l690 1968                                      l682 18E8  
                                    l674 18A8                                      l691 198C  
                                    l659 1840                                      l676 18B8  
                                    l669 18FA                                      l678 18C8  
                     vscp_readStdReg@reg 001C                                      l856 288A  
                                    l848 289C                                      l857 286A  
                                    l849 2828                                      l891 2D8A  
                                    l980 249E           __size_of_vscp_handleProbeState 00BA  
                         getVSCPFrame@id 0028                     __end_of_actionClrAll 2D36  
          __end_of_vscp_handleProbeState 28A0                    ?_vscp_restoreDefaults 0001  
                   __size_of_WriteTimer0 0012                     __size_of_Write_b_eep 003A  
                                    wreg 000FE8                     __end_of_actionSetAll 2D66  
            ?_doApplicationOneSecondWork 0001                                     l1014 10DC  
                                   l1040 12C2                                     l1133 2FD0  
                                   l1117 2CBE                                     l1134 2FD2  
                                   l1038 126C                                     l1039 1280  
                                   l1049 12FE                                     l1088 3162  
                                   l5400 1F32                                     l5312 19BA  
                                   l5320 19D4                                     l5304 198E  
                                   l5224 186E                                     l5208 182E  
                                   l5232 1878                                     l5218 1858  
                                   l7010 2422                                     l7002 2404  
                    vscp_readStdReg@code 0011                                     l5084 2B10  
                                   l7012 2426                                     l5326 19EA  
                                   l7014 243C                                     l5096 2E94  
                                   l7112 230C                                     l7104 22FA  
                                   l4810 250A                                     l5338 3032  
                                   l5370 2A88                                     l7034 2484  
                                   l7026 2470                                     l7114 2310  
                                   l7130 2352                                     l4812 2552  
                                   l6500 29AC                                     l5380 2ABA  
                                   l5372 2A92                                     l5276 190E  
                                   l7044 24A0                                     l7204 0F80  
                                   l7140 237C                                     l7124 2330  
                                   l7116 2316                                     l7108 2302  
                                   l6510 29CE                                     l5382 2AC4  
                                   l5374 2A9C                                     l5286 192E  
                                   l3918 279E                                     l7302 110C  
              vscp_getManufacturerId@idx 000A                                     l4808 24AC  
                                   l4816 256C                                     l6504 29BA  
                                   l5376 2AA6                                     l5368 2A80  
                                   l4736 2EE4                                     l4744 2EC0  
                                   l7312 116A                                     l7224 0FA6  
                                   l7152 2390                                     l7128 233A  
                                   l4818 2578                                     l5378 2AB0  
                                   l5386 2AD0                                     l3962 1CF0  
                                   l3970 1D36                                     l3954 1BB6  
                                   l6530 2182                                     l7306 1124  
                                   l7170 0F3C                                     l7162 0F2C  
                                   l6516 29EC                                     l3892 2744  
                                   l7316 1180                                     l7332 11B0  
                                   l7164 0F30                                     l6620 266A  
                                   l7156 2398                                     l7084 229A  
                                   l6702 2D96                                     l5902 2842  
                                   l3958 1C6A                                     l7502 137E  
                                   l7430 12B6                                     l7422 12A6  
                                   l7414 1288                                     l7350 1202  
                                   l7334 11B2                                     l7254 100C  
                                   l7238 0FB2                                     l7190 0F78  
                                   l7166 0F34                                     l6454 2BEE  
                                   l6608 2952                                     l3968 1D28  
                                   l5672 2E3A                                     l5664 2E24  
                                   l7440 12C4                                     l7344 11D6  
                                   l7336 11BC                                     l7264 1040  
                                   l7168 0F38                                     l6632 26CA  
                                   l6624 2672                                     l6448 2BE4  
                                   l6490 2980                                     l5826 2F2C  
                                   l5906 2846                                     l6538 21A4  
                                   l7506 1390                                     l7426 12AE  
                                   l7362 1220                                     l7274 1074  
                                   l6650 25AA                                     l6642 259A  
                                   l6458 2BF6                                     l6724 1D9E  
                                   l5908 284A                                     l6564 2222  
                                   l6556 21FE                                     l6548 21DA  
                                   l7532 13FA                                     l7524 13CA  
                                   l7508 1396                                     l7444 12DE  
                                   l7284 10A8                                     l6628 267A  
                                   l6486 2970                                     l6718 1D90  
                                   l6902 1A56                                     l6574 224C  
                                   l6654 25FA                                     l6646 25A2  
                                   l7630 16D6                                     l6496 299E  
                                   l6752 1E24                                     l6736 1DC8  
                                   l6832 2C8E                                     l6920 1A94  
                                   l6912 1A7C                                     l6584 2282  
                                   l7536 1412                                     l7528 13E4  
                                   l7480 132E                                     l7296 10E0  
                                   l6664 2D42                                     l6746 1E08  
                                   l5882 2806                                     l5938 288E  
                                   l6906 1A66                                     l7554 146A  
                                   l7546 143C                                     l7490 1352  
                                   l7466 1306                                     l7394 1260  
                                   l7378 1240                                     l7298 10FE  
                                   l7642 1784                                     l7634 1710  
                                   l7618 15F8                                     l7650 17FC  
                                   l5884 280C                                     l5868 27E8  
                                   l6932 1AB6                                     l6924 1A9E  
                                   l6916 1A88                                     l7580 14F0  
                                   l6758 1E52                                     l6766 1E70  
                                   l7558 148E                                     l6678 2D12  
                                   l7638 174A                                     l6776 1E94  
                                   l6936 1AC2                                     l6928 1AAA  
                                   l7648 17BE                                     l6794 2078  
                                   l6778 1E96                                     l6962 1B9A  
                                   l6946 1B24                                     l6890 1A32  
                                   l6882 1A1E                                     l6956 1B84  
                                   l6868 304E                                     l7596 1560  
                                   l6894 1A3E                                     l6886 1A28  
                                   l6966 1BAA                                     l6878 1A14  
                                   l6990 23C8                                     l6898 1A4A  
                                   l6978 2F72                                     l6996 23E8  
                                   u3125 2CCA                                     u3126 2CCC  
                                   u4400 2B60              __size_of_vscp_getMatrixInfo 0016  
                                   u4405 2B56                           sendCANFrame@id 0037  
                                   u7005 208C                                     u7300 1B1A  
                                   u4575 1836                                     u4905 1F00  
                                   u4577 1838                                     u7305 1B10  
                                   u7330 1B7C                                     u4915 1F4E  
                                   u7335 1B72                                     u4895 1EE0  
                                   u6755 28DC                                     u6985 203C  
                                   u6995 2062                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 1554  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 2286                                     _init 2CD0  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 2152                              _vscp_minute 009E  
                            _vscp_second 00A3                                     prodh 000FF4  
                                   prodl 000FF3                                     start 08B6  
          __size_of_vscp_doOneSecondWork 0050                            __CFG_FOSC$HS2 000000  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0024  
                          __CFG_MCLRE$ON 000000                         _vscp_writeStdReg 239E  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 2B6C              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 0026                                    _B0CON 000E80  
                                  _B1CON 000E90                                    ?_doDM 0001  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_SendInformationEvent 0056  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 2FB8            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 310C  
                                  _EEADR 000F74                          __end_of___lbmod 2E42  
                _vscp_handleDropNickname 2D66                                    _BSEL0 000E7D  
                                  _T0CON 000FD5                                    i1l140 089A  
                                  i1l135 0860                                    i1l143 08A8  
                                  i1l137 0884                                    i1l138 0886  
                                  i1l139 08A6                            __CFG_WDTEN$ON 000000  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                         readControlReg@rv 0010  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 3150               _vscp_readNicknamePermanent 3146  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                             _vscp_getGUID 30D4  
                                  doDM@i 0084                           Read_b_eep@badd 0008  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 3128  
                     vscp_writeAppReg@rv 0016                                    _hours 0098  
              _vscp_getRegisterPagesUsed 3170                   __size_of_vscp_getEvent 002C  
                           _vscp_setGUID 2ED8                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3176                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 2E68  
                   _ECANSetOperationMode 3026                          __initialization 2F40  
                           __end_of_doDM 1808                             __end_of_main 239E  
                           __end_of_init 2D06                        ??_writeControlReg 0012  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 300E  
                _interrupt_at_low_vector 0818                         __end_of_Busy_eep 3168  
                         doDM@class_mask 007B                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 0076  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0F22                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEADRH 000F75  
                                 _EEDATA 000F73                                   _EECON2 000F7E  
                                 _ANCON0 000F5D                                   _ANCON1 000F5C  
                                 _CIOCON 000F70                            doDM@type_mask 007E  
                     vscp_writeStdReg@rv 0015                            ?_init_app_ram 0001  
                                 _MDSEL0 007B96                                   _MDSEL1 007B97  
                        __CFG_BBSIZ$BB2K 000000                                   i1l5700 0878  
                                 i1l5702 0880                                   i1l5704 088A  
                             _OpenTimer0 2FB8                                   i1l5706 0894  
                                 i1l5708 08A2                                   i1l5680 0824  
                                 i1l5690 0852                                   i1l5682 082C  
                                 i1l5692 085A                                   i1l5684 0838  
                                 i1l5694 085E                                   i1l5686 083E  
                                 i1l5696 0862                                   i1l5688 0842  
                                 i1l5698 086E                          _init_app_eeprom 271C  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 2DF0                   writeControlReg@ctrlreg 0013  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1144 007D  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 2DC4  
                                 _doWork 316C                         OpenTimer0@config 0008  
                  __size_of_actionClrAll 0030                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@reg 0017  
             __end_of_vscp_setSegmentCRC 3096                      vscp_writeAppReg@val 0015  
                                 clear_0 2F46                                   clear_1 2F52  
                  __size_of_actionSetAll 0030                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 008A                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 009F                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0008                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                               __accesstop 0060  
                __end_of__initialization 2F58                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                             _actionClrAll 2D06  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 2F5E  
              ??_interrupt_at_low_vector 0005                             _actionSetAll 2D36  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 2F40  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                       __size_of_actionClr 00D0  
                     __size_of_actionSet 00D0                      ?_vscp_writeRegister 0018  
                         ??_sendCANFrame 003E               __end_of_vscp_getFamilyCode 3146  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01F8  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 313C  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0018  
        __size_of_vscp_setManufacturerId 0024                 __end_of_vscp_writeAppReg 2286  
                __size_of_readControlReg 00D8                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 27E6              __end_of_vscp_setControlByte 3080  
               __end_of_vscp_writeStdReg 24A4                       __RegsToCANID@Value 000E  
                          actionClrAll@i 0050                     ??_vscp_writeRegister 0019  
        __end_of_vscp_handleDropNickname 2D96                             _getVSCPFrame 2AF8  
                             __pbssBANK0 0090                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3174                                ?_Busy_eep 0001  
                  vscp_writeRegister@reg 0019                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                            actionSetAll@i 0050  
        __end_of_vscp_getSubMinorVersion 3178                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007687                         WriteTimer0@timer 000A  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000E43  
                                _BRGCON2 000E44                                  _BRGCON3 000E45  
         SendInformationEvent@eventClass 0074                      vscp_writeStdReg@reg 0016  
           __end_of_vscp_doOneSecondWork 2C12                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
        __end_of_interrupt_at_low_vector 08B6                 vscp_readStdReg@code_1117 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 27E6  
                                _RXB0CON 000F60                                  _RXB1CON 000F30  
                                _RXB0FUL 007B07                         __ECANPointBuffer 2A7A  
             __end_of_vscp_getMatrixInfo 306A                                  _TXB0CON 000F20  
                                _TXB1CON 000F10                                  _TXB2CON 000F00  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                     _vscp_goActiveState 2F9A                        __end_of_actionClr 264C  
                      __end_of_actionSet 271C                   __size_of_sendVSCPFrame 00B4  
           __end_of_SendInformationEvent 2BC2             __end_of_vscp_getMajorVersion 317C  
                    __size_of_Read_b_eep 0018                        writeControlReg@rv 0014  
                        _writeControlReg 1BAE                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 30AC                   _vscp_setManufacturerId 2EB4  
                      actionSetAll@param 004F                          _ECANSendMessage 1D3A  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 00A1               __end_of_vscp_getSegmentCRC 315A  
             ??_vscp_handleProtocolEvent 0074                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 3172                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 2E1A                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 30FA  
                     _vscp_sendHeartBeat 2E42                                  __pcinit 2F40  
                         _vscp_deviceURL 0F00                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 2286  
                                __ptext1 316C                                  __ptext2 316E  
                                __ptext3 2BC2                                  __ptext4 2E42  
                                __ptext5 311E                                  __ptext6 3128  
                                __ptext7 3168                                  __ptext8 1554  
                                __ptext9 2D06                           _vscp_getUserID 30C0  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 0010                      ?_vscp_sendHeartBeat 0074  
               ??_vscp_handleSetNickname 000D                                  _minutes 0099  
                                _seconds 009A                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 310C                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 2CD0                        vscp_readAppReg@rv 0011  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 0081  
                   end_of_initialization 2F58             __end_of_vscp_handleHeartbeat 2C96  
               __size_of_vscp_getSubzone 000A                     __end_of_sendCANFrame 2DC4  
              vscp_handleProtocolEvent@i 008E                vscp_handleProtocolEvent@j 008F  
              vscp_handleProtocolEvent@k 0088                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 2E68                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 008A                           _vscp_setUserID 2FD6  
                                postinc0 000FEE                                  postinc2 000FDE  
                       actionClr@dmflags 0001                   __end_of_vscp_deviceURL 0F20  
    __end_of_vscp_writeNicknamePermanent 30AC              _vscp_writeNicknamePermanent 3096  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 28A0  
                 __end_of_vscp_getUserID 30D4             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0077CB                        __end_of_vscp_init 2C56  
                         _vscp_probe_cnt 00A2                                _PORTAbits 000F80  
                              _PORTBbits 000F81                                _PORTCbits 000F82  
                    __end_of_getCANFrame 2EB4                           _readControlReg 24A4  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 009C                         ___lbmod@dividend 0009  
                __end_of_writeControlReg 1D3A                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 01AE                       _vscp_setSegmentCRC 3080  
             vscp_handleProtocolEvent@cb 0086                  __end_of_ECANSendMessage 1E9E  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 0083  
                   __end_of__RegsToCANID 2002                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 2E8E                               _vscp_error 3168  
                   _vscp_doOneSecondWork 2BC2                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0096                   __end_of_vscp_setUserID 2FF2  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F                          ?_vscp_getUserID 0001  
                    actionSetAll@dmflags 0001                           __end_of_doWork 316E  
           __end_of_vscp_getMinorVersion 317A                              _WriteTimer0 30FA  
                 __end_of_readControlReg 257C                     _SendInformationEvent 2B6C  
                   _vscp_getMajorVersion 317A                              _Write_b_eep 2C96  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                        ?_vscp_writeAppReg 0015  
                    start_initialization 2F40          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 0016                        ?_vscp_writeStdReg 0010  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0011                       _vscp_getFamilyCode 313C  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 3132  
                       doDM@class_filter 0079                       __end_of_Read_b_eep 3026  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 303E  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 0085  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1554  
                              _doDM$2000 0081                                _doDM$2001 0082  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 0012                                _doDM$1998 007F  
                              _doDM$1999 0080                 ?_vscp_handleDropNickname 0001  
                      ??_vscp_getSubzone 000A                 __end_of__ECANPointBuffer 2AF8  
                      __CANIDToRegs@type 000E                              _getCANFrame 2E8E  
                               ??_doWork 0008                       _vscp_getBufferSize 3172  
            vscp_handleProtocolEvent@len 0082              vscp_handleProtocolEvent@pos 0080  
             __end_of_ECANReceiveMessage 1A00                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001E                    ?_SendInformationEvent 0074  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 311E  
          __end_of_vscp_goBootloaderMode 2F9A                          ?_readControlReg 0001  
                         actionClr@param 004F                     _vscp_handleHeartbeat 2C56  
                     __end_of_OpenTimer0 2FD6      __size_of_doApplicationOneSecondWork 0002  
                    ?_vscp_getBufferSize 0001             __size_of_vscp_check_pstorage 0020  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0060  
                       _vscp_alarmstatus 0055                         ?_writeControlReg 0011  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 002E  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 001E  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 0011  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 3054  
                           _init_app_ram 30E8             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                _actionClr 257C  
                              _actionSet 264C                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 3054                   _vscp_handleSetNickname 2EFC  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 0060  
                         _ECANInitialize 29F0                                 ?___lbmod 0008  
                         actionSet@param 004F                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 000A                              __pintcodelo 0818  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1134 0084  
                vscp_readStdReg@idx_1118 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 2D96                              __smallconst 0F00  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 3150  
                       actionSet@dmflags 0001                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A           __end_of_vscp_getManufacturerId 30C0  
         __end_of_vscp_setManufacturerId 2ED8                    __size_of__RegsToCANID 0164  
       vscp_handleProtocolEvent@pos_1133 0083                          doDM@type_filter 007D  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0094  
        SendInformationEvent@eventTypeId 0075                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 3178  
                             ?_actionClr 004F                               ?_actionSet 004F  
                 __end_of_ECANInitialize 2A7A                                 i1u550_20 086E  
                               i1u550_21 086C                                 i1u551_20 0878  
                               i1u551_21 0876                                 i1u552_20 0880  
                               i1u552_21 087E                                 i1u553_20 0894  
                               i1u553_21 0892                                 i1u554_20 08A2  
                               i1u554_21 08A0                                 i1u548_20 082C  
                               i1u548_21 082A                                 i1u549_20 085A  
                               i1u549_21 0858                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 2DF0  
                               _RXF0EIDH 000EE2                                 _RXF0EIDL 000EE3  
                               _RXB0OVFL 007B8F                                 _RXF1EIDH 000EE6  
                               _RXF1EIDL 000EE7                                 _RXB1OVFL 007B8E  
                               _RXF0SIDH 000EE0                                 _RXF0SIDL 000EE1  
                               _RXF1SIDH 000EE4                                 _RXF1SIDL 000EE5  
                               _RXM0EIDH 000EFA                                 _RXM0EIDL 000EFB  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000EFE  
                               _RXM1EIDL 000EFF                     ??_vscp_getSegmentCRC 000A  
                               _RXFBCON0 000E71                                 _RXFBCON1 000E72  
                               _RXFBCON2 000E73                                 _RXFBCON3 000E74  
                               _RXFBCON4 000E75                                 _RXFBCON5 000E76  
                               _RXFBCON6 000E77                                 _RXFBCON7 000E78  
                               _RXM0SIDH 000EF8                                 _RXM0SIDL 000EF9  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000EFC  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000EFD  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000C                     __end_of__CANIDToRegs 2152  
                       __CFG_SOSCSEL$DIG 000000                             __RegsToCANID 1E9E  
                     _vscp_probe_address 0057                          Write_b_eep@badd 0008  
                        Write_b_eep@bdat 000A              __size_of_vscp_goActiveState 001E  
                     writeControlReg@val 0011                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 2C12                                _vscp_imsg 00A4  
                              _vscp_hour 009C                                _vscp_omsg 00B2  
                       vscp_setGUID@data 000C        __size_of_vscp_handleProtocolEvent 0632  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004B     __size_of_vscp_writeNicknamePermanent 0016  
     __end_of_doApplicationOneSecondWork 3170               _doApplicationOneSecondWork 316E  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 0016  
                      _measurement_clock 0090                                 _Busy_eep 3162  
                  ?_vscp_getMinorVersion 0001                 __size_of_init_app_eeprom 00CA  
                    actionClrAll@dmflags 0001             __end_of_vscp_restoreDefaults 3162  
                             _EECON1bits 000F7F                            ?_actionClrAll 004F  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                          ?_actionSetAll 004F                         ??_vscp_getUserID 000A  
                        _vscp_getMDF_URL 2FF2                                 __Lrparam 0000  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                     __CFG_BOREN$SBORDIS 000000                         _vscp_initledfunc 0056  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000D  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                             ?_Write_b_eep 0008  
                             ?_vscp_init 0001                                 __ptext10 2D36  
                               __ptext11 257C                                 __ptext20 2FD6  
                               __ptext12 264C                                 __ptext21 2EB4  
                               __ptext13 2B6C                                 __ptext30 3172  
                               __ptext22 2ED8                                 __ptext14 0F22  
                               __ptext31 3174                                 __ptext23 2152  
                               __ptext15 2E1A                                 __ptext40 2D66  
                               __ptext32 30AC                                 __ptext24 1BAE  
                               __ptext16 2F5E                                 __ptext41 2C12  
                               __ptext33 30C0                                 __ptext25 303E  
                               __ptext17 239E                                 __ptext50 28A0  
                               __ptext42 3146                                 __ptext34 2FF2  
                               __ptext26 1A00                                 __ptext18 315A  
                               __ptext51 2D96                                 __ptext43 2EFC  
                               __ptext35 30D4                                 __ptext27 3170  
                               __ptext19 271C                                 __ptext60 2F20  
                               __ptext52 1D3A                                 __ptext44 2C56  
                               __ptext36 3176                                 __ptext28 3132  
                               __ptext61 306A                                 __ptext53 2002  
                               __ptext45 3054                                 __ptext37 3178  
                               __ptext29 313C                                 __ptext70 3026  
                               __ptext62 3080                                 __ptext54 2DC4  
                               __ptext46 2F7C                                 __ptext38 317A  
                               __ptext71 2FB8                                 __ptext63 3150  
                               __ptext55 2AF8                                 __ptext47 27E6  
                               __ptext39 2DF0                                 __ptext72 30E8  
                               __ptext64 300E                                 __ptext56 2E8E  
                               __ptext48 2F9A                                 __ptext73 30FA  
                               __ptext65 3096                                 __ptext57 1808  
                               __ptext49 2E68                                 __ptext74 2954  
                               __ptext66 2C96                                 __ptext58 1E9E  
                               __ptext75 24A4                                 __ptext67 3162  
                               __ptext59 2A7A                                 __ptext68 2CD0  
                               __ptext77 310C                                 __ptext69 29F0  
         vscp_goBootloaderMode@algorithm 000C                vscp_sendHeartBeat@subzone 0074  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 311E                         ??_vscp_setUserID 000D  
                          __size_of_doDM 02B4                            __size_of_main 0118  
                          __size_of_init 0036                           ??_actionClrAll 0050  
                            ??_actionClr 0050                              ??_actionSet 0050  
              __size_of_vscp_writeAppReg 0134                      _vscp_check_pstorage 2F20  
                         ??_actionSetAll 0050           vscp_handleProtocolEvent@i_1132 0089  
         vscp_handleProtocolEvent@i_1135 008D           vscp_handleProtocolEvent@i_1143 0087  
                   __end_of_vscp_getGUID 30E8                __size_of_vscp_writeStdReg 0106  
                    ECANSendMessage@data 0016                 ECANSendMessage@tempBSEL0 0030  
                       ??_readControlReg 0008                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 3132  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      vscp_setUserID@idx 000D                     __end_of_vscp_setGUID 2EFC  
                     vscp_readAppReg@reg 0012                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 007F                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000D                      __CFG_INTOSCSEL$HIGH 000000  
                       init_app_eeprom@i 000F                         init_app_eeprom@j 000E  
                    _vscp_setControlByte 306A              __size_of_vscp_setSegmentCRC 0016  
                        _vscp_readAppReg 2954                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F30         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000A  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 009B  
                        _vscp_readStdReg 1A00             vscp_handleDropNickname@bytes 000D  
             __end_of_vscp_newNodeOnline 2E1A                       _ECANReceiveMessage 1808  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 009D  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 300E                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 00A0  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 0150  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3176              _vscp_getBootLoaderAlgorithm 3174  
                  readControlReg@ctrlreg 000F         __size_of_interrupt_at_low_vector 009E  
                      actionClrAll@param 004F                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2F7C             __end_of_ECANSetOperationMode 303E  
                   _vscp_restoreDefaults 315A              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 3128  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2F7C                       __end_of_vscp_error 316C  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2F20  
     vscp_handleProtocolEvent@bytes_1139 008B                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 2002                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 007B  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
