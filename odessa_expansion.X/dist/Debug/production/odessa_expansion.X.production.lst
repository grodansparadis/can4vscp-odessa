

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Apr 23 23:11:47 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    88                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    89                           	psect	pa_nodes,global,class=CODE,delta=1
    90  0000                     tblptru	equ	0xFF8
    91                           tblptrh	equ	0xFF7
    92                           tblptrl	equ	0xFF6
    93                           tablat	equ	0xFF5
    94                           prodh	equ	0xFF4
    95                           prodl	equ	0xFF3
    96                           intcon	equ	0xFF2
    97                           wreg	equ	0xFE8
    98                           indf1	equ	0xFE7
    99                           fsr1h	equ	0xFE2
   100                           fsr1l	equ	0xFE1
   101                           indf2	equ	0xFDF
   102                           postinc2	equ	0xFDE
   103                           postdec2	equ	0xFDD
   104                           plusw2	equ	0xFDB
   105                           fsr2h	equ	0xFDA
   106                           fsr2l	equ	0xFD9
   107                           status	equ	0xFD8
   108                           
   109                           	psect	smallconst
   110  000F00                     __psmallconst:
   111                           	opt stack 0
   112  000F00                     _vscp_deviceURL:
   113                           	opt stack 0
   114  000F00  77                 	db	119
   115  000F01  77                 	db	119
   116  000F02  77                 	db	119
   117  000F03  2E                 	db	46
   118  000F04  65                 	db	101
   119  000F05  75                 	db	117
   120  000F06  72                 	db	114
   121  000F07  6F                 	db	111
   122  000F08  73                 	db	115
   123  000F09  6F                 	db	111
   124  000F0A  75                 	db	117
   125  000F0B  72                 	db	114
   126  000F0C  63                 	db	99
   127  000F0D  65                 	db	101
   128  000F0E  2E                 	db	46
   129  000F0F  73                 	db	115
   130  000F10  65                 	db	101
   131  000F11  2F                 	db	47
   132  000F12  6F                 	db	111
   133  000F13  64                 	db	100
   134  000F14  65                 	db	101
   135  000F15  73                 	db	115
   136  000F16  73                 	db	115
   137  000F17  61                 	db	97
   138  000F18  30                 	db	48
   139  000F19  30                 	db	48
   140  000F1A  31                 	db	49
   141  000F1B  2E                 	db	46
   142  000F1C  78                 	db	120
   143  000F1D  6D                 	db	109
   144  000F1E  6C                 	db	108
   145  000F1F  00                 	db	0
   146  000F20                     __end_of_vscp_deviceURL:
   147                           	opt stack 0
   148  0000                     _ANCON0	set	3933
   149  0000                     _ANCON1	set	3932
   150  0000                     _BRGCON1	set	3651
   151  0000                     _BRGCON2	set	3652
   152  0000                     _BRGCON3	set	3653
   153  0000                     _BSEL0	set	3709
   154  0000                     _CANCON	set	3951
   155  0000                     _CIOCON	set	3952
   156  0000                     _ECANCON	set	3954
   157  0000                     _EEADR	set	3956
   158  0000                     _EECON1bits	set	3967
   159  0000                     _EECON2	set	3966
   160  0000                     _EEDATA	set	3955
   161  0000                     _INTCONbits	set	4082
   162  0000                     _MSEL0	set	3705
   163  0000                     _MSEL1	set	3706
   164  0000                     _MSEL2	set	3707
   165  0000                     _PIR4bits	set	4023
   166  0000                     _PORTA	set	3968
   167  0000                     _PORTAbits	set	3968
   168  0000                     _PORTB	set	3969
   169  0000                     _PORTBbits	set	3969
   170  0000                     _PORTC	set	3970
   171  0000                     _PORTCbits	set	3970
   172  0000                     _RXB1CONbits	set	3888
   173  0000                     _RXF0EIDH	set	3810
   174  0000                     _RXF0EIDL	set	3811
   175  0000                     _RXF0SIDH	set	3808
   176  0000                     _RXF0SIDL	set	3809
   177  0000                     _RXF1EIDH	set	3814
   178  0000                     _RXF1EIDL	set	3815
   179  0000                     _RXF1SIDL	set	3813
   180  0000                     _RXFBCON0	set	3697
   181  0000                     _RXFBCON1	set	3698
   182  0000                     _RXFBCON2	set	3699
   183  0000                     _RXFBCON3	set	3700
   184  0000                     _RXFBCON4	set	3701
   185  0000                     _RXFBCON5	set	3702
   186  0000                     _RXFBCON6	set	3703
   187  0000                     _RXFBCON7	set	3704
   188  0000                     _RXFCON0	set	3654
   189  0000                     _RXFCON1	set	3655
   190  0000                     _RXM0EIDH	set	3834
   191  0000                     _RXM0EIDL	set	3835
   192  0000                     _RXM0SIDH	set	3832
   193  0000                     _RXM0SIDL	set	3833
   194  0000                     _RXM1EIDH	set	3838
   195  0000                     _RXM1EIDL	set	3839
   196  0000                     _RXM1SIDL	set	3837
   197  0000                     _T0CON	set	4053
   198  0000                     _T0CONbits	set	4053
   199  0000                     _TMR0H	set	4055
   200  0000                     _TMR0L	set	4054
   201  0000                     _TRISA	set	3986
   202  0000                     _TRISB	set	3987
   203  0000                     _TRISC	set	3988
   204  0000                     _B0RXFUL	set	29703
   205  0000                     _B0TXEN	set	29674
   206  0000                     _B1RXFUL	set	29831
   207  0000                     _B1TXEN	set	29675
   208  0000                     _B2RXFUL	set	29959
   209  0000                     _B2TXEN	set	29676
   210  0000                     _B3RXFUL	set	30087
   211  0000                     _B3TXEN	set	29677
   212  0000                     _B4RXFUL	set	30215
   213  0000                     _B4TXEN	set	29678
   214  0000                     _B5RXFUL	set	30343
   215  0000                     _B5TXEN	set	29679
   216  0000                     _FIFOEMPTY	set	31631
   217  0000                     _IRXIF	set	31679
   218  0000                     _MDSEL0	set	31638
   219  0000                     _MDSEL1	set	31639
   220  0000                     _RXB0FILHIT0	set	31488
   221  0000                     _RXB0FUL	set	31495
   222  0000                     _RXB0IF	set	31672
   223  0000                     _RXB0OVFL	set	31631
   224  0000                     _RXB1IF	set	31673
   225  0000                     _RXB1OVFL	set	31630
   226  0000                     _RXF1EN	set	29233
   227  0000                     _RXM0EXIDM	set	30667
   228  0000                     _RXM1EXIDEN	set	30699
   229  0000                     _B0CON	set	3712
   230  0000                     _B1CON	set	3728
   231  0000                     _B2CON	set	3744
   232  0000                     _B3CON	set	3760
   233  0000                     _B4CON	set	3776
   234  0000                     _B5CON	set	3792
   235  0000                     _RXB0CON	set	3936
   236  0000                     _RXB1CON	set	3888
   237  0000                     _RXF1SIDH	set	3812
   238  0000                     _RXM1SIDH	set	3836
   239  0000                     _TXB0CON	set	3872
   240  0000                     _TXB1CON	set	3856
   241  0000                     _TXB2CON	set	3840
   242                           
   243                           ; #config settings
   244  000F20  00                 	db	0	; dummy byte at the end
   245  0000                     tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           tblptrl	equ	0xFF6
   248                           tablat	equ	0xFF5
   249                           prodh	equ	0xFF4
   250                           prodl	equ	0xFF3
   251                           intcon	equ	0xFF2
   252                           wreg	equ	0xFE8
   253                           indf1	equ	0xFE7
   254                           fsr1h	equ	0xFE2
   255                           fsr1l	equ	0xFE1
   256                           indf2	equ	0xFDF
   257                           postinc2	equ	0xFDE
   258                           postdec2	equ	0xFDD
   259                           plusw2	equ	0xFDB
   260                           fsr2h	equ	0xFDA
   261                           fsr2l	equ	0xFD9
   262                           status	equ	0xFD8
   263                           
   264                           	psect	cinit
   265  002C7A                     __pcinit:
   266                           	opt stack 0
   267  002C7A                     start_initialization:
   268                           	opt stack 0
   269  002C7A                     __initialization:
   270                           	opt stack 0
   271                           
   272                           ; Clear objects allocated to BANK0 (48 bytes)
   273  002C7A  EE00  F060         	lfsr	0,__pbssBANK0
   274  002C7E  0E30               	movlw	48
   275  002C80                     clear_0:
   276  002C80  6AEE               	clrf	postinc0,c
   277  002C82  06E8               	decf	wreg,f,c
   278  002C84  E1FD               	bnz	clear_0
   279                           
   280                           ; Clear objects allocated to COMRAM (7 bytes)
   281  002C86  EE00  F04E         	lfsr	0,__pbssCOMRAM
   282  002C8A  0E07               	movlw	7
   283  002C8C                     clear_1:
   284  002C8C  6AEE               	clrf	postinc0,c
   285  002C8E  06E8               	decf	wreg,f,c
   286  002C90  E1FD               	bnz	clear_1
   287  002C92                     end_of_initialization:
   288                           	opt stack 0
   289  002C92                     __end_of__initialization:
   290                           	opt stack 0
   291  002C92  0100               	movlb	0
   292  002C94  EF46  F00F         	goto	_main	;jump to C main() function
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           prodh	equ	0xFF4
   298                           prodl	equ	0xFF3
   299                           intcon	equ	0xFF2
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           indf1	equ	0xFE7
   303                           fsr1h	equ	0xFE2
   304                           fsr1l	equ	0xFE1
   305                           indf2	equ	0xFDF
   306                           postinc2	equ	0xFDE
   307                           postdec2	equ	0xFDD
   308                           plusw2	equ	0xFDB
   309                           fsr2h	equ	0xFDA
   310                           fsr2l	equ	0xFD9
   311                           status	equ	0xFD8
   312                           
   313                           	psect	bssCOMRAM
   314  00004E                     __pbssCOMRAM:
   315                           	opt stack 0
   316  00004E                     _vscp_page_select:
   317                           	opt stack 0
   318  00004E                     	ds	2
   319  000050                     __ECANRxFilterHitInfo:
   320                           	opt stack 0
   321  000050                     	ds	1
   322  000051                     _sendTimer:
   323                           	opt stack 0
   324  000051                     	ds	1
   325  000052                     _vscp_initledfunc:
   326                           	opt stack 0
   327  000052                     	ds	1
   328  000053                     _vscp_probe_address:
   329                           	opt stack 0
   330  000053                     	ds	1
   331  000054                     _vscp_statuscnt:
   332                           	opt stack 0
   333  000054                     	ds	1
   334                           tblptru	equ	0xFF8
   335                           tblptrh	equ	0xFF7
   336                           tblptrl	equ	0xFF6
   337                           tablat	equ	0xFF5
   338                           prodh	equ	0xFF4
   339                           prodl	equ	0xFF3
   340                           intcon	equ	0xFF2
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           fsr1h	equ	0xFE2
   345                           fsr1l	equ	0xFE1
   346                           indf2	equ	0xFDF
   347                           postinc2	equ	0xFDE
   348                           postdec2	equ	0xFDD
   349                           plusw2	equ	0xFDB
   350                           fsr2h	equ	0xFDA
   351                           fsr2l	equ	0xFD9
   352                           status	equ	0xFD8
   353                           
   354                           	psect	bssBANK0
   355  000060                     __pbssBANK0:
   356                           	opt stack 0
   357  000060                     _measurement_clock:
   358                           	opt stack 0
   359  000060                     	ds	4
   360  000064                     _vscp_configtimer:
   361                           	opt stack 0
   362  000064                     	ds	2
   363  000066                     _vscp_timer:
   364                           	opt stack 0
   365  000066                     	ds	2
   366  000068                     _hours:
   367                           	opt stack 0
   368  000068                     	ds	1
   369  000069                     _minutes:
   370                           	opt stack 0
   371  000069                     	ds	1
   372  00006A                     _seconds:
   373                           	opt stack 0
   374  00006A                     	ds	1
   375  00006B                     _vscp_alarmstatus:
   376                           	opt stack 0
   377  00006B                     	ds	1
   378  00006C                     _vscp_guid_reset:
   379                           	opt stack 0
   380  00006C                     	ds	1
   381  00006D                     _vscp_hour:
   382                           	opt stack 0
   383  00006D                     	ds	1
   384  00006E                     _vscp_initbtncnt:
   385                           	opt stack 0
   386  00006E                     	ds	1
   387  00006F                     _vscp_minute:
   388                           	opt stack 0
   389  00006F                     	ds	1
   390  000070                     _vscp_nickname:
   391                           	opt stack 0
   392  000070                     	ds	1
   393  000071                     _vscp_node_state:
   394                           	opt stack 0
   395  000071                     	ds	1
   396  000072                     _vscp_node_substate:
   397                           	opt stack 0
   398  000072                     	ds	1
   399  000073                     _vscp_probe_cnt:
   400                           	opt stack 0
   401  000073                     	ds	1
   402  000074                     _vscp_second:
   403                           	opt stack 0
   404  000074                     	ds	1
   405  000075                     _vscp_imsg:
   406                           	opt stack 0
   407  000075                     	ds	14
   408  000083                     _vscp_omsg:
   409                           	opt stack 0
   410  000083                     	ds	13
   411                           tblptru	equ	0xFF8
   412                           tblptrh	equ	0xFF7
   413                           tblptrl	equ	0xFF6
   414                           tablat	equ	0xFF5
   415                           prodh	equ	0xFF4
   416                           prodl	equ	0xFF3
   417                           intcon	equ	0xFF2
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           indf1	equ	0xFE7
   421                           fsr1h	equ	0xFE2
   422                           fsr1l	equ	0xFE1
   423                           indf2	equ	0xFDF
   424                           postinc2	equ	0xFDE
   425                           postdec2	equ	0xFDD
   426                           plusw2	equ	0xFDB
   427                           fsr2h	equ	0xFDA
   428                           fsr2l	equ	0xFD9
   429                           status	equ	0xFD8
   430                           
   431                           	psect	cstackBANK0
   432  000090                     __pcstackBANK0:
   433                           	opt stack 0
   434  000090                     ??_sendVSCPFrame:
   435                           
   436                           ; 0 bytes @ 0x0
   437  000090                     	ds	20
   438  0000A4                     ??_vscp_handleProtocolEvent:
   439  0000A4                     ?_vscp_sendHeartBeat:
   440                           	opt stack 0
   441  0000A4                     vscp_sendHeartBeat@subzone:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x14
   445  0000A4                     	ds	7
   446  0000AB                     vscp_handleProtocolEvent@page_save:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x1B
   450  0000AB                     	ds	2
   451  0000AD                     vscp_handleProtocolEvent@page_save_1138:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x1D
   455  0000AD                     	ds	2
   456  0000AF                     vscp_handleProtocolEvent@offset:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x1F
   460  0000AF                     	ds	1
   461  0000B0                     vscp_handleProtocolEvent@pos:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x20
   465  0000B0                     	ds	1
   466  0000B1                     vscp_handleProtocolEvent@bytes:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x21
   470  0000B1                     	ds	1
   471  0000B2                     vscp_handleProtocolEvent@len:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x22
   475  0000B2                     	ds	1
   476  0000B3                     vscp_handleProtocolEvent@pos_1127:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x23
   480  0000B3                     	ds	1
   481  0000B4                     vscp_handleProtocolEvent@len_1128:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0x24
   485  0000B4                     	ds	1
   486  0000B5                     vscp_handleProtocolEvent@bytes_this_time:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x25
   490  0000B5                     	ds	1
   491  0000B6                     vscp_handleProtocolEvent@cb:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x26
   495  0000B6                     	ds	1
   496  0000B7                     vscp_handleProtocolEvent@i_1137:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x27
   500  0000B7                     	ds	1
   501  0000B8                     vscp_handleProtocolEvent@k:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x28
   505  0000B8                     	ds	1
   506  0000B9                     vscp_handleProtocolEvent@bytes_1134:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x29
   510  0000B9                     	ds	1
   511  0000BA                     vscp_handleProtocolEvent@i_1126:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x2A
   515  0000BA                     	ds	1
   516  0000BB                     vscp_handleProtocolEvent@byte:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x2B
   520  0000BB                     	ds	1
   521  0000BC                     vscp_handleProtocolEvent@i_1129:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x2C
   525  0000BC                     	ds	1
   526  0000BD                     vscp_handleProtocolEvent@i:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x2D
   530  0000BD                     	ds	1
   531  0000BE                     vscp_handleProtocolEvent@j:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x2E
   535  0000BE                     	ds	1
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           prodh	equ	0xFF4
   541                           prodl	equ	0xFF3
   542                           intcon	equ	0xFF2
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           indf1	equ	0xFE7
   546                           fsr1h	equ	0xFE2
   547                           fsr1l	equ	0xFE1
   548                           indf2	equ	0xFDF
   549                           postinc2	equ	0xFDE
   550                           postdec2	equ	0xFDD
   551                           plusw2	equ	0xFDB
   552                           fsr2h	equ	0xFDA
   553                           fsr2l	equ	0xFD9
   554                           status	equ	0xFD8
   555                           
   556                           	psect	cstackCOMRAM
   557  000001                     __pcstackCOMRAM:
   558                           	opt stack 0
   559  000001                     ?i1_WriteTimer0:
   560                           	opt stack 0
   561  000001                     i1WriteTimer0@timer0:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x0
   565  000001                     	ds	2
   566  000003                     i1WriteTimer0@timer:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x2
   570  000003                     	ds	2
   571  000005                     ??_interrupt_at_low_vector:
   572                           
   573                           ; 0 bytes @ 0x4
   574  000005                     	ds	3
   575  000008                     ?_WriteTimer0:
   576                           	opt stack 0
   577  000008                     ?_writeEEPROM:
   578                           	opt stack 0
   579  000008                     ??_readControlReg:
   580  000008                     ?__CANIDToRegs:
   581                           	opt stack 0
   582  000008                     ?__RegsToCANID:
   583                           	opt stack 0
   584  000008                     ??_vscp_getMDF_URL:
   585  000008                     ?_readEEPROM:
   586                           	opt stack 0
   587  000008                     ?___lbmod:
   588                           	opt stack 0
   589  000008                     ?__ECANPointBuffer:
   590                           	opt stack 0
   591  000008                     ?_vscp_getFamilyCode:
   592                           	opt stack 0
   593  000008                     ?_vscp_getFamilyType:
   594                           	opt stack 0
   595  000008                     vscp_getMatrixInfo@i:
   596                           	opt stack 0
   597  000008                     ECANSetOperationMode@mode:
   598                           	opt stack 0
   599  000008                     OpenTimer0@config:
   600                           	opt stack 0
   601  000008                     ___lbmod@divisor:
   602                           	opt stack 0
   603  000008                     __CANIDToRegs@ptr:
   604                           	opt stack 0
   605  000008                     __RegsToCANID@ptr:
   606                           	opt stack 0
   607  000008                     writeEEPROM@address:
   608                           	opt stack 0
   609  000008                     readEEPROM@address:
   610                           	opt stack 0
   611  000008                     WriteTimer0@timer0:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x7
   615  000008                     	ds	1
   616  000009                     vscp_getMDF_URL@idx:
   617                           	opt stack 0
   618  000009                     ___lbmod@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x8
   622  000009                     	ds	1
   623  00000A                     __RegsToCANID@val:
   624                           	opt stack 0
   625  00000A                     writeEEPROM@data:
   626                           	opt stack 0
   627  00000A                     readEEPROM@data:
   628                           	opt stack 0
   629  00000A                     ___lbmod@counter:
   630                           	opt stack 0
   631  00000A                     WriteTimer0@timer:
   632                           	opt stack 0
   633  00000A                     __CANIDToRegs@val:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x9
   637  00000A                     	ds	1
   638  00000B                     ??_init_app_eeprom:
   639  00000B                     ?_actionSet:
   640                           	opt stack 0
   641  00000B                     ?_actionClr:
   642                           	opt stack 0
   643  00000B                     ?_actionSetAll:
   644                           	opt stack 0
   645  00000B                     ?_actionClrAll:
   646                           	opt stack 0
   647  00000B                     ?_vscp_setGUID:
   648                           	opt stack 0
   649  00000B                     ?_vscp_setManufacturerId:
   650                           	opt stack 0
   651  00000B                     ?_vscp_setUserID:
   652                           	opt stack 0
   653  00000B                     vscp_setGUID@data:
   654                           	opt stack 0
   655  00000B                     vscp_setManufacturerId@data:
   656                           	opt stack 0
   657  00000B                     vscp_writeNicknamePermanent@nickname:
   658                           	opt stack 0
   659  00000B                     actionSet@param:
   660                           	opt stack 0
   661  00000B                     actionClr@param:
   662                           	opt stack 0
   663  00000B                     vscp_getGUID@idx:
   664                           	opt stack 0
   665  00000B                     vscp_getUserID@idx:
   666                           	opt stack 0
   667  00000B                     vscp_setUserID@data:
   668                           	opt stack 0
   669  00000B                     vscp_getManufacturerId@idx:
   670                           	opt stack 0
   671  00000B                     vscp_setSegmentCRC@crc:
   672                           	opt stack 0
   673  00000B                     vscp_setControlByte@ctrl:
   674                           	opt stack 0
   675  00000B                     vscp_goBootloaderMode@algorithm:
   676                           	opt stack 0
   677  00000B                     __RegsToCANID@type:
   678                           	opt stack 0
   679  00000B                     __ECANPointBuffer@b:
   680                           	opt stack 0
   681  00000B                     ___lbmod@rem:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0xA
   685  00000B                     	ds	1
   686  00000C                     ??_doDM:
   687  00000C                     ??__RegsToCANID:
   688  00000C                     ??_vscp_readStdReg:
   689  00000C                     vscp_setGUID@idx:
   690                           	opt stack 0
   691  00000C                     vscp_setManufacturerId@idx:
   692                           	opt stack 0
   693  00000C                     vscp_setUserID@idx:
   694                           	opt stack 0
   695  00000C                     vscp_handleDropNickname@bytes:
   696                           	opt stack 0
   697  00000C                     __ECANPointBuffer@pt:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0xB
   701  00000C                     	ds	1
   702  00000D                     init_app_eeprom@j:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0xC
   706  00000D                     	ds	1
   707  00000E                     init_app_eeprom@i:
   708                           	opt stack 0
   709  00000E                     __CANIDToRegs@type:
   710                           	opt stack 0
   711  00000E                     __RegsToCANID@Value:
   712                           	opt stack 0
   713                           
   714                           ; 1 bytes @ 0xD
   715  00000E                     	ds	1
   716  00000F                     ??__CANIDToRegs:
   717  00000F                     ?_ECANReceiveMessage:
   718                           	opt stack 0
   719  00000F                     ?_vscp_writeStdReg:
   720                           	opt stack 0
   721  00000F                     readControlReg@ctrlreg:
   722                           	opt stack 0
   723  00000F                     ECANReceiveMessage@data:
   724                           	opt stack 0
   725  00000F                     vscp_writeStdReg@value:
   726                           	opt stack 0
   727  00000F                     doDM@class_filter:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0xE
   731  00000F                     	ds	1
   732  000010                     ??_vscp_writeStdReg:
   733  000010                     readControlReg@rv:
   734                           	opt stack 0
   735  000010                     ECANReceiveMessage@dataLen:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0xF
   739  000010                     	ds	1
   740  000011                     ?_writeControlReg:
   741                           	opt stack 0
   742  000011                     vscp_readAppReg@rv:
   743                           	opt stack 0
   744  000011                     writeControlReg@val:
   745                           	opt stack 0
   746  000011                     ECANReceiveMessage@msgFlags:
   747                           	opt stack 0
   748  000011                     __CANIDToRegs@Value:
   749                           	opt stack 0
   750  000011                     doDM@class_mask:
   751                           	opt stack 0
   752  000011                     vscp_readStdReg@code:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x10
   756  000011                     	ds	1
   757  000012                     ??_writeControlReg:
   758  000012                     ?_ECANSendMessage:
   759                           	opt stack 0
   760  000012                     vscp_readAppReg@reg:
   761                           	opt stack 0
   762  000012                     ECANReceiveMessage@savedPtr:
   763                           	opt stack 0
   764  000012                     ECANSendMessage@id:
   765                           	opt stack 0
   766                           
   767                           ; 4 bytes @ 0x11
   768  000012                     	ds	1
   769  000013                     writeControlReg@ctrlreg:
   770                           	opt stack 0
   771  000013                     doDM@type_filter:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x12
   775  000013                     	ds	1
   776  000014                     writeControlReg@rv:
   777                           	opt stack 0
   778  000014                     doDM@type_mask:
   779                           	opt stack 0
   780  000014                     ECANReceiveMessage@id:
   781                           	opt stack 0
   782  000014                     vscp_writeStdReg@rv:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x13
   786  000014                     	ds	1
   787  000015                     ?_vscp_writeAppReg:
   788                           	opt stack 0
   789  000015                     vscp_writeAppReg@val:
   790                           	opt stack 0
   791  000015                     ECANReceiveMessage@i:
   792                           	opt stack 0
   793  000015                     vscp_writeStdReg@reg:
   794                           	opt stack 0
   795  000015                     _doDM$1984:
   796                           	opt stack 0
   797  000015                     vscp_readStdReg@code_1111:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x14
   801  000015                     	ds	1
   802  000016                     vscp_writeAppReg@rv:
   803                           	opt stack 0
   804  000016                     ECANReceiveMessage@mode:
   805                           	opt stack 0
   806  000016                     _doDM$1985:
   807                           	opt stack 0
   808  000016                     ECANSendMessage@data:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x15
   812  000016                     	ds	1
   813  000017                     vscp_writeAppReg@reg:
   814                           	opt stack 0
   815  000017                     doDM@dmflags:
   816                           	opt stack 0
   817  000017                     ECANReceiveMessage@temp:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x16
   821  000017                     	ds	1
   822  000018                     ?_vscp_writeRegister:
   823                           	opt stack 0
   824  000018                     doDM@i:
   825                           	opt stack 0
   826  000018                     ECANSendMessage@dataLen:
   827                           	opt stack 0
   828  000018                     vscp_writeRegister@value:
   829                           	opt stack 0
   830  000018                     ECANReceiveMessage@ptr:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0x17
   834  000018                     	ds	1
   835  000019                     ECANSendMessage@msgFlags:
   836                           	opt stack 0
   837  000019                     vscp_readStdReg@idx:
   838                           	opt stack 0
   839  000019                     vscp_writeRegister@reg:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x18
   843  000019                     	ds	1
   844  00001A                     ??_ECANSendMessage:
   845  00001A                     ?_getCANFrame:
   846                           	opt stack 0
   847  00001A                     getCANFrame@pdlc:
   848                           	opt stack 0
   849  00001A                     vscp_readStdReg@idx_1112:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x19
   853  00001A                     	ds	1
   854  00001B                     getCANFrame@pdata:
   855                           	opt stack 0
   856  00001B                     vscp_readStdReg@rv:
   857                           	opt stack 0
   858  00001B                     ECANSendMessage@pb:
   859                           	opt stack 0
   860                           
   861                           ; 18 bytes @ 0x1A
   862  00001B                     	ds	1
   863  00001C                     getCANFrame@pid:
   864                           	opt stack 0
   865  00001C                     vscp_readStdReg@reg:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x1B
   869  00001C                     	ds	1
   870  00001D                     getCANFrame@flags:
   871                           	opt stack 0
   872  00001D                     vscp_readRegister@reg:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x1C
   876  00001D                     	ds	1
   877  00001E                     ?_getVSCPFrame:
   878                           	opt stack 0
   879  00001E                     getVSCPFrame@pvscptype:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x1D
   883  00001E                     	ds	1
   884  00001F                     getVSCPFrame@pNodeId:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x1E
   888  00001F                     	ds	1
   889  000020                     getVSCPFrame@pPriority:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x1F
   893  000020                     	ds	1
   894  000021                     getVSCPFrame@pSize:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x20
   898  000021                     	ds	1
   899  000022                     getVSCPFrame@pData:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x21
   903  000022                     	ds	1
   904  000023                     ??_getVSCPFrame:
   905                           
   906                           ; 0 bytes @ 0x22
   907  000023                     	ds	4
   908  000027                     getVSCPFrame@pvscpclass:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x26
   912  000027                     	ds	1
   913  000028                     getVSCPFrame@id:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x27
   917  000028                     	ds	4
   918  00002C                     vscp_getEvent@rv:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x2B
   922  00002C                     	ds	1
   923  00002D                     ECANSendMessage@mode:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x2C
   927  00002D                     	ds	1
   928  00002E                     ECANSendMessage@buffers:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x2D
   932  00002E                     	ds	1
   933  00002F                     ECANSendMessage@j:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x2E
   937  00002F                     	ds	1
   938  000030                     ECANSendMessage@tempBSEL0:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x2F
   942  000030                     	ds	1
   943  000031                     ECANSendMessage@tempPtr:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x30
   947  000031                     	ds	2
   948  000033                     ECANSendMessage@temp:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x32
   952  000033                     	ds	1
   953  000034                     ECANSendMessage@i:
   954                           	opt stack 0
   955                           
   956                           ; 1 bytes @ 0x33
   957  000034                     	ds	1
   958  000035                     ECANSendMessage@ptr:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x34
   962  000035                     	ds	2
   963  000037                     ?_sendCANFrame:
   964                           	opt stack 0
   965  000037                     sendCANFrame@id:
   966                           	opt stack 0
   967                           
   968                           ; 4 bytes @ 0x36
   969  000037                     	ds	4
   970  00003B                     sendCANFrame@dlc:
   971                           	opt stack 0
   972                           
   973                           ; 1 bytes @ 0x3A
   974  00003B                     	ds	1
   975  00003C                     sendCANFrame@pdata:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x3B
   979  00003C                     	ds	2
   980  00003E                     sendCANFrame@rv:
   981                           	opt stack 0
   982                           
   983                           ; 1 bytes @ 0x3D
   984  00003E                     	ds	1
   985  00003F                     ?_sendVSCPFrame:
   986                           	opt stack 0
   987  00003F                     sendVSCPFrame@vscpclass:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x3E
   991  00003F                     	ds	2
   992  000041                     sendVSCPFrame@vscptype:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x40
   996  000041                     	ds	1
   997  000042                     sendVSCPFrame@nodeid:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x41
  1001  000042                     	ds	1
  1002  000043                     sendVSCPFrame@priority:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x42
  1006  000043                     	ds	1
  1007  000044                     sendVSCPFrame@size:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x43
  1011  000044                     	ds	1
  1012  000045                     sendVSCPFrame@pData:
  1013                           	opt stack 0
  1014                           
  1015                           ; 2 bytes @ 0x44
  1016  000045                     	ds	2
  1017  000047                     sendVSCPFrame@id:
  1018                           	opt stack 0
  1019                           
  1020                           ; 4 bytes @ 0x46
  1021  000047                     	ds	4
  1022  00004B                     
  1023                           ; 0 bytes @ 0x4A
  1024  00004B                     	ds	1
  1025  00004C                     ??_vscp_newNodeOnline:
  1026  00004C                     vscp_sendHeartBeat@zone:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x4B
  1030  00004C                     	ds	1
  1031  00004D                     ??_vscp_doOneSecondWork:
  1032                           
  1033                           ; 0 bytes @ 0x4C
  1034  00004D                     	ds	1
  1035  00004E                     tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           prodh	equ	0xFF4
  1040                           prodl	equ	0xFF3
  1041                           intcon	equ	0xFF2
  1042                           postinc0	equ	0xFEE
  1043                           wreg	equ	0xFE8
  1044                           indf1	equ	0xFE7
  1045                           fsr1h	equ	0xFE2
  1046                           fsr1l	equ	0xFE1
  1047                           indf2	equ	0xFDF
  1048                           postinc2	equ	0xFDE
  1049                           postdec2	equ	0xFDD
  1050                           plusw2	equ	0xFDB
  1051                           fsr2h	equ	0xFDA
  1052                           fsr2l	equ	0xFD9
  1053                           status	equ	0xFD8
  1054                           
  1055                           ; 0 bytes @ 0x4D
  1056 ;;
  1057 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1058 ;;
  1059 ;; *************** function _main *****************
  1060 ;; Defined at:
  1061 ;;		line 167 in file "../main.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;		None               void
  1068 ;; Registers used:
  1069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : F/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels required when called:    9
  1081 ;; This function calls:
  1082 ;;		_init
  1083 ;;		_vscp_check_pstorage
  1084 ;;		_init_app_eeprom
  1085 ;;		_init_app_ram
  1086 ;;		_vscp_init
  1087 ;;		_readEEPROM
  1088 ;;		_writeControlReg
  1089 ;;		_writeEEPROM
  1090 ;;		_vscp_getEvent
  1091 ;;		_vscp_goActiveState
  1092 ;;		_vscp_handleProbeState
  1093 ;;		_vscp_handleProtocolEvent
  1094 ;;		_doDM
  1095 ;;		_vscp_error
  1096 ;;		_vscp_doOneSecondWork
  1097 ;;		_doApplicationOneSecondWork
  1098 ;;		_doWork
  1099 ;; This function is called by:
  1100 ;;		Startup code after reset
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text0
  1105  001E8C                     __ptext0:
  1106                           	opt stack 0
  1107  001E8C                     _main:
  1108                           	opt stack 22
  1109                           
  1110                           ;main.c: 168: init();
  1111                           
  1112                           ;incstack = 0
  1113                           ;incstack = 0
  1114  001E8C  EC2D  F015         	call	_init	;wreg free
  1115                           
  1116                           ;main.c: 172: if ( !vscp_check_pstorage() ) {
  1117  001E90  EC2D  F016         	call	_vscp_check_pstorage	;wreg free
  1118  001E94  0900               	iorlw	0
  1119  001E96  E104               	bnz	l5467
  1120                           
  1121                           ;main.c: 175: init_app_eeprom();
  1122  001E98  EC3D  F013         	call	_init_app_eeprom	;wreg free
  1123                           
  1124                           ;main.c: 176: init_app_ram();
  1125  001E9C  ECF9  F016         	call	_init_app_ram	;wreg free
  1126  001EA0                     l5467:
  1127                           
  1128                           ;main.c: 179: }
  1129                           ;main.c: 181: vscp_init();
  1130  001EA0  ECCB  F014         	call	_vscp_init	;wreg free
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;main.c: 184: writeControlReg( 0, readEEPROM( 0x21 + 2 ) );
  1134  001EA4  6A09               	clrf	?_readEEPROM+1,c
  1135  001EA6  0E23               	movlw	35
  1136  001EA8  6E08               	movwf	?_readEEPROM,c
  1137  001EAA  ECD5  F016         	call	_readEEPROM	;wreg free
  1138  001EAE  6E11               	movwf	?_writeControlReg,c
  1139  001EB0  0E00               	movlw	0
  1140  001EB2  EC3F  F00D         	call	_writeControlReg
  1141                           
  1142                           ;main.c: 185: writeControlReg( 1, readEEPROM( 0x21 + 3 ) );
  1143  001EB6  6A09               	clrf	?_readEEPROM+1,c
  1144  001EB8  0E24               	movlw	36
  1145  001EBA  6E08               	movwf	?_readEEPROM,c
  1146  001EBC  ECD5  F016         	call	_readEEPROM	;wreg free
  1147  001EC0  6E11               	movwf	?_writeControlReg,c
  1148  001EC2  0E01               	movlw	1
  1149  001EC4  EC3F  F00D         	call	_writeControlReg
  1150                           
  1151                           ;main.c: 186: writeControlReg( 2, readEEPROM( 0x21 + 4 ) );
  1152  001EC8  6A09               	clrf	?_readEEPROM+1,c
  1153  001ECA  0E25               	movlw	37
  1154  001ECC  6E08               	movwf	?_readEEPROM,c
  1155  001ECE  ECD5  F016         	call	_readEEPROM	;wreg free
  1156  001ED2  6E11               	movwf	?_writeControlReg,c
  1157  001ED4  0E02               	movlw	2
  1158  001ED6  EC3F  F00D         	call	_writeControlReg
  1159  001EDA                     l145:
  1160  001EDA  0004               	clrwdt		;# 
  1161                           
  1162                           ;main.c: 192: if ( ( vscp_initbtncnt > 250 ) &&
  1163                           ;main.c: 193: ( 0x01 != vscp_node_state ) ) {
  1164  001EDC  0EFA               	movlw	250
  1165  001EDE  0100               	movlb	0	; () banked
  1166  001EE0  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1167  001EE2  D00C               	goto	l5483
  1168                           
  1169                           ; BSR set to: 0
  1170  001EE4  0571               	decf	_vscp_node_state& (0+255),w,b
  1171  001EE6  E00A               	bz	l5483
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 196: vscp_nickname = 0xff;
  1175  001EE8  6970               	setf	_vscp_nickname& (0+255),b
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;main.c: 197: writeEEPROM( 0x01, 0xff );
  1179  001EEA  6A09               	clrf	?_writeEEPROM+1,c
  1180  001EEC  0E01               	movlw	1
  1181  001EEE  6E08               	movwf	?_writeEEPROM,c
  1182  001EF0  0EFF               	movlw	255
  1183  001EF2  680A               	setf	?_writeEEPROM+2,c
  1184  001EF4  ECD8  F015         	call	_writeEEPROM	;wreg free
  1185                           
  1186                           ;main.c: 198: vscp_init();
  1187  001EF8  ECCB  F014         	call	_vscp_init	;wreg free
  1188  001EFC                     l5483:
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 200: }
  1192                           ;main.c: 203: vscp_imsg.flags = 0;
  1193  001EFC  6B75               	clrf	_vscp_imsg& (0+255),b
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;main.c: 204: vscp_getEvent();
  1197  001EFE  EC60  F015         	call	_vscp_getEvent	;wreg free
  1198                           
  1199                           ;main.c: 206: switch ( vscp_node_state ) {
  1200  001F02  D01C               	goto	l5509
  1201  001F04                     l5487:
  1202                           
  1203                           ; BSR set to: 0
  1204                           ;main.c: 211: if (0xff == vscp_nickname) {
  1205  001F04  2970               	incf	_vscp_nickname& (0+255),w,b
  1206  001F06  E103               	bnz	l5491
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 213: vscp_node_state = 0x01;
  1210  001F08  0E01               	movlw	1
  1211  001F0A  6F71               	movwf	_vscp_node_state& (0+255),b
  1212                           
  1213                           ;main.c: 214: } else {
  1214  001F0C  D023               	goto	l5511
  1215  001F0E                     l5491:
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 216: vscp_node_state = 0x03;
  1219  001F0E  0E03               	movlw	3
  1220  001F10  6F71               	movwf	_vscp_node_state& (0+255),b
  1221  001F12                     l5493:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;main.c: 217: vscp_goActiveState();
  1225  001F12  EC5B  F016         	call	_vscp_goActiveState	;wreg free
  1226  001F16  D01E               	goto	l5511
  1227  001F18                     l5495:
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 222: vscp_handleProbeState();
  1231  001F18  ECD2  F011         	call	_vscp_handleProbeState	;wreg free
  1232                           
  1233                           ;main.c: 223: break;
  1234  001F1C  D01B               	goto	l5511
  1235  001F1E                     l154:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 232: if (vscp_imsg.flags & 0x80) {
  1239  001F1E  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1240  001F20  D019               	goto	l5511
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 234: if ( 0 == vscp_imsg.vscp_class ) {
  1244  001F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1245  001F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1246  001F26  B4D8               	btfsc	status,2,c
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;main.c: 237: vscp_handleProtocolEvent();
  1250  001F28  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1251                           
  1252                           ;main.c: 239: }
  1253                           ;main.c: 241: doDM();
  1254  001F2C  EC82  F00B         	call	_doDM	;wreg free
  1255  001F30  D011               	goto	l5511
  1256  001F32                     l5505:
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 247: vscp_error();
  1260  001F32  EC3E  F017         	call	_vscp_error	;wreg free
  1261                           
  1262                           ;main.c: 248: break;
  1263  001F36  D00E               	goto	l5511
  1264  001F38                     l158:
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 251: vscp_node_state = 0x00;
  1268  001F38  6B71               	clrf	_vscp_node_state& (0+255),b
  1269                           
  1270                           ;main.c: 252: break;
  1271  001F3A  D00C               	goto	l5511
  1272  001F3C                     l5509:
  1273  001F3C  0100               	movlb	0	; () banked
  1274  001F3E  5171               	movf	_vscp_node_state& (0+255),w,b
  1275                           
  1276                           ; Switch size 1, requested type "space"
  1277                           ; Number of cases is 5, Range of values is 0 to 4
  1278                           ; switch strategies available:
  1279                           ; Name         Instructions Cycles
  1280                           ; simple_byte           16     9 (average)
  1281                           ;	Chosen strategy is simple_byte
  1282  001F40  E0E1               	bz	l5487
  1283  001F42  0A01               	xorlw	1	; case 1
  1284  001F44  E0E9               	bz	l5495
  1285  001F46  0A03               	xorlw	3	; case 2
  1286  001F48  E0E4               	bz	l5493
  1287  001F4A  0A01               	xorlw	1	; case 3
  1288  001F4C  E0E8               	bz	l154
  1289  001F4E  0A07               	xorlw	7	; case 4
  1290  001F50  E0F0               	bz	l5505
  1291  001F52  D7F2               	goto	l158
  1292  001F54                     l5511:
  1293                           
  1294                           ;main.c: 257: if ( measurement_clock > 1000 ) {
  1295  001F54  0EE9               	movlw	233
  1296  001F56  0100               	movlb	0	; () banked
  1297  001F58  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1298  001F5A  0E03               	movlw	3
  1299  001F5C  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1300  001F5E  0E00               	movlw	0
  1301  001F60  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1302  001F62  0E00               	movlw	0
  1303  001F64  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1304  001F66  E30C               	bnc	l5523
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 259: measurement_clock = 0;
  1308  001F68  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1309  001F6A  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1310  001F6C  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1311  001F6E  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;main.c: 261: sendTimer++;
  1315  001F70  2A51               	incf	_sendTimer,f,c
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 264: vscp_doOneSecondWork();
  1319  001F72  ECA3  F014         	call	_vscp_doOneSecondWork	;wreg free
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;main.c: 268: if ( 0x03 == vscp_node_state ) {
  1323  001F76  5171               	movf	_vscp_node_state& (0+255),w,b
  1324  001F78  0A03               	xorlw	3
  1325  001F7A  B4D8               	btfsc	status,2,c
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 271: doApplicationOneSecondWork();
  1329  001F7C  EC41  F017         	call	_doApplicationOneSecondWork	;wreg free
  1330  001F80                     l5523:
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;main.c: 273: }
  1334                           ;main.c: 275: }
  1335                           ;main.c: 278: if ( seconds > 59 ) {
  1336  001F80  0E3B               	movlw	59
  1337  001F82  656A               	cpfsgt	_seconds& (0+255),b
  1338  001F84  D00B               	goto	l5539
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;main.c: 280: seconds = 0;
  1342  001F86  6B6A               	clrf	_seconds& (0+255),b
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;main.c: 281: minutes++;
  1346  001F88  2B69               	incf	_minutes& (0+255),f,b
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 283: if ( minutes > 59 ) {
  1350  001F8A  0E3B               	movlw	59
  1351  001F8C  6569               	cpfsgt	_minutes& (0+255),b
  1352  001F8E  D002               	goto	l5535
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 284: minutes = 0;
  1356  001F90  6B69               	clrf	_minutes& (0+255),b
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 285: hours++;
  1360  001F92  2B68               	incf	_hours& (0+255),f,b
  1361  001F94                     l5535:
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 286: }
  1365                           ;main.c: 288: if ( hours > 23 ) hours = 0;
  1366  001F94  0E17               	movlw	23
  1367  001F96  6568               	cpfsgt	_hours& (0+255),b
  1368  001F98  D001               	goto	l5539
  1369                           
  1370                           ; BSR set to: 0
  1371  001F9A  6B68               	clrf	_hours& (0+255),b
  1372  001F9C                     l5539:
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;main.c: 290: }
  1376                           ;main.c: 292: doWork();
  1377  001F9C  EC40  F017         	call	_doWork	;wreg free
  1378  001FA0  D79C               	goto	l145
  1379  001FA2                     __end_of_main:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodh	equ	0xFF4
  1386                           prodl	equ	0xFF3
  1387                           intcon	equ	0xFF2
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           indf1	equ	0xFE7
  1391                           fsr1h	equ	0xFE2
  1392                           fsr1l	equ	0xFE1
  1393                           indf2	equ	0xFDF
  1394                           postinc2	equ	0xFDE
  1395                           postdec2	equ	0xFDD
  1396                           plusw2	equ	0xFDB
  1397                           fsr2h	equ	0xFDA
  1398                           fsr2l	equ	0xFD9
  1399                           status	equ	0xFD8
  1400                           
  1401 ;; *************** function _doWork *****************
  1402 ;; Defined at:
  1403 ;;		line 574 in file "../main.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;		None
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;		None
  1408 ;; Return value:  Size  Location     Type
  1409 ;;		None               void
  1410 ;; Registers used:
  1411 ;;		wreg, status,2, status,0
  1412 ;; Tracked objects:
  1413 ;;		On entry : F/0
  1414 ;;		On exit  : F/0
  1415 ;;		Unchanged: F/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1421 ;;Total ram usage:        0 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; Hardware stack levels required when called:    2
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_main
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text1
  1432  002E80                     __ptext1:
  1433                           	opt stack 0
  1434  002E80                     _doWork:
  1435                           	opt stack 28
  1436                           
  1437                           ; BSR set to: 0
  1438                           
  1439                           ; BSR set to: 0
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;incstack = 0
  1443                           ;incstack = 0
  1444  002E80  0012               	return	
  1445  002E82                     __end_of_doWork:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           prodh	equ	0xFF4
  1452                           prodl	equ	0xFF3
  1453                           intcon	equ	0xFF2
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           indf1	equ	0xFE7
  1457                           fsr1h	equ	0xFE2
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           plusw2	equ	0xFDB
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _doApplicationOneSecondWork *****************
  1468 ;; Defined at:
  1469 ;;		line 456 in file "../main.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;		None               void
  1476 ;; Registers used:
  1477 ;;		None
  1478 ;; Tracked objects:
  1479 ;;		On entry : F/0
  1480 ;;		On exit  : F/0
  1481 ;;		Unchanged: F/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1487 ;;Total ram usage:        0 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    2
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_main
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text2
  1498  002E82                     __ptext2:
  1499                           	opt stack 0
  1500  002E82                     _doApplicationOneSecondWork:
  1501                           	opt stack 28
  1502                           
  1503                           ; BSR set to: 0
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;incstack = 0
  1507                           ;incstack = 0
  1508  002E82  0012               	return	
  1509  002E84                     __end_of_doApplicationOneSecondWork:
  1510                           	opt stack 0
  1511                           tblptru	equ	0xFF8
  1512                           tblptrh	equ	0xFF7
  1513                           tblptrl	equ	0xFF6
  1514                           tablat	equ	0xFF5
  1515                           prodh	equ	0xFF4
  1516                           prodl	equ	0xFF3
  1517                           intcon	equ	0xFF2
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           indf1	equ	0xFE7
  1521                           fsr1h	equ	0xFE2
  1522                           fsr1l	equ	0xFE1
  1523                           indf2	equ	0xFDF
  1524                           postinc2	equ	0xFDE
  1525                           postdec2	equ	0xFDD
  1526                           plusw2	equ	0xFDB
  1527                           fsr2h	equ	0xFDA
  1528                           fsr2l	equ	0xFD9
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _vscp_doOneSecondWork *****************
  1532 ;; Defined at:
  1533 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;		None               void
  1540 ;; Registers used:
  1541 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : F/0
  1544 ;;		On exit  : F/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1551 ;;Total ram usage:        1 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    8
  1554 ;; This function calls:
  1555 ;;		_vscp_getZone
  1556 ;;		_vscp_getSubzone
  1557 ;;		_vscp_sendHeartBeat
  1558 ;; This function is called by:
  1559 ;;		_main
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text3
  1564  002946                     __ptext3:
  1565                           	opt stack 0
  1566  002946                     _vscp_doOneSecondWork:
  1567                           	opt stack 22
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;vscp_firmware.c: 518: ++vscp_second;
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;incstack = 0
  1574                           ;incstack = 0
  1575  002946  2B74               	incf	_vscp_second& (0+255),f,b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  1579  002948  0E3B               	movlw	59
  1580  00294A  6574               	cpfsgt	_vscp_second& (0+255),b
  1581  00294C  D00D               	goto	l6063
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;vscp_firmware.c: 521: vscp_second = 0;
  1585  00294E  6B74               	clrf	_vscp_second& (0+255),b
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;vscp_firmware.c: 522: vscp_minute++;
  1589  002950  2B6F               	incf	_vscp_minute& (0+255),f,b
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  1593  002952  5171               	movf	_vscp_node_state& (0+255),w,b
  1594  002954  0A03               	xorlw	3
  1595  002956  E108               	bnz	l6063
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  1599                           ;vscp_firmware.c: 527: vscp_getSubzone());
  1600  002958  EC14  F017         	call	_vscp_getSubzone	;wreg free
  1601  00295C  0100               	movlb	0	; () banked
  1602  00295E  6FA4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1603  002960  EC19  F017         	call	_vscp_getZone	;wreg free
  1604  002964  EC9F  F015         	call	_vscp_sendHeartBeat
  1605  002968                     l6063:
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;vscp_firmware.c: 528: }
  1609                           ;vscp_firmware.c: 529: }
  1610                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  1611  002968  0E3B               	movlw	59
  1612  00296A  656F               	cpfsgt	_vscp_minute& (0+255),b
  1613  00296C  D002               	goto	l6069
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;vscp_firmware.c: 532: vscp_minute = 0;
  1617  00296E  6B6F               	clrf	_vscp_minute& (0+255),b
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;vscp_firmware.c: 533: vscp_hour++;
  1621  002970  2B6D               	incf	_vscp_hour& (0+255),f,b
  1622  002972                     l6069:
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;vscp_firmware.c: 534: }
  1626                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  1627  002972  0E17               	movlw	23
  1628  002974  656D               	cpfsgt	_vscp_hour& (0+255),b
  1629  002976  D001               	goto	l6073
  1630                           
  1631                           ; BSR set to: 0
  1632  002978  6B6D               	clrf	_vscp_hour& (0+255),b
  1633  00297A                     l6073:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  1637  00297A  5171               	movf	_vscp_node_state& (0+255),w,b
  1638  00297C  0A03               	xorlw	3
  1639  00297E  A4D8               	btfss	status,2,c
  1640  002980  0012               	return	
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  1644  002982  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  1648  002984  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1649  002988  0E0F               	movlw	15
  1650  00298A  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1651  00298C  0E02               	movlw	2
  1652  00298E  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1653  002990  B0D8               	btfsc	status,0,c
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  1657  002992  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1658                           
  1659                           ; BSR set to: 0
  1660  002994  0012               	return	
  1661  002996                     __end_of_vscp_doOneSecondWork:
  1662                           	opt stack 0
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           prodh	equ	0xFF4
  1668                           prodl	equ	0xFF3
  1669                           intcon	equ	0xFF2
  1670                           postinc0	equ	0xFEE
  1671                           wreg	equ	0xFE8
  1672                           indf1	equ	0xFE7
  1673                           fsr1h	equ	0xFE2
  1674                           fsr1l	equ	0xFE1
  1675                           indf2	equ	0xFDF
  1676                           postinc2	equ	0xFDE
  1677                           postdec2	equ	0xFDD
  1678                           plusw2	equ	0xFDB
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683 ;; *************** function _vscp_sendHeartBeat *****************
  1684 ;; Defined at:
  1685 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  zone            1    wreg     unsigned char 
  1688 ;;  subzone         1   20[BANK0 ] unsigned char 
  1689 ;; Auto vars:     Size  Location     Type
  1690 ;;  zone            1   75[COMRAM] unsigned char 
  1691 ;; Return value:  Size  Location     Type
  1692 ;;		None               void
  1693 ;; Registers used:
  1694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1695 ;; Tracked objects:
  1696 ;;		On entry : 0/0
  1697 ;;		On exit  : F/0
  1698 ;;		Unchanged: 0/0
  1699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1700 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1703 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1704 ;;Total ram usage:        2 bytes
  1705 ;; Hardware stack levels used:    1
  1706 ;; Hardware stack levels required when called:    7
  1707 ;; This function calls:
  1708 ;;		_vscp_sendEvent
  1709 ;; This function is called by:
  1710 ;;		_vscp_doOneSecondWork
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text4
  1715  002B3E                     __ptext4:
  1716                           	opt stack 0
  1717  002B3E                     _vscp_sendHeartBeat:
  1718                           	opt stack 22
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;incstack = 0
  1722                           ;incstack = 0
  1723                           ;vscp_sendHeartBeat@zone stored from wreg
  1724  002B3E  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1725                           
  1726                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  1727  002B42  0E83               	movlw	131
  1728  002B44  0100               	movlb	0	; () banked
  1729  002B46  6F83               	movwf	_vscp_omsg& (0+255),b
  1730                           
  1731                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  1732  002B48  0E07               	movlw	7
  1733  002B4A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1734                           
  1735                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  1736  002B4C  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1737  002B4E  0E14               	movlw	20
  1738  002B50  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1739                           
  1740                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  1741  002B52  0E09               	movlw	9
  1742  002B54  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  1746  002B56  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  1750  002B58  C04C  F089         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  1754  002B5C  C0A4  F08A         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;vscp_firmware.c: 380: vscp_sendEvent();
  1758  002B60  EFB2  F015         	goto	_vscp_sendEvent	;wreg free
  1759  002B64                     __end_of_vscp_sendHeartBeat:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           prodh	equ	0xFF4
  1766                           prodl	equ	0xFF3
  1767                           intcon	equ	0xFF2
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           indf1	equ	0xFE7
  1771                           fsr1h	equ	0xFE2
  1772                           fsr1l	equ	0xFE1
  1773                           indf2	equ	0xFDF
  1774                           postinc2	equ	0xFDE
  1775                           postdec2	equ	0xFDD
  1776                           plusw2	equ	0xFDB
  1777                           fsr2h	equ	0xFDA
  1778                           fsr2l	equ	0xFD9
  1779                           status	equ	0xFD8
  1780                           
  1781 ;; *************** function _vscp_getSubzone *****************
  1782 ;; Defined at:
  1783 ;;		line 563 in file "../main.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      unsigned char 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : F/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    3
  1804 ;; This function calls:
  1805 ;;		_readEEPROM
  1806 ;; This function is called by:
  1807 ;;		_vscp_doOneSecondWork
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text5
  1812  002E28                     __ptext5:
  1813                           	opt stack 0
  1814  002E28                     _vscp_getSubzone:
  1815                           	opt stack 26
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 564: return readEEPROM( 0x21 + 1 );
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;incstack = 0
  1822                           ;incstack = 0
  1823  002E28  6A09               	clrf	?_readEEPROM+1,c
  1824  002E2A  0E22               	movlw	34
  1825  002E2C  6E08               	movwf	?_readEEPROM,c
  1826  002E2E  EFD5  F016         	goto	_readEEPROM	;wreg free
  1827  002E32                     __end_of_vscp_getSubzone:
  1828                           	opt stack 0
  1829                           tblptru	equ	0xFF8
  1830                           tblptrh	equ	0xFF7
  1831                           tblptrl	equ	0xFF6
  1832                           tablat	equ	0xFF5
  1833                           prodh	equ	0xFF4
  1834                           prodl	equ	0xFF3
  1835                           intcon	equ	0xFF2
  1836                           postinc0	equ	0xFEE
  1837                           wreg	equ	0xFE8
  1838                           indf1	equ	0xFE7
  1839                           fsr1h	equ	0xFE2
  1840                           fsr1l	equ	0xFE1
  1841                           indf2	equ	0xFDF
  1842                           postinc2	equ	0xFDE
  1843                           postdec2	equ	0xFDD
  1844                           plusw2	equ	0xFDB
  1845                           fsr2h	equ	0xFDA
  1846                           fsr2l	equ	0xFD9
  1847                           status	equ	0xFD8
  1848                           
  1849 ;; *************** function _vscp_getZone *****************
  1850 ;; Defined at:
  1851 ;;		line 554 in file "../main.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      unsigned char 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : F/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used:    1
  1871 ;; Hardware stack levels required when called:    3
  1872 ;; This function calls:
  1873 ;;		_readEEPROM
  1874 ;; This function is called by:
  1875 ;;		_vscp_doOneSecondWork
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text6
  1880  002E32                     __ptext6:
  1881                           	opt stack 0
  1882  002E32                     _vscp_getZone:
  1883                           	opt stack 26
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 555: return readEEPROM( 0x21 + 0 );
  1887                           
  1888                           ;incstack = 0
  1889                           ;incstack = 0
  1890  002E32  6A09               	clrf	?_readEEPROM+1,c
  1891  002E34  0E21               	movlw	33
  1892  002E36  6E08               	movwf	?_readEEPROM,c
  1893  002E38  EFD5  F016         	goto	_readEEPROM	;wreg free
  1894  002E3C                     __end_of_vscp_getZone:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           intcon	equ	0xFF2
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           indf1	equ	0xFE7
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           postdec2	equ	0xFDD
  1911                           plusw2	equ	0xFDB
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _vscp_error *****************
  1917 ;; Defined at:
  1918 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;		None               void
  1925 ;; Registers used:
  1926 ;;		None
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1936 ;;Total ram usage:        0 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    2
  1939 ;; This function calls:
  1940 ;;		Nothing
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text7
  1947  002E7C                     __ptext7:
  1948                           	opt stack 0
  1949  002E7C                     _vscp_error:
  1950                           	opt stack 28
  1951                           
  1952                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  1953                           
  1954                           ;incstack = 0
  1955                           ;incstack = 0
  1956  002E7C  6A52               	clrf	_vscp_initledfunc,c
  1957  002E7E  0012               	return	
  1958  002E80                     __end_of_vscp_error:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           intcon	equ	0xFF2
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           indf1	equ	0xFE7
  1970                           fsr1h	equ	0xFE2
  1971                           fsr1l	equ	0xFE1
  1972                           indf2	equ	0xFDF
  1973                           postinc2	equ	0xFDE
  1974                           postdec2	equ	0xFDD
  1975                           plusw2	equ	0xFDB
  1976                           fsr2h	equ	0xFDA
  1977                           fsr2l	equ	0xFD9
  1978                           status	equ	0xFD8
  1979                           
  1980 ;; *************** function _doDM *****************
  1981 ;; Defined at:
  1982 ;;		line 834 in file "../main.c"
  1983 ;; Parameters:    Size  Location     Type
  1984 ;;		None
  1985 ;; Auto vars:     Size  Location     Type
  1986 ;;  class_mask      2   16[COMRAM] unsigned short 
  1987 ;;  class_filter    2   14[COMRAM] unsigned short 
  1988 ;;  i               1   23[COMRAM] unsigned char 
  1989 ;;  dmflags         1   22[COMRAM] unsigned char 
  1990 ;;  type_mask       1   19[COMRAM] unsigned char 
  1991 ;;  type_filter     1   18[COMRAM] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;		None               void
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2002 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2003 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2004 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2005 ;;Total ram usage:       13 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    4
  2008 ;; This function calls:
  2009 ;;		_readEEPROM
  2010 ;;		_actionSet
  2011 ;;		_actionClr
  2012 ;;		_actionSetAll
  2013 ;;		_actionClrAll
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text8
  2020  001704                     __ptext8:
  2021                           	opt stack 0
  2022  001704                     _doDM:
  2023                           	opt stack 26
  2024                           
  2025                           ;main.c: 835: unsigned char i;
  2026                           ;main.c: 836: unsigned char dmflags;
  2027                           ;main.c: 837: unsigned short class_filter;
  2028                           ;main.c: 838: unsigned short class_mask;
  2029                           ;main.c: 839: unsigned char type_filter;
  2030                           ;main.c: 840: unsigned char type_mask;
  2031                           ;main.c: 843: if ( 0 == vscp_imsg.vscp_class ) return;
  2032                           
  2033                           ;incstack = 0
  2034                           ;incstack = 0
  2035  001704  0100               	movlb	0	; () banked
  2036  001706  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  2037  001708  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2038  00170A  B4D8               	btfsc	status,2,c
  2039  00170C  0012               	return	
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 845: for (i = 0; i < 8; i++) {
  2043  00170E  6A18               	clrf	doDM@i,c
  2044  001710                     l4345:
  2045                           
  2046                           ;main.c: 848: dmflags = readEEPROM( 0x21 + 0 + 1 + (8 * i) );
  2047  001710  5018               	movf	doDM@i,w,c
  2048  001712  D8D3               	call	PL2	;call to abstracted procedure
  2049  001714  0E22               	movlw	34
  2050  001716  240C               	addwf	??_doDM,w,c
  2051  001718  6E08               	movwf	?_readEEPROM,c
  2052  00171A  0E00               	movlw	0
  2053  00171C  200D               	addwfc	??_doDM+1,w,c
  2054  00171E  6E09               	movwf	?_readEEPROM+1,c
  2055  001720  ECD5  F016         	call	_readEEPROM	;wreg free
  2056  001724  6E17               	movwf	doDM@dmflags,c
  2057                           
  2058                           ;main.c: 851: if ( dmflags & 0x80 ) {
  2059  001726  AE17               	btfss	doDM@dmflags,7,c
  2060  001728  D0C3               	goto	l4391
  2061                           
  2062                           ;main.c: 854: if ( ( dmflags & 0x40 ) &&
  2063                           ;main.c: 855: ( vscp_imsg.oaddr != readEEPROM( 0x21 + 0 + (8 * i) ) ) ) {
  2064  00172A  AC17               	btfss	doDM@dmflags,6,c
  2065  00172C  D00E               	goto	l289
  2066  00172E  5018               	movf	doDM@i,w,c
  2067  001730  D8C4               	call	PL2	;call to abstracted procedure
  2068  001732  0E21               	movlw	33
  2069  001734  240C               	addwf	??_doDM,w,c
  2070  001736  6E08               	movwf	?_readEEPROM,c
  2071  001738  0E00               	movlw	0
  2072  00173A  200D               	addwfc	??_doDM+1,w,c
  2073  00173C  6E09               	movwf	?_readEEPROM+1,c
  2074  00173E  ECD5  F016         	call	_readEEPROM	;wreg free
  2075  001742  0100               	movlb	0	; () banked
  2076  001744  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2077  001746  E001 D0B3          	bnz	l4391
  2078  00174A                     l289:
  2079                           
  2080                           ;main.c: 857: }
  2081                           ;main.c: 860: if ( dmflags & 0x10 ) {
  2082  00174A  A817               	btfss	doDM@dmflags,4,c
  2083  00174C  D00C               	goto	l291
  2084                           
  2085                           ;main.c: 861: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2086  00174E  0100               	movlb	0	; () banked
  2087  001750  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2088  001752  E009               	bz	l291
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;main.c: 862: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  2092  001754  6A09               	clrf	?_readEEPROM+1,c
  2093  001756  0E21               	movlw	33
  2094  001758  6E08               	movwf	?_readEEPROM,c
  2095  00175A  ECD5  F016         	call	_readEEPROM	;wreg free
  2096  00175E  0100               	movlb	0	; () banked
  2097  001760  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2098  001762  E001 D0A5          	bnz	l4391
  2099  001766                     l291:
  2100                           
  2101                           ;main.c: 864: }
  2102                           ;main.c: 865: }
  2103                           ;main.c: 866: }
  2104                           ;main.c: 869: if ( dmflags & 0x08 ) {
  2105  001766  A617               	btfss	doDM@dmflags,3,c
  2106  001768  D00C               	goto	l4367
  2107                           
  2108                           ;main.c: 870: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2109  00176A  0100               	movlb	0	; () banked
  2110  00176C  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2111  00176E  E009               	bz	l4367
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;main.c: 871: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  2115  001770  6A09               	clrf	?_readEEPROM+1,c
  2116  001772  0E21               	movlw	33
  2117  001774  6E08               	movwf	?_readEEPROM,c
  2118  001776  ECD5  F016         	call	_readEEPROM	;wreg free
  2119  00177A  0100               	movlb	0	; () banked
  2120  00177C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2121  00177E  E001 D097          	bnz	l4391
  2122  001782                     l4367:
  2123                           
  2124                           ;main.c: 873: }
  2125                           ;main.c: 874: }
  2126                           ;main.c: 875: }
  2127                           ;main.c: 877: class_filter = ( dmflags & 0x01)*256 +
  2128                           ;main.c: 878: readEEPROM( 0x21 +
  2129                           ;main.c: 879: 0 +
  2130                           ;main.c: 880: (8 * i) +
  2131                           ;main.c: 881: 3);
  2132  001782  5018               	movf	doDM@i,w,c
  2133  001784  0D08               	mullw	8
  2134  001786  0E24               	movlw	36
  2135  001788  24F3               	addwf	prodl,w,c
  2136  00178A  6E08               	movwf	?_readEEPROM,c
  2137  00178C  0E00               	movlw	0
  2138  00178E  20F4               	addwfc	prodh,w,c
  2139  001790  6E09               	movwf	?_readEEPROM+1,c
  2140  001792  ECD5  F016         	call	_readEEPROM	;wreg free
  2141  001796  6E0C               	movwf	??_doDM& (0+255),c
  2142  001798  5017               	movf	doDM@dmflags,w,c
  2143  00179A  0B01               	andlw	1
  2144  00179C  6E0E               	movwf	(??_doDM+2)& (0+255),c
  2145  00179E  6A0D               	clrf	(??_doDM+1)& (0+255),c
  2146  0017A0  500C               	movf	??_doDM,w,c
  2147  0017A2  240D               	addwf	??_doDM+1,w,c
  2148  0017A4  6E0F               	movwf	doDM@class_filter,c
  2149  0017A6  0E00               	movlw	0
  2150  0017A8  200E               	addwfc	??_doDM+2,w,c
  2151  0017AA  6E10               	movwf	doDM@class_filter+1,c
  2152                           
  2153                           ;main.c: 882: class_mask = ( dmflags & 0x02)*256 +
  2154                           ;main.c: 883: readEEPROM( 0x21 +
  2155                           ;main.c: 884: 0 +
  2156                           ;main.c: 885: (8 * i) +
  2157                           ;main.c: 886: 2);
  2158  0017AC  5018               	movf	doDM@i,w,c
  2159  0017AE  0D08               	mullw	8
  2160  0017B0  0E23               	movlw	35
  2161  0017B2  24F3               	addwf	prodl,w,c
  2162  0017B4  6E08               	movwf	?_readEEPROM,c
  2163  0017B6  0E00               	movlw	0
  2164  0017B8  20F4               	addwfc	prodh,w,c
  2165  0017BA  6E09               	movwf	?_readEEPROM+1,c
  2166  0017BC  ECD5  F016         	call	_readEEPROM	;wreg free
  2167  0017C0  6E0C               	movwf	??_doDM& (0+255),c
  2168  0017C2  5017               	movf	doDM@dmflags,w,c
  2169  0017C4  0B02               	andlw	2
  2170  0017C6  6E0E               	movwf	(??_doDM+2)& (0+255),c
  2171  0017C8  6A0D               	clrf	(??_doDM+1)& (0+255),c
  2172  0017CA  500C               	movf	??_doDM,w,c
  2173  0017CC  240D               	addwf	??_doDM+1,w,c
  2174  0017CE  6E11               	movwf	doDM@class_mask,c
  2175  0017D0  0E00               	movlw	0
  2176  0017D2  200E               	addwfc	??_doDM+2,w,c
  2177  0017D4  6E12               	movwf	doDM@class_mask+1,c
  2178                           
  2179                           ;main.c: 887: type_filter = readEEPROM( 0x21 +
  2180                           ;main.c: 888: 0 +
  2181                           ;main.c: 889: (8 * i) +
  2182                           ;main.c: 890: 5);
  2183  0017D6  5018               	movf	doDM@i,w,c
  2184  0017D8  D870               	call	PL2	;call to abstracted procedure
  2185  0017DA  0E26               	movlw	38
  2186  0017DC  240C               	addwf	??_doDM,w,c
  2187  0017DE  6E08               	movwf	?_readEEPROM,c
  2188  0017E0  0E00               	movlw	0
  2189  0017E2  200D               	addwfc	??_doDM+1,w,c
  2190  0017E4  6E09               	movwf	?_readEEPROM+1,c
  2191  0017E6  ECD5  F016         	call	_readEEPROM	;wreg free
  2192  0017EA  6E13               	movwf	doDM@type_filter,c
  2193                           
  2194                           ;main.c: 891: type_mask = readEEPROM( 0x21 +
  2195                           ;main.c: 892: 0 +
  2196                           ;main.c: 893: (8 * i) +
  2197                           ;main.c: 894: 4);
  2198  0017EC  5018               	movf	doDM@i,w,c
  2199  0017EE  D865               	call	PL2	;call to abstracted procedure
  2200  0017F0  0E25               	movlw	37
  2201  0017F2  240C               	addwf	??_doDM,w,c
  2202  0017F4  6E08               	movwf	?_readEEPROM,c
  2203  0017F6  0E00               	movlw	0
  2204  0017F8  200D               	addwfc	??_doDM+1,w,c
  2205  0017FA  6E09               	movwf	?_readEEPROM+1,c
  2206  0017FC  ECD5  F016         	call	_readEEPROM	;wreg free
  2207  001800  6E14               	movwf	doDM@type_mask,c
  2208                           
  2209                           ;main.c: 896: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2210                           ;main.c: 897: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2211  001802  0100               	movlb	0	; () banked
  2212  001804  EE20  F077         	lfsr	2,_vscp_imsg+2
  2213  001808  CFDE F00C          	movff	postinc2,??_doDM
  2214  00180C  CFDD F00D          	movff	postdec2,??_doDM+1
  2215  001810  500F               	movf	doDM@class_filter,w,c
  2216  001812  1A0C               	xorwf	??_doDM,f,c
  2217  001814  5010               	movf	doDM@class_filter+1,w,c
  2218  001816  1A0D               	xorwf	??_doDM+1,f,c
  2219  001818  5011               	movf	doDM@class_mask,w,c
  2220  00181A  160C               	andwf	??_doDM,f,c
  2221  00181C  5012               	movf	doDM@class_mask+1,w,c
  2222  00181E  160D               	andwf	??_doDM+1,f,c
  2223  001820  500D               	movf	??_doDM+1,w,c
  2224  001822  100C               	iorwf	??_doDM,w,c
  2225  001824  E145               	bnz	l4391
  2226                           
  2227                           ; BSR set to: 0
  2228  001826  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2229  001828  1813               	xorwf	doDM@type_filter,w,c
  2230  00182A  1414               	andwf	doDM@type_mask,w,c
  2231  00182C  E02D               	bz	l4389
  2232  00182E  D040               	goto	l4391
  2233  001830                     l4379:
  2234                           
  2235                           ;main.c: 906: actionSet( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2236  001830  5018               	movf	doDM@i,w,c
  2237  001832  D843               	call	PL2	;call to abstracted procedure
  2238  001834  D84E               	call	PL6	;call to abstracted procedure
  2239  001836  ECD5  F016         	call	_readEEPROM	;wreg free
  2240  00183A  6E15               	movwf	_doDM$1984,c
  2241                           
  2242                           ;main.c: 906: actionSet( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2243  00183C  C015  F00B         	movff	_doDM$1984,?_actionSet
  2244  001840  5017               	movf	doDM@dmflags,w,c
  2245  001842  EC89  F012         	call	_actionSet
  2246                           
  2247                           ;main.c: 907: break;
  2248  001846  D034               	goto	l4391
  2249  001848                     l4381:
  2250                           
  2251                           ;main.c: 910: actionClr( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2252  001848  5018               	movf	doDM@i,w,c
  2253  00184A  D837               	call	PL2	;call to abstracted procedure
  2254  00184C  D842               	call	PL6	;call to abstracted procedure
  2255  00184E  ECD5  F016         	call	_readEEPROM	;wreg free
  2256  001852  6E16               	movwf	_doDM$1985,c
  2257                           
  2258                           ;main.c: 910: actionClr( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2259  001854  C016  F00B         	movff	_doDM$1985,?_actionClr
  2260  001858  5017               	movf	doDM@dmflags,w,c
  2261  00185A  EC2F  F012         	call	_actionClr
  2262                           
  2263                           ;main.c: 911: break;
  2264  00185E  D028               	goto	l4391
  2265  001860                     l4383:
  2266                           
  2267                           ;main.c: 914: actionSetAll( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2268  001860  5018               	movf	doDM@i,w,c
  2269  001862  D82B               	call	PL2	;call to abstracted procedure
  2270  001864  D836               	call	PL6	;call to abstracted procedure
  2271  001866  ECD5  F016         	call	_readEEPROM	;wreg free
  2272  00186A  6E0B               	movwf	?_actionSetAll,c
  2273  00186C  5017               	movf	doDM@dmflags,w,c
  2274  00186E  EC36  F017         	call	_actionSetAll
  2275                           
  2276                           ;main.c: 915: break;
  2277  001872  D01E               	goto	l4391
  2278  001874                     l4385:
  2279                           
  2280                           ;main.c: 918: actionClrAll( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2281  001874  5018               	movf	doDM@i,w,c
  2282  001876  D821               	call	PL2	;call to abstracted procedure
  2283  001878  D82C               	call	PL6	;call to abstracted procedure
  2284  00187A  ECD5  F016         	call	_readEEPROM	;wreg free
  2285  00187E  6E0B               	movwf	?_actionClrAll,c
  2286  001880  5017               	movf	doDM@dmflags,w,c
  2287  001882  EC32  F017         	call	_actionClrAll
  2288                           
  2289                           ;main.c: 919: break;
  2290  001886  D014               	goto	l4391
  2291  001888                     l4389:
  2292                           
  2293                           ; BSR set to: 0
  2294  001888  5018               	movf	doDM@i,w,c
  2295  00188A  D817               	call	PL2	;call to abstracted procedure
  2296  00188C  0E27               	movlw	39
  2297  00188E  240C               	addwf	??_doDM,w,c
  2298  001890  6E08               	movwf	?_readEEPROM,c
  2299  001892  0E00               	movlw	0
  2300  001894  200D               	addwfc	??_doDM+1,w,c
  2301  001896  6E09               	movwf	?_readEEPROM+1,c
  2302  001898  ECD5  F016         	call	_readEEPROM	;wreg free
  2303                           
  2304                           ; Switch size 1, requested type "space"
  2305                           ; Number of cases is 5, Range of values is 0 to 4
  2306                           ; switch strategies available:
  2307                           ; Name         Instructions Cycles
  2308                           ; simple_byte           16     9 (average)
  2309                           ;	Chosen strategy is simple_byte
  2310  00189C  0A00               	xorlw	0	; case 0
  2311  00189E  E008               	bz	l4391
  2312  0018A0  0A01               	xorlw	1	; case 1
  2313  0018A2  E0C6               	bz	l4379
  2314  0018A4  0A03               	xorlw	3	; case 2
  2315  0018A6  E0D0               	bz	l4381
  2316  0018A8  0A01               	xorlw	1	; case 3
  2317  0018AA  E0DA               	bz	l4383
  2318  0018AC  0A07               	xorlw	7	; case 4
  2319  0018AE  E0E2               	bz	l4385
  2320  0018B0                     l4391:
  2321  0018B0  2A18               	incf	doDM@i,f,c
  2322  0018B2  0E07               	movlw	7
  2323  0018B4  6418               	cpfsgt	doDM@i,c
  2324  0018B6  D72C               	goto	l4345
  2325  0018B8  0C07               	retlw	7
  2326  0018BA                     __end_of_doDM:
  2327                           	opt stack 0
  2328  0018BA                     PL2:
  2329                           	opt stack 26
  2330  0018BA  6E0C               	movwf	??_doDM& (0+255),c
  2331  0018BC  6A0D               	clrf	(??_doDM+1)& (0+255),c
  2332  0018BE  90D8               	bcf	status,0,c
  2333  0018C0  360C               	rlcf	??_doDM,f,c
  2334  0018C2  360D               	rlcf	??_doDM+1,f,c
  2335  0018C4  90D8               	bcf	status,0,c
  2336  0018C6  360C               	rlcf	??_doDM,f,c
  2337  0018C8  360D               	rlcf	??_doDM+1,f,c
  2338  0018CA  90D8               	bcf	status,0,c
  2339  0018CC  360C               	rlcf	??_doDM,f,c
  2340  0018CE  360D               	rlcf	??_doDM+1,f,c
  2341  0018D0  0012               	return	
  2342  0018D2                     __end_ofPL2:
  2343                           	opt stack 0
  2344  0018D2                     PL6:
  2345                           	opt stack 26
  2346  0018D2  0E28               	movlw	40
  2347  0018D4  240C               	addwf	??_doDM,w,c
  2348  0018D6  6E08               	movwf	?_readEEPROM,c
  2349  0018D8  0E00               	movlw	0
  2350  0018DA  200D               	addwfc	??_doDM+1,w,c
  2351  0018DC  6E09               	movwf	?_readEEPROM+1,c
  2352  0018DE  0012               	return	
  2353  0018E0                     __end_ofPL6:
  2354                           	opt stack 0
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           intcon	equ	0xFF2
  2362                           postinc0	equ	0xFEE
  2363                           wreg	equ	0xFE8
  2364                           indf1	equ	0xFE7
  2365                           fsr1h	equ	0xFE2
  2366                           fsr1l	equ	0xFE1
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           plusw2	equ	0xFDB
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _actionClrAll *****************
  2376 ;; Defined at:
  2377 ;;		line 1142 in file "../main.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  dmflags         1    wreg     unsigned char 
  2380 ;;  param           1   10[COMRAM] unsigned char 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  dmflags         1    0[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;		None               void
  2385 ;; Registers used:
  2386 ;;		wreg
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2392 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    2
  2399 ;; This function calls:
  2400 ;;		Nothing
  2401 ;; This function is called by:
  2402 ;;		_doDM
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text9
  2407  002E64                     __ptext9:
  2408                           	opt stack 0
  2409  002E64                     _actionClrAll:
  2410                           	opt stack 27
  2411                           
  2412                           ;main.c: 1143: PORTA = 0x00;
  2413                           
  2414                           ;incstack = 0
  2415                           ;incstack = 0
  2416  002E64  6A80               	clrf	3968,c	;volatile
  2417                           
  2418                           ;main.c: 1144: PORTB = 0x00;
  2419  002E66  6A81               	clrf	3969,c	;volatile
  2420                           
  2421                           ;main.c: 1145: PORTC = 0x00;
  2422  002E68  6A82               	clrf	3970,c	;volatile
  2423  002E6A  0012               	return	
  2424  002E6C                     __end_of_actionClrAll:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf1	equ	0xFE7
  2436                           fsr1h	equ	0xFE2
  2437                           fsr1l	equ	0xFE1
  2438                           indf2	equ	0xFDF
  2439                           postinc2	equ	0xFDE
  2440                           postdec2	equ	0xFDD
  2441                           plusw2	equ	0xFDB
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function _actionSetAll *****************
  2447 ;; Defined at:
  2448 ;;		line 1129 in file "../main.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  dmflags         1    wreg     unsigned char 
  2451 ;;  param           1   10[COMRAM] unsigned char 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  dmflags         1    0[COMRAM] unsigned char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;		None               void
  2456 ;; Registers used:
  2457 ;;		wreg
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2463 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2467 ;;Total ram usage:        1 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    2
  2470 ;; This function calls:
  2471 ;;		Nothing
  2472 ;; This function is called by:
  2473 ;;		_doDM
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text10
  2478  002E6C                     __ptext10:
  2479                           	opt stack 0
  2480  002E6C                     _actionSetAll:
  2481                           	opt stack 27
  2482                           
  2483                           ;main.c: 1130: PORTA = 0xff;
  2484                           
  2485                           ;incstack = 0
  2486                           ;incstack = 0
  2487  002E6C  6880               	setf	3968,c	;volatile
  2488                           
  2489                           ;main.c: 1131: PORTB = 0xff;
  2490  002E6E  6881               	setf	3969,c	;volatile
  2491                           
  2492                           ;main.c: 1132: PORTC = 0xff;
  2493  002E70  6882               	setf	3970,c	;volatile
  2494  002E72  0012               	return	
  2495  002E74                     __end_of_actionSetAll:
  2496                           	opt stack 0
  2497                           tblptru	equ	0xFF8
  2498                           tblptrh	equ	0xFF7
  2499                           tblptrl	equ	0xFF6
  2500                           tablat	equ	0xFF5
  2501                           prodh	equ	0xFF4
  2502                           prodl	equ	0xFF3
  2503                           intcon	equ	0xFF2
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           indf1	equ	0xFE7
  2507                           fsr1h	equ	0xFE2
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           plusw2	equ	0xFDB
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _actionClr *****************
  2518 ;; Defined at:
  2519 ;;		line 1032 in file "../main.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  dmflags         1    wreg     unsigned char 
  2522 ;;  param           1   10[COMRAM] unsigned char 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  dmflags         1    0[COMRAM] unsigned char 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;		None               void
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2537 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2538 ;;Total ram usage:        1 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    3
  2541 ;; This function calls:
  2542 ;;		_readEEPROM
  2543 ;; This function is called by:
  2544 ;;		_doDM
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text11
  2549  00245E                     __ptext11:
  2550                           	opt stack 0
  2551  00245E                     _actionClr:
  2552                           	opt stack 26
  2553                           
  2554                           ;main.c: 1034: if ( param & 0x80 ) {
  2555                           
  2556                           ;incstack = 0
  2557                           ;incstack = 0
  2558  00245E  AE0B               	btfss	actionClr@param,7,c
  2559  002460  D02F               	goto	l4705
  2560                           
  2561                           ;main.c: 1036: param &= 0x80;
  2562  002462  0E80               	movlw	128
  2563  002464  160B               	andwf	actionClr@param,f,c
  2564                           
  2565                           ;main.c: 1038: if ( readEEPROM( 0x21 + 5 + (param - 3) )
  2566                           ;main.c: 1039: != vscp_imsg.data[ 2 ] ) {
  2567  002466  0E23               	movlw	35
  2568  002468  240B               	addwf	actionClr@param,w,c
  2569  00246A  6E08               	movwf	?_readEEPROM,c
  2570  00246C  6A09               	clrf	?_readEEPROM+1,c
  2571  00246E  0E00               	movlw	0
  2572  002470  2209               	addwfc	?_readEEPROM+1,f,c
  2573  002472  ECD5  F016         	call	_readEEPROM	;wreg free
  2574  002476  0100               	movlb	0	; () banked
  2575  002478  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2576  00247A  A4D8               	btfss	status,2,c
  2577  00247C  0012               	return	
  2578  00247E  D020               	goto	l4705
  2579  002480                     l336:
  2580                           
  2581                           ;main.c: 1047: PORTCbits.RC7 = 0;
  2582  002480  9E82               	bcf	3970,7,c	;volatile
  2583                           
  2584                           ;main.c: 1048: break;
  2585  002482  0012               	return	
  2586  002484                     l338:
  2587                           
  2588                           ;main.c: 1051: PORTCbits.RC6 = 0;
  2589  002484  9C82               	bcf	3970,6,c	;volatile
  2590                           
  2591                           ;main.c: 1052: break;
  2592  002486  0012               	return	
  2593  002488                     l339:
  2594                           
  2595                           ;main.c: 1055: PORTCbits.RC3 = 0;
  2596  002488  9682               	bcf	3970,3,c	;volatile
  2597                           
  2598                           ;main.c: 1056: break;
  2599  00248A  0012               	return	
  2600  00248C                     l340:
  2601                           
  2602                           ;main.c: 1059: PORTCbits.RC4 = 0;
  2603  00248C  9882               	bcf	3970,4,c	;volatile
  2604                           
  2605                           ;main.c: 1060: break;
  2606  00248E  0012               	return	
  2607  002490                     l341:
  2608                           
  2609                           ;main.c: 1063: PORTCbits.RC5 = 0;
  2610  002490  9A82               	bcf	3970,5,c	;volatile
  2611                           
  2612                           ;main.c: 1064: break;
  2613  002492  0012               	return	
  2614  002494                     l342:
  2615                           
  2616                           ;main.c: 1067: PORTAbits.RA0 = 0;
  2617  002494  9080               	bcf	3968,0,c	;volatile
  2618                           
  2619                           ;main.c: 1068: break;
  2620  002496  0012               	return	
  2621  002498                     l343:
  2622                           
  2623                           ;main.c: 1071: PORTAbits.RA1 = 0;
  2624  002498  9280               	bcf	3968,1,c	;volatile
  2625                           
  2626                           ;main.c: 1072: break;
  2627  00249A  0012               	return	
  2628  00249C                     l344:
  2629                           
  2630                           ;main.c: 1075: PORTAbits.RA2 = 0;
  2631  00249C  9480               	bcf	3968,2,c	;volatile
  2632                           
  2633                           ;main.c: 1076: break;
  2634  00249E  0012               	return	
  2635  0024A0                     l345:
  2636                           
  2637                           ;main.c: 1079: PORTAbits.RA3 = 0;
  2638  0024A0  9680               	bcf	3968,3,c	;volatile
  2639                           
  2640                           ;main.c: 1080: break;
  2641  0024A2  0012               	return	
  2642  0024A4                     l346:
  2643                           
  2644                           ;main.c: 1083: PORTAbits.RA5 = 0;
  2645  0024A4  9A80               	bcf	3968,5,c	;volatile
  2646                           
  2647                           ;main.c: 1084: break;
  2648  0024A6  0012               	return	
  2649  0024A8                     l349:
  2650                           
  2651                           ;main.c: 1095: PORTBbits.RB4 = 0;
  2652  0024A8  9881               	bcf	3969,4,c	;volatile
  2653                           
  2654                           ;main.c: 1096: break;
  2655  0024AA  0012               	return	
  2656  0024AC                     l350:
  2657                           
  2658                           ;main.c: 1099: PORTCbits.RC2 = 0;
  2659  0024AC  9482               	bcf	3970,2,c	;volatile
  2660                           
  2661                           ;main.c: 1100: break;
  2662  0024AE  0012               	return	
  2663  0024B0                     l351:
  2664                           
  2665                           ;main.c: 1103: PORTBbits.RB1 = 0;
  2666  0024B0  9281               	bcf	3969,1,c	;volatile
  2667                           
  2668                           ;main.c: 1104: break;
  2669  0024B2  0012               	return	
  2670  0024B4                     l352:
  2671                           
  2672                           ;main.c: 1107: PORTBbits.RB0 = 0;
  2673  0024B4  9081               	bcf	3969,0,c	;volatile
  2674                           
  2675                           ;main.c: 1108: break;
  2676  0024B6  0012               	return	
  2677  0024B8                     l353:
  2678                           
  2679                           ;main.c: 1111: PORTBbits.RB6 = 0;
  2680  0024B8  9C81               	bcf	3969,6,c	;volatile
  2681                           
  2682                           ;main.c: 1112: break;
  2683  0024BA  0012               	return	
  2684  0024BC                     l354:
  2685                           
  2686                           ;main.c: 1115: PORTBbits.RB5 = 0;
  2687  0024BC  9A81               	bcf	3969,5,c	;volatile
  2688                           
  2689                           ;main.c: 1116: break;
  2690  0024BE  0012               	return	
  2691  0024C0                     l4705:
  2692  0024C0  500B               	movf	actionClr@param,w,c
  2693                           
  2694                           ; Switch size 1, requested type "space"
  2695                           ; Number of cases is 18, Range of values is 3 to 20
  2696                           ; switch strategies available:
  2697                           ; Name         Instructions Cycles
  2698                           ; simple_byte           55    28 (average)
  2699                           ;	Chosen strategy is simple_byte
  2700  0024C2  0A03               	xorlw	3	; case 3
  2701  0024C4  E0DD               	bz	l336
  2702  0024C6  0A07               	xorlw	7	; case 4
  2703  0024C8  E0DD               	bz	l338
  2704  0024CA  0A01               	xorlw	1	; case 5
  2705  0024CC  E0DD               	bz	l339
  2706  0024CE  0A03               	xorlw	3	; case 6
  2707  0024D0  E0DD               	bz	l340
  2708  0024D2  0A01               	xorlw	1	; case 7
  2709  0024D4  E0DD               	bz	l341
  2710  0024D6  0A0F               	xorlw	15	; case 8
  2711  0024D8  E0DD               	bz	l342
  2712  0024DA  0A01               	xorlw	1	; case 9
  2713  0024DC  E0DD               	bz	l343
  2714  0024DE  0A03               	xorlw	3	; case 10
  2715  0024E0  E0DD               	bz	l344
  2716  0024E2  0A01               	xorlw	1	; case 11
  2717  0024E4  E0DD               	bz	l345
  2718  0024E6  0A07               	xorlw	7	; case 12
  2719  0024E8  E0DD               	bz	l346
  2720  0024EA  0A01               	xorlw	1	; case 13
  2721  0024EC  B4D8               	btfsc	status,2,c
  2722  0024EE  0012               	return	
  2723  0024F0  0A03               	xorlw	3	; case 14
  2724  0024F2  B4D8               	btfsc	status,2,c
  2725  0024F4  0012               	return	
  2726  0024F6  0A01               	xorlw	1	; case 15
  2727  0024F8  E0D7               	bz	l349
  2728  0024FA  0A1F               	xorlw	31	; case 16
  2729  0024FC  E0D7               	bz	l350
  2730  0024FE  0A01               	xorlw	1	; case 17
  2731  002500  E0D7               	bz	l351
  2732  002502  0A03               	xorlw	3	; case 18
  2733  002504  E0D7               	bz	l352
  2734  002506  0A01               	xorlw	1	; case 19
  2735  002508  E0D7               	bz	l353
  2736  00250A  0A07               	xorlw	7	; case 20
  2737  00250C  A4D8               	btfss	status,2,c
  2738  00250E  0012               	return	
  2739  002510  D7D5               	goto	l354
  2740  002512                     __end_of_actionClr:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           tblptrh	equ	0xFF7
  2744                           tblptrl	equ	0xFF6
  2745                           tablat	equ	0xFF5
  2746                           prodh	equ	0xFF4
  2747                           prodl	equ	0xFF3
  2748                           intcon	equ	0xFF2
  2749                           postinc0	equ	0xFEE
  2750                           wreg	equ	0xFE8
  2751                           indf1	equ	0xFE7
  2752                           fsr1h	equ	0xFE2
  2753                           fsr1l	equ	0xFE1
  2754                           indf2	equ	0xFDF
  2755                           postinc2	equ	0xFDE
  2756                           postdec2	equ	0xFDD
  2757                           plusw2	equ	0xFDB
  2758                           fsr2h	equ	0xFDA
  2759                           fsr2l	equ	0xFD9
  2760                           status	equ	0xFD8
  2761                           
  2762 ;; *************** function _actionSet *****************
  2763 ;; Defined at:
  2764 ;;		line 936 in file "../main.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  dmflags         1    wreg     unsigned char 
  2767 ;;  param           1   10[COMRAM] unsigned char 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;  dmflags         1    0[COMRAM] unsigned char 
  2770 ;; Return value:  Size  Location     Type
  2771 ;;		None               void
  2772 ;; Registers used:
  2773 ;;		wreg, status,2, status,0, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2779 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2783 ;;Total ram usage:        1 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    3
  2786 ;; This function calls:
  2787 ;;		_readEEPROM
  2788 ;; This function is called by:
  2789 ;;		_doDM
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text12
  2794  002512                     __ptext12:
  2795                           	opt stack 0
  2796  002512                     _actionSet:
  2797                           	opt stack 26
  2798                           
  2799                           ;main.c: 938: if ( param & 0x80 ) {
  2800                           
  2801                           ;incstack = 0
  2802                           ;incstack = 0
  2803  002512  AE0B               	btfss	actionSet@param,7,c
  2804  002514  D02F               	goto	l4693
  2805                           
  2806                           ;main.c: 940: param &= 0x80;
  2807  002516  0E80               	movlw	128
  2808  002518  160B               	andwf	actionSet@param,f,c
  2809                           
  2810                           ;main.c: 942: if ( readEEPROM( 0x21 + 5 + (param - 3) )
  2811                           ;main.c: 943: != vscp_imsg.data[ 2 ] ) {
  2812  00251A  0E23               	movlw	35
  2813  00251C  240B               	addwf	actionSet@param,w,c
  2814  00251E  6E08               	movwf	?_readEEPROM,c
  2815  002520  6A09               	clrf	?_readEEPROM+1,c
  2816  002522  0E00               	movlw	0
  2817  002524  2209               	addwfc	?_readEEPROM+1,f,c
  2818  002526  ECD5  F016         	call	_readEEPROM	;wreg free
  2819  00252A  0100               	movlb	0	; () banked
  2820  00252C  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2821  00252E  A4D8               	btfss	status,2,c
  2822  002530  0012               	return	
  2823  002532  D020               	goto	l4693
  2824  002534                     l311:
  2825                           
  2826                           ;main.c: 951: PORTCbits.RC7 = 1;
  2827  002534  8E82               	bsf	3970,7,c	;volatile
  2828                           
  2829                           ;main.c: 952: break;
  2830  002536  0012               	return	
  2831  002538                     l313:
  2832                           
  2833                           ;main.c: 955: PORTCbits.RC6 = 1;
  2834  002538  8C82               	bsf	3970,6,c	;volatile
  2835                           
  2836                           ;main.c: 956: break;
  2837  00253A  0012               	return	
  2838  00253C                     l314:
  2839                           
  2840                           ;main.c: 959: PORTCbits.RC3 = 1;
  2841  00253C  8682               	bsf	3970,3,c	;volatile
  2842                           
  2843                           ;main.c: 960: break;
  2844  00253E  0012               	return	
  2845  002540                     l315:
  2846                           
  2847                           ;main.c: 963: PORTCbits.RC4 = 1;
  2848  002540  8882               	bsf	3970,4,c	;volatile
  2849                           
  2850                           ;main.c: 964: break;
  2851  002542  0012               	return	
  2852  002544                     l316:
  2853                           
  2854                           ;main.c: 967: PORTCbits.RC5 = 1;
  2855  002544  8A82               	bsf	3970,5,c	;volatile
  2856                           
  2857                           ;main.c: 968: break;
  2858  002546  0012               	return	
  2859  002548                     l317:
  2860                           
  2861                           ;main.c: 971: PORTAbits.RA0 = 1;
  2862  002548  8080               	bsf	3968,0,c	;volatile
  2863                           
  2864                           ;main.c: 972: break;
  2865  00254A  0012               	return	
  2866  00254C                     l318:
  2867                           
  2868                           ;main.c: 975: PORTAbits.RA1 = 1;
  2869  00254C  8280               	bsf	3968,1,c	;volatile
  2870                           
  2871                           ;main.c: 976: break;
  2872  00254E  0012               	return	
  2873  002550                     l319:
  2874                           
  2875                           ;main.c: 979: PORTAbits.RA2 = 1;
  2876  002550  8480               	bsf	3968,2,c	;volatile
  2877                           
  2878                           ;main.c: 980: break;
  2879  002552  0012               	return	
  2880  002554                     l320:
  2881                           
  2882                           ;main.c: 983: PORTAbits.RA3 = 1;
  2883  002554  8680               	bsf	3968,3,c	;volatile
  2884                           
  2885                           ;main.c: 984: break;
  2886  002556  0012               	return	
  2887  002558                     l321:
  2888                           
  2889                           ;main.c: 987: PORTAbits.RA5 = 1;
  2890  002558  8A80               	bsf	3968,5,c	;volatile
  2891                           
  2892                           ;main.c: 988: break;
  2893  00255A  0012               	return	
  2894  00255C                     l324:
  2895                           
  2896                           ;main.c: 999: PORTBbits.RB4 = 1;
  2897  00255C  8881               	bsf	3969,4,c	;volatile
  2898                           
  2899                           ;main.c: 1000: break;
  2900  00255E  0012               	return	
  2901  002560                     l325:
  2902                           
  2903                           ;main.c: 1003: PORTCbits.RC2 = 1;
  2904  002560  8482               	bsf	3970,2,c	;volatile
  2905                           
  2906                           ;main.c: 1004: break;
  2907  002562  0012               	return	
  2908  002564                     l326:
  2909                           
  2910                           ;main.c: 1007: PORTBbits.RB1 = 1;
  2911  002564  8281               	bsf	3969,1,c	;volatile
  2912                           
  2913                           ;main.c: 1008: break;
  2914  002566  0012               	return	
  2915  002568                     l327:
  2916                           
  2917                           ;main.c: 1011: PORTBbits.RB0 = 1;
  2918  002568  8081               	bsf	3969,0,c	;volatile
  2919                           
  2920                           ;main.c: 1012: break;
  2921  00256A  0012               	return	
  2922  00256C                     l328:
  2923                           
  2924                           ;main.c: 1015: PORTBbits.RB6 = 1;
  2925  00256C  8C81               	bsf	3969,6,c	;volatile
  2926                           
  2927                           ;main.c: 1016: break;
  2928  00256E  0012               	return	
  2929  002570                     l329:
  2930                           
  2931                           ;main.c: 1019: PORTBbits.RB5 = 1;
  2932  002570  8A81               	bsf	3969,5,c	;volatile
  2933                           
  2934                           ;main.c: 1020: break;
  2935  002572  0012               	return	
  2936  002574                     l4693:
  2937  002574  500B               	movf	actionSet@param,w,c
  2938                           
  2939                           ; Switch size 1, requested type "space"
  2940                           ; Number of cases is 18, Range of values is 3 to 20
  2941                           ; switch strategies available:
  2942                           ; Name         Instructions Cycles
  2943                           ; simple_byte           55    28 (average)
  2944                           ;	Chosen strategy is simple_byte
  2945  002576  0A03               	xorlw	3	; case 3
  2946  002578  E0DD               	bz	l311
  2947  00257A  0A07               	xorlw	7	; case 4
  2948  00257C  E0DD               	bz	l313
  2949  00257E  0A01               	xorlw	1	; case 5
  2950  002580  E0DD               	bz	l314
  2951  002582  0A03               	xorlw	3	; case 6
  2952  002584  E0DD               	bz	l315
  2953  002586  0A01               	xorlw	1	; case 7
  2954  002588  E0DD               	bz	l316
  2955  00258A  0A0F               	xorlw	15	; case 8
  2956  00258C  E0DD               	bz	l317
  2957  00258E  0A01               	xorlw	1	; case 9
  2958  002590  E0DD               	bz	l318
  2959  002592  0A03               	xorlw	3	; case 10
  2960  002594  E0DD               	bz	l319
  2961  002596  0A01               	xorlw	1	; case 11
  2962  002598  E0DD               	bz	l320
  2963  00259A  0A07               	xorlw	7	; case 12
  2964  00259C  E0DD               	bz	l321
  2965  00259E  0A01               	xorlw	1	; case 13
  2966  0025A0  B4D8               	btfsc	status,2,c
  2967  0025A2  0012               	return	
  2968  0025A4  0A03               	xorlw	3	; case 14
  2969  0025A6  B4D8               	btfsc	status,2,c
  2970  0025A8  0012               	return	
  2971  0025AA  0A01               	xorlw	1	; case 15
  2972  0025AC  E0D7               	bz	l324
  2973  0025AE  0A1F               	xorlw	31	; case 16
  2974  0025B0  E0D7               	bz	l325
  2975  0025B2  0A01               	xorlw	1	; case 17
  2976  0025B4  E0D7               	bz	l326
  2977  0025B6  0A03               	xorlw	3	; case 18
  2978  0025B8  E0D7               	bz	l327
  2979  0025BA  0A01               	xorlw	1	; case 19
  2980  0025BC  E0D7               	bz	l328
  2981  0025BE  0A07               	xorlw	7	; case 20
  2982  0025C0  A4D8               	btfss	status,2,c
  2983  0025C2  0012               	return	
  2984  0025C4  D7D5               	goto	l329
  2985  0025C6                     __end_of_actionSet:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           indf1	equ	0xFE7
  2997                           fsr1h	equ	0xFE2
  2998                           fsr1l	equ	0xFE1
  2999                           indf2	equ	0xFDF
  3000                           postinc2	equ	0xFDE
  3001                           postdec2	equ	0xFDD
  3002                           plusw2	equ	0xFDB
  3003                           fsr2h	equ	0xFDA
  3004                           fsr2l	equ	0xFD9
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _vscp_handleProtocolEvent *****************
  3008 ;; Defined at:
  3009 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  bytes           1   33[BANK0 ] unsigned char 
  3014 ;;  page_save       2   29[BANK0 ] unsigned short 
  3015 ;;  i               1   39[BANK0 ] unsigned char 
  3016 ;;  page_save       2   27[BANK0 ] unsigned short 
  3017 ;;  byte            1   43[BANK0 ] unsigned char 
  3018 ;;  bytes           1   41[BANK0 ] unsigned char 
  3019 ;;  cb              1   38[BANK0 ] unsigned char 
  3020 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3021 ;;  j               1   46[BANK0 ] unsigned char 
  3022 ;;  i               1   44[BANK0 ] unsigned char 
  3023 ;;  k               1   40[BANK0 ] unsigned char 
  3024 ;;  i               1   42[BANK0 ] unsigned char 
  3025 ;;  len             1   36[BANK0 ] unsigned char 
  3026 ;;  pos             1   35[BANK0 ] unsigned char 
  3027 ;;  i               1   45[BANK0 ] unsigned char 
  3028 ;;  len             1   34[BANK0 ] unsigned char 
  3029 ;;  pos             1   32[BANK0 ] unsigned char 
  3030 ;;  offset          1   31[BANK0 ] unsigned char 
  3031 ;; Return value:  Size  Location     Type
  3032 ;;		None               void
  3033 ;; Registers used:
  3034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : F/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3041 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3042 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3043 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3044 ;;Total ram usage:       27 bytes
  3045 ;; Hardware stack levels used:    1
  3046 ;; Hardware stack levels required when called:    8
  3047 ;; This function calls:
  3048 ;;		_vscp_init
  3049 ;;		_vscp_readAppReg
  3050 ;;		_vscp_writeAppReg
  3051 ;;		_vscp_sendEvent
  3052 ;;		_vscp_getGUID
  3053 ;;		_vscp_getMDF_URL
  3054 ;;		_vscp_goBootloaderMode
  3055 ;;		_vscp_getMatrixInfo
  3056 ;;		_vscp_handleHeartbeat
  3057 ;;		_vscp_handleSetNickname
  3058 ;;		_vscp_handleDropNickname
  3059 ;;		_vscp_newNodeOnline
  3060 ;;		_vscp_readRegister
  3061 ;;		_vscp_readStdReg
  3062 ;;		_vscp_writeRegister
  3063 ;;		_vscp_writeStdReg
  3064 ;;		___lbmod
  3065 ;; This function is called by:
  3066 ;;		_main
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text13
  3071  000F22                     __ptext13:
  3072                           	opt stack 0
  3073  000F22                     _vscp_handleProtocolEvent:
  3074                           	opt stack 22
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  3078                           
  3079                           ;incstack = 0
  3080                           ;incstack = 0
  3081  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  3082  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3083  000F26  A4D8               	btfss	status,2,c
  3084  000F28  0012               	return	
  3085  000F2A  D29F               	goto	l6043
  3086  000F2C                     l5631:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  3090  000F2C  EFED  F014         	goto	_vscp_handleHeartbeat	;wreg free
  3091  000F30                     l5633:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  3095  000F30  EF76  F015         	goto	_vscp_newNodeOnline	;wreg free
  3096  000F34                     l5635:
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  3100  000F34  EFEB  F015         	goto	_vscp_handleSetNickname	;wreg free
  3101  000F38                     l5637:
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  3105  000F38  EF48  F015         	goto	_vscp_handleDropNickname	;wreg free
  3106  000F3C                     l5639:
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  3110                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3111  000F3C  5175               	movf	_vscp_imsg& (0+255),w,b
  3112  000F3E  0B0F               	andlw	15
  3113  000F40  0A02               	xorlw	2
  3114  000F42  A4D8               	btfss	status,2,c
  3115  000F44  0012               	return	
  3116                           
  3117                           ; BSR set to: 0
  3118  000F46  5170               	movf	_vscp_nickname& (0+255),w,b
  3119  000F48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3120  000F4C  62DF               	cpfseq	indf2,c
  3121  000F4E  0012               	return	
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  3125  000F50  0E80               	movlw	128
  3126  000F52  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3127  000F54  D011               	goto	l5659
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3131  000F56  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3132  000F58  EC94  F013         	call	_vscp_readAppReg
  3133  000F5C                     L1:
  3134  000F5C  0100               	movlb	0	; () banked
  3135  000F5E  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3139  000F60  C07C  F088         	movff	_vscp_imsg+7,_vscp_omsg+5
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  3143  000F64  0E03               	movlw	3
  3144  000F66  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  3148  000F68  0E82               	movlw	130
  3149  000F6A  6F83               	movwf	_vscp_omsg& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  3153  000F6C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3154  000F6E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  3158  000F70  0E0A               	movlw	10
  3159  000F72  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;vscp_firmware.c: 832: vscp_sendEvent();
  3163  000F74  EFB2  F015         	goto	_vscp_sendEvent	;wreg free
  3164  000F78                     l5659:
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  3168                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3169  000F78  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3170  000F7A  EC70  F00C         	call	_vscp_readStdReg
  3171  000F7E  D7EE               	goto	L1
  3172  000F80                     l5673:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3176                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3177  000F80  5175               	movf	_vscp_imsg& (0+255),w,b
  3178  000F82  0B0F               	andlw	15
  3179  000F84  0A03               	xorlw	3
  3180  000F86  A4D8               	btfss	status,2,c
  3181  000F88  0012               	return	
  3182                           
  3183                           ; BSR set to: 0
  3184  000F8A  5170               	movf	_vscp_nickname& (0+255),w,b
  3185  000F8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3186  000F90  62DF               	cpfseq	indf2,c
  3187  000F92  0012               	return	
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  3191  000F94  0E80               	movlw	128
  3192  000F96  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3193  000F98  D006               	goto	l5693
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  3197                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3198  000F9A  C07D  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3199  000F9E  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3200  000FA0  EC5B  F010         	call	_vscp_writeAppReg
  3201  000FA4  D7DB               	goto	L1
  3202  000FA6                     l5693:
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  3206                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3207  000FA6  C07D  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3208  000FAA  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3209  000FAC  ECE3  F010         	call	_vscp_writeStdReg
  3210  000FB0  D7D5               	goto	L1
  3211  000FB2                     l5707:
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3215                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3216                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3217                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3218                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3219                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3220                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3221  000FB2  5170               	movf	_vscp_nickname& (0+255),w,b
  3222  000FB4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3223  000FB8  62DF               	cpfseq	indf2,c
  3224  000FBA  0012               	return	
  3225                           
  3226                           ; BSR set to: 0
  3227  000FBC  0E00               	movlw	0
  3228  000FBE  ECCB  F016         	call	_vscp_getGUID
  3229  000FC2  0100               	movlb	0	; () banked
  3230  000FC4  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3231  000FC6  A4D8               	btfss	status,2,c
  3232  000FC8  0012               	return	
  3233                           
  3234                           ; BSR set to: 0
  3235  000FCA  0E03               	movlw	3
  3236  000FCC  ECCB  F016         	call	_vscp_getGUID
  3237  000FD0  0100               	movlb	0	; () banked
  3238  000FD2  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3239  000FD4  A4D8               	btfss	status,2,c
  3240  000FD6  0012               	return	
  3241                           
  3242                           ; BSR set to: 0
  3243  000FD8  0E05               	movlw	5
  3244  000FDA  ECCB  F016         	call	_vscp_getGUID
  3245  000FDE  0100               	movlb	0	; () banked
  3246  000FE0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3247  000FE2  A4D8               	btfss	status,2,c
  3248  000FE4  0012               	return	
  3249                           
  3250                           ; BSR set to: 0
  3251  000FE6  0E07               	movlw	7
  3252  000FE8  ECCB  F016         	call	_vscp_getGUID
  3253  000FEC  0100               	movlb	0	; () banked
  3254  000FEE  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3255  000FF0  A4D8               	btfss	status,2,c
  3256  000FF2  0012               	return	
  3257                           
  3258                           ; BSR set to: 0
  3259  000FF4  504F               	movf	_vscp_page_select+1,w,c
  3260  000FF6  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3261  000FF8  A4D8               	btfss	status,2,c
  3262  000FFA  0012               	return	
  3263                           
  3264                           ; BSR set to: 0
  3265  000FFC  504E               	movf	_vscp_page_select,w,c
  3266  000FFE  EE20  F082         	lfsr	2,_vscp_imsg+13
  3267  001002  62DF               	cpfseq	indf2,c
  3268  001004  0012               	return	
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3272  001006  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3273  001008  EF87  F016         	goto	_vscp_goBootloaderMode
  3274  00100C                     l5723:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3278                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3279                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3280                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3281  00100C  0E00               	movlw	0
  3282  00100E  ECCB  F016         	call	_vscp_getGUID
  3283  001012  0100               	movlb	0	; () banked
  3284  001014  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3285  001016  E173               	bnz	l5767
  3286                           
  3287                           ; BSR set to: 0
  3288  001018  0E01               	movlw	1
  3289  00101A  ECCB  F016         	call	_vscp_getGUID
  3290  00101E  0100               	movlb	0	; () banked
  3291  001020  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3292  001022  E16D               	bnz	l5767
  3293                           
  3294                           ; BSR set to: 0
  3295  001024  0E02               	movlw	2
  3296  001026  ECCB  F016         	call	_vscp_getGUID
  3297  00102A  0100               	movlb	0	; () banked
  3298  00102C  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3299  00102E  E167               	bnz	l5767
  3300                           
  3301                           ; BSR set to: 0
  3302  001030  0E03               	movlw	3
  3303  001032  ECCB  F016         	call	_vscp_getGUID
  3304  001036  0100               	movlb	0	; () banked
  3305  001038  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3306  00103A  E161               	bnz	l5767
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  3310  00103C  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  3311  00103E  D05F               	goto	l5767
  3312  001040                     l5733:
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3316                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3317                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3318                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3319  001040  0E04               	movlw	4
  3320  001042  ECCB  F016         	call	_vscp_getGUID
  3321  001046  0100               	movlb	0	; () banked
  3322  001048  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3323  00104A  E159               	bnz	l5767
  3324                           
  3325                           ; BSR set to: 0
  3326  00104C  0E05               	movlw	5
  3327  00104E  ECCB  F016         	call	_vscp_getGUID
  3328  001052  0100               	movlb	0	; () banked
  3329  001054  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3330  001056  E153               	bnz	l5767
  3331                           
  3332                           ; BSR set to: 0
  3333  001058  0E06               	movlw	6
  3334  00105A  ECCB  F016         	call	_vscp_getGUID
  3335  00105E  0100               	movlb	0	; () banked
  3336  001060  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3337  001062  E14D               	bnz	l5767
  3338                           
  3339                           ; BSR set to: 0
  3340  001064  0E07               	movlw	7
  3341  001066  ECCB  F016         	call	_vscp_getGUID
  3342  00106A  0100               	movlb	0	; () banked
  3343  00106C  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3344  00106E  E147               	bnz	l5767
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  3348  001070  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  3349  001072  D045               	goto	l5767
  3350  001074                     l5743:
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3354                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3355                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3356                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3357  001074  0E08               	movlw	8
  3358  001076  ECCB  F016         	call	_vscp_getGUID
  3359  00107A  0100               	movlb	0	; () banked
  3360  00107C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3361  00107E  E13F               	bnz	l5767
  3362                           
  3363                           ; BSR set to: 0
  3364  001080  0E09               	movlw	9
  3365  001082  ECCB  F016         	call	_vscp_getGUID
  3366  001086  0100               	movlb	0	; () banked
  3367  001088  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3368  00108A  E139               	bnz	l5767
  3369                           
  3370                           ; BSR set to: 0
  3371  00108C  0E0A               	movlw	10
  3372  00108E  ECCB  F016         	call	_vscp_getGUID
  3373  001092  0100               	movlb	0	; () banked
  3374  001094  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3375  001096  E133               	bnz	l5767
  3376                           
  3377                           ; BSR set to: 0
  3378  001098  0E0B               	movlw	11
  3379  00109A  ECCB  F016         	call	_vscp_getGUID
  3380  00109E  0100               	movlb	0	; () banked
  3381  0010A0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3382  0010A2  E12D               	bnz	l5767
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  3386  0010A4  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  3387  0010A6  D02B               	goto	l5767
  3388  0010A8                     l5753:
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3392                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3393                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3394                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3395  0010A8  0E0C               	movlw	12
  3396  0010AA  ECCB  F016         	call	_vscp_getGUID
  3397  0010AE  0100               	movlb	0	; () banked
  3398  0010B0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3399  0010B2  E125               	bnz	l5767
  3400                           
  3401                           ; BSR set to: 0
  3402  0010B4  0E0D               	movlw	13
  3403  0010B6  ECCB  F016         	call	_vscp_getGUID
  3404  0010BA  0100               	movlb	0	; () banked
  3405  0010BC  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3406  0010BE  E11F               	bnz	l5767
  3407                           
  3408                           ; BSR set to: 0
  3409  0010C0  0E0E               	movlw	14
  3410  0010C2  ECCB  F016         	call	_vscp_getGUID
  3411  0010C6  0100               	movlb	0	; () banked
  3412  0010C8  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3413  0010CA  E119               	bnz	l5767
  3414                           
  3415                           ; BSR set to: 0
  3416  0010CC  0E0F               	movlw	15
  3417  0010CE  ECCB  F016         	call	_vscp_getGUID
  3418  0010D2  0100               	movlb	0	; () banked
  3419  0010D4  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3420  0010D6  E113               	bnz	l5767
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  3424  0010D8  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  3425  0010DA  D011               	goto	l5767
  3426  0010DC                     l1006:
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  3430  0010DC  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  3431                           
  3432                           ;vscp_firmware.c: 952: break;
  3433  0010DE  D00F               	goto	l5767
  3434  0010E0                     l5765:
  3435                           
  3436                           ; BSR set to: 0
  3437  0010E0  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3438  0010E2  0B0F               	andlw	15
  3439  0010E4  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3440  0010E6  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3441                           
  3442                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3443                           ; Switch size 1, requested type "space"
  3444                           ; Number of cases is 1, Range of values is 0 to 0
  3445                           ; switch strategies available:
  3446                           ; Name         Instructions Cycles
  3447                           ; simple_byte            4     3 (average)
  3448                           ;	Chosen strategy is simple_byte
  3449  0010E8  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3450  0010EA  E1F8               	bnz	l1006
  3451                           
  3452                           ; BSR set to: 0
  3453                           ; Switch size 1, requested type "space"
  3454                           ; Number of cases is 4, Range of values is 0 to 3
  3455                           ; switch strategies available:
  3456                           ; Name         Instructions Cycles
  3457                           ; simple_byte           13     7 (average)
  3458                           ;	Chosen strategy is simple_byte
  3459  0010EC  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3460  0010EE  E08E               	bz	l5723
  3461  0010F0  0A01               	xorlw	1	; case 1
  3462  0010F2  E0A6               	bz	l5733
  3463  0010F4  0A03               	xorlw	3	; case 2
  3464  0010F6  E0BE               	bz	l5743
  3465  0010F8  0A01               	xorlw	1	; case 3
  3466  0010FA  E0D6               	bz	l5753
  3467  0010FC  D7EF               	goto	l1006
  3468  0010FE                     l5767:
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3472  0010FE  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3473  001100  0BF0               	andlw	240
  3474  001102  0AF0               	xorlw	240
  3475  001104  B4D8               	btfsc	status,2,c
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;vscp_firmware.c: 957: vscp_init();
  3479  001106  ECCB  F014         	call	_vscp_init	;wreg free
  3480  00110A  0012               	return	
  3481  00110C                     l5771:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3485  00110C  5170               	movf	_vscp_nickname& (0+255),w,b
  3486  00110E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3487  001112  62DF               	cpfseq	indf2,c
  3488  001114  0012               	return	
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;vscp_firmware.c: 965: uint8_t i;
  3492                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  3493  001116  6BB0               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3494                           
  3495                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  3496  001118  C07C  F0AF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3497                           
  3498                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  3499  00111C  C07D  F0B2         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3500                           
  3501                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  3502  001120  6BBD               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3503  001122  D042               	goto	l5803
  3504  001124                     l5775:
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3508  001124  0E07               	movlw	7
  3509  001126  6E08               	movwf	?___lbmod,c
  3510  001128  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3511  00112A  EC8B  F015         	call	___lbmod
  3512  00112E  0100               	movlb	0	; () banked
  3513  001130  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3514  001132  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3515  001134  0F89               	addlw	low (_vscp_omsg+6)
  3516  001136  6ED9               	movwf	fsr2l,c
  3517  001138  6ADA               	clrf	fsr2h,c
  3518  00113A  51AF               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3519  00113C  25BD               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3520  00113E  ECAC  F016         	call	_vscp_readRegister
  3521  001142  6EDF               	movwf	indf2,c
  3522                           
  3523                           ;vscp_firmware.c: 973: if ( (i % 7) == 6 || i == (len - 1) ) {
  3524  001144  0E07               	movlw	7
  3525  001146  6E08               	movwf	?___lbmod,c
  3526  001148  0100               	movlb	0	; () banked
  3527  00114A  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3528  00114C  EC8B  F015         	call	___lbmod
  3529  001150  0A06               	xorlw	6
  3530  001152  E00B               	bz	l5781
  3531  001154  0EFF               	movlw	255
  3532  001156  0100               	movlb	0	; () banked
  3533  001158  25B2               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3534  00115A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3535  00115C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3536  00115E  0EFF               	movlw	255
  3537  001160  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3538  001162  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3539  001164  19A4               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3540  001166  11A5               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3541  001168  E11E               	bnz	l5801
  3542  00116A                     l5781:
  3543                           
  3544                           ;vscp_firmware.c: 975: uint8_t bytes;
  3545                           ;vscp_firmware.c: 977: if ( ( i % 7 ) == 6 ) {
  3546  00116A  0E07               	movlw	7
  3547  00116C  6E08               	movwf	?___lbmod,c
  3548  00116E  0100               	movlb	0	; () banked
  3549  001170  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3550  001172  EC8B  F015         	call	___lbmod
  3551  001176  0A06               	xorlw	6
  3552  001178  E103               	bnz	l5785
  3553                           
  3554                           ;vscp_firmware.c: 978: bytes = 7;
  3555  00117A  0E07               	movlw	7
  3556  00117C  0100               	movlb	0	; () banked
  3557  00117E  D009               	goto	L2
  3558  001180                     l5785:
  3559                           
  3560                           ;vscp_firmware.c: 980: else {
  3561                           ;vscp_firmware.c: 981: bytes = ( i % 7 ) + 1;
  3562  001180  0E07               	movlw	7
  3563  001182  6E08               	movwf	?___lbmod,c
  3564  001184  0100               	movlb	0	; () banked
  3565  001186  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3566  001188  EC8B  F015         	call	___lbmod
  3567  00118C  0100               	movlb	0	; () banked
  3568  00118E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3569  001190  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3570  001192                     L2:
  3571  001192  6FB1               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;vscp_firmware.c: 982: }
  3575                           ;vscp_firmware.c: 984: vscp_omsg.flags = 0x80 + bytes + 1;
  3576  001194  51B1               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3577  001196  0F81               	addlw	129
  3578  001198  6F83               	movwf	_vscp_omsg& (0+255),b
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;vscp_firmware.c: 985: vscp_omsg.priority = 0x03;
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;vscp_firmware.c: 986: vscp_omsg.vscp_class = 0;
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;vscp_firmware.c: 987: vscp_omsg.vscp_type = 26;
  3588  00119A  D9AF               	call	PL34	;call to abstracted procedure
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;vscp_firmware.c: 988: vscp_omsg.data[ 0 ] = pos;
  3592  00119C  C0B0  F088         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;vscp_firmware.c: 991: vscp_sendEvent();
  3596  0011A0  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;vscp_firmware.c: 992: pos++;
  3600  0011A4  2BB0               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3601  0011A6                     l5801:
  3602                           
  3603                           ; BSR set to: 0
  3604  0011A6  2BBD               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3605  0011A8                     l5803:
  3606                           
  3607                           ; BSR set to: 0
  3608  0011A8  51B2               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3609  0011AA  5DBD               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3610  0011AC  B0D8               	btfsc	status,0,c
  3611  0011AE  0012               	return	
  3612  0011B0  D7B9               	goto	l5775
  3613  0011B2                     l5805:
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;vscp_firmware.c: 1000: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3617  0011B2  5170               	movf	_vscp_nickname& (0+255),w,b
  3618  0011B4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3619  0011B8  62DF               	cpfseq	indf2,c
  3620  0011BA  0012               	return	
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;vscp_firmware.c: 1001: uint8_t i;
  3624                           ;vscp_firmware.c: 1002: uint8_t pos = vscp_imsg.data[ 1 ];
  3625  0011BC  C07C  F0B3         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1127
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;vscp_firmware.c: 1003: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  3629  0011C0  5175               	movf	_vscp_imsg& (0+255),w,b
  3630  0011C2  0FFE               	addlw	254
  3631  0011C4  0B07               	andlw	7
  3632  0011C6  6FB4               	movwf	vscp_handleProtocolEvent@len_1128& (0+255),b
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;vscp_firmware.c: 1005: for (i = 0; i < len; i++) {
  3636  0011C8  6BBA               	clrf	vscp_handleProtocolEvent@i_1126& (0+255),b
  3637  0011CA  D016               	goto	l5819
  3638  0011CC                     l5813:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;vscp_firmware.c: 1007: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  3642  0011CC  51BA               	movf	vscp_handleProtocolEvent@i_1126& (0+255),w,b
  3643  0011CE  0F7D               	addlw	low (_vscp_imsg+8)
  3644  0011D0  6ED9               	movwf	fsr2l,c
  3645  0011D2  6ADA               	clrf	fsr2h,c
  3646  0011D4  50DF               	movf	indf2,w,c
  3647  0011D6  6E18               	movwf	?_vscp_writeRegister,c
  3648  0011D8  51B3               	movf	vscp_handleProtocolEvent@pos_1127& (0+255),w,b
  3649  0011DA  25BA               	addwf	vscp_handleProtocolEvent@i_1126& (0+255),w,b
  3650  0011DC  EC4C  F016         	call	_vscp_writeRegister
  3651                           
  3652                           ;vscp_firmware.c: 1008: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  3653  0011E0  0100               	movlb	0	; () banked
  3654  0011E2  51BA               	movf	vscp_handleProtocolEvent@i_1126& (0+255),w,b
  3655  0011E4  0F89               	addlw	low (_vscp_omsg+6)
  3656  0011E6  6ED9               	movwf	fsr2l,c
  3657  0011E8  6ADA               	clrf	fsr2h,c
  3658  0011EA  51B3               	movf	vscp_handleProtocolEvent@pos_1127& (0+255),w,b
  3659  0011EC  25BA               	addwf	vscp_handleProtocolEvent@i_1126& (0+255),w,b
  3660  0011EE  ECAC  F016         	call	_vscp_readRegister
  3661  0011F2  6EDF               	movwf	indf2,c
  3662  0011F4  0100               	movlb	0	; () banked
  3663  0011F6  2BBA               	incf	vscp_handleProtocolEvent@i_1126& (0+255),f,b
  3664  0011F8                     l5819:
  3665                           
  3666                           ; BSR set to: 0
  3667  0011F8  51B4               	movf	vscp_handleProtocolEvent@len_1128& (0+255),w,b
  3668  0011FA  5DBA               	subwf	vscp_handleProtocolEvent@i_1126& (0+255),w,b
  3669  0011FC  E3E7               	bnc	l5813
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;vscp_firmware.c: 1009: }
  3673                           ;vscp_firmware.c: 1011: vscp_omsg.priority = 0x03;
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;vscp_firmware.c: 1012: vscp_omsg.vscp_class = 0;
  3677                           
  3678                           ;vscp_firmware.c: 1013: vscp_omsg.vscp_type = 26;
  3679  0011FE  D97D               	call	PL34	;call to abstracted procedure
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;vscp_firmware.c: 1014: vscp_omsg.data[ 0 ] = 0;
  3683  001200  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;vscp_firmware.c: 1015: vscp_omsg.flags = 0x80 + len + 1;
  3687  001202  51B4               	movf	vscp_handleProtocolEvent@len_1128& (0+255),w,b
  3688  001204  0F81               	addlw	129
  3689  001206  6F83               	movwf	_vscp_omsg& (0+255),b
  3690  001208  EFB2  F015         	goto	_vscp_sendEvent
  3691  00120C                     l5831:
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;vscp_firmware.c: 1025: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3695  00120C  5170               	movf	_vscp_nickname& (0+255),w,b
  3696  00120E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3697  001212  62DF               	cpfseq	indf2,c
  3698  001214  0012               	return	
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3702                           ;vscp_firmware.c: 1028: vscp_imsg.data[ 1 ],
  3703                           ;vscp_firmware.c: 1029: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  3704  001216  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3705  001218  EC94  F013         	call	_vscp_readAppReg
  3706  00121C  0100               	movlb	0	; () banked
  3707  00121E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3708  001220  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3709  001222  6E15               	movwf	?_vscp_writeAppReg,c
  3710  001224  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3711  001226  EC5B  F010         	call	_vscp_writeAppReg
  3712  00122A  D698               	goto	L1
  3713  00122C                     l5847:
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;vscp_firmware.c: 1045: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3717  00122C  5170               	movf	_vscp_nickname& (0+255),w,b
  3718  00122E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3719  001232  62DF               	cpfseq	indf2,c
  3720  001234  0012               	return	
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;vscp_firmware.c: 1047: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3724                           ;vscp_firmware.c: 1048: vscp_imsg.data[ 1 ],
  3725                           ;vscp_firmware.c: 1049: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  3726  001236  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3727  001238  EC94  F013         	call	_vscp_readAppReg
  3728  00123C  0100               	movlb	0	; () banked
  3729  00123E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3730  001240  05A4               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  3731  001242  6E15               	movwf	?_vscp_writeAppReg,c
  3732  001244  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3733  001246  EC5B  F010         	call	_vscp_writeAppReg
  3734  00124A  D688               	goto	L1
  3735  00124C                     l5863:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;vscp_firmware.c: 1065: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  3739                           ;vscp_firmware.c: 1066: (0xff == vscp_imsg.data[ 0 ])) {
  3740  00124C  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  3741  00124E  1970               	xorwf	_vscp_nickname& (0+255),w,b
  3742  001250  E003               	bz	l1030
  3743                           
  3744                           ; BSR set to: 0
  3745  001252  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  3746  001254  A4D8               	btfss	status,2,c
  3747  001256  0012               	return	
  3748  001258                     l1030:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;vscp_firmware.c: 1068: uint8_t i, j, k = 0;
  3752  001258  6BB8               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;vscp_firmware.c: 1072: vscp_omsg.priority = 0x03;
  3756  00125A  0E03               	movlw	3
  3757  00125C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3758                           
  3759                           ;vscp_firmware.c: 1073: vscp_omsg.flags = 0x80 + 8;
  3760  00125E  0E88               	movlw	136
  3761  001260  6F83               	movwf	_vscp_omsg& (0+255),b
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;vscp_firmware.c: 1074: vscp_omsg.vscp_class = 0;
  3765  001262  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3766  001264  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3767                           
  3768                           ;vscp_firmware.c: 1075: vscp_omsg.vscp_type = 32;
  3769  001266  0E20               	movlw	32
  3770  001268  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;vscp_firmware.c: 1077: for (i = 0; i < 3; i++)
  3774  00126A  6BBC               	clrf	vscp_handleProtocolEvent@i_1129& (0+255),b
  3775  00126C                     l1031:
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;vscp_firmware.c: 1078: {
  3779                           ;vscp_firmware.c: 1079: vscp_omsg.data[0] = i;
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;vscp_firmware.c: 1081: for (j = 1; j < 8; j++) {
  3783  00126C  D94D               	call	PL40	;call to abstracted procedure
  3784  00126E                     l5883:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;vscp_firmware.c: 1082: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  3788  00126E  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3789  001270  0F88               	addlw	low (_vscp_omsg+5)
  3790  001272  6ED9               	movwf	fsr2l,c
  3791  001274  6ADA               	clrf	fsr2h,c
  3792  001276  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3793  001278  080F               	sublw	15
  3794  00127A  ECCB  F016         	call	_vscp_getGUID
  3795  00127E  6EDF               	movwf	indf2,c
  3796  001280  0100               	movlb	0	; () banked
  3797  001282  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;vscp_firmware.c: 1083: if (k > 16)
  3801  001284  0E10               	movlw	16
  3802  001286  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3803  001288  D001               	goto	l5891
  3804  00128A  D004               	goto	l5895
  3805  00128C                     l5891:
  3806                           
  3807                           ; BSR set to: 0
  3808  00128C  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3809                           
  3810                           ; BSR set to: 0
  3811  00128E  0E07               	movlw	7
  3812  001290  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3813  001292  D7ED               	goto	l5883
  3814  001294                     l5895:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;vscp_firmware.c: 1085: }
  3818                           ;vscp_firmware.c: 1087: if (k > 16)
  3819  001294  0E10               	movlw	16
  3820  001296  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3821  001298  D001               	goto	l5899
  3822  00129A  D006               	goto	l1032
  3823  00129C                     l5899:
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;vscp_firmware.c: 1090: vscp_sendEvent();
  3827  00129C  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  3828                           
  3829                           ; BSR set to: 0
  3830  0012A0  2BBC               	incf	vscp_handleProtocolEvent@i_1129& (0+255),f,b
  3831                           
  3832                           ; BSR set to: 0
  3833  0012A2  0E02               	movlw	2
  3834  0012A4  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1129& (0+255),b
  3835  0012A6  D7E2               	goto	l1031
  3836  0012A8                     l1032:
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;vscp_firmware.c: 1091: }
  3840                           ;vscp_firmware.c: 1093: for (j = 0; j < 5; j++)
  3841  0012A8  6BBE               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  3842  0012AA                     l5909:
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;vscp_firmware.c: 1094: {
  3846                           ;vscp_firmware.c: 1095: if (vscp_getMDF_URL(j) > 0)
  3847  0012AA  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3848  0012AC  EC79  F016         	call	_vscp_getMDF_URL
  3849  0012B0  0900               	iorlw	0
  3850  0012B2  E008               	bz	l5913
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;vscp_firmware.c: 1096: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  3854  0012B4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3855  0012B6  0F8B               	addlw	low (_vscp_omsg+8)
  3856  0012B8  6ED9               	movwf	fsr2l,c
  3857  0012BA  6ADA               	clrf	fsr2h,c
  3858  0012BC  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3859  0012BE  EC79  F016         	call	_vscp_getMDF_URL
  3860  0012C2  D005               	goto	L3
  3861  0012C4                     l5913:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;vscp_firmware.c: 1097: else
  3865                           ;vscp_firmware.c: 1098: vscp_omsg.data[3 + j] = 0;
  3866  0012C4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3867  0012C6  0F8B               	addlw	low (_vscp_omsg+8)
  3868  0012C8  6ED9               	movwf	fsr2l,c
  3869  0012CA  6ADA               	clrf	fsr2h,c
  3870  0012CC  0E00               	movlw	0
  3871  0012CE                     L3:
  3872  0012CE  6EDF               	movwf	indf2,c
  3873                           
  3874                           ; BSR set to: 0
  3875  0012D0  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3876                           
  3877                           ; BSR set to: 0
  3878  0012D2  0E04               	movlw	4
  3879  0012D4  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3880  0012D6  D7E9               	goto	l5909
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;vscp_firmware.c: 1099: }
  3884                           ;vscp_firmware.c: 1101: vscp_sendEvent();
  3885  0012D8  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;vscp_firmware.c: 1103: k = 5;
  3889  0012DC  0E05               	movlw	5
  3890  0012DE  6FB8               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;vscp_firmware.c: 1104: for (i = 3; i < 7; i++)
  3894  0012E0  0E03               	movlw	3
  3895  0012E2  6FBC               	movwf	vscp_handleProtocolEvent@i_1129& (0+255),b
  3896  0012E4                     l1041:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;vscp_firmware.c: 1105: {
  3900                           ;vscp_firmware.c: 1106: vscp_omsg.data[0] = i;
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;vscp_firmware.c: 1108: for (j = 1; j < 8; j++) {
  3904  0012E4  D911               	call	PL40	;call to abstracted procedure
  3905  0012E6                     l5935:
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;vscp_firmware.c: 1109: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  3909  0012E6  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3910  0012E8  0F88               	addlw	low (_vscp_omsg+5)
  3911  0012EA  6ED9               	movwf	fsr2l,c
  3912  0012EC  6ADA               	clrf	fsr2h,c
  3913  0012EE  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3914  0012F0  EC79  F016         	call	_vscp_getMDF_URL
  3915  0012F4  6EDF               	movwf	indf2,c
  3916                           
  3917                           ; BSR set to: 0
  3918  0012F6  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3919                           
  3920                           ; BSR set to: 0
  3921  0012F8  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3922                           
  3923                           ; BSR set to: 0
  3924  0012FA  0E07               	movlw	7
  3925  0012FC  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3926  0012FE  D7F3               	goto	l5935
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;vscp_firmware.c: 1110: }
  3930                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  3931  001300  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  3932                           
  3933                           ; BSR set to: 0
  3934  001304  2BBC               	incf	vscp_handleProtocolEvent@i_1129& (0+255),f,b
  3935                           
  3936                           ; BSR set to: 0
  3937  001306  0E06               	movlw	6
  3938  001308  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1129& (0+255),b
  3939  00130A  D7EC               	goto	l1041
  3940  00130C  0C06               	retlw	6
  3941  00130E                     l5949:
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;vscp_firmware.c: 1120: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3945  00130E  5170               	movf	_vscp_nickname& (0+255),w,b
  3946  001310  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3947  001314  62DF               	cpfseq	indf2,c
  3948  001316  0012               	return	
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;vscp_firmware.c: 1122: vscp_omsg.priority = 0x03;
  3952  001318  0E03               	movlw	3
  3953  00131A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3954                           
  3955                           ;vscp_firmware.c: 1123: vscp_omsg.flags = 0x80 + 7;
  3956  00131C  0E87               	movlw	135
  3957  00131E  6F83               	movwf	_vscp_omsg& (0+255),b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;vscp_firmware.c: 1124: vscp_omsg.vscp_class = 0;
  3961  001320  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3962  001322  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3963                           
  3964                           ;vscp_firmware.c: 1125: vscp_omsg.vscp_type = 34;
  3965  001324  0E22               	movlw	34
  3966  001326  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;vscp_firmware.c: 1127: vscp_getMatrixInfo((char *) vscp_omsg.data);
  3970  001328  0E88               	movlw	(_vscp_omsg+5)& (0+255)
  3971  00132A  EC1D  F016         	call	_vscp_getMatrixInfo
  3972  00132E  EFB2  F015         	goto	_vscp_sendEvent
  3973  001332                     l5959:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;vscp_firmware.c: 1143: if ( vscp_nickname == vscp_imsg.data[0] ) {
  3977  001332  5170               	movf	_vscp_nickname& (0+255),w,b
  3978  001334  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3979  001338  62DF               	cpfseq	indf2,c
  3980  00133A  0012               	return	
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;vscp_firmware.c: 1145: uint16_t page_save;
  3984                           ;vscp_firmware.c: 1146: uint8_t byte = 0, bytes = 0;
  3985  00133C  6BBB               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;vscp_firmware.c: 1147: uint8_t bytes_this_time, cb;
  3989                           ;vscp_firmware.c: 1151: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  3990  00133E  C075  F0A4         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  3991  001342  0E0F               	movlw	15
  3992  001344  17A4               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  3993  001346  0E04               	movlw	4
  3994  001348  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3995  00134A  E304               	bnc	l5967
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;vscp_firmware.c: 1154: bytes = vscp_imsg.data[4];
  3999  00134C  C07F  F0B9         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1134
  4000                           
  4001                           ;vscp_firmware.c: 1156: if ( 0 == bytes ) {
  4002  001350  67B9               	tstfsz	vscp_handleProtocolEvent@bytes_1134& (0+255),b
  4003  001352  D002               	goto	l5971
  4004  001354                     l5967:
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;vscp_firmware.c: 1157: bytes = 1;
  4008  001354  0E01               	movlw	1
  4009  001356  6FB9               	movwf	vscp_handleProtocolEvent@bytes_1134& (0+255),b
  4010  001358                     l5971:
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;vscp_firmware.c: 1162: }
  4014                           ;vscp_firmware.c: 1165: page_save = vscp_page_select;
  4015  001358  C04E  F0AB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4016  00135C  C04F  F0AC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;vscp_firmware.c: 1170: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4020  001360  D8B6               	call	PL12	;call to abstracted procedure
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;vscp_firmware.c: 1173: vscp_omsg.priority = 0x03;
  4024  001362  0E03               	movlw	3
  4025  001364  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;vscp_firmware.c: 1174: vscp_omsg.vscp_class = 0;
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;vscp_firmware.c: 1175: vscp_omsg.vscp_type = 39;
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;vscp_firmware.c: 1176: vscp_omsg.data[0] = 0;
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;vscp_firmware.c: 1177: vscp_omsg.data[1] = vscp_imsg.data[1];
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;vscp_firmware.c: 1178: vscp_omsg.data[2] = vscp_imsg.data[2];
  4041  001366  D8BF               	call	PL18	;call to abstracted procedure
  4042  001368                     l5987:
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;vscp_firmware.c: 1182: if ( ( bytes - byte ) >= 4 ) {
  4046  001368  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4047  00136A  C0B9  F0A4         	movff	vscp_handleProtocolEvent@bytes_1134,??_vscp_handleProtocolEvent
  4048  00136E  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4049  001370  5FA4               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4050  001372  0E00               	movlw	0
  4051  001374  5BA5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4052  001376  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4053  001378  0A80               	xorlw	128
  4054  00137A  0F80               	addlw	-128
  4055  00137C  0E04               	movlw	4
  4056  00137E  B4D8               	btfsc	status,2,c
  4057  001380  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4058  001382  E302               	bnc	l5991
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;vscp_firmware.c: 1183: bytes_this_time = 4;
  4062  001384  0E04               	movlw	4
  4063  001386  D002               	goto	L4
  4064  001388                     l5991:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;vscp_firmware.c: 1185: else {
  4068                           ;vscp_firmware.c: 1186: bytes_this_time = (bytes - byte);
  4069  001388  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4070  00138A  5DB9               	subwf	vscp_handleProtocolEvent@bytes_1134& (0+255),w,b
  4071  00138C                     L4:
  4072  00138C  6FB5               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;vscp_firmware.c: 1187: }
  4076                           ;vscp_firmware.c: 1190: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4077  00138E  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4078  001390  0F84               	addlw	132
  4079  001392  6F83               	movwf	_vscp_omsg& (0+255),b
  4080                           
  4081                           ;vscp_firmware.c: 1191: vscp_omsg.data[3] =
  4082                           ;vscp_firmware.c: 1192: vscp_imsg.data[3] + byte;
  4083  001394  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4084  001396  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4085  001398  6F8B               	movwf	(_vscp_omsg+8)& (0+255),b
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;vscp_firmware.c: 1195: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4089  00139A  6BB6               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4090  00139C  D00C               	goto	l5999
  4091  00139E                     l5995:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;vscp_firmware.c: 1196: vscp_omsg.data[ (4 + cb) ] =
  4095                           ;vscp_firmware.c: 1197: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4096  00139E  51B6               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4097  0013A0  0F8C               	addlw	low (_vscp_omsg+9)
  4098  0013A2  6ED9               	movwf	fsr2l,c
  4099  0013A4  6ADA               	clrf	fsr2h,c
  4100  0013A6  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4101  0013A8  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4102  0013AA  25B6               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4103  0013AC  ECAC  F016         	call	_vscp_readRegister
  4104  0013B0  6EDF               	movwf	indf2,c
  4105  0013B2  0100               	movlb	0	; () banked
  4106  0013B4  2BB6               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4107  0013B6                     l5999:
  4108                           
  4109                           ; BSR set to: 0
  4110  0013B6  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4111  0013B8  5DB6               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4112  0013BA  E3F1               	bnc	l5995
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;vscp_firmware.c: 1198: }
  4116                           ;vscp_firmware.c: 1201: vscp_sendEvent();
  4117  0013BC  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;vscp_firmware.c: 1204: byte += bytes_this_time;
  4121  0013C0  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4122  0013C2  27BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;vscp_firmware.c: 1207: vscp_omsg.data[0] += 1;
  4126  0013C4  2B88               	incf	(_vscp_omsg+5)& (0+255),f,b
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;vscp_firmware.c: 1209: } while (byte < bytes);
  4130  0013C6  51B9               	movf	vscp_handleProtocolEvent@bytes_1134& (0+255),w,b
  4131  0013C8  5DBB               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4132  0013CA  E3CE               	bnc	l5987
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;vscp_firmware.c: 1212: vscp_page_select = page_save;
  4136  0013CC  C0AB  F04E         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4137  0013D0  C0AC  F04F         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4138  0013D4  0012               	return	
  4139  0013D6                     l6009:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;vscp_firmware.c: 1219: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4143  0013D6  5170               	movf	_vscp_nickname& (0+255),w,b
  4144  0013D8  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4145  0013DC  62DF               	cpfseq	indf2,c
  4146  0013DE  0012               	return	
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;vscp_firmware.c: 1221: uint8_t i;
  4150                           ;vscp_firmware.c: 1222: uint16_t page_save;
  4151                           ;vscp_firmware.c: 1225: page_save = vscp_page_select;
  4152  0013E0  C04E  F0AD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1138
  4153  0013E4  C04F  F0AE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1138+1
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;vscp_firmware.c: 1229: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4157  0013E8  D872               	call	PL12	;call to abstracted procedure
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;vscp_firmware.c: 1231: for (i = vscp_imsg.data[ 3 ];
  4161  0013EA  C07E  F0B7         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1137
  4162                           
  4163                           ;vscp_firmware.c: 1234: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4164                           ;vscp_firmware.c: 1235: i++) {
  4165  0013EE  D014               	goto	l6021
  4166  0013F0                     l6017:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;vscp_firmware.c: 1236: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4170                           ;vscp_firmware.c: 1237: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4171  0013F0  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4172  0013F2  087F               	sublw	low (_vscp_imsg+10)
  4173  0013F4  25B7               	addwf	vscp_handleProtocolEvent@i_1137& (0+255),w,b
  4174  0013F6  6ED9               	movwf	fsr2l,c
  4175  0013F8  6ADA               	clrf	fsr2h,c
  4176  0013FA  50DF               	movf	indf2,w,c
  4177  0013FC  6E18               	movwf	?_vscp_writeRegister,c
  4178  0013FE  51B7               	movf	vscp_handleProtocolEvent@i_1137& (0+255),w,b
  4179  001400  EC4C  F016         	call	_vscp_writeRegister
  4180  001404  0100               	movlb	0	; () banked
  4181  001406  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4182  001408  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4183  00140A  088C               	sublw	low (_vscp_omsg+9)
  4184  00140C  25B7               	addwf	vscp_handleProtocolEvent@i_1137& (0+255),w,b
  4185  00140E  6ED9               	movwf	fsr2l,c
  4186  001410  6ADA               	clrf	fsr2h,c
  4187  001412  C0A4  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  4188                           
  4189                           ; BSR set to: 0
  4190  001416  2BB7               	incf	vscp_handleProtocolEvent@i_1137& (0+255),f,b
  4191  001418                     l6021:
  4192                           
  4193                           ; BSR set to: 0
  4194  001418  5175               	movf	_vscp_imsg& (0+255),w,b
  4195  00141A  0B0F               	andlw	15
  4196  00141C  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4197  00141E  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4198  001420  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4199  001422  27A4               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4200  001424  0E00               	movlw	0
  4201  001426  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4202  001428  0EFC               	movlw	252
  4203  00142A  25A4               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4204  00142C  6FA6               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4205  00142E  0EFF               	movlw	255
  4206  001430  21A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4207  001432  6FA7               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4208  001434  51B7               	movf	vscp_handleProtocolEvent@i_1137& (0+255),w,b
  4209  001436  6FA8               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4210  001438  6BA9               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4211  00143A  51A9               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4212  00143C  0A80               	xorlw	128
  4213  00143E  6FAA               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4214  001440  51A6               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4215  001442  5DA8               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4216  001444  51A7               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4217  001446  0A80               	xorlw	128
  4218  001448  59AA               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4219  00144A  E3D2               	bnc	l6017
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;vscp_firmware.c: 1238: }
  4223                           ;vscp_firmware.c: 1241: vscp_page_select = page_save;
  4224  00144C  C0AD  F04E         	movff	vscp_handleProtocolEvent@page_save_1138,_vscp_page_select
  4225  001450  C0AE  F04F         	movff	vscp_handleProtocolEvent@page_save_1138+1,_vscp_page_select+1
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;vscp_firmware.c: 1243: vscp_omsg.priority = 0x03;
  4229  001454  0E03               	movlw	3
  4230  001456  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;vscp_firmware.c: 1244: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4234  001458  5175               	movf	_vscp_imsg& (0+255),w,b
  4235  00145A  0B0F               	andlw	15
  4236  00145C  0F80               	addlw	128
  4237  00145E  6F83               	movwf	_vscp_omsg& (0+255),b
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;vscp_firmware.c: 1245: vscp_omsg.vscp_class = 0;
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;vscp_firmware.c: 1246: vscp_omsg.vscp_type = 39;
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;vscp_firmware.c: 1247: vscp_omsg.data[0] = 0;
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;vscp_firmware.c: 1248: vscp_omsg.data[1] = vscp_imsg.data[1];
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;vscp_firmware.c: 1249: vscp_omsg.data[2] = vscp_imsg.data[2];
  4253  001460  D842               	call	PL18	;call to abstracted procedure
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;vscp_firmware.c: 1250: vscp_omsg.data[3] = vscp_imsg.data[3];
  4257  001462  C07E  F08B         	movff	_vscp_imsg+9,_vscp_omsg+8
  4258  001466  EFB2  F015         	goto	_vscp_sendEvent
  4259  00146A                     l6043:
  4260                           
  4261                           ; BSR set to: 0
  4262  00146A  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  4263                           
  4264                           ; Switch size 1, requested type "space"
  4265                           ; Number of cases is 16, Range of values is 1 to 38
  4266                           ; switch strategies available:
  4267                           ; Name         Instructions Cycles
  4268                           ; simple_byte           49    25 (average)
  4269                           ;	Chosen strategy is simple_byte
  4270  00146C  0A01               	xorlw	1	; case 1
  4271  00146E  E101 D55D          	bz	l5631
  4272  001472  0A03               	xorlw	3	; case 2
  4273  001474  E101 D55C          	bz	l5633
  4274  001478  0A04               	xorlw	4	; case 6
  4275  00147A  E101 D55B          	bz	l5635
  4276  00147E  0A0E               	xorlw	14	; case 8
  4277  001480  E101 D55A          	bz	l5637
  4278  001484  0A01               	xorlw	1	; case 9
  4279  001486  E101 D559          	bz	l5639
  4280  00148A  0A02               	xorlw	2	; case 11
  4281  00148C  E101 D578          	bz	l5673
  4282  001490  0A07               	xorlw	7	; case 12
  4283  001492  E101 D58E          	bz	l5707
  4284  001496  0A1B               	xorlw	27	; case 23
  4285  001498  E101 D622          	bz	l5765
  4286  00149C  0A0F               	xorlw	15	; case 24
  4287  00149E  E101 D635          	bz	l5771
  4288  0014A2  0A01               	xorlw	1	; case 25
  4289  0014A4  E101 D685          	bz	l5805
  4290  0014A8  0A04               	xorlw	4	; case 29
  4291  0014AA  E101 D6AF          	bz	l5831
  4292  0014AE  0A03               	xorlw	3	; case 30
  4293  0014B0  E101 D6BC          	bz	l5847
  4294  0014B4  0A01               	xorlw	1	; case 31
  4295  0014B6  E101 D6C9          	bz	l5863
  4296  0014BA  0A3E               	xorlw	62	; case 33
  4297  0014BC  E101 D727          	bz	l5949
  4298  0014C0  0A04               	xorlw	4	; case 37
  4299  0014C2  E101 D736          	bz	l5959
  4300  0014C6  0A03               	xorlw	3	; case 38
  4301  0014C8  A4D8               	btfss	status,2,c
  4302  0014CA  0012               	return	
  4303  0014CC  D784               	goto	l6009
  4304  0014CE                     __end_of_vscp_handleProtocolEvent:
  4305                           	opt stack 0
  4306  0014CE                     PL12:
  4307                           	opt stack 22
  4308  0014CE  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4309  0014D0  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4310  0014D4  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4311  0014D6  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4312  0014DA  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4313  0014DC  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4314  0014DE  6E4E               	movwf	_vscp_page_select,c
  4315  0014E0  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4316  0014E2  6E4F               	movwf	_vscp_page_select+1,c
  4317  0014E4  0012               	return	
  4318  0014E6                     __end_ofPL12:
  4319                           	opt stack 0
  4320  0014E6                     PL18:
  4321                           	opt stack 22
  4322  0014E6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4323  0014E8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4324  0014EA  0E27               	movlw	39
  4325  0014EC  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4326  0014EE  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4327  0014F0  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4328  0014F4  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4329  0014F8  0012               	return	
  4330  0014FA                     __end_ofPL18:
  4331                           	opt stack 0
  4332  0014FA                     PL34:
  4333                           	opt stack 22
  4334  0014FA  0E03               	movlw	3
  4335  0014FC  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4336  0014FE  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4337  001500  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4338  001502  0E1A               	movlw	26
  4339  001504  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4340  001506  0C1A               	retlw	26
  4341  001508                     __end_ofPL34:
  4342                           	opt stack 0
  4343  001508                     PL40:
  4344                           	opt stack 22
  4345  001508  C0BC  F088         	movff	vscp_handleProtocolEvent@i_1129,_vscp_omsg+5
  4346  00150C  0E01               	movlw	1
  4347  00150E  6FBE               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4348  001510  0C01               	retlw	1
  4349  001512                     __end_ofPL40:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           indf1	equ	0xFE7
  4361                           fsr1h	equ	0xFE2
  4362                           fsr1l	equ	0xFE1
  4363                           indf2	equ	0xFDF
  4364                           postinc2	equ	0xFDE
  4365                           postdec2	equ	0xFDD
  4366                           plusw2	equ	0xFDB
  4367                           fsr2h	equ	0xFDA
  4368                           fsr2l	equ	0xFD9
  4369                           status	equ	0xFD8
  4370                           
  4371 ;; *************** function ___lbmod *****************
  4372 ;; Defined at:
  4373 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;  dividend        1    wreg     unsigned char 
  4376 ;;  divisor         1    7[COMRAM] unsigned char 
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  dividend        1    8[COMRAM] unsigned char 
  4379 ;;  rem             1   10[COMRAM] unsigned char 
  4380 ;;  counter         1    9[COMRAM] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  1    wreg      unsigned char 
  4383 ;; Registers used:
  4384 ;;		wreg, status,2, status,0
  4385 ;; Tracked objects:
  4386 ;;		On entry : F/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4390 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4391 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4393 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4394 ;;Total ram usage:        4 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    2
  4397 ;; This function calls:
  4398 ;;		Nothing
  4399 ;; This function is called by:
  4400 ;;		_vscp_handleProtocolEvent
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text14
  4405  002B16                     __ptext14:
  4406                           	opt stack 0
  4407  002B16                     ___lbmod:
  4408                           	opt stack 27
  4409                           
  4410                           ;incstack = 0
  4411                           ;incstack = 0
  4412                           ;___lbmod@dividend stored from wreg
  4413  002B16  CFE8 F009          	movff	wreg,___lbmod@dividend
  4414                           
  4415                           ; BSR set to: 0
  4416  002B1A  0E08               	movlw	8
  4417  002B1C  6E0A               	movwf	___lbmod@counter,c
  4418                           
  4419                           ; BSR set to: 0
  4420  002B1E  6A0B               	clrf	___lbmod@rem,c
  4421  002B20                     l5385:
  4422  002B20  90D8               	bcf	status,0,c
  4423  002B22  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4424  002B24  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4425  002B26  6E0B               	movwf	___lbmod@rem,c
  4426  002B28  90D8               	bcf	status,0,c
  4427  002B2A  3609               	rlcf	___lbmod@dividend,f,c
  4428  002B2C  5008               	movf	___lbmod@divisor,w,c
  4429  002B2E  5C0B               	subwf	___lbmod@rem,w,c
  4430  002B30  E302               	bnc	l5393
  4431  002B32  5008               	movf	___lbmod@divisor,w,c
  4432  002B34  5E0B               	subwf	___lbmod@rem,f,c
  4433  002B36                     l5393:
  4434  002B36  2E0A               	decfsz	___lbmod@counter,f,c
  4435  002B38  D7F3               	goto	l5385
  4436  002B3A  500B               	movf	___lbmod@rem,w,c
  4437  002B3C  0012               	return	
  4438  002B3E                     __end_of___lbmod:
  4439                           	opt stack 0
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           intcon	equ	0xFF2
  4447                           postinc0	equ	0xFEE
  4448                           wreg	equ	0xFE8
  4449                           indf1	equ	0xFE7
  4450                           fsr1h	equ	0xFE2
  4451                           fsr1l	equ	0xFE1
  4452                           indf2	equ	0xFDF
  4453                           postinc2	equ	0xFDE
  4454                           postdec2	equ	0xFDD
  4455                           plusw2	equ	0xFDB
  4456                           fsr2h	equ	0xFDA
  4457                           fsr2l	equ	0xFD9
  4458                           status	equ	0xFD8
  4459                           
  4460 ;; *************** function _vscp_writeRegister *****************
  4461 ;; Defined at:
  4462 ;;		line 692 in file "../../vscp_firmware/common/vscp_firmware.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;  reg             1    wreg     unsigned char 
  4465 ;;  value           1   23[COMRAM] unsigned char 
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  reg             1   24[COMRAM] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      unsigned char 
  4470 ;; Registers used:
  4471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4472 ;; Tracked objects:
  4473 ;;		On entry : F/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4477 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4481 ;;Total ram usage:        2 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    6
  4484 ;; This function calls:
  4485 ;;		_vscp_writeAppReg
  4486 ;;		_vscp_writeStdReg
  4487 ;; This function is called by:
  4488 ;;		_vscp_handleProtocolEvent
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text15
  4493  002C98                     __ptext15:
  4494                           	opt stack 0
  4495  002C98                     _vscp_writeRegister:
  4496                           	opt stack 23
  4497                           
  4498                           ;incstack = 0
  4499                           ;incstack = 0
  4500                           ;vscp_writeRegister@reg stored from wreg
  4501  002C98  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;vscp_firmware.c: 693: if (reg >= 0x80) {
  4505  002C9C  0E7F               	movlw	127
  4506  002C9E  6419               	cpfsgt	vscp_writeRegister@reg,c
  4507  002CA0  D005               	goto	l5311
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;vscp_firmware.c: 694: return vscp_writeStdReg(reg, value);
  4511  002CA2  C018  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4512  002CA6  5019               	movf	vscp_writeRegister@reg,w,c
  4513  002CA8  EFE3  F010         	goto	_vscp_writeStdReg
  4514  002CAC                     l5311:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;vscp_firmware.c: 696: return vscp_writeAppReg(reg, value);
  4518  002CAC  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4519  002CB0  5019               	movf	vscp_writeRegister@reg,w,c
  4520  002CB2  EF5B  F010         	goto	_vscp_writeAppReg
  4521  002CB6                     __end_of_vscp_writeRegister:
  4522                           	opt stack 0
  4523                           tblptru	equ	0xFF8
  4524                           tblptrh	equ	0xFF7
  4525                           tblptrl	equ	0xFF6
  4526                           tablat	equ	0xFF5
  4527                           prodh	equ	0xFF4
  4528                           prodl	equ	0xFF3
  4529                           intcon	equ	0xFF2
  4530                           postinc0	equ	0xFEE
  4531                           wreg	equ	0xFE8
  4532                           indf1	equ	0xFE7
  4533                           fsr1h	equ	0xFE2
  4534                           fsr1l	equ	0xFE1
  4535                           indf2	equ	0xFDF
  4536                           postinc2	equ	0xFDE
  4537                           postdec2	equ	0xFDD
  4538                           plusw2	equ	0xFDB
  4539                           fsr2h	equ	0xFDA
  4540                           fsr2l	equ	0xFD9
  4541                           status	equ	0xFD8
  4542                           
  4543 ;; *************** function _vscp_writeStdReg *****************
  4544 ;; Defined at:
  4545 ;;		line 705 in file "../../vscp_firmware/common/vscp_firmware.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  reg             1    wreg     unsigned char 
  4548 ;;  value           1   14[COMRAM] unsigned char 
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;  reg             1   20[COMRAM] unsigned char 
  4551 ;;  rv              1   19[COMRAM] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;                  1    wreg      unsigned char 
  4554 ;; Registers used:
  4555 ;;		wreg, status,2, status,0, cstack
  4556 ;; Tracked objects:
  4557 ;;		On entry : F/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4561 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4563 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4564 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4565 ;;Total ram usage:        7 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:    5
  4568 ;; This function calls:
  4569 ;;		_vscp_setGUID
  4570 ;;		_vscp_setManufacturerId
  4571 ;;		_vscp_getGUID
  4572 ;;		_vscp_getUserID
  4573 ;;		_vscp_setUserID
  4574 ;;		_vscp_getManufacturerId
  4575 ;;		_vscp_restoreDefaults
  4576 ;; This function is called by:
  4577 ;;		_vscp_writeRegister
  4578 ;;		_vscp_handleProtocolEvent
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text16
  4583  0021C6                     __ptext16:
  4584                           	opt stack 0
  4585  0021C6                     _vscp_writeStdReg:
  4586                           	opt stack 24
  4587                           
  4588                           ;incstack = 0
  4589                           ;incstack = 0
  4590                           ;vscp_writeStdReg@reg stored from wreg
  4591  0021C6  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;vscp_firmware.c: 706: uint8_t rv = ~value;
  4595  0021CA  1C0F               	comf	vscp_writeStdReg@value,w,c
  4596  0021CC  6E14               	movwf	vscp_writeStdReg@rv,c
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;vscp_firmware.c: 708: if ((reg > (0x82 + 1)) &&
  4600                           ;vscp_firmware.c: 709: (reg < 0x89)) {
  4601  0021CE  0E83               	movlw	131
  4602  0021D0  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4603  0021D2  D00E               	goto	l5323
  4604                           
  4605                           ; BSR set to: 0
  4606  0021D4  0E89               	movlw	137
  4607  0021D6  6015               	cpfslt	vscp_writeStdReg@reg,c
  4608  0021D8  D00B               	goto	l5323
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;vscp_firmware.c: 712: vscp_setUserID((reg - 0x84), value);
  4612  0021DA  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  4613  0021DE  5015               	movf	vscp_writeStdReg@reg,w,c
  4614  0021E0  0F7C               	addlw	124
  4615  0021E2  EC94  F016         	call	_vscp_setUserID
  4616                           
  4617                           ;vscp_firmware.c: 713: rv = vscp_getUserID((reg - 0x84));
  4618  0021E6  5015               	movf	vscp_writeStdReg@reg,w,c
  4619  0021E8  0F7C               	addlw	124
  4620  0021EA  ECC1  F016         	call	_vscp_getUserID
  4621  0021EE  D069               	goto	L10
  4622  0021F0                     l5323:
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;vscp_firmware.c: 716: else if (0x92 == reg) {
  4626  0021F0  5015               	movf	vscp_writeStdReg@reg,w,c
  4627  0021F2  0A92               	xorlw	146
  4628  0021F4  E10D               	bnz	l5329
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;vscp_firmware.c: 719: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  4632  0021F6  500F               	movf	vscp_writeStdReg@value,w,c
  4633  0021F8  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4634  0021FA  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  4635  0021FC  504E               	movf	_vscp_page_select,w,c
  4636  0021FE  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  4637  002200  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  4638  002202  1010               	iorwf	??_vscp_writeStdReg,w,c
  4639  002204  6E4E               	movwf	_vscp_page_select,c
  4640  002206  5011               	movf	??_vscp_writeStdReg+1,w,c
  4641  002208  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  4642  00220A  6E4F               	movwf	_vscp_page_select+1,c
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;vscp_firmware.c: 720: rv = (vscp_page_select >> 8) & 0xff;
  4646  00220C  504F               	movf	_vscp_page_select+1,w,c
  4647  00220E  D059               	goto	L10
  4648  002210                     l5329:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;vscp_firmware.c: 722: else if (0x93 == reg) {
  4652  002210  5015               	movf	vscp_writeStdReg@reg,w,c
  4653  002212  0A93               	xorlw	147
  4654  002214  E10B               	bnz	l5335
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;vscp_firmware.c: 725: vscp_page_select = (vscp_page_select & 0xff00) | value;
  4658  002216  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  4659  002218  504F               	movf	_vscp_page_select+1,w,c
  4660  00221A  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4661  00221C  500F               	movf	vscp_writeStdReg@value,w,c
  4662  00221E  1010               	iorwf	??_vscp_writeStdReg,w,c
  4663  002220  6E4E               	movwf	_vscp_page_select,c
  4664  002222  5011               	movf	??_vscp_writeStdReg+1,w,c
  4665  002224  6E4F               	movwf	_vscp_page_select+1,c
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;vscp_firmware.c: 726: rv = (vscp_page_select & 0xff);
  4669  002226  C04E  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  4670                           
  4671                           ;vscp_firmware.c: 727: }
  4672  00222A  D04E               	goto	l5377
  4673  00222C                     l5335:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;vscp_firmware.c: 732: else if ((reg > 0x88) && (reg < 0x91)) {
  4677  00222C  0E88               	movlw	136
  4678  00222E  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4679  002230  D019               	goto	l5347
  4680                           
  4681                           ; BSR set to: 0
  4682  002232  0E91               	movlw	145
  4683  002234  6015               	cpfslt	vscp_writeStdReg@reg,c
  4684  002236  D016               	goto	l5347
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;vscp_firmware.c: 734: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4688                           ;vscp_firmware.c: 735: (0xff != (vscp_page_select & 0xff))) {
  4689  002238  C04F  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4690  00223C  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4691  002240  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4692  002242  2811               	incf	??_vscp_writeStdReg+1,w,c
  4693  002244  E102               	bnz	l5343
  4694                           
  4695                           ; BSR set to: 0
  4696  002246  284E               	incf	_vscp_page_select,w,c
  4697  002248  E002               	bz	l5345
  4698  00224A                     l5343:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;vscp_firmware.c: 737: rv = ~value;
  4702  00224A  1C0F               	comf	vscp_writeStdReg@value,w,c
  4703  00224C  D03A               	goto	L10
  4704  00224E                     l5345:
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;vscp_firmware.c: 740: vscp_setManufacturerId(reg - 0x89, value);
  4708  00224E  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  4709  002252  5015               	movf	vscp_writeStdReg@reg,w,c
  4710  002254  0F77               	addlw	119
  4711  002256  ECFD  F015         	call	_vscp_setManufacturerId
  4712                           
  4713                           ;vscp_firmware.c: 741: rv = vscp_getManufacturerId(reg - 0x89);
  4714  00225A  5015               	movf	vscp_writeStdReg@reg,w,c
  4715  00225C  0F77               	addlw	119
  4716  00225E  ECB7  F016         	call	_vscp_getManufacturerId
  4717  002262  D02F               	goto	L10
  4718  002264                     l5347:
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;vscp_firmware.c: 744: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  4722  002264  0ECF               	movlw	207
  4723  002266  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4724  002268  D017               	goto	l5359
  4725                           
  4726                           ; BSR set to: 0
  4727  00226A  0EE0               	movlw	224
  4728  00226C  6015               	cpfslt	vscp_writeStdReg@reg,c
  4729  00226E  D014               	goto	l5359
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;vscp_firmware.c: 746: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4733                           ;vscp_firmware.c: 747: (0xff != (vscp_page_select & 0xff))) {
  4734  002270  C04F  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4735  002274  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4736  002278  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4737  00227A  2811               	incf	??_vscp_writeStdReg+1,w,c
  4738  00227C  E1E6               	bnz	l5343
  4739                           
  4740                           ; BSR set to: 0
  4741  00227E  284E               	incf	_vscp_page_select,w,c
  4742  002280  E1E4               	bnz	l5343
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;vscp_firmware.c: 751: else {
  4746                           ;vscp_firmware.c: 752: vscp_setGUID(reg - 0xD0, value);
  4747  002282  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  4748  002286  5015               	movf	vscp_writeStdReg@reg,w,c
  4749  002288  0F30               	addlw	48
  4750  00228A  EC0D  F016         	call	_vscp_setGUID
  4751                           
  4752                           ;vscp_firmware.c: 753: rv = vscp_getGUID(reg - 0xD0);
  4753  00228E  5015               	movf	vscp_writeStdReg@reg,w,c
  4754  002290  0F30               	addlw	48
  4755  002292  ECCB  F016         	call	_vscp_getGUID
  4756  002296  D015               	goto	L10
  4757  002298                     l5359:
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  4761  002298  5015               	movf	vscp_writeStdReg@reg,w,c
  4762  00229A  0AA2               	xorlw	162
  4763  00229C  E1D6               	bnz	l5343
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  4767  00229E  500F               	movf	vscp_writeStdReg@value,w,c
  4768  0022A0  0A55               	xorlw	85
  4769  0022A2  E104               	bnz	l5367
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  4773  0022A4  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  4774  0022A6  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;vscp_firmware.c: 760: rv = 0x55;
  4778  0022A8  0E55               	movlw	85
  4779  0022AA  D00B               	goto	L10
  4780  0022AC                     l5367:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  4784  0022AC  500F               	movf	vscp_writeStdReg@value,w,c
  4785  0022AE  0AAA               	xorlw	170
  4786  0022B0  E10B               	bnz	l5377
  4787                           
  4788                           ; BSR set to: 0
  4789                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  4790  0022B2  0EE8               	movlw	232
  4791  0022B4  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  4792  0022B6  0E03               	movlw	3
  4793  0022B8  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  4794  0022BA  E205               	bc	l972
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  4798  0022BC  EC3A  F017         	call	_vscp_restoreDefaults	;wreg free
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;vscp_firmware.c: 765: rv = 0xaa;
  4802  0022C0  0EAA               	movlw	170
  4803  0022C2                     L10:
  4804  0022C2  6E14               	movwf	vscp_writeStdReg@rv,c
  4805                           
  4806                           ;vscp_firmware.c: 766: }
  4807  0022C4  D001               	goto	l5377
  4808  0022C6                     l972:
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;vscp_firmware.c: 767: else {
  4812                           ;vscp_firmware.c: 768: rv = 0;
  4813  0022C6  6A14               	clrf	vscp_writeStdReg@rv,c
  4814  0022C8                     l5377:
  4815                           
  4816                           ;vscp_firmware.c: 776: }
  4817                           ;vscp_firmware.c: 778: return rv;
  4818  0022C8  5014               	movf	vscp_writeStdReg@rv,w,c
  4819  0022CA  0012               	return	
  4820  0022CC                     __end_of_vscp_writeStdReg:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           postinc0	equ	0xFEE
  4830                           wreg	equ	0xFE8
  4831                           indf1	equ	0xFE7
  4832                           fsr1h	equ	0xFE2
  4833                           fsr1l	equ	0xFE1
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           plusw2	equ	0xFDB
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _vscp_restoreDefaults *****************
  4843 ;; Defined at:
  4844 ;;		line 1385 in file "../main.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;		None
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;		None
  4849 ;; Return value:  Size  Location     Type
  4850 ;;		None               void
  4851 ;; Registers used:
  4852 ;;		wreg, status,2, status,0, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : F/0
  4855 ;;		On exit  : F/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4862 ;;Total ram usage:        0 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    4
  4865 ;; This function calls:
  4866 ;;		_init_app_eeprom
  4867 ;;		_init_app_ram
  4868 ;; This function is called by:
  4869 ;;		_vscp_writeStdReg
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text17
  4874  002E74                     __ptext17:
  4875                           	opt stack 0
  4876  002E74                     _vscp_restoreDefaults:
  4877                           	opt stack 24
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;main.c: 1386: init_app_eeprom();
  4881                           
  4882                           ;incstack = 0
  4883                           ;incstack = 0
  4884  002E74  EC3D  F013         	call	_init_app_eeprom	;wreg free
  4885                           
  4886                           ;main.c: 1387: init_app_ram();
  4887  002E78  EFF9  F016         	goto	_init_app_ram	;wreg free
  4888  002E7C                     __end_of_vscp_restoreDefaults:
  4889                           	opt stack 0
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           prodh	equ	0xFF4
  4895                           prodl	equ	0xFF3
  4896                           intcon	equ	0xFF2
  4897                           postinc0	equ	0xFEE
  4898                           wreg	equ	0xFE8
  4899                           indf1	equ	0xFE7
  4900                           fsr1h	equ	0xFE2
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           postinc2	equ	0xFDE
  4904                           postdec2	equ	0xFDD
  4905                           plusw2	equ	0xFDB
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _init_app_eeprom *****************
  4911 ;; Defined at:
  4912 ;;		line 427 in file "../main.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  i               1   13[COMRAM] unsigned char 
  4917 ;;  j               1   12[COMRAM] unsigned char 
  4918 ;; Return value:  Size  Location     Type
  4919 ;;		None               void
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0, cstack
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/E
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4928 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4929 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4930 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4931 ;;Total ram usage:        4 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    3
  4934 ;; This function calls:
  4935 ;;		_writeEEPROM
  4936 ;; This function is called by:
  4937 ;;		_main
  4938 ;;		_vscp_restoreDefaults
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text18
  4943  00267A                     __ptext18:
  4944                           	opt stack 0
  4945  00267A                     _init_app_eeprom:
  4946                           	opt stack 24
  4947                           
  4948                           ;main.c: 428: unsigned char i, j;
  4949                           ;main.c: 430: writeEEPROM( 0x21 + 0, 0 );
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;incstack = 0
  4953                           ;incstack = 0
  4954  00267A  6A09               	clrf	?_writeEEPROM+1,c
  4955  00267C  0E21               	movlw	33
  4956  00267E  6E08               	movwf	?_writeEEPROM,c
  4957  002680  0E00               	movlw	0
  4958  002682  6A0A               	clrf	?_writeEEPROM+2,c
  4959  002684  ECD8  F015         	call	_writeEEPROM	;wreg free
  4960                           
  4961                           ;main.c: 431: writeEEPROM( 0x21 + 1, 0 );
  4962  002688  6A09               	clrf	?_writeEEPROM+1,c
  4963  00268A  0E22               	movlw	34
  4964  00268C  6E08               	movwf	?_writeEEPROM,c
  4965  00268E  0E00               	movlw	0
  4966  002690  6A0A               	clrf	?_writeEEPROM+2,c
  4967  002692  ECD8  F015         	call	_writeEEPROM	;wreg free
  4968                           
  4969                           ;main.c: 433: for ( i=3; i<21; i++ ) {
  4970  002696  0E03               	movlw	3
  4971  002698  6E0E               	movwf	init_app_eeprom@i,c
  4972  00269A                     l3745:
  4973                           
  4974                           ;main.c: 434: writeEEPROM( 0x21 + 5 + (i-3), i );
  4975  00269A  0E23               	movlw	35
  4976  00269C  240E               	addwf	init_app_eeprom@i,w,c
  4977  00269E  6E08               	movwf	?_writeEEPROM,c
  4978  0026A0  6A09               	clrf	?_writeEEPROM+1,c
  4979  0026A2  0E00               	movlw	0
  4980  0026A4  2209               	addwfc	?_writeEEPROM+1,f,c
  4981  0026A6  C00E  F00A         	movff	init_app_eeprom@i,?_writeEEPROM+2
  4982  0026AA  ECD8  F015         	call	_writeEEPROM	;wreg free
  4983  0026AE  2A0E               	incf	init_app_eeprom@i,f,c
  4984  0026B0  0E14               	movlw	20
  4985  0026B2  640E               	cpfsgt	init_app_eeprom@i,c
  4986  0026B4  D7F2               	goto	l3745
  4987                           
  4988                           ;main.c: 435: }
  4989                           ;main.c: 437: writeEEPROM( 0x21 + 2, 0 );
  4990  0026B6  6A09               	clrf	?_writeEEPROM+1,c
  4991  0026B8  0E23               	movlw	35
  4992  0026BA  6E08               	movwf	?_writeEEPROM,c
  4993  0026BC  0E00               	movlw	0
  4994  0026BE  6A0A               	clrf	?_writeEEPROM+2,c
  4995  0026C0  ECD8  F015         	call	_writeEEPROM	;wreg free
  4996                           
  4997                           ;main.c: 438: writeEEPROM( 0x21 + 3, 0 );
  4998  0026C4  6A09               	clrf	?_writeEEPROM+1,c
  4999  0026C6  0E24               	movlw	36
  5000  0026C8  6E08               	movwf	?_writeEEPROM,c
  5001  0026CA  0E00               	movlw	0
  5002  0026CC  6A0A               	clrf	?_writeEEPROM+2,c
  5003  0026CE  ECD8  F015         	call	_writeEEPROM	;wreg free
  5004                           
  5005                           ;main.c: 439: writeEEPROM( 0x21 + 4, 0 );
  5006  0026D2  6A09               	clrf	?_writeEEPROM+1,c
  5007  0026D4  0E25               	movlw	37
  5008  0026D6  6E08               	movwf	?_writeEEPROM,c
  5009  0026D8  0E00               	movlw	0
  5010  0026DA  6A0A               	clrf	?_writeEEPROM+2,c
  5011  0026DC  ECD8  F015         	call	_writeEEPROM	;wreg free
  5012                           
  5013                           ;main.c: 443: for ( i = 0; i < 8; i++ ) {
  5014  0026E0  6A0E               	clrf	init_app_eeprom@i,c
  5015  0026E2                     l177:
  5016                           
  5017                           ;main.c: 444: for ( j = 0; j < 8; j++ ) {
  5018  0026E2  6A0D               	clrf	init_app_eeprom@j,c
  5019  0026E4                     l3763:
  5020                           
  5021                           ;main.c: 445: writeEEPROM( 0x21 + 23 + 0 + i * 8 + j, 0 );
  5022  0026E4  500D               	movf	init_app_eeprom@j,w,c
  5023  0026E6  C00E  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  5024  0026EA  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  5025  0026EC  90D8               	bcf	status,0,c
  5026  0026EE  360B               	rlcf	??_init_app_eeprom,f,c
  5027  0026F0  360C               	rlcf	??_init_app_eeprom+1,f,c
  5028  0026F2  90D8               	bcf	status,0,c
  5029  0026F4  360B               	rlcf	??_init_app_eeprom,f,c
  5030  0026F6  360C               	rlcf	??_init_app_eeprom+1,f,c
  5031  0026F8  90D8               	bcf	status,0,c
  5032  0026FA  360B               	rlcf	??_init_app_eeprom,f,c
  5033  0026FC  360C               	rlcf	??_init_app_eeprom+1,f,c
  5034  0026FE  260B               	addwf	??_init_app_eeprom,f,c
  5035  002700  0E00               	movlw	0
  5036  002702  220C               	addwfc	??_init_app_eeprom+1,f,c
  5037  002704  0E38               	movlw	56
  5038  002706  240B               	addwf	??_init_app_eeprom,w,c
  5039  002708  6E08               	movwf	?_writeEEPROM,c
  5040  00270A  0E00               	movlw	0
  5041  00270C  200C               	addwfc	??_init_app_eeprom+1,w,c
  5042  00270E  6E09               	movwf	?_writeEEPROM+1,c
  5043  002710  0E00               	movlw	0
  5044  002712  6A0A               	clrf	?_writeEEPROM+2,c
  5045  002714  ECD8  F015         	call	_writeEEPROM	;wreg free
  5046  002718  2A0D               	incf	init_app_eeprom@j,f,c
  5047  00271A  0E07               	movlw	7
  5048  00271C  640D               	cpfsgt	init_app_eeprom@j,c
  5049  00271E  D7E2               	goto	l3763
  5050  002720  2A0E               	incf	init_app_eeprom@i,f,c
  5051  002722  640E               	cpfsgt	init_app_eeprom@i,c
  5052  002724  D7DE               	goto	l177
  5053  002726  0C07               	retlw	7
  5054  002728                     __end_of_init_app_eeprom:
  5055                           	opt stack 0
  5056                           tblptru	equ	0xFF8
  5057                           tblptrh	equ	0xFF7
  5058                           tblptrl	equ	0xFF6
  5059                           tablat	equ	0xFF5
  5060                           prodh	equ	0xFF4
  5061                           prodl	equ	0xFF3
  5062                           intcon	equ	0xFF2
  5063                           postinc0	equ	0xFEE
  5064                           wreg	equ	0xFE8
  5065                           indf1	equ	0xFE7
  5066                           fsr1h	equ	0xFE2
  5067                           fsr1l	equ	0xFE1
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           plusw2	equ	0xFDB
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076 ;; *************** function _vscp_setUserID *****************
  5077 ;; Defined at:
  5078 ;;		line 1219 in file "../main.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;  idx             1    wreg     unsigned char 
  5081 ;;  data            1   10[COMRAM] unsigned char 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  idx             1   11[COMRAM] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : F/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5093 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5097 ;;Total ram usage:        2 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    3
  5100 ;; This function calls:
  5101 ;;		_writeEEPROM
  5102 ;; This function is called by:
  5103 ;;		_vscp_writeStdReg
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text19
  5108  002D28                     __ptext19:
  5109                           	opt stack 0
  5110  002D28                     _vscp_setUserID:
  5111                           	opt stack 25
  5112                           
  5113                           ;incstack = 0
  5114                           ;incstack = 0
  5115                           ;vscp_setUserID@idx stored from wreg
  5116  002D28  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;main.c: 1220: writeEEPROM( idx + 0x04, data );
  5120  002D2C  0E04               	movlw	4
  5121  002D2E  240C               	addwf	vscp_setUserID@idx,w,c
  5122  002D30  6E08               	movwf	?_writeEEPROM,c
  5123  002D32  6A09               	clrf	?_writeEEPROM+1,c
  5124  002D34  0E00               	movlw	0
  5125  002D36  2209               	addwfc	?_writeEEPROM+1,f,c
  5126  002D38  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  5127  002D3C  EFD8  F015         	goto	_writeEEPROM	;wreg free
  5128  002D40                     __end_of_vscp_setUserID:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           postinc0	equ	0xFEE
  5138                           wreg	equ	0xFE8
  5139                           indf1	equ	0xFE7
  5140                           fsr1h	equ	0xFE2
  5141                           fsr1l	equ	0xFE1
  5142                           indf2	equ	0xFDF
  5143                           postinc2	equ	0xFDE
  5144                           postdec2	equ	0xFDD
  5145                           plusw2	equ	0xFDB
  5146                           fsr2h	equ	0xFDA
  5147                           fsr2l	equ	0xFD9
  5148                           status	equ	0xFD8
  5149                           
  5150 ;; *************** function _vscp_setManufacturerId *****************
  5151 ;; Defined at:
  5152 ;;		line 507 in file "../main.c"
  5153 ;; Parameters:    Size  Location     Type
  5154 ;;  idx             1    wreg     unsigned char 
  5155 ;;  data            1   10[COMRAM] unsigned char 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;  idx             1   11[COMRAM] unsigned char 
  5158 ;; Return value:  Size  Location     Type
  5159 ;;		None               void
  5160 ;; Registers used:
  5161 ;;		wreg, status,2, status,0, cstack
  5162 ;; Tracked objects:
  5163 ;;		On entry : F/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5167 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5168 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5170 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5171 ;;Total ram usage:        2 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    3
  5174 ;; This function calls:
  5175 ;;		_writeEEPROM
  5176 ;; This function is called by:
  5177 ;;		_vscp_writeStdReg
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text20
  5182  002BFA                     __ptext20:
  5183                           	opt stack 0
  5184  002BFA                     _vscp_setManufacturerId:
  5185                           	opt stack 25
  5186                           
  5187                           ;incstack = 0
  5188                           ;incstack = 0
  5189                           ;vscp_setManufacturerId@idx stored from wreg
  5190  002BFA  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;main.c: 508: if ( idx>7 ) return;
  5194  002BFE  0E07               	movlw	7
  5195  002C00  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  5196  002C02  D001               	goto	l4549
  5197  002C04  0C07               	retlw	7
  5198  002C06                     l4549:
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;main.c: 509: writeEEPROM(0x09 + idx, data);
  5202  002C06  0E09               	movlw	9
  5203  002C08  240C               	addwf	vscp_setManufacturerId@idx,w,c
  5204  002C0A  6E08               	movwf	?_writeEEPROM,c
  5205  002C0C  6A09               	clrf	?_writeEEPROM+1,c
  5206  002C0E  0E00               	movlw	0
  5207  002C10  2209               	addwfc	?_writeEEPROM+1,f,c
  5208  002C12  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  5209  002C16  EFD8  F015         	goto	_writeEEPROM	;wreg free
  5210  002C1A                     __end_of_vscp_setManufacturerId:
  5211                           	opt stack 0
  5212                           tblptru	equ	0xFF8
  5213                           tblptrh	equ	0xFF7
  5214                           tblptrl	equ	0xFF6
  5215                           tablat	equ	0xFF5
  5216                           prodh	equ	0xFF4
  5217                           prodl	equ	0xFF3
  5218                           intcon	equ	0xFF2
  5219                           postinc0	equ	0xFEE
  5220                           wreg	equ	0xFE8
  5221                           indf1	equ	0xFE7
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           postinc2	equ	0xFDE
  5226                           postdec2	equ	0xFDD
  5227                           plusw2	equ	0xFDB
  5228                           fsr2h	equ	0xFDA
  5229                           fsr2l	equ	0xFD9
  5230                           status	equ	0xFD8
  5231                           
  5232 ;; *************** function _vscp_setGUID *****************
  5233 ;; Defined at:
  5234 ;;		line 495 in file "../main.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  idx             1    wreg     unsigned char 
  5237 ;;  data            1   10[COMRAM] unsigned char 
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;  idx             1   11[COMRAM] unsigned char 
  5240 ;; Return value:  Size  Location     Type
  5241 ;;		None               void
  5242 ;; Registers used:
  5243 ;;		wreg, status,2, status,0, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : F/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5249 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5252 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5253 ;;Total ram usage:        2 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:    3
  5256 ;; This function calls:
  5257 ;;		_writeEEPROM
  5258 ;; This function is called by:
  5259 ;;		_vscp_writeStdReg
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text21
  5264  002C1A                     __ptext21:
  5265                           	opt stack 0
  5266  002C1A                     _vscp_setGUID:
  5267                           	opt stack 25
  5268                           
  5269                           ;incstack = 0
  5270                           ;incstack = 0
  5271                           ;vscp_setGUID@idx stored from wreg
  5272  002C1A  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;main.c: 496: if ( idx>15 ) return;
  5276  002C1E  0E0F               	movlw	15
  5277  002C20  640C               	cpfsgt	vscp_setGUID@idx,c
  5278  002C22  D001               	goto	l4543
  5279  002C24  0C0F               	retlw	15
  5280  002C26                     l4543:
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;main.c: 497: writeEEPROM(0x11 + idx, data);
  5284  002C26  0E11               	movlw	17
  5285  002C28  240C               	addwf	vscp_setGUID@idx,w,c
  5286  002C2A  6E08               	movwf	?_writeEEPROM,c
  5287  002C2C  6A09               	clrf	?_writeEEPROM+1,c
  5288  002C2E  0E00               	movlw	0
  5289  002C30  2209               	addwfc	?_writeEEPROM+1,f,c
  5290  002C32  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  5291  002C36  EFD8  F015         	goto	_writeEEPROM	;wreg free
  5292  002C3A                     __end_of_vscp_setGUID:
  5293                           	opt stack 0
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon	equ	0xFF2
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           indf1	equ	0xFE7
  5304                           fsr1h	equ	0xFE2
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           plusw2	equ	0xFDB
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function _vscp_writeAppReg *****************
  5315 ;; Defined at:
  5316 ;;		line 641 in file "../main.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  reg             1    wreg     unsigned char 
  5319 ;;  val             1   20[COMRAM] unsigned char 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  reg             1   22[COMRAM] unsigned char 
  5322 ;;  rv              1   21[COMRAM] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      unsigned char 
  5325 ;; Registers used:
  5326 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : F/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5332 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5335 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5336 ;;Total ram usage:        3 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:    4
  5339 ;; This function calls:
  5340 ;;		_readEEPROM
  5341 ;;		_writeControlReg
  5342 ;;		_writeEEPROM
  5343 ;; This function is called by:
  5344 ;;		_vscp_writeRegister
  5345 ;;		_vscp_handleProtocolEvent
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text22
  5350  0020B6                     __ptext22:
  5351                           	opt stack 0
  5352  0020B6                     _vscp_writeAppReg:
  5353                           	opt stack 24
  5354                           
  5355                           ;incstack = 0
  5356                           ;incstack = 0
  5357                           ;vscp_writeAppReg@reg stored from wreg
  5358  0020B6  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;main.c: 642: uint8_t rv;
  5362                           ;main.c: 644: rv = ~val;
  5363  0020BA  1C15               	comf	vscp_writeAppReg@val,w,c
  5364  0020BC  6E16               	movwf	vscp_writeAppReg@rv,c
  5365                           
  5366                           ;main.c: 647: if ( 0 == vscp_page_select ) {
  5367  0020BE  504F               	movf	_vscp_page_select+1,w,c
  5368  0020C0  104E               	iorwf	_vscp_page_select,w,c
  5369  0020C2  E164               	bnz	l4659
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;main.c: 650: if ( reg == 0 ) {
  5373  0020C4  6617               	tstfsz	vscp_writeAppReg@reg,c
  5374  0020C6  D00D               	goto	l4629
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;main.c: 651: writeEEPROM(0x21 + 0, val);
  5378  0020C8  6A09               	clrf	?_writeEEPROM+1,c
  5379  0020CA  0E21               	movlw	33
  5380  0020CC  6E08               	movwf	?_writeEEPROM,c
  5381  0020CE  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5382  0020D2  ECD8  F015         	call	_writeEEPROM	;wreg free
  5383                           
  5384                           ;main.c: 652: rv = readEEPROM(0x21 + 0);
  5385  0020D6  6A09               	clrf	?_readEEPROM+1,c
  5386  0020D8  0E21               	movlw	33
  5387  0020DA  6E08               	movwf	?_readEEPROM,c
  5388  0020DC  ECD5  F016         	call	_readEEPROM	;wreg free
  5389  0020E0  D067               	goto	L11
  5390  0020E2                     l4629:
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;main.c: 654: else if ( reg == 1 ) {
  5394  0020E2  0417               	decf	vscp_writeAppReg@reg,w,c
  5395  0020E4  E10D               	bnz	l4633
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;main.c: 656: writeEEPROM(0x21 + 1, val);
  5399  0020E6  6A09               	clrf	?_writeEEPROM+1,c
  5400  0020E8  0E22               	movlw	34
  5401  0020EA  6E08               	movwf	?_writeEEPROM,c
  5402  0020EC  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5403  0020F0  ECD8  F015         	call	_writeEEPROM	;wreg free
  5404                           
  5405                           ;main.c: 657: rv = readEEPROM(0x21 + 1);
  5406  0020F4  6A09               	clrf	?_readEEPROM+1,c
  5407  0020F6  0E22               	movlw	34
  5408  0020F8  6E08               	movwf	?_readEEPROM,c
  5409  0020FA  ECD5  F016         	call	_readEEPROM	;wreg free
  5410  0020FE  D058               	goto	L11
  5411  002100                     l4633:
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;main.c: 660: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5415  002100  0E04               	movlw	4
  5416  002102  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5417  002104  D010               	goto	l4639
  5418                           
  5419                           ; BSR set to: 0
  5420  002106  0E17               	movlw	23
  5421  002108  6017               	cpfslt	vscp_writeAppReg@reg,c
  5422  00210A  D00D               	goto	l4639
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;main.c: 661: writeEEPROM(0x21 + 5 +
  5426                           ;main.c: 662: ( reg - 5 ), val);
  5427  00210C  0E21               	movlw	33
  5428  00210E  D853               	call	PL30	;call to abstracted procedure
  5429  002110  ECD8  F015         	call	_writeEEPROM	;wreg free
  5430                           
  5431                           ;main.c: 663: rv = readEEPROM( 0x21 + 5 +
  5432                           ;main.c: 664: ( reg - 5 ) );
  5433  002114  0E21               	movlw	33
  5434  002116  2417               	addwf	vscp_writeAppReg@reg,w,c
  5435  002118  6E08               	movwf	?_readEEPROM,c
  5436  00211A  6A09               	clrf	?_readEEPROM+1,c
  5437  00211C  0E00               	movlw	0
  5438  00211E  2209               	addwfc	?_readEEPROM+1,f,c
  5439  002120  ECD5  F016         	call	_readEEPROM	;wreg free
  5440  002124  D045               	goto	L11
  5441  002126                     l4639:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;main.c: 667: else if ( reg == 2 ) {
  5445  002126  5017               	movf	vscp_writeAppReg@reg,w,c
  5446  002128  0A02               	xorlw	2
  5447  00212A  E10D               	bnz	l4645
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;main.c: 668: writeEEPROM(0x21 + 2, val);
  5451  00212C  6A09               	clrf	?_writeEEPROM+1,c
  5452  00212E  0E23               	movlw	35
  5453  002130  6E08               	movwf	?_writeEEPROM,c
  5454  002132  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5455  002136  ECD8  F015         	call	_writeEEPROM	;wreg free
  5456                           
  5457                           ;main.c: 669: rv = writeControlReg( 0, val );
  5458  00213A  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5459  00213E  0E00               	movlw	0
  5460  002140  EC3F  F00D         	call	_writeControlReg
  5461  002144  D035               	goto	L11
  5462  002146                     l4645:
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;main.c: 672: else if ( reg == 3 ) {
  5466  002146  5017               	movf	vscp_writeAppReg@reg,w,c
  5467  002148  0A03               	xorlw	3
  5468  00214A  E10D               	bnz	l4651
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;main.c: 673: writeEEPROM(0x21 + 3, val);
  5472  00214C  6A09               	clrf	?_writeEEPROM+1,c
  5473  00214E  0E24               	movlw	36
  5474  002150  6E08               	movwf	?_writeEEPROM,c
  5475  002152  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5476  002156  ECD8  F015         	call	_writeEEPROM	;wreg free
  5477                           
  5478                           ;main.c: 674: rv = writeControlReg( 1, val );
  5479  00215A  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5480  00215E  0E01               	movlw	1
  5481  002160  EC3F  F00D         	call	_writeControlReg
  5482  002164  D025               	goto	L11
  5483  002166                     l4651:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;main.c: 677: else if ( reg == 4 ) {
  5487  002166  5017               	movf	vscp_writeAppReg@reg,w,c
  5488  002168  0A04               	xorlw	4
  5489  00216A  E123               	bnz	l4665
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;main.c: 678: writeEEPROM(0x21 + 4, val);
  5493  00216C  6A09               	clrf	?_writeEEPROM+1,c
  5494  00216E  0E25               	movlw	37
  5495  002170  6E08               	movwf	?_writeEEPROM,c
  5496  002172  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5497  002176  ECD8  F015         	call	_writeEEPROM	;wreg free
  5498                           
  5499                           ;main.c: 679: rv = writeControlReg( 2, val );
  5500  00217A  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5501  00217E  0E02               	movlw	2
  5502  002180  EC3F  F00D         	call	_writeControlReg
  5503  002184  6E16               	movwf	vscp_writeAppReg@rv,c
  5504                           
  5505                           ;main.c: 680: rv &= 0x03;
  5506  002186  0E03               	movlw	3
  5507  002188  1616               	andwf	vscp_writeAppReg@rv,f,c
  5508  00218A  D013               	goto	l4665
  5509  00218C                     l4659:
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;main.c: 685: else if ( 1 == vscp_page_select ) {
  5513  00218C  044E               	decf	_vscp_page_select,w,c
  5514  00218E  104F               	iorwf	_vscp_page_select+1,w,c
  5515  002190  E110               	bnz	l4665
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;main.c: 688: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5519                           ;main.c: 689: ( 8 * 8 ) ) ) ) {
  5520  002192  0E41               	movlw	65
  5521  002194  6017               	cpfslt	vscp_writeAppReg@reg,c
  5522  002196  D00D               	goto	l4665
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;main.c: 690: writeEEPROM(0x21 + 0x21 +
  5526                           ;main.c: 691: 23 + ( reg - 0 ), val);
  5527  002198  0E59               	movlw	89
  5528  00219A  D80D               	call	PL30	;call to abstracted procedure
  5529  00219C  ECD8  F015         	call	_writeEEPROM	;wreg free
  5530                           
  5531                           ;main.c: 692: rv = readEEPROM(0x21 + 0x21 +
  5532                           ;main.c: 693: 23 + ( reg - 0 ) );
  5533  0021A0  0E59               	movlw	89
  5534  0021A2  2417               	addwf	vscp_writeAppReg@reg,w,c
  5535  0021A4  6E08               	movwf	?_readEEPROM,c
  5536  0021A6  6A09               	clrf	?_readEEPROM+1,c
  5537  0021A8  0E00               	movlw	0
  5538  0021AA  2209               	addwfc	?_readEEPROM+1,f,c
  5539  0021AC  ECD5  F016         	call	_readEEPROM	;wreg free
  5540  0021B0                     L11:
  5541  0021B0  6E16               	movwf	vscp_writeAppReg@rv,c
  5542  0021B2                     l4665:
  5543                           
  5544                           ;main.c: 694: }
  5545                           ;main.c: 696: }
  5546                           ;main.c: 698: return rv;
  5547  0021B2  5016               	movf	vscp_writeAppReg@rv,w,c
  5548  0021B4  0012               	return	
  5549  0021B6                     __end_of_vscp_writeAppReg:
  5550                           	opt stack 0
  5551  0021B6                     PL30:
  5552                           	opt stack 24
  5553  0021B6  2417               	addwf	vscp_writeAppReg@reg,w,c
  5554  0021B8  6E08               	movwf	?_writeEEPROM,c
  5555  0021BA  6A09               	clrf	?_writeEEPROM+1,c
  5556  0021BC  0E00               	movlw	0
  5557  0021BE  2209               	addwfc	?_writeEEPROM+1,f,c
  5558  0021C0  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5559  0021C4  0C00               	retlw	0
  5560  0021C6                     __end_ofPL30:
  5561                           	opt stack 0
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           indf1	equ	0xFE7
  5572                           fsr1h	equ	0xFE2
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           plusw2	equ	0xFDB
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _writeControlReg *****************
  5583 ;; Defined at:
  5584 ;;		line 706 in file "../main.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  ctrlreg         1    wreg     unsigned char 
  5587 ;;  val             1   16[COMRAM] unsigned char 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  5590 ;;  rv              1   19[COMRAM] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      unsigned char 
  5593 ;; Registers used:
  5594 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5600 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5601 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5603 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5604 ;;Total ram usage:        4 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    3
  5607 ;; This function calls:
  5608 ;;		_readControlReg
  5609 ;; This function is called by:
  5610 ;;		_main
  5611 ;;		_vscp_writeAppReg
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text23
  5616  001A7E                     __ptext23:
  5617                           	opt stack 0
  5618  001A7E                     _writeControlReg:
  5619                           	opt stack 24
  5620                           
  5621                           ;incstack = 0
  5622                           ;incstack = 0
  5623                           ;writeControlReg@ctrlreg stored from wreg
  5624  001A7E  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  5625                           
  5626                           ;main.c: 707: uint8_t rv = 0;
  5627  001A82  6A14               	clrf	writeControlReg@rv,c
  5628                           
  5629                           ;main.c: 709: switch ( ctrlreg ) {
  5630  001A84  D0B9               	goto	l3805
  5631  001A86                     l3791:
  5632  001A86  0E01               	movlw	1
  5633                           
  5634                           ;main.c: 712: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  5635  001A88  A011               	btfss	writeControlReg@val,0,c
  5636  001A8A  0E00               	movlw	0
  5637  001A8C  6E12               	movwf	??_writeControlReg& (0+255),c
  5638  001A8E  3212               	rrcf	??_writeControlReg,f,c
  5639  001A90  3212               	rrcf	??_writeControlReg,f,c
  5640  001A92  5082               	movf	3970,w,c	;volatile
  5641  001A94  1812               	xorwf	??_writeControlReg,w,c
  5642  001A96  0B7F               	andlw	-129
  5643  001A98  1812               	xorwf	??_writeControlReg,w,c
  5644  001A9A  6E82               	movwf	3970,c	;volatile
  5645  001A9C  0E01               	movlw	1
  5646                           
  5647                           ;main.c: 713: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  5648  001A9E  A211               	btfss	writeControlReg@val,1,c
  5649  001AA0  0E00               	movlw	0
  5650  001AA2  6E12               	movwf	??_writeControlReg& (0+255),c
  5651  001AA4  3A12               	swapf	??_writeControlReg,f,c
  5652  001AA6  4612               	rlncf	??_writeControlReg,f,c
  5653  001AA8  4612               	rlncf	??_writeControlReg,f,c
  5654  001AAA  5082               	movf	3970,w,c	;volatile
  5655  001AAC  1812               	xorwf	??_writeControlReg,w,c
  5656  001AAE  0BBF               	andlw	-65
  5657  001AB0  1812               	xorwf	??_writeControlReg,w,c
  5658  001AB2  6E82               	movwf	3970,c	;volatile
  5659  001AB4  0E01               	movlw	1
  5660                           
  5661                           ;main.c: 714: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  5662  001AB6  A411               	btfss	writeControlReg@val,2,c
  5663  001AB8  0E00               	movlw	0
  5664  001ABA  6E12               	movwf	??_writeControlReg& (0+255),c
  5665  001ABC  4612               	rlncf	??_writeControlReg,f,c
  5666  001ABE  4612               	rlncf	??_writeControlReg,f,c
  5667  001AC0  4612               	rlncf	??_writeControlReg,f,c
  5668  001AC2  5082               	movf	3970,w,c	;volatile
  5669  001AC4  1812               	xorwf	??_writeControlReg,w,c
  5670  001AC6  0BF7               	andlw	-9
  5671  001AC8  1812               	xorwf	??_writeControlReg,w,c
  5672  001ACA  6E82               	movwf	3970,c	;volatile
  5673  001ACC  0E01               	movlw	1
  5674                           
  5675                           ;main.c: 715: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  5676  001ACE  A611               	btfss	writeControlReg@val,3,c
  5677  001AD0  0E00               	movlw	0
  5678  001AD2  6E12               	movwf	??_writeControlReg& (0+255),c
  5679  001AD4  3A12               	swapf	??_writeControlReg,f,c
  5680  001AD6  5082               	movf	3970,w,c	;volatile
  5681  001AD8  1812               	xorwf	??_writeControlReg,w,c
  5682  001ADA  0BEF               	andlw	-17
  5683  001ADC  1812               	xorwf	??_writeControlReg,w,c
  5684  001ADE  6E82               	movwf	3970,c	;volatile
  5685  001AE0  0E01               	movlw	1
  5686                           
  5687                           ;main.c: 716: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  5688  001AE2  A811               	btfss	writeControlReg@val,4,c
  5689  001AE4  0E00               	movlw	0
  5690  001AE6  6E12               	movwf	??_writeControlReg& (0+255),c
  5691  001AE8  3A12               	swapf	??_writeControlReg,f,c
  5692  001AEA  4612               	rlncf	??_writeControlReg,f,c
  5693  001AEC  5082               	movf	3970,w,c	;volatile
  5694  001AEE  1812               	xorwf	??_writeControlReg,w,c
  5695  001AF0  0BDF               	andlw	-33
  5696  001AF2  1812               	xorwf	??_writeControlReg,w,c
  5697  001AF4  6E82               	movwf	3970,c	;volatile
  5698  001AF6  0E01               	movlw	1
  5699                           
  5700                           ;main.c: 717: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  5701  001AF8  AA11               	btfss	writeControlReg@val,5,c
  5702  001AFA  0E00               	movlw	0
  5703  001AFC  6E12               	movwf	??_writeControlReg& (0+255),c
  5704  001AFE  5080               	movf	3968,w,c	;volatile
  5705  001B00  1812               	xorwf	??_writeControlReg,w,c
  5706  001B02  0BFE               	andlw	-2
  5707  001B04  1812               	xorwf	??_writeControlReg,w,c
  5708  001B06  6E80               	movwf	3968,c	;volatile
  5709  001B08  0E01               	movlw	1
  5710                           
  5711                           ;main.c: 718: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  5712  001B0A  AC11               	btfss	writeControlReg@val,6,c
  5713  001B0C  0E00               	movlw	0
  5714  001B0E  6E12               	movwf	??_writeControlReg& (0+255),c
  5715  001B10  4612               	rlncf	??_writeControlReg,f,c
  5716  001B12  5080               	movf	3968,w,c	;volatile
  5717  001B14  1812               	xorwf	??_writeControlReg,w,c
  5718  001B16  0BFD               	andlw	-3
  5719  001B18  1812               	xorwf	??_writeControlReg,w,c
  5720  001B1A  6E80               	movwf	3968,c	;volatile
  5721  001B1C  0E01               	movlw	1
  5722                           
  5723                           ;main.c: 719: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  5724  001B1E  AE11               	btfss	writeControlReg@val,7,c
  5725  001B20  0E00               	movlw	0
  5726  001B22  6E12               	movwf	??_writeControlReg& (0+255),c
  5727  001B24  4612               	rlncf	??_writeControlReg,f,c
  5728  001B26  4612               	rlncf	??_writeControlReg,f,c
  5729  001B28  5080               	movf	3968,w,c	;volatile
  5730  001B2A  1812               	xorwf	??_writeControlReg,w,c
  5731  001B2C  0BFB               	andlw	-5
  5732  001B2E  1812               	xorwf	??_writeControlReg,w,c
  5733  001B30  6E80               	movwf	3968,c	;volatile
  5734                           
  5735                           ;main.c: 720: rv = readControlReg( 0 );
  5736  001B32  0E00               	movlw	0
  5737  001B34  EC66  F011         	call	_readControlReg
  5738  001B38  D05D               	goto	L13
  5739  001B3A                     l3795:
  5740  001B3A  0E01               	movlw	1
  5741                           
  5742                           ;main.c: 724: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  5743  001B3C  A011               	btfss	writeControlReg@val,0,c
  5744  001B3E  0E00               	movlw	0
  5745  001B40  6E12               	movwf	??_writeControlReg& (0+255),c
  5746  001B42  4612               	rlncf	??_writeControlReg,f,c
  5747  001B44  4612               	rlncf	??_writeControlReg,f,c
  5748  001B46  4612               	rlncf	??_writeControlReg,f,c
  5749  001B48  5080               	movf	3968,w,c	;volatile
  5750  001B4A  1812               	xorwf	??_writeControlReg,w,c
  5751  001B4C  0BF7               	andlw	-9
  5752  001B4E  1812               	xorwf	??_writeControlReg,w,c
  5753  001B50  6E80               	movwf	3968,c	;volatile
  5754  001B52  0E01               	movlw	1
  5755                           
  5756                           ;main.c: 725: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  5757  001B54  A211               	btfss	writeControlReg@val,1,c
  5758  001B56  0E00               	movlw	0
  5759  001B58  6E12               	movwf	??_writeControlReg& (0+255),c
  5760  001B5A  3A12               	swapf	??_writeControlReg,f,c
  5761  001B5C  4612               	rlncf	??_writeControlReg,f,c
  5762  001B5E  5080               	movf	3968,w,c	;volatile
  5763  001B60  1812               	xorwf	??_writeControlReg,w,c
  5764  001B62  0BDF               	andlw	-33
  5765  001B64  1812               	xorwf	??_writeControlReg,w,c
  5766  001B66  6E80               	movwf	3968,c	;volatile
  5767  001B68  0E01               	movlw	1
  5768                           
  5769                           ;main.c: 728: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  5770  001B6A  A811               	btfss	writeControlReg@val,4,c
  5771  001B6C  0E00               	movlw	0
  5772  001B6E  6E12               	movwf	??_writeControlReg& (0+255),c
  5773  001B70  3A12               	swapf	??_writeControlReg,f,c
  5774  001B72  5081               	movf	3969,w,c	;volatile
  5775  001B74  1812               	xorwf	??_writeControlReg,w,c
  5776  001B76  0BEF               	andlw	-17
  5777  001B78  1812               	xorwf	??_writeControlReg,w,c
  5778  001B7A  6E81               	movwf	3969,c	;volatile
  5779  001B7C  0E01               	movlw	1
  5780                           
  5781                           ;main.c: 729: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  5782  001B7E  AA11               	btfss	writeControlReg@val,5,c
  5783  001B80  0E00               	movlw	0
  5784  001B82  6E12               	movwf	??_writeControlReg& (0+255),c
  5785  001B84  4612               	rlncf	??_writeControlReg,f,c
  5786  001B86  4612               	rlncf	??_writeControlReg,f,c
  5787  001B88  5082               	movf	3970,w,c	;volatile
  5788  001B8A  1812               	xorwf	??_writeControlReg,w,c
  5789  001B8C  0BFB               	andlw	-5
  5790  001B8E  1812               	xorwf	??_writeControlReg,w,c
  5791  001B90  6E82               	movwf	3970,c	;volatile
  5792  001B92  0E01               	movlw	1
  5793                           
  5794                           ;main.c: 730: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  5795  001B94  AC11               	btfss	writeControlReg@val,6,c
  5796  001B96  0E00               	movlw	0
  5797  001B98  6E12               	movwf	??_writeControlReg& (0+255),c
  5798  001B9A  4612               	rlncf	??_writeControlReg,f,c
  5799  001B9C  5081               	movf	3969,w,c	;volatile
  5800  001B9E  1812               	xorwf	??_writeControlReg,w,c
  5801  001BA0  0BFD               	andlw	-3
  5802  001BA2  1812               	xorwf	??_writeControlReg,w,c
  5803  001BA4  6E81               	movwf	3969,c	;volatile
  5804  001BA6  0E01               	movlw	1
  5805                           
  5806                           ;main.c: 731: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  5807  001BA8  AE11               	btfss	writeControlReg@val,7,c
  5808  001BAA  0E00               	movlw	0
  5809  001BAC  6E12               	movwf	??_writeControlReg& (0+255),c
  5810  001BAE  5081               	movf	3969,w,c	;volatile
  5811  001BB0  1812               	xorwf	??_writeControlReg,w,c
  5812  001BB2  0BFE               	andlw	-2
  5813  001BB4  1812               	xorwf	??_writeControlReg,w,c
  5814  001BB6  6E81               	movwf	3969,c	;volatile
  5815                           
  5816                           ;main.c: 732: rv = readControlReg( 1 );
  5817  001BB8  0E01               	movlw	1
  5818  001BBA  EC66  F011         	call	_readControlReg
  5819  001BBE  D01A               	goto	L13
  5820  001BC0                     l3799:
  5821  001BC0  0E01               	movlw	1
  5822                           
  5823                           ;main.c: 736: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  5824  001BC2  A011               	btfss	writeControlReg@val,0,c
  5825  001BC4  0E00               	movlw	0
  5826  001BC6  6E12               	movwf	??_writeControlReg& (0+255),c
  5827  001BC8  3A12               	swapf	??_writeControlReg,f,c
  5828  001BCA  4612               	rlncf	??_writeControlReg,f,c
  5829  001BCC  4612               	rlncf	??_writeControlReg,f,c
  5830  001BCE  5081               	movf	3969,w,c	;volatile
  5831  001BD0  1812               	xorwf	??_writeControlReg,w,c
  5832  001BD2  0BBF               	andlw	-65
  5833  001BD4  1812               	xorwf	??_writeControlReg,w,c
  5834  001BD6  6E81               	movwf	3969,c	;volatile
  5835  001BD8  0E01               	movlw	1
  5836                           
  5837                           ;main.c: 737: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  5838  001BDA  A211               	btfss	writeControlReg@val,1,c
  5839  001BDC  0E00               	movlw	0
  5840  001BDE  6E12               	movwf	??_writeControlReg& (0+255),c
  5841  001BE0  3A12               	swapf	??_writeControlReg,f,c
  5842  001BE2  4612               	rlncf	??_writeControlReg,f,c
  5843  001BE4  5081               	movf	3969,w,c	;volatile
  5844  001BE6  1812               	xorwf	??_writeControlReg,w,c
  5845  001BE8  0BDF               	andlw	-33
  5846  001BEA  1812               	xorwf	??_writeControlReg,w,c
  5847  001BEC  6E81               	movwf	3969,c	;volatile
  5848                           
  5849                           ;main.c: 738: rv = readControlReg( 2 );
  5850  001BEE  0E02               	movlw	2
  5851  001BF0  EC66  F011         	call	_readControlReg
  5852  001BF4                     L13:
  5853  001BF4  6E14               	movwf	writeControlReg@rv,c
  5854                           
  5855                           ;main.c: 739: break;
  5856  001BF6  D007               	goto	l3807
  5857  001BF8                     l3805:
  5858  001BF8  5013               	movf	writeControlReg@ctrlreg,w,c
  5859                           
  5860                           ; Switch size 1, requested type "space"
  5861                           ; Number of cases is 3, Range of values is 0 to 2
  5862                           ; switch strategies available:
  5863                           ; Name         Instructions Cycles
  5864                           ; simple_byte           10     6 (average)
  5865                           ;	Chosen strategy is simple_byte
  5866  001BFA  E101 D744          	bz	l3791
  5867  001BFE  0A01               	xorlw	1	; case 1
  5868  001C00  E09C               	bz	l3795
  5869  001C02  0A03               	xorlw	3	; case 2
  5870  001C04  E0DD               	bz	l3799
  5871  001C06                     l3807:
  5872                           
  5873                           ;main.c: 742: return rv;
  5874  001C06  5014               	movf	writeControlReg@rv,w,c
  5875  001C08  0012               	return	
  5876  001C0A                     __end_of_writeControlReg:
  5877                           	opt stack 0
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           intcon	equ	0xFF2
  5885                           postinc0	equ	0xFEE
  5886                           wreg	equ	0xFE8
  5887                           indf1	equ	0xFE7
  5888                           fsr1h	equ	0xFE2
  5889                           fsr1l	equ	0xFE1
  5890                           indf2	equ	0xFDF
  5891                           postinc2	equ	0xFDE
  5892                           postdec2	equ	0xFDD
  5893                           plusw2	equ	0xFDB
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function _vscp_readRegister *****************
  5899 ;; Defined at:
  5900 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  reg             1    wreg     unsigned char 
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  reg             1   28[COMRAM] unsigned char 
  5905 ;; Return value:  Size  Location     Type
  5906 ;;                  1    wreg      unsigned char 
  5907 ;; Registers used:
  5908 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5909 ;; Tracked objects:
  5910 ;;		On entry : F/0
  5911 ;;		On exit  : 0/0
  5912 ;;		Unchanged: 0/0
  5913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5917 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5918 ;;Total ram usage:        1 bytes
  5919 ;; Hardware stack levels used:    1
  5920 ;; Hardware stack levels required when called:    5
  5921 ;; This function calls:
  5922 ;;		_vscp_readAppReg
  5923 ;;		_vscp_readStdReg
  5924 ;; This function is called by:
  5925 ;;		_vscp_handleProtocolEvent
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text24
  5930  002D58                     __ptext24:
  5931                           	opt stack 0
  5932  002D58                     _vscp_readRegister:
  5933                           	opt stack 24
  5934                           
  5935                           ;incstack = 0
  5936                           ;incstack = 0
  5937                           ;vscp_readRegister@reg stored from wreg
  5938  002D58  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
  5942  002D5C  0E7F               	movlw	127
  5943  002D5E  641D               	cpfsgt	vscp_readRegister@reg,c
  5944  002D60  D003               	goto	l5201
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
  5948  002D62  501D               	movf	vscp_readRegister@reg,w,c
  5949  002D64  EF70  F00C         	goto	_vscp_readStdReg
  5950  002D68                     l5201:
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
  5954  002D68  501D               	movf	vscp_readRegister@reg,w,c
  5955  002D6A  EF94  F013         	goto	_vscp_readAppReg
  5956  002D6E                     __end_of_vscp_readRegister:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon	equ	0xFF2
  5965                           postinc0	equ	0xFEE
  5966                           wreg	equ	0xFE8
  5967                           indf1	equ	0xFE7
  5968                           fsr1h	equ	0xFE2
  5969                           fsr1l	equ	0xFE1
  5970                           indf2	equ	0xFDF
  5971                           postinc2	equ	0xFDE
  5972                           postdec2	equ	0xFDD
  5973                           plusw2	equ	0xFDB
  5974                           fsr2h	equ	0xFDA
  5975                           fsr2l	equ	0xFD9
  5976                           status	equ	0xFD8
  5977                           
  5978 ;; *************** function _vscp_readStdReg *****************
  5979 ;; Defined at:
  5980 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  reg             1    wreg     unsigned char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  reg             1   27[COMRAM] unsigned char 
  5985 ;;  code            4   20[COMRAM] unsigned long 
  5986 ;;  idx             1   25[COMRAM] unsigned char 
  5987 ;;  code            4   16[COMRAM] unsigned long 
  5988 ;;  idx             1   24[COMRAM] unsigned char 
  5989 ;;  rv              1   26[COMRAM] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      unsigned char 
  5992 ;; Registers used:
  5993 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5994 ;; Tracked objects:
  5995 ;;		On entry : F/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6000 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6001 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6002 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6003 ;;Total ram usage:       17 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    4
  6006 ;; This function calls:
  6007 ;;		_vscp_getMajorVersion
  6008 ;;		_vscp_getMinorVersion
  6009 ;;		_vscp_getSubMinorVersion
  6010 ;;		_vscp_getGUID
  6011 ;;		_vscp_getMDF_URL
  6012 ;;		_vscp_getUserID
  6013 ;;		_vscp_getManufacturerId
  6014 ;;		_vscp_getBootLoaderAlgorithm
  6015 ;;		_vscp_getBufferSize
  6016 ;;		_vscp_getFamilyCode
  6017 ;;		_vscp_getFamilyType
  6018 ;;		_vscp_getRegisterPagesUsed
  6019 ;; This function is called by:
  6020 ;;		_vscp_readRegister
  6021 ;;		_vscp_handleProtocolEvent
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           	psect	text25
  6026  0018E0                     __ptext25:
  6027                           	opt stack 0
  6028  0018E0                     _vscp_readStdReg:
  6029                           	opt stack 25
  6030                           
  6031                           ;incstack = 0
  6032                           ;incstack = 0
  6033                           ;vscp_readStdReg@reg stored from wreg
  6034  0018E0  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;vscp_firmware.c: 567: uint8_t rv = 0;
  6038  0018E4  6A1B               	clrf	vscp_readStdReg@rv,c
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;vscp_firmware.c: 569: if (0x80 == reg) {
  6042  0018E6  501C               	movf	vscp_readStdReg@reg,w,c
  6043  0018E8  0A80               	xorlw	128
  6044  0018EA  E104               	bnz	l5211
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
  6048  0018EC  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  6049                           
  6050                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
  6051  0018F0  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6052                           
  6053                           ;vscp_firmware.c: 575: }
  6054  0018F2  D0B3               	goto	l5299
  6055  0018F4                     l5211:
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
  6059  0018F4  501C               	movf	vscp_readStdReg@reg,w,c
  6060  0018F6  0A81               	xorlw	129
  6061  0018F8  E102               	bnz	l5215
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;vscp_firmware.c: 579: rv = 1;
  6065  0018FA  0E01               	movlw	1
  6066  0018FC  D075               	goto	L24
  6067  0018FE                     l5215:
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
  6071  0018FE  501C               	movf	vscp_readStdReg@reg,w,c
  6072  001900  0A82               	xorlw	130
  6073  001902  E102               	bnz	l5219
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;vscp_firmware.c: 585: rv = 5;
  6077  001904  0E05               	movlw	5
  6078  001906  D070               	goto	L24
  6079  001908                     l5219:
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
  6083  001908  501C               	movf	vscp_readStdReg@reg,w,c
  6084  00190A  0A83               	xorlw	131
  6085  00190C  E102               	bnz	l5223
  6086                           
  6087                           ; BSR set to: 0
  6088                           ;vscp_firmware.c: 591: rv = 0;
  6089  00190E  6A1B               	clrf	vscp_readStdReg@rv,c
  6090                           
  6091                           ;vscp_firmware.c: 593: }
  6092  001910  D0A4               	goto	l5299
  6093  001912                     l5223:
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
  6097  001912  501C               	movf	vscp_readStdReg@reg,w,c
  6098  001914  0A94               	xorlw	148
  6099  001916  E103               	bnz	l5227
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
  6103  001918  EC47  F017         	call	_vscp_getMajorVersion	;wreg free
  6104  00191C  D065               	goto	L24
  6105  00191E                     l5227:
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
  6109  00191E  501C               	movf	vscp_readStdReg@reg,w,c
  6110  001920  0A95               	xorlw	149
  6111  001922  E103               	bnz	l5231
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
  6115  001924  EC46  F017         	call	_vscp_getMinorVersion	;wreg free
  6116  001928  D05F               	goto	L24
  6117  00192A                     l5231:
  6118                           
  6119                           ; BSR set to: 0
  6120                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
  6121  00192A  501C               	movf	vscp_readStdReg@reg,w,c
  6122  00192C  0A96               	xorlw	150
  6123  00192E  E103               	bnz	l5235
  6124                           
  6125                           ; BSR set to: 0
  6126                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
  6127  001930  EC45  F017         	call	_vscp_getSubMinorVersion	;wreg free
  6128  001934  D059               	goto	L24
  6129  001936                     l5235:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
  6133  001936  0E89               	movlw	137
  6134  001938  601C               	cpfslt	vscp_readStdReg@reg,c
  6135  00193A  D005               	goto	l5239
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
  6139  00193C  501C               	movf	vscp_readStdReg@reg,w,c
  6140  00193E  0F7C               	addlw	124
  6141  001940  ECC1  F016         	call	_vscp_getUserID
  6142  001944  D051               	goto	L24
  6143  001946                     l5239:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
  6147                           ;vscp_firmware.c: 619: (reg < 0x91)) {
  6148  001946  0E88               	movlw	136
  6149  001948  641C               	cpfsgt	vscp_readStdReg@reg,c
  6150  00194A  D008               	goto	l5245
  6151                           
  6152                           ; BSR set to: 0
  6153  00194C  0E91               	movlw	145
  6154  00194E  601C               	cpfslt	vscp_readStdReg@reg,c
  6155  001950  D005               	goto	l5245
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
  6159  001952  501C               	movf	vscp_readStdReg@reg,w,c
  6160  001954  0F77               	addlw	119
  6161  001956  ECB7  F016         	call	_vscp_getManufacturerId
  6162  00195A  D046               	goto	L24
  6163  00195C                     l5245:
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
  6167  00195C  501C               	movf	vscp_readStdReg@reg,w,c
  6168  00195E  0A91               	xorlw	145
  6169  001960  E103               	bnz	l5249
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;vscp_firmware.c: 628: rv = vscp_nickname;
  6173  001962  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6174                           
  6175                           ;vscp_firmware.c: 630: }
  6176  001966  D079               	goto	l5299
  6177  001968                     l5249:
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
  6181  001968  501C               	movf	vscp_readStdReg@reg,w,c
  6182  00196A  0A93               	xorlw	147
  6183  00196C  E103               	bnz	l5253
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
  6187  00196E  C04E  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6188                           
  6189                           ;vscp_firmware.c: 636: }
  6190  001972  D073               	goto	l5299
  6191  001974                     l5253:
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
  6195  001974  501C               	movf	vscp_readStdReg@reg,w,c
  6196  001976  0A92               	xorlw	146
  6197  001978  E102               	bnz	l5257
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
  6201  00197A  504F               	movf	_vscp_page_select+1,w,c
  6202  00197C  D035               	goto	L24
  6203  00197E                     l5257:
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
  6207  00197E  501C               	movf	vscp_readStdReg@reg,w,c
  6208  001980  0A97               	xorlw	151
  6209  001982  E103               	bnz	l5261
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
  6213  001984  EC44  F017         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6214  001988  D02F               	goto	L24
  6215  00198A                     l5261:
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
  6219  00198A  501C               	movf	vscp_readStdReg@reg,w,c
  6220  00198C  0A98               	xorlw	152
  6221  00198E  E103               	bnz	l5265
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
  6225  001990  EC43  F017         	call	_vscp_getBufferSize	;wreg free
  6226  001994  D029               	goto	L24
  6227  001996                     l5265:
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
  6231  001996  501C               	movf	vscp_readStdReg@reg,w,c
  6232  001998  0A99               	xorlw	153
  6233  00199A  E103               	bnz	l5269
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
  6237  00199C  EC42  F017         	call	_vscp_getRegisterPagesUsed	;wreg free
  6238  0019A0  D023               	goto	L24
  6239  0019A2                     l5269:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;vscp_firmware.c: 656: else if ( ( reg >= 0x9A ) &&
  6243                           ;vscp_firmware.c: 657: ( reg < ( 0x9A + 4 ) ) ) {
  6244  0019A2  0E99               	movlw	153
  6245  0019A4  641C               	cpfsgt	vscp_readStdReg@reg,c
  6246  0019A6  D022               	goto	l5279
  6247                           
  6248                           ; BSR set to: 0
  6249  0019A8  0E9E               	movlw	158
  6250  0019AA  601C               	cpfslt	vscp_readStdReg@reg,c
  6251  0019AC  D01F               	goto	l5279
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;vscp_firmware.c: 659: uint32_t code = vscp_getFamilyCode();
  6255  0019AE  EC23  F017         	call	_vscp_getFamilyCode	;wreg free
  6256  0019B2  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6257  0019B6  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6258  0019BA  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6259  0019BE  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;vscp_firmware.c: 660: uint8_t idx = reg - 0x9A;
  6263  0019C2  501C               	movf	vscp_readStdReg@reg,w,c
  6264  0019C4  0F66               	addlw	102
  6265  0019C6  6E19               	movwf	vscp_readStdReg@idx,c
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;vscp_firmware.c: 661: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6269  0019C8  5019               	movf	vscp_readStdReg@idx,w,c
  6270  0019CA  D849               	call	PL26	;call to abstracted procedure
  6271  0019CC  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6272  0019D0  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6273  0019D4  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6274  0019D8  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6275  0019DC  2AE8               	incf	wreg,f,c
  6276  0019DE  D001               	goto	u5090
  6277  0019E0                     u5095:
  6278  0019E0  D848               	call	PL38	;call to abstracted procedure
  6279  0019E2                     u5090:
  6280  0019E2  2EE8               	decfsz	wreg,f,c
  6281  0019E4  D7FD               	goto	u5095
  6282  0019E6  D024               	goto	L25
  6283  0019E8                     L24:
  6284  0019E8  6E1B               	movwf	vscp_readStdReg@rv,c
  6285                           
  6286                           ;vscp_firmware.c: 662: }
  6287  0019EA  D037               	goto	l5299
  6288  0019EC                     l5279:
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;vscp_firmware.c: 663: else if ( ( reg >= 0x9E ) &&
  6292                           ;vscp_firmware.c: 664: ( reg < ( 0x9E + 4 ) ) ) {
  6293  0019EC  0E9D               	movlw	157
  6294  0019EE  641C               	cpfsgt	vscp_readStdReg@reg,c
  6295  0019F0  D021               	goto	l5289
  6296                           
  6297                           ; BSR set to: 0
  6298  0019F2  0EA2               	movlw	162
  6299  0019F4  601C               	cpfslt	vscp_readStdReg@reg,c
  6300  0019F6  D01E               	goto	l5289
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;vscp_firmware.c: 666: uint32_t code = vscp_getFamilyType();
  6304  0019F8  EC1E  F017         	call	_vscp_getFamilyType	;wreg free
  6305  0019FC  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1111+3
  6306  001A00  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1111+2
  6307  001A04  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1111+1
  6308  001A08  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1111
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;vscp_firmware.c: 667: uint8_t idx = reg - 0x9E;
  6312  001A0C  501C               	movf	vscp_readStdReg@reg,w,c
  6313  001A0E  0F62               	addlw	98
  6314  001A10  6E1A               	movwf	vscp_readStdReg@idx_1112,c
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;vscp_firmware.c: 668: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6318  001A12  501A               	movf	vscp_readStdReg@idx_1112,w,c
  6319  001A14  D824               	call	PL26	;call to abstracted procedure
  6320  001A16  C015  F00D         	movff	vscp_readStdReg@code_1111,??_vscp_readStdReg+1
  6321  001A1A  C016  F00E         	movff	vscp_readStdReg@code_1111+1,??_vscp_readStdReg+2
  6322  001A1E  C017  F00F         	movff	vscp_readStdReg@code_1111+2,??_vscp_readStdReg+3
  6323  001A22  C018  F010         	movff	vscp_readStdReg@code_1111+3,??_vscp_readStdReg+4
  6324  001A26  2AE8               	incf	wreg,f,c
  6325  001A28  D001               	goto	u5120
  6326  001A2A                     u5125:
  6327  001A2A  D823               	call	PL38	;call to abstracted procedure
  6328  001A2C                     u5120:
  6329  001A2C  2EE8               	decfsz	wreg,f,c
  6330  001A2E  D7FD               	goto	u5125
  6331  001A30                     L25:
  6332  001A30  500D               	movf	??_vscp_readStdReg+1,w,c
  6333  001A32  D7DA               	goto	L24
  6334  001A34                     l5289:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;vscp_firmware.c: 670: else if ((reg > (0xD0 - 1)) &&
  6338                           ;vscp_firmware.c: 671: (reg < 0xE0)) {
  6339  001A34  0ECF               	movlw	207
  6340  001A36  641C               	cpfsgt	vscp_readStdReg@reg,c
  6341  001A38  D008               	goto	l5295
  6342                           
  6343                           ; BSR set to: 0
  6344  001A3A  0EE0               	movlw	224
  6345  001A3C  601C               	cpfslt	vscp_readStdReg@reg,c
  6346  001A3E  D005               	goto	l5295
  6347                           
  6348                           ; BSR set to: 0
  6349                           ;vscp_firmware.c: 674: rv = vscp_getGUID(reg - 0xD0);
  6350  001A40  501C               	movf	vscp_readStdReg@reg,w,c
  6351  001A42  0F30               	addlw	48
  6352  001A44  ECCB  F016         	call	_vscp_getGUID
  6353  001A48  D7CF               	goto	L24
  6354  001A4A                     l5295:
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;vscp_firmware.c: 677: else if ( reg >= 0xE0 ) {
  6358  001A4A  0EDF               	movlw	223
  6359  001A4C  641C               	cpfsgt	vscp_readStdReg@reg,c
  6360  001A4E  D005               	goto	l5299
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;vscp_firmware.c: 680: rv = vscp_getMDF_URL(reg - 0xE0);
  6364  001A50  501C               	movf	vscp_readStdReg@reg,w,c
  6365  001A52  0F20               	addlw	32
  6366  001A54  EC79  F016         	call	_vscp_getMDF_URL
  6367  001A58  D7C7               	goto	L24
  6368  001A5A                     l5299:
  6369                           
  6370                           ;vscp_firmware.c: 682: }
  6371                           ;vscp_firmware.c: 684: return rv;
  6372  001A5A  501B               	movf	vscp_readStdReg@rv,w,c
  6373  001A5C  0012               	return	
  6374  001A5E                     __end_of_vscp_readStdReg:
  6375                           	opt stack 0
  6376  001A5E                     PL26:
  6377                           	opt stack 25
  6378  001A5E  0803               	sublw	3
  6379  001A60  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6380  001A62  90D8               	bcf	status,0,c
  6381  001A64  360C               	rlcf	??_vscp_readStdReg,f,c
  6382  001A66  90D8               	bcf	status,0,c
  6383  001A68  360C               	rlcf	??_vscp_readStdReg,f,c
  6384  001A6A  90D8               	bcf	status,0,c
  6385  001A6C  360C               	rlcf	??_vscp_readStdReg,f,c
  6386  001A6E  500C               	movf	??_vscp_readStdReg,w,c
  6387  001A70  0012               	return	
  6388  001A72                     __end_ofPL26:
  6389                           	opt stack 0
  6390  001A72                     PL38:
  6391                           	opt stack 25
  6392  001A72  90D8               	bcf	status,0,c
  6393  001A74  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6394  001A76  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6395  001A78  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6396  001A7A  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6397  001A7C  0012               	return	
  6398  001A7E                     __end_ofPL38:
  6399                           	opt stack 0
  6400                           tblptru	equ	0xFF8
  6401                           tblptrh	equ	0xFF7
  6402                           tblptrl	equ	0xFF6
  6403                           tablat	equ	0xFF5
  6404                           prodh	equ	0xFF4
  6405                           prodl	equ	0xFF3
  6406                           intcon	equ	0xFF2
  6407                           postinc0	equ	0xFEE
  6408                           wreg	equ	0xFE8
  6409                           indf1	equ	0xFE7
  6410                           fsr1h	equ	0xFE2
  6411                           fsr1l	equ	0xFE1
  6412                           indf2	equ	0xFDF
  6413                           postinc2	equ	0xFDE
  6414                           postdec2	equ	0xFDD
  6415                           plusw2	equ	0xFDB
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6421 ;; Defined at:
  6422 ;;		line 1396 in file "../main.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;		None
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;		None
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  1    wreg      unsigned char 
  6429 ;; Registers used:
  6430 ;;		wreg
  6431 ;; Tracked objects:
  6432 ;;		On entry : F/0
  6433 ;;		On exit  : F/0
  6434 ;;		Unchanged: F/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6440 ;;Total ram usage:        0 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    2
  6443 ;; This function calls:
  6444 ;;		Nothing
  6445 ;; This function is called by:
  6446 ;;		_vscp_readStdReg
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           	psect	text26
  6451  002E84                     __ptext26:
  6452                           	opt stack 0
  6453  002E84                     _vscp_getRegisterPagesUsed:
  6454                           	opt stack 26
  6455                           
  6456                           ; BSR set to: 0
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;main.c: 1397: return 1;
  6460                           
  6461                           ;incstack = 0
  6462                           ;incstack = 0
  6463  002E84  0C01               	retlw	1
  6464  002E86                     __end_of_vscp_getRegisterPagesUsed:
  6465                           	opt stack 0
  6466                           tblptru	equ	0xFF8
  6467                           tblptrh	equ	0xFF7
  6468                           tblptrl	equ	0xFF6
  6469                           tablat	equ	0xFF5
  6470                           prodh	equ	0xFF4
  6471                           prodl	equ	0xFF3
  6472                           intcon	equ	0xFF2
  6473                           postinc0	equ	0xFEE
  6474                           wreg	equ	0xFE8
  6475                           indf1	equ	0xFE7
  6476                           fsr1h	equ	0xFE2
  6477                           fsr1l	equ	0xFE1
  6478                           indf2	equ	0xFDF
  6479                           postinc2	equ	0xFDE
  6480                           postdec2	equ	0xFDD
  6481                           plusw2	equ	0xFDB
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function _vscp_getFamilyType *****************
  6487 ;; Defined at:
  6488 ;;		line 1377 in file "../main.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;		None
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  4    7[COMRAM] unsigned long 
  6495 ;; Registers used:
  6496 ;;		None
  6497 ;; Tracked objects:
  6498 ;;		On entry : F/0
  6499 ;;		On exit  : F/0
  6500 ;;		Unchanged: F/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6505 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6506 ;;Total ram usage:        4 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; Hardware stack levels required when called:    2
  6509 ;; This function calls:
  6510 ;;		Nothing
  6511 ;; This function is called by:
  6512 ;;		_vscp_readStdReg
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text27
  6517  002E3C                     __ptext27:
  6518                           	opt stack 0
  6519  002E3C                     _vscp_getFamilyType:
  6520                           	opt stack 26
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;main.c: 1378: return 0;
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;incstack = 0
  6527                           ;incstack = 0
  6528  002E3C  6A08               	clrf	?_vscp_getFamilyType,c
  6529  002E3E  6A09               	clrf	?_vscp_getFamilyType+1,c
  6530  002E40  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6531  002E42  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6532                           
  6533                           ; BSR set to: 0
  6534  002E44  0012               	return	
  6535  002E46                     __end_of_vscp_getFamilyType:
  6536                           	opt stack 0
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           intcon	equ	0xFF2
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           indf1	equ	0xFE7
  6547                           fsr1h	equ	0xFE2
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           plusw2	equ	0xFDB
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _vscp_getFamilyCode *****************
  6558 ;; Defined at:
  6559 ;;		line 1368 in file "../main.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;		None
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;		None
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  4    7[COMRAM] unsigned long 
  6566 ;; Registers used:
  6567 ;;		None
  6568 ;; Tracked objects:
  6569 ;;		On entry : F/0
  6570 ;;		On exit  : F/0
  6571 ;;		Unchanged: F/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6576 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6577 ;;Total ram usage:        4 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    2
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_vscp_readStdReg
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text28
  6588  002E46                     __ptext28:
  6589                           	opt stack 0
  6590  002E46                     _vscp_getFamilyCode:
  6591                           	opt stack 26
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;main.c: 1369: return 0L;
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;incstack = 0
  6598                           ;incstack = 0
  6599  002E46  6A08               	clrf	?_vscp_getFamilyCode,c
  6600  002E48  6A09               	clrf	?_vscp_getFamilyCode+1,c
  6601  002E4A  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  6602  002E4C  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  6603                           
  6604                           ; BSR set to: 0
  6605  002E4E  0012               	return	
  6606  002E50                     __end_of_vscp_getFamilyCode:
  6607                           	opt stack 0
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon	equ	0xFF2
  6615                           postinc0	equ	0xFEE
  6616                           wreg	equ	0xFE8
  6617                           indf1	equ	0xFE7
  6618                           fsr1h	equ	0xFE2
  6619                           fsr1l	equ	0xFE1
  6620                           indf2	equ	0xFDF
  6621                           postinc2	equ	0xFDE
  6622                           postdec2	equ	0xFDD
  6623                           plusw2	equ	0xFDB
  6624                           fsr2h	equ	0xFDA
  6625                           fsr2l	equ	0xFD9
  6626                           status	equ	0xFD8
  6627                           
  6628 ;; *************** function _vscp_getBufferSize *****************
  6629 ;; Defined at:
  6630 ;;		line 1248 in file "../main.c"
  6631 ;; Parameters:    Size  Location     Type
  6632 ;;		None
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;		None
  6635 ;; Return value:  Size  Location     Type
  6636 ;;                  1    wreg      unsigned char 
  6637 ;; Registers used:
  6638 ;;		wreg
  6639 ;; Tracked objects:
  6640 ;;		On entry : F/0
  6641 ;;		On exit  : F/0
  6642 ;;		Unchanged: F/0
  6643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6648 ;;Total ram usage:        0 bytes
  6649 ;; Hardware stack levels used:    1
  6650 ;; Hardware stack levels required when called:    2
  6651 ;; This function calls:
  6652 ;;		Nothing
  6653 ;; This function is called by:
  6654 ;;		_vscp_readStdReg
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           	psect	text29
  6659  002E86                     __ptext29:
  6660                           	opt stack 0
  6661  002E86                     _vscp_getBufferSize:
  6662                           	opt stack 26
  6663                           
  6664                           ; BSR set to: 0
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;main.c: 1249: return 8;
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;incstack = 0
  6671                           ;incstack = 0
  6672  002E86  0C08               	retlw	8
  6673  002E88                     __end_of_vscp_getBufferSize:
  6674                           	opt stack 0
  6675                           tblptru	equ	0xFF8
  6676                           tblptrh	equ	0xFF7
  6677                           tblptrl	equ	0xFF6
  6678                           tablat	equ	0xFF5
  6679                           prodh	equ	0xFF4
  6680                           prodl	equ	0xFF3
  6681                           intcon	equ	0xFF2
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           indf1	equ	0xFE7
  6685                           fsr1h	equ	0xFE2
  6686                           fsr1l	equ	0xFE1
  6687                           indf2	equ	0xFDF
  6688                           postinc2	equ	0xFDE
  6689                           postdec2	equ	0xFDD
  6690                           plusw2	equ	0xFDB
  6691                           fsr2h	equ	0xFDA
  6692                           fsr2l	equ	0xFD9
  6693                           status	equ	0xFD8
  6694                           
  6695 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  6696 ;; Defined at:
  6697 ;;		line 1239 in file "../main.c"
  6698 ;; Parameters:    Size  Location     Type
  6699 ;;		None
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;		None
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      unsigned char 
  6704 ;; Registers used:
  6705 ;;		wreg
  6706 ;; Tracked objects:
  6707 ;;		On entry : F/0
  6708 ;;		On exit  : F/0
  6709 ;;		Unchanged: F/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6715 ;;Total ram usage:        0 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    2
  6718 ;; This function calls:
  6719 ;;		Nothing
  6720 ;; This function is called by:
  6721 ;;		_vscp_readStdReg
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text30
  6726  002E88                     __ptext30:
  6727                           	opt stack 0
  6728  002E88                     _vscp_getBootLoaderAlgorithm:
  6729                           	opt stack 26
  6730                           
  6731                           ; BSR set to: 0
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;main.c: 1240: return 0x01;
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;incstack = 0
  6738                           ;incstack = 0
  6739  002E88  0C01               	retlw	1
  6740  002E8A                     __end_of_vscp_getBootLoaderAlgorithm:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           postinc0	equ	0xFEE
  6750                           wreg	equ	0xFE8
  6751                           indf1	equ	0xFE7
  6752                           fsr1h	equ	0xFE2
  6753                           fsr1l	equ	0xFE1
  6754                           indf2	equ	0xFDF
  6755                           postinc2	equ	0xFDE
  6756                           postdec2	equ	0xFDD
  6757                           plusw2	equ	0xFDB
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function _vscp_getManufacturerId *****************
  6763 ;; Defined at:
  6764 ;;		line 1230 in file "../main.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  idx             1    wreg     unsigned char 
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;  idx             1   10[COMRAM] unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  1    wreg      unsigned char 
  6771 ;; Registers used:
  6772 ;;		wreg, status,2, status,0, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6782 ;;Total ram usage:        1 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    3
  6785 ;; This function calls:
  6786 ;;		_readEEPROM
  6787 ;; This function is called by:
  6788 ;;		_vscp_readStdReg
  6789 ;;		_vscp_writeStdReg
  6790 ;; This function uses a non-reentrant model
  6791 ;;
  6792                           
  6793                           	psect	text31
  6794  002D6E                     __ptext31:
  6795                           	opt stack 0
  6796  002D6E                     _vscp_getManufacturerId:
  6797                           	opt stack 25
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;incstack = 0
  6801                           ;incstack = 0
  6802                           ;vscp_getManufacturerId@idx stored from wreg
  6803  002D6E  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
  6804                           
  6805                           ;main.c: 1231: return readEEPROM( 0x09 + idx );
  6806  002D72  0E09               	movlw	9
  6807  002D74  240B               	addwf	vscp_getManufacturerId@idx,w,c
  6808  002D76  6E08               	movwf	?_readEEPROM,c
  6809  002D78  6A09               	clrf	?_readEEPROM+1,c
  6810  002D7A  0E00               	movlw	0
  6811  002D7C  2209               	addwfc	?_readEEPROM+1,f,c
  6812  002D7E  EFD5  F016         	goto	_readEEPROM	;wreg free
  6813  002D82                     __end_of_vscp_getManufacturerId:
  6814                           	opt stack 0
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           postinc0	equ	0xFEE
  6823                           wreg	equ	0xFE8
  6824                           indf1	equ	0xFE7
  6825                           fsr1h	equ	0xFE2
  6826                           fsr1l	equ	0xFE1
  6827                           indf2	equ	0xFDF
  6828                           postinc2	equ	0xFDE
  6829                           postdec2	equ	0xFDD
  6830                           plusw2	equ	0xFDB
  6831                           fsr2h	equ	0xFDA
  6832                           fsr2l	equ	0xFD9
  6833                           status	equ	0xFD8
  6834                           
  6835 ;; *************** function _vscp_getUserID *****************
  6836 ;; Defined at:
  6837 ;;		line 1210 in file "../main.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;  idx             1    wreg     unsigned char 
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;  idx             1   10[COMRAM] unsigned char 
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      unsigned char 
  6844 ;; Registers used:
  6845 ;;		wreg, status,2, status,0, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6855 ;;Total ram usage:        1 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    3
  6858 ;; This function calls:
  6859 ;;		_readEEPROM
  6860 ;; This function is called by:
  6861 ;;		_vscp_readStdReg
  6862 ;;		_vscp_writeStdReg
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text32
  6867  002D82                     __ptext32:
  6868                           	opt stack 0
  6869  002D82                     _vscp_getUserID:
  6870                           	opt stack 25
  6871                           
  6872                           ;incstack = 0
  6873                           ;incstack = 0
  6874                           ;vscp_getUserID@idx stored from wreg
  6875  002D82  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
  6876                           
  6877                           ;main.c: 1211: return readEEPROM( 0x04 + idx );
  6878  002D86  0E04               	movlw	4
  6879  002D88  240B               	addwf	vscp_getUserID@idx,w,c
  6880  002D8A  6E08               	movwf	?_readEEPROM,c
  6881  002D8C  6A09               	clrf	?_readEEPROM+1,c
  6882  002D8E  0E00               	movlw	0
  6883  002D90  2209               	addwfc	?_readEEPROM+1,f,c
  6884  002D92  EFD5  F016         	goto	_readEEPROM	;wreg free
  6885  002D96                     __end_of_vscp_getUserID:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           intcon	equ	0xFF2
  6894                           postinc0	equ	0xFEE
  6895                           wreg	equ	0xFE8
  6896                           indf1	equ	0xFE7
  6897                           fsr1h	equ	0xFE2
  6898                           fsr1l	equ	0xFE1
  6899                           indf2	equ	0xFDF
  6900                           postinc2	equ	0xFDE
  6901                           postdec2	equ	0xFDD
  6902                           plusw2	equ	0xFDB
  6903                           fsr2h	equ	0xFDA
  6904                           fsr2l	equ	0xFD9
  6905                           status	equ	0xFD8
  6906                           
  6907 ;; *************** function _vscp_getMDF_URL *****************
  6908 ;; Defined at:
  6909 ;;		line 1201 in file "../main.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;  idx             1    wreg     unsigned char 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  idx             1    8[COMRAM] unsigned char 
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  1    wreg      unsigned char 
  6916 ;; Registers used:
  6917 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6918 ;; Tracked objects:
  6919 ;;		On entry : F/0
  6920 ;;		On exit  : F/0
  6921 ;;		Unchanged: F/0
  6922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6927 ;;Total ram usage:        2 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    2
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_vscp_readStdReg
  6934 ;;		_vscp_handleProtocolEvent
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text33
  6939  002CF2                     __ptext33:
  6940                           	opt stack 0
  6941  002CF2                     _vscp_getMDF_URL:
  6942                           	opt stack 26
  6943                           
  6944                           ;incstack = 0
  6945                           ;incstack = 0
  6946                           ;vscp_getMDF_URL@idx stored from wreg
  6947  002CF2  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;main.c: 1202: return vscp_deviceURL[ idx ];
  6951  002CF6  5009               	movf	vscp_getMDF_URL@idx,w,c
  6952  002CF8  0F00               	addlw	low _vscp_deviceURL
  6953  002CFA  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  6954  002CFC  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  6955  002D00  0E0F               	movlw	high __smallconst
  6956  002D02  6EF7               	movwf	tblptrh,c
  6957  002D04  0E00               	movlw	low (__smallconst shr (0+16))
  6958  002D06  6EF8               	movwf	tblptru,c
  6959  002D08  0008               	tblrd		*
  6960  002D0A  50F5               	movf	tablat,w,c
  6961                           
  6962                           ; BSR set to: 0
  6963  002D0C  0012               	return	
  6964  002D0E                     __end_of_vscp_getMDF_URL:
  6965                           	opt stack 0
  6966                           tblptru	equ	0xFF8
  6967                           tblptrh	equ	0xFF7
  6968                           tblptrl	equ	0xFF6
  6969                           tablat	equ	0xFF5
  6970                           prodh	equ	0xFF4
  6971                           prodl	equ	0xFF3
  6972                           intcon	equ	0xFF2
  6973                           postinc0	equ	0xFEE
  6974                           wreg	equ	0xFE8
  6975                           indf1	equ	0xFE7
  6976                           fsr1h	equ	0xFE2
  6977                           fsr1l	equ	0xFE1
  6978                           indf2	equ	0xFDF
  6979                           postinc2	equ	0xFDE
  6980                           postdec2	equ	0xFDD
  6981                           plusw2	equ	0xFDB
  6982                           fsr2h	equ	0xFDA
  6983                           fsr2l	equ	0xFD9
  6984                           status	equ	0xFD8
  6985                           
  6986 ;; *************** function _vscp_getGUID *****************
  6987 ;; Defined at:
  6988 ;;		line 1189 in file "../main.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  idx             1    wreg     unsigned char 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;  idx             1   10[COMRAM] unsigned char 
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      unsigned char 
  6995 ;; Registers used:
  6996 ;;		wreg, status,2, status,0, cstack
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7005 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7006 ;;Total ram usage:        1 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    3
  7009 ;; This function calls:
  7010 ;;		_readEEPROM
  7011 ;; This function is called by:
  7012 ;;		_vscp_readStdReg
  7013 ;;		_vscp_writeStdReg
  7014 ;;		_vscp_handleProtocolEvent
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           	psect	text34
  7019  002D96                     __ptext34:
  7020                           	opt stack 0
  7021  002D96                     _vscp_getGUID:
  7022                           	opt stack 25
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;incstack = 0
  7026                           ;incstack = 0
  7027                           ;vscp_getGUID@idx stored from wreg
  7028  002D96  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
  7029                           
  7030                           ;main.c: 1190: return readEEPROM( 0x11 + idx );
  7031  002D9A  0E11               	movlw	17
  7032  002D9C  240B               	addwf	vscp_getGUID@idx,w,c
  7033  002D9E  6E08               	movwf	?_readEEPROM,c
  7034  002DA0  6A09               	clrf	?_readEEPROM+1,c
  7035  002DA2  0E00               	movlw	0
  7036  002DA4  2209               	addwfc	?_readEEPROM+1,f,c
  7037  002DA6  EFD5  F016         	goto	_readEEPROM	;wreg free
  7038  002DAA                     __end_of_vscp_getGUID:
  7039                           	opt stack 0
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           prodh	equ	0xFF4
  7045                           prodl	equ	0xFF3
  7046                           intcon	equ	0xFF2
  7047                           postinc0	equ	0xFEE
  7048                           wreg	equ	0xFE8
  7049                           indf1	equ	0xFE7
  7050                           fsr1h	equ	0xFE2
  7051                           fsr1l	equ	0xFE1
  7052                           indf2	equ	0xFDF
  7053                           postinc2	equ	0xFDE
  7054                           postdec2	equ	0xFDD
  7055                           plusw2	equ	0xFDB
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _readEEPROM *****************
  7061 ;; Defined at:
  7062 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  address         2    7[COMRAM] unsigned short 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  data            1    9[COMRAM] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  1    wreg      unsigned char 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7076 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7079 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7080 ;;Total ram usage:        3 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    2
  7083 ;; This function calls:
  7084 ;;		Nothing
  7085 ;; This function is called by:
  7086 ;;		_main
  7087 ;;		_vscp_readNicknamePermanent
  7088 ;;		_vscp_getZone
  7089 ;;		_vscp_getSubzone
  7090 ;;		_vscp_readAppReg
  7091 ;;		_vscp_writeAppReg
  7092 ;;		_doDM
  7093 ;;		_actionSet
  7094 ;;		_actionClr
  7095 ;;		_vscp_getGUID
  7096 ;;		_vscp_getUserID
  7097 ;;		_vscp_getManufacturerId
  7098 ;;		_vscp_getSegmentCRC
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           	psect	text35
  7103  002DAA                     __ptext35:
  7104                           	opt stack 0
  7105  002DAA                     _readEEPROM:
  7106                           	opt stack 26
  7107                           
  7108                           ;eeprom.c: 93: uint8_t data;
  7109                           ;eeprom.c: 98: EEADR = address & 0xff;
  7110                           
  7111                           ;incstack = 0
  7112                           ;incstack = 0
  7113  002DAA  C008  FF74         	movff	readEEPROM@address,3956	;volatile
  7114                           
  7115                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
  7116  002DAE  9E7F               	bcf	3967,7,c	;volatile
  7117                           
  7118                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
  7119  002DB0  9C7F               	bcf	3967,6,c	;volatile
  7120                           
  7121                           ;eeprom.c: 101: EECON1bits.RD = 1;
  7122  002DB2  807F               	bsf	3967,0,c	;volatile
  7123                           
  7124                           ;eeprom.c: 102: data = EEDATA;
  7125  002DB4  CF73 F00A          	movff	3955,readEEPROM@data	;volatile
  7126                           
  7127                           ;eeprom.c: 104: return data;
  7128  002DB8  500A               	movf	readEEPROM@data,w,c
  7129  002DBA  0012               	return	
  7130  002DBC                     __end_of_readEEPROM:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           prodh	equ	0xFF4
  7137                           prodl	equ	0xFF3
  7138                           intcon	equ	0xFF2
  7139                           postinc0	equ	0xFEE
  7140                           wreg	equ	0xFE8
  7141                           indf1	equ	0xFE7
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           plusw2	equ	0xFDB
  7148                           fsr2h	equ	0xFDA
  7149                           fsr2l	equ	0xFD9
  7150                           status	equ	0xFD8
  7151                           
  7152 ;; *************** function _vscp_getSubMinorVersion *****************
  7153 ;; Defined at:
  7154 ;;		line 1178 in file "../main.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;		None
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;		None
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  1    wreg      unsigned char 
  7161 ;; Registers used:
  7162 ;;		wreg
  7163 ;; Tracked objects:
  7164 ;;		On entry : F/0
  7165 ;;		On exit  : F/0
  7166 ;;		Unchanged: F/0
  7167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7172 ;;Total ram usage:        0 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    2
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_vscp_readStdReg
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text36
  7183  002E8A                     __ptext36:
  7184                           	opt stack 0
  7185  002E8A                     _vscp_getSubMinorVersion:
  7186                           	opt stack 26
  7187                           
  7188                           ; BSR set to: 0
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;main.c: 1179: return 0;
  7192                           
  7193                           ;incstack = 0
  7194                           ;incstack = 0
  7195  002E8A  0C00               	retlw	0
  7196  002E8C                     __end_of_vscp_getSubMinorVersion:
  7197                           	opt stack 0
  7198                           tblptru	equ	0xFF8
  7199                           tblptrh	equ	0xFF7
  7200                           tblptrl	equ	0xFF6
  7201                           tablat	equ	0xFF5
  7202                           prodh	equ	0xFF4
  7203                           prodl	equ	0xFF3
  7204                           intcon	equ	0xFF2
  7205                           postinc0	equ	0xFEE
  7206                           wreg	equ	0xFE8
  7207                           indf1	equ	0xFE7
  7208                           fsr1h	equ	0xFE2
  7209                           fsr1l	equ	0xFE1
  7210                           indf2	equ	0xFDF
  7211                           postinc2	equ	0xFDE
  7212                           postdec2	equ	0xFDD
  7213                           plusw2	equ	0xFDB
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function _vscp_getMinorVersion *****************
  7219 ;; Defined at:
  7220 ;;		line 1169 in file "../main.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;		None
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;		None
  7225 ;; Return value:  Size  Location     Type
  7226 ;;                  1    wreg      unsigned char 
  7227 ;; Registers used:
  7228 ;;		wreg
  7229 ;; Tracked objects:
  7230 ;;		On entry : F/0
  7231 ;;		On exit  : F/0
  7232 ;;		Unchanged: F/0
  7233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7238 ;;Total ram usage:        0 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    2
  7241 ;; This function calls:
  7242 ;;		Nothing
  7243 ;; This function is called by:
  7244 ;;		_vscp_readStdReg
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           	psect	text37
  7249  002E8C                     __ptext37:
  7250                           	opt stack 0
  7251  002E8C                     _vscp_getMinorVersion:
  7252                           	opt stack 26
  7253                           
  7254                           ; BSR set to: 0
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;main.c: 1170: return 0;
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;incstack = 0
  7261                           ;incstack = 0
  7262  002E8C  0C00               	retlw	0
  7263  002E8E                     __end_of_vscp_getMinorVersion:
  7264                           	opt stack 0
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           prodh	equ	0xFF4
  7270                           prodl	equ	0xFF3
  7271                           intcon	equ	0xFF2
  7272                           postinc0	equ	0xFEE
  7273                           wreg	equ	0xFE8
  7274                           indf1	equ	0xFE7
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _vscp_getMajorVersion *****************
  7286 ;; Defined at:
  7287 ;;		line 1160 in file "../main.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;		None
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      unsigned char 
  7294 ;; Registers used:
  7295 ;;		wreg
  7296 ;; Tracked objects:
  7297 ;;		On entry : F/0
  7298 ;;		On exit  : F/0
  7299 ;;		Unchanged: F/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;Total ram usage:        0 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:    2
  7308 ;; This function calls:
  7309 ;;		Nothing
  7310 ;; This function is called by:
  7311 ;;		_vscp_readStdReg
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text38
  7316  002E8E                     __ptext38:
  7317                           	opt stack 0
  7318  002E8E                     _vscp_getMajorVersion:
  7319                           	opt stack 26
  7320                           
  7321                           ; BSR set to: 0
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;main.c: 1161: return 1;
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;incstack = 0
  7328                           ;incstack = 0
  7329  002E8E  0C01               	retlw	1
  7330  002E90                     __end_of_vscp_getMajorVersion:
  7331                           	opt stack 0
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           intcon	equ	0xFF2
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           indf1	equ	0xFE7
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           plusw2	equ	0xFDB
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _vscp_newNodeOnline *****************
  7353 ;; Defined at:
  7354 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;		None               void
  7361 ;; Registers used:
  7362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : F/0
  7365 ;;		On exit  : F/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7371 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7372 ;;Total ram usage:        1 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:    7
  7375 ;; This function calls:
  7376 ;;		_vscp_sendEvent
  7377 ;; This function is called by:
  7378 ;;		_vscp_handleProtocolEvent
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text39
  7383  002AEC                     __ptext39:
  7384                           	opt stack 0
  7385  002AEC                     _vscp_newNodeOnline:
  7386                           	opt stack 22
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
  7390                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;incstack = 0
  7394                           ;incstack = 0
  7395  002AEC  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7396  002AF0  0E0F               	movlw	15
  7397  002AF2  164C               	andwf	??_vscp_newNodeOnline,f,c
  7398  002AF4  044C               	decf	??_vscp_newNodeOnline,w,c
  7399  002AF6  A4D8               	btfss	status,2,c
  7400  002AF8  0012               	return	
  7401                           
  7402                           ; BSR set to: 0
  7403  002AFA  5170               	movf	_vscp_nickname& (0+255),w,b
  7404  002AFC  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7405  002B00  62DF               	cpfseq	indf2,c
  7406  002B02  0012               	return	
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
  7410  002B04  0E80               	movlw	128
  7411  002B06  6F83               	movwf	_vscp_omsg& (0+255),b
  7412                           
  7413                           ; BSR set to: 0
  7414                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
  7415  002B08  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
  7419  002B0A  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7420  002B0C  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7421                           
  7422                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
  7423  002B0E  0E03               	movlw	3
  7424  002B10  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;vscp_firmware.c: 506: vscp_sendEvent();
  7428  002B12  EFB2  F015         	goto	_vscp_sendEvent	;wreg free
  7429  002B16                     __end_of_vscp_newNodeOnline:
  7430                           	opt stack 0
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           postinc0	equ	0xFEE
  7439                           wreg	equ	0xFE8
  7440                           indf1	equ	0xFE7
  7441                           fsr1h	equ	0xFE2
  7442                           fsr1l	equ	0xFE1
  7443                           indf2	equ	0xFDF
  7444                           postinc2	equ	0xFDE
  7445                           postdec2	equ	0xFDD
  7446                           plusw2	equ	0xFDB
  7447                           fsr2h	equ	0xFDA
  7448                           fsr2l	equ	0xFD9
  7449                           status	equ	0xFD8
  7450                           
  7451 ;; *************** function _vscp_handleDropNickname *****************
  7452 ;; Defined at:
  7453 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
  7454 ;; Parameters:    Size  Location     Type
  7455 ;;		None
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  bytes           1   11[COMRAM] unsigned char 
  7458 ;; Return value:  Size  Location     Type
  7459 ;;		None               void
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : F/0
  7464 ;;		On exit  : F/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7468 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7470 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7471 ;;Total ram usage:        1 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    5
  7474 ;; This function calls:
  7475 ;;		_vscp_init
  7476 ;;		_vscp_writeNicknamePermanent
  7477 ;; This function is called by:
  7478 ;;		_vscp_handleProtocolEvent
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text40
  7483  002A90                     __ptext40:
  7484                           	opt stack 0
  7485  002A90                     _vscp_handleDropNickname:
  7486                           	opt stack 24
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;incstack = 0
  7493                           ;incstack = 0
  7494  002A90  5175               	movf	_vscp_imsg& (0+255),w,b
  7495  002A92  0B0F               	andlw	15
  7496  002A94  6E0C               	movwf	vscp_handleDropNickname@bytes,c
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7500  002A96  500C               	movf	vscp_handleDropNickname@bytes,w,c
  7501  002A98  B4D8               	btfsc	status,2,c
  7502  002A9A  0012               	return	
  7503                           
  7504                           ; BSR set to: 0
  7505  002A9C  5170               	movf	_vscp_nickname& (0+255),w,b
  7506  002A9E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7507  002AA2  62DF               	cpfseq	indf2,c
  7508  002AA4  0012               	return	
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7512  002AA6  040C               	decf	vscp_handleDropNickname@bytes,w,c
  7513  002AA8  E005               	bz	l883
  7514                           
  7515                           ; BSR set to: 0
  7516  002AAA  0E01               	movlw	1
  7517  002AAC  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
  7518  002AAE  0C01               	retlw	1
  7519                           
  7520                           ; BSR set to: 0
  7521  002AB0  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7522  002AB2  0C01               	retlw	1
  7523  002AB4                     l883:
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
  7527  002AB4  6970               	setf	_vscp_nickname& (0+255),b
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
  7531  002AB6  0EFF               	movlw	255
  7532  002AB8  ECF0  F016         	call	_vscp_writeNicknamePermanent
  7533                           
  7534                           ;vscp_firmware.c: 473: vscp_init();
  7535  002ABC  EFCB  F014         	goto	_vscp_init	;wreg free
  7536  002AC0                     __end_of_vscp_handleDropNickname:
  7537                           	opt stack 0
  7538                           tblptru	equ	0xFF8
  7539                           tblptrh	equ	0xFF7
  7540                           tblptrl	equ	0xFF6
  7541                           tablat	equ	0xFF5
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           postinc0	equ	0xFEE
  7546                           wreg	equ	0xFE8
  7547                           indf1	equ	0xFE7
  7548                           fsr1h	equ	0xFE2
  7549                           fsr1l	equ	0xFE1
  7550                           indf2	equ	0xFDF
  7551                           postinc2	equ	0xFDE
  7552                           postdec2	equ	0xFDD
  7553                           plusw2	equ	0xFDB
  7554                           fsr2h	equ	0xFDA
  7555                           fsr2l	equ	0xFD9
  7556                           status	equ	0xFD8
  7557                           
  7558 ;; *************** function _vscp_init *****************
  7559 ;; Defined at:
  7560 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
  7561 ;; Parameters:    Size  Location     Type
  7562 ;;		None
  7563 ;; Auto vars:     Size  Location     Type
  7564 ;;		None
  7565 ;; Return value:  Size  Location     Type
  7566 ;;		None               void
  7567 ;; Registers used:
  7568 ;;		wreg, status,2, cstack
  7569 ;; Tracked objects:
  7570 ;;		On entry : 0/E
  7571 ;;		On exit  : F/0
  7572 ;;		Unchanged: 0/0
  7573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7578 ;;Total ram usage:        0 bytes
  7579 ;; Hardware stack levels used:    1
  7580 ;; Hardware stack levels required when called:    4
  7581 ;; This function calls:
  7582 ;;		_vscp_readNicknamePermanent
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;;		_vscp_handleDropNickname
  7586 ;;		_vscp_handleProtocolEvent
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text41
  7591  002996                     __ptext41:
  7592                           	opt stack 0
  7593  002996                     _vscp_init:
  7594                           	opt stack 24
  7595                           
  7596                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;incstack = 0
  7600                           ;incstack = 0
  7601  002996  0E02               	movlw	2
  7602  002998  6E52               	movwf	_vscp_initledfunc,c
  7603                           
  7604                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
  7605  00299A  EC28  F017         	call	_vscp_readNicknamePermanent	;wreg free
  7606  00299E  0100               	movlb	0	; () banked
  7607  0029A0  6F70               	movwf	_vscp_nickname& (0+255),b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
  7611  0029A2  6770               	tstfsz	_vscp_nickname& (0+255),b
  7612  0029A4  D001               	goto	l825
  7613                           
  7614                           ; BSR set to: 0
  7615  0029A6  6970               	setf	_vscp_nickname& (0+255),b
  7616  0029A8                     l825:
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
  7620  0029A8  6B75               	clrf	_vscp_imsg& (0+255),b
  7621                           
  7622                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
  7623  0029AA  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  7624                           
  7625                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
  7626  0029AC  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  7627  0029AE  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  7628                           
  7629                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
  7630  0029B0  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  7631                           
  7632                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
  7633  0029B2  6B83               	clrf	_vscp_omsg& (0+255),b
  7634                           
  7635                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
  7636  0029B4  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7637                           
  7638                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
  7639  0029B6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7640  0029B8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7641                           
  7642                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
  7643  0029BA  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  7644                           
  7645                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
  7646  0029BC  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  7647                           
  7648                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
  7649  0029BE  6A53               	clrf	_vscp_probe_address,c
  7650                           
  7651                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
  7652  0029C0  6B71               	clrf	_vscp_node_state& (0+255),b
  7653                           
  7654                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
  7655  0029C2  6B72               	clrf	_vscp_node_substate& (0+255),b
  7656                           
  7657                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
  7658  0029C4  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7659                           
  7660                           ;vscp_firmware.c: 148: vscp_page_select = 0;
  7661  0029C6  6A4E               	clrf	_vscp_page_select,c
  7662  0029C8  6A4F               	clrf	_vscp_page_select+1,c
  7663                           
  7664                           ;vscp_firmware.c: 151: vscp_timer = 0;
  7665  0029CA  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7666  0029CC  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7667                           
  7668                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
  7669  0029CE  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7670  0029D0  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7671                           
  7672                           ;vscp_firmware.c: 153: vscp_second = 0;
  7673  0029D2  6B74               	clrf	_vscp_second& (0+255),b
  7674                           
  7675                           ;vscp_firmware.c: 154: vscp_minute = 0;
  7676  0029D4  6B6F               	clrf	_vscp_minute& (0+255),b
  7677                           
  7678                           ;vscp_firmware.c: 155: vscp_hour = 0;
  7679  0029D6  6B6D               	clrf	_vscp_hour& (0+255),b
  7680                           
  7681                           ; BSR set to: 0
  7682  0029D8  0012               	return	
  7683  0029DA                     __end_of_vscp_init:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           intcon	equ	0xFF2
  7692                           postinc0	equ	0xFEE
  7693                           wreg	equ	0xFE8
  7694                           indf1	equ	0xFE7
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           plusw2	equ	0xFDB
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function _vscp_readNicknamePermanent *****************
  7706 ;; Defined at:
  7707 ;;		line 536 in file "../main.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;		None
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;		None
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      unsigned char 
  7714 ;; Registers used:
  7715 ;;		wreg, status,2, cstack
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/E
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7725 ;;Total ram usage:        0 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    3
  7728 ;; This function calls:
  7729 ;;		_readEEPROM
  7730 ;; This function is called by:
  7731 ;;		_vscp_init
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text42
  7736  002E50                     __ptext42:
  7737                           	opt stack 0
  7738  002E50                     _vscp_readNicknamePermanent:
  7739                           	opt stack 24
  7740                           
  7741                           ;main.c: 537: return readEEPROM( 0x01 );
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;incstack = 0
  7745                           ;incstack = 0
  7746  002E50  6A09               	clrf	?_readEEPROM+1,c
  7747  002E52  0E01               	movlw	1
  7748  002E54  6E08               	movwf	?_readEEPROM,c
  7749  002E56  EFD5  F016         	goto	_readEEPROM	;wreg free
  7750  002E5A                     __end_of_vscp_readNicknamePermanent:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodh	equ	0xFF4
  7757                           prodl	equ	0xFF3
  7758                           intcon	equ	0xFF2
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           fsr1h	equ	0xFE2
  7763                           fsr1l	equ	0xFE1
  7764                           indf2	equ	0xFDF
  7765                           postinc2	equ	0xFDE
  7766                           postdec2	equ	0xFDD
  7767                           plusw2	equ	0xFDB
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _vscp_handleSetNickname *****************
  7773 ;; Defined at:
  7774 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;		None
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;		None
  7779 ;; Return value:  Size  Location     Type
  7780 ;;		None               void
  7781 ;; Registers used:
  7782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : F/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7792 ;;Total ram usage:        0 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    4
  7795 ;; This function calls:
  7796 ;;		_vscp_writeNicknamePermanent
  7797 ;;		_vscp_setSegmentCRC
  7798 ;; This function is called by:
  7799 ;;		_vscp_handleProtocolEvent
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           	psect	text43
  7804  002BD6                     __ptext43:
  7805                           	opt stack 0
  7806  002BD6                     _vscp_handleSetNickname:
  7807                           	opt stack 25
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7811                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7812                           
  7813                           ;incstack = 0
  7814                           ;incstack = 0
  7815  002BD6  5175               	movf	_vscp_imsg& (0+255),w,b
  7816  002BD8  0B0F               	andlw	15
  7817  002BDA  0A02               	xorlw	2
  7818  002BDC  A4D8               	btfss	status,2,c
  7819  002BDE  0012               	return	
  7820                           
  7821                           ; BSR set to: 0
  7822  002BE0  5170               	movf	_vscp_nickname& (0+255),w,b
  7823  002BE2  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7824  002BE6  62DF               	cpfseq	indf2,c
  7825  002BE8  0012               	return	
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
  7829  002BEA  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
  7833  002BEE  5170               	movf	_vscp_nickname& (0+255),w,b
  7834  002BF0  ECF0  F016         	call	_vscp_writeNicknamePermanent
  7835                           
  7836                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
  7837  002BF4  0E40               	movlw	64
  7838  002BF6  EFE7  F016         	goto	_vscp_setSegmentCRC
  7839  002BFA                     __end_of_vscp_handleSetNickname:
  7840                           	opt stack 0
  7841                           tblptru	equ	0xFF8
  7842                           tblptrh	equ	0xFF7
  7843                           tblptrl	equ	0xFF6
  7844                           tablat	equ	0xFF5
  7845                           prodh	equ	0xFF4
  7846                           prodl	equ	0xFF3
  7847                           intcon	equ	0xFF2
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           indf1	equ	0xFE7
  7851                           fsr1h	equ	0xFE2
  7852                           fsr1l	equ	0xFE1
  7853                           indf2	equ	0xFDF
  7854                           postinc2	equ	0xFDE
  7855                           postdec2	equ	0xFDD
  7856                           plusw2	equ	0xFDB
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function _vscp_handleHeartbeat *****************
  7862 ;; Defined at:
  7863 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;		None
  7868 ;; Return value:  Size  Location     Type
  7869 ;;		None               void
  7870 ;; Registers used:
  7871 ;;		wreg, status,2, status,0, cstack
  7872 ;; Tracked objects:
  7873 ;;		On entry : F/0
  7874 ;;		On exit  : 0/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7881 ;;Total ram usage:        0 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; Hardware stack levels required when called:    4
  7884 ;; This function calls:
  7885 ;;		_vscp_writeNicknamePermanent
  7886 ;;		_vscp_getSegmentCRC
  7887 ;;		_vscp_setSegmentCRC
  7888 ;; This function is called by:
  7889 ;;		_vscp_handleProtocolEvent
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text44
  7894  0029DA                     __ptext44:
  7895                           	opt stack 0
  7896  0029DA                     _vscp_handleHeartbeat:
  7897                           	opt stack 25
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
  7901                           
  7902                           ;incstack = 0
  7903                           ;incstack = 0
  7904  0029DA  EC2D  F017         	call	_vscp_getSegmentCRC	;wreg free
  7905  0029DE  0900               	iorlw	0
  7906  0029E0  E118               	bnz	l5157
  7907                           
  7908                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  7909                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  7910  0029E2  0100               	movlb	0	; () banked
  7911  0029E4  5175               	movf	_vscp_imsg& (0+255),w,b
  7912  0029E6  0B0F               	andlw	15
  7913  0029E8  0A05               	xorlw	5
  7914  0029EA  A4D8               	btfss	status,2,c
  7915  0029EC  0012               	return	
  7916                           
  7917                           ; BSR set to: 0
  7918  0029EE  EC2D  F017         	call	_vscp_getSegmentCRC	;wreg free
  7919  0029F2  0100               	movlb	0	; () banked
  7920  0029F4  197B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  7921  0029F6  B4D8               	btfsc	status,2,c
  7922  0029F8  0012               	return	
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7926  0029FA  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7927  0029FC  ECE7  F016         	call	_vscp_setSegmentCRC
  7928                           
  7929                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
  7930  002A00  0100               	movlb	0	; () banked
  7931  002A02  6970               	setf	_vscp_nickname& (0+255),b
  7932                           
  7933                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
  7934  002A04  0EFF               	movlw	255
  7935  002A06  ECF0  F016         	call	_vscp_writeNicknamePermanent
  7936                           
  7937                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
  7938  002A0A  0E01               	movlw	1
  7939  002A0C  0100               	movlb	0	; () banked
  7940  002A0E  6F71               	movwf	_vscp_node_state& (0+255),b
  7941  002A10  0C01               	retlw	1
  7942  002A12                     l5157:
  7943                           
  7944                           ;vscp_firmware.c: 403: else {
  7945                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7946  002A12  0100               	movlb	0	; () banked
  7947  002A14  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7948  002A16  EFE7  F016         	goto	_vscp_setSegmentCRC
  7949  002A1A                     __end_of_vscp_handleHeartbeat:
  7950                           	opt stack 0
  7951                           tblptru	equ	0xFF8
  7952                           tblptrh	equ	0xFF7
  7953                           tblptrl	equ	0xFF6
  7954                           tablat	equ	0xFF5
  7955                           prodh	equ	0xFF4
  7956                           prodl	equ	0xFF3
  7957                           intcon	equ	0xFF2
  7958                           postinc0	equ	0xFEE
  7959                           wreg	equ	0xFE8
  7960                           indf1	equ	0xFE7
  7961                           fsr1h	equ	0xFE2
  7962                           fsr1l	equ	0xFE1
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           plusw2	equ	0xFDB
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           
  7971 ;; *************** function _vscp_getMatrixInfo *****************
  7972 ;; Defined at:
  7973 ;;		line 1351 in file "../main.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  pData           1    wreg     PTR unsigned char 
  7976 ;;		 -> vscp_omsg(13), 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  pData           1    0[COMRAM] PTR unsigned char 
  7979 ;;		 -> vscp_omsg(13), 
  7980 ;;  i               1    7[COMRAM] unsigned char 
  7981 ;; Return value:  Size  Location     Type
  7982 ;;		None               void
  7983 ;; Registers used:
  7984 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7985 ;; Tracked objects:
  7986 ;;		On entry : F/0
  7987 ;;		On exit  : F/0
  7988 ;;		Unchanged: 0/0
  7989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7991 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7993 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7994 ;;Total ram usage:        1 bytes
  7995 ;; Hardware stack levels used:    1
  7996 ;; Hardware stack levels required when called:    2
  7997 ;; This function calls:
  7998 ;;		Nothing
  7999 ;; This function is called by:
  8000 ;;		_vscp_handleProtocolEvent
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text45
  8005  002C3A                     __ptext45:
  8006                           	opt stack 0
  8007  002C3A                     _vscp_getMatrixInfo:
  8008                           	opt stack 27
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;main.c: 1352: uint8_t i;
  8012                           ;main.c: 1354: vscp_omsg.data[ 0 ] = 7;
  8013                           
  8014                           ;incstack = 0
  8015                           ;incstack = 0
  8016  002C3A  0E07               	movlw	7
  8017  002C3C  6F88               	movwf	(_vscp_omsg+5)& (0+255),b
  8018                           
  8019                           ;main.c: 1355: vscp_omsg.data[ 1 ] = 72;
  8020  002C3E  0E48               	movlw	72
  8021  002C40  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  8022                           
  8023                           ;main.c: 1358: for ( i = 2; i < 8; i++ ) {
  8024  002C42  0E02               	movlw	2
  8025  002C44  6E08               	movwf	vscp_getMatrixInfo@i,c
  8026  002C46                     l4769:
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;main.c: 1359: vscp_omsg.data[ i ] = 0;
  8030  002C46  5008               	movf	vscp_getMatrixInfo@i,w,c
  8031  002C48  0F88               	addlw	low (_vscp_omsg+5)
  8032  002C4A  6ED9               	movwf	fsr2l,c
  8033  002C4C  6ADA               	clrf	fsr2h,c
  8034  002C4E  6ADF               	clrf	indf2,c
  8035                           
  8036                           ; BSR set to: 0
  8037  002C50  2A08               	incf	vscp_getMatrixInfo@i,f,c
  8038                           
  8039                           ; BSR set to: 0
  8040  002C52  0E07               	movlw	7
  8041  002C54  6408               	cpfsgt	vscp_getMatrixInfo@i,c
  8042  002C56  D7F7               	goto	l4769
  8043  002C58  0C07               	retlw	7
  8044  002C5A                     __end_of_vscp_getMatrixInfo:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           intcon	equ	0xFF2
  8053                           postinc0	equ	0xFEE
  8054                           wreg	equ	0xFE8
  8055                           indf1	equ	0xFE7
  8056                           fsr1h	equ	0xFE2
  8057                           fsr1l	equ	0xFE1
  8058                           indf2	equ	0xFDF
  8059                           postinc2	equ	0xFDE
  8060                           postdec2	equ	0xFDD
  8061                           plusw2	equ	0xFDB
  8062                           fsr2h	equ	0xFDA
  8063                           fsr2l	equ	0xFD9
  8064                           status	equ	0xFD8
  8065                           
  8066 ;; *************** function _vscp_goBootloaderMode *****************
  8067 ;; Defined at:
  8068 ;;		line 1335 in file "../main.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;  algorithm       1    wreg     unsigned char 
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  algorithm       1   10[COMRAM] unsigned char 
  8073 ;; Return value:  Size  Location     Type
  8074 ;;		None               void
  8075 ;; Registers used:
  8076 ;;		wreg, status,2, status,0, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : F/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8086 ;;Total ram usage:        1 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:    3
  8089 ;; This function calls:
  8090 ;;		_writeEEPROM
  8091 ;; This function is called by:
  8092 ;;		_vscp_handleProtocolEvent
  8093 ;; This function uses a non-reentrant model
  8094 ;;
  8095                           
  8096                           	psect	text46
  8097  002D0E                     __ptext46:
  8098                           	opt stack 0
  8099  002D0E                     _vscp_goBootloaderMode:
  8100                           	opt stack 26
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;incstack = 0
  8104                           ;incstack = 0
  8105                           ;vscp_goBootloaderMode@algorithm stored from wreg
  8106  002D0E  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;main.c: 1336: if ( 0x01 != algorithm ) return;
  8110  002D12  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
  8111  002D14  A4D8               	btfss	status,2,c
  8112  002D16  0012               	return	
  8113                           
  8114                           ; BSR set to: 0
  8115                           ;main.c: 1340: writeEEPROM(0x00, 0xff);
  8116  002D18  6A09               	clrf	?_writeEEPROM+1,c
  8117  002D1A  6A08               	clrf	?_writeEEPROM,c
  8118  002D1C  0EFF               	movlw	255
  8119  002D1E  680A               	setf	?_writeEEPROM+2,c
  8120  002D20  ECD8  F015         	call	_writeEEPROM	;wreg free
  8121  002D24  00FF               	reset		;# 
  8122  002D26  0012               	return	
  8123  002D28                     __end_of_vscp_goBootloaderMode:
  8124                           	opt stack 0
  8125                           tblptru	equ	0xFF8
  8126                           tblptrh	equ	0xFF7
  8127                           tblptrl	equ	0xFF6
  8128                           tablat	equ	0xFF5
  8129                           prodh	equ	0xFF4
  8130                           prodl	equ	0xFF3
  8131                           intcon	equ	0xFF2
  8132                           postinc0	equ	0xFEE
  8133                           wreg	equ	0xFE8
  8134                           indf1	equ	0xFE7
  8135                           fsr1h	equ	0xFE2
  8136                           fsr1l	equ	0xFE1
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           plusw2	equ	0xFDB
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function _vscp_handleProbeState *****************
  8146 ;; Defined at:
  8147 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;		None
  8152 ;; Return value:  Size  Location     Type
  8153 ;;		None               void
  8154 ;; Registers used:
  8155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : F/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8165 ;;Total ram usage:        0 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    8
  8168 ;; This function calls:
  8169 ;;		_vscp_goActiveState
  8170 ;;		_vscp_writeNicknamePermanent
  8171 ;;		_vscp_sendEvent
  8172 ;;		_vscp_setSegmentCRC
  8173 ;; This function is called by:
  8174 ;;		_main
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	text47
  8179  0023A4                     __ptext47:
  8180                           	opt stack 0
  8181  0023A4                     _vscp_handleProbeState:
  8182                           	opt stack 22
  8183                           
  8184                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
  8185                           
  8186                           ;incstack = 0
  8187                           ;incstack = 0
  8188  0023A4  D053               	goto	l5625
  8189  0023A6                     l5555:
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
  8193  0023A6  2853               	incf	_vscp_probe_address,w,c
  8194  0023A8  E010               	bz	l5571
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
  8198  0023AA  0E81               	movlw	129
  8199  0023AC  6F83               	movwf	_vscp_omsg& (0+255),b
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
  8203  0023AE  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
  8207  0023B0  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8208  0023B2  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8209                           
  8210                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
  8211  0023B4  0E02               	movlw	2
  8212  0023B6  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8213                           
  8214                           ; BSR set to: 0
  8215                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
  8216  0023B8  C053  F088         	movff	_vscp_probe_address,_vscp_omsg+5
  8217                           
  8218                           ; BSR set to: 0
  8219                           ;vscp_firmware.c: 214: vscp_sendEvent();
  8220  0023BC  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
  8224  0023C0  0E01               	movlw	1
  8225  0023C2  6F72               	movwf	_vscp_node_substate& (0+255),b
  8226  0023C4                     l5569:
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;vscp_firmware.c: 217: vscp_timer = 0;
  8230  0023C4  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8231  0023C6  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8232                           
  8233                           ;vscp_firmware.c: 219: } else {
  8234  0023C8  D048               	goto	l840
  8235  0023CA                     l5571:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
  8239  0023CA  0E04               	movlw	4
  8240  0023CC  6F71               	movwf	_vscp_node_state& (0+255),b
  8241                           
  8242                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
  8243  0023CE  0E81               	movlw	129
  8244  0023D0  6F83               	movwf	_vscp_omsg& (0+255),b
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
  8248  0023D2  6988               	setf	(_vscp_omsg+5)& (0+255),b
  8249                           
  8250                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
  8251  0023D4  0E07               	movlw	7
  8252  0023D6  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
  8256  0023D8  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8257  0023DA  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8258                           
  8259                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
  8260  0023DC  0E03               	movlw	3
  8261  0023DE  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;vscp_firmware.c: 232: vscp_sendEvent();
  8265  0023E0  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  8266  0023E4  D03A               	goto	l840
  8267  0023E6                     l841:
  8268                           
  8269                           ; BSR set to: 0
  8270                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
  8271  0023E6  AF75               	btfss	_vscp_imsg& (0+255),7,b
  8272  0023E8  D00F               	goto	l5595
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
  8276                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
  8277  0023EA  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  8278  0023EC  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8279  0023EE  E135               	bnz	l840
  8280                           
  8281                           ; BSR set to: 0
  8282  0023F0  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  8283  0023F2  0A03               	xorlw	3
  8284  0023F4  E132               	bnz	l840
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
  8288  0023F6  6653               	tstfsz	_vscp_probe_address,c
  8289  0023F8  D003               	goto	l5589
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
  8293  0023FA  0E02               	movlw	2
  8294  0023FC  6F71               	movwf	_vscp_node_state& (0+255),b
  8295  0023FE  D7E2               	goto	l5569
  8296  002400                     l5589:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;vscp_firmware.c: 256: vscp_probe_address++;
  8300  002400  2A53               	incf	_vscp_probe_address,f,c
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
  8304  002402  6B72               	clrf	_vscp_node_substate& (0+255),b
  8305  002404                     l5593:
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
  8309  002404  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8310  002406  D029               	goto	l840
  8311  002408                     l5595:
  8312                           
  8313                           ; BSR set to: 0
  8314                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
  8315  002408  0EE9               	movlw	233
  8316  00240A  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8317  00240C  0E03               	movlw	3
  8318  00240E  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8319  002410  E324               	bnc	l840
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
  8323  002412  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
  8327  002414  0E02               	movlw	2
  8328  002416  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8329  002418  D017               	goto	l848
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
  8333  00241A  6653               	tstfsz	_vscp_probe_address,c
  8334  00241C  D005               	goto	l849
  8335                           
  8336                           ; BSR set to: 0
  8337                           ;vscp_firmware.c: 274: vscp_probe_address++;
  8338  00241E  2A53               	incf	_vscp_probe_address,f,c
  8339                           
  8340                           ; BSR set to: 0
  8341                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
  8342  002420  6B72               	clrf	_vscp_node_substate& (0+255),b
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;vscp_firmware.c: 276: vscp_timer = 0;
  8346  002422  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8347  002424  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8348  002426  D7EE               	goto	l5593
  8349  002428                     l849:
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
  8353  002428  C053  F070         	movff	_vscp_probe_address,_vscp_nickname
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
  8357  00242C  0E03               	movlw	3
  8358  00242E  6F71               	movwf	_vscp_node_state& (0+255),b
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
  8362  002430  6B72               	clrf	_vscp_node_substate& (0+255),b
  8363                           
  8364                           ; BSR set to: 0
  8365                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
  8366  002432  5170               	movf	_vscp_nickname& (0+255),w,b
  8367  002434  ECF0  F016         	call	_vscp_writeNicknamePermanent
  8368                           
  8369                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
  8370  002438  0E40               	movlw	64
  8371  00243A  ECE7  F016         	call	_vscp_setSegmentCRC
  8372                           
  8373                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
  8374  00243E  0100               	movlb	0	; () banked
  8375  002440  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8376                           
  8377                           ; BSR set to: 0
  8378                           ;vscp_firmware.c: 290: vscp_goActiveState();
  8379  002442  EC5B  F016         	call	_vscp_goActiveState	;wreg free
  8380  002446  D009               	goto	l840
  8381  002448                     l848:
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
  8385  002448  6B72               	clrf	_vscp_node_substate& (0+255),b
  8386  00244A  D007               	goto	l840
  8387  00244C                     l5625:
  8388  00244C  0100               	movlb	0	; () banked
  8389  00244E  5172               	movf	_vscp_node_substate& (0+255),w,b
  8390                           
  8391                           ; Switch size 1, requested type "space"
  8392                           ; Number of cases is 3, Range of values is 0 to 2
  8393                           ; switch strategies available:
  8394                           ; Name         Instructions Cycles
  8395                           ; simple_byte           10     6 (average)
  8396                           ;	Chosen strategy is simple_byte
  8397  002450  E0AA               	bz	l5555
  8398  002452  0A01               	xorlw	1	; case 1
  8399  002454  E0C8               	bz	l841
  8400  002456  0A03               	xorlw	3	; case 2
  8401  002458  E1F7               	bnz	l848
  8402  00245A                     l840:
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
  8406  00245A  6B75               	clrf	_vscp_imsg& (0+255),b
  8407                           
  8408                           ; BSR set to: 0
  8409  00245C  0012               	return	
  8410  00245E                     __end_of_vscp_handleProbeState:
  8411                           	opt stack 0
  8412                           tblptru	equ	0xFF8
  8413                           tblptrh	equ	0xFF7
  8414                           tblptrl	equ	0xFF6
  8415                           tablat	equ	0xFF5
  8416                           prodh	equ	0xFF4
  8417                           prodl	equ	0xFF3
  8418                           intcon	equ	0xFF2
  8419                           postinc0	equ	0xFEE
  8420                           wreg	equ	0xFE8
  8421                           indf1	equ	0xFE7
  8422                           fsr1h	equ	0xFE2
  8423                           fsr1l	equ	0xFE1
  8424                           indf2	equ	0xFDF
  8425                           postinc2	equ	0xFDE
  8426                           postdec2	equ	0xFDD
  8427                           plusw2	equ	0xFDB
  8428                           fsr2h	equ	0xFDA
  8429                           fsr2l	equ	0xFD9
  8430                           status	equ	0xFD8
  8431                           
  8432 ;; *************** function _vscp_goActiveState *****************
  8433 ;; Defined at:
  8434 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
  8435 ;; Parameters:    Size  Location     Type
  8436 ;;		None
  8437 ;; Auto vars:     Size  Location     Type
  8438 ;;		None
  8439 ;; Return value:  Size  Location     Type
  8440 ;;		None               void
  8441 ;; Registers used:
  8442 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8443 ;; Tracked objects:
  8444 ;;		On entry : 0/0
  8445 ;;		On exit  : F/0
  8446 ;;		Unchanged: 0/0
  8447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8452 ;;Total ram usage:        0 bytes
  8453 ;; Hardware stack levels used:    1
  8454 ;; Hardware stack levels required when called:    7
  8455 ;; This function calls:
  8456 ;;		_vscp_sendEvent
  8457 ;; This function is called by:
  8458 ;;		_main
  8459 ;;		_vscp_handleProbeState
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text48
  8464  002CB6                     __ptext48:
  8465                           	opt stack 0
  8466  002CB6                     _vscp_goActiveState:
  8467                           	opt stack 22
  8468                           
  8469                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;incstack = 0
  8473                           ;incstack = 0
  8474  002CB6  0E81               	movlw	129
  8475  002CB8  0100               	movlb	0	; () banked
  8476  002CBA  6F83               	movwf	_vscp_omsg& (0+255),b
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
  8480  002CBC  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
  8484  002CBE  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8485  002CC0  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8486                           
  8487                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
  8488  002CC2  0E02               	movlw	2
  8489  002CC4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
  8493  002CC6  C070  F088         	movff	_vscp_nickname,_vscp_omsg+5
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;vscp_firmware.c: 358: vscp_sendEvent();
  8497  002CCA  ECB2  F015         	call	_vscp_sendEvent	;wreg free
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
  8501  002CCE  0E01               	movlw	1
  8502  002CD0  6E52               	movwf	_vscp_initledfunc,c
  8503                           
  8504                           ; BSR set to: 0
  8505  002CD2  0C01               	retlw	1
  8506  002CD4                     __end_of_vscp_goActiveState:
  8507                           	opt stack 0
  8508                           tblptru	equ	0xFF8
  8509                           tblptrh	equ	0xFF7
  8510                           tblptrl	equ	0xFF6
  8511                           tablat	equ	0xFF5
  8512                           prodh	equ	0xFF4
  8513                           prodl	equ	0xFF3
  8514                           intcon	equ	0xFF2
  8515                           postinc0	equ	0xFEE
  8516                           wreg	equ	0xFE8
  8517                           indf1	equ	0xFE7
  8518                           fsr1h	equ	0xFE2
  8519                           fsr1l	equ	0xFE1
  8520                           indf2	equ	0xFDF
  8521                           postinc2	equ	0xFDE
  8522                           postdec2	equ	0xFDD
  8523                           plusw2	equ	0xFDB
  8524                           fsr2h	equ	0xFDA
  8525                           fsr2l	equ	0xFD9
  8526                           status	equ	0xFD8
  8527                           
  8528 ;; *************** function _vscp_sendEvent *****************
  8529 ;; Defined at:
  8530 ;;		line 1275 in file "../../vscp_firmware/common/vscp_firmware.c"
  8531 ;; Parameters:    Size  Location     Type
  8532 ;;		None
  8533 ;; Auto vars:     Size  Location     Type
  8534 ;;  rv              1    0        unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  1    wreg      unsigned char 
  8537 ;; Registers used:
  8538 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : F/0
  8541 ;;		On exit  : F/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8548 ;;Total ram usage:        1 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:    6
  8551 ;; This function calls:
  8552 ;;		_sendVSCPFrame
  8553 ;; This function is called by:
  8554 ;;		_vscp_handleProbeState
  8555 ;;		_vscp_goActiveState
  8556 ;;		_vscp_sendHeartBeat
  8557 ;;		_vscp_newNodeOnline
  8558 ;;		_vscp_handleProtocolEvent
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           	psect	text49
  8563  002B64                     __ptext49:
  8564                           	opt stack 0
  8565  002B64                     _vscp_sendEvent:
  8566                           	opt stack 22
  8567                           
  8568                           ; BSR set to: 0
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;incstack = 0
  8572                           ;incstack = 0
  8573  002B64  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8574  002B68  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8575  002B6C  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8576  002B70  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8577  002B74  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8578  002B78  5183               	movf	_vscp_omsg& (0+255),w,b
  8579  002B7A  0B0F               	andlw	15
  8580  002B7C  6E44               	movwf	?_sendVSCPFrame+5,c
  8581  002B7E  0E00               	movlw	high (_vscp_omsg+5)
  8582  002B80  6E46               	movwf	?_sendVSCPFrame+7,c
  8583  002B82  0E88               	movlw	low (_vscp_omsg+5)
  8584  002B84  6E45               	movwf	?_sendVSCPFrame+6,c
  8585  002B86  EFE3  F012         	goto	_sendVSCPFrame	;wreg free
  8586  002B8A                     __end_of_vscp_sendEvent:
  8587                           	opt stack 0
  8588                           tblptru	equ	0xFF8
  8589                           tblptrh	equ	0xFF7
  8590                           tblptrl	equ	0xFF6
  8591                           tablat	equ	0xFF5
  8592                           prodh	equ	0xFF4
  8593                           prodl	equ	0xFF3
  8594                           intcon	equ	0xFF2
  8595                           postinc0	equ	0xFEE
  8596                           wreg	equ	0xFE8
  8597                           indf1	equ	0xFE7
  8598                           fsr1h	equ	0xFE2
  8599                           fsr1l	equ	0xFE1
  8600                           indf2	equ	0xFDF
  8601                           postinc2	equ	0xFDE
  8602                           postdec2	equ	0xFDD
  8603                           plusw2	equ	0xFDB
  8604                           fsr2h	equ	0xFDA
  8605                           fsr2l	equ	0xFD9
  8606                           status	equ	0xFD8
  8607                           
  8608 ;; *************** function _sendVSCPFrame *****************
  8609 ;; Defined at:
  8610 ;;		line 1410 in file "../main.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8613 ;;  vscptype        1   64[COMRAM] unsigned char 
  8614 ;;  nodeid          1   65[COMRAM] unsigned char 
  8615 ;;  priority        1   66[COMRAM] unsigned char 
  8616 ;;  size            1   67[COMRAM] unsigned char 
  8617 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8618 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;  id              4   70[COMRAM] unsigned long 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      unsigned char 
  8623 ;; Registers used:
  8624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : F/0
  8627 ;;		On exit  : F/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8630 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8631 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8632 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8633 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8634 ;;Total ram usage:       32 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    5
  8637 ;; This function calls:
  8638 ;;		_sendCANFrame
  8639 ;; This function is called by:
  8640 ;;		_vscp_sendEvent
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           	psect	text50
  8645  0025C6                     __ptext50:
  8646                           	opt stack 0
  8647  0025C6                     _sendVSCPFrame:
  8648                           	opt stack 22
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;main.c: 1411: uint32_t id = ( (uint32_t)priority << 26 ) |
  8652                           ;main.c: 1412: ( (uint32_t)vscpclass << 16 ) |
  8653                           ;main.c: 1413: ( (uint32_t)vscptype << 8 ) |
  8654                           ;main.c: 1414: nodeid;
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;incstack = 0
  8658                           ;incstack = 0
  8659  0025C6  C041  F090         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  8660  0025CA  6B91               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  8661  0025CC  6B92               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  8662  0025CE  6B93               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  8663  0025D0  C092  F093         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  8664  0025D4  C091  F092         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  8665  0025D8  C090  F091         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  8666  0025DC  6B90               	clrf	??_sendVSCPFrame& (0+255),b
  8667  0025DE  503F               	movf	sendVSCPFrame@vscpclass,w,c
  8668  0025E0  6F94               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  8669  0025E2  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  8670  0025E4  6F95               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  8671  0025E6  6B96               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  8672  0025E8  6B97               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  8673  0025EA  C095  F097         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  8674  0025EE  C094  F096         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  8675  0025F2  6B95               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  8676  0025F4  6B94               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  8677  0025F6  C043  F098         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  8678  0025FA  6B99               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  8679  0025FC  6B9A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  8680  0025FE  6B9B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  8681  002600  0E1A               	movlw	26
  8682  002602                     u6255:
  8683  002602  90D8               	bcf	status,0,c
  8684  002604  3798               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  8685  002606  3799               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  8686  002608  379A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  8687  00260A  379B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  8688  00260C  2EE8               	decfsz	wreg,f,c
  8689  00260E  D7F9               	goto	u6255
  8690  002610  5194               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  8691  002612  1198               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  8692  002614  6F9C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  8693  002616  5195               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  8694  002618  1199               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  8695  00261A  6F9D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  8696  00261C  5196               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  8697  00261E  119A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  8698  002620  6F9E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  8699  002622  5197               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  8700  002624  119B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  8701  002626  6F9F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  8702  002628  5190               	movf	??_sendVSCPFrame& (0+255),w,b
  8703  00262A  119C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  8704  00262C  6FA0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  8705  00262E  5191               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  8706  002630  119D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  8707  002632  6FA1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  8708  002634  5192               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  8709  002636  119E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  8710  002638  6FA2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  8711  00263A  5193               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  8712  00263C  119F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  8713  00263E  6FA3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  8714  002640  5042               	movf	sendVSCPFrame@nodeid,w,c
  8715  002642  11A0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  8716  002644  6E47               	movwf	sendVSCPFrame@id,c
  8717  002646  51A1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  8718  002648  6E48               	movwf	sendVSCPFrame@id+1,c
  8719  00264A  51A2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  8720  00264C  6E49               	movwf	sendVSCPFrame@id+2,c
  8721  00264E  51A3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  8722  002650  6E4A               	movwf	sendVSCPFrame@id+3,c
  8723                           
  8724                           ; BSR set to: 0
  8725                           ;main.c: 1416: if ( !sendCANFrame( id, size, pData ) ) {
  8726  002652  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  8727  002656  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  8728  00265A  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  8729  00265E  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  8730  002662  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  8731  002666  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  8732  00266A  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  8733  00266E  EC0D  F015         	call	_sendCANFrame	;wreg free
  8734  002672  0900               	iorlw	0
  8735  002674  E101               	bnz	l6091
  8736                           
  8737                           ; BSR set to: 0
  8738                           ;main.c: 1417: return 0;
  8739  002676  0C00               	retlw	0
  8740  002678                     l6091:
  8741                           
  8742                           ; BSR set to: 0
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;main.c: 1418: }
  8746                           ;main.c: 1420: return 1;
  8747  002678  0C01               	retlw	1
  8748  00267A                     __end_of_sendVSCPFrame:
  8749                           	opt stack 0
  8750                           tblptru	equ	0xFF8
  8751                           tblptrh	equ	0xFF7
  8752                           tblptrl	equ	0xFF6
  8753                           tablat	equ	0xFF5
  8754                           prodh	equ	0xFF4
  8755                           prodl	equ	0xFF3
  8756                           intcon	equ	0xFF2
  8757                           postinc0	equ	0xFEE
  8758                           wreg	equ	0xFE8
  8759                           indf1	equ	0xFE7
  8760                           fsr1h	equ	0xFE2
  8761                           fsr1l	equ	0xFE1
  8762                           indf2	equ	0xFDF
  8763                           postinc2	equ	0xFDE
  8764                           postdec2	equ	0xFDD
  8765                           plusw2	equ	0xFDB
  8766                           fsr2h	equ	0xFDA
  8767                           fsr2l	equ	0xFD9
  8768                           status	equ	0xFD8
  8769                           
  8770 ;; *************** function _sendCANFrame *****************
  8771 ;; Defined at:
  8772 ;;		line 1455 in file "../main.c"
  8773 ;; Parameters:    Size  Location     Type
  8774 ;;  id              4   54[COMRAM] unsigned long 
  8775 ;;  dlc             1   58[COMRAM] unsigned char 
  8776 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  8777 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;  rv              1   61[COMRAM] unsigned char 
  8780 ;; Return value:  Size  Location     Type
  8781 ;;                  1    wreg      unsigned char 
  8782 ;; Registers used:
  8783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8784 ;; Tracked objects:
  8785 ;;		On entry : F/0
  8786 ;;		On exit  : F/0
  8787 ;;		Unchanged: 0/0
  8788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8789 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8790 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8792 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8793 ;;Total ram usage:        8 bytes
  8794 ;; Hardware stack levels used:    1
  8795 ;; Hardware stack levels required when called:    4
  8796 ;; This function calls:
  8797 ;;		_ECANSendMessage
  8798 ;; This function is called by:
  8799 ;;		_sendVSCPFrame
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text51
  8804  002A1A                     __ptext51:
  8805                           	opt stack 0
  8806  002A1A                     _sendCANFrame:
  8807                           	opt stack 22
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;main.c: 1456: uint8_t rv = 0;
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;incstack = 0
  8814                           ;incstack = 0
  8815  002A1A  6A3E               	clrf	sendCANFrame@rv,c
  8816                           
  8817                           ;main.c: 1457: sendTimer = 0;
  8818  002A1C  6A51               	clrf	_sendTimer,c
  8819                           
  8820                           ;main.c: 1459: while ( sendTimer < 1 ) {
  8821  002A1E  D017               	goto	l6101
  8822  002A20                     l6097:
  8823                           
  8824                           ;main.c: 1460: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  8825  002A20  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  8826  002A24  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  8827  002A28  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  8828  002A2C  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  8829  002A30  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  8830  002A34  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  8831  002A38  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  8832  002A3C  0E20               	movlw	32
  8833  002A3E  6E19               	movwf	?_ECANSendMessage+7,c
  8834  002A40  EC05  F00E         	call	_ECANSendMessage	;wreg free
  8835  002A44  0900               	iorlw	0
  8836  002A46  E003               	bz	l6101
  8837                           
  8838                           ;main.c: 1461: rv = 1;
  8839  002A48  0E01               	movlw	1
  8840  002A4A  6E3E               	movwf	sendCANFrame@rv,c
  8841                           
  8842                           ;main.c: 1462: break;
  8843  002A4C  D002               	goto	l446
  8844  002A4E                     l6101:
  8845  002A4E  5051               	movf	_sendTimer,w,c
  8846  002A50  E0E7               	bz	l6097
  8847  002A52                     l446:
  8848                           
  8849                           ;main.c: 1463: }
  8850                           ;main.c: 1464: }
  8851                           ;main.c: 1466: vscp_omsg.flags = 0;
  8852  002A52  0100               	movlb	0	; () banked
  8853  002A54  6B83               	clrf	_vscp_omsg& (0+255),b
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;main.c: 1468: return rv;
  8857  002A56  503E               	movf	sendCANFrame@rv,w,c
  8858                           
  8859                           ; BSR set to: 0
  8860  002A58  0012               	return	
  8861  002A5A                     __end_of_sendCANFrame:
  8862                           	opt stack 0
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           prodh	equ	0xFF4
  8868                           prodl	equ	0xFF3
  8869                           intcon	equ	0xFF2
  8870                           postinc0	equ	0xFEE
  8871                           wreg	equ	0xFE8
  8872                           indf1	equ	0xFE7
  8873                           fsr1h	equ	0xFE2
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           plusw2	equ	0xFDB
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883 ;; *************** function _ECANSendMessage *****************
  8884 ;; Defined at:
  8885 ;;		line 617 in file "../ECAN.c"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;  id              4   17[COMRAM] unsigned long 
  8888 ;;  data            2   21[COMRAM] PTR unsigned char 
  8889 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8890 ;;  dataLen         1   23[COMRAM] unsigned char 
  8891 ;;  msgFlags        1   24[COMRAM] enum E18958
  8892 ;; Auto vars:     Size  Location     Type
  8893 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  8894 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8895 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8896 ;;		 -> B0CON(1), 
  8897 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  8898 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8899 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8900 ;;		 -> B0CON(1), 
  8901 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  8902 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8903 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8904 ;;		 -> B0CON(1), 
  8905 ;;  i               1   51[COMRAM] unsigned char 
  8906 ;;  temp            1   50[COMRAM] unsigned char 
  8907 ;;  tempBSEL0       1   47[COMRAM] struct .
  8908 ;;  j               1   46[COMRAM] unsigned char 
  8909 ;;  buffers         1   45[COMRAM] unsigned char 
  8910 ;;  mode            1   44[COMRAM] unsigned char 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  1    wreg      enum E18242
  8913 ;; Registers used:
  8914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8920 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8921 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8922 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8923 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8924 ;;Total ram usage:       37 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; Hardware stack levels required when called:    3
  8927 ;; This function calls:
  8928 ;;		__CANIDToRegs
  8929 ;; This function is called by:
  8930 ;;		_sendCANFrame
  8931 ;; This function uses a non-reentrant model
  8932 ;;
  8933                           
  8934                           	psect	text52
  8935  001C0A                     __ptext52:
  8936                           	opt stack 0
  8937  001C0A                     _ECANSendMessage:
  8938                           	opt stack 22
  8939                           
  8940                           ;ECAN.c: 619: BYTE mode;
  8941                           ;ECAN.c: 620: BYTE buffers;
  8942                           ;ECAN.c: 628: BYTE i,j;
  8943                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  8944                           ;ECAN.c: 630: BYTE* pb[9];
  8945                           ;ECAN.c: 631: BYTE temp;
  8946                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  8947                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;incstack = 0
  8951                           ;incstack = 0
  8952  001C0A  0E0F               	movlw	15	;volatile
  8953  001C0C  6E1C               	movwf	ECANSendMessage@pb+1,c
  8954  001C0E  0E20               	movlw	32	;volatile
  8955  001C10  6E1B               	movwf	ECANSendMessage@pb,c
  8956                           
  8957                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  8958  001C12  0E0F               	movlw	15	;volatile
  8959  001C14  6E1E               	movwf	ECANSendMessage@pb+3,c
  8960  001C16  0E10               	movlw	16	;volatile
  8961  001C18  6E1D               	movwf	ECANSendMessage@pb+2,c
  8962                           
  8963                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  8964  001C1A  0E0F               	movlw	15	;volatile
  8965  001C1C  6E20               	movwf	ECANSendMessage@pb+5,c
  8966  001C1E  6A1F               	clrf	ECANSendMessage@pb+4,c
  8967                           
  8968                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  8969  001C20  010E               	movlb	14	; () banked
  8970  001C22  0E0E               	movlw	14	;volatile
  8971  001C24  6E22               	movwf	ECANSendMessage@pb+7,c
  8972  001C26  0E80               	movlw	128	;volatile
  8973  001C28  6E21               	movwf	ECANSendMessage@pb+6,c
  8974                           
  8975                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  8976  001C2A  0E0E               	movlw	14	;volatile
  8977  001C2C  6E24               	movwf	ECANSendMessage@pb+9,c
  8978  001C2E  0E90               	movlw	144	;volatile
  8979  001C30  6E23               	movwf	ECANSendMessage@pb+8,c
  8980                           
  8981                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  8982  001C32  0E0E               	movlw	14	;volatile
  8983  001C34  6E26               	movwf	ECANSendMessage@pb+11,c
  8984  001C36  0EA0               	movlw	160	;volatile
  8985  001C38  6E25               	movwf	ECANSendMessage@pb+10,c
  8986                           
  8987                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  8988  001C3A  0E0E               	movlw	14	;volatile
  8989  001C3C  6E28               	movwf	ECANSendMessage@pb+13,c
  8990  001C3E  0EB0               	movlw	176	;volatile
  8991  001C40  6E27               	movwf	ECANSendMessage@pb+12,c
  8992                           
  8993                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  8994  001C42  0E0E               	movlw	14	;volatile
  8995  001C44  6E2A               	movwf	ECANSendMessage@pb+15,c
  8996  001C46  0EC0               	movlw	192	;volatile
  8997  001C48  6E29               	movwf	ECANSendMessage@pb+14,c
  8998                           
  8999                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  9000  001C4A  0E0E               	movlw	14	;volatile
  9001  001C4C  6E2C               	movwf	ECANSendMessage@pb+17,c
  9002  001C4E  0ED0               	movlw	208	;volatile
  9003  001C50  6E2B               	movwf	ECANSendMessage@pb+16,c
  9004                           
  9005                           ; BSR set to: 14
  9006                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  9007  001C52  5072               	movf	3954,w,c	;volatile
  9008  001C54  0BC0               	andlw	192
  9009  001C56  6E2D               	movwf	ECANSendMessage@mode,c
  9010                           
  9011                           ; BSR set to: 14
  9012                           ;ECAN.c: 660: if ( mode == 0x00 )
  9013  001C58  662D               	tstfsz	ECANSendMessage@mode,c
  9014  001C5A  D002               	goto	l6115
  9015                           
  9016                           ; BSR set to: 14
  9017                           ;ECAN.c: 661: buffers = 2;
  9018  001C5C  0E02               	movlw	2
  9019  001C5E  D001               	goto	L26
  9020  001C60                     l6115:
  9021                           
  9022                           ; BSR set to: 14
  9023                           ;ECAN.c: 662: else
  9024                           ;ECAN.c: 663: buffers = 8;
  9025  001C60  0E08               	movlw	8
  9026  001C62                     L26:
  9027  001C62  6E2E               	movwf	ECANSendMessage@buffers,c
  9028                           
  9029                           ; BSR set to: 14
  9030                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  9031  001C64  90D8               	bcf	status,0,c
  9032  001C66  317D               	rrcf	125,w,b	;volatile
  9033  001C68  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  9034                           
  9035                           ; BSR set to: 14
  9036                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  9037  001C6A  6A34               	clrf	ECANSendMessage@i,c
  9038  001C6C  D07C               	goto	l6175
  9039  001C6E                     l6121:
  9040                           
  9041                           ;ECAN.c: 688: {
  9042                           ;ECAN.c: 693: ptr = pb[i];
  9043  001C6E  5034               	movf	ECANSendMessage@i,w,c
  9044  001C70  0D02               	mullw	2
  9045  001C72  50F3               	movf	prodl,w,c
  9046  001C74  0F1B               	addlw	low ECANSendMessage@pb
  9047  001C76  6ED9               	movwf	fsr2l,c
  9048  001C78  6ADA               	clrf	fsr2h,c
  9049  001C7A  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  9050  001C7E  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  9051                           
  9052                           ;ECAN.c: 694: tempPtr = ptr;
  9053  001C82  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  9054  001C86  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  9055                           
  9056                           ;ECAN.c: 702: if ( i > 2 )
  9057  001C8A  0E02               	movlw	2
  9058  001C8C  6434               	cpfsgt	ECANSendMessage@i,c
  9059  001C8E  D004               	goto	l6133
  9060                           
  9061                           ;ECAN.c: 703: {
  9062                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  9063  001C90  90D8               	bcf	status,0,c
  9064  001C92  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  9065                           
  9066                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  9067  001C94  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  9068  001C96  D066               	goto	l6173
  9069  001C98                     l6133:
  9070                           
  9071                           ;ECAN.c: 714: }
  9072                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  9073  001C98  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9074  001C9C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9075  001CA0  50DF               	movf	indf2,w,c
  9076  001CA2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9077  001CA4  B61A               	btfsc	??_ECANSendMessage,3,c
  9078  001CA6  D05E               	goto	l6173
  9079                           
  9080                           ;ECAN.c: 721: {
  9081                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  9082  001CA8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9083  001CAC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9084  001CB0  0EFC               	movlw	252
  9085  001CB2  16DF               	andwf	indf2,f,c
  9086                           
  9087                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  9088  001CB4  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  9089  001CB8  0E03               	movlw	3
  9090  001CBA  161A               	andwf	??_ECANSendMessage,f,c
  9091  001CBC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9092  001CC0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9093  001CC4  501A               	movf	??_ECANSendMessage,w,c
  9094  001CC6  12DF               	iorwf	indf2,f,c
  9095                           
  9096                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  9097  001CC8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  9098  001CCA  D004               	goto	l638
  9099                           
  9100                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  9101  001CCC  5018               	movf	ECANSendMessage@dataLen,w,c
  9102  001CCE  0940               	iorlw	64
  9103  001CD0  6E33               	movwf	ECANSendMessage@temp,c
  9104  001CD2  D002               	goto	l6143
  9105  001CD4                     l638:
  9106                           
  9107                           ;ECAN.c: 729: else
  9108                           ;ECAN.c: 730: temp = dataLen;
  9109  001CD4  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  9110  001CD8                     l6143:
  9111                           
  9112                           ;ECAN.c: 732: *(ptr+5) = temp;
  9113  001CD8  EE20 F005          	lfsr	2,5
  9114  001CDC  5035               	movf	ECANSendMessage@ptr,w,c
  9115  001CDE  26D9               	addwf	fsr2l,f,c
  9116  001CE0  5036               	movf	ECANSendMessage@ptr+1,w,c
  9117  001CE2  22DA               	addwfc	fsr2h,f,c
  9118  001CE4  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  9119                           
  9120                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  9121  001CE8  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  9122  001CEA  D003               	goto	l640
  9123                           
  9124                           ;ECAN.c: 736: temp = 1;
  9125  001CEC  0E01               	movlw	1
  9126  001CEE  6E33               	movwf	ECANSendMessage@temp,c
  9127  001CF0  D001               	goto	l6149
  9128  001CF2                     l640:
  9129                           
  9130                           ;ECAN.c: 738: else
  9131                           ;ECAN.c: 739: temp = 0;
  9132  001CF2  6A33               	clrf	ECANSendMessage@temp,c
  9133  001CF4                     l6149:
  9134                           
  9135                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  9136  001CF4  2835               	incf	ECANSendMessage@ptr,w,c
  9137  001CF6  6E08               	movwf	?__CANIDToRegs,c
  9138  001CF8  0E00               	movlw	0
  9139  001CFA  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  9140  001CFC  6E09               	movwf	?__CANIDToRegs+1,c
  9141  001CFE  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  9142  001D02  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  9143  001D06  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  9144  001D0A  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  9145  001D0E  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  9146  001D12  ECD1  F00F         	call	__CANIDToRegs	;wreg free
  9147                           
  9148                           ;ECAN.c: 745: ptr += 6;
  9149  001D16  0E06               	movlw	6
  9150  001D18  2635               	addwf	ECANSendMessage@ptr,f,c
  9151  001D1A  0E00               	movlw	0
  9152  001D1C  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  9153                           
  9154                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  9155  001D1E  6A2F               	clrf	ECANSendMessage@j,c
  9156  001D20  D00F               	goto	l6163
  9157  001D22                     l6155:
  9158                           
  9159                           ;ECAN.c: 748: *ptr++ = *data++;
  9160  001D22  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  9161  001D26  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  9162  001D2A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  9163  001D2E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  9164  001D32  CFDF FFE7          	movff	indf2,indf1
  9165  001D36  4A16               	infsnz	ECANSendMessage@data,f,c
  9166  001D38  2A17               	incf	ECANSendMessage@data+1,f,c
  9167  001D3A  4A35               	infsnz	ECANSendMessage@ptr,f,c
  9168  001D3C  2A36               	incf	ECANSendMessage@ptr+1,f,c
  9169  001D3E  2A2F               	incf	ECANSendMessage@j,f,c
  9170  001D40                     l6163:
  9171  001D40  5018               	movf	ECANSendMessage@dataLen,w,c
  9172  001D42  5C2F               	subwf	ECANSendMessage@j,w,c
  9173  001D44  E3EE               	bnc	l6155
  9174                           
  9175                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  9176  001D46  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9177  001D4A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9178  001D4E  50DF               	movf	indf2,w,c
  9179  001D50  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9180  001D52  B41A               	btfsc	??_ECANSendMessage,2,c
  9181  001D54  0C01               	retlw	1
  9182                           
  9183                           ;ECAN.c: 753: *tempPtr |= 0x08;
  9184  001D56  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9185  001D5A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9186  001D5E  0E00               	movlw	0
  9187  001D60  86DB               	bsf	plusw2,3,c
  9188                           
  9189                           ;ECAN.c: 755: return TRUE;
  9190  001D62  0C01               	retlw	1
  9191  001D64                     l6173:
  9192  001D64  2A34               	incf	ECANSendMessage@i,f,c
  9193  001D66                     l6175:
  9194  001D66  502E               	movf	ECANSendMessage@buffers,w,c
  9195  001D68  5C34               	subwf	ECANSendMessage@i,w,c
  9196  001D6A  E381               	bnc	l6121
  9197                           
  9198                           ;ECAN.c: 756: }
  9199                           ;ECAN.c: 757: }
  9200                           ;ECAN.c: 760: return FALSE;
  9201  001D6C  0C00               	retlw	0
  9202  001D6E                     __end_of_ECANSendMessage:
  9203                           	opt stack 0
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           postinc0	equ	0xFEE
  9212                           wreg	equ	0xFE8
  9213                           indf1	equ	0xFE7
  9214                           fsr1h	equ	0xFE2
  9215                           fsr1l	equ	0xFE1
  9216                           indf2	equ	0xFDF
  9217                           postinc2	equ	0xFDE
  9218                           postdec2	equ	0xFDD
  9219                           plusw2	equ	0xFDB
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function __CANIDToRegs *****************
  9225 ;; Defined at:
  9226 ;;		line 1099 in file "../ECAN.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9229 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9230 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9231 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  9232 ;;  val             4    9[COMRAM] unsigned long 
  9233 ;;  type            1   13[COMRAM] unsigned char 
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  9236 ;;		 -> _CANIDToRegs@val(4), 
  9237 ;; Return value:  Size  Location     Type
  9238 ;;		None               void
  9239 ;; Registers used:
  9240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9241 ;; Tracked objects:
  9242 ;;		On entry : 0/E
  9243 ;;		On exit  : 0/0
  9244 ;;		Unchanged: 0/0
  9245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9246 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9248 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9249 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9250 ;;Total ram usage:       10 bytes
  9251 ;; Hardware stack levels used:    1
  9252 ;; Hardware stack levels required when called:    2
  9253 ;; This function calls:
  9254 ;;		Nothing
  9255 ;; This function is called by:
  9256 ;;		_ECANSendMessage
  9257 ;; This function uses a non-reentrant model
  9258 ;;
  9259                           
  9260                           	psect	text53
  9261  001FA2                     __ptext53:
  9262                           	opt stack 0
  9263  001FA2                     __CANIDToRegs:
  9264                           	opt stack 22
  9265                           
  9266                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9267                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9268                           
  9269                           ;incstack = 0
  9270                           ;incstack = 0
  9271  001FA2  0E0A               	movlw	low __CANIDToRegs@val
  9272  001FA4  6E11               	movwf	__CANIDToRegs@Value,c
  9273                           
  9274                           ;ECAN.c: 1104: if ( type == 0 )
  9275  001FA6  660E               	tstfsz	__CANIDToRegs@type,c
  9276  001FA8  D022               	goto	l6191
  9277                           
  9278                           ;ECAN.c: 1105: {
  9279                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9280  001FAA  5011               	movf	__CANIDToRegs@Value,w,c
  9281  001FAC  6ED9               	movwf	fsr2l,c
  9282  001FAE  6ADA               	clrf	fsr2h,c
  9283  001FB0  50DF               	movf	indf2,w,c
  9284  001FB2  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9285  001FB4  90D8               	bcf	status,0,c
  9286  001FB6  320F               	rrcf	??__CANIDToRegs,f,c
  9287  001FB8  90D8               	bcf	status,0,c
  9288  001FBA  320F               	rrcf	??__CANIDToRegs,f,c
  9289  001FBC  90D8               	bcf	status,0,c
  9290  001FBE  300F               	rrcf	??__CANIDToRegs,w,c
  9291                           
  9292                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9293  001FC0  D862               	call	PL14	;call to abstracted procedure
  9294  001FC2  2AD9               	incf	fsr2l,f,c
  9295  001FC4  6ADA               	clrf	fsr2h,c
  9296  001FC6  D872               	call	PL36	;call to abstracted procedure
  9297  001FC8                     u6395:
  9298  001FC8  90D8               	bcf	status,0,c
  9299  001FCA  360F               	rlcf	??__CANIDToRegs,f,c
  9300  001FCC  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9301  001FCE  D7FC               	goto	u6395
  9302  001FD0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9303                           
  9304                           ;ECAN.c: 1109: ptr++;
  9305                           
  9306                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9307  001FD4  D846               	call	PL4	;call to abstracted procedure
  9308  001FD6  D86A               	call	PL36	;call to abstracted procedure
  9309  001FD8                     u6405:
  9310  001FD8  90D8               	bcf	status,0,c
  9311  001FDA  360F               	rlcf	??__CANIDToRegs,f,c
  9312  001FDC  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9313  001FDE  D7FC               	goto	u6405
  9314  001FE0  500F               	movf	??__CANIDToRegs,w,c
  9315  001FE2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9316  001FE6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9317  001FEA  6EDF               	movwf	indf2,c
  9318                           
  9319                           ;ECAN.c: 1111: }
  9320  001FEC  0012               	return	
  9321  001FEE                     l6191:
  9322                           
  9323                           ;ECAN.c: 1112: else
  9324                           ;ECAN.c: 1113: {
  9325                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9326  001FEE  5011               	movf	__CANIDToRegs@Value,w,c
  9327  001FF0  D842               	call	PL10	;call to abstracted procedure
  9328  001FF2  0E05               	movlw	5
  9329  001FF4  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9330  001FF6                     u6415:
  9331  001FF6  90D8               	bcf	status,0,c
  9332  001FF8  320F               	rrcf	??__CANIDToRegs,f,c
  9333  001FFA  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9334  001FFC  D7FC               	goto	u6415
  9335  001FFE  500F               	movf	??__CANIDToRegs,w,c
  9336                           
  9337                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9338  002000  D842               	call	PL14	;call to abstracted procedure
  9339  002002  0E03               	movlw	3
  9340  002004  D849               	call	PL24	;call to abstracted procedure
  9341  002006  360F               	rlcf	??__CANIDToRegs,f,c
  9342  002008  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9343                           
  9344                           ;ECAN.c: 1117: ptr++;
  9345                           
  9346                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9347  00200C  D82A               	call	PL4	;call to abstracted procedure
  9348  00200E  0E02               	movlw	2
  9349  002010  D843               	call	PL24	;call to abstracted procedure
  9350  002012  340F               	rlcf	??__CANIDToRegs,w,c
  9351  002014  0BE0               	andlw	224
  9352  002016  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9353  00201A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9354  00201E  6EDF               	movwf	indf2,c
  9355                           
  9356                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9357  002020  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9358  002024  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9359  002028  0E00               	movlw	0
  9360  00202A  86DB               	bsf	plusw2,3,c
  9361                           
  9362                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9363  00202C  5011               	movf	__CANIDToRegs@Value,w,c
  9364  00202E  D823               	call	PL10	;call to abstracted procedure
  9365  002030  0E03               	movlw	3
  9366  002032  160F               	andwf	??__CANIDToRegs,f,c
  9367  002034  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9368                           
  9369                           ;ECAN.c: 1122: ptr++;
  9370                           
  9371                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9372  002038  D814               	call	PL4	;call to abstracted procedure
  9373  00203A  2AD9               	incf	fsr2l,f,c
  9374  00203C  6ADA               	clrf	fsr2h,c
  9375  00203E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9376  002042  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9377  002046  CFDF FFE7          	movff	indf2,indf1
  9378                           
  9379                           ;ECAN.c: 1124: ptr++;
  9380  00204A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9381  00204C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9382                           
  9383                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9384  00204E  5011               	movf	__CANIDToRegs@Value,w,c
  9385  002050  6ED9               	movwf	fsr2l,c
  9386  002052  6ADA               	clrf	fsr2h,c
  9387  002054  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9388  002058  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9389  00205C  CFDF FFE7          	movff	indf2,indf1
  9390  002060  0012               	return	
  9391  002062                     __end_of__CANIDToRegs:
  9392                           	opt stack 0
  9393  002062                     PL4:
  9394                           	opt stack 22
  9395  002062  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9396  002066  500F               	movf	??__CANIDToRegs,w,c
  9397  002068  12DF               	iorwf	indf2,f,c
  9398  00206A  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9399  00206C  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9400  00206E  5011               	movf	__CANIDToRegs@Value,w,c
  9401  002070  6ED9               	movwf	fsr2l,c
  9402  002072  6ADA               	clrf	fsr2h,c
  9403  002074  0012               	return	
  9404  002076                     __end_ofPL4:
  9405                           	opt stack 0
  9406  002076                     PL10:
  9407                           	opt stack 22
  9408  002076  6ED9               	movwf	fsr2l,c
  9409  002078  6ADA               	clrf	fsr2h,c
  9410  00207A  0E02               	movlw	2
  9411  00207C  26D9               	addwf	fsr2l,f,c
  9412  00207E  6ADA               	clrf	fsr2h,c
  9413  002080  50DF               	movf	indf2,w,c
  9414  002082  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9415  002084  0012               	return	
  9416  002086                     __end_ofPL10:
  9417                           	opt stack 0
  9418  002086                     PL14:
  9419                           	opt stack 22
  9420  002086  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9421  00208A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9422  00208E  6EDF               	movwf	indf2,c
  9423  002090  5011               	movf	__CANIDToRegs@Value,w,c
  9424  002092  6ED9               	movwf	fsr2l,c
  9425  002094  6ADA               	clrf	fsr2h,c
  9426  002096  0012               	return	
  9427  002098                     __end_ofPL14:
  9428                           	opt stack 0
  9429  002098                     PL24:
  9430                           	opt stack 22
  9431  002098  26D9               	addwf	fsr2l,f,c
  9432  00209A  6ADA               	clrf	fsr2h,c
  9433  00209C  50DF               	movf	indf2,w,c
  9434  00209E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9435  0020A0  90D8               	bcf	status,0,c
  9436  0020A2  360F               	rlcf	??__CANIDToRegs,f,c
  9437  0020A4  90D8               	bcf	status,0,c
  9438  0020A6  360F               	rlcf	??__CANIDToRegs,f,c
  9439  0020A8  90D8               	bcf	status,0,c
  9440  0020AA  0012               	return	
  9441  0020AC                     __end_ofPL24:
  9442                           	opt stack 0
  9443  0020AC                     PL36:
  9444                           	opt stack 22
  9445  0020AC  50DF               	movf	indf2,w,c
  9446  0020AE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9447  0020B0  0E05               	movlw	5
  9448  0020B2  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9449  0020B4  0C05               	retlw	5
  9450  0020B6                     __end_ofPL36:
  9451                           	opt stack 0
  9452                           tblptru	equ	0xFF8
  9453                           tblptrh	equ	0xFF7
  9454                           tblptrl	equ	0xFF6
  9455                           tablat	equ	0xFF5
  9456                           prodh	equ	0xFF4
  9457                           prodl	equ	0xFF3
  9458                           intcon	equ	0xFF2
  9459                           postinc0	equ	0xFEE
  9460                           wreg	equ	0xFE8
  9461                           indf1	equ	0xFE7
  9462                           fsr1h	equ	0xFE2
  9463                           fsr1l	equ	0xFE1
  9464                           indf2	equ	0xFDF
  9465                           postinc2	equ	0xFDE
  9466                           postdec2	equ	0xFDD
  9467                           plusw2	equ	0xFDB
  9468                           fsr2h	equ	0xFDA
  9469                           fsr2l	equ	0xFD9
  9470                           status	equ	0xFD8
  9471                           
  9472 ;; *************** function _vscp_getEvent *****************
  9473 ;; Defined at:
  9474 ;;		line 1295 in file "../../vscp_firmware/common/vscp_firmware.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;		None
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;  rv              1   43[COMRAM] unsigned char 
  9479 ;; Return value:  Size  Location     Type
  9480 ;;                  1    wreg      unsigned char 
  9481 ;; Registers used:
  9482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9483 ;; Tracked objects:
  9484 ;;		On entry : F/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9492 ;;Total ram usage:        1 bytes
  9493 ;; Hardware stack levels used:    1
  9494 ;; Hardware stack levels required when called:    6
  9495 ;; This function calls:
  9496 ;;		_getVSCPFrame
  9497 ;; This function is called by:
  9498 ;;		_main
  9499 ;; This function uses a non-reentrant model
  9500 ;;
  9501                           
  9502                           	psect	text54
  9503  002AC0                     __ptext54:
  9504                           	opt stack 0
  9505  002AC0                     _vscp_getEvent:
  9506                           	opt stack 24
  9507                           
  9508                           ; BSR set to: 0
  9509                           ;vscp_firmware.c: 1296: int8_t rv;
  9510                           ;vscp_firmware.c: 1302: if (vscp_imsg.flags & 0x80) return !0;
  9511                           
  9512                           ;incstack = 0
  9513                           ;incstack = 0
  9514  002AC0  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9515  002AC2  0012               	return	
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;vscp_firmware.c: 1305: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
  9519                           ;vscp_firmware.c: 1306: &vscp_imsg.vscp_type,
  9520                           ;vscp_firmware.c: 1307: &vscp_imsg.oaddr,
  9521                           ;vscp_firmware.c: 1308: &vscp_imsg.priority,
  9522                           ;vscp_firmware.c: 1309: &vscp_imsg.flags,
  9523                           ;vscp_firmware.c: 1310: vscp_imsg.data))) {
  9524  002AC4  0E79               	movlw	low (_vscp_imsg+4)
  9525  002AC6  6E1E               	movwf	?_getVSCPFrame,c
  9526  002AC8  0E7A               	movlw	low (_vscp_imsg+5)
  9527  002ACA  6E1F               	movwf	?_getVSCPFrame+1,c
  9528  002ACC  0E76               	movlw	low (_vscp_imsg+1)
  9529  002ACE  6E20               	movwf	?_getVSCPFrame+2,c
  9530  002AD0  0E75               	movlw	low _vscp_imsg
  9531  002AD2  6E21               	movwf	?_getVSCPFrame+3,c
  9532  002AD4  0E7B               	movlw	low (_vscp_imsg+6)
  9533  002AD6  6E22               	movwf	?_getVSCPFrame+4,c
  9534  002AD8  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  9535  002ADA  EC69  F014         	call	_getVSCPFrame
  9536  002ADE  6E2C               	movwf	vscp_getEvent@rv,c
  9537  002AE0  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9538  002AE2  B4D8               	btfsc	status,2,c
  9539  002AE4  0012               	return	
  9540                           
  9541                           ;vscp_firmware.c: 1312: vscp_imsg.flags |= 0x80;
  9542  002AE6  0100               	movlb	0	; () banked
  9543  002AE8  8F75               	bsf	_vscp_imsg& (0+255),7,b
  9544  002AEA  0012               	return	
  9545  002AEC                     __end_of_vscp_getEvent:
  9546                           	opt stack 0
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           intcon	equ	0xFF2
  9554                           postinc0	equ	0xFEE
  9555                           wreg	equ	0xFE8
  9556                           indf1	equ	0xFE7
  9557                           fsr1h	equ	0xFE2
  9558                           fsr1l	equ	0xFE1
  9559                           indf2	equ	0xFDF
  9560                           postinc2	equ	0xFDE
  9561                           postdec2	equ	0xFDD
  9562                           plusw2	equ	0xFDB
  9563                           fsr2h	equ	0xFDA
  9564                           fsr2l	equ	0xFD9
  9565                           status	equ	0xFD8
  9566                           
  9567 ;; *************** function _getVSCPFrame *****************
  9568 ;; Defined at:
  9569 ;;		line 1434 in file "../main.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9572 ;;		 -> vscp_imsg(14), 
  9573 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9574 ;;		 -> vscp_imsg(14), 
  9575 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9576 ;;		 -> vscp_imsg(14), 
  9577 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9578 ;;		 -> vscp_imsg(14), 
  9579 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9580 ;;		 -> vscp_imsg(14), 
  9581 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9582 ;;		 -> vscp_imsg(14), 
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9585 ;;		 -> vscp_imsg(14), 
  9586 ;;  id              4   39[COMRAM] unsigned long 
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  1    wreg      unsigned char 
  9589 ;; Registers used:
  9590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : F/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9596 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9597 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9598 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9599 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9600 ;;Total ram usage:       14 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    5
  9603 ;; This function calls:
  9604 ;;		_getCANFrame
  9605 ;; This function is called by:
  9606 ;;		_vscp_getEvent
  9607 ;; This function uses a non-reentrant model
  9608 ;;
  9609                           
  9610                           	psect	text55
  9611  0028D2                     __ptext55:
  9612                           	opt stack 0
  9613  0028D2                     _getVSCPFrame:
  9614                           	opt stack 24
  9615                           
  9616                           ;incstack = 0
  9617                           ;incstack = 0
  9618                           ;getVSCPFrame@pvscpclass stored from wreg
  9619  0028D2  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;main.c: 1435: uint32_t id;
  9623                           ;main.c: 1437: if ( !getCANFrame(&id, pSize, pData) ) {
  9624  0028D6  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9625  0028DA  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9626  0028DE  0E28               	movlw	getVSCPFrame@id& (0+255)
  9627  0028E0  ECC5  F015         	call	_getCANFrame
  9628  0028E4  0900               	iorlw	0
  9629  0028E6  E101               	bnz	l4805
  9630                           
  9631                           ;main.c: 1438: return 0;
  9632  0028E8  0C00               	retlw	0
  9633  0028EA                     l4805:
  9634                           
  9635                           ;main.c: 1439: }
  9636                           ;main.c: 1441: *pNodeId = id & 0x0ff;
  9637  0028EA  501F               	movf	getVSCPFrame@pNodeId,w,c
  9638  0028EC  6ED9               	movwf	fsr2l,c
  9639  0028EE  6ADA               	clrf	fsr2h,c
  9640  0028F0  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9641                           
  9642                           ;main.c: 1442: *pvscptype = (id >> 8) & 0xff;
  9643  0028F4  501E               	movf	getVSCPFrame@pvscptype,w,c
  9644  0028F6  6ED9               	movwf	fsr2l,c
  9645  0028F8  6ADA               	clrf	fsr2h,c
  9646  0028FA  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9647                           
  9648                           ;main.c: 1443: *pvscpclass = (id >> 16) & 0x1ff;
  9649  0028FE  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9650  002900  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9651  002902  0E01               	movlw	1
  9652  002904  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9653  002906  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9654  002908  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9655  00290A  6ED9               	movwf	fsr2l,c
  9656  00290C  6ADA               	clrf	fsr2h,c
  9657  00290E  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9658  002912  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  9659                           
  9660                           ;main.c: 1444: *pPriority = (uint16_t) (0x07 & (id >> 26));
  9661  002916  5020               	movf	getVSCPFrame@pPriority,w,c
  9662  002918  6ED9               	movwf	fsr2l,c
  9663  00291A  6ADA               	clrf	fsr2h,c
  9664  00291C  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  9665  002920  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  9666  002924  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  9667  002928  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  9668  00292C  0E1B               	movlw	27
  9669  00292E  D005               	goto	u4260
  9670  002930                     u4265:
  9671  002930  90D8               	bcf	status,0,c
  9672  002932  3226               	rrcf	??_getVSCPFrame+3,f,c
  9673  002934  3225               	rrcf	??_getVSCPFrame+2,f,c
  9674  002936  3224               	rrcf	??_getVSCPFrame+1,f,c
  9675  002938  3223               	rrcf	??_getVSCPFrame,f,c
  9676  00293A                     u4260:
  9677  00293A  2EE8               	decfsz	wreg,f,c
  9678  00293C  D7F9               	goto	u4265
  9679  00293E  5023               	movf	??_getVSCPFrame,w,c
  9680  002940  0B07               	andlw	7
  9681  002942  6EDF               	movwf	indf2,c
  9682                           
  9683                           ;main.c: 1446: return 1;
  9684  002944  0C01               	retlw	1
  9685  002946                     __end_of_getVSCPFrame:
  9686                           	opt stack 0
  9687                           tblptru	equ	0xFF8
  9688                           tblptrh	equ	0xFF7
  9689                           tblptrl	equ	0xFF6
  9690                           tablat	equ	0xFF5
  9691                           prodh	equ	0xFF4
  9692                           prodl	equ	0xFF3
  9693                           intcon	equ	0xFF2
  9694                           postinc0	equ	0xFEE
  9695                           wreg	equ	0xFE8
  9696                           indf1	equ	0xFE7
  9697                           fsr1h	equ	0xFE2
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           plusw2	equ	0xFDB
  9703                           fsr2h	equ	0xFDA
  9704                           fsr2l	equ	0xFD9
  9705                           status	equ	0xFD8
  9706                           
  9707 ;; *************** function _getCANFrame *****************
  9708 ;; Defined at:
  9709 ;;		line 1476 in file "../main.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;  pid             1    wreg     PTR unsigned long 
  9712 ;;		 -> getVSCPFrame@id(4), 
  9713 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
  9714 ;;		 -> vscp_imsg(14), 
  9715 ;;  pdata           1   26[COMRAM] PTR unsigned char 
  9716 ;;		 -> vscp_imsg(14), 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;  pid             1   27[COMRAM] PTR unsigned long 
  9719 ;;		 -> getVSCPFrame@id(4), 
  9720 ;;  flags           1   28[COMRAM] enum E19001
  9721 ;; Return value:  Size  Location     Type
  9722 ;;                  1    wreg      unsigned char 
  9723 ;; Registers used:
  9724 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : F/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9731 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9733 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9734 ;;Total ram usage:        4 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    4
  9737 ;; This function calls:
  9738 ;;		_ECANReceiveMessage
  9739 ;; This function is called by:
  9740 ;;		_getVSCPFrame
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           	psect	text56
  9745  002B8A                     __ptext56:
  9746                           	opt stack 0
  9747  002B8A                     _getCANFrame:
  9748                           	opt stack 24
  9749                           
  9750                           ;incstack = 0
  9751                           ;incstack = 0
  9752                           ;getCANFrame@pid stored from wreg
  9753  002B8A  CFE8 F01C          	movff	wreg,getCANFrame@pid
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;main.c: 1477: ECAN_RX_MSG_FLAGS flags;
  9757                           ;main.c: 1481: if (vscp_imsg.flags & 0x80) return 0;
  9758  002B8E  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9759  002B90                     l4817:
  9760  002B90  0C00               	retlw	0
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;main.c: 1483: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
  9764  002B92  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
  9765  002B96  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
  9766  002B9A  0E1D               	movlw	low getCANFrame@flags
  9767  002B9C  6E11               	movwf	?_ECANReceiveMessage+2,c
  9768  002B9E  501C               	movf	getCANFrame@pid,w,c
  9769  002BA0  EC89  F00A         	call	_ECANReceiveMessage
  9770  002BA4  0900               	iorlw	0
  9771  002BA6  E0F4               	bz	l4817
  9772                           
  9773                           ;main.c: 1486: if (flags & ECAN_RX_RTR_FRAME) return 0;
  9774  002BA8  AC1D               	btfss	getCANFrame@flags,6,c
  9775                           
  9776                           ;main.c: 1489: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
  9777  002BAA  AA1D               	btfss	getCANFrame@flags,5,c
  9778  002BAC  0C00               	retlw	0
  9779                           
  9780                           ;main.c: 1491: return 1;
  9781  002BAE  0C01               	retlw	1
  9782  002BB0                     __end_of_getCANFrame:
  9783                           	opt stack 0
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           postinc0	equ	0xFEE
  9792                           wreg	equ	0xFE8
  9793                           indf1	equ	0xFE7
  9794                           fsr1h	equ	0xFE2
  9795                           fsr1l	equ	0xFE1
  9796                           indf2	equ	0xFDF
  9797                           postinc2	equ	0xFDE
  9798                           postdec2	equ	0xFDD
  9799                           plusw2	equ	0xFDB
  9800                           fsr2h	equ	0xFDA
  9801                           fsr2l	equ	0xFD9
  9802                           status	equ	0xFD8
  9803                           
  9804 ;; *************** function _ECANReceiveMessage *****************
  9805 ;; Defined at:
  9806 ;;		line 803 in file "../ECAN.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;  id              1    wreg     PTR unsigned long 
  9809 ;;		 -> getVSCPFrame@id(4), 
  9810 ;;  data            1   14[COMRAM] PTR unsigned char 
  9811 ;;		 -> vscp_imsg(14), 
  9812 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
  9813 ;;		 -> vscp_imsg(14), 
  9814 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
  9815 ;;		 -> getCANFrame@flags(1), 
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;  id              1   19[COMRAM] PTR unsigned long 
  9818 ;;		 -> getVSCPFrame@id(4), 
  9819 ;;  ptr             2   23[COMRAM] PTR unsigned char 
  9820 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9821 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9822 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
  9823 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9824 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9825 ;;  temp            1   22[COMRAM] struct .
  9826 ;;  mode            1   21[COMRAM] unsigned char 
  9827 ;;  i               1   20[COMRAM] unsigned char 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  1    wreg      enum E18242
  9830 ;; Registers used:
  9831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : F/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9837 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9838 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9840 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9841 ;;Total ram usage:       11 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    3
  9844 ;; This function calls:
  9845 ;;		__ECANPointBuffer
  9846 ;;		__RegsToCANID
  9847 ;; This function is called by:
  9848 ;;		_getCANFrame
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           	psect	text57
  9853  001512                     __ptext57:
  9854                           	opt stack 0
  9855  001512                     _ECANReceiveMessage:
  9856                           	opt stack 24
  9857                           
  9858                           ;incstack = 0
  9859                           ;incstack = 0
  9860                           ;ECANReceiveMessage@id stored from wreg
  9861  001512  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;ECAN.c: 805: BYTE mode;
  9865                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  9866                           ;ECAN.c: 809: char i;
  9867                           ;ECAN.c: 810: BYTE_VAL temp;
  9868                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  9869  001516  6A50               	clrf	__ECANRxFilterHitInfo,c
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;ECAN.c: 815: mode = ECANCON&0xC0;
  9873  001518  5072               	movf	3954,w,c	;volatile
  9874  00151A  0BC0               	andlw	192
  9875  00151C  6E16               	movwf	ECANReceiveMessage@mode,c
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;ECAN.c: 816: if ( mode == 0x00 )
  9879  00151E  6616               	tstfsz	ECANReceiveMessage@mode,c
  9880  001520  D030               	goto	l4953
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;ECAN.c: 822: {
  9884                           ;ECAN.c: 824: if ( RXB0FUL )
  9885  001522  AE60               	btfss	3936,7,c	;volatile
  9886  001524  D012               	goto	l651
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;ECAN.c: 825: {
  9890                           ;ECAN.c: 827: RXB0IF = 0;
  9891  001526  9077               	bcf	3959,0,c	;volatile
  9892                           
  9893                           ;ECAN.c: 830: if ( RXB0OVFL )
  9894  001528  AE71               	btfss	3953,7,c	;volatile
  9895  00152A  D006               	goto	l4929
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;ECAN.c: 831: {
  9899                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
  9900  00152C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9901  00152E  6ED9               	movwf	fsr2l,c
  9902  001530  6ADA               	clrf	fsr2h,c
  9903  001532  0E00               	movlw	0
  9904  001534  86DB               	bsf	plusw2,3,c
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;ECAN.c: 833: RXB0OVFL = 0;
  9908  001536  9E71               	bcf	3953,7,c	;volatile
  9909  001538                     l4929:
  9910                           
  9911                           ; BSR set to: 0
  9912                           ;ECAN.c: 834: }
  9913                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  9914  001538  A060               	btfss	3936,0,c	;volatile
  9915  00153A  D002               	bra	u4435
  9916  00153C  8050               	bsf	__ECANRxFilterHitInfo,0,c
  9917  00153E  D001               	bra	u4437
  9918  001540                     u4435:
  9919  001540  9050               	bcf	__ECANRxFilterHitInfo,0,c
  9920  001542                     u4437:
  9921                           
  9922                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
  9923  001542  0E0F               	movlw	15	;volatile
  9924  001544  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9925  001546  0E60               	movlw	96	;volatile
  9926  001548  D01A               	goto	L27
  9927  00154A                     l651:
  9928                           
  9929                           ; BSR set to: 0
  9930                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
  9931  00154A  010F               	movlb	15	; () banked
  9932  00154C  AF30               	btfss	48,7,b	;volatile
  9933  00154E  0C00               	retlw	0
  9934                           
  9935                           ; BSR set to: 15
  9936                           ;ECAN.c: 842: {
  9937                           ;ECAN.c: 844: RXB1IF = 0;
  9938  001550  9277               	bcf	3959,1,c	;volatile
  9939                           
  9940                           ;ECAN.c: 847: if ( RXB1OVFL )
  9941  001552  AC71               	btfss	3953,6,c	;volatile
  9942  001554  D006               	goto	l4939
  9943                           
  9944                           ; BSR set to: 15
  9945                           ;ECAN.c: 848: {
  9946                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
  9947  001556  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9948  001558  6ED9               	movwf	fsr2l,c
  9949  00155A  6ADA               	clrf	fsr2h,c
  9950  00155C  0E00               	movlw	0
  9951  00155E  86DB               	bsf	plusw2,3,c
  9952                           
  9953                           ; BSR set to: 15
  9954                           ;ECAN.c: 850: RXB1OVFL = 0;
  9955  001560  9C71               	bcf	3953,6,c	;volatile
  9956  001562                     l4939:
  9957                           
  9958                           ; BSR set to: 15
  9959                           ;ECAN.c: 851: }
  9960                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  9961  001562  5130               	movf	48,w,b	;volatile
  9962  001564  0B07               	andlw	7
  9963  001566  6E50               	movwf	__ECANRxFilterHitInfo,c
  9964                           
  9965                           ; BSR set to: 15
  9966                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  9967  001568  0E02               	movlw	2
  9968  00156A  6050               	cpfslt	__ECANRxFilterHitInfo,c
  9969  00156C  D005               	goto	l4945
  9970                           
  9971                           ; BSR set to: 15
  9972                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  9973  00156E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9974  001570  6ED9               	movwf	fsr2l,c
  9975  001572  6ADA               	clrf	fsr2h,c
  9976  001574  0E00               	movlw	0
  9977  001576  8EDB               	bsf	plusw2,7,c
  9978  001578                     l4945:
  9979                           
  9980                           ; BSR set to: 15
  9981                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
  9982  001578  0E0F               	movlw	15	;volatile
  9983  00157A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9984  00157C  0E30               	movlw	48	;volatile
  9985  00157E                     L27:
  9986  00157E  6E18               	movwf	ECANReceiveMessage@ptr,c
  9987                           
  9988                           ;ECAN.c: 860: }
  9989  001580  D05B               	goto	l5007
  9990  001582                     l4953:
  9991                           
  9992                           ; BSR set to: 0
  9993                           ;ECAN.c: 869: else if ( mode == 0x40 )
  9994  001582  5016               	movf	ECANReceiveMessage@mode,w,c
  9995  001584  0A40               	xorlw	64
  9996  001586  E13E               	bnz	l661
  9997                           
  9998                           ; BSR set to: 0
  9999                           ;ECAN.c: 875: {
 10000                           ;ECAN.c: 876: if ( RXB0FUL )
 10001  001588  AE60               	btfss	3936,7,c	;volatile
 10002  00158A  D004               	goto	l662
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 10006  00158C  0E0F               	movlw	15	;volatile
 10007  00158E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10008  001590  0E60               	movlw	96	;volatile
 10009  001592  D036               	goto	L34
 10010  001594                     l662:
 10011                           
 10012                           ; BSR set to: 0
 10013                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 10014  001594  010F               	movlb	15	; () banked
 10015  001596  AF30               	btfss	48,7,b	;volatile
 10016  001598  D004               	goto	l664
 10017                           
 10018                           ; BSR set to: 15
 10019                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 10020  00159A  0E0F               	movlw	15	;volatile
 10021  00159C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10022  00159E  0E30               	movlw	48	;volatile
 10023  0015A0  D02F               	goto	L34
 10024  0015A2                     l664:
 10025                           
 10026                           ; BSR set to: 15
 10027                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 10028  0015A2  010E               	movlb	14
 10029  0015A4  A57D               	btfss	125,2,b	;volatile
 10030  0015A6  AF80               	btfss	128,7,b	;volatile
 10031  0015A8  D004               	goto	l666
 10032                           
 10033                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 10034  0015AA  0E0E               	movlw	14	;volatile
 10035  0015AC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10036  0015AE  0E80               	movlw	128	;volatile
 10037  0015B0  D027               	goto	L34
 10038  0015B2                     l666:
 10039                           
 10040                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 10041  0015B2  010E               	movlb	14
 10042  0015B4  A77D               	btfss	125,3,b	;volatile
 10043  0015B6  AF90               	btfss	144,7,b	;volatile
 10044  0015B8  D004               	goto	l668
 10045                           
 10046                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 10047  0015BA  0E0E               	movlw	14	;volatile
 10048  0015BC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10049  0015BE  0E90               	movlw	144	;volatile
 10050  0015C0  D01F               	goto	L34
 10051  0015C2                     l668:
 10052                           
 10053                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 10054  0015C2  010E               	movlb	14
 10055  0015C4  A97D               	btfss	125,4,b	;volatile
 10056  0015C6  AFA0               	btfss	160,7,b	;volatile
 10057  0015C8  D004               	goto	l670
 10058                           
 10059                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 10060  0015CA  0E0E               	movlw	14	;volatile
 10061  0015CC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10062  0015CE  0EA0               	movlw	160	;volatile
 10063  0015D0  D017               	goto	L34
 10064  0015D2                     l670:
 10065                           
 10066                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 10067  0015D2  010E               	movlb	14
 10068  0015D4  AB7D               	btfss	125,5,b	;volatile
 10069  0015D6  AFB0               	btfss	176,7,b	;volatile
 10070  0015D8  D004               	goto	l672
 10071                           
 10072                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 10073  0015DA  0E0E               	movlw	14	;volatile
 10074  0015DC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10075  0015DE  0EB0               	movlw	176	;volatile
 10076  0015E0  D00F               	goto	L34
 10077  0015E2                     l672:
 10078                           
 10079                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 10080  0015E2  010E               	movlb	14
 10081  0015E4  AD7D               	btfss	125,6,b	;volatile
 10082  0015E6  AFC0               	btfss	192,7,b	;volatile
 10083  0015E8  D004               	goto	l674
 10084                           
 10085                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 10086  0015EA  0E0E               	movlw	14	;volatile
 10087  0015EC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10088  0015EE  0EC0               	movlw	192	;volatile
 10089  0015F0  D007               	goto	L34
 10090  0015F2                     l674:
 10091                           
 10092                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 10093  0015F2  010E               	movlb	14
 10094  0015F4  AF7D               	btfss	125,7,b	;volatile
 10095  0015F6  AFD0               	btfss	208,7,b	;volatile
 10096  0015F8  0C00               	retlw	0
 10097                           
 10098                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 10099  0015FA  0E0E               	movlw	14	;volatile
 10100  0015FC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10101  0015FE  0ED0               	movlw	208	;volatile
 10102  001600                     L34:
 10103  001600  6E18               	movwf	ECANReceiveMessage@ptr,c
 10104  001602  D00A               	goto	l4997
 10105  001604                     l661:
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;ECAN.c: 910: else
 10109                           ;ECAN.c: 915: {
 10110                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 10111  001604  AE71               	btfss	3953,7,c	;volatile
 10112  001606  0C00               	retlw	0
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;ECAN.c: 917: {
 10116                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 10117  001608  506F               	movf	3951,w,c	;volatile
 10118  00160A  0B07               	andlw	7
 10119  00160C  EC2A  F014         	call	__ECANPointBuffer
 10120  001610  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 10121  001614  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 10122  001618                     l4997:
 10123                           
 10124                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 10125  001618  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10126  00161C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10127  001620  50DF               	movf	indf2,w,c
 10128  001622  0B1F               	andlw	31
 10129  001624  6E50               	movwf	__ECANRxFilterHitInfo,c
 10130                           
 10131                           ;ECAN.c: 932: RXB1IF = 0;
 10132  001626  9277               	bcf	3959,1,c	;volatile
 10133                           
 10134                           ;ECAN.c: 934: if ( RXB1OVFL )
 10135  001628  AC71               	btfss	3953,6,c	;volatile
 10136  00162A  D006               	goto	l5007
 10137                           
 10138                           ;ECAN.c: 935: {
 10139                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 10140  00162C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10141  00162E  6ED9               	movwf	fsr2l,c
 10142  001630  6ADA               	clrf	fsr2h,c
 10143  001632  0E00               	movlw	0
 10144  001634  86DB               	bsf	plusw2,3,c
 10145                           
 10146                           ;ECAN.c: 937: RXB1OVFL = 0;
 10147  001636  9C71               	bcf	3953,6,c	;volatile
 10148  001638                     l5007:
 10149                           
 10150                           ;ECAN.c: 942: savedPtr = ptr;
 10151  001638  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 10152  00163C  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 10153                           
 10154                           ;ECAN.c: 943: *msgFlags = 0;
 10155  001640  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10156  001642  6ED9               	movwf	fsr2l,c
 10157  001644  6ADA               	clrf	fsr2h,c
 10158  001646  6ADF               	clrf	indf2,c
 10159                           
 10160                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 10161  001648  EE20 F005          	lfsr	2,5
 10162  00164C  D854               	call	PL32	;call to abstracted procedure
 10163                           
 10164                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 10165  00164E  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10166  001650  6ED9               	movwf	fsr2l,c
 10167  001652  6ADA               	clrf	fsr2h,c
 10168  001654  5017               	movf	ECANReceiveMessage@temp,w,c
 10169  001656  0B0F               	andlw	15
 10170  001658  6EDF               	movwf	indf2,c
 10171                           
 10172                           ;ECAN.c: 950: if ( temp.bits.b6 )
 10173  00165A  AC17               	btfss	ECANReceiveMessage@temp,6,c
 10174  00165C  D005               	goto	l682
 10175                           
 10176                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 10177  00165E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10178  001660  6ED9               	movwf	fsr2l,c
 10179  001662  6ADA               	clrf	fsr2h,c
 10180  001664  0E00               	movlw	0
 10181  001666  8CDB               	bsf	plusw2,6,c
 10182  001668                     l682:
 10183                           
 10184                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 10185  001668  EE20 F002          	lfsr	2,2
 10186  00166C  D844               	call	PL32	;call to abstracted procedure
 10187                           
 10188                           ;ECAN.c: 955: if ( temp.bits.b3 )
 10189  00166E  A617               	btfss	ECANReceiveMessage@temp,3,c
 10190  001670  D008               	goto	l683
 10191                           
 10192                           ;ECAN.c: 956: {
 10193                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 10194  001672  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10195  001674  6ED9               	movwf	fsr2l,c
 10196  001676  6ADA               	clrf	fsr2h,c
 10197  001678  0E00               	movlw	0
 10198  00167A  8ADB               	bsf	plusw2,5,c
 10199                           
 10200                           ;ECAN.c: 958: temp.Val = 1;
 10201  00167C  0E01               	movlw	1
 10202  00167E  6E17               	movwf	ECANReceiveMessage@temp,c
 10203                           
 10204                           ;ECAN.c: 959: }
 10205  001680  D001               	goto	l5025
 10206  001682                     l683:
 10207                           
 10208                           ;ECAN.c: 960: else
 10209                           ;ECAN.c: 961: temp.Val = 0;
 10210  001682  6A17               	clrf	ECANReceiveMessage@temp,c
 10211  001684                     l5025:
 10212                           
 10213                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 10214  001684  2818               	incf	ECANReceiveMessage@ptr,w,c
 10215  001686  6E08               	movwf	?__RegsToCANID,c
 10216  001688  0E00               	movlw	0
 10217  00168A  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 10218  00168C  6E09               	movwf	?__RegsToCANID+1,c
 10219  00168E  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 10220  001692  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 10221  001696  ECB7  F00E         	call	__RegsToCANID	;wreg free
 10222                           
 10223                           ;ECAN.c: 966: ptr += 6;
 10224  00169A  0E06               	movlw	6
 10225  00169C  2618               	addwf	ECANReceiveMessage@ptr,f,c
 10226  00169E  0E00               	movlw	0
 10227  0016A0  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 10228                           
 10229                           ;ECAN.c: 967: temp.Val = *dataLen;
 10230  0016A2  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10231  0016A4  6ED9               	movwf	fsr2l,c
 10232  0016A6  6ADA               	clrf	fsr2h,c
 10233  0016A8  50DF               	movf	indf2,w,c
 10234  0016AA  6E17               	movwf	ECANReceiveMessage@temp,c
 10235                           
 10236                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 10237  0016AC  6A15               	clrf	ECANReceiveMessage@i,c
 10238  0016AE  D00D               	goto	l5041
 10239  0016B0                     l5033:
 10240                           
 10241                           ;ECAN.c: 969: *data++ = *ptr++;
 10242  0016B0  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10243  0016B4  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10244  0016B8  500F               	movf	ECANReceiveMessage@data,w,c
 10245  0016BA  6EE1               	movwf	fsr1l,c
 10246  0016BC  6AE2               	clrf	fsr1h,c
 10247  0016BE  CFDF FFE7          	movff	indf2,indf1
 10248  0016C2  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10249  0016C4  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10250  0016C6  2A0F               	incf	ECANReceiveMessage@data,f,c
 10251  0016C8  2A15               	incf	ECANReceiveMessage@i,f,c
 10252  0016CA                     l5041:
 10253  0016CA  5017               	movf	ECANReceiveMessage@temp,w,c
 10254  0016CC  5C15               	subwf	ECANReceiveMessage@i,w,c
 10255  0016CE  E3F0               	bnc	l5033
 10256                           
 10257                           ;ECAN.c: 972: if ( IRXIF )
 10258  0016D0  AE77               	btfss	3959,7,c	;volatile
 10259  0016D2  D006               	goto	l5047
 10260                           
 10261                           ;ECAN.c: 973: {
 10262                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10263  0016D4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10264  0016D6  6ED9               	movwf	fsr2l,c
 10265  0016D8  6ADA               	clrf	fsr2h,c
 10266  0016DA  0E00               	movlw	0
 10267  0016DC  88DB               	bsf	plusw2,4,c
 10268                           
 10269                           ;ECAN.c: 975: IRXIF = 0;
 10270  0016DE  9E77               	bcf	3959,7,c	;volatile
 10271  0016E0                     l5047:
 10272                           
 10273                           ;ECAN.c: 976: }
 10274                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10275  0016E0  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10276  0016E4  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10277  0016E8  0E7F               	movlw	127
 10278  0016EA  16DF               	andwf	indf2,f,c
 10279                           
 10280                           ;ECAN.c: 983: if ( mode == 0x80 )
 10281  0016EC  5016               	movf	ECANReceiveMessage@mode,w,c
 10282  0016EE  0A80               	xorlw	128
 10283  0016F0  B4D8               	btfsc	status,2,c
 10284                           
 10285                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10286  0016F2  9E71               	bcf	3953,7,c	;volatile
 10287                           
 10288                           ;ECAN.c: 990: return TRUE;
 10289  0016F4  0C01               	retlw	1
 10290  0016F6                     __end_of_ECANReceiveMessage:
 10291                           	opt stack 0
 10292  0016F6                     PL32:
 10293                           	opt stack 24
 10294  0016F6  5018               	movf	ECANReceiveMessage@ptr,w,c
 10295  0016F8  26D9               	addwf	fsr2l,f,c
 10296  0016FA  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10297  0016FC  22DA               	addwfc	fsr2h,f,c
 10298  0016FE  50DF               	movf	indf2,w,c
 10299  001700  6E17               	movwf	ECANReceiveMessage@temp,c
 10300  001702  0012               	return	
 10301  001704                     __end_ofPL32:
 10302                           	opt stack 0
 10303                           tblptru	equ	0xFF8
 10304                           tblptrh	equ	0xFF7
 10305                           tblptrl	equ	0xFF6
 10306                           tablat	equ	0xFF5
 10307                           prodh	equ	0xFF4
 10308                           prodl	equ	0xFF3
 10309                           intcon	equ	0xFF2
 10310                           postinc0	equ	0xFEE
 10311                           wreg	equ	0xFE8
 10312                           indf1	equ	0xFE7
 10313                           fsr1h	equ	0xFE2
 10314                           fsr1l	equ	0xFE1
 10315                           indf2	equ	0xFDF
 10316                           postinc2	equ	0xFDE
 10317                           postdec2	equ	0xFDD
 10318                           plusw2	equ	0xFDB
 10319                           fsr2h	equ	0xFDA
 10320                           fsr2l	equ	0xFD9
 10321                           status	equ	0xFD8
 10322                           
 10323 ;; *************** function __RegsToCANID *****************
 10324 ;; Defined at:
 10325 ;;		line 1156 in file "../ECAN.c"
 10326 ;; Parameters:    Size  Location     Type
 10327 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10328 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10329 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10330 ;;  val             1    9[COMRAM] PTR unsigned long 
 10331 ;;		 -> getVSCPFrame@id(4), 
 10332 ;;  type            1   10[COMRAM] unsigned char 
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10335 ;;		 -> getVSCPFrame@id(4), 
 10336 ;; Return value:  Size  Location     Type
 10337 ;;		None               void
 10338 ;; Registers used:
 10339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10348 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10349 ;;Total ram usage:        7 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    2
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_ECANReceiveMessage
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           	psect	text58
 10360  001D6E                     __ptext58:
 10361                           	opt stack 0
 10362  001D6E                     __RegsToCANID:
 10363                           	opt stack 24
 10364                           
 10365                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10366                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10367                           
 10368                           ;incstack = 0
 10369                           ;incstack = 0
 10370  001D6E  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10371                           
 10372                           ;ECAN.c: 1161: if ( type == 0 )
 10373  001D72  660B               	tstfsz	__RegsToCANID@type,c
 10374  001D74  D02B               	goto	l5121
 10375                           
 10376                           ;ECAN.c: 1162: {
 10377                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10378  001D76  500E               	movf	__RegsToCANID@Value,w,c
 10379  001D78  6ED9               	movwf	fsr2l,c
 10380  001D7A  D86C               	call	PL20	;call to abstracted procedure
 10381  001D7C  360C               	rlcf	??__RegsToCANID,f,c
 10382  001D7E  90D8               	bcf	status,0,c
 10383  001D80  360C               	rlcf	??__RegsToCANID,f,c
 10384  001D82  90D8               	bcf	status,0,c
 10385  001D84  340C               	rlcf	??__RegsToCANID,w,c
 10386  001D86  6EDF               	movwf	indf2,c
 10387                           
 10388                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10389  001D88  500E               	movf	__RegsToCANID@Value,w,c
 10390  001D8A  6ED9               	movwf	fsr2l,c
 10391  001D8C  6ADA               	clrf	fsr2h,c
 10392  001D8E  2AD9               	incf	fsr2l,f,c
 10393  001D90  6ADA               	clrf	fsr2h,c
 10394  001D92  D873               	call	PL28	;call to abstracted procedure
 10395  001D94                     u4755:
 10396  001D94  90D8               	bcf	status,0,c
 10397  001D96  320C               	rrcf	??__RegsToCANID,f,c
 10398  001D98  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10399  001D9A  D7FC               	goto	u4755
 10400  001D9C  500C               	movf	??__RegsToCANID,w,c
 10401                           
 10402                           ;ECAN.c: 1166: ptr++;
 10403                           
 10404                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10405  001D9E  D863               	call	PL22	;call to abstracted procedure
 10406  001DA0  0E05               	movlw	5
 10407  001DA2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10408  001DA4                     u4765:
 10409  001DA4  90D8               	bcf	status,0,c
 10410  001DA6  320C               	rrcf	??__RegsToCANID,f,c
 10411  001DA8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10412  001DAA  D7FC               	goto	u4765
 10413  001DAC  500E               	movf	__RegsToCANID@Value,w,c
 10414  001DAE  6ED9               	movwf	fsr2l,c
 10415  001DB0  6ADA               	clrf	fsr2h,c
 10416  001DB2  500C               	movf	??__RegsToCANID,w,c
 10417  001DB4  12DF               	iorwf	indf2,f,c
 10418                           
 10419                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10420  001DB6  D83D               	call	PL8	;call to abstracted procedure
 10421  001DB8  6ADF               	clrf	indf2,c
 10422                           
 10423                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10424  001DBA  500E               	movf	__RegsToCANID@Value,w,c
 10425  001DBC  6ED9               	movwf	fsr2l,c
 10426  001DBE  6ADA               	clrf	fsr2h,c
 10427  001DC0  0E03               	movlw	3
 10428  001DC2  26D9               	addwf	fsr2l,f,c
 10429  001DC4  6ADA               	clrf	fsr2h,c
 10430  001DC6  0E00               	movlw	0
 10431  001DC8  6EDF               	movwf	indf2,c
 10432                           
 10433                           ;ECAN.c: 1170: }
 10434  001DCA  0C00               	retlw	0
 10435  001DCC                     l5121:
 10436                           
 10437                           ;ECAN.c: 1171: else
 10438                           ;ECAN.c: 1172: {
 10439                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10440  001DCC  D832               	call	PL8	;call to abstracted procedure
 10441  001DCE  D855               	call	PL28	;call to abstracted procedure
 10442  001DD0                     u4775:
 10443  001DD0  90D8               	bcf	status,0,c
 10444  001DD2  360C               	rlcf	??__RegsToCANID,f,c
 10445  001DD4  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10446  001DD6  D7FC               	goto	u4775
 10447  001DD8  500C               	movf	??__RegsToCANID,w,c
 10448  001DDA  6EDF               	movwf	indf2,c
 10449                           
 10450                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10451  001DDC  500E               	movf	__RegsToCANID@Value,w,c
 10452  001DDE  6ED9               	movwf	fsr2l,c
 10453  001DE0  6ADA               	clrf	fsr2h,c
 10454  001DE2  0E03               	movlw	3
 10455  001DE4  26D9               	addwf	fsr2l,f,c
 10456  001DE6  D836               	call	PL20	;call to abstracted procedure
 10457  001DE8  320C               	rrcf	??__RegsToCANID,f,c
 10458  001DEA  90D8               	bcf	status,0,c
 10459  001DEC  320C               	rrcf	??__RegsToCANID,f,c
 10460  001DEE  90D8               	bcf	status,0,c
 10461  001DF0  300C               	rrcf	??__RegsToCANID,w,c
 10462                           
 10463                           ;ECAN.c: 1176: ptr++;
 10464                           
 10465                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10466  001DF2  D839               	call	PL22	;call to abstracted procedure
 10467  001DF4  0E03               	movlw	3
 10468  001DF6  160C               	andwf	??__RegsToCANID,f,c
 10469  001DF8  D81C               	call	PL8	;call to abstracted procedure
 10470  001DFA  500C               	movf	??__RegsToCANID,w,c
 10471  001DFC  12DF               	iorwf	indf2,f,c
 10472                           
 10473                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10474  001DFE  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10475  001E02  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10476  001E06  50DF               	movf	indf2,w,c
 10477  001E08  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10478  001E0A  90D8               	bcf	status,0,c
 10479  001E0C  320C               	rrcf	??__RegsToCANID,f,c
 10480  001E0E  90D8               	bcf	status,0,c
 10481  001E10  320C               	rrcf	??__RegsToCANID,f,c
 10482  001E12  90D8               	bcf	status,0,c
 10483  001E14  320C               	rrcf	??__RegsToCANID,f,c
 10484  001E16  0E1C               	movlw	28
 10485  001E18  160C               	andwf	??__RegsToCANID,f,c
 10486  001E1A  D80B               	call	PL8	;call to abstracted procedure
 10487  001E1C  500C               	movf	??__RegsToCANID,w,c
 10488  001E1E  12DF               	iorwf	indf2,f,c
 10489                           
 10490                           ;ECAN.c: 1180: ptr++;
 10491                           
 10492                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10493  001E20  D80F               	call	PL16	;call to abstracted procedure
 10494  001E22  2AE1               	incf	fsr1l,f,c
 10495  001E24  6AE2               	clrf	fsr1h,c
 10496  001E26  CFDF FFE7          	movff	indf2,indf1
 10497                           
 10498                           ;ECAN.c: 1182: ptr++;
 10499                           
 10500                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10501  001E2A  D80A               	call	PL16	;call to abstracted procedure
 10502  001E2C  CFDF FFE7          	movff	indf2,indf1
 10503  001E30  0012               	return	
 10504  001E32                     __end_of__RegsToCANID:
 10505                           	opt stack 0
 10506  001E32                     PL8:
 10507                           	opt stack 24
 10508  001E32  500E               	movf	__RegsToCANID@Value,w,c
 10509  001E34  6ED9               	movwf	fsr2l,c
 10510  001E36  6ADA               	clrf	fsr2h,c
 10511  001E38  0E02               	movlw	2
 10512  001E3A  26D9               	addwf	fsr2l,f,c
 10513  001E3C  6ADA               	clrf	fsr2h,c
 10514  001E3E  0012               	return	
 10515  001E40                     __end_ofPL8:
 10516                           	opt stack 0
 10517  001E40                     PL16:
 10518                           	opt stack 24
 10519  001E40  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10520  001E42  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10521  001E44  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10522  001E48  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10523  001E4C  500E               	movf	__RegsToCANID@Value,w,c
 10524  001E4E  6EE1               	movwf	fsr1l,c
 10525  001E50  6AE2               	clrf	fsr1h,c
 10526  001E52  0012               	return	
 10527  001E54                     __end_ofPL16:
 10528                           	opt stack 0
 10529  001E54                     PL20:
 10530                           	opt stack 24
 10531  001E54  6ADA               	clrf	fsr2h,c
 10532  001E56  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10533  001E5A  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10534  001E5E  50E7               	movf	indf1,w,c
 10535  001E60  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10536  001E62  90D8               	bcf	status,0,c
 10537  001E64  0012               	return	
 10538  001E66                     __end_ofPL20:
 10539                           	opt stack 0
 10540  001E66                     PL22:
 10541                           	opt stack 24
 10542  001E66  6EDF               	movwf	indf2,c
 10543  001E68  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10544  001E6A  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10545  001E6C  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10546  001E70  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10547  001E74  50DF               	movf	indf2,w,c
 10548  001E76  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10549  001E78  0012               	return	
 10550  001E7A                     __end_ofPL22:
 10551                           	opt stack 0
 10552  001E7A                     PL28:
 10553                           	opt stack 24
 10554  001E7A  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10555  001E7E  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10556  001E82  50E7               	movf	indf1,w,c
 10557  001E84  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10558  001E86  0E05               	movlw	5
 10559  001E88  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10560  001E8A  0C05               	retlw	5
 10561  001E8C                     __end_ofPL28:
 10562                           	opt stack 0
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           postinc0	equ	0xFEE
 10571                           wreg	equ	0xFE8
 10572                           indf1	equ	0xFE7
 10573                           fsr1h	equ	0xFE2
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           plusw2	equ	0xFDB
 10579                           fsr2h	equ	0xFDA
 10580                           fsr2l	equ	0xFD9
 10581                           status	equ	0xFD8
 10582                           
 10583 ;; *************** function __ECANPointBuffer *****************
 10584 ;; Defined at:
 10585 ;;		line 1207 in file "../ECAN.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;  b               1    wreg     unsigned char 
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  b               1   10[COMRAM] unsigned char 
 10590 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10591 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10592 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  2    7[COMRAM] PTR unsigned char 
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, status,0
 10597 ;; Tracked objects:
 10598 ;;		On entry : F/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10602 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10603 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10605 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10606 ;;Total ram usage:        6 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    2
 10609 ;; This function calls:
 10610 ;;		Nothing
 10611 ;; This function is called by:
 10612 ;;		_ECANReceiveMessage
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           	psect	text59
 10617  002854                     __ptext59:
 10618                           	opt stack 0
 10619  002854                     __ECANPointBuffer:
 10620                           	opt stack 24
 10621                           
 10622                           ;incstack = 0
 10623                           ;incstack = 0
 10624                           ;__ECANPointBuffer@b stored from wreg
 10625  002854  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;ECAN.c: 1208: BYTE* pt;
 10629                           ;ECAN.c: 1210: switch(b)
 10630  002858  D028               	goto	l5107
 10631  00285A                     l5089:
 10632                           
 10633                           ; BSR set to: 0
 10634                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10635  00285A  0E0F               	movlw	15	;volatile
 10636  00285C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10637  00285E  0E60               	movlw	96	;volatile
 10638  002860  D022               	goto	L41
 10639  002862                     l5091:
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10643  002862  010F               	movlb	15	; () banked
 10644  002864  0E0F               	movlw	15	;volatile
 10645  002866  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10646  002868  0E30               	movlw	48	;volatile
 10647  00286A  D01D               	goto	L41
 10648  00286C                     l5093:
 10649                           
 10650                           ; BSR set to: 0
 10651                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10652  00286C  010E               	movlb	14	; () banked
 10653  00286E  0E0E               	movlw	14	;volatile
 10654  002870  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10655  002872  0E80               	movlw	128	;volatile
 10656  002874  D018               	goto	L41
 10657  002876                     l5095:
 10658                           
 10659                           ; BSR set to: 0
 10660                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 10661  002876  010E               	movlb	14	; () banked
 10662  002878  0E0E               	movlw	14	;volatile
 10663  00287A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10664  00287C  0E90               	movlw	144	;volatile
 10665  00287E  D013               	goto	L41
 10666  002880                     l5097:
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 10670  002880  010E               	movlb	14	; () banked
 10671  002882  0E0E               	movlw	14	;volatile
 10672  002884  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10673  002886  0EA0               	movlw	160	;volatile
 10674  002888  D00E               	goto	L41
 10675  00288A                     l5099:
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 10679  00288A  010E               	movlb	14	; () banked
 10680  00288C  0E0E               	movlw	14	;volatile
 10681  00288E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10682  002890  0EB0               	movlw	176	;volatile
 10683  002892  D009               	goto	L41
 10684  002894                     l5101:
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 10688  002894  010E               	movlb	14	; () banked
 10689  002896  0E0E               	movlw	14	;volatile
 10690  002898  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10691  00289A  0EC0               	movlw	192	;volatile
 10692  00289C  D004               	goto	L41
 10693  00289E                     l5103:
 10694                           
 10695                           ; BSR set to: 0
 10696                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 10697  00289E  010E               	movlb	14	; () banked
 10698  0028A0  0E0E               	movlw	14	;volatile
 10699  0028A2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10700  0028A4  0ED0               	movlw	208	;volatile
 10701  0028A6                     L41:
 10702  0028A6  6E0C               	movwf	__ECANPointBuffer@pt,c
 10703                           
 10704                           ;ECAN.c: 1235: break;
 10705  0028A8  D00F               	goto	l710
 10706  0028AA                     l5107:
 10707                           
 10708                           ; BSR set to: 0
 10709  0028AA  500B               	movf	__ECANPointBuffer@b,w,c
 10710                           
 10711                           ; Switch size 1, requested type "space"
 10712                           ; Number of cases is 7, Range of values is 0 to 6
 10713                           ; switch strategies available:
 10714                           ; Name         Instructions Cycles
 10715                           ; simple_byte           22    12 (average)
 10716                           ;	Chosen strategy is simple_byte
 10717  0028AC  E0D6               	bz	l5089
 10718  0028AE  0A01               	xorlw	1	; case 1
 10719  0028B0  E0D8               	bz	l5091
 10720  0028B2  0A03               	xorlw	3	; case 2
 10721  0028B4  E0DB               	bz	l5093
 10722  0028B6  0A01               	xorlw	1	; case 3
 10723  0028B8  E0DE               	bz	l5095
 10724  0028BA  0A07               	xorlw	7	; case 4
 10725  0028BC  E0E1               	bz	l5097
 10726  0028BE  0A01               	xorlw	1	; case 5
 10727  0028C0  E0E4               	bz	l5099
 10728  0028C2  0A03               	xorlw	3	; case 6
 10729  0028C4  E0E7               	bz	l5101
 10730  0028C6  D7EB               	goto	l5103
 10731  0028C8                     l710:
 10732                           
 10733                           ;ECAN.c: 1237: return (pt);
 10734  0028C8  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 10735  0028CC  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 10736  0028D0  0012               	return	
 10737  0028D2                     __end_of__ECANPointBuffer:
 10738                           	opt stack 0
 10739                           tblptru	equ	0xFF8
 10740                           tblptrh	equ	0xFF7
 10741                           tblptrl	equ	0xFF6
 10742                           tablat	equ	0xFF5
 10743                           prodh	equ	0xFF4
 10744                           prodl	equ	0xFF3
 10745                           intcon	equ	0xFF2
 10746                           postinc0	equ	0xFEE
 10747                           wreg	equ	0xFE8
 10748                           indf1	equ	0xFE7
 10749                           fsr1h	equ	0xFE2
 10750                           fsr1l	equ	0xFE1
 10751                           indf2	equ	0xFDF
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           plusw2	equ	0xFDB
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function _vscp_check_pstorage *****************
 10760 ;; Defined at:
 10761 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;		None
 10764 ;; Auto vars:     Size  Location     Type
 10765 ;;		None
 10766 ;; Return value:  Size  Location     Type
 10767 ;;                  1    wreg      unsigned char 
 10768 ;; Registers used:
 10769 ;;		wreg, status,2, status,0, cstack
 10770 ;; Tracked objects:
 10771 ;;		On entry : E/E
 10772 ;;		On exit  : 0/0
 10773 ;;		Unchanged: 0/0
 10774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10779 ;;Total ram usage:        0 bytes
 10780 ;; Hardware stack levels used:    1
 10781 ;; Hardware stack levels required when called:    4
 10782 ;; This function calls:
 10783 ;;		_vscp_writeNicknamePermanent
 10784 ;;		_vscp_getSegmentCRC
 10785 ;;		_vscp_setSegmentCRC
 10786 ;;		_vscp_setControlByte
 10787 ;; This function is called by:
 10788 ;;		_main
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text60
 10793  002C5A                     __ptext60:
 10794                           	opt stack 0
 10795  002C5A                     _vscp_check_pstorage:
 10796                           	opt stack 26
 10797                           
 10798                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 10799                           
 10800                           ;incstack = 0
 10801                           ;incstack = 0
 10802  002C5A  EC2D  F017         	call	_vscp_getSegmentCRC	;wreg free
 10803  002C5E  0BC0               	andlw	192
 10804  002C60  0A40               	xorlw	64
 10805  002C62  E101               	bnz	l3731
 10806                           
 10807                           ;vscp_firmware.c: 170: return !0;
 10808  002C64  0C01               	retlw	1
 10809  002C66                     l3731:
 10810                           
 10811                           ;vscp_firmware.c: 171: }
 10812                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 10813  002C66  0EFF               	movlw	255
 10814  002C68  ECF0  F016         	call	_vscp_writeNicknamePermanent
 10815                           
 10816                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 10817  002C6C  0E00               	movlw	0
 10818  002C6E  ECE7  F016         	call	_vscp_setSegmentCRC
 10819                           
 10820                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 10821  002C72  0EA0               	movlw	160
 10822  002C74  ECDE  F016         	call	_vscp_setControlByte
 10823                           
 10824                           ;vscp_firmware.c: 183: return 0;
 10825  002C78  0C00               	retlw	0
 10826  002C7A                     __end_of_vscp_check_pstorage:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           postinc0	equ	0xFEE
 10836                           wreg	equ	0xFE8
 10837                           indf1	equ	0xFE7
 10838                           fsr1h	equ	0xFE2
 10839                           fsr1l	equ	0xFE1
 10840                           indf2	equ	0xFDF
 10841                           postinc2	equ	0xFDE
 10842                           postdec2	equ	0xFDD
 10843                           plusw2	equ	0xFDB
 10844                           fsr2h	equ	0xFDA
 10845                           fsr2l	equ	0xFD9
 10846                           status	equ	0xFD8
 10847                           
 10848 ;; *************** function _vscp_setControlByte *****************
 10849 ;; Defined at:
 10850 ;;		line 1294 in file "../main.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;  ctrl            1    wreg     unsigned char 
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  ctrl            1   10[COMRAM] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;		None               void
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/E
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10868 ;;Total ram usage:        1 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    3
 10871 ;; This function calls:
 10872 ;;		_writeEEPROM
 10873 ;; This function is called by:
 10874 ;;		_vscp_check_pstorage
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           	psect	text61
 10879  002DBC                     __ptext61:
 10880                           	opt stack 0
 10881  002DBC                     _vscp_setControlByte:
 10882                           	opt stack 26
 10883                           
 10884                           ;incstack = 0
 10885                           ;incstack = 0
 10886                           ;vscp_setControlByte@ctrl stored from wreg
 10887  002DBC  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 10888                           
 10889                           ;main.c: 1295: writeEEPROM(0x03, ctrl);
 10890  002DC0  6A09               	clrf	?_writeEEPROM+1,c
 10891  002DC2  0E03               	movlw	3
 10892  002DC4  6E08               	movwf	?_writeEEPROM,c
 10893  002DC6  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 10894  002DCA  EFD8  F015         	goto	_writeEEPROM	;wreg free
 10895  002DCE                     __end_of_vscp_setControlByte:
 10896                           	opt stack 0
 10897                           tblptru	equ	0xFF8
 10898                           tblptrh	equ	0xFF7
 10899                           tblptrl	equ	0xFF6
 10900                           tablat	equ	0xFF5
 10901                           prodh	equ	0xFF4
 10902                           prodl	equ	0xFF3
 10903                           intcon	equ	0xFF2
 10904                           postinc0	equ	0xFEE
 10905                           wreg	equ	0xFE8
 10906                           indf1	equ	0xFE7
 10907                           fsr1h	equ	0xFE2
 10908                           fsr1l	equ	0xFE1
 10909                           indf2	equ	0xFDF
 10910                           postinc2	equ	0xFDE
 10911                           postdec2	equ	0xFDD
 10912                           plusw2	equ	0xFDB
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8
 10916                           
 10917 ;; *************** function _vscp_setSegmentCRC *****************
 10918 ;; Defined at:
 10919 ;;		line 1285 in file "../main.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  crc             1    wreg     unsigned char 
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;  crc             1   10[COMRAM] unsigned char 
 10924 ;; Return value:  Size  Location     Type
 10925 ;;		None               void
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, cstack
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10937 ;;Total ram usage:        1 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    3
 10940 ;; This function calls:
 10941 ;;		_writeEEPROM
 10942 ;; This function is called by:
 10943 ;;		_vscp_check_pstorage
 10944 ;;		_vscp_handleProbeState
 10945 ;;		_vscp_handleHeartbeat
 10946 ;;		_vscp_handleSetNickname
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	text62
 10951  002DCE                     __ptext62:
 10952                           	opt stack 0
 10953  002DCE                     _vscp_setSegmentCRC:
 10954                           	opt stack 25
 10955                           
 10956                           ;incstack = 0
 10957                           ;incstack = 0
 10958                           ;vscp_setSegmentCRC@crc stored from wreg
 10959  002DCE  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 10960                           
 10961                           ;main.c: 1286: writeEEPROM( 0x02, crc );
 10962  002DD2  6A09               	clrf	?_writeEEPROM+1,c
 10963  002DD4  0E02               	movlw	2
 10964  002DD6  6E08               	movwf	?_writeEEPROM,c
 10965  002DD8  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 10966  002DDC  EFD8  F015         	goto	_writeEEPROM	;wreg free
 10967  002DE0                     __end_of_vscp_setSegmentCRC:
 10968                           	opt stack 0
 10969                           tblptru	equ	0xFF8
 10970                           tblptrh	equ	0xFF7
 10971                           tblptrl	equ	0xFF6
 10972                           tablat	equ	0xFF5
 10973                           prodh	equ	0xFF4
 10974                           prodl	equ	0xFF3
 10975                           intcon	equ	0xFF2
 10976                           postinc0	equ	0xFEE
 10977                           wreg	equ	0xFE8
 10978                           indf1	equ	0xFE7
 10979                           fsr1h	equ	0xFE2
 10980                           fsr1l	equ	0xFE1
 10981                           indf2	equ	0xFDF
 10982                           postinc2	equ	0xFDE
 10983                           postdec2	equ	0xFDD
 10984                           plusw2	equ	0xFDB
 10985                           fsr2h	equ	0xFDA
 10986                           fsr2l	equ	0xFD9
 10987                           status	equ	0xFD8
 10988                           
 10989 ;; *************** function _vscp_getSegmentCRC *****************
 10990 ;; Defined at:
 10991 ;;		line 1276 in file "../main.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      unsigned char 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2, cstack
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    3
 11012 ;; This function calls:
 11013 ;;		_readEEPROM
 11014 ;; This function is called by:
 11015 ;;		_vscp_check_pstorage
 11016 ;;		_vscp_handleHeartbeat
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           	psect	text63
 11021  002E5A                     __ptext63:
 11022                           	opt stack 0
 11023  002E5A                     _vscp_getSegmentCRC:
 11024                           	opt stack 25
 11025                           
 11026                           ;main.c: 1277: return readEEPROM( 0x02 );
 11027                           
 11028                           ;incstack = 0
 11029                           ;incstack = 0
 11030  002E5A  6A09               	clrf	?_readEEPROM+1,c
 11031  002E5C  0E02               	movlw	2
 11032  002E5E  6E08               	movwf	?_readEEPROM,c
 11033  002E60  EFD5  F016         	goto	_readEEPROM	;wreg free
 11034  002E64                     __end_of_vscp_getSegmentCRC:
 11035                           	opt stack 0
 11036                           tblptru	equ	0xFF8
 11037                           tblptrh	equ	0xFF7
 11038                           tblptrl	equ	0xFF6
 11039                           tablat	equ	0xFF5
 11040                           prodh	equ	0xFF4
 11041                           prodl	equ	0xFF3
 11042                           intcon	equ	0xFF2
 11043                           postinc0	equ	0xFEE
 11044                           wreg	equ	0xFE8
 11045                           indf1	equ	0xFE7
 11046                           fsr1h	equ	0xFE2
 11047                           fsr1l	equ	0xFE1
 11048                           indf2	equ	0xFDF
 11049                           postinc2	equ	0xFDE
 11050                           postdec2	equ	0xFDD
 11051                           plusw2	equ	0xFDB
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function _vscp_writeNicknamePermanent *****************
 11057 ;; Defined at:
 11058 ;;		line 545 in file "../main.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;  nickname        1    wreg     unsigned char 
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;  nickname        1   10[COMRAM] unsigned char 
 11063 ;; Return value:  Size  Location     Type
 11064 ;;		None               void
 11065 ;; Registers used:
 11066 ;;		wreg, status,2, cstack
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11075 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11076 ;;Total ram usage:        1 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    3
 11079 ;; This function calls:
 11080 ;;		_writeEEPROM
 11081 ;; This function is called by:
 11082 ;;		_vscp_check_pstorage
 11083 ;;		_vscp_handleProbeState
 11084 ;;		_vscp_handleHeartbeat
 11085 ;;		_vscp_handleSetNickname
 11086 ;;		_vscp_handleDropNickname
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           	psect	text64
 11091  002DE0                     __ptext64:
 11092                           	opt stack 0
 11093  002DE0                     _vscp_writeNicknamePermanent:
 11094                           	opt stack 25
 11095                           
 11096                           ;incstack = 0
 11097                           ;incstack = 0
 11098                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11099  002DE0  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11100                           
 11101                           ;main.c: 546: writeEEPROM( 0x01, nickname );
 11102  002DE4  6A09               	clrf	?_writeEEPROM+1,c
 11103  002DE6  0E01               	movlw	1
 11104  002DE8  6E08               	movwf	?_writeEEPROM,c
 11105  002DEA  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 11106  002DEE  EFD8  F015         	goto	_writeEEPROM	;wreg free
 11107  002DF2                     __end_of_vscp_writeNicknamePermanent:
 11108                           	opt stack 0
 11109                           tblptru	equ	0xFF8
 11110                           tblptrh	equ	0xFF7
 11111                           tblptrl	equ	0xFF6
 11112                           tablat	equ	0xFF5
 11113                           prodh	equ	0xFF4
 11114                           prodl	equ	0xFF3
 11115                           intcon	equ	0xFF2
 11116                           postinc0	equ	0xFEE
 11117                           wreg	equ	0xFE8
 11118                           indf1	equ	0xFE7
 11119                           fsr1h	equ	0xFE2
 11120                           fsr1l	equ	0xFE1
 11121                           indf2	equ	0xFDF
 11122                           postinc2	equ	0xFDE
 11123                           postdec2	equ	0xFDD
 11124                           plusw2	equ	0xFDB
 11125                           fsr2h	equ	0xFDA
 11126                           fsr2l	equ	0xFD9
 11127                           status	equ	0xFD8
 11128                           
 11129 ;; *************** function _writeEEPROM *****************
 11130 ;; Defined at:
 11131 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;  address         2    7[COMRAM] unsigned short 
 11134 ;;  data            1    9[COMRAM] unsigned char 
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;		None
 11137 ;; Return value:  Size  Location     Type
 11138 ;;		None               void
 11139 ;; Registers used:
 11140 ;;		wreg, status,2
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11146 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11149 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11150 ;;Total ram usage:        3 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    2
 11153 ;; This function calls:
 11154 ;;		Nothing
 11155 ;; This function is called by:
 11156 ;;		_main
 11157 ;;		_init_app_eeprom
 11158 ;;		_vscp_setGUID
 11159 ;;		_vscp_setManufacturerId
 11160 ;;		_vscp_writeNicknamePermanent
 11161 ;;		_vscp_writeAppReg
 11162 ;;		_vscp_setUserID
 11163 ;;		_vscp_setSegmentCRC
 11164 ;;		_vscp_setControlByte
 11165 ;;		_vscp_goBootloaderMode
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           	psect	text65
 11170  002BB0                     __ptext65:
 11171                           	opt stack 0
 11172  002BB0                     _writeEEPROM:
 11173                           	opt stack 24
 11174                           
 11175                           ;eeprom.c: 29: EEADR = address & 0xff;
 11176                           
 11177                           ;incstack = 0
 11178                           ;incstack = 0
 11179  002BB0  C008  FF74         	movff	writeEEPROM@address,3956	;volatile
 11180                           
 11181                           ;eeprom.c: 30: EEDATA = data;
 11182  002BB4  C00A  FF73         	movff	writeEEPROM@data,3955	;volatile
 11183                           
 11184                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 11185  002BB8  9E7F               	bcf	3967,7,c	;volatile
 11186                           
 11187                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 11188  002BBA  9C7F               	bcf	3967,6,c	;volatile
 11189                           
 11190                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 11191  002BBC  847F               	bsf	3967,2,c	;volatile
 11192                           
 11193                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 11194  002BBE  9EF2               	bcf	intcon,7,c	;volatile
 11195                           
 11196                           ;eeprom.c: 37: EECON2 = 0x55;
 11197  002BC0  0E55               	movlw	85
 11198  002BC2  6E7E               	movwf	3966,c	;volatile
 11199                           
 11200                           ;eeprom.c: 38: EECON2 = 0xaa;
 11201  002BC4  0EAA               	movlw	170
 11202  002BC6  6E7E               	movwf	3966,c	;volatile
 11203                           
 11204                           ;eeprom.c: 39: EECON1bits.WR = 1;
 11205  002BC8  827F               	bsf	3967,1,c	;volatile
 11206                           
 11207                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 11208  002BCA  8EF2               	bsf	intcon,7,c	;volatile
 11209  002BCC                     l1089:
 11210  002BCC  ACB7               	btfss	4023,6,c	;volatile
 11211  002BCE  D7FE               	goto	l1089
 11212                           
 11213                           ;eeprom.c: 44: PIR4bits.EEIF = 0;
 11214  002BD0  9CB7               	bcf	4023,6,c	;volatile
 11215                           
 11216                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 11217  002BD2  947F               	bcf	3967,2,c	;volatile
 11218  002BD4  0012               	return	
 11219  002BD6                     __end_of_writeEEPROM:
 11220                           	opt stack 0
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           postinc0	equ	0xFEE
 11229                           wreg	equ	0xFE8
 11230                           indf1	equ	0xFE7
 11231                           fsr1h	equ	0xFE2
 11232                           fsr1l	equ	0xFE1
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           plusw2	equ	0xFDB
 11237                           fsr2h	equ	0xFDA
 11238                           fsr2l	equ	0xFD9
 11239                           status	equ	0xFD8
 11240                           
 11241 ;; *************** function _init *****************
 11242 ;; Defined at:
 11243 ;;		line 302 in file "../main.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;		None
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;		None
 11248 ;; Return value:  Size  Location     Type
 11249 ;;		None               void
 11250 ;; Registers used:
 11251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11252 ;; Tracked objects:
 11253 ;;		On entry : 0/0
 11254 ;;		On exit  : E/E
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11261 ;;Total ram usage:        0 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    4
 11264 ;; This function calls:
 11265 ;;		_WriteTimer0
 11266 ;;		_init_app_ram
 11267 ;;		_OpenTimer0
 11268 ;;		_ECANInitialize
 11269 ;; This function is called by:
 11270 ;;		_main
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           	psect	text66
 11275  002A5A                     __ptext66:
 11276                           	opt stack 0
 11277  002A5A                     _init:
 11278                           	opt stack 26
 11279                           
 11280                           ;main.c: 306: init_app_ram();
 11281                           
 11282                           ;incstack = 0
 11283                           ;incstack = 0
 11284  002A5A  ECF9  F016         	call	_init_app_ram	;wreg free
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;main.c: 311: ANCON0 = 0;
 11288  002A5E  010F               	movlb	15	; () banked
 11289  002A60  6B5D               	clrf	93,b	;volatile
 11290                           
 11291                           ; BSR set to: 15
 11292                           ;main.c: 312: ANCON1 = 0;
 11293  002A62  6B5C               	clrf	92,b	;volatile
 11294                           
 11295                           ; BSR set to: 15
 11296                           ;main.c: 321: TRISA = 0x00;
 11297  002A64  6A92               	clrf	3986,c	;volatile
 11298                           
 11299                           ; BSR set to: 15
 11300                           ;main.c: 322: PORTA = 0x00;
 11301  002A66  6A80               	clrf	3968,c	;volatile
 11302                           
 11303                           ; BSR set to: 15
 11304                           ;main.c: 334: TRISB = 0b00001100;
 11305  002A68  0E0C               	movlw	12
 11306  002A6A  6E93               	movwf	3987,c	;volatile
 11307                           
 11308                           ; BSR set to: 15
 11309                           ;main.c: 335: PORTB = 0x00;
 11310  002A6C  6A81               	clrf	3969,c	;volatile
 11311                           
 11312                           ; BSR set to: 15
 11313                           ;main.c: 345: TRISC = 0b00000001;
 11314  002A6E  0E01               	movlw	1
 11315  002A70  6E94               	movwf	3988,c	;volatile
 11316                           
 11317                           ; BSR set to: 15
 11318                           ;main.c: 346: PORTC = 0x00;
 11319  002A72  6A82               	clrf	3970,c	;volatile
 11320                           
 11321                           ; BSR set to: 15
 11322                           ;main.c: 372: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11323  002A74  0E92               	movlw	146
 11324  002A76  EC6A  F016         	call	_OpenTimer0
 11325                           
 11326                           ; BSR set to: 15
 11327                           ;main.c: 373: WriteTimer0( 0xfb1d );
 11328  002A7A  0EFB               	movlw	251
 11329  002A7C  6E09               	movwf	?_WriteTimer0+1,c
 11330  002A7E  0E1D               	movlw	29
 11331  002A80  6E08               	movwf	?_WriteTimer0,c
 11332  002A82  EC02  F017         	call	_WriteTimer0	;wreg free
 11333                           
 11334                           ; BSR set to: 15
 11335                           ;main.c: 376: ECANInitialize();
 11336  002A86  ECE2  F013         	call	_ECANInitialize	;wreg free
 11337                           
 11338                           ;main.c: 397: INTCONbits.PEIE = 1;
 11339  002A8A  8CF2               	bsf	intcon,6,c	;volatile
 11340                           
 11341                           ;main.c: 400: INTCONbits.GIE = 1;
 11342  002A8C  8EF2               	bsf	intcon,7,c	;volatile
 11343  002A8E  0012               	return	
 11344  002A90                     __end_of_init:
 11345                           	opt stack 0
 11346                           tblptru	equ	0xFF8
 11347                           tblptrh	equ	0xFF7
 11348                           tblptrl	equ	0xFF6
 11349                           tablat	equ	0xFF5
 11350                           prodh	equ	0xFF4
 11351                           prodl	equ	0xFF3
 11352                           intcon	equ	0xFF2
 11353                           postinc0	equ	0xFEE
 11354                           wreg	equ	0xFE8
 11355                           indf1	equ	0xFE7
 11356                           fsr1h	equ	0xFE2
 11357                           fsr1l	equ	0xFE1
 11358                           indf2	equ	0xFDF
 11359                           postinc2	equ	0xFDE
 11360                           postdec2	equ	0xFDD
 11361                           plusw2	equ	0xFDB
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function _ECANInitialize *****************
 11367 ;; Defined at:
 11368 ;;		line 168 in file "../ECAN.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;		None
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;		None
 11373 ;; Return value:  Size  Location     Type
 11374 ;;		None               void
 11375 ;; Registers used:
 11376 ;;		wreg, status,2, status,0, cstack
 11377 ;; Tracked objects:
 11378 ;;		On entry : F/F
 11379 ;;		On exit  : E/E
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11386 ;;Total ram usage:        0 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    3
 11389 ;; This function calls:
 11390 ;;		_ECANSetOperationMode
 11391 ;; This function is called by:
 11392 ;;		_init
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text67
 11397  0027C4                     __ptext67:
 11398                           	opt stack 0
 11399  0027C4                     _ECANInitialize:
 11400                           	opt stack 26
 11401                           
 11402                           ; BSR set to: 15
 11403                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11404                           
 11405                           ;incstack = 0
 11406                           ;incstack = 0
 11407  0027C4  0E80               	movlw	128
 11408  0027C6  ECA0  F016         	call	_ECANSetOperationMode
 11409                           
 11410                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11411  0027CA  0E09               	movlw	9
 11412  0027CC  010E               	movlb	14	; () banked
 11413  0027CE  6F43               	movwf	67,b	;volatile
 11414                           
 11415                           ; BSR set to: 14
 11416                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11417  0027D0  0EFC               	movlw	252
 11418  0027D2  6F44               	movwf	68,b	;volatile
 11419                           
 11420                           ; BSR set to: 14
 11421                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11422                           ;ECAN.c: 181: (0 << 6) |
 11423                           ;ECAN.c: 182: (2-1);
 11424  0027D4  0E01               	movlw	1
 11425  0027D6  6F45               	movwf	69,b	;volatile
 11426                           
 11427                           ; BSR set to: 14
 11428                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11429  0027D8  0E20               	movlw	32
 11430  0027DA  6E70               	movwf	3952,c	;volatile
 11431                           
 11432                           ; BSR set to: 14
 11433                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11434  0027DC  8E72               	bsf	3954,7,c	;volatile
 11435                           
 11436                           ; BSR set to: 14
 11437                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11438  0027DE  9C72               	bcf	3954,6,c	;volatile
 11439                           
 11440                           ; BSR set to: 14
 11441                           ;ECAN.c: 205: RXB0CON = 0;
 11442  0027E0  6A60               	clrf	3936,c	;volatile
 11443                           
 11444                           ; BSR set to: 14
 11445                           ;ECAN.c: 211: RXB1CON = 0;
 11446  0027E2  010F               	movlb	15	; () banked
 11447  0027E4  6B30               	clrf	48,b	;volatile
 11448                           
 11449                           ; BSR set to: 15
 11450                           ;ECAN.c: 221: B0CON = 0;
 11451  0027E6  010E               	movlb	14	; () banked
 11452  0027E8  6B80               	clrf	128,b	;volatile
 11453                           
 11454                           ; BSR set to: 14
 11455                           ;ECAN.c: 231: B1CON = 0;
 11456  0027EA  6B90               	clrf	144,b	;volatile
 11457                           
 11458                           ; BSR set to: 14
 11459                           ;ECAN.c: 241: B2CON = 0;
 11460  0027EC  6BA0               	clrf	160,b	;volatile
 11461                           
 11462                           ; BSR set to: 14
 11463                           ;ECAN.c: 254: B3CON = 0 << 2;
 11464  0027EE  6BB0               	clrf	176,b	;volatile
 11465                           
 11466                           ; BSR set to: 14
 11467                           ;ECAN.c: 264: B4CON = 0 << 2;
 11468  0027F0  6BC0               	clrf	192,b	;volatile
 11469                           
 11470                           ; BSR set to: 14
 11471                           ;ECAN.c: 274: B5CON = 0 << 2;
 11472  0027F2  6BD0               	clrf	208,b	;volatile
 11473                           
 11474                           ; BSR set to: 14
 11475                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11476  0027F4  0EE0               	movlw	224
 11477  0027F6  6F7D               	movwf	125,b	;volatile
 11478                           
 11479                           ; BSR set to: 14
 11480                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11481  0027F8  6BE0               	clrf	224,b	;volatile
 11482                           
 11483                           ; BSR set to: 14
 11484  0027FA  0E08               	movlw	8
 11485  0027FC  6FE1               	movwf	225,b	;volatile
 11486                           
 11487                           ; BSR set to: 14
 11488  0027FE  6BE2               	clrf	226,b	;volatile
 11489                           
 11490                           ; BSR set to: 14
 11491  002800  6BE3               	clrf	227,b	;volatile
 11492                           
 11493                           ; BSR set to: 14
 11494                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 11495  002802  6BE4               	clrf	228,b	;volatile
 11496                           
 11497                           ; BSR set to: 14
 11498  002804  0EE8               	movlw	232
 11499  002806  6FE5               	movwf	229,b	;volatile
 11500                           
 11501                           ; BSR set to: 14
 11502  002808  0E1A               	movlw	26
 11503  00280A  6FE6               	movwf	230,b	;volatile
 11504                           
 11505                           ; BSR set to: 14
 11506  00280C  6BE7               	clrf	231,b	;volatile
 11507                           
 11508                           ; BSR set to: 14
 11509                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11510  00280E  0E03               	movlw	3
 11511  002810  6F46               	movwf	70,b	;volatile
 11512                           
 11513                           ; BSR set to: 14
 11514                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 11515  002812  6B47               	clrf	71,b	;volatile
 11516                           
 11517                           ; BSR set to: 14
 11518                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 11519  002814  6B71               	clrf	113,b	;volatile
 11520                           
 11521                           ; BSR set to: 14
 11522                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 11523  002816  0E11               	movlw	17
 11524  002818  6F72               	movwf	114,b	;volatile
 11525                           
 11526                           ; BSR set to: 14
 11527                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 11528  00281A  6F73               	movwf	115,b	;volatile
 11529                           
 11530                           ; BSR set to: 14
 11531                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 11532  00281C  6B74               	clrf	116,b	;volatile
 11533                           
 11534                           ; BSR set to: 14
 11535                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 11536  00281E  6B75               	clrf	117,b	;volatile
 11537                           
 11538                           ; BSR set to: 14
 11539                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 11540  002820  6B76               	clrf	118,b	;volatile
 11541                           
 11542                           ; BSR set to: 14
 11543                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 11544  002822  6B77               	clrf	119,b	;volatile
 11545                           
 11546                           ; BSR set to: 14
 11547                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 11548  002824  6B78               	clrf	120,b	;volatile
 11549                           
 11550                           ; BSR set to: 14
 11551                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 11552  002826  0E54               	movlw	84
 11553  002828  6F79               	movwf	121,b	;volatile
 11554                           
 11555                           ; BSR set to: 14
 11556                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 11557  00282A  0E05               	movlw	5
 11558  00282C  6F7A               	movwf	122,b	;volatile
 11559                           
 11560                           ; BSR set to: 14
 11561                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11562  00282E  6B7B               	clrf	123,b	;volatile
 11563                           
 11564                           ; BSR set to: 14
 11565                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11566  002830  6B7B               	clrf	123,b	;volatile
 11567                           
 11568                           ; BSR set to: 14
 11569                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 11570  002832  0E0F               	movlw	15
 11571  002834  6FF8               	movwf	248,b	;volatile
 11572                           
 11573                           ; BSR set to: 14
 11574  002836  0EE0               	movlw	224
 11575  002838  6FF9               	movwf	249,b	;volatile
 11576                           
 11577                           ; BSR set to: 14
 11578  00283A  6BFA               	clrf	250,b	;volatile
 11579                           
 11580                           ; BSR set to: 14
 11581  00283C  6BFB               	clrf	251,b	;volatile
 11582                           
 11583                           ; BSR set to: 14
 11584                           ;ECAN.c: 482: RXM0EXIDM = 1;
 11585  00283E  87F9               	bsf	249,3,b	;volatile
 11586                           
 11587                           ; BSR set to: 14
 11588                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 11589  002840  0E0F               	movlw	15
 11590  002842  6FFC               	movwf	252,b	;volatile
 11591                           
 11592                           ; BSR set to: 14
 11593  002844  0EE0               	movlw	224
 11594  002846  6FFD               	movwf	253,b	;volatile
 11595                           
 11596                           ; BSR set to: 14
 11597  002848  69FE               	setf	254,b	;volatile
 11598                           
 11599                           ; BSR set to: 14
 11600  00284A  6BFF               	clrf	255,b	;volatile
 11601                           
 11602                           ; BSR set to: 14
 11603                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 11604  00284C  87FD               	bsf	253,3,b	;volatile
 11605                           
 11606                           ; BSR set to: 14
 11607                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 11608  00284E  0E00               	movlw	0
 11609  002850  EFA0  F016         	goto	_ECANSetOperationMode
 11610  002854                     __end_of_ECANInitialize:
 11611                           	opt stack 0
 11612                           tblptru	equ	0xFF8
 11613                           tblptrh	equ	0xFF7
 11614                           tblptrl	equ	0xFF6
 11615                           tablat	equ	0xFF5
 11616                           prodh	equ	0xFF4
 11617                           prodl	equ	0xFF3
 11618                           intcon	equ	0xFF2
 11619                           postinc0	equ	0xFEE
 11620                           wreg	equ	0xFE8
 11621                           indf1	equ	0xFE7
 11622                           fsr1h	equ	0xFE2
 11623                           fsr1l	equ	0xFE1
 11624                           indf2	equ	0xFDF
 11625                           postinc2	equ	0xFDE
 11626                           postdec2	equ	0xFDD
 11627                           plusw2	equ	0xFDB
 11628                           fsr2h	equ	0xFDA
 11629                           fsr2l	equ	0xFD9
 11630                           status	equ	0xFD8
 11631                           
 11632 ;; *************** function _ECANSetOperationMode *****************
 11633 ;; Defined at:
 11634 ;;		line 1012 in file "../ECAN.c"
 11635 ;; Parameters:    Size  Location     Type
 11636 ;;  mode            1    wreg     enum E18989
 11637 ;; Auto vars:     Size  Location     Type
 11638 ;;  mode            1    7[COMRAM] enum E18989
 11639 ;; Return value:  Size  Location     Type
 11640 ;;		None               void
 11641 ;; Registers used:
 11642 ;;		wreg, status,2, status,0
 11643 ;; Tracked objects:
 11644 ;;		On entry : E/F
 11645 ;;		On exit  : E/E
 11646 ;;		Unchanged: E/0
 11647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11651 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11652 ;;Total ram usage:        1 bytes
 11653 ;; Hardware stack levels used:    1
 11654 ;; Hardware stack levels required when called:    2
 11655 ;; This function calls:
 11656 ;;		Nothing
 11657 ;; This function is called by:
 11658 ;;		_ECANInitialize
 11659 ;; This function uses a non-reentrant model
 11660 ;;
 11661                           
 11662                           	psect	text68
 11663  002D40                     __ptext68:
 11664                           	opt stack 0
 11665  002D40                     _ECANSetOperationMode:
 11666                           	opt stack 26
 11667                           
 11668                           ;incstack = 0
 11669                           ;incstack = 0
 11670                           ;ECANSetOperationMode@mode stored from wreg
 11671  002D40  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 11672                           
 11673                           ;ECAN.c: 1013: CANCON &= 0x1F;
 11674  002D44  0E1F               	movlw	31
 11675  002D46  166F               	andwf	3951,f,c	;volatile
 11676                           
 11677                           ;ECAN.c: 1014: CANCON |= mode;
 11678  002D48  5008               	movf	ECANSetOperationMode@mode,w,c
 11679  002D4A  126F               	iorwf	3951,f,c	;volatile
 11680  002D4C                     l5059:
 11681  002D4C  506F               	movf	3951,w,c	;volatile
 11682  002D4E  0BE0               	andlw	224
 11683  002D50  1808               	xorwf	ECANSetOperationMode@mode,w,c
 11684  002D52  B4D8               	btfsc	status,2,c
 11685  002D54  0012               	return	
 11686  002D56  D7FA               	goto	l5059
 11687  002D58                     __end_of_ECANSetOperationMode:
 11688                           	opt stack 0
 11689                           tblptru	equ	0xFF8
 11690                           tblptrh	equ	0xFF7
 11691                           tblptrl	equ	0xFF6
 11692                           tablat	equ	0xFF5
 11693                           prodh	equ	0xFF4
 11694                           prodl	equ	0xFF3
 11695                           intcon	equ	0xFF2
 11696                           postinc0	equ	0xFEE
 11697                           wreg	equ	0xFE8
 11698                           indf1	equ	0xFE7
 11699                           fsr1h	equ	0xFE2
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function _OpenTimer0 *****************
 11710 ;; Defined at:
 11711 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  config          1    wreg     unsigned char 
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  config          1    7[COMRAM] unsigned char 
 11716 ;; Return value:  Size  Location     Type
 11717 ;;		None               void
 11718 ;; Registers used:
 11719 ;;		wreg, status,2, status,0
 11720 ;; Tracked objects:
 11721 ;;		On entry : F/F
 11722 ;;		On exit  : F/F
 11723 ;;		Unchanged: E/0
 11724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11729 ;;Total ram usage:        1 bytes
 11730 ;; Hardware stack levels used:    1
 11731 ;; Hardware stack levels required when called:    2
 11732 ;; This function calls:
 11733 ;;		Nothing
 11734 ;; This function is called by:
 11735 ;;		_init
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           	psect	text69
 11740  002CD4                     __ptext69:
 11741                           	opt stack 0
 11742  002CD4                     _OpenTimer0:
 11743                           	opt stack 27
 11744                           
 11745                           ;incstack = 0
 11746                           ;incstack = 0
 11747                           ;OpenTimer0@config stored from wreg
 11748  002CD4  CFE8 F008          	movff	wreg,OpenTimer0@config
 11749                           
 11750                           ; BSR set to: 15
 11751  002CD8  5008               	movf	OpenTimer0@config,w,c
 11752  002CDA  0B7F               	andlw	127
 11753  002CDC  6ED5               	movwf	4053,c	;volatile
 11754                           
 11755                           ; BSR set to: 15
 11756  002CDE  6AD7               	clrf	4055,c	;volatile
 11757                           
 11758                           ; BSR set to: 15
 11759  002CE0  6AD6               	clrf	4054,c	;volatile
 11760                           
 11761                           ; BSR set to: 15
 11762  002CE2  94F2               	bcf	intcon,2,c	;volatile
 11763                           
 11764                           ; BSR set to: 15
 11765  002CE4  AE08               	btfss	OpenTimer0@config,7,c
 11766  002CE6  D002               	goto	l1108
 11767                           
 11768                           ; BSR set to: 15
 11769  002CE8  8AF2               	bsf	intcon,5,c	;volatile
 11770  002CEA  D001               	goto	l1109
 11771  002CEC                     l1108:
 11772                           
 11773                           ; BSR set to: 15
 11774  002CEC  9AF2               	bcf	intcon,5,c	;volatile
 11775  002CEE                     l1109:
 11776                           
 11777                           ; BSR set to: 15
 11778  002CEE  8ED5               	bsf	4053,7,c	;volatile
 11779                           
 11780                           ; BSR set to: 15
 11781  002CF0  0012               	return	
 11782  002CF2                     __end_of_OpenTimer0:
 11783                           	opt stack 0
 11784                           tblptru	equ	0xFF8
 11785                           tblptrh	equ	0xFF7
 11786                           tblptrl	equ	0xFF6
 11787                           tablat	equ	0xFF5
 11788                           prodh	equ	0xFF4
 11789                           prodl	equ	0xFF3
 11790                           intcon	equ	0xFF2
 11791                           postinc0	equ	0xFEE
 11792                           wreg	equ	0xFE8
 11793                           indf1	equ	0xFE7
 11794                           fsr1h	equ	0xFE2
 11795                           fsr1l	equ	0xFE1
 11796                           indf2	equ	0xFDF
 11797                           postinc2	equ	0xFDE
 11798                           postdec2	equ	0xFDD
 11799                           plusw2	equ	0xFDB
 11800                           fsr2h	equ	0xFDA
 11801                           fsr2l	equ	0xFD9
 11802                           status	equ	0xFD8
 11803                           
 11804 ;; *************** function _init_app_ram *****************
 11805 ;; Defined at:
 11806 ;;		line 410 in file "../main.c"
 11807 ;; Parameters:    Size  Location     Type
 11808 ;;		None
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;  i               1    0        unsigned char 
 11811 ;; Return value:  Size  Location     Type
 11812 ;;		None               void
 11813 ;; Registers used:
 11814 ;;		None
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/E
 11817 ;;		On exit  : F/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11824 ;;Total ram usage:        0 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    2
 11827 ;; This function calls:
 11828 ;;		Nothing
 11829 ;; This function is called by:
 11830 ;;		_main
 11831 ;;		_init
 11832 ;;		_vscp_restoreDefaults
 11833 ;; This function uses a non-reentrant model
 11834 ;;
 11835                           
 11836                           	psect	text70
 11837  002DF2                     __ptext70:
 11838                           	opt stack 0
 11839  002DF2                     _init_app_ram:
 11840                           	opt stack 25
 11841                           
 11842                           ;main.c: 411: uint8_t i;
 11843                           ;main.c: 413: measurement_clock = 0;
 11844                           
 11845                           ; BSR set to: 15
 11846                           ;incstack = 0
 11847                           ;incstack = 0
 11848  002DF2  0100               	movlb	0	; () banked
 11849  002DF4  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 11850  002DF6  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 11851  002DF8  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 11852  002DFA  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 11853                           
 11854                           ;main.c: 415: seconds = 0;
 11855  002DFC  6B6A               	clrf	_seconds& (0+255),b
 11856                           
 11857                           ;main.c: 416: minutes = 0;
 11858  002DFE  6B69               	clrf	_minutes& (0+255),b
 11859                           
 11860                           ;main.c: 417: hours = 0;
 11861  002E00  6B68               	clrf	_hours& (0+255),b
 11862                           
 11863                           ; BSR set to: 0
 11864  002E02  0012               	return	
 11865  002E04                     __end_of_init_app_ram:
 11866                           	opt stack 0
 11867                           tblptru	equ	0xFF8
 11868                           tblptrh	equ	0xFF7
 11869                           tblptrl	equ	0xFF6
 11870                           tablat	equ	0xFF5
 11871                           prodh	equ	0xFF4
 11872                           prodl	equ	0xFF3
 11873                           intcon	equ	0xFF2
 11874                           postinc0	equ	0xFEE
 11875                           wreg	equ	0xFE8
 11876                           indf1	equ	0xFE7
 11877                           fsr1h	equ	0xFE2
 11878                           fsr1l	equ	0xFE1
 11879                           indf2	equ	0xFDF
 11880                           postinc2	equ	0xFDE
 11881                           postdec2	equ	0xFDD
 11882                           plusw2	equ	0xFDB
 11883                           fsr2h	equ	0xFDA
 11884                           fsr2l	equ	0xFD9
 11885                           status	equ	0xFD8
 11886                           
 11887 ;; *************** function _WriteTimer0 *****************
 11888 ;; Defined at:
 11889 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;  timer0          2    7[COMRAM] unsigned int 
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;  timer           2    9[COMRAM] struct Timers
 11894 ;; Return value:  Size  Location     Type
 11895 ;;		None               void
 11896 ;; Registers used:
 11897 ;;		None
 11898 ;; Tracked objects:
 11899 ;;		On entry : F/F
 11900 ;;		On exit  : F/F
 11901 ;;		Unchanged: E/0
 11902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11904 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11906 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11907 ;;Total ram usage:        4 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    2
 11910 ;; This function calls:
 11911 ;;		Nothing
 11912 ;; This function is called by:
 11913 ;;		_init
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           	psect	text71
 11918  002E04                     __ptext71:
 11919                           	opt stack 0
 11920  002E04                     _WriteTimer0:
 11921                           	opt stack 27
 11922                           
 11923                           ; BSR set to: 15
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;incstack = 0
 11927                           ;incstack = 0
 11928  002E04  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 11929  002E08  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 11930  002E0C  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 11931  002E10  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 11932                           
 11933                           ; BSR set to: 15
 11934  002E14  0012               	return	
 11935  002E16                     __end_of_WriteTimer0:
 11936                           	opt stack 0
 11937                           tblptru	equ	0xFF8
 11938                           tblptrh	equ	0xFF7
 11939                           tblptrl	equ	0xFF6
 11940                           tablat	equ	0xFF5
 11941                           prodh	equ	0xFF4
 11942                           prodl	equ	0xFF3
 11943                           intcon	equ	0xFF2
 11944                           postinc0	equ	0xFEE
 11945                           wreg	equ	0xFE8
 11946                           indf1	equ	0xFE7
 11947                           fsr1h	equ	0xFE2
 11948                           fsr1l	equ	0xFE1
 11949                           indf2	equ	0xFDF
 11950                           postinc2	equ	0xFDE
 11951                           postdec2	equ	0xFDD
 11952                           plusw2	equ	0xFDB
 11953                           fsr2h	equ	0xFDA
 11954                           fsr2l	equ	0xFD9
 11955                           status	equ	0xFD8
 11956                           
 11957 ;; *************** function _readControlReg *****************
 11958 ;; Defined at:
 11959 ;;		line 751 in file "../main.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;  ctrlreg         1    wreg     unsigned char 
 11962 ;; Auto vars:     Size  Location     Type
 11963 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 11964 ;;  rv              1   15[COMRAM] unsigned char 
 11965 ;; Return value:  Size  Location     Type
 11966 ;;                  1    wreg      unsigned char 
 11967 ;; Registers used:
 11968 ;;		wreg, status,2, status,0, prodl, prodh
 11969 ;; Tracked objects:
 11970 ;;		On entry : 0/0
 11971 ;;		On exit  : 0/0
 11972 ;;		Unchanged: 0/0
 11973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11976 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11977 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11978 ;;Total ram usage:        9 bytes
 11979 ;; Hardware stack levels used:    1
 11980 ;; Hardware stack levels required when called:    2
 11981 ;; This function calls:
 11982 ;;		Nothing
 11983 ;; This function is called by:
 11984 ;;		_vscp_readAppReg
 11985 ;;		_writeControlReg
 11986 ;; This function uses a non-reentrant model
 11987 ;;
 11988                           
 11989                           	psect	text72
 11990  0022CC                     __ptext72:
 11991                           	opt stack 0
 11992  0022CC                     _readControlReg:
 11993                           	opt stack 24
 11994                           
 11995                           ; BSR set to: 15
 11996                           ;incstack = 0
 11997                           ;incstack = 0
 11998                           ;readControlReg@ctrlreg stored from wreg
 11999  0022CC  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 12000                           
 12001                           ;main.c: 752: uint8_t rv = 0;
 12002  0022D0  6A10               	clrf	readControlReg@rv,c
 12003                           
 12004                           ;main.c: 754: switch ( ctrlreg ) {
 12005  0022D2  D060               	goto	l4617
 12006  0022D4                     l4609:
 12007                           
 12008                           ;main.c: 757: rv = ( PORTCbits.RC7 << 0 ) +
 12009                           ;main.c: 758: ( PORTCbits.RC6 << 1 ) +
 12010                           ;main.c: 759: ( PORTCbits.RC3 << 2 ) +
 12011                           ;main.c: 760: ( PORTCbits.RC4 << 3 ) +
 12012                           ;main.c: 761: ( PORTCbits.RC5 << 4 ) +
 12013                           ;main.c: 762: ( PORTAbits.RA0 << 5 ) +
 12014                           ;main.c: 763: ( PORTAbits.RA1 << 6 ) +
 12015                           ;main.c: 764: ( PORTAbits.RA2 << 7 );
 12016  0022D4  3482               	rlcf	3970,w,c	;volatile
 12017  0022D6  36E8               	rlcf	wreg,f,c
 12018  0022D8  0B01               	andlw	1
 12019  0022DA  6E08               	movwf	??_readControlReg& (0+255),c
 12020  0022DC  3882               	swapf	3970,w,c	;volatile
 12021  0022DE  32E8               	rrcf	wreg,f,c
 12022  0022E0  32E8               	rrcf	wreg,f,c
 12023  0022E2  0B01               	andlw	1
 12024  0022E4  0D02               	mullw	2
 12025  0022E6  CFF3 F009          	movff	prodl,??_readControlReg+1
 12026  0022EA  3082               	rrcf	3970,w,c	;volatile
 12027  0022EC  32E8               	rrcf	wreg,f,c
 12028  0022EE  32E8               	rrcf	wreg,f,c
 12029  0022F0  0B01               	andlw	1
 12030  0022F2  0D04               	mullw	4
 12031  0022F4  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12032  0022F8  3882               	swapf	3970,w,c	;volatile
 12033  0022FA  0B01               	andlw	1
 12034  0022FC  0D08               	mullw	8
 12035  0022FE  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12036  002302  3882               	swapf	3970,w,c	;volatile
 12037  002304  32E8               	rrcf	wreg,f,c
 12038  002306  0B01               	andlw	1
 12039  002308  0D10               	mullw	16
 12040  00230A  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12041  00230E  5080               	movf	3968,w,c	;volatile
 12042  002310  0B01               	andlw	1
 12043  002312  0D20               	mullw	32
 12044  002314  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12045  002318  3080               	rrcf	3968,w,c	;volatile
 12046  00231A  0B01               	andlw	1
 12047  00231C  0D40               	mullw	64
 12048  00231E  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12049  002322  3080               	rrcf	3968,w,c	;volatile
 12050  002324  32E8               	rrcf	wreg,f,c
 12051  002326  0B01               	andlw	1
 12052  002328  0D80               	mullw	128
 12053  00232A  50F3               	movf	prodl,w,c
 12054  00232C  240E               	addwf	??_readControlReg+6,w,c
 12055  00232E  240D               	addwf	??_readControlReg+5,w,c
 12056  002330  D01F               	goto	L42
 12057  002332                     l4611:
 12058                           
 12059                           ;main.c: 768: rv = ( PORTAbits.RA3 << 0 ) +
 12060                           ;main.c: 769: ( PORTAbits.RA5 << 1 ) +
 12061                           ;main.c: 772: ( PORTBbits.RB4 << 4 ) +
 12062                           ;main.c: 773: ( PORTCbits.RC2 << 5 ) +
 12063                           ;main.c: 774: ( PORTBbits.RB1 << 6 ) +
 12064                           ;main.c: 775: ( PORTBbits.RB0 << 7 );
 12065  002332  3080               	rrcf	3968,w,c	;volatile
 12066  002334  32E8               	rrcf	wreg,f,c
 12067  002336  32E8               	rrcf	wreg,f,c
 12068  002338  0B01               	andlw	1
 12069  00233A  6E08               	movwf	??_readControlReg& (0+255),c
 12070  00233C  3880               	swapf	3968,w,c	;volatile
 12071  00233E  32E8               	rrcf	wreg,f,c
 12072  002340  0B01               	andlw	1
 12073  002342  0D02               	mullw	2
 12074  002344  CFF3 F009          	movff	prodl,??_readControlReg+1
 12075  002348  3881               	swapf	3969,w,c	;volatile
 12076  00234A  0B01               	andlw	1
 12077  00234C  0D10               	mullw	16
 12078  00234E  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12079  002352  3082               	rrcf	3970,w,c	;volatile
 12080  002354  32E8               	rrcf	wreg,f,c
 12081  002356  0B01               	andlw	1
 12082  002358  0D20               	mullw	32
 12083  00235A  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12084  00235E  3081               	rrcf	3969,w,c	;volatile
 12085  002360  0B01               	andlw	1
 12086  002362  0D40               	mullw	64
 12087  002364  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12088  002368  5081               	movf	3969,w,c	;volatile
 12089  00236A  0B01               	andlw	1
 12090  00236C  0D80               	mullw	128
 12091  00236E  50F3               	movf	prodl,w,c
 12092  002370                     L42:
 12093  002370  240C               	addwf	??_readControlReg+4,w,c
 12094  002372  240B               	addwf	??_readControlReg+3,w,c
 12095  002374  240A               	addwf	??_readControlReg+2,w,c
 12096  002376  2409               	addwf	??_readControlReg+1,w,c
 12097  002378  D00A               	goto	L43
 12098  00237A                     l4613:
 12099                           
 12100                           ;main.c: 779: rv = ( PORTBbits.RB6 << 0 ) +
 12101                           ;main.c: 780: ( PORTBbits.RB5 << 1 );
 12102  00237A  3881               	swapf	3969,w,c	;volatile
 12103  00237C  32E8               	rrcf	wreg,f,c
 12104  00237E  32E8               	rrcf	wreg,f,c
 12105  002380  0B01               	andlw	1
 12106  002382  6E08               	movwf	??_readControlReg& (0+255),c
 12107  002384  3881               	swapf	3969,w,c	;volatile
 12108  002386  32E8               	rrcf	wreg,f,c
 12109  002388  0B01               	andlw	1
 12110  00238A  0D02               	mullw	2
 12111  00238C  50F3               	movf	prodl,w,c
 12112  00238E                     L43:
 12113  00238E  2408               	addwf	??_readControlReg,w,c
 12114  002390  6E10               	movwf	readControlReg@rv,c
 12115                           
 12116                           ;main.c: 781: break;
 12117  002392  D006               	goto	l4619
 12118  002394                     l4617:
 12119  002394  500F               	movf	readControlReg@ctrlreg,w,c
 12120                           
 12121                           ; Switch size 1, requested type "space"
 12122                           ; Number of cases is 3, Range of values is 0 to 2
 12123                           ; switch strategies available:
 12124                           ; Name         Instructions Cycles
 12125                           ; simple_byte           10     6 (average)
 12126                           ;	Chosen strategy is simple_byte
 12127  002396  E09E               	bz	l4609
 12128  002398  0A01               	xorlw	1	; case 1
 12129  00239A  E0CB               	bz	l4611
 12130  00239C  0A03               	xorlw	3	; case 2
 12131  00239E  E0ED               	bz	l4613
 12132  0023A0                     l4619:
 12133                           
 12134                           ;main.c: 784: return rv;
 12135  0023A0  5010               	movf	readControlReg@rv,w,c
 12136  0023A2  0012               	return	
 12137  0023A4                     __end_of_readControlReg:
 12138                           	opt stack 0
 12139                           tblptru	equ	0xFF8
 12140                           tblptrh	equ	0xFF7
 12141                           tblptrl	equ	0xFF6
 12142                           tablat	equ	0xFF5
 12143                           prodh	equ	0xFF4
 12144                           prodl	equ	0xFF3
 12145                           intcon	equ	0xFF2
 12146                           postinc0	equ	0xFEE
 12147                           wreg	equ	0xFE8
 12148                           indf1	equ	0xFE7
 12149                           fsr1h	equ	0xFE2
 12150                           fsr1l	equ	0xFE1
 12151                           indf2	equ	0xFDF
 12152                           postinc2	equ	0xFDE
 12153                           postdec2	equ	0xFDD
 12154                           plusw2	equ	0xFDB
 12155                           fsr2h	equ	0xFDA
 12156                           fsr2l	equ	0xFD9
 12157                           status	equ	0xFD8
 12158                           
 12159 ;; *************** function _vscp_readAppReg *****************
 12160 ;; Defined at:
 12161 ;;		line 586 in file "../main.c"
 12162 ;; Parameters:    Size  Location     Type
 12163 ;;  reg             1    wreg     unsigned char 
 12164 ;; Auto vars:     Size  Location     Type
 12165 ;;  reg             1   17[COMRAM] unsigned char 
 12166 ;;  rv              1   16[COMRAM] unsigned char 
 12167 ;; Return value:  Size  Location     Type
 12168 ;;                  1    wreg      unsigned char 
 12169 ;; Registers used:
 12170 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12171 ;; Tracked objects:
 12172 ;;		On entry : F/0
 12173 ;;		On exit  : 0/0
 12174 ;;		Unchanged: 0/0
 12175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12179 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12180 ;;Total ram usage:        2 bytes
 12181 ;; Hardware stack levels used:    1
 12182 ;; Hardware stack levels required when called:    3
 12183 ;; This function calls:
 12184 ;;		_readEEPROM
 12185 ;;		_readControlReg
 12186 ;; This function is called by:
 12187 ;;		_vscp_readRegister
 12188 ;;		_vscp_handleProtocolEvent
 12189 ;; This function uses a non-reentrant model
 12190 ;;
 12191                           
 12192                           	psect	text73
 12193  002728                     __ptext73:
 12194                           	opt stack 0
 12195  002728                     _vscp_readAppReg:
 12196                           	opt stack 25
 12197                           
 12198                           ;incstack = 0
 12199                           ;incstack = 0
 12200                           ;vscp_readAppReg@reg stored from wreg
 12201  002728  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;main.c: 587: uint8_t rv;
 12205                           ;main.c: 589: rv = 0x00;
 12206  00272C  6A11               	clrf	vscp_readAppReg@rv,c
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;main.c: 592: if ( 0 == vscp_page_select ) {
 12210  00272E  504F               	movf	_vscp_page_select+1,w,c
 12211  002730  104E               	iorwf	_vscp_page_select,w,c
 12212  002732  E137               	bnz	l4597
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;main.c: 594: if ( reg == 0x00 ) {
 12216  002734  6612               	tstfsz	vscp_readAppReg@reg,c
 12217  002736  D006               	goto	l4573
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;main.c: 595: rv = readEEPROM(0x21 + 0);
 12221  002738  6A09               	clrf	?_readEEPROM+1,c
 12222  00273A  0E21               	movlw	33
 12223  00273C  6E08               	movwf	?_readEEPROM,c
 12224  00273E  ECD5  F016         	call	_readEEPROM	;wreg free
 12225  002742  D03D               	goto	L44
 12226  002744                     l4573:
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;main.c: 598: else if ( reg == 0x01 ) {
 12230  002744  0412               	decf	vscp_readAppReg@reg,w,c
 12231  002746  E106               	bnz	l4577
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;main.c: 599: rv = readEEPROM(0x21 + 1);
 12235  002748  6A09               	clrf	?_readEEPROM+1,c
 12236  00274A  0E22               	movlw	34
 12237  00274C  6E08               	movwf	?_readEEPROM,c
 12238  00274E  ECD5  F016         	call	_readEEPROM	;wreg free
 12239  002752  D035               	goto	L44
 12240  002754                     l4577:
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;main.c: 602: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12244  002754  0E04               	movlw	4
 12245  002756  6412               	cpfsgt	vscp_readAppReg@reg,c
 12246  002758  D00C               	goto	l4583
 12247                           
 12248                           ; BSR set to: 0
 12249  00275A  0E17               	movlw	23
 12250  00275C  6012               	cpfslt	vscp_readAppReg@reg,c
 12251  00275E  D009               	goto	l4583
 12252                           
 12253                           ; BSR set to: 0
 12254                           ;main.c: 603: rv = readEEPROM( 0x21 + 5 +
 12255                           ;main.c: 604: ( reg - 5 ) );
 12256  002760  0E21               	movlw	33
 12257  002762  2412               	addwf	vscp_readAppReg@reg,w,c
 12258  002764  6E08               	movwf	?_readEEPROM,c
 12259  002766  6A09               	clrf	?_readEEPROM+1,c
 12260  002768  0E00               	movlw	0
 12261  00276A  2209               	addwfc	?_readEEPROM+1,f,c
 12262  00276C  ECD5  F016         	call	_readEEPROM	;wreg free
 12263  002770  D026               	goto	L44
 12264  002772                     l4583:
 12265                           
 12266                           ; BSR set to: 0
 12267                           ;main.c: 607: else if ( reg == 2 ) {
 12268  002772  5012               	movf	vscp_readAppReg@reg,w,c
 12269  002774  0A02               	xorlw	2
 12270  002776  E104               	bnz	l4587
 12271                           
 12272                           ; BSR set to: 0
 12273                           ;main.c: 608: rv = readControlReg( 0 );
 12274  002778  0E00               	movlw	0
 12275  00277A  EC66  F011         	call	_readControlReg
 12276  00277E  D01F               	goto	L44
 12277  002780                     l4587:
 12278                           
 12279                           ; BSR set to: 0
 12280                           ;main.c: 611: else if ( reg == 3 ) {
 12281  002780  5012               	movf	vscp_readAppReg@reg,w,c
 12282  002782  0A03               	xorlw	3
 12283  002784  E104               	bnz	l4591
 12284                           
 12285                           ; BSR set to: 0
 12286                           ;main.c: 612: rv = readControlReg( 1 );
 12287  002786  0E01               	movlw	1
 12288  002788  EC66  F011         	call	_readControlReg
 12289  00278C  D018               	goto	L44
 12290  00278E                     l4591:
 12291                           
 12292                           ; BSR set to: 0
 12293                           ;main.c: 615: else if ( reg == 4 ) {
 12294  00278E  5012               	movf	vscp_readAppReg@reg,w,c
 12295  002790  0A04               	xorlw	4
 12296  002792  E116               	bnz	l4603
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;main.c: 616: rv = readControlReg( 2 );
 12300  002794  0E02               	movlw	2
 12301  002796  EC66  F011         	call	_readControlReg
 12302  00279A  6E11               	movwf	vscp_readAppReg@rv,c
 12303                           
 12304                           ;main.c: 617: rv &= 0x03;
 12305  00279C  0E03               	movlw	3
 12306  00279E  1611               	andwf	vscp_readAppReg@rv,f,c
 12307  0027A0  D00F               	goto	l4603
 12308  0027A2                     l4597:
 12309                           
 12310                           ; BSR set to: 0
 12311                           ;main.c: 621: else if ( 1 == vscp_page_select ) {
 12312  0027A2  044E               	decf	_vscp_page_select,w,c
 12313  0027A4  104F               	iorwf	_vscp_page_select+1,w,c
 12314  0027A6  E10C               	bnz	l4603
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;main.c: 624: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12318                           ;main.c: 625: ( 8 * 8 ) ) ) ) {
 12319  0027A8  0E41               	movlw	65
 12320  0027AA  6012               	cpfslt	vscp_readAppReg@reg,c
 12321  0027AC  D009               	goto	l4603
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;main.c: 626: rv = readEEPROM(0x21 + 0x21 +
 12325                           ;main.c: 627: 23 + ( reg - 0 ) );
 12326  0027AE  0E59               	movlw	89
 12327  0027B0  2412               	addwf	vscp_readAppReg@reg,w,c
 12328  0027B2  6E08               	movwf	?_readEEPROM,c
 12329  0027B4  6A09               	clrf	?_readEEPROM+1,c
 12330  0027B6  0E00               	movlw	0
 12331  0027B8  2209               	addwfc	?_readEEPROM+1,f,c
 12332  0027BA  ECD5  F016         	call	_readEEPROM	;wreg free
 12333  0027BE                     L44:
 12334  0027BE  6E11               	movwf	vscp_readAppReg@rv,c
 12335  0027C0                     l4603:
 12336                           
 12337                           ;main.c: 628: }
 12338                           ;main.c: 630: }
 12339                           ;main.c: 632: return rv;
 12340  0027C0  5011               	movf	vscp_readAppReg@rv,w,c
 12341  0027C2  0012               	return	
 12342  0027C4                     __end_of_vscp_readAppReg:
 12343                           	opt stack 0
 12344                           tblptru	equ	0xFF8
 12345                           tblptrh	equ	0xFF7
 12346                           tblptrl	equ	0xFF6
 12347                           tablat	equ	0xFF5
 12348                           prodh	equ	0xFF4
 12349                           prodl	equ	0xFF3
 12350                           intcon	equ	0xFF2
 12351                           postinc0	equ	0xFEE
 12352                           wreg	equ	0xFE8
 12353                           indf1	equ	0xFE7
 12354                           fsr1h	equ	0xFE2
 12355                           fsr1l	equ	0xFE1
 12356                           indf2	equ	0xFDF
 12357                           postinc2	equ	0xFDE
 12358                           postdec2	equ	0xFDD
 12359                           plusw2	equ	0xFDB
 12360                           fsr2h	equ	0xFDA
 12361                           fsr2l	equ	0xFD9
 12362                           status	equ	0xFD8
 12363                           
 12364 ;; *************** function _interrupt_at_low_vector *****************
 12365 ;; Defined at:
 12366 ;;		line 111 in file "../main.c"
 12367 ;; Parameters:    Size  Location     Type
 12368 ;;		None
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;		None
 12371 ;; Return value:  Size  Location     Type
 12372 ;;		None               void
 12373 ;; Registers used:
 12374 ;;		wreg, status,2, status,0, cstack
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12382 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12383 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12384 ;;Total ram usage:        3 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    1
 12387 ;; This function calls:
 12388 ;;		i1_WriteTimer0
 12389 ;; This function is called by:
 12390 ;;		Interrupt level 1
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           	psect	intcodelo
 12395  000018                     __pintcodelo:
 12396                           	opt stack 0
 12397  000018                     _interrupt_at_low_vector:
 12398                           	opt stack 22
 12399                           
 12400                           ;incstack = 0
 12401  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12402  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12403  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12404  000024                     
 12405                           ;main.c: 113: if ( INTCONbits.TMR0IF ) {
 12406  000024  A4F2               	btfss	intcon,2,c	;volatile
 12407  000026  D001               	goto	i1u534_21
 12408  000028  D001               	goto	i1u534_20
 12409  00002A                     i1u534_21:
 12410  00002A  D03E               	goto	i1l141
 12411  00002C                     i1u534_20:
 12412  00002C                     
 12413                           ;main.c: 116: WriteTimer0(0xfb1d);
 12414  00002C  0EFB               	movlw	251
 12415  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 12416  000030  0E1D               	movlw	29
 12417  000032  6E01               	movwf	?i1_WriteTimer0,c
 12418  000034  EC0B  F017         	call	i1_WriteTimer0	;wreg free
 12419  000038                     
 12420                           ;main.c: 118: vscp_timer++;
 12421  000038  0100               	movlb	0	; () banked
 12422  00003A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12423  00003C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12424  00003E                     
 12425                           ; BSR set to: 0
 12426                           ;main.c: 119: vscp_configtimer++;
 12427  00003E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12428  000040  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12429  000042                     
 12430                           ; BSR set to: 0
 12431                           ;main.c: 120: measurement_clock++;
 12432  000042  0E01               	movlw	1
 12433  000044  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12434  000046  0E00               	movlw	0
 12435  000048  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12436  00004A  0E00               	movlw	0
 12437  00004C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12438  00004E  0E00               	movlw	0
 12439  000050  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12440  000052                     
 12441                           ; BSR set to: 0
 12442                           ;main.c: 123: if ( PORTCbits.RC0 ) {
 12443  000052  A082               	btfss	3970,0,c	;volatile
 12444  000054  D001               	goto	i1u535_21
 12445  000056  D001               	goto	i1u535_20
 12446  000058                     i1u535_21:
 12447  000058  D002               	goto	i1l5415
 12448  00005A                     i1u535_20:
 12449  00005A                     
 12450                           ; BSR set to: 0
 12451                           ;main.c: 124: vscp_initbtncnt = 0;
 12452  00005A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12453                           
 12454                           ;main.c: 125: } else {
 12455  00005C  D001               	goto	i1l133
 12456  00005E                     i1l5415:
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;main.c: 127: vscp_initbtncnt++;
 12460  00005E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12461  000060                     i1l133:
 12462                           
 12463                           ; BSR set to: 0
 12464                           ;main.c: 128: }
 12465                           ;main.c: 131: vscp_statuscnt++;
 12466  000060  2A54               	incf	_vscp_statuscnt,f,c	;volatile
 12467  000062                     
 12468                           ; BSR set to: 0
 12469                           ;main.c: 132: if ( ( 0x02 == vscp_initledfunc ) &&
 12470                           ;main.c: 133: ( vscp_statuscnt > 100 ) ) {
 12471  000062  5052               	movf	_vscp_initledfunc,w,c
 12472  000064  0A02               	xorlw	2
 12473  000066  A4D8               	btfss	status,2,c
 12474  000068  D001               	goto	i1u536_21
 12475  00006A  D001               	goto	i1u536_20
 12476  00006C                     i1u536_21:
 12477  00006C  D00E               	goto	i1l5425
 12478  00006E                     i1u536_20:
 12479  00006E                     
 12480                           ; BSR set to: 0
 12481  00006E  0E64               	movlw	100
 12482  000070  6454               	cpfsgt	_vscp_statuscnt,c	;volatile
 12483  000072  D001               	goto	i1u537_21
 12484  000074  D001               	goto	i1u537_20
 12485  000076                     i1u537_21:
 12486  000076  D009               	goto	i1l5425
 12487  000078                     i1u537_20:
 12488  000078                     
 12489                           ; BSR set to: 0
 12490                           ;main.c: 135: if ( PORTCbits.RC1 ) {
 12491  000078  A282               	btfss	3970,1,c	;volatile
 12492  00007A  D001               	goto	i1u538_21
 12493  00007C  D001               	goto	i1u538_20
 12494  00007E                     i1u538_21:
 12495  00007E  D002               	goto	i1l135
 12496  000080                     i1u538_20:
 12497  000080                     
 12498                           ; BSR set to: 0
 12499                           ;main.c: 136: PORTCbits.RC1 = 0;
 12500  000080  9282               	bcf	3970,1,c	;volatile
 12501                           
 12502                           ;main.c: 137: }
 12503  000082  D001               	goto	i1l136
 12504  000084                     i1l135:
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;main.c: 138: else {
 12508                           ;main.c: 139: PORTCbits.RC1 = 1;
 12509  000084  8282               	bsf	3970,1,c	;volatile
 12510  000086                     i1l136:
 12511                           
 12512                           ; BSR set to: 0
 12513                           ;main.c: 140: }
 12514                           ;main.c: 142: vscp_statuscnt = 0;
 12515  000086  6A54               	clrf	_vscp_statuscnt,c	;volatile
 12516                           
 12517                           ;main.c: 144: }
 12518  000088  D00E               	goto	i1l137
 12519  00008A                     i1l5425:
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;main.c: 145: else if (0x01 == vscp_initledfunc) {
 12523  00008A  0452               	decf	_vscp_initledfunc,w,c
 12524  00008C  A4D8               	btfss	status,2,c
 12525  00008E  D001               	goto	i1u539_21
 12526  000090  D001               	goto	i1u539_20
 12527  000092                     i1u539_21:
 12528  000092  D003               	goto	i1l138
 12529  000094                     i1u539_20:
 12530  000094                     
 12531                           ; BSR set to: 0
 12532                           ;main.c: 146: PORTCbits.RC1 = 1;
 12533  000094  8282               	bsf	3970,1,c	;volatile
 12534                           
 12535                           ;main.c: 147: vscp_statuscnt = 0;
 12536  000096  6A54               	clrf	_vscp_statuscnt,c	;volatile
 12537                           
 12538                           ;main.c: 148: }
 12539  000098  D006               	goto	i1l137
 12540  00009A                     i1l138:
 12541                           
 12542                           ; BSR set to: 0
 12543                           ;main.c: 149: else if (0x00 == vscp_initledfunc) {
 12544  00009A  6652               	tstfsz	_vscp_initledfunc,c
 12545  00009C  D001               	goto	i1u540_21
 12546  00009E  D001               	goto	i1u540_20
 12547  0000A0                     i1u540_21:
 12548  0000A0  D002               	goto	i1l137
 12549  0000A2                     i1u540_20:
 12550  0000A2                     
 12551                           ; BSR set to: 0
 12552                           ;main.c: 150: PORTCbits.RC1 = 0;
 12553  0000A2  9282               	bcf	3970,1,c	;volatile
 12554                           
 12555                           ;main.c: 151: vscp_statuscnt = 0;
 12556  0000A4  6A54               	clrf	_vscp_statuscnt,c	;volatile
 12557  0000A6                     i1l137:
 12558                           
 12559                           ; BSR set to: 0
 12560                           ;main.c: 152: }
 12561                           ;main.c: 154: INTCONbits.TMR0IF = 0;
 12562  0000A6  94F2               	bcf	intcon,2,c	;volatile
 12563  0000A8                     i1l141:
 12564  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 12565  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 12566  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 12567  0000B4  0010               	retfie	
 12568  0000B6                     __end_of_interrupt_at_low_vector:
 12569                           	opt stack 0
 12570                           tblptru	equ	0xFF8
 12571                           tblptrh	equ	0xFF7
 12572                           tblptrl	equ	0xFF6
 12573                           tablat	equ	0xFF5
 12574                           prodh	equ	0xFF4
 12575                           prodl	equ	0xFF3
 12576                           intcon	equ	0xFF2
 12577                           postinc0	equ	0xFEE
 12578                           wreg	equ	0xFE8
 12579                           indf1	equ	0xFE7
 12580                           fsr1h	equ	0xFE2
 12581                           fsr1l	equ	0xFE1
 12582                           bsr	equ	0xFE0
 12583                           indf2	equ	0xFDF
 12584                           postinc2	equ	0xFDE
 12585                           postdec2	equ	0xFDD
 12586                           plusw2	equ	0xFDB
 12587                           fsr2h	equ	0xFDA
 12588                           fsr2l	equ	0xFD9
 12589                           status	equ	0xFD8
 12590                           
 12591 ;; *************** function i1_WriteTimer0 *****************
 12592 ;; Defined at:
 12593 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12594 ;; Parameters:    Size  Location     Type
 12595 ;;  timer0          2    0[COMRAM] unsigned int 
 12596 ;; Auto vars:     Size  Location     Type
 12597 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 12598 ;; Return value:  Size  Location     Type
 12599 ;;		None               void
 12600 ;; Registers used:
 12601 ;;		None
 12602 ;; Tracked objects:
 12603 ;;		On entry : 0/0
 12604 ;;		On exit  : 0/0
 12605 ;;		Unchanged: 0/0
 12606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12610 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12611 ;;Total ram usage:        4 bytes
 12612 ;; Hardware stack levels used:    1
 12613 ;; This function calls:
 12614 ;;		Nothing
 12615 ;; This function is called by:
 12616 ;;		_interrupt_at_low_vector
 12617 ;; This function uses a non-reentrant model
 12618 ;;
 12619                           
 12620                           	psect	text75
 12621  002E16                     __ptext75:
 12622                           	opt stack 0
 12623  002E16                     i1_WriteTimer0:
 12624                           	opt stack 22
 12625                           
 12626                           ;incstack = 0
 12627                           ;incstack = 0
 12628  002E16  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 12629  002E1A  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 12630  002E1E  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 12631  002E22  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 12632  002E26  0012               	return	
 12633  002E28                     __end_ofi1_WriteTimer0:
 12634                           	opt stack 0
 12635                           tblptru	equ	0xFF8
 12636                           tblptrh	equ	0xFF7
 12637                           tblptrl	equ	0xFF6
 12638                           tablat	equ	0xFF5
 12639                           prodh	equ	0xFF4
 12640                           prodl	equ	0xFF3
 12641                           intcon	equ	0xFF2
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           indf1	equ	0xFE7
 12645                           fsr1h	equ	0xFE2
 12646                           fsr1l	equ	0xFE1
 12647                           bsr	equ	0xFE0
 12648                           indf2	equ	0xFDF
 12649                           postinc2	equ	0xFDE
 12650                           postdec2	equ	0xFDD
 12651                           plusw2	equ	0xFDB
 12652                           fsr2h	equ	0xFDA
 12653                           fsr2l	equ	0xFD9
 12654                           status	equ	0xFD8
 12655                           tblptru	equ	0xFF8
 12656                           tblptrh	equ	0xFF7
 12657                           tblptrl	equ	0xFF6
 12658                           tablat	equ	0xFF5
 12659                           prodh	equ	0xFF4
 12660                           prodl	equ	0xFF3
 12661                           intcon	equ	0xFF2
 12662                           postinc0	equ	0xFEE
 12663                           wreg	equ	0xFE8
 12664                           indf1	equ	0xFE7
 12665                           fsr1h	equ	0xFE2
 12666                           fsr1l	equ	0xFE1
 12667                           bsr	equ	0xFE0
 12668                           indf2	equ	0xFDF
 12669                           postinc2	equ	0xFDE
 12670                           postdec2	equ	0xFDD
 12671                           plusw2	equ	0xFDB
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676                           	psect	rparam
 12677  0000                     tblptru	equ	0xFF8
 12678                           tblptrh	equ	0xFF7
 12679                           tblptrl	equ	0xFF6
 12680                           tablat	equ	0xFF5
 12681                           prodh	equ	0xFF4
 12682                           prodl	equ	0xFF3
 12683                           intcon	equ	0xFF2
 12684                           postinc0	equ	0xFEE
 12685                           wreg	equ	0xFE8
 12686                           indf1	equ	0xFE7
 12687                           fsr1h	equ	0xFE2
 12688                           fsr1l	equ	0xFE1
 12689                           bsr	equ	0xFE0
 12690                           indf2	equ	0xFDF
 12691                           postinc2	equ	0xFDE
 12692                           postdec2	equ	0xFDD
 12693                           plusw2	equ	0xFDB
 12694                           fsr2h	equ	0xFDA
 12695                           fsr2l	equ	0xFD9
 12696                           status	equ	0xFD8
 12697                           tblptru	equ	0xFF8
 12698                           tblptrh	equ	0xFF7
 12699                           tblptrl	equ	0xFF6
 12700                           tablat	equ	0xFF5
 12701                           prodh	equ	0xFF4
 12702                           prodl	equ	0xFF3
 12703                           intcon	equ	0xFF2
 12704                           postinc0	equ	0xFEE
 12705                           wreg	equ	0xFE8
 12706                           indf1	equ	0xFE7
 12707                           fsr1h	equ	0xFE2
 12708                           fsr1l	equ	0xFE1
 12709                           bsr	equ	0xFE0
 12710                           indf2	equ	0xFDF
 12711                           postinc2	equ	0xFDE
 12712                           postdec2	equ	0xFDD
 12713                           plusw2	equ	0xFDB
 12714                           fsr2h	equ	0xFDA
 12715                           fsr2l	equ	0xFD9
 12716                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     77      84
    BANK0           160     47      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _main->_vscp_doOneSecondWork
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_actionSet
    _doDM->_actionClr
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_readEEPROM
    _actionSetAll->_readEEPROM
    _actionClr->_readEEPROM
    _actionSet->_readEEPROM
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28318
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _readEEPROM
                    _writeControlReg
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2398
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                13    13      0     916
                                             11 COMRAM    13    13      0
                         _readEEPROM
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         2     1      1       0
                                             10 COMRAM     1     0      1
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         2     1      1       0
                                             10 COMRAM     1     0      1
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1     112
                                             10 COMRAM     1     0      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1     112
                                             10 COMRAM     1     0      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   15282
                                             20 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    2569
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1385
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     270
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     270
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1074
                                             20 COMRAM     3     2      1
                         _readEEPROM
                    _writeControlReg
                        _writeEEPROM
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _readEEPROM (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1405
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0     995
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      67
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      67
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      67
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      45
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     178
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      45
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     177
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     243
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     344
                                             16 COMRAM     2     2      0
                         _readEEPROM
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _readEEPROM
   _writeControlReg
     _readEEPROM (ARG)
     _readControlReg (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
       _readControlReg
     _vscp_writeAppReg
       _readEEPROM
       _writeControlReg
         _readEEPROM (ARG)
         _readControlReg (ARG)
       _writeEEPROM
       _vscp_readAppReg (ARG)
         _readEEPROM
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _readEEPROM
         _writeControlReg
           _readEEPROM (ARG)
           _readControlReg (ARG)
         _writeEEPROM
         _vscp_readAppReg (ARG)
           _readEEPROM
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _doDM
     _readEEPROM
     _actionSet
       _readEEPROM
     _actionClr
       _readEEPROM
     _actionSetAll
       _readEEPROM (ARG)
     _actionClrAll
       _readEEPROM (ARG)
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2F      5F       5       59.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4D      54       1       88.4%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B3       6        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Apr 23 23:11:47 2015

                __end_of_vscp_readAppReg 27C4                    __end_of_sendVSCPFrame 267A  
                                     PL2 18BA                                       PL4 2062  
                                     PL6 18D2                                       PL8 1E32  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1A5E  
                                    PL10 2076                                      PL20 1E54  
                                    PL12 14CE                                      PL30 21B6  
                                    PL22 1E66                                      PL14 2086  
                                    PL40 1508                                      PL32 16F6  
                                    PL24 2098                                      PL16 1E40  
                                    PL34 14FA                                      PL26 1A5E  
                                    PL18 14E6                                      PL36 20AC  
                                    PL28 1E7A                                      PL38 1A72  
                                    l311 2534                                      l320 2554  
                                    l321 2558                                      l313 2538  
                                    l145 1EDA                                      l314 253C  
                                    l154 1F1E                                      l315 2540  
                                    l324 255C                                      l316 2544  
                                    l340 248C                                      l325 2560  
                                    l317 2548                                      l341 2490  
                                    l326 2564                                      l318 254C  
                                    l350 24AC                                      l342 2494  
                                    l158 1F38                                      l327 2568  
                                    l319 2550                                      l351 24B0  
                                    l343 2498                                      l328 256C  
                                    l352 24B4                                      l344 249C  
                                    l336 2480                                      l177 26E2  
                                    l329 2570                                      l353 24B8  
                                    l345 24A0                       vscp_readStdReg@idx 0019  
                                    l354 24BC                                      l346 24A4  
                                    l338 2484                                      l339 2488  
                                    l291 1766                                      l349 24A8  
                                    l710 28C8                                      l446 2A52  
                                    l640 1CF2                                      l289 174A  
                                    l651 154A                                      l661 1604  
                                    l670 15D2                                      l662 1594  
                                    l638 1CD4                                      l672 15E2  
                                    l664 15A2                                      l840 245A  
                                    l841 23E6                                      l825 29A8  
                                    l682 1668                                      l674 15F2  
                                    l666 15B2                                      l683 1682  
                                    l668 15C2                       vscp_readStdReg@reg 001C  
                                    l848 2448                                      l849 2428  
                                    l883 2AB4                                      l972 22C6  
         __size_of_vscp_handleProbeState 00BA                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2E6C            __end_of_vscp_handleProbeState 245E  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                                    wreg 000FE8                     __end_of_actionSetAll 2E74  
            ?_doApplicationOneSecondWork 0001                                     l1030 1258  
                                   l1006 10DC                                     l1031 126C  
                                   l1032 12A8                                     l1041 12E4  
                                   l1108 2CEC                                     l1109 2CEE  
                                   l1089 2BCC                                     l5101 2894  
                                   l5103 289E                                     l5007 1638  
                                   l5121 1DCC                                     l5033 16B0  
                                   l5041 16CA                                     l5025 1684  
                                   l5201 2D68                                     l5107 28AA  
                                   l5211 18F4                                     l6101 2A4E  
                                   l6021 1418                                     l5047 16E0  
                                   l5231 192A                                     l5223 1912  
                                   l5215 18FE                                     l5311 2CAC  
                                   l6121 1C6E                                     l6017 13F0  
                                   l6009 13D6                                     l4345 1710  
                                   l4603 27C0                                     l4611 2332  
                                   l5059 2D4C                                     l3731 2C66  
                                   l5091 2862                                     l6115 1C60  
                                   l5235 1936                                     l5227 191E  
                                   l5219 1908                                     l5323 21F0  
                                   l6043 146A                      vscp_readStdReg@code 0011  
                                   l4613 237A                                     l5093 286C  
                                   l6133 1C98                                     l5157 2A12  
                                   l5261 198A                                     l5253 1974  
                                   l5245 195C                                     l3805 1BF8  
                                   l4381 1848                                     l5095 2876  
                                   l6143 1CD8                                     l5239 1946  
                                   l3807 1C06                                     l4543 2C26  
                                   l5343 224A                                     l5335 222C  
                                   l4383 1860                                     l4367 1782  
                                   l4391 18B0                                     l6063 2968  
                                   l5511 1F54                                     l4609 22D4  
                                   l4617 2394                                     l5097 2880  
                                   l5089 285A                                     l5265 1996  
                                   l5257 197E                                     l5249 1968  
                                   l4633 2100                                     l3745 269A  
                                   l5345 224E                                     l5329 2210  
                                   l4705 24C0                                     l4385 1874  
                                   l6073 297A                                     l5505 1F32  
                                   l4619 23A0                                     l5099 288A  
                                   l6155 1D22                                     l6163 1D40  
                                   l6091 2678                                     l4651 2166  
                                   l3763 26E4                                     l5347 2264  
                                   l4379 1830                                     l5523 1F80  
                                   l4573 2744                                     l4805 28EA  
                                   l6149 1CF4                                     l6173 1D64  
                                   l5269 19A2                                     l4645 2146  
                                   l4629 20E2                                     l4549 2C06  
                                   l4389 1888                                     l6069 2972  
                                   l5509 1F3C                                     l4591 278E  
                                   l4583 2772                                     l6191 1FEE  
                                   l6175 1D66                                     l5295 1A4A  
                                   l5279 19EC                                     l3791 1A86  
                                   l4639 2126                                     l5367 22AC  
                                   l5359 2298                                     l5631 0F2C  
                                   l5535 1F94                vscp_getManufacturerId@idx 000B  
                                   l4577 2754                                     l4817 2B90  
                                   l6097 2A20                                     l5625 244C  
                                   l5289 1A34                                     l4665 21B2  
                                   l5377 22C8                                     l5393 2B36  
                                   l5385 2B20                                     l5801 11A6  
                                   l5633 0F30                                     l4587 2780  
                                   l5571 23CA                                     l5555 23A6  
                                   l5299 1A5A                                     l3795 1B3A  
                                   l4659 218C                                     l5803 11A8  
                                   l5723 100C                                     l5707 0FB2  
                                   l5635 0F34                                     l5539 1F9C  
                                   l5491 1F0E                                     l5483 1EFC  
                                   l5467 1EA0                                     l4597 27A2  
                                   l5813 11CC                                     l5805 11B2  
                                   l5733 1040                                     l5637 0F38  
                                   l4693 2574                                     l5493 1F12  
                                   l3799 1BC0                                     l5831 120C  
                                   l5743 1074                                     l5639 0F3C  
                                   l5495 1F18                                     l5487 1F04  
                                   l4945 1578                                     l4929 1538  
                                   l4953 1582                                     l5593 2404  
                                   l5569 23C4                                     l4769 2C46  
                                   l5913 12C4                                     l5753 10A8  
                                   l5673 0F80                                     l4939 1562  
                                   l5595 2408                                     l5819 11F8  
                                   l5771 110C                                     l5659 0F78  
                                   l5589 2400                                     l5909 12AA  
                                   l5781 116A                                     l5765 10E0  
                                   l5693 0FA6                                     l5935 12E6  
                                   l5863 124C                                     l5847 122C  
                                   l5775 1124                                     l5767 10FE  
                                   l5785 1180                                     l5971 1358  
                                   l5891 128C                                     l5883 126E  
                                   l4997 1618                                     l5949 130E  
                                   l5991 1388                                     l5967 1354  
                                   l5959 1332                                     l5895 1294  
                                   l5995 139E                                     l5987 1368  
                                   l5899 129C                                     l5999 13B6  
            __size_of_vscp_getMatrixInfo 0020                                     u5120 1A2C  
                                   u4260 293A                                     u5125 1A2A  
                                   u4265 2930                                     u5090 19E2  
                                   u4435 1540                           sendCANFrame@id 0037  
                                   u4437 1542                                     u5095 19E0  
                                   u6405 1FD8                                     u6415 1FF6  
                                   u6255 2602                                     u4755 1D94  
                                   u4765 1DA4                                     u4775 1DD0  
                                   u6395 1FC8                           sendCANFrame@rv 003E  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   _doDM 1704                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 1E8C  
                                   _init 2A5A                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 20B6  
                            _vscp_minute 006F                              _vscp_second 0074  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B6            __size_of_vscp_doOneSecondWork 0050  
                          __CFG_FOSC$HS2 000000                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0020                            __CFG_MCLRE$ON 000000  
                       _vscp_writeStdReg 21C6                              _writeEEPROM 2BB0  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 2946              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 0026                                    _B0CON 000E80  
                                  _B1CON 000E90                                    ?_doDM 0001  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000ED0               __end_of_vscp_goActiveState 2CD4  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 2E16  
                                  _EEADR 000F74                          __end_of___lbmod 2B3E  
                _vscp_handleDropNickname 2A90                                    _BSEL0 000E7D  
                                  _T0CON 000FD5                                    i1l133 0060  
                                  i1l141 00A8                                    i1l135 0084  
                                  i1l136 0086                                    i1l137 00A6  
                                  i1l138 009A                          sendCANFrame@dlc 003B  
                                  _MSEL0 000E79                                    _MSEL1 000E7A  
                                  _MSEL2 000E7B                                    _IRXIF 007BBF  
                       readControlReg@rv 0010                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 2E5A  
             _vscp_readNicknamePermanent 2E50                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                           _vscp_getGUID 2D96                                    doDM@i 0018  
                           _vscp_getZone 2E32                       vscp_writeAppReg@rv 0016  
                                  _hours 0068                _vscp_getRegisterPagesUsed 2E84  
                 __size_of_vscp_getEvent 002C                             _vscp_setGUID 2C1A  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 2E8A  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 2B64                     _ECANSetOperationMode 2D40  
                        __initialization 2C7A                             __end_of_doDM 18BA  
                           __end_of_main 1FA2                             __end_of_init 2A90  
                      ??_writeControlReg 0012                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0018                           doDM@class_mask 0011  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 000C                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 000F  
                                 ??_main 004E                                   ??_init 000C  
          __size_of_vscp_handleHeartbeat 0040                 ??_vscp_getManufacturerId 000B  
               ??_vscp_setManufacturerId 000C                 _vscp_handleProtocolEvent 0F22  
                          __activetblptr 000003                        __RegsToCANID@type 000B  
                         __CFG_PLLCFG$ON 000000                           __CFG_RETEN$OFF 000000  
             ECANReceiveMessage@msgFlags 0011                __size_of__ECANPointBuffer 007E  
                                 _B0TXEN 0073EA                                   _B1TXEN 0073EB  
                                 _B2TXEN 0073EC                                   _B3TXEN 0073ED  
                                 _B4TXEN 0073EE                                   _B5TXEN 0073EF  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000F73                                   _EECON2 000F7E  
                                 _ANCON0 000F5D                                   _ANCON1 000F5C  
                                 _CIOCON 000F70                            doDM@type_mask 0014  
                     vscp_writeStdReg@rv 0014                            ?_init_app_ram 0001  
                                 _MDSEL0 007B96                                   _MDSEL1 007B97  
                        __CFG_BBSIZ$BB2K 000000                                   i1l5401 0024  
                                 i1l5411 0052                                   i1l5403 002C  
                                 i1l5421 0078                                   i1l5413 005A  
                                 i1l5405 0038                                   i1l5423 0080  
                                 i1l5415 005E                                   i1l5407 003E  
                                 i1l5425 008A                                   i1l5417 0062  
                                 i1l5409 0042                                   i1l5427 0094  
                                 i1l5419 006E                                   i1l5429 00A2  
                             _OpenTimer0 2CD4                           __CFG_WDTEN$OFF 000000  
                        _init_app_eeprom 267A                                   _RXB0IF 007BB8  
                                 _RXB1IF 007BB9                                   _RXF1EN 007231  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 2AEC  
                 writeControlReg@ctrlreg 0013                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011                           __CFG_XINST$OFF 000000  
 vscp_handleProtocolEvent@page_save_1138 00AD                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 2AC0                                   _doWork 2E80  
                       OpenTimer0@config 0008                    __size_of_actionClrAll 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@reg 0017               __end_of_vscp_setSegmentCRC 2DE0  
                    vscp_writeAppReg@val 0015                                   clear_0 2C80  
                                 clear_1 2C8C                    __size_of_actionSetAll 0008  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00BB  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0070  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0008  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                             __accesstop 0060                  __end_of__initialization 2C92  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                           _actionClrAll 2E64                          writeEEPROM@data 000A  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 2C98  
              ??_interrupt_at_low_vector 0005                             _actionSetAll 2E6C  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 2C7A  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                     __size_of_actionClr 00B4                       __size_of_actionSet 00B4  
                    ?_vscp_writeRegister 0018                               __end_ofPL2 18D2  
                             __end_ofPL4 2076                               __end_ofPL6 18E0  
                             __end_ofPL8 1E40                           ??_sendCANFrame 003E  
             __end_of_vscp_getFamilyCode 2E50                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01E4                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 2E46          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0018          __size_of_vscp_setManufacturerId 0020  
               __end_of_vscp_writeAppReg 21B6                  __size_of_readControlReg 00D8  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 2728  
            __end_of_vscp_setControlByte 2DCE                 __end_of_vscp_writeStdReg 22CC  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0019  
        __end_of_vscp_handleDropNickname 2AC0                             _getVSCPFrame 28D2  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 2E88                    vscp_writeRegister@reg 0019  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 0008          __end_of_vscp_getSubMinorVersion 2E8C  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007407  
                                _B1RXFUL 007487                     __ECANRxFilterHitInfo 0050  
                                _B2RXFUL 007507                                  _B3RXFUL 007587  
                                _B4RXFUL 007607                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000B                                  _B5RXFUL 007687  
                       WriteTimer0@timer 000A                                  _ECANCON 000F72  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000E43  
                                _BRGCON2 000E44                                  _BRGCON3 000E45  
                    vscp_writeStdReg@reg 0015             __end_of_vscp_doOneSecondWork 2996  
                       __CFG_CANMX$PORTB 000000              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041          __end_of_interrupt_at_low_vector 00B6  
               vscp_readStdReg@code_1111 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 23A4                                  _RXB0CON 000F60  
                                _RXB1CON 000F30                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 2854               __end_of_vscp_getMatrixInfo 2C5A  
                                _TXB0CON 000F20                                  _TXB1CON 000F10  
                                _TXB2CON 000F00                                  _RXFCON0 000E46  
                                _RXFCON1 000E47                       _vscp_goActiveState 2CB6  
                      __end_of_actionClr 2512                        __end_of_actionSet 25C6  
                 __size_of_sendVSCPFrame 00B4             __end_of_vscp_getMajorVersion 2E90  
                      writeControlReg@rv 0014                          _writeControlReg 1A7E  
                     __size_of_vscp_init 0044                               _readEEPROM 2DAA  
                 _vscp_getManufacturerId 2D6E                   _vscp_setManufacturerId 2BFA  
                      actionSetAll@param 000B                          _ECANSendMessage 1C0A  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0072               __end_of_vscp_getSegmentCRC 2E64  
             ??_vscp_handleProtocolEvent 00A4                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 2E86                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 2B16                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 2E04  
                     _vscp_sendHeartBeat 2B3E                                  __pcinit 2C7A  
                         _vscp_deviceURL 0F00                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 1E8C  
                                __ptext1 2E80                                  __ptext2 2E82  
                                __ptext3 2946                                  __ptext4 2B3E  
                                __ptext5 2E28                                  __ptext6 2E32  
                                __ptext7 2E7C                                  __ptext8 1704  
                                __ptext9 2E64                           _vscp_getUserID 2D82  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00A4  
               ??_vscp_handleSetNickname 000C                                  _minutes 0069  
                                _seconds 006A                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 2E16                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00B1                     end_of_initialization 2C92  
           __end_of_vscp_handleHeartbeat 2A1A                 __size_of_vscp_getSubzone 000A  
                   __end_of_sendCANFrame 2A5A                vscp_handleProtocolEvent@i 00BD  
              vscp_handleProtocolEvent@j 00BE                vscp_handleProtocolEvent@k 00B8  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 2B64  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0090  
                         _vscp_setUserID 2D28                                  postinc0 000FEE  
                                postinc2 000FDE                         actionClr@dmflags 0001  
                 __end_of_vscp_deviceURL 0F20      __end_of_vscp_writeNicknamePermanent 2DF2  
            _vscp_writeNicknamePermanent 2DE0                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 25C6                   __end_of_vscp_getUserID 2D96  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0077CB  
                      __end_of_vscp_init 29DA                           _vscp_probe_cnt 0073  
                              _PORTAbits 000F80                                _PORTBbits 000F81  
                              _PORTCbits 000F82                      __end_of_getCANFrame 2BB0  
                         _readControlReg 22CC            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 009C  
                       ___lbmod@dividend 0009                  __end_of_writeControlReg 1C0A  
                         _vscp_statuscnt 0054                 __size_of_vscp_readStdReg 017E  
                     _vscp_setSegmentCRC 2DCE                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00B6                  __end_of_ECANSendMessage 1D6E  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 0017  
                   __end_of__RegsToCANID 1E32                              ?_readEEPROM 0008  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 2B8A  
                             _vscp_error 2E7C                     _vscp_doOneSecondWork 2946  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0066  
                 __end_of_vscp_setUserID 2D40                   vscp_sendHeartBeat@zone 004C  
                         ?_sendVSCPFrame 003F                     __size_of_writeEEPROM 0026  
                        ?_vscp_getUserID 0001                      actionSetAll@dmflags 0001  
                         __end_of_doWork 2E82             __end_of_vscp_getMinorVersion 2E8E  
                            _WriteTimer0 2E04                   __end_of_readControlReg 23A4  
                   _vscp_getMajorVersion 2E8E                     ??_vscp_setSegmentCRC 000B  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                            __end_ofPL10 2086                              __end_ofPL20 1E66  
                            __end_ofPL12 14E6                        ?_vscp_writeAppReg 0015  
                            __end_ofPL30 21C6                              __end_ofPL22 1E7A  
                            __end_ofPL14 2098                              __end_ofPL40 1512  
                            __end_ofPL32 1704                              __end_ofPL24 20AC  
                            __end_ofPL16 1E54                              __end_ofPL34 1508  
                            __end_ofPL26 1A72                              __end_ofPL18 14FA  
                            __end_ofPL36 20B6                              __end_ofPL28 1E8C  
                            __end_ofPL38 1A7E                      start_initialization 2C7A  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 0016  
                      ?_vscp_writeStdReg 000F              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0010  
                     _vscp_getFamilyCode 2E46                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 2E3C                         doDM@class_filter 000F  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 2D58  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00B5  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 14CE                          ?_vscp_setUserID 000B  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 0012  
                              _doDM$1984 0015                                _doDM$1985 0016  
               ?_vscp_handleDropNickname 0001                        ??_vscp_getSubzone 000B  
               __end_of__ECANPointBuffer 28D2                        __CANIDToRegs@type 000E  
                            _getCANFrame 2B8A                                 ??_doWork 0008  
                     _vscp_getBufferSize 2E86              vscp_handleProtocolEvent@len 00B2  
            vscp_handleProtocolEvent@pos 00B0               __end_of_ECANReceiveMessage 16F6  
                    ??_vscp_readRegister 001D           __size_of_vscp_goBootloaderMode 001A  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 2E28  
          __end_of_vscp_goBootloaderMode 2D28                          ?_readControlReg 0001  
                         actionClr@param 000B                     _vscp_handleHeartbeat 29DA  
                     __end_of_OpenTimer0 2CF2      __size_of_doApplicationOneSecondWork 0002  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
           __size_of_vscp_check_pstorage 0020                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 004E  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0090                         _vscp_alarmstatus 006B  
                       ?_writeControlReg 0011                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 001E                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 0011                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 2D6E                             _init_app_ram 2DF2  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              _actionClr 245E                                _actionSet 2512  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 2C3A  
                 _vscp_handleSetNickname 2BD6            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0090                           _ECANInitialize 27C4  
                               ?___lbmod 0008                           actionSet@param 000B  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 000B  
                            __pintcodelo 0018                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1128 00B4                  vscp_readStdReg@idx_1112 001A  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 2A1A  
                            __smallconst 0F00                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 2E5A                         actionSet@dmflags 0001  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
         __end_of_vscp_getManufacturerId 2D82           __end_of_vscp_setManufacturerId 2C1A  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1127 00B3  
                        doDM@type_filter 0013                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0064                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 2E8C  
                              _sendTimer 0051                               ?_actionClr 000B  
                             ?_actionSet 000B                   __end_of_ECANInitialize 2854  
                               i1u540_20 00A2                                 i1u540_21 00A0  
                               i1u534_20 002C                                 i1u534_21 002A  
                               i1u535_20 005A                                 i1u535_21 0058  
                               i1u536_20 006E                                 i1u536_21 006C  
                               i1u537_20 0078                                 i1u537_21 0076  
                               i1u538_20 0080                                 i1u538_21 007E  
                               i1u539_20 0094                                 i1u539_21 0092  
                               _PIR4bits 000FB7                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 2AEC  
                               _RXF0EIDH 000EE2                                 _RXF0EIDL 000EE3  
                               _RXB0OVFL 007B8F                                 _RXF1EIDH 000EE6  
                               _RXF1EIDL 000EE7                                 _RXB1OVFL 007B8E  
                               _RXF0SIDH 000EE0                                 _RXF0SIDL 000EE1  
                               _RXF1SIDH 000EE4                                 _RXF1SIDL 000EE5  
                               _RXM0EIDH 000EFA                                 _RXM0EIDL 000EFB  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000EFE  
                               _RXM1EIDL 000EFF                     ??_vscp_getSegmentCRC 000B  
                               _RXFBCON0 000E71                                 _RXFBCON1 000E72  
                               _RXFBCON2 000E73                                 _RXFBCON3 000E74  
                               _RXFBCON4 000E75                                 _RXFBCON5 000E76  
                               _RXFBCON6 000E77                                 _RXFBCON7 000E78  
                               _RXM0SIDH 000EF8                                 _RXM0SIDL 000EF9  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 2062                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1D6E                       _vscp_probe_address 0053  
            __size_of_vscp_goActiveState 001E                       writeControlReg@val 0011  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 2996  
                              _vscp_imsg 0075                                _vscp_hour 006D  
                              _vscp_omsg 0083                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 05AC                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001     __size_of_vscp_writeNicknamePermanent 0012  
     __end_of_doApplicationOneSecondWork 2E84               _doApplicationOneSecondWork 2E82  
                       _vscp_page_select 004E               __size_of_vscp_readRegister 0016  
                      _measurement_clock 0060                    ?_vscp_getMinorVersion 0001  
                           ??_readEEPROM 000A                 __size_of_init_app_eeprom 00AE  
                    actionClrAll@dmflags 0001             __end_of_vscp_restoreDefaults 2E7C  
                             _EECON1bits 000F7F                            ?_actionClrAll 000B  
                        ?_ECANInitialize 0001                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                          ?_actionSetAll 000B                         ??_vscp_getUserID 000B  
                        _vscp_getMDF_URL 2CF2                                 __Lrparam 0000  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                     __CFG_BOREN$SBORDIS 000000                         _vscp_initledfunc 0052  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000C  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                       __end_of_readEEPROM 2DBC  
                             ?_vscp_init 0001                                 __ptext10 2E6C  
                               __ptext11 245E                                 __ptext20 2BFA  
                               __ptext12 2512                                 __ptext21 2C1A  
                               __ptext13 0F22                                 __ptext30 2E88  
                               __ptext22 20B6                                 __ptext14 2B16  
                               __ptext31 2D6E                                 __ptext23 1A7E  
                               __ptext15 2C98                                 __ptext40 2A90  
                               __ptext32 2D82                                 __ptext24 2D58  
                               __ptext16 21C6                                 __ptext41 2996  
                               __ptext33 2CF2                                 __ptext25 18E0  
                               __ptext17 2E74                                 __ptext50 25C6  
                               __ptext42 2E50                                 __ptext34 2D96  
                               __ptext26 2E84                                 __ptext18 267A  
                               __ptext51 2A1A                                 __ptext43 2BD6  
                               __ptext35 2DAA                                 __ptext27 2E3C  
                               __ptext19 2D28                                 __ptext60 2C5A  
                               __ptext52 1C0A                                 __ptext44 29DA  
                               __ptext36 2E8A                                 __ptext28 2E46  
                               __ptext61 2DBC                                 __ptext53 1FA2  
                               __ptext45 2C3A                                 __ptext37 2E8C  
                               __ptext29 2E86                                 __ptext70 2DF2  
                               __ptext62 2DCE                                 __ptext54 2AC0  
                               __ptext46 2D0E                                 __ptext38 2E8E  
                               __ptext71 2E04                                 __ptext63 2E5A  
                               __ptext55 28D2                                 __ptext47 23A4  
                               __ptext39 2AEC                                 __ptext72 22CC  
                               __ptext64 2DE0                                 __ptext56 2B8A  
                               __ptext48 2CB6                                 __ptext73 2728  
                               __ptext65 2BB0                                 __ptext57 1512  
                               __ptext49 2B64                                 __ptext66 2A5A  
                               __ptext58 1D6E                                 __ptext75 2E16  
                               __ptext67 27C4                                 __ptext59 2854  
                               __ptext68 2D40                                 __ptext69 2CD4  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00A4  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 2E28                         ??_vscp_setUserID 000C  
                          __size_of_doDM 01B6                            __size_of_main 0116  
                          __size_of_init 0036                           ??_actionClrAll 000C  
                            ??_actionClr 000C                              ??_actionSet 000C  
              __size_of_vscp_writeAppReg 0100                      _vscp_check_pstorage 2C5A  
                         ??_actionSetAll 000C           vscp_handleProtocolEvent@i_1126 00BA  
         vscp_handleProtocolEvent@i_1129 00BC           vscp_handleProtocolEvent@i_1137 00B7  
                   __end_of_vscp_getGUID 2DAA                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                         ??_readControlReg 0008  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 2E3C                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 2C3A                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00AF  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000E  
                       init_app_eeprom@j 000D                      _vscp_setControlByte 2DBC  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 2728  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 006C                          _vscp_readStdReg 18E0  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 2B16  
                     _ECANReceiveMessage 1512                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 006E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 2D0E  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0071                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
                vscp_setControlByte@ctrl 000B                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000B                    __size_of__CANIDToRegs 00C0  
                         readEEPROM@data 000A                       __CFG_WDTPS$1048576 000000  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 2E8A  
            _vscp_getBootLoaderAlgorithm 2E88                    readControlReg@ctrlreg 000F  
       __size_of_interrupt_at_low_vector 009E                        actionClrAll@param 000B  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 2BD6  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2D0E             __end_of_ECANSetOperationMode 2D58  
                   _vscp_restoreDefaults 2E74              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 2E32  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2CB6                       __end_of_vscp_error 2E80  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2BFA  
     vscp_handleProtocolEvent@bytes_1134 00B9                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 1FA2                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00AB  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
