

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Jul 07 10:33:34 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91                           	psect	pa_nodes,global,class=CODE,delta=1
    92  0000                     tblptru	equ	0xFF8
    93                           tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           fsr1h	equ	0xFE2
   102                           fsr1l	equ	0xFE1
   103                           indf2	equ	0xFDF
   104                           postinc2	equ	0xFDE
   105                           postdec2	equ	0xFDD
   106                           plusw2	equ	0xFDB
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000F00                     __psmallconst:
   113                           	opt stack 0
   114  000F00                     _vscp_deviceURL:
   115                           	opt stack 0
   116  000F00  77                 	db	119
   117  000F01  77                 	db	119
   118  000F02  77                 	db	119
   119  000F03  2E                 	db	46
   120  000F04  65                 	db	101
   121  000F05  75                 	db	117
   122  000F06  72                 	db	114
   123  000F07  6F                 	db	111
   124  000F08  73                 	db	115
   125  000F09  6F                 	db	111
   126  000F0A  75                 	db	117
   127  000F0B  72                 	db	114
   128  000F0C  63                 	db	99
   129  000F0D  65                 	db	101
   130  000F0E  2E                 	db	46
   131  000F0F  73                 	db	115
   132  000F10  65                 	db	101
   133  000F11  2F                 	db	47
   134  000F12  6F                 	db	111
   135  000F13  64                 	db	100
   136  000F14  65                 	db	101
   137  000F15  73                 	db	115
   138  000F16  73                 	db	115
   139  000F17  61                 	db	97
   140  000F18  30                 	db	48
   141  000F19  30                 	db	48
   142  000F1A  31                 	db	49
   143  000F1B  2E                 	db	46
   144  000F1C  78                 	db	120
   145  000F1D  6D                 	db	109
   146  000F1E  6C                 	db	108
   147  000F1F  00                 	db	0
   148  000F20                     __end_of_vscp_deviceURL:
   149                           	opt stack 0
   150  0000                     _ANCON0	set	3933
   151  0000                     _ANCON1	set	3932
   152  0000                     _BRGCON1	set	3651
   153  0000                     _BRGCON2	set	3652
   154  0000                     _BRGCON3	set	3653
   155  0000                     _BSEL0	set	3709
   156  0000                     _CANCON	set	3951
   157  0000                     _CIOCON	set	3952
   158  0000                     _ECANCON	set	3954
   159  0000                     _EEADR	set	3956
   160  0000                     _EEADRH	set	3957
   161  0000                     _EECON1bits	set	3967
   162  0000                     _EECON2	set	3966
   163  0000                     _EEDATA	set	3955
   164  0000                     _INTCONbits	set	4082
   165  0000                     _MSEL0	set	3705
   166  0000                     _MSEL1	set	3706
   167  0000                     _MSEL2	set	3707
   168  0000                     _PORTA	set	3968
   169  0000                     _PORTAbits	set	3968
   170  0000                     _PORTB	set	3969
   171  0000                     _PORTBbits	set	3969
   172  0000                     _PORTC	set	3970
   173  0000                     _PORTCbits	set	3970
   174  0000                     _RXB1CONbits	set	3888
   175  0000                     _RXF0EIDH	set	3810
   176  0000                     _RXF0EIDL	set	3811
   177  0000                     _RXF0SIDH	set	3808
   178  0000                     _RXF0SIDL	set	3809
   179  0000                     _RXF1EIDH	set	3814
   180  0000                     _RXF1EIDL	set	3815
   181  0000                     _RXF1SIDL	set	3813
   182  0000                     _RXFBCON0	set	3697
   183  0000                     _RXFBCON1	set	3698
   184  0000                     _RXFBCON2	set	3699
   185  0000                     _RXFBCON3	set	3700
   186  0000                     _RXFBCON4	set	3701
   187  0000                     _RXFBCON5	set	3702
   188  0000                     _RXFBCON6	set	3703
   189  0000                     _RXFBCON7	set	3704
   190  0000                     _RXFCON0	set	3654
   191  0000                     _RXFCON1	set	3655
   192  0000                     _RXM0EIDH	set	3834
   193  0000                     _RXM0EIDL	set	3835
   194  0000                     _RXM0SIDH	set	3832
   195  0000                     _RXM0SIDL	set	3833
   196  0000                     _RXM1EIDH	set	3838
   197  0000                     _RXM1EIDL	set	3839
   198  0000                     _RXM1SIDL	set	3837
   199  0000                     _T0CON	set	4053
   200  0000                     _T0CONbits	set	4053
   201  0000                     _TMR0H	set	4055
   202  0000                     _TMR0L	set	4054
   203  0000                     _TRISA	set	3986
   204  0000                     _TRISB	set	3987
   205  0000                     _TRISC	set	3988
   206  0000                     _B0RXFUL	set	29703
   207  0000                     _B0TXEN	set	29674
   208  0000                     _B1RXFUL	set	29831
   209  0000                     _B1TXEN	set	29675
   210  0000                     _B2RXFUL	set	29959
   211  0000                     _B2TXEN	set	29676
   212  0000                     _B3RXFUL	set	30087
   213  0000                     _B3TXEN	set	29677
   214  0000                     _B4RXFUL	set	30215
   215  0000                     _B4TXEN	set	29678
   216  0000                     _B5RXFUL	set	30343
   217  0000                     _B5TXEN	set	29679
   218  0000                     _FIFOEMPTY	set	31631
   219  0000                     _IRXIF	set	31679
   220  0000                     _MDSEL0	set	31638
   221  0000                     _MDSEL1	set	31639
   222  0000                     _RXB0FILHIT0	set	31488
   223  0000                     _RXB0FUL	set	31495
   224  0000                     _RXB0IF	set	31672
   225  0000                     _RXB0OVFL	set	31631
   226  0000                     _RXB1IF	set	31673
   227  0000                     _RXB1OVFL	set	31630
   228  0000                     _RXF1EN	set	29233
   229  0000                     _RXM0EXIDM	set	30667
   230  0000                     _RXM1EXIDEN	set	30699
   231  0000                     _B0CON	set	3712
   232  0000                     _B1CON	set	3728
   233  0000                     _B2CON	set	3744
   234  0000                     _B3CON	set	3760
   235  0000                     _B4CON	set	3776
   236  0000                     _B5CON	set	3792
   237  0000                     _RXB0CON	set	3936
   238  0000                     _RXB1CON	set	3888
   239  0000                     _RXF1SIDH	set	3812
   240  0000                     _RXM1SIDH	set	3836
   241  0000                     _TXB0CON	set	3872
   242  0000                     _TXB1CON	set	3856
   243  0000                     _TXB2CON	set	3840
   244                           
   245                           ; #config settings
   246  000F20  00                 	db	0	; dummy byte at the end
   247  0000                     tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           prodh	equ	0xFF4
   252                           prodl	equ	0xFF3
   253                           intcon	equ	0xFF2
   254                           wreg	equ	0xFE8
   255                           indf1	equ	0xFE7
   256                           fsr1h	equ	0xFE2
   257                           fsr1l	equ	0xFE1
   258                           indf2	equ	0xFDF
   259                           postinc2	equ	0xFDE
   260                           postdec2	equ	0xFDD
   261                           plusw2	equ	0xFDB
   262                           fsr2h	equ	0xFDA
   263                           fsr2l	equ	0xFD9
   264                           status	equ	0xFD8
   265                           
   266                           	psect	cinit
   267  002DF6                     __pcinit:
   268                           	opt stack 0
   269  002DF6                     start_initialization:
   270                           	opt stack 0
   271  002DF6                     __initialization:
   272                           	opt stack 0
   273                           
   274                           ; Clear objects allocated to BANK0 (48 bytes)
   275  002DF6  EE00  F060         	lfsr	0,__pbssBANK0
   276  002DFA  0E30               	movlw	48
   277  002DFC                     clear_0:
   278  002DFC  6AEE               	clrf	postinc0,c
   279  002DFE  06E8               	decf	wreg,f,c
   280  002E00  E1FD               	bnz	clear_0
   281                           
   282                           ; Clear objects allocated to COMRAM (7 bytes)
   283  002E02  EE00  F052         	lfsr	0,__pbssCOMRAM
   284  002E06  0E07               	movlw	7
   285  002E08                     clear_1:
   286  002E08  6AEE               	clrf	postinc0,c
   287  002E0A  06E8               	decf	wreg,f,c
   288  002E0C  E1FD               	bnz	clear_1
   289  002E0E                     end_of_initialization:
   290                           	opt stack 0
   291  002E0E                     __end_of__initialization:
   292                           	opt stack 0
   293  002E0E  0100               	movlb	0
   294  002E10  EFFA  F00F         	goto	_main	;jump to C main() function
   295                           tblptru	equ	0xFF8
   296                           tblptrh	equ	0xFF7
   297                           tblptrl	equ	0xFF6
   298                           tablat	equ	0xFF5
   299                           prodh	equ	0xFF4
   300                           prodl	equ	0xFF3
   301                           intcon	equ	0xFF2
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           indf1	equ	0xFE7
   305                           fsr1h	equ	0xFE2
   306                           fsr1l	equ	0xFE1
   307                           indf2	equ	0xFDF
   308                           postinc2	equ	0xFDE
   309                           postdec2	equ	0xFDD
   310                           plusw2	equ	0xFDB
   311                           fsr2h	equ	0xFDA
   312                           fsr2l	equ	0xFD9
   313                           status	equ	0xFD8
   314                           
   315                           	psect	bssCOMRAM
   316  000052                     __pbssCOMRAM:
   317                           	opt stack 0
   318  000052                     _vscp_page_select:
   319                           	opt stack 0
   320  000052                     	ds	2
   321  000054                     __ECANRxFilterHitInfo:
   322                           	opt stack 0
   323  000054                     	ds	1
   324  000055                     _sendTimer:
   325                           	opt stack 0
   326  000055                     	ds	1
   327  000056                     _vscp_initledfunc:
   328                           	opt stack 0
   329  000056                     	ds	1
   330  000057                     _vscp_probe_address:
   331                           	opt stack 0
   332  000057                     	ds	1
   333  000058                     _vscp_statuscnt:
   334                           	opt stack 0
   335  000058                     	ds	1
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           prodh	equ	0xFF4
   341                           prodl	equ	0xFF3
   342                           intcon	equ	0xFF2
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           indf1	equ	0xFE7
   346                           fsr1h	equ	0xFE2
   347                           fsr1l	equ	0xFE1
   348                           indf2	equ	0xFDF
   349                           postinc2	equ	0xFDE
   350                           postdec2	equ	0xFDD
   351                           plusw2	equ	0xFDB
   352                           fsr2h	equ	0xFDA
   353                           fsr2l	equ	0xFD9
   354                           status	equ	0xFD8
   355                           
   356                           	psect	bssBANK0
   357  000060                     __pbssBANK0:
   358                           	opt stack 0
   359  000060                     _measurement_clock:
   360                           	opt stack 0
   361  000060                     	ds	4
   362  000064                     _vscp_configtimer:
   363                           	opt stack 0
   364  000064                     	ds	2
   365  000066                     _vscp_timer:
   366                           	opt stack 0
   367  000066                     	ds	2
   368  000068                     _hours:
   369                           	opt stack 0
   370  000068                     	ds	1
   371  000069                     _minutes:
   372                           	opt stack 0
   373  000069                     	ds	1
   374  00006A                     _seconds:
   375                           	opt stack 0
   376  00006A                     	ds	1
   377  00006B                     _vscp_alarmstatus:
   378                           	opt stack 0
   379  00006B                     	ds	1
   380  00006C                     _vscp_guid_reset:
   381                           	opt stack 0
   382  00006C                     	ds	1
   383  00006D                     _vscp_hour:
   384                           	opt stack 0
   385  00006D                     	ds	1
   386  00006E                     _vscp_initbtncnt:
   387                           	opt stack 0
   388  00006E                     	ds	1
   389  00006F                     _vscp_minute:
   390                           	opt stack 0
   391  00006F                     	ds	1
   392  000070                     _vscp_nickname:
   393                           	opt stack 0
   394  000070                     	ds	1
   395  000071                     _vscp_node_state:
   396                           	opt stack 0
   397  000071                     	ds	1
   398  000072                     _vscp_node_substate:
   399                           	opt stack 0
   400  000072                     	ds	1
   401  000073                     _vscp_probe_cnt:
   402                           	opt stack 0
   403  000073                     	ds	1
   404  000074                     _vscp_second:
   405                           	opt stack 0
   406  000074                     	ds	1
   407  000075                     _vscp_imsg:
   408                           	opt stack 0
   409  000075                     	ds	14
   410  000083                     _vscp_omsg:
   411                           	opt stack 0
   412  000083                     	ds	13
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           prodh	equ	0xFF4
   418                           prodl	equ	0xFF3
   419                           intcon	equ	0xFF2
   420                           postinc0	equ	0xFEE
   421                           wreg	equ	0xFE8
   422                           indf1	equ	0xFE7
   423                           fsr1h	equ	0xFE2
   424                           fsr1l	equ	0xFE1
   425                           indf2	equ	0xFDF
   426                           postinc2	equ	0xFDE
   427                           postdec2	equ	0xFDD
   428                           plusw2	equ	0xFDB
   429                           fsr2h	equ	0xFDA
   430                           fsr2l	equ	0xFD9
   431                           status	equ	0xFD8
   432                           
   433                           	psect	cstackBANK0
   434  000090                     __pcstackBANK0:
   435                           	opt stack 0
   436  000090                     ??_sendVSCPFrame:
   437                           
   438                           ; 0 bytes @ 0x0
   439  000090                     	ds	20
   440  0000A4                     ??_vscp_handleProtocolEvent:
   441  0000A4                     ?_SendInformationEvent:
   442                           	opt stack 0
   443  0000A4                     ?_vscp_sendHeartBeat:
   444                           	opt stack 0
   445  0000A4                     SendInformationEvent@eventClass:
   446                           	opt stack 0
   447  0000A4                     vscp_sendHeartBeat@subzone:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x14
   451  0000A4                     	ds	1
   452  0000A5                     SendInformationEvent@eventTypeId:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x15
   456  0000A5                     	ds	1
   457  0000A6                     ??_doDM:
   458                           
   459                           ; 0 bytes @ 0x16
   460  0000A6                     	ds	3
   461  0000A9                     doDM@class_filter:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x19
   465  0000A9                     	ds	2
   466  0000AB                     doDM@class_mask:
   467                           	opt stack 0
   468  0000AB                     vscp_handleProtocolEvent@page_save:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x1B
   472  0000AB                     	ds	2
   473  0000AD                     doDM@type_filter:
   474                           	opt stack 0
   475  0000AD                     vscp_handleProtocolEvent@page_save_1144:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x1D
   479  0000AD                     	ds	1
   480  0000AE                     doDM@type_mask:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x1E
   484  0000AE                     	ds	1
   485  0000AF                     vscp_handleProtocolEvent@offset:
   486                           	opt stack 0
   487  0000AF                     _doDM$1998:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x1F
   491  0000AF                     	ds	1
   492  0000B0                     vscp_handleProtocolEvent@pos:
   493                           	opt stack 0
   494  0000B0                     _doDM$1999:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x20
   498  0000B0                     	ds	1
   499  0000B1                     vscp_handleProtocolEvent@bytes:
   500                           	opt stack 0
   501  0000B1                     _doDM$2000:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x21
   505  0000B1                     	ds	1
   506  0000B2                     vscp_handleProtocolEvent@len:
   507                           	opt stack 0
   508  0000B2                     _doDM$2001:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x22
   512  0000B2                     	ds	1
   513  0000B3                     doDM@dmflags:
   514                           	opt stack 0
   515  0000B3                     vscp_handleProtocolEvent@pos_1133:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x23
   519  0000B3                     	ds	1
   520  0000B4                     doDM@i:
   521                           	opt stack 0
   522  0000B4                     vscp_handleProtocolEvent@len_1134:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x24
   526  0000B4                     	ds	1
   527  0000B5                     vscp_handleProtocolEvent@bytes_this_time:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x25
   531  0000B5                     	ds	1
   532  0000B6                     vscp_handleProtocolEvent@cb:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x26
   536  0000B6                     	ds	1
   537  0000B7                     vscp_handleProtocolEvent@i_1143:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x27
   541  0000B7                     	ds	1
   542  0000B8                     vscp_handleProtocolEvent@k:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x28
   546  0000B8                     	ds	1
   547  0000B9                     vscp_handleProtocolEvent@i_1132:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x29
   551  0000B9                     	ds	1
   552  0000BA                     vscp_handleProtocolEvent@byte:
   553                           	opt stack 0
   554                           
   555                           ; 1 bytes @ 0x2A
   556  0000BA                     	ds	1
   557  0000BB                     vscp_handleProtocolEvent@bytes_1139:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x2B
   561  0000BB                     	ds	2
   562  0000BD                     vscp_handleProtocolEvent@i_1135:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x2D
   566  0000BD                     	ds	1
   567  0000BE                     vscp_handleProtocolEvent@i:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x2E
   571  0000BE                     	ds	1
   572  0000BF                     vscp_handleProtocolEvent@j:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x2F
   576  0000BF                     	ds	1
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           prodh	equ	0xFF4
   582                           prodl	equ	0xFF3
   583                           intcon	equ	0xFF2
   584                           postinc0	equ	0xFEE
   585                           wreg	equ	0xFE8
   586                           indf1	equ	0xFE7
   587                           fsr1h	equ	0xFE2
   588                           fsr1l	equ	0xFE1
   589                           indf2	equ	0xFDF
   590                           postinc2	equ	0xFDE
   591                           postdec2	equ	0xFDD
   592                           plusw2	equ	0xFDB
   593                           fsr2h	equ	0xFDA
   594                           fsr2l	equ	0xFD9
   595                           status	equ	0xFD8
   596                           
   597                           	psect	cstackCOMRAM
   598  000001                     __pcstackCOMRAM:
   599                           	opt stack 0
   600  000001                     ?i1_WriteTimer0:
   601                           	opt stack 0
   602  000001                     i1WriteTimer0@timer0:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x0
   606  000001                     	ds	2
   607  000003                     i1WriteTimer0@timer:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x2
   611  000003                     	ds	2
   612  000005                     ??_interrupt_at_low_vector:
   613                           
   614                           ; 0 bytes @ 0x4
   615  000005                     	ds	3
   616  000008                     ?_WriteTimer0:
   617                           	opt stack 0
   618  000008                     ?_Write_b_eep:
   619                           	opt stack 0
   620  000008                     ??_readControlReg:
   621  000008                     ?__CANIDToRegs:
   622                           	opt stack 0
   623  000008                     ?__RegsToCANID:
   624                           	opt stack 0
   625  000008                     ??_vscp_getMDF_URL:
   626  000008                     ?_Read_b_eep:
   627                           	opt stack 0
   628  000008                     ?___lbmod:
   629                           	opt stack 0
   630  000008                     ?__ECANPointBuffer:
   631                           	opt stack 0
   632  000008                     ?_vscp_getFamilyCode:
   633                           	opt stack 0
   634  000008                     ?_vscp_getFamilyType:
   635                           	opt stack 0
   636  000008                     vscp_getMatrixInfo@i:
   637                           	opt stack 0
   638  000008                     ECANSetOperationMode@mode:
   639                           	opt stack 0
   640  000008                     OpenTimer0@config:
   641                           	opt stack 0
   642  000008                     ___lbmod@divisor:
   643                           	opt stack 0
   644  000008                     __CANIDToRegs@ptr:
   645                           	opt stack 0
   646  000008                     __RegsToCANID@ptr:
   647                           	opt stack 0
   648  000008                     Read_b_eep@badd:
   649                           	opt stack 0
   650  000008                     Write_b_eep@badd:
   651                           	opt stack 0
   652  000008                     WriteTimer0@timer0:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x7
   656  000008                     	ds	1
   657  000009                     vscp_getMDF_URL@idx:
   658                           	opt stack 0
   659  000009                     ___lbmod@dividend:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x8
   663  000009                     	ds	1
   664  00000A                     vscp_getGUID@idx:
   665                           	opt stack 0
   666  00000A                     vscp_getUserID@idx:
   667                           	opt stack 0
   668  00000A                     vscp_getManufacturerId@idx:
   669                           	opt stack 0
   670  00000A                     __RegsToCANID@val:
   671                           	opt stack 0
   672  00000A                     Write_b_eep@bdat:
   673                           	opt stack 0
   674  00000A                     ___lbmod@counter:
   675                           	opt stack 0
   676  00000A                     WriteTimer0@timer:
   677                           	opt stack 0
   678  00000A                     __CANIDToRegs@val:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x9
   682  00000A                     	ds	1
   683  00000B                     __RegsToCANID@type:
   684                           	opt stack 0
   685  00000B                     __ECANPointBuffer@b:
   686                           	opt stack 0
   687  00000B                     Write_b_eep@GIE_BIT_VAL:
   688                           	opt stack 0
   689  00000B                     ___lbmod@rem:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0xA
   693  00000B                     	ds	1
   694  00000C                     ??_init_app_eeprom:
   695  00000C                     ??__RegsToCANID:
   696  00000C                     ??_vscp_readStdReg:
   697  00000C                     ?_vscp_setGUID:
   698                           	opt stack 0
   699  00000C                     ?_vscp_setManufacturerId:
   700                           	opt stack 0
   701  00000C                     ?_vscp_setUserID:
   702                           	opt stack 0
   703  00000C                     vscp_setGUID@data:
   704                           	opt stack 0
   705  00000C                     vscp_setManufacturerId@data:
   706                           	opt stack 0
   707  00000C                     vscp_writeNicknamePermanent@nickname:
   708                           	opt stack 0
   709  00000C                     vscp_setUserID@data:
   710                           	opt stack 0
   711  00000C                     vscp_setSegmentCRC@crc:
   712                           	opt stack 0
   713  00000C                     vscp_setControlByte@ctrl:
   714                           	opt stack 0
   715  00000C                     vscp_goBootloaderMode@algorithm:
   716                           	opt stack 0
   717  00000C                     __ECANPointBuffer@pt:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0xB
   721  00000C                     	ds	1
   722  00000D                     vscp_setGUID@idx:
   723                           	opt stack 0
   724  00000D                     vscp_setManufacturerId@idx:
   725                           	opt stack 0
   726  00000D                     vscp_setUserID@idx:
   727                           	opt stack 0
   728  00000D                     vscp_handleDropNickname@bytes:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0xC
   732  00000D                     	ds	1
   733  00000E                     init_app_eeprom@j:
   734                           	opt stack 0
   735  00000E                     __CANIDToRegs@type:
   736                           	opt stack 0
   737  00000E                     __RegsToCANID@Value:
   738                           	opt stack 0
   739                           
   740                           ; 1 bytes @ 0xD
   741  00000E                     	ds	1
   742  00000F                     ??__CANIDToRegs:
   743  00000F                     ?_ECANReceiveMessage:
   744                           	opt stack 0
   745  00000F                     init_app_eeprom@i:
   746                           	opt stack 0
   747  00000F                     readControlReg@ctrlreg:
   748                           	opt stack 0
   749  00000F                     ECANReceiveMessage@data:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0xE
   753  00000F                     	ds	1
   754  000010                     ?_vscp_writeStdReg:
   755                           	opt stack 0
   756  000010                     readControlReg@rv:
   757                           	opt stack 0
   758  000010                     ECANReceiveMessage@dataLen:
   759                           	opt stack 0
   760  000010                     vscp_writeStdReg@value:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0xF
   764  000010                     	ds	1
   765  000011                     ??_vscp_writeStdReg:
   766  000011                     ?_writeControlReg:
   767                           	opt stack 0
   768  000011                     vscp_readAppReg@rv:
   769                           	opt stack 0
   770  000011                     writeControlReg@val:
   771                           	opt stack 0
   772  000011                     ECANReceiveMessage@msgFlags:
   773                           	opt stack 0
   774  000011                     __CANIDToRegs@Value:
   775                           	opt stack 0
   776  000011                     vscp_readStdReg@code:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x10
   780  000011                     	ds	1
   781  000012                     ??_writeControlReg:
   782  000012                     ?_ECANSendMessage:
   783                           	opt stack 0
   784  000012                     vscp_readAppReg@reg:
   785                           	opt stack 0
   786  000012                     ECANReceiveMessage@savedPtr:
   787                           	opt stack 0
   788  000012                     ECANSendMessage@id:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x11
   792  000012                     	ds	1
   793  000013                     writeControlReg@ctrlreg:
   794                           	opt stack 0
   795                           
   796                           ; 1 bytes @ 0x12
   797  000013                     	ds	1
   798  000014                     writeControlReg@rv:
   799                           	opt stack 0
   800  000014                     ECANReceiveMessage@id:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x13
   804  000014                     	ds	1
   805  000015                     ?_vscp_writeAppReg:
   806                           	opt stack 0
   807  000015                     vscp_writeAppReg@val:
   808                           	opt stack 0
   809  000015                     ECANReceiveMessage@i:
   810                           	opt stack 0
   811  000015                     vscp_writeStdReg@rv:
   812                           	opt stack 0
   813  000015                     vscp_readStdReg@code_1117:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x14
   817  000015                     	ds	1
   818  000016                     vscp_writeAppReg@rv:
   819                           	opt stack 0
   820  000016                     ECANReceiveMessage@mode:
   821                           	opt stack 0
   822  000016                     vscp_writeStdReg@reg:
   823                           	opt stack 0
   824  000016                     ECANSendMessage@data:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x15
   828  000016                     	ds	1
   829  000017                     vscp_writeAppReg@reg:
   830                           	opt stack 0
   831  000017                     ECANReceiveMessage@temp:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x16
   835  000017                     	ds	1
   836  000018                     ?_vscp_writeRegister:
   837                           	opt stack 0
   838  000018                     ECANSendMessage@dataLen:
   839                           	opt stack 0
   840  000018                     vscp_writeRegister@value:
   841                           	opt stack 0
   842  000018                     ECANReceiveMessage@ptr:
   843                           	opt stack 0
   844                           
   845                           ; 2 bytes @ 0x17
   846  000018                     	ds	1
   847  000019                     ECANSendMessage@msgFlags:
   848                           	opt stack 0
   849  000019                     vscp_readStdReg@idx:
   850                           	opt stack 0
   851  000019                     vscp_writeRegister@reg:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x18
   855  000019                     	ds	1
   856  00001A                     ??_ECANSendMessage:
   857  00001A                     ?_getCANFrame:
   858                           	opt stack 0
   859  00001A                     getCANFrame@pdlc:
   860                           	opt stack 0
   861  00001A                     vscp_readStdReg@idx_1118:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x19
   865  00001A                     	ds	1
   866  00001B                     getCANFrame@pdata:
   867                           	opt stack 0
   868  00001B                     vscp_readStdReg@rv:
   869                           	opt stack 0
   870  00001B                     ECANSendMessage@pb:
   871                           	opt stack 0
   872                           
   873                           ; 18 bytes @ 0x1A
   874  00001B                     	ds	1
   875  00001C                     getCANFrame@pid:
   876                           	opt stack 0
   877  00001C                     vscp_readStdReg@reg:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x1B
   881  00001C                     	ds	1
   882  00001D                     getCANFrame@flags:
   883                           	opt stack 0
   884  00001D                     vscp_readRegister@reg:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x1C
   888  00001D                     	ds	1
   889  00001E                     ?_getVSCPFrame:
   890                           	opt stack 0
   891  00001E                     getVSCPFrame@pvscptype:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x1D
   895  00001E                     	ds	1
   896  00001F                     getVSCPFrame@pNodeId:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x1E
   900  00001F                     	ds	1
   901  000020                     getVSCPFrame@pPriority:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x1F
   905  000020                     	ds	1
   906  000021                     getVSCPFrame@pSize:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x20
   910  000021                     	ds	1
   911  000022                     getVSCPFrame@pData:
   912                           	opt stack 0
   913                           
   914                           ; 1 bytes @ 0x21
   915  000022                     	ds	1
   916  000023                     ??_getVSCPFrame:
   917                           
   918                           ; 0 bytes @ 0x22
   919  000023                     	ds	4
   920  000027                     getVSCPFrame@pvscpclass:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x26
   924  000027                     	ds	1
   925  000028                     getVSCPFrame@id:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x27
   929  000028                     	ds	4
   930  00002C                     vscp_getEvent@rv:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x2B
   934  00002C                     	ds	1
   935  00002D                     ECANSendMessage@mode:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x2C
   939  00002D                     	ds	1
   940  00002E                     ECANSendMessage@buffers:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x2D
   944  00002E                     	ds	1
   945  00002F                     ECANSendMessage@j:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x2E
   949  00002F                     	ds	1
   950  000030                     ECANSendMessage@tempBSEL0:
   951                           	opt stack 0
   952                           
   953                           ; 1 bytes @ 0x2F
   954  000030                     	ds	1
   955  000031                     ECANSendMessage@tempPtr:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x30
   959  000031                     	ds	2
   960  000033                     ECANSendMessage@temp:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x32
   964  000033                     	ds	1
   965  000034                     ECANSendMessage@i:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x33
   969  000034                     	ds	1
   970  000035                     ECANSendMessage@ptr:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x34
   974  000035                     	ds	2
   975  000037                     ?_sendCANFrame:
   976                           	opt stack 0
   977  000037                     sendCANFrame@id:
   978                           	opt stack 0
   979                           
   980                           ; 4 bytes @ 0x36
   981  000037                     	ds	4
   982  00003B                     sendCANFrame@dlc:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x3A
   986  00003B                     	ds	1
   987  00003C                     sendCANFrame@pdata:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x3B
   991  00003C                     	ds	2
   992  00003E                     sendCANFrame@rv:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x3D
   996  00003E                     	ds	1
   997  00003F                     ?_sendVSCPFrame:
   998                           	opt stack 0
   999  00003F                     sendVSCPFrame@vscpclass:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x3E
  1003  00003F                     	ds	2
  1004  000041                     sendVSCPFrame@vscptype:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x40
  1008  000041                     	ds	1
  1009  000042                     sendVSCPFrame@nodeid:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x41
  1013  000042                     	ds	1
  1014  000043                     sendVSCPFrame@priority:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x42
  1018  000043                     	ds	1
  1019  000044                     sendVSCPFrame@size:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x43
  1023  000044                     	ds	1
  1024  000045                     sendVSCPFrame@pData:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x44
  1028  000045                     	ds	2
  1029  000047                     sendVSCPFrame@id:
  1030                           	opt stack 0
  1031                           
  1032                           ; 4 bytes @ 0x46
  1033  000047                     	ds	4
  1034  00004B                     SendInformationEvent@data:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x4A
  1038  00004B                     	ds	1
  1039  00004C                     ??_vscp_newNodeOnline:
  1040  00004C                     vscp_sendHeartBeat@zone:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x4B
  1044  00004C                     	ds	1
  1045  00004D                     ??_vscp_doOneSecondWork:
  1046                           
  1047                           ; 0 bytes @ 0x4C
  1048  00004D                     	ds	1
  1049  00004E                     SendInformationEvent@idx:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0x4D
  1053  00004E                     	ds	1
  1054  00004F                     ?_actionSet:
  1055                           	opt stack 0
  1056  00004F                     ?_actionClr:
  1057                           	opt stack 0
  1058  00004F                     ?_actionSetAll:
  1059                           	opt stack 0
  1060  00004F                     ?_actionClrAll:
  1061                           	opt stack 0
  1062  00004F                     actionSet@param:
  1063                           	opt stack 0
  1064  00004F                     actionClr@param:
  1065                           	opt stack 0
  1066  00004F                     
  1067                           ; 1 bytes @ 0x4E
  1068  00004F                     	ds	1
  1069  000050                     actionSetAll@i:
  1070                           	opt stack 0
  1071  000050                     actionClrAll@i:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x4F
  1075  000050                     	ds	2
  1076  000052                     tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           intcon	equ	0xFF2
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           indf1	equ	0xFE7
  1086                           fsr1h	equ	0xFE2
  1087                           fsr1l	equ	0xFE1
  1088                           indf2	equ	0xFDF
  1089                           postinc2	equ	0xFDE
  1090                           postdec2	equ	0xFDD
  1091                           plusw2	equ	0xFDB
  1092                           fsr2h	equ	0xFDA
  1093                           fsr2l	equ	0xFD9
  1094                           status	equ	0xFD8
  1095                           
  1096                           ; 0 bytes @ 0x51
  1097 ;;
  1098 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1099 ;;
  1100 ;; *************** function _main *****************
  1101 ;; Defined at:
  1102 ;;		line 167 in file "../main.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;		None               void
  1109 ;; Registers used:
  1110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : F/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels required when called:    9
  1122 ;; This function calls:
  1123 ;;		_init
  1124 ;;		_vscp_check_pstorage
  1125 ;;		_init_app_eeprom
  1126 ;;		_init_app_ram
  1127 ;;		_vscp_init
  1128 ;;		_Read_b_eep
  1129 ;;		_writeControlReg
  1130 ;;		_Busy_eep
  1131 ;;		_Write_b_eep
  1132 ;;		_vscp_getEvent
  1133 ;;		_vscp_goActiveState
  1134 ;;		_vscp_handleProbeState
  1135 ;;		_vscp_handleProtocolEvent
  1136 ;;		_doDM
  1137 ;;		_vscp_error
  1138 ;;		_vscp_doOneSecondWork
  1139 ;;		_doApplicationOneSecondWork
  1140 ;;		_doWork
  1141 ;; This function is called by:
  1142 ;;		Startup code after reset
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text0
  1147  001FF4                     __ptext0:
  1148                           	opt stack 0
  1149  001FF4                     _main:
  1150                           	opt stack 22
  1151                           
  1152                           ;main.c: 168: init();
  1153                           
  1154                           ;incstack = 0
  1155                           ;incstack = 0
  1156  001FF4  ECCA  F015         	call	_init	;wreg free
  1157                           
  1158                           ;main.c: 172: if ( !vscp_check_pstorage() ) {
  1159  001FF8  ECEB  F016         	call	_vscp_check_pstorage	;wreg free
  1160  001FFC  0900               	iorlw	0
  1161  001FFE  E104               	bnz	l7102
  1162                           
  1163                           ;main.c: 175: init_app_eeprom();
  1164  002000  ECD0  F012         	call	_init_app_eeprom	;wreg free
  1165                           
  1166                           ;main.c: 176: init_app_ram();
  1167  002004  ECC4  F017         	call	_init_app_ram	;wreg free
  1168  002008                     l7102:
  1169                           
  1170                           ;main.c: 179: }
  1171                           ;main.c: 181: vscp_init();
  1172  002008  EC4B  F015         	call	_vscp_init	;wreg free
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;main.c: 184: writeControlReg( 0, Read_b_eep(0x21 + 2) );
  1176  00200C  6A09               	clrf	?_Read_b_eep+1,c
  1177  00200E  0E23               	movlw	35
  1178  002010  6E08               	movwf	?_Read_b_eep,c
  1179  002012  EC62  F017         	call	_Read_b_eep	;wreg free
  1180  002016  6E11               	movwf	?_writeControlReg,c
  1181  002018  0E00               	movlw	0
  1182  00201A  EC5D  F00D         	call	_writeControlReg
  1183                           
  1184                           ;main.c: 185: writeControlReg( 1, Read_b_eep(0x21 + 3) );
  1185  00201E  6A09               	clrf	?_Read_b_eep+1,c
  1186  002020  0E24               	movlw	36
  1187  002022  6E08               	movwf	?_Read_b_eep,c
  1188  002024  EC62  F017         	call	_Read_b_eep	;wreg free
  1189  002028  6E11               	movwf	?_writeControlReg,c
  1190  00202A  0E01               	movlw	1
  1191  00202C  EC5D  F00D         	call	_writeControlReg
  1192                           
  1193                           ;main.c: 186: writeControlReg( 2, Read_b_eep(0x21 + 4) );
  1194  002030  6A09               	clrf	?_Read_b_eep+1,c
  1195  002032  0E25               	movlw	37
  1196  002034  6E08               	movwf	?_Read_b_eep,c
  1197  002036  EC62  F017         	call	_Read_b_eep	;wreg free
  1198  00203A  6E11               	movwf	?_writeControlReg,c
  1199  00203C  0E02               	movlw	2
  1200  00203E  EC5D  F00D         	call	_writeControlReg
  1201  002042                     l147:
  1202  002042  0004               	clrwdt		;# 
  1203                           
  1204                           ;main.c: 192: if ( ( vscp_initbtncnt > 250 ) &&
  1205                           ;main.c: 193: ( 0x01 != vscp_node_state ) ) {
  1206  002044  0EFA               	movlw	250
  1207  002046  0100               	movlb	0	; () banked
  1208  002048  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1209  00204A  D00E               	goto	l7122
  1210                           
  1211                           ; BSR set to: 0
  1212  00204C  0571               	decf	_vscp_node_state& (0+255),w,b
  1213  00204E  E00C               	bz	l7122
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;main.c: 196: vscp_nickname = 0xff;
  1217  002050  6970               	setf	_vscp_nickname& (0+255),b
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 197: (Busy_eep(), Write_b_eep(0x01,0xff));
  1221  002052  EC01  F018         	call	_Busy_eep	;wreg free
  1222  002056  6A09               	clrf	?_Write_b_eep+1,c
  1223  002058  0E01               	movlw	1
  1224  00205A  6E08               	movwf	?_Write_b_eep,c
  1225  00205C  0EFF               	movlw	255
  1226  00205E  680A               	setf	?_Write_b_eep+2,c
  1227  002060  ECAD  F015         	call	_Write_b_eep	;wreg free
  1228                           
  1229                           ;main.c: 198: vscp_init();
  1230  002064  EC4B  F015         	call	_vscp_init	;wreg free
  1231  002068                     l7122:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 200: }
  1235                           ;main.c: 203: vscp_imsg.flags = 0;
  1236  002068  6B75               	clrf	_vscp_imsg& (0+255),b
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;main.c: 204: vscp_getEvent();
  1240  00206A  EC2D  F016         	call	_vscp_getEvent	;wreg free
  1241                           
  1242                           ;main.c: 206: switch ( vscp_node_state ) {
  1243  00206E  D01C               	goto	l7146
  1244  002070                     l7126:
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 211: if (0xff == vscp_nickname) {
  1248  002070  2970               	incf	_vscp_nickname& (0+255),w,b
  1249  002072  E103               	bnz	l7130
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;main.c: 213: vscp_node_state = 0x01;
  1253  002074  0E01               	movlw	1
  1254  002076  6F71               	movwf	_vscp_node_state& (0+255),b
  1255                           
  1256                           ;main.c: 214: } else {
  1257  002078  D023               	goto	l7148
  1258  00207A                     l7130:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;main.c: 216: vscp_node_state = 0x03;
  1262  00207A  0E03               	movlw	3
  1263  00207C  6F71               	movwf	_vscp_node_state& (0+255),b
  1264  00207E                     l7132:
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 217: vscp_goActiveState();
  1268  00207E  EC28  F017         	call	_vscp_goActiveState	;wreg free
  1269  002082  D01E               	goto	l7148
  1270  002084                     l7134:
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;main.c: 222: vscp_handleProbeState();
  1274  002084  EC35  F013         	call	_vscp_handleProbeState	;wreg free
  1275                           
  1276                           ;main.c: 223: break;
  1277  002088  D01B               	goto	l7148
  1278  00208A                     l156:
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;main.c: 232: if (vscp_imsg.flags & 0x80) {
  1282  00208A  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1283  00208C  D019               	goto	l7148
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;main.c: 234: if ( 0 == vscp_imsg.vscp_class ) {
  1287  00208E  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1288  002090  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1289  002092  B4D8               	btfsc	status,2,c
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;main.c: 237: vscp_handleProtocolEvent();
  1293  002094  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1294                           
  1295                           ;main.c: 239: }
  1296                           ;main.c: 241: doDM();
  1297  002098  EC98  F00A         	call	_doDM	;wreg free
  1298  00209C  D011               	goto	l7148
  1299  00209E                     l7142:
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;main.c: 247: vscp_error();
  1303  00209E  EC04  F018         	call	_vscp_error	;wreg free
  1304                           
  1305                           ;main.c: 248: break;
  1306  0020A2  D00E               	goto	l7148
  1307  0020A4                     l160:
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;main.c: 251: vscp_node_state = 0x00;
  1311  0020A4  6B71               	clrf	_vscp_node_state& (0+255),b
  1312                           
  1313                           ;main.c: 252: break;
  1314  0020A6  D00C               	goto	l7148
  1315  0020A8                     l7146:
  1316  0020A8  0100               	movlb	0	; () banked
  1317  0020AA  5171               	movf	_vscp_node_state& (0+255),w,b
  1318                           
  1319                           ; Switch size 1, requested type "space"
  1320                           ; Number of cases is 5, Range of values is 0 to 4
  1321                           ; switch strategies available:
  1322                           ; Name         Instructions Cycles
  1323                           ; simple_byte           16     9 (average)
  1324                           ;	Chosen strategy is simple_byte
  1325  0020AC  E0E1               	bz	l7126
  1326  0020AE  0A01               	xorlw	1	; case 1
  1327  0020B0  E0E9               	bz	l7134
  1328  0020B2  0A03               	xorlw	3	; case 2
  1329  0020B4  E0E4               	bz	l7132
  1330  0020B6  0A01               	xorlw	1	; case 3
  1331  0020B8  E0E8               	bz	l156
  1332  0020BA  0A07               	xorlw	7	; case 4
  1333  0020BC  E0F0               	bz	l7142
  1334  0020BE  D7F2               	goto	l160
  1335  0020C0                     l7148:
  1336                           
  1337                           ;main.c: 257: if ( measurement_clock > 1000 ) {
  1338  0020C0  0EE9               	movlw	233
  1339  0020C2  0100               	movlb	0	; () banked
  1340  0020C4  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1341  0020C6  0E03               	movlw	3
  1342  0020C8  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1343  0020CA  0E00               	movlw	0
  1344  0020CC  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1345  0020CE  0E00               	movlw	0
  1346  0020D0  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1347  0020D2  E30C               	bnc	l7160
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;main.c: 259: measurement_clock = 0;
  1351  0020D4  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1352  0020D6  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1353  0020D8  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1354  0020DA  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 261: sendTimer++;
  1358  0020DC  2A55               	incf	_sendTimer,f,c
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;main.c: 264: vscp_doOneSecondWork();
  1362  0020DE  EC23  F015         	call	_vscp_doOneSecondWork	;wreg free
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 268: if ( 0x03 == vscp_node_state ) {
  1366  0020E2  5171               	movf	_vscp_node_state& (0+255),w,b
  1367  0020E4  0A03               	xorlw	3
  1368  0020E6  B4D8               	btfsc	status,2,c
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;main.c: 271: doApplicationOneSecondWork();
  1372  0020E8  EC07  F018         	call	_doApplicationOneSecondWork	;wreg free
  1373  0020EC                     l7160:
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;main.c: 273: }
  1377                           ;main.c: 275: }
  1378                           ;main.c: 278: if ( seconds > 59 ) {
  1379  0020EC  0E3B               	movlw	59
  1380  0020EE  656A               	cpfsgt	_seconds& (0+255),b
  1381  0020F0  D00B               	goto	l7176
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 280: seconds = 0;
  1385  0020F2  6B6A               	clrf	_seconds& (0+255),b
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 281: minutes++;
  1389  0020F4  2B69               	incf	_minutes& (0+255),f,b
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 283: if ( minutes > 59 ) {
  1393  0020F6  0E3B               	movlw	59
  1394  0020F8  6569               	cpfsgt	_minutes& (0+255),b
  1395  0020FA  D002               	goto	l7172
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 284: minutes = 0;
  1399  0020FC  6B69               	clrf	_minutes& (0+255),b
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 285: hours++;
  1403  0020FE  2B68               	incf	_hours& (0+255),f,b
  1404  002100                     l7172:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 286: }
  1408                           ;main.c: 288: if ( hours > 23 ) hours = 0;
  1409  002100  0E17               	movlw	23
  1410  002102  6568               	cpfsgt	_hours& (0+255),b
  1411  002104  D001               	goto	l7176
  1412                           
  1413                           ; BSR set to: 0
  1414  002106  6B68               	clrf	_hours& (0+255),b
  1415  002108                     l7176:
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 290: }
  1419                           ;main.c: 292: doWork();
  1420  002108  EC06  F018         	call	_doWork	;wreg free
  1421  00210C  D79A               	goto	l147
  1422  00210E                     __end_of_main:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           prodh	equ	0xFF4
  1429                           prodl	equ	0xFF3
  1430                           intcon	equ	0xFF2
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           indf1	equ	0xFE7
  1434                           fsr1h	equ	0xFE2
  1435                           fsr1l	equ	0xFE1
  1436                           indf2	equ	0xFDF
  1437                           postinc2	equ	0xFDE
  1438                           postdec2	equ	0xFDD
  1439                           plusw2	equ	0xFDB
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _doWork *****************
  1445 ;; Defined at:
  1446 ;;		line 574 in file "../main.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;		None
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;		None
  1451 ;; Return value:  Size  Location     Type
  1452 ;;		None               void
  1453 ;; Registers used:
  1454 ;;		wreg, status,2, status,0
  1455 ;; Tracked objects:
  1456 ;;		On entry : F/0
  1457 ;;		On exit  : F/0
  1458 ;;		Unchanged: F/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1464 ;;Total ram usage:        0 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    2
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_main
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text1
  1475  00300C                     __ptext1:
  1476                           	opt stack 0
  1477  00300C                     _doWork:
  1478                           	opt stack 28
  1479                           
  1480                           ; BSR set to: 0
  1481                           
  1482                           ; BSR set to: 0
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;incstack = 0
  1486                           ;incstack = 0
  1487  00300C  0012               	return	
  1488  00300E                     __end_of_doWork:
  1489                           	opt stack 0
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           prodh	equ	0xFF4
  1495                           prodl	equ	0xFF3
  1496                           intcon	equ	0xFF2
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           indf1	equ	0xFE7
  1500                           fsr1h	equ	0xFE2
  1501                           fsr1l	equ	0xFE1
  1502                           indf2	equ	0xFDF
  1503                           postinc2	equ	0xFDE
  1504                           postdec2	equ	0xFDD
  1505                           plusw2	equ	0xFDB
  1506                           fsr2h	equ	0xFDA
  1507                           fsr2l	equ	0xFD9
  1508                           status	equ	0xFD8
  1509                           
  1510 ;; *************** function _doApplicationOneSecondWork *****************
  1511 ;; Defined at:
  1512 ;;		line 456 in file "../main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;		None               void
  1519 ;; Registers used:
  1520 ;;		None
  1521 ;; Tracked objects:
  1522 ;;		On entry : F/0
  1523 ;;		On exit  : F/0
  1524 ;;		Unchanged: F/0
  1525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1530 ;;Total ram usage:        0 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    2
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text2
  1541  00300E                     __ptext2:
  1542                           	opt stack 0
  1543  00300E                     _doApplicationOneSecondWork:
  1544                           	opt stack 28
  1545                           
  1546                           ; BSR set to: 0
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;incstack = 0
  1550                           ;incstack = 0
  1551  00300E  0012               	return	
  1552  003010                     __end_of_doApplicationOneSecondWork:
  1553                           	opt stack 0
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           prodh	equ	0xFF4
  1559                           prodl	equ	0xFF3
  1560                           intcon	equ	0xFF2
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           indf1	equ	0xFE7
  1564                           fsr1h	equ	0xFE2
  1565                           fsr1l	equ	0xFE1
  1566                           indf2	equ	0xFDF
  1567                           postinc2	equ	0xFDE
  1568                           postdec2	equ	0xFDD
  1569                           plusw2	equ	0xFDB
  1570                           fsr2h	equ	0xFDA
  1571                           fsr2l	equ	0xFD9
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _vscp_doOneSecondWork *****************
  1575 ;; Defined at:
  1576 ;;		line 524 in file "../../vscp_firmware/common/vscp_firmware.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;		None
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;		None
  1581 ;; Return value:  Size  Location     Type
  1582 ;;		None               void
  1583 ;; Registers used:
  1584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : F/0
  1587 ;;		On exit  : F/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1593 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1594 ;;Total ram usage:        1 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    8
  1597 ;; This function calls:
  1598 ;;		_vscp_getZone
  1599 ;;		_vscp_getSubzone
  1600 ;;		_vscp_sendHeartBeat
  1601 ;; This function is called by:
  1602 ;;		_main
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text3
  1607  002A46                     __ptext3:
  1608                           	opt stack 0
  1609  002A46                     _vscp_doOneSecondWork:
  1610                           	opt stack 22
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;vscp_firmware.c: 526: ++vscp_second;
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;incstack = 0
  1617                           ;incstack = 0
  1618  002A46  2B74               	incf	_vscp_second& (0+255),f,b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;vscp_firmware.c: 528: if (vscp_second > 59) {
  1622  002A48  0E3B               	movlw	59
  1623  002A4A  6574               	cpfsgt	_vscp_second& (0+255),b
  1624  002A4C  D00D               	goto	l6464
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;vscp_firmware.c: 529: vscp_second = 0;
  1628  002A4E  6B74               	clrf	_vscp_second& (0+255),b
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;vscp_firmware.c: 530: vscp_minute++;
  1632  002A50  2B6F               	incf	_vscp_minute& (0+255),f,b
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;vscp_firmware.c: 533: if (0x03 == vscp_node_state) {
  1636  002A52  5171               	movf	_vscp_node_state& (0+255),w,b
  1637  002A54  0A03               	xorlw	3
  1638  002A56  E108               	bnz	l6464
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;vscp_firmware.c: 534: vscp_sendHeartBeat(vscp_getZone(),
  1642                           ;vscp_firmware.c: 535: vscp_getSubzone());
  1643  002A58  ECDF  F017         	call	_vscp_getSubzone	;wreg free
  1644  002A5C  0100               	movlb	0	; () banked
  1645  002A5E  6FA4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1646  002A60  ECE4  F017         	call	_vscp_getZone	;wreg free
  1647  002A64  EC6C  F016         	call	_vscp_sendHeartBeat
  1648  002A68                     l6464:
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;vscp_firmware.c: 536: }
  1652                           ;vscp_firmware.c: 537: }
  1653                           ;vscp_firmware.c: 539: if (vscp_minute > 59) {
  1654  002A68  0E3B               	movlw	59
  1655  002A6A  656F               	cpfsgt	_vscp_minute& (0+255),b
  1656  002A6C  D002               	goto	l6470
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;vscp_firmware.c: 540: vscp_minute = 0;
  1660  002A6E  6B6F               	clrf	_vscp_minute& (0+255),b
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;vscp_firmware.c: 541: vscp_hour++;
  1664  002A70  2B6D               	incf	_vscp_hour& (0+255),f,b
  1665  002A72                     l6470:
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;vscp_firmware.c: 542: }
  1669                           ;vscp_firmware.c: 544: if (vscp_hour > 23) vscp_hour = 0;
  1670  002A72  0E17               	movlw	23
  1671  002A74  656D               	cpfsgt	_vscp_hour& (0+255),b
  1672  002A76  D001               	goto	l6474
  1673                           
  1674                           ; BSR set to: 0
  1675  002A78  6B6D               	clrf	_vscp_hour& (0+255),b
  1676  002A7A                     l6474:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;vscp_firmware.c: 548: if (0x03 == vscp_node_state) {
  1680  002A7A  5171               	movf	_vscp_node_state& (0+255),w,b
  1681  002A7C  0A03               	xorlw	3
  1682  002A7E  A4D8               	btfss	status,2,c
  1683  002A80  0012               	return	
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;vscp_firmware.c: 549: vscp_guid_reset++;
  1687  002A82  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;vscp_firmware.c: 550: if ((vscp_guid_reset & 0x0f) >= 2) {
  1691  002A84  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1692  002A88  0E0F               	movlw	15
  1693  002A8A  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1694  002A8C  0E02               	movlw	2
  1695  002A8E  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1696  002A90  B0D8               	btfsc	status,0,c
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;vscp_firmware.c: 551: vscp_guid_reset = 0;
  1700  002A92  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703  002A94  0012               	return	
  1704  002A96                     __end_of_vscp_doOneSecondWork:
  1705                           	opt stack 0
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           prodh	equ	0xFF4
  1711                           prodl	equ	0xFF3
  1712                           intcon	equ	0xFF2
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           indf1	equ	0xFE7
  1716                           fsr1h	equ	0xFE2
  1717                           fsr1l	equ	0xFE1
  1718                           indf2	equ	0xFDF
  1719                           postinc2	equ	0xFDE
  1720                           postdec2	equ	0xFDD
  1721                           plusw2	equ	0xFDB
  1722                           fsr2h	equ	0xFDA
  1723                           fsr2l	equ	0xFD9
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _vscp_sendHeartBeat *****************
  1727 ;; Defined at:
  1728 ;;		line 378 in file "../../vscp_firmware/common/vscp_firmware.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  zone            1    wreg     unsigned char 
  1731 ;;  subzone         1   20[BANK0 ] unsigned char 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  zone            1   75[COMRAM] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;		None               void
  1736 ;; Registers used:
  1737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : F/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1743 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1746 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1747 ;;Total ram usage:        2 bytes
  1748 ;; Hardware stack levels used:    1
  1749 ;; Hardware stack levels required when called:    7
  1750 ;; This function calls:
  1751 ;;		_vscp_sendEvent
  1752 ;; This function is called by:
  1753 ;;		_vscp_doOneSecondWork
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text4
  1758  002CD8                     __ptext4:
  1759                           	opt stack 0
  1760  002CD8                     _vscp_sendHeartBeat:
  1761                           	opt stack 22
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;incstack = 0
  1765                           ;incstack = 0
  1766                           ;vscp_sendHeartBeat@zone stored from wreg
  1767  002CD8  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1768                           
  1769                           ;vscp_firmware.c: 379: vscp_omsg.flags = 0x80 + 3;
  1770  002CDC  0E83               	movlw	131
  1771  002CDE  0100               	movlb	0	; () banked
  1772  002CE0  6F83               	movwf	_vscp_omsg& (0+255),b
  1773                           
  1774                           ;vscp_firmware.c: 380: vscp_omsg.priority = 0x07;
  1775  002CE2  0E07               	movlw	7
  1776  002CE4  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1777                           
  1778                           ;vscp_firmware.c: 381: vscp_omsg.vscp_class = 20;
  1779  002CE6  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1780  002CE8  0E14               	movlw	20
  1781  002CEA  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1782                           
  1783                           ;vscp_firmware.c: 382: vscp_omsg.vscp_type = 9;
  1784  002CEC  0E09               	movlw	9
  1785  002CEE  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;vscp_firmware.c: 383: vscp_omsg.data[ 0 ] = 0;
  1789  002CF0  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;vscp_firmware.c: 384: vscp_omsg.data[ 1 ] = zone;
  1793  002CF2  C04C  F089         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;vscp_firmware.c: 385: vscp_omsg.data[ 2 ] = subzone;
  1797  002CF6  C0A4  F08A         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;vscp_firmware.c: 388: vscp_sendEvent();
  1801  002CFA  EF7F  F016         	goto	_vscp_sendEvent	;wreg free
  1802  002CFE                     __end_of_vscp_sendHeartBeat:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           prodh	equ	0xFF4
  1809                           prodl	equ	0xFF3
  1810                           intcon	equ	0xFF2
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           indf1	equ	0xFE7
  1814                           fsr1h	equ	0xFE2
  1815                           fsr1l	equ	0xFE1
  1816                           indf2	equ	0xFDF
  1817                           postinc2	equ	0xFDE
  1818                           postdec2	equ	0xFDD
  1819                           plusw2	equ	0xFDB
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _vscp_getSubzone *****************
  1825 ;; Defined at:
  1826 ;;		line 563 in file "../main.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      unsigned char 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : F/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    3
  1847 ;; This function calls:
  1848 ;;		_Read_b_eep
  1849 ;; This function is called by:
  1850 ;;		_vscp_doOneSecondWork
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text5
  1855  002FBE                     __ptext5:
  1856                           	opt stack 0
  1857  002FBE                     _vscp_getSubzone:
  1858                           	opt stack 26
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 564: return Read_b_eep(0x21 + 1);
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;incstack = 0
  1865                           ;incstack = 0
  1866  002FBE  6A09               	clrf	?_Read_b_eep+1,c
  1867  002FC0  0E22               	movlw	34
  1868  002FC2  6E08               	movwf	?_Read_b_eep,c
  1869  002FC4  EF62  F017         	goto	_Read_b_eep	;wreg free
  1870  002FC8                     __end_of_vscp_getSubzone:
  1871                           	opt stack 0
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           prodh	equ	0xFF4
  1877                           prodl	equ	0xFF3
  1878                           intcon	equ	0xFF2
  1879                           postinc0	equ	0xFEE
  1880                           wreg	equ	0xFE8
  1881                           indf1	equ	0xFE7
  1882                           fsr1h	equ	0xFE2
  1883                           fsr1l	equ	0xFE1
  1884                           indf2	equ	0xFDF
  1885                           postinc2	equ	0xFDE
  1886                           postdec2	equ	0xFDD
  1887                           plusw2	equ	0xFDB
  1888                           fsr2h	equ	0xFDA
  1889                           fsr2l	equ	0xFD9
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function _vscp_getZone *****************
  1893 ;; Defined at:
  1894 ;;		line 554 in file "../main.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;		None
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;		None
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  1    wreg      unsigned char 
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : F/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1912 ;;Total ram usage:        0 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    3
  1915 ;; This function calls:
  1916 ;;		_Read_b_eep
  1917 ;; This function is called by:
  1918 ;;		_vscp_doOneSecondWork
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text6
  1923  002FC8                     __ptext6:
  1924                           	opt stack 0
  1925  002FC8                     _vscp_getZone:
  1926                           	opt stack 26
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;main.c: 555: return Read_b_eep(0x21 + 0);
  1930                           
  1931                           ;incstack = 0
  1932                           ;incstack = 0
  1933  002FC8  6A09               	clrf	?_Read_b_eep+1,c
  1934  002FCA  0E21               	movlw	33
  1935  002FCC  6E08               	movwf	?_Read_b_eep,c
  1936  002FCE  EF62  F017         	goto	_Read_b_eep	;wreg free
  1937  002FD2                     __end_of_vscp_getZone:
  1938                           	opt stack 0
  1939                           tblptru	equ	0xFF8
  1940                           tblptrh	equ	0xFF7
  1941                           tblptrl	equ	0xFF6
  1942                           tablat	equ	0xFF5
  1943                           prodh	equ	0xFF4
  1944                           prodl	equ	0xFF3
  1945                           intcon	equ	0xFF2
  1946                           postinc0	equ	0xFEE
  1947                           wreg	equ	0xFE8
  1948                           indf1	equ	0xFE7
  1949                           fsr1h	equ	0xFE2
  1950                           fsr1l	equ	0xFE1
  1951                           indf2	equ	0xFDF
  1952                           postinc2	equ	0xFDE
  1953                           postdec2	equ	0xFDD
  1954                           plusw2	equ	0xFDB
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _vscp_error *****************
  1960 ;; Defined at:
  1961 ;;		line 193 in file "../../vscp_firmware/common/vscp_firmware.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;		None
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		None
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1979 ;;Total ram usage:        0 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    2
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text7
  1990  003008                     __ptext7:
  1991                           	opt stack 0
  1992  003008                     _vscp_error:
  1993                           	opt stack 28
  1994                           
  1995                           ;vscp_firmware.c: 194: vscp_initledfunc = 0x00;
  1996                           
  1997                           ;incstack = 0
  1998                           ;incstack = 0
  1999  003008  6A56               	clrf	_vscp_initledfunc,c
  2000  00300A  0012               	return	
  2001  00300C                     __end_of_vscp_error:
  2002                           	opt stack 0
  2003                           tblptru	equ	0xFF8
  2004                           tblptrh	equ	0xFF7
  2005                           tblptrl	equ	0xFF6
  2006                           tablat	equ	0xFF5
  2007                           prodh	equ	0xFF4
  2008                           prodl	equ	0xFF3
  2009                           intcon	equ	0xFF2
  2010                           postinc0	equ	0xFEE
  2011                           wreg	equ	0xFE8
  2012                           indf1	equ	0xFE7
  2013                           fsr1h	equ	0xFE2
  2014                           fsr1l	equ	0xFE1
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           plusw2	equ	0xFDB
  2019                           fsr2h	equ	0xFDA
  2020                           fsr2l	equ	0xFD9
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _doDM *****************
  2024 ;; Defined at:
  2025 ;;		line 835 in file "../main.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;		None
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;  class_mask      2   27[BANK0 ] unsigned short 
  2030 ;;  class_filter    2   25[BANK0 ] unsigned short 
  2031 ;;  i               1   36[BANK0 ] unsigned char 
  2032 ;;  dmflags         1   35[BANK0 ] unsigned char 
  2033 ;;  type_mask       1   30[BANK0 ] unsigned char 
  2034 ;;  type_filter     1   29[BANK0 ] unsigned char 
  2035 ;; Return value:  Size  Location     Type
  2036 ;;		None               void
  2037 ;; Registers used:
  2038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2039 ;; Tracked objects:
  2040 ;;		On entry : 0/0
  2041 ;;		On exit  : F/0
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2045 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2046 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2047 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2048 ;;Total ram usage:       15 bytes
  2049 ;; Hardware stack levels used:    1
  2050 ;; Hardware stack levels required when called:    8
  2051 ;; This function calls:
  2052 ;;		_Read_b_eep
  2053 ;;		_actionSet
  2054 ;;		_actionClr
  2055 ;;		_actionSetAll
  2056 ;;		_actionClrAll
  2057 ;; This function is called by:
  2058 ;;		_main
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062                           	psect	text8
  2063  001530                     __ptext8:
  2064                           	opt stack 0
  2065  001530                     _doDM:
  2066                           	opt stack 22
  2067                           
  2068                           ;main.c: 836: unsigned char i;
  2069                           ;main.c: 837: unsigned char dmflags;
  2070                           ;main.c: 838: unsigned short class_filter;
  2071                           ;main.c: 839: unsigned short class_mask;
  2072                           ;main.c: 840: unsigned char type_filter;
  2073                           ;main.c: 841: unsigned char type_mask;
  2074                           ;main.c: 844: if ( 0 == vscp_imsg.vscp_class ) return;
  2075                           
  2076                           ;incstack = 0
  2077                           ;incstack = 0
  2078  001530  0100               	movlb	0	; () banked
  2079  001532  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  2080  001534  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2081  001536  B4D8               	btfsc	status,2,c
  2082  001538  0012               	return	
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;main.c: 846: for (i = 0; i < 8; i++) {
  2086  00153A  6BB4               	clrf	doDM@i& (0+255),b
  2087  00153C                     l7616:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;main.c: 849: dmflags = Read_b_eep(0x21 + 23 + 0 + 1 + (8 * i));
  2091  00153C  51B4               	movf	doDM@i& (0+255),w,b
  2092  00153E  D8E2               	call	PL2	;call to abstracted procedure
  2093  001540  0E39               	movlw	57
  2094  001542  25A6               	addwf	??_doDM& (0+255),w,b
  2095  001544  6E08               	movwf	?_Read_b_eep,c
  2096  001546  0E00               	movlw	0
  2097  001548  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2098  00154A  6E09               	movwf	?_Read_b_eep+1,c
  2099  00154C  EC62  F017         	call	_Read_b_eep	;wreg free
  2100  001550  0100               	movlb	0	; () banked
  2101  001552  6FB3               	movwf	doDM@dmflags& (0+255),b
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;main.c: 853: if ( dmflags & 0x80 ) {
  2105  001554  AFB3               	btfss	doDM@dmflags& (0+255),7,b
  2106  001556  D0D0               	goto	l7670
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;main.c: 856: if ( ( dmflags & 0x40 ) &&
  2110                           ;main.c: 857: ( vscp_imsg.oaddr != Read_b_eep(0x21 + 23 + 0 + (8 * i)) ) ) {
  2111  001558  ADB3               	btfss	doDM@dmflags& (0+255),6,b
  2112  00155A  D00E               	goto	l291
  2113                           
  2114                           ; BSR set to: 0
  2115  00155C  51B4               	movf	doDM@i& (0+255),w,b
  2116  00155E  D8D2               	call	PL2	;call to abstracted procedure
  2117  001560  0E38               	movlw	56
  2118  001562  25A6               	addwf	??_doDM& (0+255),w,b
  2119  001564  6E08               	movwf	?_Read_b_eep,c
  2120  001566  0E00               	movlw	0
  2121  001568  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2122  00156A  6E09               	movwf	?_Read_b_eep+1,c
  2123  00156C  EC62  F017         	call	_Read_b_eep	;wreg free
  2124  001570  0100               	movlb	0	; () banked
  2125  001572  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2126  001574  E001 D0C0          	bnz	l7670
  2127  001578                     l291:
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;main.c: 860: }
  2131                           ;main.c: 863: if ( dmflags & 0x10 ) {
  2132  001578  A9B3               	btfss	doDM@dmflags& (0+255),4,b
  2133  00157A  D00B               	goto	l293
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;main.c: 864: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2137  00157C  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2138  00157E  E009               	bz	l293
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 865: if ( vscp_imsg.data[ 1 ] != Read_b_eep(0x21 + 0) ) {
  2142  001580  6A09               	clrf	?_Read_b_eep+1,c
  2143  001582  0E21               	movlw	33
  2144  001584  6E08               	movwf	?_Read_b_eep,c
  2145  001586  EC62  F017         	call	_Read_b_eep	;wreg free
  2146  00158A  0100               	movlb	0	; () banked
  2147  00158C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2148  00158E  E001 D0B3          	bnz	l7670
  2149  001592                     l293:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;main.c: 867: }
  2153                           ;main.c: 868: }
  2154                           ;main.c: 869: }
  2155                           ;main.c: 872: if ( dmflags & 0x08 ) {
  2156  001592  A7B3               	btfss	doDM@dmflags& (0+255),3,b
  2157  001594  D00B               	goto	l7638
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;main.c: 873: if ( 255 != vscp_imsg.data[ 2 ] ) {
  2161  001596  297D               	incf	(_vscp_imsg+8)& (0+255),w,b
  2162  001598  E009               	bz	l7638
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 874: if ( vscp_imsg.data[ 2 ] != Read_b_eep(0x21 + 0) ) {
  2166  00159A  6A09               	clrf	?_Read_b_eep+1,c
  2167  00159C  0E21               	movlw	33
  2168  00159E  6E08               	movwf	?_Read_b_eep,c
  2169  0015A0  EC62  F017         	call	_Read_b_eep	;wreg free
  2170  0015A4  0100               	movlb	0	; () banked
  2171  0015A6  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2172  0015A8  E001 D0A6          	bnz	l7670
  2173  0015AC                     l7638:
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;main.c: 876: }
  2177                           ;main.c: 877: }
  2178                           ;main.c: 878: }
  2179                           ;main.c: 880: class_filter = ( dmflags & 0x01)*256 +
  2180                           ;main.c: 881: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 3);
  2181  0015AC  51B4               	movf	doDM@i& (0+255),w,b
  2182  0015AE  0D08               	mullw	8
  2183  0015B0  0E3B               	movlw	59
  2184  0015B2  24F3               	addwf	prodl,w,c
  2185  0015B4  6E08               	movwf	?_Read_b_eep,c
  2186  0015B6  0E00               	movlw	0
  2187  0015B8  20F4               	addwfc	prodh,w,c
  2188  0015BA  6E09               	movwf	?_Read_b_eep+1,c
  2189  0015BC  EC62  F017         	call	_Read_b_eep	;wreg free
  2190  0015C0  0100               	movlb	0	; () banked
  2191  0015C2  6FA6               	movwf	??_doDM& (0+255),b
  2192  0015C4  51B3               	movf	doDM@dmflags& (0+255),w,b
  2193  0015C6  0B01               	andlw	1
  2194  0015C8  6FA8               	movwf	(??_doDM+2)& (0+255),b
  2195  0015CA  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2196  0015CC  51A6               	movf	??_doDM& (0+255),w,b
  2197  0015CE  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  2198  0015D0  6FA9               	movwf	doDM@class_filter& (0+255),b
  2199  0015D2  0E00               	movlw	0
  2200  0015D4  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  2201  0015D6  6FAA               	movwf	(doDM@class_filter+1)& (0+255),b
  2202                           
  2203                           ;main.c: 885: class_mask = ( dmflags & 0x02)*256 +
  2204                           ;main.c: 886: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 2);
  2205  0015D8  51B4               	movf	doDM@i& (0+255),w,b
  2206  0015DA  0D08               	mullw	8
  2207  0015DC  0E3A               	movlw	58
  2208  0015DE  24F3               	addwf	prodl,w,c
  2209  0015E0  6E08               	movwf	?_Read_b_eep,c
  2210  0015E2  0E00               	movlw	0
  2211  0015E4  20F4               	addwfc	prodh,w,c
  2212  0015E6  6E09               	movwf	?_Read_b_eep+1,c
  2213  0015E8  EC62  F017         	call	_Read_b_eep	;wreg free
  2214  0015EC  0100               	movlb	0	; () banked
  2215  0015EE  6FA6               	movwf	??_doDM& (0+255),b
  2216  0015F0  51B3               	movf	doDM@dmflags& (0+255),w,b
  2217  0015F2  0B02               	andlw	2
  2218  0015F4  6FA8               	movwf	(??_doDM+2)& (0+255),b
  2219  0015F6  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2220  0015F8  51A6               	movf	??_doDM& (0+255),w,b
  2221  0015FA  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  2222  0015FC  6FAB               	movwf	doDM@class_mask& (0+255),b
  2223  0015FE  0E00               	movlw	0
  2224  001600  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  2225  001602  6FAC               	movwf	(doDM@class_mask+1)& (0+255),b
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;main.c: 890: type_filter = Read_b_eep(0x21 + 23 + 0 + (8 * i) + 5);
  2229  001604  51B4               	movf	doDM@i& (0+255),w,b
  2230  001606  D87E               	call	PL2	;call to abstracted procedure
  2231  001608  0E3D               	movlw	61
  2232  00160A  25A6               	addwf	??_doDM& (0+255),w,b
  2233  00160C  6E08               	movwf	?_Read_b_eep,c
  2234  00160E  0E00               	movlw	0
  2235  001610  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2236  001612  6E09               	movwf	?_Read_b_eep+1,c
  2237  001614  EC62  F017         	call	_Read_b_eep	;wreg free
  2238  001618  0100               	movlb	0	; () banked
  2239  00161A  6FAD               	movwf	doDM@type_filter& (0+255),b
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;main.c: 894: type_mask = Read_b_eep(0x21 + 23 + 0 + (8 * i) + 4);
  2243  00161C  51B4               	movf	doDM@i& (0+255),w,b
  2244  00161E  D872               	call	PL2	;call to abstracted procedure
  2245  001620  0E3C               	movlw	60
  2246  001622  25A6               	addwf	??_doDM& (0+255),w,b
  2247  001624  6E08               	movwf	?_Read_b_eep,c
  2248  001626  0E00               	movlw	0
  2249  001628  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2250  00162A  6E09               	movwf	?_Read_b_eep+1,c
  2251  00162C  EC62  F017         	call	_Read_b_eep	;wreg free
  2252  001630  0100               	movlb	0	; () banked
  2253  001632  6FAE               	movwf	doDM@type_mask& (0+255),b
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;main.c: 899: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2257                           ;main.c: 900: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2258  001634  EE20  F077         	lfsr	2,_vscp_imsg+2
  2259  001638  CFDE F0A6          	movff	postinc2,??_doDM
  2260  00163C  CFDD F0A7          	movff	postdec2,??_doDM+1
  2261  001640  51A9               	movf	doDM@class_filter& (0+255),w,b
  2262  001642  1BA6               	xorwf	??_doDM& (0+255),f,b
  2263  001644  51AA               	movf	(doDM@class_filter+1)& (0+255),w,b
  2264  001646  1BA7               	xorwf	(??_doDM+1)& (0+255),f,b
  2265  001648  51AB               	movf	doDM@class_mask& (0+255),w,b
  2266  00164A  17A6               	andwf	??_doDM& (0+255),f,b
  2267  00164C  51AC               	movf	(doDM@class_mask+1)& (0+255),w,b
  2268  00164E  17A7               	andwf	(??_doDM+1)& (0+255),f,b
  2269  001650  51A7               	movf	(??_doDM+1)& (0+255),w,b
  2270  001652  11A6               	iorwf	??_doDM& (0+255),w,b
  2271  001654  E151               	bnz	l7670
  2272                           
  2273                           ; BSR set to: 0
  2274  001656  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2275  001658  19AD               	xorwf	doDM@type_filter& (0+255),w,b
  2276  00165A  15AE               	andwf	doDM@type_mask& (0+255),w,b
  2277  00165C  E039               	bz	l7668
  2278  00165E  D04C               	goto	l7670
  2279  001660                     l7650:
  2280                           
  2281                           ;main.c: 911: actionSet( dmflags,
  2282                           ;main.c: 912: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2283  001660  0100               	movlb	0	; () banked
  2284  001662  51B4               	movf	doDM@i& (0+255),w,b
  2285  001664  D84F               	call	PL2	;call to abstracted procedure
  2286  001666  D85A               	call	PL6	;call to abstracted procedure
  2287  001668  EC62  F017         	call	_Read_b_eep	;wreg free
  2288  00166C  0100               	movlb	0	; () banked
  2289  00166E  6FAF               	movwf	_doDM$1998& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 911: actionSet( dmflags,
  2293                           ;main.c: 912: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2294  001670  C0AF  F04F         	movff	_doDM$1998,?_actionSet
  2295  001674  51B3               	movf	doDM@dmflags& (0+255),w,b
  2296  001676  EC68  F012         	call	_actionSet
  2297                           
  2298                           ;main.c: 915: break;
  2299  00167A  D03E               	goto	l7670
  2300  00167C                     l7654:
  2301                           
  2302                           ;main.c: 918: actionClr( dmflags,
  2303                           ;main.c: 919: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2304  00167C  0100               	movlb	0	; () banked
  2305  00167E  51B4               	movf	doDM@i& (0+255),w,b
  2306  001680  D841               	call	PL2	;call to abstracted procedure
  2307  001682  D84C               	call	PL6	;call to abstracted procedure
  2308  001684  EC62  F017         	call	_Read_b_eep	;wreg free
  2309  001688  0100               	movlb	0	; () banked
  2310  00168A  6FB0               	movwf	_doDM$1999& (0+255),b
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;main.c: 918: actionClr( dmflags,
  2314                           ;main.c: 919: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2315  00168C  C0B0  F04F         	movff	_doDM$1999,?_actionClr
  2316  001690  51B3               	movf	doDM@dmflags& (0+255),w,b
  2317  001692  EC00  F012         	call	_actionClr
  2318                           
  2319                           ;main.c: 922: break;
  2320  001696  D030               	goto	l7670
  2321  001698                     l7658:
  2322                           
  2323                           ;main.c: 925: actionSetAll( dmflags,
  2324                           ;main.c: 926: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2325  001698  0100               	movlb	0	; () banked
  2326  00169A  51B4               	movf	doDM@i& (0+255),w,b
  2327  00169C  D833               	call	PL2	;call to abstracted procedure
  2328  00169E  D83E               	call	PL6	;call to abstracted procedure
  2329  0016A0  EC62  F017         	call	_Read_b_eep	;wreg free
  2330  0016A4  0100               	movlb	0	; () banked
  2331  0016A6  6FB1               	movwf	_doDM$2000& (0+255),b
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;main.c: 925: actionSetAll( dmflags,
  2335                           ;main.c: 926: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2336  0016A8  C0B1  F04F         	movff	_doDM$2000,?_actionSetAll
  2337  0016AC  51B3               	movf	doDM@dmflags& (0+255),w,b
  2338  0016AE  ECFD  F015         	call	_actionSetAll
  2339                           
  2340                           ;main.c: 929: break;
  2341  0016B2  D022               	goto	l7670
  2342  0016B4                     l7662:
  2343                           
  2344                           ;main.c: 932: actionClrAll( dmflags,
  2345                           ;main.c: 933: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2346  0016B4  0100               	movlb	0	; () banked
  2347  0016B6  51B4               	movf	doDM@i& (0+255),w,b
  2348  0016B8  D825               	call	PL2	;call to abstracted procedure
  2349  0016BA  D830               	call	PL6	;call to abstracted procedure
  2350  0016BC  EC62  F017         	call	_Read_b_eep	;wreg free
  2351  0016C0  0100               	movlb	0	; () banked
  2352  0016C2  6FB2               	movwf	_doDM$2001& (0+255),b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 932: actionClrAll( dmflags,
  2356                           ;main.c: 933: Read_b_eep(0x21 + 23 + 0 + (8 * i) + 7) );
  2357  0016C4  C0B2  F04F         	movff	_doDM$2001,?_actionClrAll
  2358  0016C8  51B3               	movf	doDM@dmflags& (0+255),w,b
  2359  0016CA  ECE5  F015         	call	_actionClrAll
  2360                           
  2361                           ;main.c: 936: break;
  2362  0016CE  D014               	goto	l7670
  2363  0016D0                     l7668:
  2364                           
  2365                           ; BSR set to: 0
  2366  0016D0  51B4               	movf	doDM@i& (0+255),w,b
  2367  0016D2  D818               	call	PL2	;call to abstracted procedure
  2368  0016D4  0E3E               	movlw	62
  2369  0016D6  25A6               	addwf	??_doDM& (0+255),w,b
  2370  0016D8  6E08               	movwf	?_Read_b_eep,c
  2371  0016DA  0E00               	movlw	0
  2372  0016DC  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2373  0016DE  6E09               	movwf	?_Read_b_eep+1,c
  2374  0016E0  EC62  F017         	call	_Read_b_eep	;wreg free
  2375                           
  2376                           ; Switch size 1, requested type "space"
  2377                           ; Number of cases is 5, Range of values is 0 to 4
  2378                           ; switch strategies available:
  2379                           ; Name         Instructions Cycles
  2380                           ; simple_byte           16     9 (average)
  2381                           ;	Chosen strategy is simple_byte
  2382  0016E4  0A00               	xorlw	0	; case 0
  2383  0016E6  E008               	bz	l7670
  2384  0016E8  0A01               	xorlw	1	; case 1
  2385  0016EA  E0BA               	bz	l7650
  2386  0016EC  0A03               	xorlw	3	; case 2
  2387  0016EE  E0C6               	bz	l7654
  2388  0016F0  0A01               	xorlw	1	; case 3
  2389  0016F2  E0D2               	bz	l7658
  2390  0016F4  0A07               	xorlw	7	; case 4
  2391  0016F6  E0DE               	bz	l7662
  2392  0016F8                     l7670:
  2393  0016F8  0100               	movlb	0	; () banked
  2394  0016FA  2BB4               	incf	doDM@i& (0+255),f,b
  2395                           
  2396                           ; BSR set to: 0
  2397  0016FC  0E07               	movlw	7
  2398  0016FE  65B4               	cpfsgt	doDM@i& (0+255),b
  2399  001700  D71D               	goto	l7616
  2400  001702  0C07               	retlw	7
  2401  001704                     __end_of_doDM:
  2402                           	opt stack 0
  2403  001704                     PL2:
  2404                           	opt stack 22
  2405  001704  6FA6               	movwf	??_doDM& (0+255),b
  2406  001706  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2407  001708  90D8               	bcf	status,0,c
  2408  00170A  37A6               	rlcf	??_doDM& (0+255),f,b
  2409  00170C  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2410  00170E  90D8               	bcf	status,0,c
  2411  001710  37A6               	rlcf	??_doDM& (0+255),f,b
  2412  001712  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2413  001714  90D8               	bcf	status,0,c
  2414  001716  37A6               	rlcf	??_doDM& (0+255),f,b
  2415  001718  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2416  00171A  0012               	return	
  2417  00171C                     __end_ofPL2:
  2418                           	opt stack 0
  2419  00171C                     PL6:
  2420                           	opt stack 22
  2421  00171C  0E3F               	movlw	63
  2422  00171E  25A6               	addwf	??_doDM& (0+255),w,b
  2423  001720  6E08               	movwf	?_Read_b_eep,c
  2424  001722  0E00               	movlw	0
  2425  001724  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2426  001726  6E09               	movwf	?_Read_b_eep+1,c
  2427  001728  0012               	return	
  2428  00172A                     __end_ofPL6:
  2429                           	opt stack 0
  2430                           tblptru	equ	0xFF8
  2431                           tblptrh	equ	0xFF7
  2432                           tblptrl	equ	0xFF6
  2433                           tablat	equ	0xFF5
  2434                           prodh	equ	0xFF4
  2435                           prodl	equ	0xFF3
  2436                           intcon	equ	0xFF2
  2437                           postinc0	equ	0xFEE
  2438                           wreg	equ	0xFE8
  2439                           indf1	equ	0xFE7
  2440                           fsr1h	equ	0xFE2
  2441                           fsr1l	equ	0xFE1
  2442                           indf2	equ	0xFDF
  2443                           postinc2	equ	0xFDE
  2444                           postdec2	equ	0xFDD
  2445                           plusw2	equ	0xFDB
  2446                           fsr2h	equ	0xFDA
  2447                           fsr2l	equ	0xFD9
  2448                           status	equ	0xFD8
  2449                           
  2450 ;; *************** function _actionClrAll *****************
  2451 ;; Defined at:
  2452 ;;		line 1179 in file "../main.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  dmflags         1    wreg     unsigned char 
  2455 ;;  param           1   78[COMRAM] unsigned char 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;  dmflags         1    0[COMRAM] unsigned char 
  2458 ;;  i               2   79[COMRAM] int 
  2459 ;; Return value:  Size  Location     Type
  2460 ;;		None               void
  2461 ;; Registers used:
  2462 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2463 ;; Tracked objects:
  2464 ;;		On entry : F/0
  2465 ;;		On exit  : F/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2468 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2469 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2471 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2472 ;;Total ram usage:        3 bytes
  2473 ;; Hardware stack levels used:    1
  2474 ;; Hardware stack levels required when called:    7
  2475 ;; This function calls:
  2476 ;;		_SendInformationEvent
  2477 ;; This function is called by:
  2478 ;;		_doDM
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text9
  2483  002BCA                     __ptext9:
  2484                           	opt stack 0
  2485  002BCA                     _actionClrAll:
  2486                           	opt stack 22
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;main.c: 1180: PORTA = 0x00;
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;incstack = 0
  2493                           ;incstack = 0
  2494  002BCA  6A80               	clrf	3968,c	;volatile
  2495                           
  2496                           ;main.c: 1181: PORTB = 0x00;
  2497  002BCC  6A81               	clrf	3969,c	;volatile
  2498                           
  2499                           ;main.c: 1182: PORTC = 0x00;
  2500  002BCE  6A82               	clrf	3970,c	;volatile
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 1184: for ( int i=3; i<21; i++ ) {
  2504  002BD0  6A51               	clrf	actionClrAll@i+1,c
  2505  002BD2  0E03               	movlw	3
  2506  002BD4  6E50               	movwf	actionClrAll@i,c
  2507  002BD6                     l6694:
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 1185: SendInformationEvent( i,
  2511                           ;main.c: 1186: 20,
  2512                           ;main.c: 1187: 4 );
  2513  002BD6  0E14               	movlw	20
  2514  002BD8  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2515  002BDA  0E04               	movlw	4
  2516  002BDC  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2517  002BDE  5050               	movf	actionClrAll@i,w,c
  2518  002BE0  ECF8  F014         	call	_SendInformationEvent
  2519                           
  2520                           ; BSR set to: 0
  2521  002BE4  4A50               	infsnz	actionClrAll@i,f,c
  2522  002BE6  2A51               	incf	actionClrAll@i+1,f,c
  2523                           
  2524                           ; BSR set to: 0
  2525  002BE8  5051               	movf	actionClrAll@i+1,w,c
  2526  002BEA  0A80               	xorlw	128
  2527  002BEC  0F80               	addlw	-128
  2528  002BEE  0E15               	movlw	21
  2529  002BF0  B4D8               	btfsc	status,2,c
  2530  002BF2  5C50               	subwf	actionClrAll@i,w,c
  2531  002BF4  B0D8               	btfsc	status,0,c
  2532  002BF6  0012               	return	
  2533  002BF8  D7EE               	goto	l6694
  2534  002BFA                     __end_of_actionClrAll:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           prodh	equ	0xFF4
  2541                           prodl	equ	0xFF3
  2542                           intcon	equ	0xFF2
  2543                           postinc0	equ	0xFEE
  2544                           wreg	equ	0xFE8
  2545                           indf1	equ	0xFE7
  2546                           fsr1h	equ	0xFE2
  2547                           fsr1l	equ	0xFE1
  2548                           indf2	equ	0xFDF
  2549                           postinc2	equ	0xFDE
  2550                           postdec2	equ	0xFDD
  2551                           plusw2	equ	0xFDB
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556 ;; *************** function _actionSetAll *****************
  2557 ;; Defined at:
  2558 ;;		line 1160 in file "../main.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  dmflags         1    wreg     unsigned char 
  2561 ;;  param           1   78[COMRAM] unsigned char 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  dmflags         1    0[COMRAM] unsigned char 
  2564 ;;  i               2   79[COMRAM] int 
  2565 ;; Return value:  Size  Location     Type
  2566 ;;		None               void
  2567 ;; Registers used:
  2568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2569 ;; Tracked objects:
  2570 ;;		On entry : F/0
  2571 ;;		On exit  : F/0
  2572 ;;		Unchanged: 0/0
  2573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2574 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2575 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2577 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2578 ;;Total ram usage:        3 bytes
  2579 ;; Hardware stack levels used:    1
  2580 ;; Hardware stack levels required when called:    7
  2581 ;; This function calls:
  2582 ;;		_SendInformationEvent
  2583 ;; This function is called by:
  2584 ;;		_doDM
  2585 ;; This function uses a non-reentrant model
  2586 ;;
  2587                           
  2588                           	psect	text10
  2589  002BFA                     __ptext10:
  2590                           	opt stack 0
  2591  002BFA                     _actionSetAll:
  2592                           	opt stack 22
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;main.c: 1161: PORTA = 0xff;
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;incstack = 0
  2599                           ;incstack = 0
  2600  002BFA  6880               	setf	3968,c	;volatile
  2601                           
  2602                           ;main.c: 1162: PORTB = 0xff;
  2603  002BFC  6881               	setf	3969,c	;volatile
  2604                           
  2605                           ;main.c: 1163: PORTC = 0xff;
  2606  002BFE  6882               	setf	3970,c	;volatile
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;main.c: 1165: for ( int i=3; i<21; i++ ) {
  2610  002C00  6A51               	clrf	actionSetAll@i+1,c
  2611  002C02  0E03               	movlw	3
  2612  002C04  6E50               	movwf	actionSetAll@i,c
  2613  002C06                     l6680:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 1166: SendInformationEvent( i,
  2617                           ;main.c: 1167: 20,
  2618                           ;main.c: 1168: 3 );
  2619  002C06  0E14               	movlw	20
  2620  002C08  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2621  002C0A  0E03               	movlw	3
  2622  002C0C  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2623  002C0E  5050               	movf	actionSetAll@i,w,c
  2624  002C10  ECF8  F014         	call	_SendInformationEvent
  2625                           
  2626                           ; BSR set to: 0
  2627  002C14  4A50               	infsnz	actionSetAll@i,f,c
  2628  002C16  2A51               	incf	actionSetAll@i+1,f,c
  2629                           
  2630                           ; BSR set to: 0
  2631  002C18  5051               	movf	actionSetAll@i+1,w,c
  2632  002C1A  0A80               	xorlw	128
  2633  002C1C  0F80               	addlw	-128
  2634  002C1E  0E15               	movlw	21
  2635  002C20  B4D8               	btfsc	status,2,c
  2636  002C22  5C50               	subwf	actionSetAll@i,w,c
  2637  002C24  B0D8               	btfsc	status,0,c
  2638  002C26  0012               	return	
  2639  002C28  D7EE               	goto	l6680
  2640  002C2A                     __end_of_actionSetAll:
  2641                           	opt stack 0
  2642                           tblptru	equ	0xFF8
  2643                           tblptrh	equ	0xFF7
  2644                           tblptrl	equ	0xFF6
  2645                           tablat	equ	0xFF5
  2646                           prodh	equ	0xFF4
  2647                           prodl	equ	0xFF3
  2648                           intcon	equ	0xFF2
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           indf1	equ	0xFE7
  2652                           fsr1h	equ	0xFE2
  2653                           fsr1l	equ	0xFE1
  2654                           indf2	equ	0xFDF
  2655                           postinc2	equ	0xFDE
  2656                           postdec2	equ	0xFDD
  2657                           plusw2	equ	0xFDB
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _actionClr *****************
  2663 ;; Defined at:
  2664 ;;		line 1056 in file "../main.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  dmflags         1    wreg     unsigned char 
  2667 ;;  param           1   78[COMRAM] unsigned char 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  dmflags         1    0[COMRAM] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;		None               void
  2672 ;; Registers used:
  2673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : F/0
  2676 ;;		On exit  : F/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2679 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2682 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2683 ;;Total ram usage:        1 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    7
  2686 ;; This function calls:
  2687 ;;		_Read_b_eep
  2688 ;;		_SendInformationEvent
  2689 ;; This function is called by:
  2690 ;;		_doDM
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text11
  2695  002400                     __ptext11:
  2696                           	opt stack 0
  2697  002400                     _actionClr:
  2698                           	opt stack 22
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;main.c: 1058: if ( param & 0x80 ) {
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;incstack = 0
  2705                           ;incstack = 0
  2706  002400  AE4F               	btfss	actionClr@param,7,c
  2707  002402  D00D               	goto	l6658
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;main.c: 1060: param &= 0x7f;
  2711  002404  9E4F               	bcf	actionClr@param,7,c
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 1062: if ( Read_b_eep(0x21 + 5 + (param - 3))
  2715                           ;main.c: 1063: != vscp_imsg.data[ 2 ] ) {
  2716  002406  0E23               	movlw	35
  2717  002408  244F               	addwf	actionClr@param,w,c
  2718  00240A  6E08               	movwf	?_Read_b_eep,c
  2719  00240C  6A09               	clrf	?_Read_b_eep+1,c
  2720  00240E  0E00               	movlw	0
  2721  002410  2209               	addwfc	?_Read_b_eep+1,f,c
  2722  002412  EC62  F017         	call	_Read_b_eep	;wreg free
  2723  002416  0100               	movlb	0	; () banked
  2724  002418  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2725  00241A  A4D8               	btfss	status,2,c
  2726  00241C  0012               	return	
  2727  00241E                     l6658:
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;main.c: 1065: }
  2731                           ;main.c: 1066: }
  2732                           ;main.c: 1068: if ( param < 3) return;
  2733  00241E  0E03               	movlw	3
  2734  002420  604F               	cpfslt	actionClr@param,c
  2735  002422  D001               	goto	l6662
  2736  002424  0C03               	retlw	3
  2737  002426                     l6662:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 1069: if ( param > 20 ) return;
  2741  002426  0E14               	movlw	20
  2742  002428  644F               	cpfsgt	actionClr@param,c
  2743  00242A  D001               	goto	l6666
  2744  00242C  0C14               	retlw	20
  2745  00242E                     l6666:
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 1071: SendInformationEvent( param,
  2749                           ;main.c: 1072: 20,
  2750                           ;main.c: 1073: 4 );
  2751  00242E  0E14               	movlw	20
  2752  002430  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2753  002432  0E04               	movlw	4
  2754  002434  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2755  002436  504F               	movf	actionClr@param,w,c
  2756  002438  ECF8  F014         	call	_SendInformationEvent
  2757                           
  2758                           ;main.c: 1075: switch ( param ) {
  2759  00243C  D020               	goto	l6670
  2760  00243E                     l342:
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;main.c: 1078: PORTCbits.RC7 = 0;
  2764  00243E  9E82               	bcf	3970,7,c	;volatile
  2765                           
  2766                           ;main.c: 1079: break;
  2767  002440  0012               	return	
  2768  002442                     l344:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 1082: PORTCbits.RC6 = 0;
  2772  002442  9C82               	bcf	3970,6,c	;volatile
  2773                           
  2774                           ;main.c: 1083: break;
  2775  002444  0012               	return	
  2776  002446                     l345:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 1086: PORTCbits.RC3 = 0;
  2780  002446  9682               	bcf	3970,3,c	;volatile
  2781                           
  2782                           ;main.c: 1087: break;
  2783  002448  0012               	return	
  2784  00244A                     l346:
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 1090: PORTCbits.RC4 = 0;
  2788  00244A  9882               	bcf	3970,4,c	;volatile
  2789                           
  2790                           ;main.c: 1091: break;
  2791  00244C  0012               	return	
  2792  00244E                     l347:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 1094: PORTCbits.RC5 = 0;
  2796  00244E  9A82               	bcf	3970,5,c	;volatile
  2797                           
  2798                           ;main.c: 1095: break;
  2799  002450  0012               	return	
  2800  002452                     l348:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;main.c: 1098: PORTAbits.RA0 = 0;
  2804  002452  9080               	bcf	3968,0,c	;volatile
  2805                           
  2806                           ;main.c: 1099: break;
  2807  002454  0012               	return	
  2808  002456                     l349:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 1102: PORTAbits.RA1 = 0;
  2812  002456  9280               	bcf	3968,1,c	;volatile
  2813                           
  2814                           ;main.c: 1103: break;
  2815  002458  0012               	return	
  2816  00245A                     l350:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 1106: PORTAbits.RA2 = 0;
  2820  00245A  9480               	bcf	3968,2,c	;volatile
  2821                           
  2822                           ;main.c: 1107: break;
  2823  00245C  0012               	return	
  2824  00245E                     l351:
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 1110: PORTAbits.RA3 = 0;
  2828  00245E  9680               	bcf	3968,3,c	;volatile
  2829                           
  2830                           ;main.c: 1111: break;
  2831  002460  0012               	return	
  2832  002462                     l352:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 1114: PORTAbits.RA5 = 0;
  2836  002462  9A80               	bcf	3968,5,c	;volatile
  2837                           
  2838                           ;main.c: 1115: break;
  2839  002464  0012               	return	
  2840  002466                     l355:
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;main.c: 1126: PORTBbits.RB4 = 0;
  2844  002466  9881               	bcf	3969,4,c	;volatile
  2845                           
  2846                           ;main.c: 1127: break;
  2847  002468  0012               	return	
  2848  00246A                     l356:
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;main.c: 1130: PORTCbits.RC2 = 0;
  2852  00246A  9482               	bcf	3970,2,c	;volatile
  2853                           
  2854                           ;main.c: 1131: break;
  2855  00246C  0012               	return	
  2856  00246E                     l357:
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;main.c: 1134: PORTBbits.RB1 = 0;
  2860  00246E  9281               	bcf	3969,1,c	;volatile
  2861                           
  2862                           ;main.c: 1135: break;
  2863  002470  0012               	return	
  2864  002472                     l358:
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;main.c: 1138: PORTBbits.RB0 = 0;
  2868  002472  9081               	bcf	3969,0,c	;volatile
  2869                           
  2870                           ;main.c: 1139: break;
  2871  002474  0012               	return	
  2872  002476                     l359:
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 1142: PORTBbits.RB6 = 0;
  2876  002476  9C81               	bcf	3969,6,c	;volatile
  2877                           
  2878                           ;main.c: 1143: break;
  2879  002478  0012               	return	
  2880  00247A                     l360:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;main.c: 1146: PORTBbits.RB5 = 0;
  2884  00247A  9A81               	bcf	3969,5,c	;volatile
  2885                           
  2886                           ;main.c: 1147: break;
  2887  00247C  0012               	return	
  2888  00247E                     l6670:
  2889                           
  2890                           ; BSR set to: 0
  2891  00247E  504F               	movf	actionClr@param,w,c
  2892                           
  2893                           ; Switch size 1, requested type "space"
  2894                           ; Number of cases is 18, Range of values is 3 to 20
  2895                           ; switch strategies available:
  2896                           ; Name         Instructions Cycles
  2897                           ; simple_byte           55    28 (average)
  2898                           ;	Chosen strategy is simple_byte
  2899  002480  0A03               	xorlw	3	; case 3
  2900  002482  E0DD               	bz	l342
  2901  002484  0A07               	xorlw	7	; case 4
  2902  002486  E0DD               	bz	l344
  2903  002488  0A01               	xorlw	1	; case 5
  2904  00248A  E0DD               	bz	l345
  2905  00248C  0A03               	xorlw	3	; case 6
  2906  00248E  E0DD               	bz	l346
  2907  002490  0A01               	xorlw	1	; case 7
  2908  002492  E0DD               	bz	l347
  2909  002494  0A0F               	xorlw	15	; case 8
  2910  002496  E0DD               	bz	l348
  2911  002498  0A01               	xorlw	1	; case 9
  2912  00249A  E0DD               	bz	l349
  2913  00249C  0A03               	xorlw	3	; case 10
  2914  00249E  E0DD               	bz	l350
  2915  0024A0  0A01               	xorlw	1	; case 11
  2916  0024A2  E0DD               	bz	l351
  2917  0024A4  0A07               	xorlw	7	; case 12
  2918  0024A6  E0DD               	bz	l352
  2919  0024A8  0A01               	xorlw	1	; case 13
  2920  0024AA  B4D8               	btfsc	status,2,c
  2921  0024AC  0012               	return	
  2922  0024AE  0A03               	xorlw	3	; case 14
  2923  0024B0  B4D8               	btfsc	status,2,c
  2924  0024B2  0012               	return	
  2925  0024B4  0A01               	xorlw	1	; case 15
  2926  0024B6  E0D7               	bz	l355
  2927  0024B8  0A1F               	xorlw	31	; case 16
  2928  0024BA  E0D7               	bz	l356
  2929  0024BC  0A01               	xorlw	1	; case 17
  2930  0024BE  E0D7               	bz	l357
  2931  0024C0  0A03               	xorlw	3	; case 18
  2932  0024C2  E0D7               	bz	l358
  2933  0024C4  0A01               	xorlw	1	; case 19
  2934  0024C6  E0D7               	bz	l359
  2935  0024C8  0A07               	xorlw	7	; case 20
  2936  0024CA  A4D8               	btfss	status,2,c
  2937  0024CC  0012               	return	
  2938  0024CE  D7D5               	goto	l360
  2939  0024D0                     __end_of_actionClr:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           prodh	equ	0xFF4
  2946                           prodl	equ	0xFF3
  2947                           intcon	equ	0xFF2
  2948                           postinc0	equ	0xFEE
  2949                           wreg	equ	0xFE8
  2950                           indf1	equ	0xFE7
  2951                           fsr1h	equ	0xFE2
  2952                           fsr1l	equ	0xFE1
  2953                           indf2	equ	0xFDF
  2954                           postinc2	equ	0xFDE
  2955                           postdec2	equ	0xFDD
  2956                           plusw2	equ	0xFDB
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _actionSet *****************
  2962 ;; Defined at:
  2963 ;;		line 953 in file "../main.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;  dmflags         1    wreg     unsigned char 
  2966 ;;  param           1   78[COMRAM] unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  dmflags         1    0[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;		None               void
  2971 ;; Registers used:
  2972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : F/0
  2975 ;;		On exit  : F/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2978 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2982 ;;Total ram usage:        1 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    7
  2985 ;; This function calls:
  2986 ;;		_Read_b_eep
  2987 ;;		_SendInformationEvent
  2988 ;; This function is called by:
  2989 ;;		_doDM
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text12
  2994  0024D0                     __ptext12:
  2995                           	opt stack 0
  2996  0024D0                     _actionSet:
  2997                           	opt stack 22
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 955: if ( param & 0x80 ) {
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;incstack = 0
  3004                           ;incstack = 0
  3005  0024D0  AE4F               	btfss	actionSet@param,7,c
  3006  0024D2  D00D               	goto	l6636
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;main.c: 957: param &= 0x7f;
  3010  0024D4  9E4F               	bcf	actionSet@param,7,c
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;main.c: 959: if ( Read_b_eep(0x21 + 5 + (param - 3))
  3014                           ;main.c: 960: != vscp_imsg.data[ 2 ] ) {
  3015  0024D6  0E23               	movlw	35
  3016  0024D8  244F               	addwf	actionSet@param,w,c
  3017  0024DA  6E08               	movwf	?_Read_b_eep,c
  3018  0024DC  6A09               	clrf	?_Read_b_eep+1,c
  3019  0024DE  0E00               	movlw	0
  3020  0024E0  2209               	addwfc	?_Read_b_eep+1,f,c
  3021  0024E2  EC62  F017         	call	_Read_b_eep	;wreg free
  3022  0024E6  0100               	movlb	0	; () banked
  3023  0024E8  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3024  0024EA  A4D8               	btfss	status,2,c
  3025  0024EC  0012               	return	
  3026  0024EE                     l6636:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;main.c: 962: }
  3030                           ;main.c: 963: }
  3031                           ;main.c: 965: if ( param < 3) return;
  3032  0024EE  0E03               	movlw	3
  3033  0024F0  604F               	cpfslt	actionSet@param,c
  3034  0024F2  D001               	goto	l6640
  3035  0024F4  0C03               	retlw	3
  3036  0024F6                     l6640:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;main.c: 966: if ( param > 20 ) return;
  3040  0024F6  0E14               	movlw	20
  3041  0024F8  644F               	cpfsgt	actionSet@param,c
  3042  0024FA  D001               	goto	l6644
  3043  0024FC  0C14               	retlw	20
  3044  0024FE                     l6644:
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;main.c: 968: SendInformationEvent( param,
  3048                           ;main.c: 969: 20,
  3049                           ;main.c: 970: 3 );
  3050  0024FE  0E14               	movlw	20
  3051  002500  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  3052  002502  0E03               	movlw	3
  3053  002504  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3054  002506  504F               	movf	actionSet@param,w,c
  3055  002508  ECF8  F014         	call	_SendInformationEvent
  3056                           
  3057                           ;main.c: 972: switch ( param ) {
  3058  00250C  D020               	goto	l6648
  3059  00250E                     l315:
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;main.c: 975: PORTCbits.RC7 = 1;
  3063  00250E  8E82               	bsf	3970,7,c	;volatile
  3064                           
  3065                           ;main.c: 976: break;
  3066  002510  0012               	return	
  3067  002512                     l317:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;main.c: 979: PORTCbits.RC6 = 1;
  3071  002512  8C82               	bsf	3970,6,c	;volatile
  3072                           
  3073                           ;main.c: 980: break;
  3074  002514  0012               	return	
  3075  002516                     l318:
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 983: PORTCbits.RC3 = 1;
  3079  002516  8682               	bsf	3970,3,c	;volatile
  3080                           
  3081                           ;main.c: 984: break;
  3082  002518  0012               	return	
  3083  00251A                     l319:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;main.c: 987: PORTCbits.RC4 = 1;
  3087  00251A  8882               	bsf	3970,4,c	;volatile
  3088                           
  3089                           ;main.c: 988: break;
  3090  00251C  0012               	return	
  3091  00251E                     l320:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;main.c: 991: PORTCbits.RC5 = 1;
  3095  00251E  8A82               	bsf	3970,5,c	;volatile
  3096                           
  3097                           ;main.c: 992: break;
  3098  002520  0012               	return	
  3099  002522                     l321:
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;main.c: 995: PORTAbits.RA0 = 1;
  3103  002522  8080               	bsf	3968,0,c	;volatile
  3104                           
  3105                           ;main.c: 996: break;
  3106  002524  0012               	return	
  3107  002526                     l322:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 999: PORTAbits.RA1 = 1;
  3111  002526  8280               	bsf	3968,1,c	;volatile
  3112                           
  3113                           ;main.c: 1000: break;
  3114  002528  0012               	return	
  3115  00252A                     l323:
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;main.c: 1003: PORTAbits.RA2 = 1;
  3119  00252A  8480               	bsf	3968,2,c	;volatile
  3120                           
  3121                           ;main.c: 1004: break;
  3122  00252C  0012               	return	
  3123  00252E                     l324:
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 1007: PORTAbits.RA3 = 1;
  3127  00252E  8680               	bsf	3968,3,c	;volatile
  3128                           
  3129                           ;main.c: 1008: break;
  3130  002530  0012               	return	
  3131  002532                     l325:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;main.c: 1011: PORTAbits.RA5 = 1;
  3135  002532  8A80               	bsf	3968,5,c	;volatile
  3136                           
  3137                           ;main.c: 1012: break;
  3138  002534  0012               	return	
  3139  002536                     l328:
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;main.c: 1023: PORTBbits.RB4 = 1;
  3143  002536  8881               	bsf	3969,4,c	;volatile
  3144                           
  3145                           ;main.c: 1024: break;
  3146  002538  0012               	return	
  3147  00253A                     l329:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 1027: PORTCbits.RC2 = 1;
  3151  00253A  8482               	bsf	3970,2,c	;volatile
  3152                           
  3153                           ;main.c: 1028: break;
  3154  00253C  0012               	return	
  3155  00253E                     l330:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;main.c: 1031: PORTBbits.RB1 = 1;
  3159  00253E  8281               	bsf	3969,1,c	;volatile
  3160                           
  3161                           ;main.c: 1032: break;
  3162  002540  0012               	return	
  3163  002542                     l331:
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;main.c: 1035: PORTBbits.RB0 = 1;
  3167  002542  8081               	bsf	3969,0,c	;volatile
  3168                           
  3169                           ;main.c: 1036: break;
  3170  002544  0012               	return	
  3171  002546                     l332:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;main.c: 1039: PORTBbits.RB6 = 1;
  3175  002546  8C81               	bsf	3969,6,c	;volatile
  3176                           
  3177                           ;main.c: 1040: break;
  3178  002548  0012               	return	
  3179  00254A                     l333:
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 1043: PORTBbits.RB5 = 1;
  3183  00254A  8A81               	bsf	3969,5,c	;volatile
  3184                           
  3185                           ;main.c: 1044: break;
  3186  00254C  0012               	return	
  3187  00254E                     l6648:
  3188                           
  3189                           ; BSR set to: 0
  3190  00254E  504F               	movf	actionSet@param,w,c
  3191                           
  3192                           ; Switch size 1, requested type "space"
  3193                           ; Number of cases is 18, Range of values is 3 to 20
  3194                           ; switch strategies available:
  3195                           ; Name         Instructions Cycles
  3196                           ; simple_byte           55    28 (average)
  3197                           ;	Chosen strategy is simple_byte
  3198  002550  0A03               	xorlw	3	; case 3
  3199  002552  E0DD               	bz	l315
  3200  002554  0A07               	xorlw	7	; case 4
  3201  002556  E0DD               	bz	l317
  3202  002558  0A01               	xorlw	1	; case 5
  3203  00255A  E0DD               	bz	l318
  3204  00255C  0A03               	xorlw	3	; case 6
  3205  00255E  E0DD               	bz	l319
  3206  002560  0A01               	xorlw	1	; case 7
  3207  002562  E0DD               	bz	l320
  3208  002564  0A0F               	xorlw	15	; case 8
  3209  002566  E0DD               	bz	l321
  3210  002568  0A01               	xorlw	1	; case 9
  3211  00256A  E0DD               	bz	l322
  3212  00256C  0A03               	xorlw	3	; case 10
  3213  00256E  E0DD               	bz	l323
  3214  002570  0A01               	xorlw	1	; case 11
  3215  002572  E0DD               	bz	l324
  3216  002574  0A07               	xorlw	7	; case 12
  3217  002576  E0DD               	bz	l325
  3218  002578  0A01               	xorlw	1	; case 13
  3219  00257A  B4D8               	btfsc	status,2,c
  3220  00257C  0012               	return	
  3221  00257E  0A03               	xorlw	3	; case 14
  3222  002580  B4D8               	btfsc	status,2,c
  3223  002582  0012               	return	
  3224  002584  0A01               	xorlw	1	; case 15
  3225  002586  E0D7               	bz	l328
  3226  002588  0A1F               	xorlw	31	; case 16
  3227  00258A  E0D7               	bz	l329
  3228  00258C  0A01               	xorlw	1	; case 17
  3229  00258E  E0D7               	bz	l330
  3230  002590  0A03               	xorlw	3	; case 18
  3231  002592  E0D7               	bz	l331
  3232  002594  0A01               	xorlw	1	; case 19
  3233  002596  E0D7               	bz	l332
  3234  002598  0A07               	xorlw	7	; case 20
  3235  00259A  A4D8               	btfss	status,2,c
  3236  00259C  0012               	return	
  3237  00259E  D7D5               	goto	l333
  3238  0025A0                     __end_of_actionSet:
  3239                           	opt stack 0
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           prodh	equ	0xFF4
  3245                           prodl	equ	0xFF3
  3246                           intcon	equ	0xFF2
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           indf1	equ	0xFE7
  3250                           fsr1h	equ	0xFE2
  3251                           fsr1l	equ	0xFE1
  3252                           indf2	equ	0xFDF
  3253                           postinc2	equ	0xFDE
  3254                           postdec2	equ	0xFDD
  3255                           plusw2	equ	0xFDB
  3256                           fsr2h	equ	0xFDA
  3257                           fsr2l	equ	0xFD9
  3258                           status	equ	0xFD8
  3259                           
  3260 ;; *************** function _SendInformationEvent *****************
  3261 ;; Defined at:
  3262 ;;		line 813 in file "../main.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  idx             1    wreg     unsigned char 
  3265 ;;  eventClass      1   20[BANK0 ] unsigned char 
  3266 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  3267 ;; Auto vars:     Size  Location     Type
  3268 ;;  idx             1   77[COMRAM] unsigned char 
  3269 ;;  data            3   74[COMRAM] unsigned char [3]
  3270 ;; Return value:  Size  Location     Type
  3271 ;;		None               void
  3272 ;; Registers used:
  3273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3274 ;; Tracked objects:
  3275 ;;		On entry : F/0
  3276 ;;		On exit  : F/0
  3277 ;;		Unchanged: 0/0
  3278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3279 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3280 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3282 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3283 ;;Total ram usage:        6 bytes
  3284 ;; Hardware stack levels used:    1
  3285 ;; Hardware stack levels required when called:    6
  3286 ;; This function calls:
  3287 ;;		_Read_b_eep
  3288 ;;		_sendVSCPFrame
  3289 ;; This function is called by:
  3290 ;;		_actionSet
  3291 ;;		_actionClr
  3292 ;;		_actionSetAll
  3293 ;;		_actionClrAll
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text13
  3298  0029F0                     __ptext13:
  3299                           	opt stack 0
  3300  0029F0                     _SendInformationEvent:
  3301                           	opt stack 22
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;incstack = 0
  3305                           ;incstack = 0
  3306                           ;SendInformationEvent@idx stored from wreg
  3307  0029F0  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;main.c: 814: uint8_t data[3];
  3311                           ;main.c: 815: idx -= 3;
  3312  0029F4  0E03               	movlw	3
  3313  0029F6  5E4E               	subwf	SendInformationEvent@idx,f,c
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;main.c: 817: data[ 0 ] = idx;
  3317  0029F8  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;main.c: 818: data[ 1 ] = Read_b_eep(0x21 + 0);
  3321  0029FC  6A09               	clrf	?_Read_b_eep+1,c
  3322  0029FE  0E21               	movlw	33
  3323  002A00  6E08               	movwf	?_Read_b_eep,c
  3324  002A02  EC62  F017         	call	_Read_b_eep	;wreg free
  3325  002A06  6E4C               	movwf	SendInformationEvent@data+1,c
  3326                           
  3327                           ;main.c: 819: data[ 2 ] = Read_b_eep(0x21 + 5 + idx);
  3328  002A08  0E26               	movlw	38
  3329  002A0A  244E               	addwf	SendInformationEvent@idx,w,c
  3330  002A0C  6E08               	movwf	?_Read_b_eep,c
  3331  002A0E  6A09               	clrf	?_Read_b_eep+1,c
  3332  002A10  0E00               	movlw	0
  3333  002A12  2209               	addwfc	?_Read_b_eep+1,f,c
  3334  002A14  EC62  F017         	call	_Read_b_eep	;wreg free
  3335  002A18  6E4D               	movwf	SendInformationEvent@data+2,c
  3336                           
  3337                           ;main.c: 820: sendVSCPFrame( eventClass,
  3338                           ;main.c: 821: eventTypeId,
  3339                           ;main.c: 822: vscp_nickname,
  3340                           ;main.c: 823: 0x03,
  3341                           ;main.c: 824: 3,
  3342                           ;main.c: 825: data );
  3343  002A1A  0100               	movlb	0	; () banked
  3344  002A1C  C0A4  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  3345  002A20  6A40               	clrf	?_sendVSCPFrame+1,c
  3346  002A22  C0A5  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  3347  002A26  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3348  002A2A  0E03               	movlw	3
  3349  002A2C  6E43               	movwf	?_sendVSCPFrame+4,c
  3350  002A2E  6E44               	movwf	?_sendVSCPFrame+5,c
  3351  002A30  0E4B               	movlw	low SendInformationEvent@data
  3352  002A32  6E45               	movwf	?_sendVSCPFrame+6,c
  3353  002A34  0E00               	movlw	high SendInformationEvent@data
  3354  002A36  6E46               	movwf	?_sendVSCPFrame+7,c
  3355  002A38  0E0F               	movlw	15
  3356  002A3A  6E46               	movwf	?_sendVSCPFrame+7,c
  3357  002A3C  0E5F               	movlw	__accesstop+-1
  3358  002A3E  6445               	cpfsgt	?_sendVSCPFrame+6,c
  3359  002A40  6A46               	clrf	?_sendVSCPFrame+7,c
  3360  002A42  EF92  F013         	goto	_sendVSCPFrame	;wreg free
  3361  002A46                     __end_of_SendInformationEvent:
  3362                           	opt stack 0
  3363                           tblptru	equ	0xFF8
  3364                           tblptrh	equ	0xFF7
  3365                           tblptrl	equ	0xFF6
  3366                           tablat	equ	0xFF5
  3367                           prodh	equ	0xFF4
  3368                           prodl	equ	0xFF3
  3369                           intcon	equ	0xFF2
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           indf1	equ	0xFE7
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           plusw2	equ	0xFDB
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function _vscp_handleProtocolEvent *****************
  3384 ;; Defined at:
  3385 ;;		line 797 in file "../../vscp_firmware/common/vscp_firmware.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  bytes           1   33[BANK0 ] unsigned char 
  3390 ;;  page_save       2   29[BANK0 ] unsigned short 
  3391 ;;  i               1   39[BANK0 ] unsigned char 
  3392 ;;  bytes           2   43[BANK0 ] unsigned short 
  3393 ;;  page_save       2   27[BANK0 ] unsigned short 
  3394 ;;  byte            1   42[BANK0 ] unsigned char 
  3395 ;;  cb              1   38[BANK0 ] unsigned char 
  3396 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3397 ;;  j               1   47[BANK0 ] unsigned char 
  3398 ;;  i               1   45[BANK0 ] unsigned char 
  3399 ;;  k               1   40[BANK0 ] unsigned char 
  3400 ;;  i               1   41[BANK0 ] unsigned char 
  3401 ;;  len             1   36[BANK0 ] unsigned char 
  3402 ;;  pos             1   35[BANK0 ] unsigned char 
  3403 ;;  i               1   46[BANK0 ] unsigned char 
  3404 ;;  len             1   34[BANK0 ] unsigned char 
  3405 ;;  pos             1   32[BANK0 ] unsigned char 
  3406 ;;  offset          1   31[BANK0 ] unsigned char 
  3407 ;; Return value:  Size  Location     Type
  3408 ;;		None               void
  3409 ;; Registers used:
  3410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3411 ;; Tracked objects:
  3412 ;;		On entry : F/0
  3413 ;;		On exit  : 0/0
  3414 ;;		Unchanged: 0/0
  3415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3417 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3418 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3419 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3420 ;;Total ram usage:       28 bytes
  3421 ;; Hardware stack levels used:    1
  3422 ;; Hardware stack levels required when called:    8
  3423 ;; This function calls:
  3424 ;;		_vscp_init
  3425 ;;		_vscp_readAppReg
  3426 ;;		_vscp_writeAppReg
  3427 ;;		_vscp_sendEvent
  3428 ;;		_vscp_getGUID
  3429 ;;		_vscp_getMDF_URL
  3430 ;;		_vscp_goBootloaderMode
  3431 ;;		_vscp_getMatrixInfo
  3432 ;;		_vscp_handleHeartbeat
  3433 ;;		_vscp_handleSetNickname
  3434 ;;		_vscp_handleDropNickname
  3435 ;;		_vscp_newNodeOnline
  3436 ;;		_vscp_readRegister
  3437 ;;		_vscp_readStdReg
  3438 ;;		_vscp_writeRegister
  3439 ;;		_vscp_writeStdReg
  3440 ;;		___lbmod
  3441 ;; This function is called by:
  3442 ;;		_main
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text14
  3447  000F22                     __ptext14:
  3448                           	opt stack 0
  3449  000F22                     _vscp_handleProtocolEvent:
  3450                           	opt stack 22
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;vscp_firmware.c: 799: if (0 == vscp_imsg.vscp_class) {
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;incstack = 0
  3457                           ;incstack = 0
  3458  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  3459  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3460  000F26  A4D8               	btfss	status,2,c
  3461  000F28  0012               	return	
  3462  000F2A  D2AE               	goto	l7600
  3463  000F2C                     l7182:
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;vscp_firmware.c: 806: vscp_handleHeartbeat();
  3467  000F2C  EF6D  F015         	goto	_vscp_handleHeartbeat	;wreg free
  3468  000F30                     l7184:
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;vscp_firmware.c: 811: vscp_newNodeOnline();
  3472  000F30  EF43  F016         	goto	_vscp_newNodeOnline	;wreg free
  3473  000F34                     l7186:
  3474                           
  3475                           ; BSR set to: 0
  3476                           ;vscp_firmware.c: 816: vscp_handleSetNickname();
  3477  000F34  EFC9  F016         	goto	_vscp_handleSetNickname	;wreg free
  3478  000F38                     l7188:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;vscp_firmware.c: 821: vscp_handleDropNickname();
  3482  000F38  EF15  F016         	goto	_vscp_handleDropNickname	;wreg free
  3483  000F3C                     l7190:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;vscp_firmware.c: 826: if ( ( 2 == (vscp_imsg.flags & 0x0f) ) &&
  3487                           ;vscp_firmware.c: 827: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3488  000F3C  5175               	movf	_vscp_imsg& (0+255),w,b
  3489  000F3E  0B0F               	andlw	15
  3490  000F40  0A02               	xorlw	2
  3491  000F42  A4D8               	btfss	status,2,c
  3492  000F44  0012               	return	
  3493                           
  3494                           ; BSR set to: 0
  3495  000F46  5170               	movf	_vscp_nickname& (0+255),w,b
  3496  000F48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3497  000F4C  62DF               	cpfseq	indf2,c
  3498  000F4E  0012               	return	
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;vscp_firmware.c: 829: if (vscp_imsg.data[ 1 ] < 0x80) {
  3502  000F50  0E80               	movlw	128
  3503  000F52  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3504  000F54  D011               	goto	l7210
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;vscp_firmware.c: 832: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3508  000F56  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3509  000F58  ECEC  F013         	call	_vscp_readAppReg
  3510  000F5C                     L1:
  3511  000F5C  0100               	movlb	0	; () banked
  3512  000F5E  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;vscp_firmware.c: 835: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3516  000F60  C07C  F088         	movff	_vscp_imsg+7,_vscp_omsg+5
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;vscp_firmware.c: 837: vscp_omsg.priority = 0x03;
  3520  000F64  0E03               	movlw	3
  3521  000F66  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;vscp_firmware.c: 838: vscp_omsg.flags = 0x80 + 2;
  3525  000F68  0E82               	movlw	130
  3526  000F6A  6F83               	movwf	_vscp_omsg& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;vscp_firmware.c: 839: vscp_omsg.vscp_class = 0;
  3530  000F6C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3531  000F6E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;vscp_firmware.c: 840: vscp_omsg.vscp_type = 10;
  3535  000F70  0E0A               	movlw	10
  3536  000F72  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;vscp_firmware.c: 843: vscp_sendEvent();
  3540  000F74  EF7F  F016         	goto	_vscp_sendEvent	;wreg free
  3541  000F78                     l7210:
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;vscp_firmware.c: 845: else {
  3545                           ;vscp_firmware.c: 848: vscp_omsg.data[ 1 ] =
  3546                           ;vscp_firmware.c: 849: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3547  000F78  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3548  000F7A  EC8E  F00C         	call	_vscp_readStdReg
  3549  000F7E  D7EE               	goto	L1
  3550  000F80                     l7224:
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;vscp_firmware.c: 867: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3554                           ;vscp_firmware.c: 868: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3555  000F80  5175               	movf	_vscp_imsg& (0+255),w,b
  3556  000F82  0B0F               	andlw	15
  3557  000F84  0A03               	xorlw	3
  3558  000F86  A4D8               	btfss	status,2,c
  3559  000F88  0012               	return	
  3560                           
  3561                           ; BSR set to: 0
  3562  000F8A  5170               	movf	_vscp_nickname& (0+255),w,b
  3563  000F8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3564  000F90  62DF               	cpfseq	indf2,c
  3565  000F92  0012               	return	
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;vscp_firmware.c: 870: if (vscp_imsg.data[ 1 ] < 0x80) {
  3569  000F94  0E80               	movlw	128
  3570  000F96  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3571  000F98  D006               	goto	l7244
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;vscp_firmware.c: 873: vscp_omsg.data[ 1 ] =
  3575                           ;vscp_firmware.c: 874: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3576  000F9A  C07D  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3577  000F9E  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3578  000FA0  ECD5  F00E         	call	_vscp_writeAppReg
  3579  000FA4  D7DB               	goto	L1
  3580  000FA6                     l7244:
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;vscp_firmware.c: 888: else {
  3584                           ;vscp_firmware.c: 891: vscp_omsg.data[ 1 ] =
  3585                           ;vscp_firmware.c: 892: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3586  000FA6  C07D  F010         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3587  000FAA  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3588  000FAC  EC11  F011         	call	_vscp_writeStdReg
  3589  000FB0  D7D5               	goto	L1
  3590  000FB2                     l7258:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;vscp_firmware.c: 910: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3594                           ;vscp_firmware.c: 912: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3595                           ;vscp_firmware.c: 913: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3596                           ;vscp_firmware.c: 914: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3597                           ;vscp_firmware.c: 915: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3598                           ;vscp_firmware.c: 916: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3599                           ;vscp_firmware.c: 917: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3600  000FB2  5170               	movf	_vscp_nickname& (0+255),w,b
  3601  000FB4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3602  000FB8  62DF               	cpfseq	indf2,c
  3603  000FBA  0012               	return	
  3604                           
  3605                           ; BSR set to: 0
  3606  000FBC  0E00               	movlw	0
  3607  000FBE  ECBA  F017         	call	_vscp_getGUID
  3608  000FC2  0100               	movlb	0	; () banked
  3609  000FC4  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3610  000FC6  A4D8               	btfss	status,2,c
  3611  000FC8  0012               	return	
  3612                           
  3613                           ; BSR set to: 0
  3614  000FCA  0E03               	movlw	3
  3615  000FCC  ECBA  F017         	call	_vscp_getGUID
  3616  000FD0  0100               	movlb	0	; () banked
  3617  000FD2  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3618  000FD4  A4D8               	btfss	status,2,c
  3619  000FD6  0012               	return	
  3620                           
  3621                           ; BSR set to: 0
  3622  000FD8  0E05               	movlw	5
  3623  000FDA  ECBA  F017         	call	_vscp_getGUID
  3624  000FDE  0100               	movlb	0	; () banked
  3625  000FE0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3626  000FE2  A4D8               	btfss	status,2,c
  3627  000FE4  0012               	return	
  3628                           
  3629                           ; BSR set to: 0
  3630  000FE6  0E07               	movlw	7
  3631  000FE8  ECBA  F017         	call	_vscp_getGUID
  3632  000FEC  0100               	movlb	0	; () banked
  3633  000FEE  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3634  000FF0  A4D8               	btfss	status,2,c
  3635  000FF2  0012               	return	
  3636                           
  3637                           ; BSR set to: 0
  3638  000FF4  5053               	movf	_vscp_page_select+1,w,c
  3639  000FF6  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3640  000FF8  A4D8               	btfss	status,2,c
  3641  000FFA  0012               	return	
  3642                           
  3643                           ; BSR set to: 0
  3644  000FFC  5052               	movf	_vscp_page_select,w,c
  3645  000FFE  EE20  F082         	lfsr	2,_vscp_imsg+13
  3646  001002  62DF               	cpfseq	indf2,c
  3647  001004  0012               	return	
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;vscp_firmware.c: 919: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3651  001006  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3652  001008  EF19  F017         	goto	_vscp_goBootloaderMode
  3653  00100C                     l7274:
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;vscp_firmware.c: 928: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3657                           ;vscp_firmware.c: 929: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3658                           ;vscp_firmware.c: 930: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3659                           ;vscp_firmware.c: 931: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3660  00100C  0E00               	movlw	0
  3661  00100E  ECBA  F017         	call	_vscp_getGUID
  3662  001012  0100               	movlb	0	; () banked
  3663  001014  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3664  001016  E173               	bnz	l7318
  3665                           
  3666                           ; BSR set to: 0
  3667  001018  0E01               	movlw	1
  3668  00101A  ECBA  F017         	call	_vscp_getGUID
  3669  00101E  0100               	movlb	0	; () banked
  3670  001020  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3671  001022  E16D               	bnz	l7318
  3672                           
  3673                           ; BSR set to: 0
  3674  001024  0E02               	movlw	2
  3675  001026  ECBA  F017         	call	_vscp_getGUID
  3676  00102A  0100               	movlb	0	; () banked
  3677  00102C  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3678  00102E  E167               	bnz	l7318
  3679                           
  3680                           ; BSR set to: 0
  3681  001030  0E03               	movlw	3
  3682  001032  ECBA  F017         	call	_vscp_getGUID
  3683  001036  0100               	movlb	0	; () banked
  3684  001038  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3685  00103A  E161               	bnz	l7318
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;vscp_firmware.c: 932: vscp_guid_reset |= 0x10;
  3689  00103C  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  3690  00103E  D05F               	goto	l7318
  3691  001040                     l7284:
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;vscp_firmware.c: 937: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3695                           ;vscp_firmware.c: 938: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3696                           ;vscp_firmware.c: 939: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3697                           ;vscp_firmware.c: 940: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3698  001040  0E04               	movlw	4
  3699  001042  ECBA  F017         	call	_vscp_getGUID
  3700  001046  0100               	movlb	0	; () banked
  3701  001048  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3702  00104A  E159               	bnz	l7318
  3703                           
  3704                           ; BSR set to: 0
  3705  00104C  0E05               	movlw	5
  3706  00104E  ECBA  F017         	call	_vscp_getGUID
  3707  001052  0100               	movlb	0	; () banked
  3708  001054  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3709  001056  E153               	bnz	l7318
  3710                           
  3711                           ; BSR set to: 0
  3712  001058  0E06               	movlw	6
  3713  00105A  ECBA  F017         	call	_vscp_getGUID
  3714  00105E  0100               	movlb	0	; () banked
  3715  001060  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3716  001062  E14D               	bnz	l7318
  3717                           
  3718                           ; BSR set to: 0
  3719  001064  0E07               	movlw	7
  3720  001066  ECBA  F017         	call	_vscp_getGUID
  3721  00106A  0100               	movlb	0	; () banked
  3722  00106C  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3723  00106E  E147               	bnz	l7318
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;vscp_firmware.c: 941: vscp_guid_reset |= 0x20;
  3727  001070  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  3728  001072  D045               	goto	l7318
  3729  001074                     l7294:
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;vscp_firmware.c: 946: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3733                           ;vscp_firmware.c: 947: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3734                           ;vscp_firmware.c: 948: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3735                           ;vscp_firmware.c: 949: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3736  001074  0E08               	movlw	8
  3737  001076  ECBA  F017         	call	_vscp_getGUID
  3738  00107A  0100               	movlb	0	; () banked
  3739  00107C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3740  00107E  E13F               	bnz	l7318
  3741                           
  3742                           ; BSR set to: 0
  3743  001080  0E09               	movlw	9
  3744  001082  ECBA  F017         	call	_vscp_getGUID
  3745  001086  0100               	movlb	0	; () banked
  3746  001088  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3747  00108A  E139               	bnz	l7318
  3748                           
  3749                           ; BSR set to: 0
  3750  00108C  0E0A               	movlw	10
  3751  00108E  ECBA  F017         	call	_vscp_getGUID
  3752  001092  0100               	movlb	0	; () banked
  3753  001094  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3754  001096  E133               	bnz	l7318
  3755                           
  3756                           ; BSR set to: 0
  3757  001098  0E0B               	movlw	11
  3758  00109A  ECBA  F017         	call	_vscp_getGUID
  3759  00109E  0100               	movlb	0	; () banked
  3760  0010A0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3761  0010A2  E12D               	bnz	l7318
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;vscp_firmware.c: 950: vscp_guid_reset |= 0x40;
  3765  0010A4  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  3766  0010A6  D02B               	goto	l7318
  3767  0010A8                     l7304:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;vscp_firmware.c: 955: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3771                           ;vscp_firmware.c: 956: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3772                           ;vscp_firmware.c: 957: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3773                           ;vscp_firmware.c: 958: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3774  0010A8  0E0C               	movlw	12
  3775  0010AA  ECBA  F017         	call	_vscp_getGUID
  3776  0010AE  0100               	movlb	0	; () banked
  3777  0010B0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3778  0010B2  E125               	bnz	l7318
  3779                           
  3780                           ; BSR set to: 0
  3781  0010B4  0E0D               	movlw	13
  3782  0010B6  ECBA  F017         	call	_vscp_getGUID
  3783  0010BA  0100               	movlb	0	; () banked
  3784  0010BC  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3785  0010BE  E11F               	bnz	l7318
  3786                           
  3787                           ; BSR set to: 0
  3788  0010C0  0E0E               	movlw	14
  3789  0010C2  ECBA  F017         	call	_vscp_getGUID
  3790  0010C6  0100               	movlb	0	; () banked
  3791  0010C8  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3792  0010CA  E119               	bnz	l7318
  3793                           
  3794                           ; BSR set to: 0
  3795  0010CC  0E0F               	movlw	15
  3796  0010CE  ECBA  F017         	call	_vscp_getGUID
  3797  0010D2  0100               	movlb	0	; () banked
  3798  0010D4  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3799  0010D6  E113               	bnz	l7318
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;vscp_firmware.c: 959: vscp_guid_reset |= 0x80;
  3803  0010D8  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  3804  0010DA  D011               	goto	l7318
  3805  0010DC                     l1016:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;vscp_firmware.c: 964: vscp_guid_reset = 0;
  3809  0010DC  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  3810                           
  3811                           ;vscp_firmware.c: 965: break;
  3812  0010DE  D00F               	goto	l7318
  3813  0010E0                     l7316:
  3814                           
  3815                           ; BSR set to: 0
  3816  0010E0  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3817  0010E2  0B0F               	andlw	15
  3818  0010E4  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3819  0010E6  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3820                           
  3821                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3822                           ; Switch size 1, requested type "space"
  3823                           ; Number of cases is 1, Range of values is 0 to 0
  3824                           ; switch strategies available:
  3825                           ; Name         Instructions Cycles
  3826                           ; simple_byte            4     3 (average)
  3827                           ;	Chosen strategy is simple_byte
  3828  0010E8  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3829  0010EA  E1F8               	bnz	l1016
  3830                           
  3831                           ; BSR set to: 0
  3832                           ; Switch size 1, requested type "space"
  3833                           ; Number of cases is 4, Range of values is 0 to 3
  3834                           ; switch strategies available:
  3835                           ; Name         Instructions Cycles
  3836                           ; simple_byte           13     7 (average)
  3837                           ;	Chosen strategy is simple_byte
  3838  0010EC  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3839  0010EE  E08E               	bz	l7274
  3840  0010F0  0A01               	xorlw	1	; case 1
  3841  0010F2  E0A6               	bz	l7284
  3842  0010F4  0A03               	xorlw	3	; case 2
  3843  0010F6  E0BE               	bz	l7294
  3844  0010F8  0A01               	xorlw	1	; case 3
  3845  0010FA  E0D6               	bz	l7304
  3846  0010FC  D7EF               	goto	l1016
  3847  0010FE                     l7318:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;vscp_firmware.c: 968: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3851  0010FE  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3852  001100  0BF0               	andlw	240
  3853  001102  0AF0               	xorlw	240
  3854  001104  B4D8               	btfsc	status,2,c
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;vscp_firmware.c: 970: vscp_init();
  3858  001106  EC4B  F015         	call	_vscp_init	;wreg free
  3859  00110A  0012               	return	
  3860  00110C                     l7322:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;vscp_firmware.c: 976: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3864  00110C  5170               	movf	_vscp_nickname& (0+255),w,b
  3865  00110E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3866  001112  62DF               	cpfseq	indf2,c
  3867  001114  0012               	return	
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;vscp_firmware.c: 978: uint8_t i;
  3871                           ;vscp_firmware.c: 979: uint8_t pos = 0;
  3872  001116  6BB0               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3873                           
  3874                           ;vscp_firmware.c: 980: uint8_t offset = vscp_imsg.data[ 1 ];
  3875  001118  C07C  F0AF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3876                           
  3877                           ;vscp_firmware.c: 981: uint8_t len = vscp_imsg.data[ 2 ];
  3878  00111C  C07D  F0B2         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3879                           
  3880                           ;vscp_firmware.c: 983: for (i = 0; i < len; i++) {
  3881  001120  6BBE               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3882  001122  D042               	goto	l7354
  3883  001124                     l7326:
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;vscp_firmware.c: 984: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3887  001124  0E07               	movlw	7
  3888  001126  6E08               	movwf	?___lbmod,c
  3889  001128  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3890  00112A  EC58  F016         	call	___lbmod
  3891  00112E  0100               	movlb	0	; () banked
  3892  001130  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3893  001132  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3894  001134  0F89               	addlw	low (_vscp_omsg+6)
  3895  001136  6ED9               	movwf	fsr2l,c
  3896  001138  6ADA               	clrf	fsr2h,c
  3897  00113A  51AF               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3898  00113C  25BE               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3899  00113E  EC7A  F017         	call	_vscp_readRegister
  3900  001142  6EDF               	movwf	indf2,c
  3901                           
  3902                           ;vscp_firmware.c: 986: if ( (i % 7) == 6 || i == (len - 1) ) {
  3903  001144  0E07               	movlw	7
  3904  001146  6E08               	movwf	?___lbmod,c
  3905  001148  0100               	movlb	0	; () banked
  3906  00114A  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3907  00114C  EC58  F016         	call	___lbmod
  3908  001150  0A06               	xorlw	6
  3909  001152  E00B               	bz	l7332
  3910  001154  0EFF               	movlw	255
  3911  001156  0100               	movlb	0	; () banked
  3912  001158  25B2               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3913  00115A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3914  00115C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3915  00115E  0EFF               	movlw	255
  3916  001160  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3917  001162  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3918  001164  19A4               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3919  001166  11A5               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3920  001168  E11E               	bnz	l7352
  3921  00116A                     l7332:
  3922                           
  3923                           ;vscp_firmware.c: 988: uint8_t bytes;
  3924                           ;vscp_firmware.c: 990: if ( ( i % 7 ) == 6 ) {
  3925  00116A  0E07               	movlw	7
  3926  00116C  6E08               	movwf	?___lbmod,c
  3927  00116E  0100               	movlb	0	; () banked
  3928  001170  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3929  001172  EC58  F016         	call	___lbmod
  3930  001176  0A06               	xorlw	6
  3931  001178  E103               	bnz	l7336
  3932                           
  3933                           ;vscp_firmware.c: 991: bytes = 7;
  3934  00117A  0E07               	movlw	7
  3935  00117C  0100               	movlb	0	; () banked
  3936  00117E  D009               	goto	L2
  3937  001180                     l7336:
  3938                           
  3939                           ;vscp_firmware.c: 993: else {
  3940                           ;vscp_firmware.c: 994: bytes = ( i % 7 ) + 1;
  3941  001180  0E07               	movlw	7
  3942  001182  6E08               	movwf	?___lbmod,c
  3943  001184  0100               	movlb	0	; () banked
  3944  001186  51BE               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3945  001188  EC58  F016         	call	___lbmod
  3946  00118C  0100               	movlb	0	; () banked
  3947  00118E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3948  001190  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3949  001192                     L2:
  3950  001192  6FB1               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;vscp_firmware.c: 995: }
  3954                           ;vscp_firmware.c: 997: vscp_omsg.flags = 0x80 + bytes + 1;
  3955  001194  51B1               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3956  001196  0F81               	addlw	129
  3957  001198  6F83               	movwf	_vscp_omsg& (0+255),b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;vscp_firmware.c: 998: vscp_omsg.priority = 0x07;
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;vscp_firmware.c: 999: vscp_omsg.vscp_class = 0;
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;vscp_firmware.c: 1000: vscp_omsg.vscp_type = 26;
  3967  00119A  D9BE               	call	PL34	;call to abstracted procedure
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;vscp_firmware.c: 1001: vscp_omsg.data[ 0 ] = pos;
  3971  00119C  C0B0  F088         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;vscp_firmware.c: 1004: vscp_sendEvent();
  3975  0011A0  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;vscp_firmware.c: 1005: pos++;
  3979  0011A4  2BB0               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3980  0011A6                     l7352:
  3981                           
  3982                           ; BSR set to: 0
  3983  0011A6  2BBE               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3984  0011A8                     l7354:
  3985                           
  3986                           ; BSR set to: 0
  3987  0011A8  51B2               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3988  0011AA  5DBE               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3989  0011AC  B0D8               	btfsc	status,0,c
  3990  0011AE  0012               	return	
  3991  0011B0  D7B9               	goto	l7326
  3992  0011B2                     l7356:
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;vscp_firmware.c: 1013: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3996  0011B2  5170               	movf	_vscp_nickname& (0+255),w,b
  3997  0011B4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3998  0011B8  62DF               	cpfseq	indf2,c
  3999  0011BA  0012               	return	
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;vscp_firmware.c: 1014: uint8_t i;
  4003                           ;vscp_firmware.c: 1015: uint8_t pos = vscp_imsg.data[ 1 ];
  4004  0011BC  C07C  F0B3         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1133
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;vscp_firmware.c: 1016: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  4008  0011C0  5175               	movf	_vscp_imsg& (0+255),w,b
  4009  0011C2  0FFE               	addlw	254
  4010  0011C4  0B07               	andlw	7
  4011  0011C6  6FB4               	movwf	vscp_handleProtocolEvent@len_1134& (0+255),b
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;vscp_firmware.c: 1018: for (i = 0; i < len; i++) {
  4015  0011C8  6BB9               	clrf	vscp_handleProtocolEvent@i_1132& (0+255),b
  4016  0011CA  D016               	goto	l7370
  4017  0011CC                     l7364:
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;vscp_firmware.c: 1020: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  4021  0011CC  51B9               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4022  0011CE  0F7D               	addlw	low (_vscp_imsg+8)
  4023  0011D0  6ED9               	movwf	fsr2l,c
  4024  0011D2  6ADA               	clrf	fsr2h,c
  4025  0011D4  50DF               	movf	indf2,w,c
  4026  0011D6  6E18               	movwf	?_vscp_writeRegister,c
  4027  0011D8  51B3               	movf	vscp_handleProtocolEvent@pos_1133& (0+255),w,b
  4028  0011DA  25B9               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4029  0011DC  EC0A  F017         	call	_vscp_writeRegister
  4030                           
  4031                           ;vscp_firmware.c: 1021: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  4032  0011E0  0100               	movlb	0	; () banked
  4033  0011E2  51B9               	movf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4034  0011E4  0F89               	addlw	low (_vscp_omsg+6)
  4035  0011E6  6ED9               	movwf	fsr2l,c
  4036  0011E8  6ADA               	clrf	fsr2h,c
  4037  0011EA  51B3               	movf	vscp_handleProtocolEvent@pos_1133& (0+255),w,b
  4038  0011EC  25B9               	addwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4039  0011EE  EC7A  F017         	call	_vscp_readRegister
  4040  0011F2  6EDF               	movwf	indf2,c
  4041  0011F4  0100               	movlb	0	; () banked
  4042  0011F6  2BB9               	incf	vscp_handleProtocolEvent@i_1132& (0+255),f,b
  4043  0011F8                     l7370:
  4044                           
  4045                           ; BSR set to: 0
  4046  0011F8  51B4               	movf	vscp_handleProtocolEvent@len_1134& (0+255),w,b
  4047  0011FA  5DB9               	subwf	vscp_handleProtocolEvent@i_1132& (0+255),w,b
  4048  0011FC  E3E7               	bnc	l7364
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;vscp_firmware.c: 1022: }
  4052                           ;vscp_firmware.c: 1024: vscp_omsg.priority = 0x07;
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;vscp_firmware.c: 1025: vscp_omsg.vscp_class = 0;
  4056                           
  4057                           ;vscp_firmware.c: 1026: vscp_omsg.vscp_type = 26;
  4058  0011FE  D98C               	call	PL34	;call to abstracted procedure
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 0 ] = 0;
  4062  001200  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;vscp_firmware.c: 1028: vscp_omsg.flags = 0x80 + len + 1;
  4066  001202  51B4               	movf	vscp_handleProtocolEvent@len_1134& (0+255),w,b
  4067  001204  0F81               	addlw	129
  4068  001206  6F83               	movwf	_vscp_omsg& (0+255),b
  4069  001208  EF7F  F016         	goto	_vscp_sendEvent
  4070  00120C                     l7382:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;vscp_firmware.c: 1038: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4074  00120C  5170               	movf	_vscp_nickname& (0+255),w,b
  4075  00120E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4076  001212  62DF               	cpfseq	indf2,c
  4077  001214  0012               	return	
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;vscp_firmware.c: 1040: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  4081                           ;vscp_firmware.c: 1041: vscp_imsg.data[ 1 ],
  4082                           ;vscp_firmware.c: 1042: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  4083  001216  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4084  001218  ECEC  F013         	call	_vscp_readAppReg
  4085  00121C  0100               	movlb	0	; () banked
  4086  00121E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4087  001220  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  4088  001222  6E15               	movwf	?_vscp_writeAppReg,c
  4089  001224  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4090  001226  ECD5  F00E         	call	_vscp_writeAppReg
  4091  00122A  D698               	goto	L1
  4092  00122C                     l7398:
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;vscp_firmware.c: 1058: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4096  00122C  5170               	movf	_vscp_nickname& (0+255),w,b
  4097  00122E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4098  001232  62DF               	cpfseq	indf2,c
  4099  001234  0012               	return	
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;vscp_firmware.c: 1060: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  4103                           ;vscp_firmware.c: 1061: vscp_imsg.data[ 1 ],
  4104                           ;vscp_firmware.c: 1062: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  4105  001236  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4106  001238  ECEC  F013         	call	_vscp_readAppReg
  4107  00123C  0100               	movlb	0	; () banked
  4108  00123E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4109  001240  05A4               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  4110  001242  6E15               	movwf	?_vscp_writeAppReg,c
  4111  001244  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4112  001246  ECD5  F00E         	call	_vscp_writeAppReg
  4113  00124A  D688               	goto	L1
  4114  00124C                     l7414:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;vscp_firmware.c: 1078: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  4118                           ;vscp_firmware.c: 1079: (0xff == vscp_imsg.data[ 0 ])) {
  4119  00124C  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  4120  00124E  1970               	xorwf	_vscp_nickname& (0+255),w,b
  4121  001250  E003               	bz	l1040
  4122                           
  4123                           ; BSR set to: 0
  4124  001252  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  4125  001254  A4D8               	btfss	status,2,c
  4126  001256  0012               	return	
  4127  001258                     l1040:
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;vscp_firmware.c: 1081: uint8_t i, j, k = 0;
  4131  001258  6BB8               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;vscp_firmware.c: 1085: vscp_omsg.priority = 0x03;
  4135  00125A  0E03               	movlw	3
  4136  00125C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4137                           
  4138                           ;vscp_firmware.c: 1086: vscp_omsg.flags = 0x80 + 8;
  4139  00125E  0E88               	movlw	136
  4140  001260  6F83               	movwf	_vscp_omsg& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;vscp_firmware.c: 1087: vscp_omsg.vscp_class = 0;
  4144  001262  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4145  001264  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4146                           
  4147                           ;vscp_firmware.c: 1088: vscp_omsg.vscp_type = 32;
  4148  001266  0E20               	movlw	32
  4149  001268  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;vscp_firmware.c: 1090: for (i = 0; i < 3; i++)
  4153  00126A  6BBD               	clrf	vscp_handleProtocolEvent@i_1135& (0+255),b
  4154  00126C                     l1041:
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;vscp_firmware.c: 1091: {
  4158                           ;vscp_firmware.c: 1092: vscp_omsg.data[0] = i;
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;vscp_firmware.c: 1094: for (j = 1; j < 8; j++) {
  4162  00126C  D95C               	call	PL40	;call to abstracted procedure
  4163  00126E                     l7434:
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;vscp_firmware.c: 1095: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  4167  00126E  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4168  001270  0F88               	addlw	low (_vscp_omsg+5)
  4169  001272  6ED9               	movwf	fsr2l,c
  4170  001274  6ADA               	clrf	fsr2h,c
  4171  001276  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4172  001278  080F               	sublw	15
  4173  00127A  ECBA  F017         	call	_vscp_getGUID
  4174  00127E  6EDF               	movwf	indf2,c
  4175  001280  0100               	movlb	0	; () banked
  4176  001282  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;vscp_firmware.c: 1096: if (k > 16)
  4180  001284  0E10               	movlw	16
  4181  001286  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  4182  001288  D001               	goto	l7442
  4183  00128A  D004               	goto	l7446
  4184  00128C                     l7442:
  4185                           
  4186                           ; BSR set to: 0
  4187  00128C  2BBF               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4188                           
  4189                           ; BSR set to: 0
  4190  00128E  0E07               	movlw	7
  4191  001290  65BF               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4192  001292  D7ED               	goto	l7434
  4193  001294                     l7446:
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;vscp_firmware.c: 1098: }
  4197                           ;vscp_firmware.c: 1100: if (k > 16)
  4198  001294  0E10               	movlw	16
  4199  001296  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  4200  001298  D001               	goto	l7450
  4201  00129A  D006               	goto	l1042
  4202  00129C                     l7450:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;vscp_firmware.c: 1103: vscp_sendEvent();
  4206  00129C  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  4207                           
  4208                           ; BSR set to: 0
  4209  0012A0  2BBD               	incf	vscp_handleProtocolEvent@i_1135& (0+255),f,b
  4210                           
  4211                           ; BSR set to: 0
  4212  0012A2  0E02               	movlw	2
  4213  0012A4  65BD               	cpfsgt	vscp_handleProtocolEvent@i_1135& (0+255),b
  4214  0012A6  D7E2               	goto	l1041
  4215  0012A8                     l1042:
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;vscp_firmware.c: 1104: }
  4219                           ;vscp_firmware.c: 1106: for (j = 0; j < 5; j++)
  4220  0012A8  6BBF               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  4221  0012AA                     l7460:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;vscp_firmware.c: 1107: {
  4225                           ;vscp_firmware.c: 1108: if (vscp_getMDF_URL(j) > 0)
  4226  0012AA  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4227  0012AC  EC54  F017         	call	_vscp_getMDF_URL
  4228  0012B0  0900               	iorlw	0
  4229  0012B2  E008               	bz	l7464
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;vscp_firmware.c: 1109: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  4233  0012B4  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4234  0012B6  0F8B               	addlw	low (_vscp_omsg+8)
  4235  0012B8  6ED9               	movwf	fsr2l,c
  4236  0012BA  6ADA               	clrf	fsr2h,c
  4237  0012BC  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4238  0012BE  EC54  F017         	call	_vscp_getMDF_URL
  4239  0012C2  D005               	goto	L3
  4240  0012C4                     l7464:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;vscp_firmware.c: 1110: else
  4244                           ;vscp_firmware.c: 1111: vscp_omsg.data[3 + j] = 0;
  4245  0012C4  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4246  0012C6  0F8B               	addlw	low (_vscp_omsg+8)
  4247  0012C8  6ED9               	movwf	fsr2l,c
  4248  0012CA  6ADA               	clrf	fsr2h,c
  4249  0012CC  0E00               	movlw	0
  4250  0012CE                     L3:
  4251  0012CE  6EDF               	movwf	indf2,c
  4252                           
  4253                           ; BSR set to: 0
  4254  0012D0  2BBF               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4255                           
  4256                           ; BSR set to: 0
  4257  0012D2  0E04               	movlw	4
  4258  0012D4  65BF               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4259  0012D6  D7E9               	goto	l7460
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;vscp_firmware.c: 1112: }
  4263                           ;vscp_firmware.c: 1114: vscp_sendEvent();
  4264  0012D8  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;vscp_firmware.c: 1116: k = 5;
  4268  0012DC  0E05               	movlw	5
  4269  0012DE  6FB8               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;vscp_firmware.c: 1117: for (i = 3; i < 7; i++)
  4273  0012E0  0E03               	movlw	3
  4274  0012E2  6FBD               	movwf	vscp_handleProtocolEvent@i_1135& (0+255),b
  4275  0012E4                     l1051:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;vscp_firmware.c: 1118: {
  4279                           ;vscp_firmware.c: 1119: vscp_omsg.data[0] = i;
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;vscp_firmware.c: 1121: for (j = 1; j < 8; j++) {
  4283  0012E4  D920               	call	PL40	;call to abstracted procedure
  4284  0012E6                     l7486:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;vscp_firmware.c: 1122: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  4288  0012E6  51BF               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4289  0012E8  0F88               	addlw	low (_vscp_omsg+5)
  4290  0012EA  6ED9               	movwf	fsr2l,c
  4291  0012EC  6ADA               	clrf	fsr2h,c
  4292  0012EE  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4293  0012F0  EC54  F017         	call	_vscp_getMDF_URL
  4294  0012F4  6EDF               	movwf	indf2,c
  4295                           
  4296                           ; BSR set to: 0
  4297  0012F6  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4298                           
  4299                           ; BSR set to: 0
  4300  0012F8  2BBF               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4301                           
  4302                           ; BSR set to: 0
  4303  0012FA  0E07               	movlw	7
  4304  0012FC  65BF               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4305  0012FE  D7F3               	goto	l7486
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;vscp_firmware.c: 1123: }
  4309                           ;vscp_firmware.c: 1124: vscp_sendEvent();
  4310  001300  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  4311                           
  4312                           ; BSR set to: 0
  4313  001304  2BBD               	incf	vscp_handleProtocolEvent@i_1135& (0+255),f,b
  4314                           
  4315                           ; BSR set to: 0
  4316  001306  0E06               	movlw	6
  4317  001308  65BD               	cpfsgt	vscp_handleProtocolEvent@i_1135& (0+255),b
  4318  00130A  D7EC               	goto	l1051
  4319  00130C  0C06               	retlw	6
  4320  00130E                     l7500:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;vscp_firmware.c: 1133: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4324  00130E  5170               	movf	_vscp_nickname& (0+255),w,b
  4325  001310  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4326  001314  62DF               	cpfseq	indf2,c
  4327  001316  0012               	return	
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;vscp_firmware.c: 1135: vscp_omsg.priority = 0x03;
  4331  001318  0E03               	movlw	3
  4332  00131A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4333                           
  4334                           ;vscp_firmware.c: 1136: vscp_omsg.flags = 0x80 + 7;
  4335  00131C  0E87               	movlw	135
  4336  00131E  6F83               	movwf	_vscp_omsg& (0+255),b
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;vscp_firmware.c: 1137: vscp_omsg.vscp_class = 0;
  4340  001320  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4341  001322  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4342                           
  4343                           ;vscp_firmware.c: 1138: vscp_omsg.vscp_type = 34;
  4344  001324  0E22               	movlw	34
  4345  001326  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;vscp_firmware.c: 1140: vscp_getMatrixInfo((char *) vscp_omsg.data);
  4349  001328  0E88               	movlw	(_vscp_omsg+5)& (0+255)
  4350  00132A  ECDB  F016         	call	_vscp_getMatrixInfo
  4351  00132E  EF7F  F016         	goto	_vscp_sendEvent
  4352  001332                     l7510:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;vscp_firmware.c: 1156: if ( vscp_nickname == vscp_imsg.data[0] ) {
  4356  001332  5170               	movf	_vscp_nickname& (0+255),w,b
  4357  001334  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4358  001338  62DF               	cpfseq	indf2,c
  4359  00133A  0012               	return	
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;vscp_firmware.c: 1159: uint8_t byte = 0;
  4363  00133C  6BBA               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;vscp_firmware.c: 1160: uint8_t bytes_this_time, cb;
  4367                           ;vscp_firmware.c: 1164: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  4368  00133E  C075  F0A4         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  4369  001342  0E0F               	movlw	15
  4370  001344  17A4               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4371  001346  0E04               	movlw	4
  4372  001348  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4373  00134A  E312               	bnc	l7526
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;vscp_firmware.c: 1167: bytes = (uint16_t)vscp_imsg.data[4];
  4377  00134C  C07F  F0BB         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1139
  4378  001350  6BBC               	clrf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;vscp_firmware.c: 1169: if (bytes == 0) bytes = 256;
  4382  001352  51BC               	movf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4383  001354  11BB               	iorwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4384  001356  E103               	bnz	l7522
  4385                           
  4386                           ; BSR set to: 0
  4387  001358  0E01               	movlw	1
  4388  00135A  6FBC               	movwf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4389  00135C  6BBB               	clrf	vscp_handleProtocolEvent@bytes_1139& (0+255),b
  4390  00135E                     l7522:
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;vscp_firmware.c: 1171: if (bytes > 256) bytes = 256;
  4394  00135E  0E01               	movlw	1
  4395  001360  5DBB               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4396  001362  0E01               	movlw	1
  4397  001364  59BC               	subwfb	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4398  001366  E307               	bnc	l7528
  4399                           
  4400                           ; BSR set to: 0
  4401  001368  0E01               	movlw	1
  4402  00136A  6FBC               	movwf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4403  00136C  0E00               	movlw	0
  4404  00136E  D002               	goto	L4
  4405  001370                     l7526:
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;vscp_firmware.c: 1173: else {
  4409                           ;vscp_firmware.c: 1174: bytes = 1;
  4410  001370  6BBC               	clrf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),b
  4411  001372  0E01               	movlw	1
  4412  001374                     L4:
  4413  001374  6FBB               	movwf	vscp_handleProtocolEvent@bytes_1139& (0+255),b
  4414  001376                     l7528:
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;vscp_firmware.c: 1175: }
  4418                           ;vscp_firmware.c: 1178: page_save = vscp_page_select;
  4419  001376  C052  F0AB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4420  00137A  C053  F0AC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;vscp_firmware.c: 1183: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4424  00137E  D8B6               	call	PL12	;call to abstracted procedure
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;vscp_firmware.c: 1186: vscp_omsg.priority = 0x07;
  4428  001380  0E07               	movlw	7
  4429  001382  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;vscp_firmware.c: 1187: vscp_omsg.vscp_class = 0;
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;vscp_firmware.c: 1188: vscp_omsg.vscp_type = 39;
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;vscp_firmware.c: 1189: vscp_omsg.data[0] = 0;
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;vscp_firmware.c: 1190: vscp_omsg.data[1] = vscp_imsg.data[1];
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;vscp_firmware.c: 1191: vscp_omsg.data[2] = vscp_imsg.data[2];
  4445  001384  D8BF               	call	PL16	;call to abstracted procedure
  4446  001386                     l7544:
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;vscp_firmware.c: 1195: if ( ( bytes - byte ) >= 4 ) {
  4450  001386  51BA               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4451  001388  5DBB               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4452  00138A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4453  00138C  0E00               	movlw	0
  4454  00138E  59BC               	subwfb	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4455  001390  6FA5               	movwf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4456  001392  0E04               	movlw	4
  4457  001394  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4458  001396  0E00               	movlw	0
  4459  001398  59A5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4460  00139A  E302               	bnc	l7548
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;vscp_firmware.c: 1196: bytes_this_time = 4;
  4464  00139C  0E04               	movlw	4
  4465  00139E  D002               	goto	L5
  4466  0013A0                     l7548:
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;vscp_firmware.c: 1198: else {
  4470                           ;vscp_firmware.c: 1199: bytes_this_time = (bytes - byte);
  4471  0013A0  51BA               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4472  0013A2  5DBB               	subwf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4473  0013A4                     L5:
  4474  0013A4  6FB5               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;vscp_firmware.c: 1200: }
  4478                           ;vscp_firmware.c: 1203: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4479  0013A6  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4480  0013A8  0F84               	addlw	132
  4481  0013AA  6F83               	movwf	_vscp_omsg& (0+255),b
  4482                           
  4483                           ;vscp_firmware.c: 1204: vscp_omsg.data[3] =
  4484                           ;vscp_firmware.c: 1205: vscp_imsg.data[3] + byte;
  4485  0013AC  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4486  0013AE  25BA               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4487  0013B0  6F8B               	movwf	(_vscp_omsg+8)& (0+255),b
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;vscp_firmware.c: 1208: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4491  0013B2  6BB6               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4492  0013B4  D00C               	goto	l7556
  4493  0013B6                     l7552:
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;vscp_firmware.c: 1209: vscp_omsg.data[ (4 + cb) ] =
  4497                           ;vscp_firmware.c: 1210: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4498  0013B6  51B6               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4499  0013B8  0F8C               	addlw	low (_vscp_omsg+9)
  4500  0013BA  6ED9               	movwf	fsr2l,c
  4501  0013BC  6ADA               	clrf	fsr2h,c
  4502  0013BE  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4503  0013C0  25BA               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4504  0013C2  25B6               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4505  0013C4  EC7A  F017         	call	_vscp_readRegister
  4506  0013C8  6EDF               	movwf	indf2,c
  4507  0013CA  0100               	movlb	0	; () banked
  4508  0013CC  2BB6               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4509  0013CE                     l7556:
  4510                           
  4511                           ; BSR set to: 0
  4512  0013CE  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4513  0013D0  5DB6               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4514  0013D2  E3F1               	bnc	l7552
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;vscp_firmware.c: 1211: }
  4518                           ;vscp_firmware.c: 1214: vscp_sendEvent();
  4519  0013D4  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;vscp_firmware.c: 1217: byte += bytes_this_time;
  4523  0013D8  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4524  0013DA  27BA               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;vscp_firmware.c: 1220: vscp_omsg.data[0] += 1;
  4528  0013DC  2B88               	incf	(_vscp_omsg+5)& (0+255),f,b
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;vscp_firmware.c: 1222: } while (byte < bytes);
  4532  0013DE  51BA               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4533  0013E0  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4534  0013E2  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4535  0013E4  51BB               	movf	vscp_handleProtocolEvent@bytes_1139& (0+255),w,b
  4536  0013E6  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4537  0013E8  51BC               	movf	(vscp_handleProtocolEvent@bytes_1139+1)& (0+255),w,b
  4538  0013EA  59A5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4539  0013EC  E3CC               	bnc	l7544
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;vscp_firmware.c: 1225: vscp_page_select = page_save;
  4543  0013EE  C0AB  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4544  0013F2  C0AC  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4545  0013F6  0012               	return	
  4546  0013F8                     l7566:
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;vscp_firmware.c: 1232: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4550  0013F8  5170               	movf	_vscp_nickname& (0+255),w,b
  4551  0013FA  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4552  0013FE  62DF               	cpfseq	indf2,c
  4553  001400  0012               	return	
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;vscp_firmware.c: 1234: uint8_t i;
  4557                           ;vscp_firmware.c: 1235: uint16_t page_save;
  4558                           ;vscp_firmware.c: 1238: page_save = vscp_page_select;
  4559  001402  C052  F0AD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1144
  4560  001406  C053  F0AE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1144+1
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;vscp_firmware.c: 1242: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4564  00140A  D870               	call	PL12	;call to abstracted procedure
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;vscp_firmware.c: 1244: for (i = vscp_imsg.data[ 3 ];
  4568  00140C  C07E  F0B7         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1143
  4569                           
  4570                           ;vscp_firmware.c: 1247: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4571                           ;vscp_firmware.c: 1248: i++) {
  4572  001410  D012               	goto	l7578
  4573  001412                     l7574:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;vscp_firmware.c: 1249: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4577                           ;vscp_firmware.c: 1250: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4578  001412  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4579  001414  088C               	sublw	low (_vscp_omsg+9)
  4580  001416  25B7               	addwf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4581  001418  6ED9               	movwf	fsr2l,c
  4582  00141A  6ADA               	clrf	fsr2h,c
  4583  00141C  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4584  00141E  087F               	sublw	low (_vscp_imsg+10)
  4585  001420  25B7               	addwf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4586  001422  6EE1               	movwf	fsr1l,c
  4587  001424  6AE2               	clrf	fsr1h,c
  4588  001426  50E7               	movf	indf1,w,c
  4589  001428  6E18               	movwf	?_vscp_writeRegister,c
  4590  00142A  51B7               	movf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4591  00142C  EC0A  F017         	call	_vscp_writeRegister
  4592  001430  6EDF               	movwf	indf2,c
  4593  001432  0100               	movlb	0	; () banked
  4594  001434  2BB7               	incf	vscp_handleProtocolEvent@i_1143& (0+255),f,b
  4595  001436                     l7578:
  4596                           
  4597                           ; BSR set to: 0
  4598  001436  5175               	movf	_vscp_imsg& (0+255),w,b
  4599  001438  0B0F               	andlw	15
  4600  00143A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4601  00143C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4602  00143E  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4603  001440  27A4               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4604  001442  0E00               	movlw	0
  4605  001444  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4606  001446  0EFC               	movlw	252
  4607  001448  25A4               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4608  00144A  6FA6               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4609  00144C  0EFF               	movlw	255
  4610  00144E  21A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4611  001450  6FA7               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4612  001452  51B7               	movf	vscp_handleProtocolEvent@i_1143& (0+255),w,b
  4613  001454  6FA8               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4614  001456  6BA9               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4615  001458  51A9               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4616  00145A  0A80               	xorlw	128
  4617  00145C  6FAA               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4618  00145E  51A6               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4619  001460  5DA8               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4620  001462  51A7               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4621  001464  0A80               	xorlw	128
  4622  001466  59AA               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4623  001468  E3D4               	bnc	l7574
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;vscp_firmware.c: 1251: }
  4627                           ;vscp_firmware.c: 1254: vscp_page_select = page_save;
  4628  00146A  C0AD  F052         	movff	vscp_handleProtocolEvent@page_save_1144,_vscp_page_select
  4629  00146E  C0AE  F053         	movff	vscp_handleProtocolEvent@page_save_1144+1,_vscp_page_select+1
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;vscp_firmware.c: 1256: vscp_omsg.priority = 0x07;
  4633  001472  0E07               	movlw	7
  4634  001474  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;vscp_firmware.c: 1257: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4638  001476  5175               	movf	_vscp_imsg& (0+255),w,b
  4639  001478  0B0F               	andlw	15
  4640  00147A  0F80               	addlw	128
  4641  00147C  6F83               	movwf	_vscp_omsg& (0+255),b
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;vscp_firmware.c: 1258: vscp_omsg.vscp_class = 0;
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;vscp_firmware.c: 1259: vscp_omsg.vscp_type = 39;
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;vscp_firmware.c: 1260: vscp_omsg.data[0] = 0;
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;vscp_firmware.c: 1261: vscp_omsg.data[1] = vscp_imsg.data[1];
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;vscp_firmware.c: 1262: vscp_omsg.data[2] = vscp_imsg.data[2];
  4657  00147E  D842               	call	PL16	;call to abstracted procedure
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;vscp_firmware.c: 1263: vscp_omsg.data[3] = vscp_imsg.data[3];
  4661  001480  C07E  F08B         	movff	_vscp_imsg+9,_vscp_omsg+8
  4662  001484  EF7F  F016         	goto	_vscp_sendEvent
  4663  001488                     l7600:
  4664                           
  4665                           ; BSR set to: 0
  4666  001488  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  4667                           
  4668                           ; Switch size 1, requested type "space"
  4669                           ; Number of cases is 16, Range of values is 1 to 38
  4670                           ; switch strategies available:
  4671                           ; Name         Instructions Cycles
  4672                           ; simple_byte           49    25 (average)
  4673                           ;	Chosen strategy is simple_byte
  4674  00148A  0A01               	xorlw	1	; case 1
  4675  00148C  E101 D54E          	bz	l7182
  4676  001490  0A03               	xorlw	3	; case 2
  4677  001492  E101 D54D          	bz	l7184
  4678  001496  0A04               	xorlw	4	; case 6
  4679  001498  E101 D54C          	bz	l7186
  4680  00149C  0A0E               	xorlw	14	; case 8
  4681  00149E  E101 D54B          	bz	l7188
  4682  0014A2  0A01               	xorlw	1	; case 9
  4683  0014A4  E101 D54A          	bz	l7190
  4684  0014A8  0A02               	xorlw	2	; case 11
  4685  0014AA  E101 D569          	bz	l7224
  4686  0014AE  0A07               	xorlw	7	; case 12
  4687  0014B0  E101 D57F          	bz	l7258
  4688  0014B4  0A1B               	xorlw	27	; case 23
  4689  0014B6  E101 D613          	bz	l7316
  4690  0014BA  0A0F               	xorlw	15	; case 24
  4691  0014BC  E101 D626          	bz	l7322
  4692  0014C0  0A01               	xorlw	1	; case 25
  4693  0014C2  E101 D676          	bz	l7356
  4694  0014C6  0A04               	xorlw	4	; case 29
  4695  0014C8  E101 D6A0          	bz	l7382
  4696  0014CC  0A03               	xorlw	3	; case 30
  4697  0014CE  E101 D6AD          	bz	l7398
  4698  0014D2  0A01               	xorlw	1	; case 31
  4699  0014D4  E101 D6BA          	bz	l7414
  4700  0014D8  0A3E               	xorlw	62	; case 33
  4701  0014DA  E101 D718          	bz	l7500
  4702  0014DE  0A04               	xorlw	4	; case 37
  4703  0014E0  E101 D727          	bz	l7510
  4704  0014E4  0A03               	xorlw	3	; case 38
  4705  0014E6  A4D8               	btfss	status,2,c
  4706  0014E8  0012               	return	
  4707  0014EA  D786               	goto	l7566
  4708  0014EC                     __end_of_vscp_handleProtocolEvent:
  4709                           	opt stack 0
  4710  0014EC                     PL12:
  4711                           	opt stack 22
  4712  0014EC  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4713  0014EE  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4714  0014F2  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4715  0014F4  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4716  0014F8  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4717  0014FA  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4718  0014FC  6E52               	movwf	_vscp_page_select,c
  4719  0014FE  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4720  001500  6E53               	movwf	_vscp_page_select+1,c
  4721  001502  0012               	return	
  4722  001504                     __end_ofPL12:
  4723                           	opt stack 0
  4724  001504                     PL16:
  4725                           	opt stack 22
  4726  001504  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4727  001506  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4728  001508  0E27               	movlw	39
  4729  00150A  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4730  00150C  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4731  00150E  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4732  001512  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4733  001516  0012               	return	
  4734  001518                     __end_ofPL16:
  4735                           	opt stack 0
  4736  001518                     PL34:
  4737                           	opt stack 22
  4738  001518  0E07               	movlw	7
  4739  00151A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4740  00151C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4741  00151E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4742  001520  0E1A               	movlw	26
  4743  001522  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4744  001524  0C1A               	retlw	26
  4745  001526                     __end_ofPL34:
  4746                           	opt stack 0
  4747  001526                     PL40:
  4748                           	opt stack 22
  4749  001526  C0BD  F088         	movff	vscp_handleProtocolEvent@i_1135,_vscp_omsg+5
  4750  00152A  0E01               	movlw	1
  4751  00152C  6FBF               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4752  00152E  0C01               	retlw	1
  4753  001530                     __end_ofPL40:
  4754                           	opt stack 0
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           prodh	equ	0xFF4
  4760                           prodl	equ	0xFF3
  4761                           intcon	equ	0xFF2
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           indf1	equ	0xFE7
  4765                           fsr1h	equ	0xFE2
  4766                           fsr1l	equ	0xFE1
  4767                           indf2	equ	0xFDF
  4768                           postinc2	equ	0xFDE
  4769                           postdec2	equ	0xFDD
  4770                           plusw2	equ	0xFDB
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function ___lbmod *****************
  4776 ;; Defined at:
  4777 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  dividend        1    wreg     unsigned char 
  4780 ;;  divisor         1    7[COMRAM] unsigned char 
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;  dividend        1    8[COMRAM] unsigned char 
  4783 ;;  rem             1   10[COMRAM] unsigned char 
  4784 ;;  counter         1    9[COMRAM] unsigned char 
  4785 ;; Return value:  Size  Location     Type
  4786 ;;                  1    wreg      unsigned char 
  4787 ;; Registers used:
  4788 ;;		wreg, status,2, status,0
  4789 ;; Tracked objects:
  4790 ;;		On entry : F/0
  4791 ;;		On exit  : 0/0
  4792 ;;		Unchanged: 0/0
  4793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4794 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4795 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4797 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4798 ;;Total ram usage:        4 bytes
  4799 ;; Hardware stack levels used:    1
  4800 ;; Hardware stack levels required when called:    2
  4801 ;; This function calls:
  4802 ;;		Nothing
  4803 ;; This function is called by:
  4804 ;;		_vscp_handleProtocolEvent
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text15
  4809  002CB0                     __ptext15:
  4810                           	opt stack 0
  4811  002CB0                     ___lbmod:
  4812                           	opt stack 27
  4813                           
  4814                           ;incstack = 0
  4815                           ;incstack = 0
  4816                           ;___lbmod@dividend stored from wreg
  4817  002CB0  CFE8 F009          	movff	wreg,___lbmod@dividend
  4818                           
  4819                           ; BSR set to: 0
  4820  002CB4  0E08               	movlw	8
  4821  002CB6  6E0A               	movwf	___lbmod@counter,c
  4822                           
  4823                           ; BSR set to: 0
  4824  002CB8  6A0B               	clrf	___lbmod@rem,c
  4825  002CBA                     l5678:
  4826  002CBA  90D8               	bcf	status,0,c
  4827  002CBC  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4828  002CBE  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4829  002CC0  6E0B               	movwf	___lbmod@rem,c
  4830  002CC2  90D8               	bcf	status,0,c
  4831  002CC4  3609               	rlcf	___lbmod@dividend,f,c
  4832  002CC6  5008               	movf	___lbmod@divisor,w,c
  4833  002CC8  5C0B               	subwf	___lbmod@rem,w,c
  4834  002CCA  E302               	bnc	l5686
  4835  002CCC  5008               	movf	___lbmod@divisor,w,c
  4836  002CCE  5E0B               	subwf	___lbmod@rem,f,c
  4837  002CD0                     l5686:
  4838  002CD0  2E0A               	decfsz	___lbmod@counter,f,c
  4839  002CD2  D7F3               	goto	l5678
  4840  002CD4  500B               	movf	___lbmod@rem,w,c
  4841  002CD6  0012               	return	
  4842  002CD8                     __end_of___lbmod:
  4843                           	opt stack 0
  4844                           tblptru	equ	0xFF8
  4845                           tblptrh	equ	0xFF7
  4846                           tblptrl	equ	0xFF6
  4847                           tablat	equ	0xFF5
  4848                           prodh	equ	0xFF4
  4849                           prodl	equ	0xFF3
  4850                           intcon	equ	0xFF2
  4851                           postinc0	equ	0xFEE
  4852                           wreg	equ	0xFE8
  4853                           indf1	equ	0xFE7
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           plusw2	equ	0xFDB
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _vscp_writeRegister *****************
  4865 ;; Defined at:
  4866 ;;		line 701 in file "../../vscp_firmware/common/vscp_firmware.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  reg             1    wreg     unsigned char 
  4869 ;;  value           1   23[COMRAM] unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  reg             1   24[COMRAM] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      unsigned char 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : F/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4881 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4882 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;Total ram usage:        2 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    6
  4888 ;; This function calls:
  4889 ;;		_vscp_writeAppReg
  4890 ;;		_vscp_writeStdReg
  4891 ;; This function is called by:
  4892 ;;		_vscp_handleProtocolEvent
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text16
  4897  002E14                     __ptext16:
  4898                           	opt stack 0
  4899  002E14                     _vscp_writeRegister:
  4900                           	opt stack 23
  4901                           
  4902                           ;incstack = 0
  4903                           ;incstack = 0
  4904                           ;vscp_writeRegister@reg stored from wreg
  4905  002E14  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;vscp_firmware.c: 702: if (reg >= 0x80) {
  4909  002E18  0E7F               	movlw	127
  4910  002E1A  6419               	cpfsgt	vscp_writeRegister@reg,c
  4911  002E1C  D005               	goto	l6996
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;vscp_firmware.c: 703: return vscp_writeStdReg(reg, value);
  4915  002E1E  C018  F010         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4916  002E22  5019               	movf	vscp_writeRegister@reg,w,c
  4917  002E24  EF11  F011         	goto	_vscp_writeStdReg
  4918  002E28                     l6996:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;vscp_firmware.c: 705: else {
  4922                           ;vscp_firmware.c: 706: return vscp_writeAppReg(reg, value);
  4923  002E28  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4924  002E2C  5019               	movf	vscp_writeRegister@reg,w,c
  4925  002E2E  EFD5  F00E         	goto	_vscp_writeAppReg
  4926  002E32                     __end_of_vscp_writeRegister:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           indf1	equ	0xFE7
  4938                           fsr1h	equ	0xFE2
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           postinc2	equ	0xFDE
  4942                           postdec2	equ	0xFDD
  4943                           plusw2	equ	0xFDB
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function _vscp_writeStdReg *****************
  4949 ;; Defined at:
  4950 ;;		line 715 in file "../../vscp_firmware/common/vscp_firmware.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;  reg             1    wreg     unsigned char 
  4953 ;;  value           1   15[COMRAM] unsigned char 
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;  reg             1   21[COMRAM] unsigned char 
  4956 ;;  rv              1   20[COMRAM] unsigned char 
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      unsigned char 
  4959 ;; Registers used:
  4960 ;;		wreg, status,2, status,0, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : F/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4966 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4967 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4968 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4969 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4970 ;;Total ram usage:        7 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    5
  4973 ;; This function calls:
  4974 ;;		_vscp_setGUID
  4975 ;;		_vscp_setManufacturerId
  4976 ;;		_vscp_getGUID
  4977 ;;		_vscp_getUserID
  4978 ;;		_vscp_setUserID
  4979 ;;		_vscp_getManufacturerId
  4980 ;;		_vscp_restoreDefaults
  4981 ;; This function is called by:
  4982 ;;		_vscp_writeRegister
  4983 ;;		_vscp_handleProtocolEvent
  4984 ;; This function uses a non-reentrant model
  4985 ;;
  4986                           
  4987                           	psect	text17
  4988  002222                     __ptext17:
  4989                           	opt stack 0
  4990  002222                     _vscp_writeStdReg:
  4991                           	opt stack 24
  4992                           
  4993                           ;incstack = 0
  4994                           ;incstack = 0
  4995                           ;vscp_writeStdReg@reg stored from wreg
  4996  002222  CFE8 F016          	movff	wreg,vscp_writeStdReg@reg
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;vscp_firmware.c: 716: uint8_t rv = ~value;
  5000  002226  1C10               	comf	vscp_writeStdReg@value,w,c
  5001  002228  6E15               	movwf	vscp_writeStdReg@rv,c
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;vscp_firmware.c: 718: if ((reg > (0x82 + 1)) &&
  5005                           ;vscp_firmware.c: 719: (reg < 0x89)) {
  5006  00222A  0E83               	movlw	131
  5007  00222C  6416               	cpfsgt	vscp_writeStdReg@reg,c
  5008  00222E  D00E               	goto	l7008
  5009                           
  5010                           ; BSR set to: 0
  5011  002230  0E89               	movlw	137
  5012  002232  6016               	cpfslt	vscp_writeStdReg@reg,c
  5013  002234  D00B               	goto	l7008
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;vscp_firmware.c: 722: vscp_setUserID((reg - 0x84), value);
  5017  002236  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  5018  00223A  5016               	movf	vscp_writeStdReg@reg,w,c
  5019  00223C  0F7C               	addlw	124
  5020  00223E  EC46  F017         	call	_vscp_setUserID
  5021                           
  5022                           ;vscp_firmware.c: 723: rv = vscp_getUserID((reg - 0x84));
  5023  002242  5016               	movf	vscp_writeStdReg@reg,w,c
  5024  002244  0F7C               	addlw	124
  5025  002246  ECB0  F017         	call	_vscp_getUserID
  5026  00224A  D069               	goto	L11
  5027  00224C                     l7008:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;vscp_firmware.c: 726: else if (0x92 == reg) {
  5031  00224C  5016               	movf	vscp_writeStdReg@reg,w,c
  5032  00224E  0A92               	xorlw	146
  5033  002250  E10D               	bnz	l7014
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;vscp_firmware.c: 729: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  5037  002252  5010               	movf	vscp_writeStdReg@value,w,c
  5038  002254  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  5039  002256  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  5040  002258  5052               	movf	_vscp_page_select,w,c
  5041  00225A  6E13               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  5042  00225C  6A14               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  5043  00225E  1011               	iorwf	??_vscp_writeStdReg,w,c
  5044  002260  6E52               	movwf	_vscp_page_select,c
  5045  002262  5012               	movf	??_vscp_writeStdReg+1,w,c
  5046  002264  1014               	iorwf	??_vscp_writeStdReg+3,w,c
  5047  002266  6E53               	movwf	_vscp_page_select+1,c
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;vscp_firmware.c: 730: rv = (vscp_page_select >> 8) & 0xff;
  5051  002268  5053               	movf	_vscp_page_select+1,w,c
  5052  00226A  D059               	goto	L11
  5053  00226C                     l7014:
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;vscp_firmware.c: 732: else if (0x93 == reg) {
  5057  00226C  5016               	movf	vscp_writeStdReg@reg,w,c
  5058  00226E  0A93               	xorlw	147
  5059  002270  E10B               	bnz	l7020
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;vscp_firmware.c: 735: vscp_page_select = (vscp_page_select & 0xff00) | value;
  5063  002272  6A11               	clrf	??_vscp_writeStdReg& (0+255),c
  5064  002274  5053               	movf	_vscp_page_select+1,w,c
  5065  002276  6E12               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  5066  002278  5010               	movf	vscp_writeStdReg@value,w,c
  5067  00227A  1011               	iorwf	??_vscp_writeStdReg,w,c
  5068  00227C  6E52               	movwf	_vscp_page_select,c
  5069  00227E  5012               	movf	??_vscp_writeStdReg+1,w,c
  5070  002280  6E53               	movwf	_vscp_page_select+1,c
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;vscp_firmware.c: 736: rv = (vscp_page_select & 0xff);
  5074  002282  C052  F015         	movff	_vscp_page_select,vscp_writeStdReg@rv
  5075                           
  5076                           ;vscp_firmware.c: 737: }
  5077  002286  D04E               	goto	l7062
  5078  002288                     l7020:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;vscp_firmware.c: 742: else if ((reg > 0x88) && (reg < 0x91)) {
  5082  002288  0E88               	movlw	136
  5083  00228A  6416               	cpfsgt	vscp_writeStdReg@reg,c
  5084  00228C  D019               	goto	l7032
  5085                           
  5086                           ; BSR set to: 0
  5087  00228E  0E91               	movlw	145
  5088  002290  6016               	cpfslt	vscp_writeStdReg@reg,c
  5089  002292  D016               	goto	l7032
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;vscp_firmware.c: 744: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  5093                           ;vscp_firmware.c: 745: (0xff != (vscp_page_select & 0xff))) {
  5094  002294  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  5095  002298  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  5096  00229C  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  5097  00229E  2812               	incf	??_vscp_writeStdReg+1,w,c
  5098  0022A0  E102               	bnz	l7028
  5099                           
  5100                           ; BSR set to: 0
  5101  0022A2  2852               	incf	_vscp_page_select,w,c
  5102  0022A4  E002               	bz	l7030
  5103  0022A6                     l7028:
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;vscp_firmware.c: 747: rv = ~value;
  5107  0022A6  1C10               	comf	vscp_writeStdReg@value,w,c
  5108  0022A8  D03A               	goto	L11
  5109  0022AA                     l7030:
  5110                           
  5111                           ; BSR set to: 0
  5112                           ;vscp_firmware.c: 749: else {
  5113                           ;vscp_firmware.c: 751: vscp_setManufacturerId(reg - 0x89, value);
  5114  0022AA  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  5115  0022AE  5016               	movf	vscp_writeStdReg@reg,w,c
  5116  0022B0  0F77               	addlw	119
  5117  0022B2  ECA5  F016         	call	_vscp_setManufacturerId
  5118                           
  5119                           ;vscp_firmware.c: 752: rv = vscp_getManufacturerId(reg - 0x89);
  5120  0022B6  5016               	movf	vscp_writeStdReg@reg,w,c
  5121  0022B8  0F77               	addlw	119
  5122  0022BA  ECA6  F017         	call	_vscp_getManufacturerId
  5123  0022BE  D02F               	goto	L11
  5124  0022C0                     l7032:
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;vscp_firmware.c: 755: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  5128  0022C0  0ECF               	movlw	207
  5129  0022C2  6416               	cpfsgt	vscp_writeStdReg@reg,c
  5130  0022C4  D017               	goto	l7044
  5131                           
  5132                           ; BSR set to: 0
  5133  0022C6  0EE0               	movlw	224
  5134  0022C8  6016               	cpfslt	vscp_writeStdReg@reg,c
  5135  0022CA  D014               	goto	l7044
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;vscp_firmware.c: 757: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  5139                           ;vscp_firmware.c: 758: (0xff != (vscp_page_select & 0xff))) {
  5140  0022CC  C053  F011         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  5141  0022D0  C011  F012         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  5142  0022D4  6A13               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  5143  0022D6  2812               	incf	??_vscp_writeStdReg+1,w,c
  5144  0022D8  E1E6               	bnz	l7028
  5145                           
  5146                           ; BSR set to: 0
  5147  0022DA  2852               	incf	_vscp_page_select,w,c
  5148  0022DC  E1E4               	bnz	l7028
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;vscp_firmware.c: 762: else {
  5152                           ;vscp_firmware.c: 763: vscp_setGUID(reg - 0xD0, value);
  5153  0022DE  C010  F00C         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  5154  0022E2  5016               	movf	vscp_writeStdReg@reg,w,c
  5155  0022E4  0F30               	addlw	48
  5156  0022E6  ECB7  F016         	call	_vscp_setGUID
  5157                           
  5158                           ;vscp_firmware.c: 764: rv = vscp_getGUID(reg - 0xD0);
  5159  0022EA  5016               	movf	vscp_writeStdReg@reg,w,c
  5160  0022EC  0F30               	addlw	48
  5161  0022EE  ECBA  F017         	call	_vscp_getGUID
  5162  0022F2  D015               	goto	L11
  5163  0022F4                     l7044:
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;vscp_firmware.c: 768: else if ( 0xA2 == reg ) {
  5167  0022F4  5016               	movf	vscp_writeStdReg@reg,w,c
  5168  0022F6  0AA2               	xorlw	162
  5169  0022F8  E1D6               	bnz	l7028
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;vscp_firmware.c: 769: if ( 0x55 == value ) {
  5173  0022FA  5010               	movf	vscp_writeStdReg@value,w,c
  5174  0022FC  0A55               	xorlw	85
  5175  0022FE  E104               	bnz	l7052
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;vscp_firmware.c: 770: vscp_configtimer = 0;
  5179  002300  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  5180  002302  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;vscp_firmware.c: 771: rv = 0x55;
  5184  002304  0E55               	movlw	85
  5185  002306  D00B               	goto	L11
  5186  002308                     l7052:
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;vscp_firmware.c: 773: else if ( 0xaa == value ) {
  5190  002308  5010               	movf	vscp_writeStdReg@value,w,c
  5191  00230A  0AAA               	xorlw	170
  5192  00230C  E10B               	bnz	l7062
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;vscp_firmware.c: 774: if ( vscp_configtimer < 1000 ) {
  5196  00230E  0EE8               	movlw	232
  5197  002310  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  5198  002312  0E03               	movlw	3
  5199  002314  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  5200  002316  E205               	bc	l982
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;vscp_firmware.c: 775: vscp_restoreDefaults();
  5204  002318  ECFD  F017         	call	_vscp_restoreDefaults	;wreg free
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;vscp_firmware.c: 776: rv = 0xaa;
  5208  00231C  0EAA               	movlw	170
  5209  00231E                     L11:
  5210  00231E  6E15               	movwf	vscp_writeStdReg@rv,c
  5211                           
  5212                           ;vscp_firmware.c: 777: }
  5213  002320  D001               	goto	l7062
  5214  002322                     l982:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;vscp_firmware.c: 778: else {
  5218                           ;vscp_firmware.c: 779: rv = 0;
  5219  002322  6A15               	clrf	vscp_writeStdReg@rv,c
  5220  002324                     l7062:
  5221                           
  5222                           ;vscp_firmware.c: 787: }
  5223                           ;vscp_firmware.c: 789: return rv;
  5224  002324  5015               	movf	vscp_writeStdReg@rv,w,c
  5225  002326  0012               	return	
  5226  002328                     __end_of_vscp_writeStdReg:
  5227                           	opt stack 0
  5228                           tblptru	equ	0xFF8
  5229                           tblptrh	equ	0xFF7
  5230                           tblptrl	equ	0xFF6
  5231                           tablat	equ	0xFF5
  5232                           prodh	equ	0xFF4
  5233                           prodl	equ	0xFF3
  5234                           intcon	equ	0xFF2
  5235                           postinc0	equ	0xFEE
  5236                           wreg	equ	0xFE8
  5237                           indf1	equ	0xFE7
  5238                           fsr1h	equ	0xFE2
  5239                           fsr1l	equ	0xFE1
  5240                           indf2	equ	0xFDF
  5241                           postinc2	equ	0xFDE
  5242                           postdec2	equ	0xFDD
  5243                           plusw2	equ	0xFDB
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function _vscp_restoreDefaults *****************
  5249 ;; Defined at:
  5250 ;;		line 1428 in file "../main.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;		None
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;		None
  5255 ;; Return value:  Size  Location     Type
  5256 ;;		None               void
  5257 ;; Registers used:
  5258 ;;		wreg, status,2, status,0, cstack
  5259 ;; Tracked objects:
  5260 ;;		On entry : F/0
  5261 ;;		On exit  : F/0
  5262 ;;		Unchanged: 0/0
  5263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5268 ;;Total ram usage:        0 bytes
  5269 ;; Hardware stack levels used:    1
  5270 ;; Hardware stack levels required when called:    4
  5271 ;; This function calls:
  5272 ;;		_init_app_eeprom
  5273 ;;		_init_app_ram
  5274 ;; This function is called by:
  5275 ;;		_vscp_writeStdReg
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text18
  5280  002FFA                     __ptext18:
  5281                           	opt stack 0
  5282  002FFA                     _vscp_restoreDefaults:
  5283                           	opt stack 24
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;main.c: 1429: init_app_eeprom();
  5287                           
  5288                           ;incstack = 0
  5289                           ;incstack = 0
  5290  002FFA  ECD0  F012         	call	_init_app_eeprom	;wreg free
  5291                           
  5292                           ;main.c: 1430: init_app_ram();
  5293  002FFE  EFC4  F017         	goto	_init_app_ram	;wreg free
  5294  003002                     __end_of_vscp_restoreDefaults:
  5295                           	opt stack 0
  5296                           tblptru	equ	0xFF8
  5297                           tblptrh	equ	0xFF7
  5298                           tblptrl	equ	0xFF6
  5299                           tablat	equ	0xFF5
  5300                           prodh	equ	0xFF4
  5301                           prodl	equ	0xFF3
  5302                           intcon	equ	0xFF2
  5303                           postinc0	equ	0xFEE
  5304                           wreg	equ	0xFE8
  5305                           indf1	equ	0xFE7
  5306                           fsr1h	equ	0xFE2
  5307                           fsr1l	equ	0xFE1
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           plusw2	equ	0xFDB
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _init_app_eeprom *****************
  5317 ;; Defined at:
  5318 ;;		line 427 in file "../main.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;		None
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  i               1   14[COMRAM] unsigned char 
  5323 ;;  j               1   13[COMRAM] unsigned char 
  5324 ;; Return value:  Size  Location     Type
  5325 ;;		None               void
  5326 ;; Registers used:
  5327 ;;		wreg, status,2, status,0, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/E
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5334 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5335 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5336 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5337 ;;Total ram usage:        4 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:    3
  5340 ;; This function calls:
  5341 ;;		_Busy_eep
  5342 ;;		_Write_b_eep
  5343 ;; This function is called by:
  5344 ;;		_main
  5345 ;;		_vscp_restoreDefaults
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text19
  5350  0025A0                     __ptext19:
  5351                           	opt stack 0
  5352  0025A0                     _init_app_eeprom:
  5353                           	opt stack 24
  5354                           
  5355                           ;main.c: 428: unsigned char i, j;
  5356                           ;main.c: 430: (Busy_eep(), Write_b_eep(0x21 + 0,0));
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;incstack = 0
  5360                           ;incstack = 0
  5361  0025A0  EC01  F018         	call	_Busy_eep	;wreg free
  5362  0025A4  6A09               	clrf	?_Write_b_eep+1,c
  5363  0025A6  0E21               	movlw	33
  5364  0025A8  6E08               	movwf	?_Write_b_eep,c
  5365  0025AA  0E00               	movlw	0
  5366  0025AC  6A0A               	clrf	?_Write_b_eep+2,c
  5367  0025AE  ECAD  F015         	call	_Write_b_eep	;wreg free
  5368                           
  5369                           ;main.c: 431: (Busy_eep(), Write_b_eep(0x21 + 1,0));
  5370  0025B2  EC01  F018         	call	_Busy_eep	;wreg free
  5371  0025B6  6A09               	clrf	?_Write_b_eep+1,c
  5372  0025B8  0E22               	movlw	34
  5373  0025BA  6E08               	movwf	?_Write_b_eep,c
  5374  0025BC  0E00               	movlw	0
  5375  0025BE  6A0A               	clrf	?_Write_b_eep+2,c
  5376  0025C0  ECAD  F015         	call	_Write_b_eep	;wreg free
  5377                           
  5378                           ;main.c: 433: for ( i=3; i<21; i++ ) {
  5379  0025C4  0E03               	movlw	3
  5380  0025C6  6E0F               	movwf	init_app_eeprom@i,c
  5381  0025C8                     l3902:
  5382                           
  5383                           ;main.c: 434: (Busy_eep(), Write_b_eep(0x21 + 5 + (i-3),i));
  5384  0025C8  EC01  F018         	call	_Busy_eep	;wreg free
  5385  0025CC  0E23               	movlw	35
  5386  0025CE  240F               	addwf	init_app_eeprom@i,w,c
  5387  0025D0  6E08               	movwf	?_Write_b_eep,c
  5388  0025D2  6A09               	clrf	?_Write_b_eep+1,c
  5389  0025D4  0E00               	movlw	0
  5390  0025D6  2209               	addwfc	?_Write_b_eep+1,f,c
  5391  0025D8  C00F  F00A         	movff	init_app_eeprom@i,?_Write_b_eep+2
  5392  0025DC  ECAD  F015         	call	_Write_b_eep	;wreg free
  5393  0025E0  2A0F               	incf	init_app_eeprom@i,f,c
  5394  0025E2  0E14               	movlw	20
  5395  0025E4  640F               	cpfsgt	init_app_eeprom@i,c
  5396  0025E6  D7F0               	goto	l3902
  5397                           
  5398                           ;main.c: 435: }
  5399                           ;main.c: 437: (Busy_eep(), Write_b_eep(0x21 + 2,0));
  5400  0025E8  EC01  F018         	call	_Busy_eep	;wreg free
  5401  0025EC  6A09               	clrf	?_Write_b_eep+1,c
  5402  0025EE  0E23               	movlw	35
  5403  0025F0  6E08               	movwf	?_Write_b_eep,c
  5404  0025F2  0E00               	movlw	0
  5405  0025F4  6A0A               	clrf	?_Write_b_eep+2,c
  5406  0025F6  ECAD  F015         	call	_Write_b_eep	;wreg free
  5407                           
  5408                           ;main.c: 438: (Busy_eep(), Write_b_eep(0x21 + 3,0));
  5409  0025FA  EC01  F018         	call	_Busy_eep	;wreg free
  5410  0025FE  6A09               	clrf	?_Write_b_eep+1,c
  5411  002600  0E24               	movlw	36
  5412  002602  6E08               	movwf	?_Write_b_eep,c
  5413  002604  0E00               	movlw	0
  5414  002606  6A0A               	clrf	?_Write_b_eep+2,c
  5415  002608  ECAD  F015         	call	_Write_b_eep	;wreg free
  5416                           
  5417                           ;main.c: 439: (Busy_eep(), Write_b_eep(0x21 + 4,0));
  5418  00260C  EC01  F018         	call	_Busy_eep	;wreg free
  5419  002610  6A09               	clrf	?_Write_b_eep+1,c
  5420  002612  0E25               	movlw	37
  5421  002614  6E08               	movwf	?_Write_b_eep,c
  5422  002616  0E00               	movlw	0
  5423  002618  6A0A               	clrf	?_Write_b_eep+2,c
  5424  00261A  ECAD  F015         	call	_Write_b_eep	;wreg free
  5425                           
  5426                           ;main.c: 443: for ( i = 0; i < 8; i++ ) {
  5427  00261E  6A0F               	clrf	init_app_eeprom@i,c
  5428  002620                     l179:
  5429                           
  5430                           ;main.c: 444: for ( j = 0; j < 8; j++ ) {
  5431  002620  6A0E               	clrf	init_app_eeprom@j,c
  5432  002622                     l3928:
  5433                           
  5434                           ;main.c: 445: (Busy_eep(), Write_b_eep(0x21 + 23 + 0 + i * 8 + j,0));
  5435  002622  EC01  F018         	call	_Busy_eep	;wreg free
  5436  002626  500E               	movf	init_app_eeprom@j,w,c
  5437  002628  C00F  F00C         	movff	init_app_eeprom@i,??_init_app_eeprom
  5438  00262C  6A0D               	clrf	(??_init_app_eeprom+1)& (0+255),c
  5439  00262E  90D8               	bcf	status,0,c
  5440  002630  360C               	rlcf	??_init_app_eeprom,f,c
  5441  002632  360D               	rlcf	??_init_app_eeprom+1,f,c
  5442  002634  90D8               	bcf	status,0,c
  5443  002636  360C               	rlcf	??_init_app_eeprom,f,c
  5444  002638  360D               	rlcf	??_init_app_eeprom+1,f,c
  5445  00263A  90D8               	bcf	status,0,c
  5446  00263C  360C               	rlcf	??_init_app_eeprom,f,c
  5447  00263E  360D               	rlcf	??_init_app_eeprom+1,f,c
  5448  002640  260C               	addwf	??_init_app_eeprom,f,c
  5449  002642  0E00               	movlw	0
  5450  002644  220D               	addwfc	??_init_app_eeprom+1,f,c
  5451  002646  0E38               	movlw	56
  5452  002648  240C               	addwf	??_init_app_eeprom,w,c
  5453  00264A  6E08               	movwf	?_Write_b_eep,c
  5454  00264C  0E00               	movlw	0
  5455  00264E  200D               	addwfc	??_init_app_eeprom+1,w,c
  5456  002650  6E09               	movwf	?_Write_b_eep+1,c
  5457  002652  0E00               	movlw	0
  5458  002654  6A0A               	clrf	?_Write_b_eep+2,c
  5459  002656  ECAD  F015         	call	_Write_b_eep	;wreg free
  5460  00265A  2A0E               	incf	init_app_eeprom@j,f,c
  5461  00265C  0E07               	movlw	7
  5462  00265E  640E               	cpfsgt	init_app_eeprom@j,c
  5463  002660  D7E0               	goto	l3928
  5464  002662  2A0F               	incf	init_app_eeprom@i,f,c
  5465  002664  640F               	cpfsgt	init_app_eeprom@i,c
  5466  002666  D7DC               	goto	l179
  5467  002668  0C07               	retlw	7
  5468  00266A                     __end_of_init_app_eeprom:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           indf1	equ	0xFE7
  5480                           fsr1h	equ	0xFE2
  5481                           fsr1l	equ	0xFE1
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           plusw2	equ	0xFDB
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _vscp_setUserID *****************
  5491 ;; Defined at:
  5492 ;;		line 1262 in file "../main.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  idx             1    wreg     unsigned char 
  5495 ;;  data            1   11[COMRAM] unsigned char 
  5496 ;; Auto vars:     Size  Location     Type
  5497 ;;  idx             1   12[COMRAM] unsigned char 
  5498 ;; Return value:  Size  Location     Type
  5499 ;;		None               void
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0, cstack
  5502 ;; Tracked objects:
  5503 ;;		On entry : F/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5507 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5508 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5510 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5511 ;;Total ram usage:        2 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    3
  5514 ;; This function calls:
  5515 ;;		_Busy_eep
  5516 ;;		_Write_b_eep
  5517 ;; This function is called by:
  5518 ;;		_vscp_writeStdReg
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text20
  5523  002E8C                     __ptext20:
  5524                           	opt stack 0
  5525  002E8C                     _vscp_setUserID:
  5526                           	opt stack 25
  5527                           
  5528                           ;incstack = 0
  5529                           ;incstack = 0
  5530                           ;vscp_setUserID@idx stored from wreg
  5531  002E8C  CFE8 F00D          	movff	wreg,vscp_setUserID@idx
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;main.c: 1263: (Busy_eep(), Write_b_eep(idx + 0x04,data));
  5535  002E90  EC01  F018         	call	_Busy_eep	;wreg free
  5536  002E94  0E04               	movlw	4
  5537  002E96  240D               	addwf	vscp_setUserID@idx,w,c
  5538  002E98  6E08               	movwf	?_Write_b_eep,c
  5539  002E9A  6A09               	clrf	?_Write_b_eep+1,c
  5540  002E9C  0E00               	movlw	0
  5541  002E9E  2209               	addwfc	?_Write_b_eep+1,f,c
  5542  002EA0  C00C  F00A         	movff	vscp_setUserID@data,?_Write_b_eep+2
  5543  002EA4  EFAD  F015         	goto	_Write_b_eep	;wreg free
  5544  002EA8                     __end_of_vscp_setUserID:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           tblptrh	equ	0xFF7
  5548                           tblptrl	equ	0xFF6
  5549                           tablat	equ	0xFF5
  5550                           prodh	equ	0xFF4
  5551                           prodl	equ	0xFF3
  5552                           intcon	equ	0xFF2
  5553                           postinc0	equ	0xFEE
  5554                           wreg	equ	0xFE8
  5555                           indf1	equ	0xFE7
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           plusw2	equ	0xFDB
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function _vscp_setManufacturerId *****************
  5567 ;; Defined at:
  5568 ;;		line 507 in file "../main.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  idx             1    wreg     unsigned char 
  5571 ;;  data            1   11[COMRAM] unsigned char 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  idx             1   12[COMRAM] unsigned char 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;		None               void
  5576 ;; Registers used:
  5577 ;;		wreg, status,2, status,0, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : F/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5583 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5586 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5587 ;;Total ram usage:        2 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:    3
  5590 ;; This function calls:
  5591 ;;		_Busy_eep
  5592 ;;		_Write_b_eep
  5593 ;; This function is called by:
  5594 ;;		_vscp_writeStdReg
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text21
  5599  002D4A                     __ptext21:
  5600                           	opt stack 0
  5601  002D4A                     _vscp_setManufacturerId:
  5602                           	opt stack 25
  5603                           
  5604                           ;incstack = 0
  5605                           ;incstack = 0
  5606                           ;vscp_setManufacturerId@idx stored from wreg
  5607  002D4A  CFE8 F00D          	movff	wreg,vscp_setManufacturerId@idx
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;main.c: 508: if ( idx>7 ) return;
  5611  002D4E  0E07               	movlw	7
  5612  002D50  640D               	cpfsgt	vscp_setManufacturerId@idx,c
  5613  002D52  D001               	goto	l4754
  5614  002D54  0C07               	retlw	7
  5615  002D56                     l4754:
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;main.c: 509: (Busy_eep(), Write_b_eep(0x09 + idx,data));
  5619  002D56  EC01  F018         	call	_Busy_eep	;wreg free
  5620  002D5A  0E09               	movlw	9
  5621  002D5C  240D               	addwf	vscp_setManufacturerId@idx,w,c
  5622  002D5E  6E08               	movwf	?_Write_b_eep,c
  5623  002D60  6A09               	clrf	?_Write_b_eep+1,c
  5624  002D62  0E00               	movlw	0
  5625  002D64  2209               	addwfc	?_Write_b_eep+1,f,c
  5626  002D66  C00C  F00A         	movff	vscp_setManufacturerId@data,?_Write_b_eep+2
  5627  002D6A  EFAD  F015         	goto	_Write_b_eep	;wreg free
  5628  002D6E                     __end_of_vscp_setManufacturerId:
  5629                           	opt stack 0
  5630                           tblptru	equ	0xFF8
  5631                           tblptrh	equ	0xFF7
  5632                           tblptrl	equ	0xFF6
  5633                           tablat	equ	0xFF5
  5634                           prodh	equ	0xFF4
  5635                           prodl	equ	0xFF3
  5636                           intcon	equ	0xFF2
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           indf1	equ	0xFE7
  5640                           fsr1h	equ	0xFE2
  5641                           fsr1l	equ	0xFE1
  5642                           indf2	equ	0xFDF
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           plusw2	equ	0xFDB
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650 ;; *************** function _vscp_setGUID *****************
  5651 ;; Defined at:
  5652 ;;		line 495 in file "../main.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  idx             1    wreg     unsigned char 
  5655 ;;  data            1   11[COMRAM] unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  idx             1   12[COMRAM] unsigned char 
  5658 ;; Return value:  Size  Location     Type
  5659 ;;		None               void
  5660 ;; Registers used:
  5661 ;;		wreg, status,2, status,0, cstack
  5662 ;; Tracked objects:
  5663 ;;		On entry : F/0
  5664 ;;		On exit  : 0/0
  5665 ;;		Unchanged: 0/0
  5666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5667 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5668 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;Total ram usage:        2 bytes
  5672 ;; Hardware stack levels used:    1
  5673 ;; Hardware stack levels required when called:    3
  5674 ;; This function calls:
  5675 ;;		_Busy_eep
  5676 ;;		_Write_b_eep
  5677 ;; This function is called by:
  5678 ;;		_vscp_writeStdReg
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text22
  5683  002D6E                     __ptext22:
  5684                           	opt stack 0
  5685  002D6E                     _vscp_setGUID:
  5686                           	opt stack 25
  5687                           
  5688                           ;incstack = 0
  5689                           ;incstack = 0
  5690                           ;vscp_setGUID@idx stored from wreg
  5691  002D6E  CFE8 F00D          	movff	wreg,vscp_setGUID@idx
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;main.c: 496: if ( idx>15 ) return;
  5695  002D72  0E0F               	movlw	15
  5696  002D74  640D               	cpfsgt	vscp_setGUID@idx,c
  5697  002D76  D001               	goto	l4746
  5698  002D78  0C0F               	retlw	15
  5699  002D7A                     l4746:
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x11 + idx,data));
  5703  002D7A  EC01  F018         	call	_Busy_eep	;wreg free
  5704  002D7E  0E11               	movlw	17
  5705  002D80  240D               	addwf	vscp_setGUID@idx,w,c
  5706  002D82  6E08               	movwf	?_Write_b_eep,c
  5707  002D84  6A09               	clrf	?_Write_b_eep+1,c
  5708  002D86  0E00               	movlw	0
  5709  002D88  2209               	addwfc	?_Write_b_eep+1,f,c
  5710  002D8A  C00C  F00A         	movff	vscp_setGUID@data,?_Write_b_eep+2
  5711  002D8E  EFAD  F015         	goto	_Write_b_eep	;wreg free
  5712  002D92                     __end_of_vscp_setGUID:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           intcon	equ	0xFF2
  5721                           postinc0	equ	0xFEE
  5722                           wreg	equ	0xFE8
  5723                           indf1	equ	0xFE7
  5724                           fsr1h	equ	0xFE2
  5725                           fsr1l	equ	0xFE1
  5726                           indf2	equ	0xFDF
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           plusw2	equ	0xFDB
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _vscp_writeAppReg *****************
  5735 ;; Defined at:
  5736 ;;		line 641 in file "../main.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;  reg             1    wreg     unsigned char 
  5739 ;;  val             1   20[COMRAM] unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  reg             1   22[COMRAM] unsigned char 
  5742 ;;  rv              1   21[COMRAM] unsigned char 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      unsigned char 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : F/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5752 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5755 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5756 ;;Total ram usage:        3 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:    4
  5759 ;; This function calls:
  5760 ;;		_Read_b_eep
  5761 ;;		_writeControlReg
  5762 ;;		_Busy_eep
  5763 ;;		_Write_b_eep
  5764 ;; This function is called by:
  5765 ;;		_vscp_writeRegister
  5766 ;;		_vscp_handleProtocolEvent
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text23
  5771  001DAA                     __ptext23:
  5772                           	opt stack 0
  5773  001DAA                     _vscp_writeAppReg:
  5774                           	opt stack 24
  5775                           
  5776                           ;incstack = 0
  5777                           ;incstack = 0
  5778                           ;vscp_writeAppReg@reg stored from wreg
  5779  001DAA  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;main.c: 642: uint8_t rv;
  5783                           ;main.c: 644: rv = ~val;
  5784  001DAE  1C15               	comf	vscp_writeAppReg@val,w,c
  5785  001DB0  6E16               	movwf	vscp_writeAppReg@rv,c
  5786                           
  5787                           ;main.c: 647: if ( 0 == vscp_page_select ) {
  5788  001DB2  5053               	movf	_vscp_page_select+1,w,c
  5789  001DB4  1052               	iorwf	_vscp_page_select,w,c
  5790  001DB6  E170               	bnz	l6590
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;main.c: 650: if ( reg == 0 ) {
  5794  001DB8  6617               	tstfsz	vscp_writeAppReg@reg,c
  5795  001DBA  D00F               	goto	l6546
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;main.c: 651: (Busy_eep(), Write_b_eep(0x21 + 0,val));
  5799  001DBC  EC01  F018         	call	_Busy_eep	;wreg free
  5800  001DC0  6A09               	clrf	?_Write_b_eep+1,c
  5801  001DC2  0E21               	movlw	33
  5802  001DC4  6E08               	movwf	?_Write_b_eep,c
  5803  001DC6  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5804  001DCA  ECAD  F015         	call	_Write_b_eep	;wreg free
  5805                           
  5806                           ;main.c: 652: rv = Read_b_eep(0x21 + 0);
  5807  001DCE  6A09               	clrf	?_Read_b_eep+1,c
  5808  001DD0  0E21               	movlw	33
  5809  001DD2  6E08               	movwf	?_Read_b_eep,c
  5810  001DD4  EC62  F017         	call	_Read_b_eep	;wreg free
  5811  001DD8  D073               	goto	L12
  5812  001DDA                     l6546:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;main.c: 654: else if ( reg == 1 ) {
  5816  001DDA  0417               	decf	vscp_writeAppReg@reg,w,c
  5817  001DDC  E10F               	bnz	l6554
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;main.c: 656: (Busy_eep(), Write_b_eep(0x21 + 1,val));
  5821  001DDE  EC01  F018         	call	_Busy_eep	;wreg free
  5822  001DE2  6A09               	clrf	?_Write_b_eep+1,c
  5823  001DE4  0E22               	movlw	34
  5824  001DE6  6E08               	movwf	?_Write_b_eep,c
  5825  001DE8  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5826  001DEC  ECAD  F015         	call	_Write_b_eep	;wreg free
  5827                           
  5828                           ;main.c: 657: rv = Read_b_eep(0x21 + 1);
  5829  001DF0  6A09               	clrf	?_Read_b_eep+1,c
  5830  001DF2  0E22               	movlw	34
  5831  001DF4  6E08               	movwf	?_Read_b_eep,c
  5832  001DF6  EC62  F017         	call	_Read_b_eep	;wreg free
  5833  001DFA  D062               	goto	L12
  5834  001DFC                     l6554:
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;main.c: 660: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5838  001DFC  0E04               	movlw	4
  5839  001DFE  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5840  001E00  D012               	goto	l6564
  5841                           
  5842                           ; BSR set to: 0
  5843  001E02  0E17               	movlw	23
  5844  001E04  6017               	cpfslt	vscp_writeAppReg@reg,c
  5845  001E06  D00F               	goto	l6564
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;main.c: 661: (Busy_eep(), Write_b_eep(0x21 + 5 + ( reg - 5 ),val));
  5849  001E08  EC01  F018         	call	_Busy_eep	;wreg free
  5850  001E0C  0E21               	movlw	33
  5851  001E0E  D85B               	call	PL30	;call to abstracted procedure
  5852  001E10  ECAD  F015         	call	_Write_b_eep	;wreg free
  5853                           
  5854                           ;main.c: 663: rv = Read_b_eep(0x21 + 5 + ( reg - 5 ));
  5855  001E14  0E21               	movlw	33
  5856  001E16  2417               	addwf	vscp_writeAppReg@reg,w,c
  5857  001E18  6E08               	movwf	?_Read_b_eep,c
  5858  001E1A  6A09               	clrf	?_Read_b_eep+1,c
  5859  001E1C  0E00               	movlw	0
  5860  001E1E  2209               	addwfc	?_Read_b_eep+1,f,c
  5861  001E20  EC62  F017         	call	_Read_b_eep	;wreg free
  5862  001E24  D04D               	goto	L12
  5863  001E26                     l6564:
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;main.c: 667: else if ( reg == 2 ) {
  5867  001E26  5017               	movf	vscp_writeAppReg@reg,w,c
  5868  001E28  0A02               	xorlw	2
  5869  001E2A  E10F               	bnz	l6572
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;main.c: 668: (Busy_eep(), Write_b_eep(0x21 + 2,val));
  5873  001E2C  EC01  F018         	call	_Busy_eep	;wreg free
  5874  001E30  6A09               	clrf	?_Write_b_eep+1,c
  5875  001E32  0E23               	movlw	35
  5876  001E34  6E08               	movwf	?_Write_b_eep,c
  5877  001E36  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5878  001E3A  ECAD  F015         	call	_Write_b_eep	;wreg free
  5879                           
  5880                           ;main.c: 669: rv = writeControlReg( 0, val );
  5881  001E3E  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5882  001E42  0E00               	movlw	0
  5883  001E44  EC5D  F00D         	call	_writeControlReg
  5884  001E48  D03B               	goto	L12
  5885  001E4A                     l6572:
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;main.c: 672: else if ( reg == 3 ) {
  5889  001E4A  5017               	movf	vscp_writeAppReg@reg,w,c
  5890  001E4C  0A03               	xorlw	3
  5891  001E4E  E10F               	bnz	l6580
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;main.c: 673: (Busy_eep(), Write_b_eep(0x21 + 3,val));
  5895  001E50  EC01  F018         	call	_Busy_eep	;wreg free
  5896  001E54  6A09               	clrf	?_Write_b_eep+1,c
  5897  001E56  0E24               	movlw	36
  5898  001E58  6E08               	movwf	?_Write_b_eep,c
  5899  001E5A  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5900  001E5E  ECAD  F015         	call	_Write_b_eep	;wreg free
  5901                           
  5902                           ;main.c: 674: rv = writeControlReg( 1, val );
  5903  001E62  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5904  001E66  0E01               	movlw	1
  5905  001E68  EC5D  F00D         	call	_writeControlReg
  5906  001E6C  D029               	goto	L12
  5907  001E6E                     l6580:
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;main.c: 677: else if ( reg == 4 ) {
  5911  001E6E  5017               	movf	vscp_writeAppReg@reg,w,c
  5912  001E70  0A04               	xorlw	4
  5913  001E72  E127               	bnz	l6600
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;main.c: 678: (Busy_eep(), Write_b_eep(0x21 + 4,val));
  5917  001E74  EC01  F018         	call	_Busy_eep	;wreg free
  5918  001E78  6A09               	clrf	?_Write_b_eep+1,c
  5919  001E7A  0E25               	movlw	37
  5920  001E7C  6E08               	movwf	?_Write_b_eep,c
  5921  001E7E  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5922  001E82  ECAD  F015         	call	_Write_b_eep	;wreg free
  5923                           
  5924                           ;main.c: 679: rv = writeControlReg( 2, val );
  5925  001E86  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5926  001E8A  0E02               	movlw	2
  5927  001E8C  EC5D  F00D         	call	_writeControlReg
  5928  001E90  6E16               	movwf	vscp_writeAppReg@rv,c
  5929                           
  5930                           ;main.c: 680: rv &= 0x03;
  5931  001E92  0E03               	movlw	3
  5932  001E94  1616               	andwf	vscp_writeAppReg@rv,f,c
  5933  001E96  D015               	goto	l6600
  5934  001E98                     l6590:
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;main.c: 685: else if ( 1 == vscp_page_select ) {
  5938  001E98  0452               	decf	_vscp_page_select,w,c
  5939  001E9A  1053               	iorwf	_vscp_page_select+1,w,c
  5940  001E9C  E112               	bnz	l6600
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;main.c: 688: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5944                           ;main.c: 689: ( 8 * 8 ) ) ) ) {
  5945  001E9E  0E41               	movlw	65
  5946  001EA0  6017               	cpfslt	vscp_writeAppReg@reg,c
  5947  001EA2  D00F               	goto	l6600
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;main.c: 690: (Busy_eep(), Write_b_eep(0x21 + 23 + ( reg - 0 ),val));
  5951  001EA4  EC01  F018         	call	_Busy_eep	;wreg free
  5952  001EA8  0E38               	movlw	56
  5953  001EAA  D80D               	call	PL30	;call to abstracted procedure
  5954  001EAC  ECAD  F015         	call	_Write_b_eep	;wreg free
  5955                           
  5956                           ;main.c: 692: rv = Read_b_eep(0x21 + 23 + ( reg - 0 ));
  5957  001EB0  0E38               	movlw	56
  5958  001EB2  2417               	addwf	vscp_writeAppReg@reg,w,c
  5959  001EB4  6E08               	movwf	?_Read_b_eep,c
  5960  001EB6  6A09               	clrf	?_Read_b_eep+1,c
  5961  001EB8  0E00               	movlw	0
  5962  001EBA  2209               	addwfc	?_Read_b_eep+1,f,c
  5963  001EBC  EC62  F017         	call	_Read_b_eep	;wreg free
  5964  001EC0                     L12:
  5965  001EC0  6E16               	movwf	vscp_writeAppReg@rv,c
  5966  001EC2                     l6600:
  5967                           
  5968                           ;main.c: 694: }
  5969                           ;main.c: 696: }
  5970                           ;main.c: 698: return rv;
  5971  001EC2  5016               	movf	vscp_writeAppReg@rv,w,c
  5972  001EC4  0012               	return	
  5973  001EC6                     __end_of_vscp_writeAppReg:
  5974                           	opt stack 0
  5975  001EC6                     PL30:
  5976                           	opt stack 24
  5977  001EC6  2417               	addwf	vscp_writeAppReg@reg,w,c
  5978  001EC8  6E08               	movwf	?_Write_b_eep,c
  5979  001ECA  6A09               	clrf	?_Write_b_eep+1,c
  5980  001ECC  0E00               	movlw	0
  5981  001ECE  2209               	addwfc	?_Write_b_eep+1,f,c
  5982  001ED0  C015  F00A         	movff	vscp_writeAppReg@val,?_Write_b_eep+2
  5983  001ED4  0C00               	retlw	0
  5984  001ED6                     __end_ofPL30:
  5985                           	opt stack 0
  5986                           tblptru	equ	0xFF8
  5987                           tblptrh	equ	0xFF7
  5988                           tblptrl	equ	0xFF6
  5989                           tablat	equ	0xFF5
  5990                           prodh	equ	0xFF4
  5991                           prodl	equ	0xFF3
  5992                           intcon	equ	0xFF2
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           fsr1h	equ	0xFE2
  5997                           fsr1l	equ	0xFE1
  5998                           indf2	equ	0xFDF
  5999                           postinc2	equ	0xFDE
  6000                           postdec2	equ	0xFDD
  6001                           plusw2	equ	0xFDB
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _writeControlReg *****************
  6007 ;; Defined at:
  6008 ;;		line 706 in file "../main.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  ctrlreg         1    wreg     unsigned char 
  6011 ;;  val             1   16[COMRAM] unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  6014 ;;  rv              1   19[COMRAM] unsigned char 
  6015 ;; Return value:  Size  Location     Type
  6016 ;;                  1    wreg      unsigned char 
  6017 ;; Registers used:
  6018 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6019 ;; Tracked objects:
  6020 ;;		On entry : 0/0
  6021 ;;		On exit  : 0/0
  6022 ;;		Unchanged: 0/0
  6023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6024 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6025 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6027 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6028 ;;Total ram usage:        4 bytes
  6029 ;; Hardware stack levels used:    1
  6030 ;; Hardware stack levels required when called:    3
  6031 ;; This function calls:
  6032 ;;		_readControlReg
  6033 ;; This function is called by:
  6034 ;;		_main
  6035 ;;		_vscp_writeAppReg
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text24
  6040  001ABA                     __ptext24:
  6041                           	opt stack 0
  6042  001ABA                     _writeControlReg:
  6043                           	opt stack 24
  6044                           
  6045                           ;incstack = 0
  6046                           ;incstack = 0
  6047                           ;writeControlReg@ctrlreg stored from wreg
  6048  001ABA  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  6049                           
  6050                           ;main.c: 707: uint8_t rv = 0;
  6051  001ABE  6A14               	clrf	writeControlReg@rv,c
  6052                           
  6053                           ;main.c: 709: switch ( ctrlreg ) {
  6054  001AC0  D0B9               	goto	l3978
  6055  001AC2                     l3964:
  6056  001AC2  0E01               	movlw	1
  6057                           
  6058                           ;main.c: 712: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  6059  001AC4  A011               	btfss	writeControlReg@val,0,c
  6060  001AC6  0E00               	movlw	0
  6061  001AC8  6E12               	movwf	??_writeControlReg& (0+255),c
  6062  001ACA  3212               	rrcf	??_writeControlReg,f,c
  6063  001ACC  3212               	rrcf	??_writeControlReg,f,c
  6064  001ACE  5082               	movf	3970,w,c	;volatile
  6065  001AD0  1812               	xorwf	??_writeControlReg,w,c
  6066  001AD2  0B7F               	andlw	-129
  6067  001AD4  1812               	xorwf	??_writeControlReg,w,c
  6068  001AD6  6E82               	movwf	3970,c	;volatile
  6069  001AD8  0E01               	movlw	1
  6070                           
  6071                           ;main.c: 713: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  6072  001ADA  A211               	btfss	writeControlReg@val,1,c
  6073  001ADC  0E00               	movlw	0
  6074  001ADE  6E12               	movwf	??_writeControlReg& (0+255),c
  6075  001AE0  3A12               	swapf	??_writeControlReg,f,c
  6076  001AE2  4612               	rlncf	??_writeControlReg,f,c
  6077  001AE4  4612               	rlncf	??_writeControlReg,f,c
  6078  001AE6  5082               	movf	3970,w,c	;volatile
  6079  001AE8  1812               	xorwf	??_writeControlReg,w,c
  6080  001AEA  0BBF               	andlw	-65
  6081  001AEC  1812               	xorwf	??_writeControlReg,w,c
  6082  001AEE  6E82               	movwf	3970,c	;volatile
  6083  001AF0  0E01               	movlw	1
  6084                           
  6085                           ;main.c: 714: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  6086  001AF2  A411               	btfss	writeControlReg@val,2,c
  6087  001AF4  0E00               	movlw	0
  6088  001AF6  6E12               	movwf	??_writeControlReg& (0+255),c
  6089  001AF8  4612               	rlncf	??_writeControlReg,f,c
  6090  001AFA  4612               	rlncf	??_writeControlReg,f,c
  6091  001AFC  4612               	rlncf	??_writeControlReg,f,c
  6092  001AFE  5082               	movf	3970,w,c	;volatile
  6093  001B00  1812               	xorwf	??_writeControlReg,w,c
  6094  001B02  0BF7               	andlw	-9
  6095  001B04  1812               	xorwf	??_writeControlReg,w,c
  6096  001B06  6E82               	movwf	3970,c	;volatile
  6097  001B08  0E01               	movlw	1
  6098                           
  6099                           ;main.c: 715: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  6100  001B0A  A611               	btfss	writeControlReg@val,3,c
  6101  001B0C  0E00               	movlw	0
  6102  001B0E  6E12               	movwf	??_writeControlReg& (0+255),c
  6103  001B10  3A12               	swapf	??_writeControlReg,f,c
  6104  001B12  5082               	movf	3970,w,c	;volatile
  6105  001B14  1812               	xorwf	??_writeControlReg,w,c
  6106  001B16  0BEF               	andlw	-17
  6107  001B18  1812               	xorwf	??_writeControlReg,w,c
  6108  001B1A  6E82               	movwf	3970,c	;volatile
  6109  001B1C  0E01               	movlw	1
  6110                           
  6111                           ;main.c: 716: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  6112  001B1E  A811               	btfss	writeControlReg@val,4,c
  6113  001B20  0E00               	movlw	0
  6114  001B22  6E12               	movwf	??_writeControlReg& (0+255),c
  6115  001B24  3A12               	swapf	??_writeControlReg,f,c
  6116  001B26  4612               	rlncf	??_writeControlReg,f,c
  6117  001B28  5082               	movf	3970,w,c	;volatile
  6118  001B2A  1812               	xorwf	??_writeControlReg,w,c
  6119  001B2C  0BDF               	andlw	-33
  6120  001B2E  1812               	xorwf	??_writeControlReg,w,c
  6121  001B30  6E82               	movwf	3970,c	;volatile
  6122  001B32  0E01               	movlw	1
  6123                           
  6124                           ;main.c: 717: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  6125  001B34  AA11               	btfss	writeControlReg@val,5,c
  6126  001B36  0E00               	movlw	0
  6127  001B38  6E12               	movwf	??_writeControlReg& (0+255),c
  6128  001B3A  5080               	movf	3968,w,c	;volatile
  6129  001B3C  1812               	xorwf	??_writeControlReg,w,c
  6130  001B3E  0BFE               	andlw	-2
  6131  001B40  1812               	xorwf	??_writeControlReg,w,c
  6132  001B42  6E80               	movwf	3968,c	;volatile
  6133  001B44  0E01               	movlw	1
  6134                           
  6135                           ;main.c: 718: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  6136  001B46  AC11               	btfss	writeControlReg@val,6,c
  6137  001B48  0E00               	movlw	0
  6138  001B4A  6E12               	movwf	??_writeControlReg& (0+255),c
  6139  001B4C  4612               	rlncf	??_writeControlReg,f,c
  6140  001B4E  5080               	movf	3968,w,c	;volatile
  6141  001B50  1812               	xorwf	??_writeControlReg,w,c
  6142  001B52  0BFD               	andlw	-3
  6143  001B54  1812               	xorwf	??_writeControlReg,w,c
  6144  001B56  6E80               	movwf	3968,c	;volatile
  6145  001B58  0E01               	movlw	1
  6146                           
  6147                           ;main.c: 719: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  6148  001B5A  AE11               	btfss	writeControlReg@val,7,c
  6149  001B5C  0E00               	movlw	0
  6150  001B5E  6E12               	movwf	??_writeControlReg& (0+255),c
  6151  001B60  4612               	rlncf	??_writeControlReg,f,c
  6152  001B62  4612               	rlncf	??_writeControlReg,f,c
  6153  001B64  5080               	movf	3968,w,c	;volatile
  6154  001B66  1812               	xorwf	??_writeControlReg,w,c
  6155  001B68  0BFB               	andlw	-5
  6156  001B6A  1812               	xorwf	??_writeControlReg,w,c
  6157  001B6C  6E80               	movwf	3968,c	;volatile
  6158                           
  6159                           ;main.c: 720: rv = readControlReg( 0 );
  6160  001B6E  0E00               	movlw	0
  6161  001B70  EC94  F011         	call	_readControlReg
  6162  001B74  D05D               	goto	L14
  6163  001B76                     l3968:
  6164  001B76  0E01               	movlw	1
  6165                           
  6166                           ;main.c: 724: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  6167  001B78  A011               	btfss	writeControlReg@val,0,c
  6168  001B7A  0E00               	movlw	0
  6169  001B7C  6E12               	movwf	??_writeControlReg& (0+255),c
  6170  001B7E  4612               	rlncf	??_writeControlReg,f,c
  6171  001B80  4612               	rlncf	??_writeControlReg,f,c
  6172  001B82  4612               	rlncf	??_writeControlReg,f,c
  6173  001B84  5080               	movf	3968,w,c	;volatile
  6174  001B86  1812               	xorwf	??_writeControlReg,w,c
  6175  001B88  0BF7               	andlw	-9
  6176  001B8A  1812               	xorwf	??_writeControlReg,w,c
  6177  001B8C  6E80               	movwf	3968,c	;volatile
  6178  001B8E  0E01               	movlw	1
  6179                           
  6180                           ;main.c: 725: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  6181  001B90  A211               	btfss	writeControlReg@val,1,c
  6182  001B92  0E00               	movlw	0
  6183  001B94  6E12               	movwf	??_writeControlReg& (0+255),c
  6184  001B96  3A12               	swapf	??_writeControlReg,f,c
  6185  001B98  4612               	rlncf	??_writeControlReg,f,c
  6186  001B9A  5080               	movf	3968,w,c	;volatile
  6187  001B9C  1812               	xorwf	??_writeControlReg,w,c
  6188  001B9E  0BDF               	andlw	-33
  6189  001BA0  1812               	xorwf	??_writeControlReg,w,c
  6190  001BA2  6E80               	movwf	3968,c	;volatile
  6191  001BA4  0E01               	movlw	1
  6192                           
  6193                           ;main.c: 728: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  6194  001BA6  A811               	btfss	writeControlReg@val,4,c
  6195  001BA8  0E00               	movlw	0
  6196  001BAA  6E12               	movwf	??_writeControlReg& (0+255),c
  6197  001BAC  3A12               	swapf	??_writeControlReg,f,c
  6198  001BAE  5081               	movf	3969,w,c	;volatile
  6199  001BB0  1812               	xorwf	??_writeControlReg,w,c
  6200  001BB2  0BEF               	andlw	-17
  6201  001BB4  1812               	xorwf	??_writeControlReg,w,c
  6202  001BB6  6E81               	movwf	3969,c	;volatile
  6203  001BB8  0E01               	movlw	1
  6204                           
  6205                           ;main.c: 729: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  6206  001BBA  AA11               	btfss	writeControlReg@val,5,c
  6207  001BBC  0E00               	movlw	0
  6208  001BBE  6E12               	movwf	??_writeControlReg& (0+255),c
  6209  001BC0  4612               	rlncf	??_writeControlReg,f,c
  6210  001BC2  4612               	rlncf	??_writeControlReg,f,c
  6211  001BC4  5082               	movf	3970,w,c	;volatile
  6212  001BC6  1812               	xorwf	??_writeControlReg,w,c
  6213  001BC8  0BFB               	andlw	-5
  6214  001BCA  1812               	xorwf	??_writeControlReg,w,c
  6215  001BCC  6E82               	movwf	3970,c	;volatile
  6216  001BCE  0E01               	movlw	1
  6217                           
  6218                           ;main.c: 730: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  6219  001BD0  AC11               	btfss	writeControlReg@val,6,c
  6220  001BD2  0E00               	movlw	0
  6221  001BD4  6E12               	movwf	??_writeControlReg& (0+255),c
  6222  001BD6  4612               	rlncf	??_writeControlReg,f,c
  6223  001BD8  5081               	movf	3969,w,c	;volatile
  6224  001BDA  1812               	xorwf	??_writeControlReg,w,c
  6225  001BDC  0BFD               	andlw	-3
  6226  001BDE  1812               	xorwf	??_writeControlReg,w,c
  6227  001BE0  6E81               	movwf	3969,c	;volatile
  6228  001BE2  0E01               	movlw	1
  6229                           
  6230                           ;main.c: 731: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  6231  001BE4  AE11               	btfss	writeControlReg@val,7,c
  6232  001BE6  0E00               	movlw	0
  6233  001BE8  6E12               	movwf	??_writeControlReg& (0+255),c
  6234  001BEA  5081               	movf	3969,w,c	;volatile
  6235  001BEC  1812               	xorwf	??_writeControlReg,w,c
  6236  001BEE  0BFE               	andlw	-2
  6237  001BF0  1812               	xorwf	??_writeControlReg,w,c
  6238  001BF2  6E81               	movwf	3969,c	;volatile
  6239                           
  6240                           ;main.c: 732: rv = readControlReg( 1 );
  6241  001BF4  0E01               	movlw	1
  6242  001BF6  EC94  F011         	call	_readControlReg
  6243  001BFA  D01A               	goto	L14
  6244  001BFC                     l3972:
  6245  001BFC  0E01               	movlw	1
  6246                           
  6247                           ;main.c: 736: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  6248  001BFE  A011               	btfss	writeControlReg@val,0,c
  6249  001C00  0E00               	movlw	0
  6250  001C02  6E12               	movwf	??_writeControlReg& (0+255),c
  6251  001C04  3A12               	swapf	??_writeControlReg,f,c
  6252  001C06  4612               	rlncf	??_writeControlReg,f,c
  6253  001C08  4612               	rlncf	??_writeControlReg,f,c
  6254  001C0A  5081               	movf	3969,w,c	;volatile
  6255  001C0C  1812               	xorwf	??_writeControlReg,w,c
  6256  001C0E  0BBF               	andlw	-65
  6257  001C10  1812               	xorwf	??_writeControlReg,w,c
  6258  001C12  6E81               	movwf	3969,c	;volatile
  6259  001C14  0E01               	movlw	1
  6260                           
  6261                           ;main.c: 737: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  6262  001C16  A211               	btfss	writeControlReg@val,1,c
  6263  001C18  0E00               	movlw	0
  6264  001C1A  6E12               	movwf	??_writeControlReg& (0+255),c
  6265  001C1C  3A12               	swapf	??_writeControlReg,f,c
  6266  001C1E  4612               	rlncf	??_writeControlReg,f,c
  6267  001C20  5081               	movf	3969,w,c	;volatile
  6268  001C22  1812               	xorwf	??_writeControlReg,w,c
  6269  001C24  0BDF               	andlw	-33
  6270  001C26  1812               	xorwf	??_writeControlReg,w,c
  6271  001C28  6E81               	movwf	3969,c	;volatile
  6272                           
  6273                           ;main.c: 738: rv = readControlReg( 2 );
  6274  001C2A  0E02               	movlw	2
  6275  001C2C  EC94  F011         	call	_readControlReg
  6276  001C30                     L14:
  6277  001C30  6E14               	movwf	writeControlReg@rv,c
  6278                           
  6279                           ;main.c: 739: break;
  6280  001C32  D007               	goto	l3980
  6281  001C34                     l3978:
  6282  001C34  5013               	movf	writeControlReg@ctrlreg,w,c
  6283                           
  6284                           ; Switch size 1, requested type "space"
  6285                           ; Number of cases is 3, Range of values is 0 to 2
  6286                           ; switch strategies available:
  6287                           ; Name         Instructions Cycles
  6288                           ; simple_byte           10     6 (average)
  6289                           ;	Chosen strategy is simple_byte
  6290  001C36  E101 D744          	bz	l3964
  6291  001C3A  0A01               	xorlw	1	; case 1
  6292  001C3C  E09C               	bz	l3968
  6293  001C3E  0A03               	xorlw	3	; case 2
  6294  001C40  E0DD               	bz	l3972
  6295  001C42                     l3980:
  6296                           
  6297                           ;main.c: 742: return rv;
  6298  001C42  5014               	movf	writeControlReg@rv,w,c
  6299  001C44  0012               	return	
  6300  001C46                     __end_of_writeControlReg:
  6301                           	opt stack 0
  6302                           tblptru	equ	0xFF8
  6303                           tblptrh	equ	0xFF7
  6304                           tblptrl	equ	0xFF6
  6305                           tablat	equ	0xFF5
  6306                           prodh	equ	0xFF4
  6307                           prodl	equ	0xFF3
  6308                           intcon	equ	0xFF2
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           indf1	equ	0xFE7
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           postdec2	equ	0xFDD
  6317                           plusw2	equ	0xFDB
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _vscp_readRegister *****************
  6323 ;; Defined at:
  6324 ;;		line 561 in file "../../vscp_firmware/common/vscp_firmware.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;  reg             1    wreg     unsigned char 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  reg             1   28[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      unsigned char 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6333 ;; Tracked objects:
  6334 ;;		On entry : F/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6339 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6341 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6342 ;;Total ram usage:        1 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    5
  6345 ;; This function calls:
  6346 ;;		_vscp_readAppReg
  6347 ;;		_vscp_readStdReg
  6348 ;; This function is called by:
  6349 ;;		_vscp_handleProtocolEvent
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text25
  6354  002EF4                     __ptext25:
  6355                           	opt stack 0
  6356  002EF4                     _vscp_readRegister:
  6357                           	opt stack 24
  6358                           
  6359                           ;incstack = 0
  6360                           ;incstack = 0
  6361                           ;vscp_readRegister@reg stored from wreg
  6362  002EF4  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;vscp_firmware.c: 562: if (reg >= 0x80) {
  6366  002EF8  0E7F               	movlw	127
  6367  002EFA  641D               	cpfsgt	vscp_readRegister@reg,c
  6368  002EFC  D003               	goto	l6886
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;vscp_firmware.c: 563: return vscp_readStdReg(reg);
  6372  002EFE  501D               	movf	vscp_readRegister@reg,w,c
  6373  002F00  EF8E  F00C         	goto	_vscp_readStdReg
  6374  002F04                     l6886:
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;vscp_firmware.c: 565: else {
  6378                           ;vscp_firmware.c: 566: return vscp_readAppReg(reg);
  6379  002F04  501D               	movf	vscp_readRegister@reg,w,c
  6380  002F06  EFEC  F013         	goto	_vscp_readAppReg
  6381  002F0A                     __end_of_vscp_readRegister:
  6382                           	opt stack 0
  6383                           tblptru	equ	0xFF8
  6384                           tblptrh	equ	0xFF7
  6385                           tblptrl	equ	0xFF6
  6386                           tablat	equ	0xFF5
  6387                           prodh	equ	0xFF4
  6388                           prodl	equ	0xFF3
  6389                           intcon	equ	0xFF2
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           indf1	equ	0xFE7
  6393                           fsr1h	equ	0xFE2
  6394                           fsr1l	equ	0xFE1
  6395                           indf2	equ	0xFDF
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           plusw2	equ	0xFDB
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _vscp_readStdReg *****************
  6404 ;; Defined at:
  6405 ;;		line 575 in file "../../vscp_firmware/common/vscp_firmware.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  reg             1    wreg     unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  reg             1   27[COMRAM] unsigned char 
  6410 ;;  code            4   20[COMRAM] unsigned long 
  6411 ;;  idx             1   25[COMRAM] unsigned char 
  6412 ;;  code            4   16[COMRAM] unsigned long 
  6413 ;;  idx             1   24[COMRAM] unsigned char 
  6414 ;;  rv              1   26[COMRAM] unsigned char 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      unsigned char 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : F/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6425 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6426 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6427 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6428 ;;Total ram usage:       17 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    4
  6431 ;; This function calls:
  6432 ;;		_vscp_getMajorVersion
  6433 ;;		_vscp_getMinorVersion
  6434 ;;		_vscp_getSubMinorVersion
  6435 ;;		_vscp_getGUID
  6436 ;;		_vscp_getMDF_URL
  6437 ;;		_vscp_getUserID
  6438 ;;		_vscp_getManufacturerId
  6439 ;;		_vscp_getBootLoaderAlgorithm
  6440 ;;		_vscp_getBufferSize
  6441 ;;		_vscp_getFamilyCode
  6442 ;;		_vscp_getFamilyType
  6443 ;;		_vscp_getRegisterPagesUsed
  6444 ;; This function is called by:
  6445 ;;		_vscp_readRegister
  6446 ;;		_vscp_handleProtocolEvent
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           	psect	text26
  6451  00191C                     __ptext26:
  6452                           	opt stack 0
  6453  00191C                     _vscp_readStdReg:
  6454                           	opt stack 25
  6455                           
  6456                           ;incstack = 0
  6457                           ;incstack = 0
  6458                           ;vscp_readStdReg@reg stored from wreg
  6459  00191C  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;vscp_firmware.c: 576: uint8_t rv = 0;
  6463  001920  6A1B               	clrf	vscp_readStdReg@rv,c
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;vscp_firmware.c: 578: if (0x80 == reg) {
  6467  001922  501C               	movf	vscp_readStdReg@reg,w,c
  6468  001924  0A80               	xorlw	128
  6469  001926  E104               	bnz	l6896
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;vscp_firmware.c: 581: rv = vscp_alarmstatus;
  6473  001928  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  6474                           
  6475                           ;vscp_firmware.c: 582: vscp_alarmstatus = 0x00;
  6476  00192C  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6477                           
  6478                           ;vscp_firmware.c: 584: }
  6479  00192E  D0B3               	goto	l6984
  6480  001930                     l6896:
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;vscp_firmware.c: 585: else if (0x81 == reg) {
  6484  001930  501C               	movf	vscp_readStdReg@reg,w,c
  6485  001932  0A81               	xorlw	129
  6486  001934  E102               	bnz	l6900
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;vscp_firmware.c: 588: rv = 1;
  6490  001936  0E01               	movlw	1
  6491  001938  D075               	goto	L25
  6492  00193A                     l6900:
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;vscp_firmware.c: 591: else if (0x82 == reg) {
  6496  00193A  501C               	movf	vscp_readStdReg@reg,w,c
  6497  00193C  0A82               	xorlw	130
  6498  00193E  E102               	bnz	l6904
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;vscp_firmware.c: 594: rv = 5;
  6502  001940  0E05               	movlw	5
  6503  001942  D070               	goto	L25
  6504  001944                     l6904:
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;vscp_firmware.c: 597: else if (0x83 == reg) {
  6508  001944  501C               	movf	vscp_readStdReg@reg,w,c
  6509  001946  0A83               	xorlw	131
  6510  001948  E102               	bnz	l6908
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;vscp_firmware.c: 600: rv = 0;
  6514  00194A  6A1B               	clrf	vscp_readStdReg@rv,c
  6515                           
  6516                           ;vscp_firmware.c: 602: }
  6517  00194C  D0A4               	goto	l6984
  6518  00194E                     l6908:
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;vscp_firmware.c: 603: else if (0x94 == reg) {
  6522  00194E  501C               	movf	vscp_readStdReg@reg,w,c
  6523  001950  0A94               	xorlw	148
  6524  001952  E103               	bnz	l6912
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;vscp_firmware.c: 606: rv = vscp_getMajorVersion();
  6528  001954  EC0D  F018         	call	_vscp_getMajorVersion	;wreg free
  6529  001958  D065               	goto	L25
  6530  00195A                     l6912:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;vscp_firmware.c: 609: else if (0x95 == reg) {
  6534  00195A  501C               	movf	vscp_readStdReg@reg,w,c
  6535  00195C  0A95               	xorlw	149
  6536  00195E  E103               	bnz	l6916
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;vscp_firmware.c: 612: rv = vscp_getMinorVersion();
  6540  001960  EC0C  F018         	call	_vscp_getMinorVersion	;wreg free
  6541  001964  D05F               	goto	L25
  6542  001966                     l6916:
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;vscp_firmware.c: 615: else if (0x96 == reg) {
  6546  001966  501C               	movf	vscp_readStdReg@reg,w,c
  6547  001968  0A96               	xorlw	150
  6548  00196A  E103               	bnz	l6920
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;vscp_firmware.c: 618: rv = vscp_getSubMinorVersion();
  6552  00196C  EC0B  F018         	call	_vscp_getSubMinorVersion	;wreg free
  6553  001970  D059               	goto	L25
  6554  001972                     l6920:
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;vscp_firmware.c: 621: else if (reg < 0x89) {
  6558  001972  0E89               	movlw	137
  6559  001974  601C               	cpfslt	vscp_readStdReg@reg,c
  6560  001976  D005               	goto	l6924
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;vscp_firmware.c: 624: rv = vscp_getUserID(reg - 0x84);
  6564  001978  501C               	movf	vscp_readStdReg@reg,w,c
  6565  00197A  0F7C               	addlw	124
  6566  00197C  ECB0  F017         	call	_vscp_getUserID
  6567  001980  D051               	goto	L25
  6568  001982                     l6924:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;vscp_firmware.c: 627: else if ((reg > 0x88) &&
  6572                           ;vscp_firmware.c: 628: (reg < 0x91)) {
  6573  001982  0E88               	movlw	136
  6574  001984  641C               	cpfsgt	vscp_readStdReg@reg,c
  6575  001986  D008               	goto	l6930
  6576                           
  6577                           ; BSR set to: 0
  6578  001988  0E91               	movlw	145
  6579  00198A  601C               	cpfslt	vscp_readStdReg@reg,c
  6580  00198C  D005               	goto	l6930
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;vscp_firmware.c: 631: rv = vscp_getManufacturerId(reg - 0x89);
  6584  00198E  501C               	movf	vscp_readStdReg@reg,w,c
  6585  001990  0F77               	addlw	119
  6586  001992  ECA6  F017         	call	_vscp_getManufacturerId
  6587  001996  D046               	goto	L25
  6588  001998                     l6930:
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;vscp_firmware.c: 634: else if (0x91 == reg) {
  6592  001998  501C               	movf	vscp_readStdReg@reg,w,c
  6593  00199A  0A91               	xorlw	145
  6594  00199C  E103               	bnz	l6934
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;vscp_firmware.c: 637: rv = vscp_nickname;
  6598  00199E  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6599                           
  6600                           ;vscp_firmware.c: 639: }
  6601  0019A2  D079               	goto	l6984
  6602  0019A4                     l6934:
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;vscp_firmware.c: 640: else if (0x93 == reg) {
  6606  0019A4  501C               	movf	vscp_readStdReg@reg,w,c
  6607  0019A6  0A93               	xorlw	147
  6608  0019A8  E103               	bnz	l6938
  6609                           
  6610                           ; BSR set to: 0
  6611                           ;vscp_firmware.c: 643: rv = (vscp_page_select & 0xff);
  6612  0019AA  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6613                           
  6614                           ;vscp_firmware.c: 645: }
  6615  0019AE  D073               	goto	l6984
  6616  0019B0                     l6938:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;vscp_firmware.c: 647: else if (0x92 == reg) {
  6620  0019B0  501C               	movf	vscp_readStdReg@reg,w,c
  6621  0019B2  0A92               	xorlw	146
  6622  0019B4  E102               	bnz	l6942
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;vscp_firmware.c: 650: rv = (vscp_page_select >> 8) & 0xff;
  6626  0019B6  5053               	movf	_vscp_page_select+1,w,c
  6627  0019B8  D035               	goto	L25
  6628  0019BA                     l6942:
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;vscp_firmware.c: 653: else if (0x97 == reg) {
  6632  0019BA  501C               	movf	vscp_readStdReg@reg,w,c
  6633  0019BC  0A97               	xorlw	151
  6634  0019BE  E103               	bnz	l6946
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;vscp_firmware.c: 655: rv = vscp_getBootLoaderAlgorithm();
  6638  0019C0  EC0A  F018         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6639  0019C4  D02F               	goto	L25
  6640  0019C6                     l6946:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;vscp_firmware.c: 657: else if (0x98 == reg) {
  6644  0019C6  501C               	movf	vscp_readStdReg@reg,w,c
  6645  0019C8  0A98               	xorlw	152
  6646  0019CA  E103               	bnz	l6950
  6647                           
  6648                           ; BSR set to: 0
  6649                           ;vscp_firmware.c: 659: rv = vscp_getBufferSize();
  6650  0019CC  EC09  F018         	call	_vscp_getBufferSize	;wreg free
  6651  0019D0  D029               	goto	L25
  6652  0019D2                     l6950:
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;vscp_firmware.c: 661: else if (0x99 == reg) {
  6656  0019D2  501C               	movf	vscp_readStdReg@reg,w,c
  6657  0019D4  0A99               	xorlw	153
  6658  0019D6  E103               	bnz	l6954
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;vscp_firmware.c: 663: rv = vscp_getRegisterPagesUsed();
  6662  0019D8  EC08  F018         	call	_vscp_getRegisterPagesUsed	;wreg free
  6663  0019DC  D023               	goto	L25
  6664  0019DE                     l6954:
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;vscp_firmware.c: 665: else if ( ( reg >= 0x9A ) &&
  6668                           ;vscp_firmware.c: 666: ( reg < ( 0x9A + 4 ) ) ) {
  6669  0019DE  0E99               	movlw	153
  6670  0019E0  641C               	cpfsgt	vscp_readStdReg@reg,c
  6671  0019E2  D022               	goto	l6964
  6672                           
  6673                           ; BSR set to: 0
  6674  0019E4  0E9E               	movlw	158
  6675  0019E6  601C               	cpfslt	vscp_readStdReg@reg,c
  6676  0019E8  D01F               	goto	l6964
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;vscp_firmware.c: 668: uint32_t code = vscp_getFamilyCode();
  6680  0019EA  ECEE  F017         	call	_vscp_getFamilyCode	;wreg free
  6681  0019EE  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6682  0019F2  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6683  0019F6  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6684  0019FA  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;vscp_firmware.c: 669: uint8_t idx = reg - 0x9A;
  6688  0019FE  501C               	movf	vscp_readStdReg@reg,w,c
  6689  001A00  0F66               	addlw	102
  6690  001A02  6E19               	movwf	vscp_readStdReg@idx,c
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;vscp_firmware.c: 670: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6694  001A04  5019               	movf	vscp_readStdReg@idx,w,c
  6695  001A06  D849               	call	PL24	;call to abstracted procedure
  6696  001A08  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6697  001A0C  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6698  001A10  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6699  001A14  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6700  001A18  2AE8               	incf	wreg,f,c
  6701  001A1A  D001               	goto	u7350
  6702  001A1C                     u7355:
  6703  001A1C  D848               	call	PL38	;call to abstracted procedure
  6704  001A1E                     u7350:
  6705  001A1E  2EE8               	decfsz	wreg,f,c
  6706  001A20  D7FD               	goto	u7355
  6707  001A22  D024               	goto	L26
  6708  001A24                     L25:
  6709  001A24  6E1B               	movwf	vscp_readStdReg@rv,c
  6710                           
  6711                           ;vscp_firmware.c: 671: }
  6712  001A26  D037               	goto	l6984
  6713  001A28                     l6964:
  6714                           
  6715                           ; BSR set to: 0
  6716                           ;vscp_firmware.c: 672: else if ( ( reg >= 0x9E ) &&
  6717                           ;vscp_firmware.c: 673: ( reg < ( 0x9E + 4 ) ) ) {
  6718  001A28  0E9D               	movlw	157
  6719  001A2A  641C               	cpfsgt	vscp_readStdReg@reg,c
  6720  001A2C  D021               	goto	l6974
  6721                           
  6722                           ; BSR set to: 0
  6723  001A2E  0EA2               	movlw	162
  6724  001A30  601C               	cpfslt	vscp_readStdReg@reg,c
  6725  001A32  D01E               	goto	l6974
  6726                           
  6727                           ; BSR set to: 0
  6728                           ;vscp_firmware.c: 675: uint32_t code = vscp_getFamilyType();
  6729  001A34  ECE9  F017         	call	_vscp_getFamilyType	;wreg free
  6730  001A38  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1117+3
  6731  001A3C  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1117+2
  6732  001A40  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1117+1
  6733  001A44  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1117
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;vscp_firmware.c: 676: uint8_t idx = reg - 0x9E;
  6737  001A48  501C               	movf	vscp_readStdReg@reg,w,c
  6738  001A4A  0F62               	addlw	98
  6739  001A4C  6E1A               	movwf	vscp_readStdReg@idx_1118,c
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;vscp_firmware.c: 677: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6743  001A4E  501A               	movf	vscp_readStdReg@idx_1118,w,c
  6744  001A50  D824               	call	PL24	;call to abstracted procedure
  6745  001A52  C015  F00D         	movff	vscp_readStdReg@code_1117,??_vscp_readStdReg+1
  6746  001A56  C016  F00E         	movff	vscp_readStdReg@code_1117+1,??_vscp_readStdReg+2
  6747  001A5A  C017  F00F         	movff	vscp_readStdReg@code_1117+2,??_vscp_readStdReg+3
  6748  001A5E  C018  F010         	movff	vscp_readStdReg@code_1117+3,??_vscp_readStdReg+4
  6749  001A62  2AE8               	incf	wreg,f,c
  6750  001A64  D001               	goto	u7380
  6751  001A66                     u7385:
  6752  001A66  D823               	call	PL38	;call to abstracted procedure
  6753  001A68                     u7380:
  6754  001A68  2EE8               	decfsz	wreg,f,c
  6755  001A6A  D7FD               	goto	u7385
  6756  001A6C                     L26:
  6757  001A6C  500D               	movf	??_vscp_readStdReg+1,w,c
  6758  001A6E  D7DA               	goto	L25
  6759  001A70                     l6974:
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;vscp_firmware.c: 679: else if ((reg > (0xD0 - 1)) &&
  6763                           ;vscp_firmware.c: 680: (reg < 0xE0)) {
  6764  001A70  0ECF               	movlw	207
  6765  001A72  641C               	cpfsgt	vscp_readStdReg@reg,c
  6766  001A74  D008               	goto	l6980
  6767                           
  6768                           ; BSR set to: 0
  6769  001A76  0EE0               	movlw	224
  6770  001A78  601C               	cpfslt	vscp_readStdReg@reg,c
  6771  001A7A  D005               	goto	l6980
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;vscp_firmware.c: 683: rv = vscp_getGUID(reg - 0xD0);
  6775  001A7C  501C               	movf	vscp_readStdReg@reg,w,c
  6776  001A7E  0F30               	addlw	48
  6777  001A80  ECBA  F017         	call	_vscp_getGUID
  6778  001A84  D7CF               	goto	L25
  6779  001A86                     l6980:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;vscp_firmware.c: 686: else if ( reg >= 0xE0 ) {
  6783  001A86  0EDF               	movlw	223
  6784  001A88  641C               	cpfsgt	vscp_readStdReg@reg,c
  6785  001A8A  D005               	goto	l6984
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;vscp_firmware.c: 689: rv = vscp_getMDF_URL(reg - 0xE0);
  6789  001A8C  501C               	movf	vscp_readStdReg@reg,w,c
  6790  001A8E  0F20               	addlw	32
  6791  001A90  EC54  F017         	call	_vscp_getMDF_URL
  6792  001A94  D7C7               	goto	L25
  6793  001A96                     l6984:
  6794                           
  6795                           ;vscp_firmware.c: 691: }
  6796                           ;vscp_firmware.c: 693: return rv;
  6797  001A96  501B               	movf	vscp_readStdReg@rv,w,c
  6798  001A98  0012               	return	
  6799  001A9A                     __end_of_vscp_readStdReg:
  6800                           	opt stack 0
  6801  001A9A                     PL24:
  6802                           	opt stack 25
  6803  001A9A  0803               	sublw	3
  6804  001A9C  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6805  001A9E  90D8               	bcf	status,0,c
  6806  001AA0  360C               	rlcf	??_vscp_readStdReg,f,c
  6807  001AA2  90D8               	bcf	status,0,c
  6808  001AA4  360C               	rlcf	??_vscp_readStdReg,f,c
  6809  001AA6  90D8               	bcf	status,0,c
  6810  001AA8  360C               	rlcf	??_vscp_readStdReg,f,c
  6811  001AAA  500C               	movf	??_vscp_readStdReg,w,c
  6812  001AAC  0012               	return	
  6813  001AAE                     __end_ofPL24:
  6814                           	opt stack 0
  6815  001AAE                     PL38:
  6816                           	opt stack 25
  6817  001AAE  90D8               	bcf	status,0,c
  6818  001AB0  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6819  001AB2  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6820  001AB4  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6821  001AB6  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6822  001AB8  0012               	return	
  6823  001ABA                     __end_ofPL38:
  6824                           	opt stack 0
  6825                           tblptru	equ	0xFF8
  6826                           tblptrh	equ	0xFF7
  6827                           tblptrl	equ	0xFF6
  6828                           tablat	equ	0xFF5
  6829                           prodh	equ	0xFF4
  6830                           prodl	equ	0xFF3
  6831                           intcon	equ	0xFF2
  6832                           postinc0	equ	0xFEE
  6833                           wreg	equ	0xFE8
  6834                           indf1	equ	0xFE7
  6835                           fsr1h	equ	0xFE2
  6836                           fsr1l	equ	0xFE1
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           postdec2	equ	0xFDD
  6840                           plusw2	equ	0xFDB
  6841                           fsr2h	equ	0xFDA
  6842                           fsr2l	equ	0xFD9
  6843                           status	equ	0xFD8
  6844                           
  6845 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6846 ;; Defined at:
  6847 ;;		line 1439 in file "../main.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      unsigned char 
  6854 ;; Registers used:
  6855 ;;		wreg
  6856 ;; Tracked objects:
  6857 ;;		On entry : F/0
  6858 ;;		On exit  : F/0
  6859 ;;		Unchanged: F/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6865 ;;Total ram usage:        0 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    2
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_vscp_readStdReg
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text27
  6876  003010                     __ptext27:
  6877                           	opt stack 0
  6878  003010                     _vscp_getRegisterPagesUsed:
  6879                           	opt stack 26
  6880                           
  6881                           ; BSR set to: 0
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;main.c: 1440: return 1;
  6885                           
  6886                           ;incstack = 0
  6887                           ;incstack = 0
  6888  003010  0C01               	retlw	1
  6889  003012                     __end_of_vscp_getRegisterPagesUsed:
  6890                           	opt stack 0
  6891                           tblptru	equ	0xFF8
  6892                           tblptrh	equ	0xFF7
  6893                           tblptrl	equ	0xFF6
  6894                           tablat	equ	0xFF5
  6895                           prodh	equ	0xFF4
  6896                           prodl	equ	0xFF3
  6897                           intcon	equ	0xFF2
  6898                           postinc0	equ	0xFEE
  6899                           wreg	equ	0xFE8
  6900                           indf1	equ	0xFE7
  6901                           fsr1h	equ	0xFE2
  6902                           fsr1l	equ	0xFE1
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           plusw2	equ	0xFDB
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _vscp_getFamilyType *****************
  6912 ;; Defined at:
  6913 ;;		line 1420 in file "../main.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  4    7[COMRAM] unsigned long 
  6920 ;; Registers used:
  6921 ;;		None
  6922 ;; Tracked objects:
  6923 ;;		On entry : F/0
  6924 ;;		On exit  : F/0
  6925 ;;		Unchanged: F/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6927 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6930 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6931 ;;Total ram usage:        4 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    2
  6934 ;; This function calls:
  6935 ;;		Nothing
  6936 ;; This function is called by:
  6937 ;;		_vscp_readStdReg
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text28
  6942  002FD2                     __ptext28:
  6943                           	opt stack 0
  6944  002FD2                     _vscp_getFamilyType:
  6945                           	opt stack 26
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;main.c: 1421: return 0;
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;incstack = 0
  6952                           ;incstack = 0
  6953  002FD2  6A08               	clrf	?_vscp_getFamilyType,c
  6954  002FD4  6A09               	clrf	?_vscp_getFamilyType+1,c
  6955  002FD6  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6956  002FD8  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6957                           
  6958                           ; BSR set to: 0
  6959  002FDA  0012               	return	
  6960  002FDC                     __end_of_vscp_getFamilyType:
  6961                           	opt stack 0
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           intcon	equ	0xFF2
  6969                           postinc0	equ	0xFEE
  6970                           wreg	equ	0xFE8
  6971                           indf1	equ	0xFE7
  6972                           fsr1h	equ	0xFE2
  6973                           fsr1l	equ	0xFE1
  6974                           indf2	equ	0xFDF
  6975                           postinc2	equ	0xFDE
  6976                           postdec2	equ	0xFDD
  6977                           plusw2	equ	0xFDB
  6978                           fsr2h	equ	0xFDA
  6979                           fsr2l	equ	0xFD9
  6980                           status	equ	0xFD8
  6981                           
  6982 ;; *************** function _vscp_getFamilyCode *****************
  6983 ;; Defined at:
  6984 ;;		line 1411 in file "../main.c"
  6985 ;; Parameters:    Size  Location     Type
  6986 ;;		None
  6987 ;; Auto vars:     Size  Location     Type
  6988 ;;		None
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  4    7[COMRAM] unsigned long 
  6991 ;; Registers used:
  6992 ;;		None
  6993 ;; Tracked objects:
  6994 ;;		On entry : F/0
  6995 ;;		On exit  : F/0
  6996 ;;		Unchanged: F/0
  6997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7001 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7002 ;;Total ram usage:        4 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    2
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_vscp_readStdReg
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           	psect	text29
  7013  002FDC                     __ptext29:
  7014                           	opt stack 0
  7015  002FDC                     _vscp_getFamilyCode:
  7016                           	opt stack 26
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;main.c: 1412: return 0L;
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;incstack = 0
  7023                           ;incstack = 0
  7024  002FDC  6A08               	clrf	?_vscp_getFamilyCode,c
  7025  002FDE  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7026  002FE0  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7027  002FE2  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7028                           
  7029                           ; BSR set to: 0
  7030  002FE4  0012               	return	
  7031  002FE6                     __end_of_vscp_getFamilyCode:
  7032                           	opt stack 0
  7033                           tblptru	equ	0xFF8
  7034                           tblptrh	equ	0xFF7
  7035                           tblptrl	equ	0xFF6
  7036                           tablat	equ	0xFF5
  7037                           prodh	equ	0xFF4
  7038                           prodl	equ	0xFF3
  7039                           intcon	equ	0xFF2
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           indf1	equ	0xFE7
  7043                           fsr1h	equ	0xFE2
  7044                           fsr1l	equ	0xFE1
  7045                           indf2	equ	0xFDF
  7046                           postinc2	equ	0xFDE
  7047                           postdec2	equ	0xFDD
  7048                           plusw2	equ	0xFDB
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _vscp_getBufferSize *****************
  7054 ;; Defined at:
  7055 ;;		line 1291 in file "../main.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;		None
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;		None
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  1    wreg      unsigned char 
  7062 ;; Registers used:
  7063 ;;		wreg
  7064 ;; Tracked objects:
  7065 ;;		On entry : F/0
  7066 ;;		On exit  : F/0
  7067 ;;		Unchanged: F/0
  7068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7073 ;;Total ram usage:        0 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    2
  7076 ;; This function calls:
  7077 ;;		Nothing
  7078 ;; This function is called by:
  7079 ;;		_vscp_readStdReg
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text30
  7084  003012                     __ptext30:
  7085                           	opt stack 0
  7086  003012                     _vscp_getBufferSize:
  7087                           	opt stack 26
  7088                           
  7089                           ; BSR set to: 0
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;main.c: 1292: return 8;
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;incstack = 0
  7096                           ;incstack = 0
  7097  003012  0C08               	retlw	8
  7098  003014                     __end_of_vscp_getBufferSize:
  7099                           	opt stack 0
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           postinc0	equ	0xFEE
  7108                           wreg	equ	0xFE8
  7109                           indf1	equ	0xFE7
  7110                           fsr1h	equ	0xFE2
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           plusw2	equ	0xFDB
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  7121 ;; Defined at:
  7122 ;;		line 1282 in file "../main.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;		None
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      unsigned char 
  7129 ;; Registers used:
  7130 ;;		wreg
  7131 ;; Tracked objects:
  7132 ;;		On entry : F/0
  7133 ;;		On exit  : F/0
  7134 ;;		Unchanged: F/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7140 ;;Total ram usage:        0 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    2
  7143 ;; This function calls:
  7144 ;;		Nothing
  7145 ;; This function is called by:
  7146 ;;		_vscp_readStdReg
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text31
  7151  003014                     __ptext31:
  7152                           	opt stack 0
  7153  003014                     _vscp_getBootLoaderAlgorithm:
  7154                           	opt stack 26
  7155                           
  7156                           ; BSR set to: 0
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;main.c: 1283: return 0x01;
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;incstack = 0
  7163                           ;incstack = 0
  7164  003014  0C01               	retlw	1
  7165  003016                     __end_of_vscp_getBootLoaderAlgorithm:
  7166                           	opt stack 0
  7167                           tblptru	equ	0xFF8
  7168                           tblptrh	equ	0xFF7
  7169                           tblptrl	equ	0xFF6
  7170                           tablat	equ	0xFF5
  7171                           prodh	equ	0xFF4
  7172                           prodl	equ	0xFF3
  7173                           intcon	equ	0xFF2
  7174                           postinc0	equ	0xFEE
  7175                           wreg	equ	0xFE8
  7176                           indf1	equ	0xFE7
  7177                           fsr1h	equ	0xFE2
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           plusw2	equ	0xFDB
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _vscp_getManufacturerId *****************
  7188 ;; Defined at:
  7189 ;;		line 1273 in file "../main.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  idx             1    wreg     unsigned char 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  idx             1    9[COMRAM] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      unsigned char 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7204 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7206 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7207 ;;Total ram usage:        1 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    3
  7210 ;; This function calls:
  7211 ;;		_Read_b_eep
  7212 ;; This function is called by:
  7213 ;;		_vscp_readStdReg
  7214 ;;		_vscp_writeStdReg
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           	psect	text32
  7219  002F4C                     __ptext32:
  7220                           	opt stack 0
  7221  002F4C                     _vscp_getManufacturerId:
  7222                           	opt stack 25
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;incstack = 0
  7226                           ;incstack = 0
  7227                           ;vscp_getManufacturerId@idx stored from wreg
  7228  002F4C  CFE8 F00A          	movff	wreg,vscp_getManufacturerId@idx
  7229                           
  7230                           ;main.c: 1274: return Read_b_eep(0x09 + idx);
  7231  002F50  0E09               	movlw	9
  7232  002F52  240A               	addwf	vscp_getManufacturerId@idx,w,c
  7233  002F54  6E08               	movwf	?_Read_b_eep,c
  7234  002F56  6A09               	clrf	?_Read_b_eep+1,c
  7235  002F58  0E00               	movlw	0
  7236  002F5A  2209               	addwfc	?_Read_b_eep+1,f,c
  7237  002F5C  EF62  F017         	goto	_Read_b_eep	;wreg free
  7238  002F60                     __end_of_vscp_getManufacturerId:
  7239                           	opt stack 0
  7240                           tblptru	equ	0xFF8
  7241                           tblptrh	equ	0xFF7
  7242                           tblptrl	equ	0xFF6
  7243                           tablat	equ	0xFF5
  7244                           prodh	equ	0xFF4
  7245                           prodl	equ	0xFF3
  7246                           intcon	equ	0xFF2
  7247                           postinc0	equ	0xFEE
  7248                           wreg	equ	0xFE8
  7249                           indf1	equ	0xFE7
  7250                           fsr1h	equ	0xFE2
  7251                           fsr1l	equ	0xFE1
  7252                           indf2	equ	0xFDF
  7253                           postinc2	equ	0xFDE
  7254                           postdec2	equ	0xFDD
  7255                           plusw2	equ	0xFDB
  7256                           fsr2h	equ	0xFDA
  7257                           fsr2l	equ	0xFD9
  7258                           status	equ	0xFD8
  7259                           
  7260 ;; *************** function _vscp_getUserID *****************
  7261 ;; Defined at:
  7262 ;;		line 1253 in file "../main.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  idx             1    wreg     unsigned char 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  idx             1    9[COMRAM] unsigned char 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      unsigned char 
  7269 ;; Registers used:
  7270 ;;		wreg, status,2, status,0, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7279 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7280 ;;Total ram usage:        1 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    3
  7283 ;; This function calls:
  7284 ;;		_Read_b_eep
  7285 ;; This function is called by:
  7286 ;;		_vscp_readStdReg
  7287 ;;		_vscp_writeStdReg
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text33
  7292  002F60                     __ptext33:
  7293                           	opt stack 0
  7294  002F60                     _vscp_getUserID:
  7295                           	opt stack 25
  7296                           
  7297                           ;incstack = 0
  7298                           ;incstack = 0
  7299                           ;vscp_getUserID@idx stored from wreg
  7300  002F60  CFE8 F00A          	movff	wreg,vscp_getUserID@idx
  7301                           
  7302                           ;main.c: 1254: return Read_b_eep(0x04 + idx);
  7303  002F64  0E04               	movlw	4
  7304  002F66  240A               	addwf	vscp_getUserID@idx,w,c
  7305  002F68  6E08               	movwf	?_Read_b_eep,c
  7306  002F6A  6A09               	clrf	?_Read_b_eep+1,c
  7307  002F6C  0E00               	movlw	0
  7308  002F6E  2209               	addwfc	?_Read_b_eep+1,f,c
  7309  002F70  EF62  F017         	goto	_Read_b_eep	;wreg free
  7310  002F74                     __end_of_vscp_getUserID:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           postinc0	equ	0xFEE
  7320                           wreg	equ	0xFE8
  7321                           indf1	equ	0xFE7
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           plusw2	equ	0xFDB
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _vscp_getMDF_URL *****************
  7333 ;; Defined at:
  7334 ;;		line 1244 in file "../main.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  idx             1    wreg     unsigned char 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  idx             1    8[COMRAM] unsigned char 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      unsigned char 
  7341 ;; Registers used:
  7342 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7343 ;; Tracked objects:
  7344 ;;		On entry : F/0
  7345 ;;		On exit  : F/0
  7346 ;;		Unchanged: F/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7350 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7351 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7352 ;;Total ram usage:        2 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    2
  7355 ;; This function calls:
  7356 ;;		Nothing
  7357 ;; This function is called by:
  7358 ;;		_vscp_readStdReg
  7359 ;;		_vscp_handleProtocolEvent
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           	psect	text34
  7364  002EA8                     __ptext34:
  7365                           	opt stack 0
  7366  002EA8                     _vscp_getMDF_URL:
  7367                           	opt stack 26
  7368                           
  7369                           ;incstack = 0
  7370                           ;incstack = 0
  7371                           ;vscp_getMDF_URL@idx stored from wreg
  7372  002EA8  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;main.c: 1245: return vscp_deviceURL[ idx ];
  7376  002EAC  5009               	movf	vscp_getMDF_URL@idx,w,c
  7377  002EAE  0F00               	addlw	low _vscp_deviceURL
  7378  002EB0  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  7379  002EB2  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  7380  002EB6  0E0F               	movlw	high __smallconst
  7381  002EB8  6EF7               	movwf	tblptrh,c
  7382  002EBA  0E00               	movlw	low (__smallconst shr (0+16))
  7383  002EBC  6EF8               	movwf	tblptru,c
  7384  002EBE  0008               	tblrd		*
  7385  002EC0  50F5               	movf	tablat,w,c
  7386                           
  7387                           ; BSR set to: 0
  7388  002EC2  0012               	return	
  7389  002EC4                     __end_of_vscp_getMDF_URL:
  7390                           	opt stack 0
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           intcon	equ	0xFF2
  7398                           postinc0	equ	0xFEE
  7399                           wreg	equ	0xFE8
  7400                           indf1	equ	0xFE7
  7401                           fsr1h	equ	0xFE2
  7402                           fsr1l	equ	0xFE1
  7403                           indf2	equ	0xFDF
  7404                           postinc2	equ	0xFDE
  7405                           postdec2	equ	0xFDD
  7406                           plusw2	equ	0xFDB
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           
  7411 ;; *************** function _vscp_getGUID *****************
  7412 ;; Defined at:
  7413 ;;		line 1232 in file "../main.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;  idx             1    wreg     unsigned char 
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;  idx             1    9[COMRAM] unsigned char 
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      unsigned char 
  7420 ;; Registers used:
  7421 ;;		wreg, status,2, status,0, cstack
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7430 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7431 ;;Total ram usage:        1 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; Hardware stack levels required when called:    3
  7434 ;; This function calls:
  7435 ;;		_Read_b_eep
  7436 ;; This function is called by:
  7437 ;;		_vscp_readStdReg
  7438 ;;		_vscp_writeStdReg
  7439 ;;		_vscp_handleProtocolEvent
  7440 ;; This function uses a non-reentrant model
  7441 ;;
  7442                           
  7443                           	psect	text35
  7444  002F74                     __ptext35:
  7445                           	opt stack 0
  7446  002F74                     _vscp_getGUID:
  7447                           	opt stack 25
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;incstack = 0
  7451                           ;incstack = 0
  7452                           ;vscp_getGUID@idx stored from wreg
  7453  002F74  CFE8 F00A          	movff	wreg,vscp_getGUID@idx
  7454                           
  7455                           ;main.c: 1233: return Read_b_eep(0x11 + idx);
  7456  002F78  0E11               	movlw	17
  7457  002F7A  240A               	addwf	vscp_getGUID@idx,w,c
  7458  002F7C  6E08               	movwf	?_Read_b_eep,c
  7459  002F7E  6A09               	clrf	?_Read_b_eep+1,c
  7460  002F80  0E00               	movlw	0
  7461  002F82  2209               	addwfc	?_Read_b_eep+1,f,c
  7462  002F84  EF62  F017         	goto	_Read_b_eep	;wreg free
  7463  002F88                     __end_of_vscp_getGUID:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           postinc0	equ	0xFEE
  7473                           wreg	equ	0xFE8
  7474                           indf1	equ	0xFE7
  7475                           fsr1h	equ	0xFE2
  7476                           fsr1l	equ	0xFE1
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           plusw2	equ	0xFDB
  7481                           fsr2h	equ	0xFDA
  7482                           fsr2l	equ	0xFD9
  7483                           status	equ	0xFD8
  7484                           
  7485 ;; *************** function _vscp_getSubMinorVersion *****************
  7486 ;; Defined at:
  7487 ;;		line 1221 in file "../main.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;		None
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;		None
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      unsigned char 
  7494 ;; Registers used:
  7495 ;;		wreg
  7496 ;; Tracked objects:
  7497 ;;		On entry : F/0
  7498 ;;		On exit  : F/0
  7499 ;;		Unchanged: F/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7505 ;;Total ram usage:        0 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    2
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_vscp_readStdReg
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text36
  7516  003016                     __ptext36:
  7517                           	opt stack 0
  7518  003016                     _vscp_getSubMinorVersion:
  7519                           	opt stack 26
  7520                           
  7521                           ; BSR set to: 0
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;main.c: 1222: return 0;
  7525                           
  7526                           ;incstack = 0
  7527                           ;incstack = 0
  7528  003016  0C00               	retlw	0
  7529  003018                     __end_of_vscp_getSubMinorVersion:
  7530                           	opt stack 0
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           intcon	equ	0xFF2
  7538                           postinc0	equ	0xFEE
  7539                           wreg	equ	0xFE8
  7540                           indf1	equ	0xFE7
  7541                           fsr1h	equ	0xFE2
  7542                           fsr1l	equ	0xFE1
  7543                           indf2	equ	0xFDF
  7544                           postinc2	equ	0xFDE
  7545                           postdec2	equ	0xFDD
  7546                           plusw2	equ	0xFDB
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551 ;; *************** function _vscp_getMinorVersion *****************
  7552 ;; Defined at:
  7553 ;;		line 1212 in file "../main.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;		None
  7556 ;; Auto vars:     Size  Location     Type
  7557 ;;		None
  7558 ;; Return value:  Size  Location     Type
  7559 ;;                  1    wreg      unsigned char 
  7560 ;; Registers used:
  7561 ;;		wreg
  7562 ;; Tracked objects:
  7563 ;;		On entry : F/0
  7564 ;;		On exit  : F/0
  7565 ;;		Unchanged: F/0
  7566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7571 ;;Total ram usage:        0 bytes
  7572 ;; Hardware stack levels used:    1
  7573 ;; Hardware stack levels required when called:    2
  7574 ;; This function calls:
  7575 ;;		Nothing
  7576 ;; This function is called by:
  7577 ;;		_vscp_readStdReg
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text37
  7582  003018                     __ptext37:
  7583                           	opt stack 0
  7584  003018                     _vscp_getMinorVersion:
  7585                           	opt stack 26
  7586                           
  7587                           ; BSR set to: 0
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;main.c: 1213: return 0;
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;incstack = 0
  7594                           ;incstack = 0
  7595  003018  0C00               	retlw	0
  7596  00301A                     __end_of_vscp_getMinorVersion:
  7597                           	opt stack 0
  7598                           tblptru	equ	0xFF8
  7599                           tblptrh	equ	0xFF7
  7600                           tblptrl	equ	0xFF6
  7601                           tablat	equ	0xFF5
  7602                           prodh	equ	0xFF4
  7603                           prodl	equ	0xFF3
  7604                           intcon	equ	0xFF2
  7605                           postinc0	equ	0xFEE
  7606                           wreg	equ	0xFE8
  7607                           indf1	equ	0xFE7
  7608                           fsr1h	equ	0xFE2
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           plusw2	equ	0xFDB
  7614                           fsr2h	equ	0xFDA
  7615                           fsr2l	equ	0xFD9
  7616                           status	equ	0xFD8
  7617                           
  7618 ;; *************** function _vscp_getMajorVersion *****************
  7619 ;; Defined at:
  7620 ;;		line 1203 in file "../main.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;		None
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;		None
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  1    wreg      unsigned char 
  7627 ;; Registers used:
  7628 ;;		wreg
  7629 ;; Tracked objects:
  7630 ;;		On entry : F/0
  7631 ;;		On exit  : F/0
  7632 ;;		Unchanged: F/0
  7633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7638 ;;Total ram usage:        0 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    2
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_vscp_readStdReg
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text38
  7649  00301A                     __ptext38:
  7650                           	opt stack 0
  7651  00301A                     _vscp_getMajorVersion:
  7652                           	opt stack 26
  7653                           
  7654                           ; BSR set to: 0
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;main.c: 1204: return 1;
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;incstack = 0
  7661                           ;incstack = 0
  7662  00301A  0C01               	retlw	1
  7663  00301C                     __end_of_vscp_getMajorVersion:
  7664                           	opt stack 0
  7665                           tblptru	equ	0xFF8
  7666                           tblptrh	equ	0xFF7
  7667                           tblptrl	equ	0xFF6
  7668                           tablat	equ	0xFF5
  7669                           prodh	equ	0xFF4
  7670                           prodl	equ	0xFF3
  7671                           intcon	equ	0xFF2
  7672                           postinc0	equ	0xFEE
  7673                           wreg	equ	0xFE8
  7674                           indf1	equ	0xFE7
  7675                           fsr1h	equ	0xFE2
  7676                           fsr1l	equ	0xFE1
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           plusw2	equ	0xFDB
  7681                           fsr2h	equ	0xFDA
  7682                           fsr2l	equ	0xFD9
  7683                           status	equ	0xFD8
  7684                           
  7685 ;; *************** function _vscp_newNodeOnline *****************
  7686 ;; Defined at:
  7687 ;;		line 502 in file "../../vscp_firmware/common/vscp_firmware.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;		None               void
  7694 ;; Registers used:
  7695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : F/0
  7698 ;;		On exit  : F/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7705 ;;Total ram usage:        1 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    7
  7708 ;; This function calls:
  7709 ;;		_vscp_sendEvent
  7710 ;; This function is called by:
  7711 ;;		_vscp_handleProtocolEvent
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text39
  7716  002C86                     __ptext39:
  7717                           	opt stack 0
  7718  002C86                     _vscp_newNodeOnline:
  7719                           	opt stack 22
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;vscp_firmware.c: 503: if ( ( 1 == ( vscp_imsg.flags & 0x0f ) ) &&
  7723                           ;vscp_firmware.c: 504: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7724                           
  7725                           ; BSR set to: 0
  7726                           ;incstack = 0
  7727                           ;incstack = 0
  7728  002C86  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7729  002C8A  0E0F               	movlw	15
  7730  002C8C  164C               	andwf	??_vscp_newNodeOnline,f,c
  7731  002C8E  044C               	decf	??_vscp_newNodeOnline,w,c
  7732  002C90  A4D8               	btfss	status,2,c
  7733  002C92  0012               	return	
  7734                           
  7735                           ; BSR set to: 0
  7736  002C94  5170               	movf	_vscp_nickname& (0+255),w,b
  7737  002C96  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7738  002C9A  62DF               	cpfseq	indf2,c
  7739  002C9C  0012               	return	
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;vscp_firmware.c: 510: vscp_omsg.flags = 0x80;
  7743  002C9E  0E80               	movlw	128
  7744  002CA0  6F83               	movwf	_vscp_omsg& (0+255),b
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;vscp_firmware.c: 511: vscp_omsg.priority = 0x00;
  7748  002CA2  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;vscp_firmware.c: 512: vscp_omsg.vscp_class = 0;
  7752  002CA4  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7753  002CA6  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7754                           
  7755                           ;vscp_firmware.c: 513: vscp_omsg.vscp_type = 3;
  7756  002CA8  0E03               	movlw	3
  7757  002CAA  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;vscp_firmware.c: 514: vscp_sendEvent();
  7761  002CAC  EF7F  F016         	goto	_vscp_sendEvent	;wreg free
  7762  002CB0                     __end_of_vscp_newNodeOnline:
  7763                           	opt stack 0
  7764                           tblptru	equ	0xFF8
  7765                           tblptrh	equ	0xFF7
  7766                           tblptrl	equ	0xFF6
  7767                           tablat	equ	0xFF5
  7768                           prodh	equ	0xFF4
  7769                           prodl	equ	0xFF3
  7770                           intcon	equ	0xFF2
  7771                           postinc0	equ	0xFEE
  7772                           wreg	equ	0xFE8
  7773                           indf1	equ	0xFE7
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           plusw2	equ	0xFDB
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _vscp_handleDropNickname *****************
  7785 ;; Defined at:
  7786 ;;		line 438 in file "../../vscp_firmware/common/vscp_firmware.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;		None
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  bytes           1   12[COMRAM] unsigned char 
  7791 ;; Return value:  Size  Location     Type
  7792 ;;		None               void
  7793 ;; Registers used:
  7794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7795 ;; Tracked objects:
  7796 ;;		On entry : F/0
  7797 ;;		On exit  : F/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7804 ;;Total ram usage:        1 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    5
  7807 ;; This function calls:
  7808 ;;		_vscp_init
  7809 ;;		_vscp_writeNicknamePermanent
  7810 ;; This function is called by:
  7811 ;;		_vscp_handleProtocolEvent
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text40
  7816  002C2A                     __ptext40:
  7817                           	opt stack 0
  7818  002C2A                     _vscp_handleDropNickname:
  7819                           	opt stack 24
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;vscp_firmware.c: 439: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;incstack = 0
  7826                           ;incstack = 0
  7827  002C2A  5175               	movf	_vscp_imsg& (0+255),w,b
  7828  002C2C  0B0F               	andlw	15
  7829  002C2E  6E0D               	movwf	vscp_handleDropNickname@bytes,c
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;vscp_firmware.c: 445: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7833  002C30  500D               	movf	vscp_handleDropNickname@bytes,w,c
  7834  002C32  B4D8               	btfsc	status,2,c
  7835  002C34  0012               	return	
  7836                           
  7837                           ; BSR set to: 0
  7838  002C36  5170               	movf	_vscp_nickname& (0+255),w,b
  7839  002C38  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7840  002C3C  62DF               	cpfseq	indf2,c
  7841  002C3E  0012               	return	
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;vscp_firmware.c: 477: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7845  002C40  040D               	decf	vscp_handleDropNickname@bytes,w,c
  7846  002C42  E005               	bz	l893
  7847                           
  7848                           ; BSR set to: 0
  7849  002C44  0E01               	movlw	1
  7850  002C46  640D               	cpfsgt	vscp_handleDropNickname@bytes,c
  7851  002C48  0C01               	retlw	1
  7852                           
  7853                           ; BSR set to: 0
  7854  002C4A  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7855  002C4C  0C01               	retlw	1
  7856  002C4E                     l893:
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;vscp_firmware.c: 479: vscp_nickname = 0xff;
  7860  002C4E  6970               	setf	_vscp_nickname& (0+255),b
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;vscp_firmware.c: 480: vscp_writeNicknamePermanent(0xff);
  7864  002C50  0EFF               	movlw	255
  7865  002C52  EC9B  F017         	call	_vscp_writeNicknamePermanent
  7866                           
  7867                           ;vscp_firmware.c: 481: vscp_init();
  7868  002C56  EF4B  F015         	goto	_vscp_init	;wreg free
  7869  002C5A                     __end_of_vscp_handleDropNickname:
  7870                           	opt stack 0
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodh	equ	0xFF4
  7876                           prodl	equ	0xFF3
  7877                           intcon	equ	0xFF2
  7878                           postinc0	equ	0xFEE
  7879                           wreg	equ	0xFE8
  7880                           indf1	equ	0xFE7
  7881                           fsr1h	equ	0xFE2
  7882                           fsr1l	equ	0xFE1
  7883                           indf2	equ	0xFDF
  7884                           postinc2	equ	0xFDE
  7885                           postdec2	equ	0xFDD
  7886                           plusw2	equ	0xFDB
  7887                           fsr2h	equ	0xFDA
  7888                           fsr2l	equ	0xFD9
  7889                           status	equ	0xFD8
  7890                           
  7891 ;; *************** function _vscp_init *****************
  7892 ;; Defined at:
  7893 ;;		line 119 in file "../../vscp_firmware/common/vscp_firmware.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;		None
  7896 ;; Auto vars:     Size  Location     Type
  7897 ;;		None
  7898 ;; Return value:  Size  Location     Type
  7899 ;;		None               void
  7900 ;; Registers used:
  7901 ;;		wreg, status,2, status,0, cstack
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/E
  7904 ;;		On exit  : F/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7911 ;;Total ram usage:        0 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    4
  7914 ;; This function calls:
  7915 ;;		_vscp_readNicknamePermanent
  7916 ;; This function is called by:
  7917 ;;		_main
  7918 ;;		_vscp_handleDropNickname
  7919 ;;		_vscp_handleProtocolEvent
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text41
  7924  002A96                     __ptext41:
  7925                           	opt stack 0
  7926  002A96                     _vscp_init:
  7927                           	opt stack 24
  7928                           
  7929                           ;vscp_firmware.c: 120: vscp_initledfunc = 0x02;
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;incstack = 0
  7933                           ;incstack = 0
  7934  002A96  0E02               	movlw	2
  7935  002A98  6E56               	movwf	_vscp_initledfunc,c
  7936                           
  7937                           ;vscp_firmware.c: 123: vscp_nickname = vscp_readNicknamePermanent();
  7938  002A9A  ECF3  F017         	call	_vscp_readNicknamePermanent	;wreg free
  7939  002A9E  0100               	movlb	0	; () banked
  7940  002AA0  6F70               	movwf	_vscp_nickname& (0+255),b
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;vscp_firmware.c: 126: if (!vscp_nickname) vscp_nickname = 0xff;
  7944  002AA2  6770               	tstfsz	_vscp_nickname& (0+255),b
  7945  002AA4  D001               	goto	l835
  7946                           
  7947                           ; BSR set to: 0
  7948  002AA6  6970               	setf	_vscp_nickname& (0+255),b
  7949  002AA8                     l835:
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;vscp_firmware.c: 129: vscp_imsg.flags = 0;
  7953  002AA8  6B75               	clrf	_vscp_imsg& (0+255),b
  7954                           
  7955                           ;vscp_firmware.c: 130: vscp_imsg.priority = 0;
  7956  002AAA  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  7957                           
  7958                           ;vscp_firmware.c: 131: vscp_imsg.vscp_class = 0;
  7959  002AAC  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  7960  002AAE  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  7961                           
  7962                           ;vscp_firmware.c: 132: vscp_imsg.vscp_type = 0;
  7963  002AB0  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  7964                           
  7965                           ;vscp_firmware.c: 135: vscp_omsg.flags = 0;
  7966  002AB2  6B83               	clrf	_vscp_omsg& (0+255),b
  7967                           
  7968                           ;vscp_firmware.c: 136: vscp_omsg.priority = 0;
  7969  002AB4  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7970                           
  7971                           ;vscp_firmware.c: 137: vscp_omsg.vscp_class = 0;
  7972  002AB6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7973  002AB8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7974                           
  7975                           ;vscp_firmware.c: 140: vscp_errorcnt = 0;
  7976  002ABA  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  7977                           
  7978                           ;vscp_firmware.c: 141: vscp_alarmstatus = 0;
  7979  002ABC  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  7980                           
  7981                           ;vscp_firmware.c: 143: vscp_probe_address = 0;
  7982  002ABE  6A57               	clrf	_vscp_probe_address,c
  7983                           
  7984                           ;vscp_firmware.c: 146: vscp_node_state = 0x00;
  7985  002AC0  6B71               	clrf	_vscp_node_state& (0+255),b
  7986                           
  7987                           ;vscp_firmware.c: 147: vscp_node_substate = 0x00;
  7988  002AC2  6B72               	clrf	_vscp_node_substate& (0+255),b
  7989                           
  7990                           ;vscp_firmware.c: 149: vscp_probe_cnt = 0;
  7991  002AC4  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7992                           
  7993                           ;vscp_firmware.c: 150: vscp_page_select = 0;
  7994  002AC6  6A52               	clrf	_vscp_page_select,c
  7995  002AC8  6A53               	clrf	_vscp_page_select+1,c
  7996                           
  7997                           ;vscp_firmware.c: 153: vscp_timer = 0;
  7998  002ACA  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7999  002ACC  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8000                           
  8001                           ;vscp_firmware.c: 154: vscp_configtimer = 0;
  8002  002ACE  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  8003  002AD0  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  8004                           
  8005                           ;vscp_firmware.c: 155: vscp_second = 0;
  8006  002AD2  6B74               	clrf	_vscp_second& (0+255),b
  8007                           
  8008                           ;vscp_firmware.c: 156: vscp_minute = 0;
  8009  002AD4  6B6F               	clrf	_vscp_minute& (0+255),b
  8010                           
  8011                           ;vscp_firmware.c: 157: vscp_hour = 0;
  8012  002AD6  6B6D               	clrf	_vscp_hour& (0+255),b
  8013                           
  8014                           ; BSR set to: 0
  8015  002AD8  0012               	return	
  8016  002ADA                     __end_of_vscp_init:
  8017                           	opt stack 0
  8018                           tblptru	equ	0xFF8
  8019                           tblptrh	equ	0xFF7
  8020                           tblptrl	equ	0xFF6
  8021                           tablat	equ	0xFF5
  8022                           prodh	equ	0xFF4
  8023                           prodl	equ	0xFF3
  8024                           intcon	equ	0xFF2
  8025                           postinc0	equ	0xFEE
  8026                           wreg	equ	0xFE8
  8027                           indf1	equ	0xFE7
  8028                           fsr1h	equ	0xFE2
  8029                           fsr1l	equ	0xFE1
  8030                           indf2	equ	0xFDF
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           plusw2	equ	0xFDB
  8034                           fsr2h	equ	0xFDA
  8035                           fsr2l	equ	0xFD9
  8036                           status	equ	0xFD8
  8037                           
  8038 ;; *************** function _vscp_readNicknamePermanent *****************
  8039 ;; Defined at:
  8040 ;;		line 536 in file "../main.c"
  8041 ;; Parameters:    Size  Location     Type
  8042 ;;		None
  8043 ;; Auto vars:     Size  Location     Type
  8044 ;;		None
  8045 ;; Return value:  Size  Location     Type
  8046 ;;                  1    wreg      unsigned char 
  8047 ;; Registers used:
  8048 ;;		wreg, status,2, status,0, cstack
  8049 ;; Tracked objects:
  8050 ;;		On entry : 0/E
  8051 ;;		On exit  : 0/0
  8052 ;;		Unchanged: 0/0
  8053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8058 ;;Total ram usage:        0 bytes
  8059 ;; Hardware stack levels used:    1
  8060 ;; Hardware stack levels required when called:    3
  8061 ;; This function calls:
  8062 ;;		_Read_b_eep
  8063 ;; This function is called by:
  8064 ;;		_vscp_init
  8065 ;; This function uses a non-reentrant model
  8066 ;;
  8067                           
  8068                           	psect	text42
  8069  002FE6                     __ptext42:
  8070                           	opt stack 0
  8071  002FE6                     _vscp_readNicknamePermanent:
  8072                           	opt stack 24
  8073                           
  8074                           ;main.c: 537: return Read_b_eep(0x01);
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;incstack = 0
  8078                           ;incstack = 0
  8079  002FE6  6A09               	clrf	?_Read_b_eep+1,c
  8080  002FE8  0E01               	movlw	1
  8081  002FEA  6E08               	movwf	?_Read_b_eep,c
  8082  002FEC  EF62  F017         	goto	_Read_b_eep	;wreg free
  8083  002FF0                     __end_of_vscp_readNicknamePermanent:
  8084                           	opt stack 0
  8085                           tblptru	equ	0xFF8
  8086                           tblptrh	equ	0xFF7
  8087                           tblptrl	equ	0xFF6
  8088                           tablat	equ	0xFF5
  8089                           prodh	equ	0xFF4
  8090                           prodl	equ	0xFF3
  8091                           intcon	equ	0xFF2
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           indf1	equ	0xFE7
  8095                           fsr1h	equ	0xFE2
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           plusw2	equ	0xFDB
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _vscp_handleSetNickname *****************
  8106 ;; Defined at:
  8107 ;;		line 422 in file "../../vscp_firmware/common/vscp_firmware.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;		None               void
  8114 ;; Registers used:
  8115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8116 ;; Tracked objects:
  8117 ;;		On entry : F/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8125 ;;Total ram usage:        0 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    4
  8128 ;; This function calls:
  8129 ;;		_vscp_writeNicknamePermanent
  8130 ;;		_vscp_setSegmentCRC
  8131 ;; This function is called by:
  8132 ;;		_vscp_handleProtocolEvent
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text43
  8137  002D92                     __ptext43:
  8138                           	opt stack 0
  8139  002D92                     _vscp_handleSetNickname:
  8140                           	opt stack 25
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;vscp_firmware.c: 423: if ( ( 2 == (vscp_imsg.flags & 0x0f ) ) &&
  8144                           ;vscp_firmware.c: 424: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  8145                           
  8146                           ;incstack = 0
  8147                           ;incstack = 0
  8148  002D92  5175               	movf	_vscp_imsg& (0+255),w,b
  8149  002D94  0B0F               	andlw	15
  8150  002D96  0A02               	xorlw	2
  8151  002D98  A4D8               	btfss	status,2,c
  8152  002D9A  0012               	return	
  8153                           
  8154                           ; BSR set to: 0
  8155  002D9C  5170               	movf	_vscp_nickname& (0+255),w,b
  8156  002D9E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  8157  002DA2  62DF               	cpfseq	indf2,c
  8158  002DA4  0012               	return	
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;vscp_firmware.c: 427: vscp_nickname = vscp_imsg.data[ 1 ];
  8162  002DA6  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;vscp_firmware.c: 428: vscp_writeNicknamePermanent(vscp_nickname);
  8166  002DAA  5170               	movf	_vscp_nickname& (0+255),w,b
  8167  002DAC  EC9B  F017         	call	_vscp_writeNicknamePermanent
  8168                           
  8169                           ;vscp_firmware.c: 429: vscp_setSegmentCRC(0x40);
  8170  002DB0  0E40               	movlw	64
  8171  002DB2  EF90  F017         	goto	_vscp_setSegmentCRC
  8172  002DB6                     __end_of_vscp_handleSetNickname:
  8173                           	opt stack 0
  8174                           tblptru	equ	0xFF8
  8175                           tblptrh	equ	0xFF7
  8176                           tblptrl	equ	0xFF6
  8177                           tablat	equ	0xFF5
  8178                           prodh	equ	0xFF4
  8179                           prodl	equ	0xFF3
  8180                           intcon	equ	0xFF2
  8181                           postinc0	equ	0xFEE
  8182                           wreg	equ	0xFE8
  8183                           indf1	equ	0xFE7
  8184                           fsr1h	equ	0xFE2
  8185                           fsr1l	equ	0xFE1
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           plusw2	equ	0xFDB
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _vscp_handleHeartbeat *****************
  8195 ;; Defined at:
  8196 ;;		line 396 in file "../../vscp_firmware/common/vscp_firmware.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;		None               void
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : F/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8214 ;;Total ram usage:        0 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    4
  8217 ;; This function calls:
  8218 ;;		_vscp_writeNicknamePermanent
  8219 ;;		_vscp_getSegmentCRC
  8220 ;;		_vscp_setSegmentCRC
  8221 ;; This function is called by:
  8222 ;;		_vscp_handleProtocolEvent
  8223 ;; This function uses a non-reentrant model
  8224 ;;
  8225                           
  8226                           	psect	text44
  8227  002ADA                     __ptext44:
  8228                           	opt stack 0
  8229  002ADA                     _vscp_handleHeartbeat:
  8230                           	opt stack 25
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;vscp_firmware.c: 397: if ( !vscp_getSegmentCRC() ) {
  8234                           
  8235                           ;incstack = 0
  8236                           ;incstack = 0
  8237  002ADA  ECF8  F017         	call	_vscp_getSegmentCRC	;wreg free
  8238  002ADE  0900               	iorlw	0
  8239  002AE0  E118               	bnz	l6850
  8240                           
  8241                           ;vscp_firmware.c: 398: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  8242                           ;vscp_firmware.c: 399: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  8243  002AE2  0100               	movlb	0	; () banked
  8244  002AE4  5175               	movf	_vscp_imsg& (0+255),w,b
  8245  002AE6  0B0F               	andlw	15
  8246  002AE8  0A05               	xorlw	5
  8247  002AEA  A4D8               	btfss	status,2,c
  8248  002AEC  0012               	return	
  8249                           
  8250                           ; BSR set to: 0
  8251  002AEE  ECF8  F017         	call	_vscp_getSegmentCRC	;wreg free
  8252  002AF2  0100               	movlb	0	; () banked
  8253  002AF4  197B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  8254  002AF6  B4D8               	btfsc	status,2,c
  8255  002AF8  0012               	return	
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;vscp_firmware.c: 403: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  8259  002AFA  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  8260  002AFC  EC90  F017         	call	_vscp_setSegmentCRC
  8261                           
  8262                           ;vscp_firmware.c: 406: vscp_nickname = 0xff;
  8263  002B00  0100               	movlb	0	; () banked
  8264  002B02  6970               	setf	_vscp_nickname& (0+255),b
  8265                           
  8266                           ;vscp_firmware.c: 407: vscp_writeNicknamePermanent(0xff);
  8267  002B04  0EFF               	movlw	255
  8268  002B06  EC9B  F017         	call	_vscp_writeNicknamePermanent
  8269                           
  8270                           ;vscp_firmware.c: 408: vscp_node_state = 0x01;
  8271  002B0A  0E01               	movlw	1
  8272  002B0C  0100               	movlb	0	; () banked
  8273  002B0E  6F71               	movwf	_vscp_node_state& (0+255),b
  8274  002B10  0C01               	retlw	1
  8275  002B12                     l6850:
  8276                           
  8277                           ;vscp_firmware.c: 411: else {
  8278                           ;vscp_firmware.c: 413: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  8279  002B12  0100               	movlb	0	; () banked
  8280  002B14  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  8281  002B16  EF90  F017         	goto	_vscp_setSegmentCRC
  8282  002B1A                     __end_of_vscp_handleHeartbeat:
  8283                           	opt stack 0
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           postinc0	equ	0xFEE
  8292                           wreg	equ	0xFE8
  8293                           indf1	equ	0xFE7
  8294                           fsr1h	equ	0xFE2
  8295                           fsr1l	equ	0xFE1
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           plusw2	equ	0xFDB
  8300                           fsr2h	equ	0xFDA
  8301                           fsr2l	equ	0xFD9
  8302                           status	equ	0xFD8
  8303                           
  8304 ;; *************** function _vscp_getMatrixInfo *****************
  8305 ;; Defined at:
  8306 ;;		line 1394 in file "../main.c"
  8307 ;; Parameters:    Size  Location     Type
  8308 ;;  pData           1    wreg     PTR unsigned char 
  8309 ;;		 -> vscp_omsg(13), 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;  pData           1    0[COMRAM] PTR unsigned char 
  8312 ;;		 -> vscp_omsg(13), 
  8313 ;;  i               1    7[COMRAM] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;		None               void
  8316 ;; Registers used:
  8317 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8318 ;; Tracked objects:
  8319 ;;		On entry : F/0
  8320 ;;		On exit  : F/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8324 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8326 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8327 ;;Total ram usage:        1 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    2
  8330 ;; This function calls:
  8331 ;;		Nothing
  8332 ;; This function is called by:
  8333 ;;		_vscp_handleProtocolEvent
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text45
  8338  002DB6                     __ptext45:
  8339                           	opt stack 0
  8340  002DB6                     _vscp_getMatrixInfo:
  8341                           	opt stack 27
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;main.c: 1395: uint8_t i;
  8345                           ;main.c: 1397: vscp_omsg.data[ 0 ] = 7;
  8346                           
  8347                           ;incstack = 0
  8348                           ;incstack = 0
  8349  002DB6  0E07               	movlw	7
  8350  002DB8  6F88               	movwf	(_vscp_omsg+5)& (0+255),b
  8351                           
  8352                           ;main.c: 1398: vscp_omsg.data[ 1 ] = 72;
  8353  002DBA  0E48               	movlw	72
  8354  002DBC  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  8355                           
  8356                           ;main.c: 1401: for ( i = 2; i < 8; i++ ) {
  8357  002DBE  0E02               	movlw	2
  8358  002DC0  6E08               	movwf	vscp_getMatrixInfo@i,c
  8359  002DC2                     l5062:
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;main.c: 1402: vscp_omsg.data[ i ] = 0;
  8363  002DC2  5008               	movf	vscp_getMatrixInfo@i,w,c
  8364  002DC4  0F88               	addlw	low (_vscp_omsg+5)
  8365  002DC6  6ED9               	movwf	fsr2l,c
  8366  002DC8  6ADA               	clrf	fsr2h,c
  8367  002DCA  6ADF               	clrf	indf2,c
  8368                           
  8369                           ; BSR set to: 0
  8370  002DCC  2A08               	incf	vscp_getMatrixInfo@i,f,c
  8371                           
  8372                           ; BSR set to: 0
  8373  002DCE  0E07               	movlw	7
  8374  002DD0  6408               	cpfsgt	vscp_getMatrixInfo@i,c
  8375  002DD2  D7F7               	goto	l5062
  8376  002DD4  0C07               	retlw	7
  8377  002DD6                     __end_of_vscp_getMatrixInfo:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           postinc0	equ	0xFEE
  8387                           wreg	equ	0xFE8
  8388                           indf1	equ	0xFE7
  8389                           fsr1h	equ	0xFE2
  8390                           fsr1l	equ	0xFE1
  8391                           indf2	equ	0xFDF
  8392                           postinc2	equ	0xFDE
  8393                           postdec2	equ	0xFDD
  8394                           plusw2	equ	0xFDB
  8395                           fsr2h	equ	0xFDA
  8396                           fsr2l	equ	0xFD9
  8397                           status	equ	0xFD8
  8398                           
  8399 ;; *************** function _vscp_goBootloaderMode *****************
  8400 ;; Defined at:
  8401 ;;		line 1378 in file "../main.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;  algorithm       1    wreg     unsigned char 
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;  algorithm       1   11[COMRAM] unsigned char 
  8406 ;; Return value:  Size  Location     Type
  8407 ;;		None               void
  8408 ;; Registers used:
  8409 ;;		wreg, status,2, status,0, cstack
  8410 ;; Tracked objects:
  8411 ;;		On entry : F/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: 0/0
  8414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8419 ;;Total ram usage:        1 bytes
  8420 ;; Hardware stack levels used:    1
  8421 ;; Hardware stack levels required when called:    3
  8422 ;; This function calls:
  8423 ;;		_Busy_eep
  8424 ;;		_Write_b_eep
  8425 ;; This function is called by:
  8426 ;;		_vscp_handleProtocolEvent
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text46
  8431  002E32                     __ptext46:
  8432                           	opt stack 0
  8433  002E32                     _vscp_goBootloaderMode:
  8434                           	opt stack 26
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;incstack = 0
  8438                           ;incstack = 0
  8439                           ;vscp_goBootloaderMode@algorithm stored from wreg
  8440  002E32  CFE8 F00C          	movff	wreg,vscp_goBootloaderMode@algorithm
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 1379: if ( 0x01 != algorithm ) return;
  8444  002E36  040C               	decf	vscp_goBootloaderMode@algorithm,w,c
  8445  002E38  A4D8               	btfss	status,2,c
  8446  002E3A  0012               	return	
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1383: (Busy_eep(), Write_b_eep(0x00,0xff));
  8450  002E3C  EC01  F018         	call	_Busy_eep	;wreg free
  8451  002E40  6A09               	clrf	?_Write_b_eep+1,c
  8452  002E42  6A08               	clrf	?_Write_b_eep,c
  8453  002E44  0EFF               	movlw	255
  8454  002E46  680A               	setf	?_Write_b_eep+2,c
  8455  002E48  ECAD  F015         	call	_Write_b_eep	;wreg free
  8456  002E4C  00FF               	reset		;# 
  8457  002E4E  0012               	return	
  8458  002E50                     __end_of_vscp_goBootloaderMode:
  8459                           	opt stack 0
  8460                           tblptru	equ	0xFF8
  8461                           tblptrh	equ	0xFF7
  8462                           tblptrl	equ	0xFF6
  8463                           tablat	equ	0xFF5
  8464                           prodh	equ	0xFF4
  8465                           prodl	equ	0xFF3
  8466                           intcon	equ	0xFF2
  8467                           postinc0	equ	0xFEE
  8468                           wreg	equ	0xFE8
  8469                           indf1	equ	0xFE7
  8470                           fsr1h	equ	0xFE2
  8471                           fsr1l	equ	0xFE1
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           plusw2	equ	0xFDB
  8476                           fsr2h	equ	0xFDA
  8477                           fsr2l	equ	0xFD9
  8478                           status	equ	0xFD8
  8479                           
  8480 ;; *************** function _vscp_handleProbeState *****************
  8481 ;; Defined at:
  8482 ;;		line 202 in file "../../vscp_firmware/common/vscp_firmware.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;		None
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;		None
  8487 ;; Return value:  Size  Location     Type
  8488 ;;		None               void
  8489 ;; Registers used:
  8490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : F/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8500 ;;Total ram usage:        0 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:    8
  8503 ;; This function calls:
  8504 ;;		_vscp_goActiveState
  8505 ;;		_vscp_writeNicknamePermanent
  8506 ;;		_vscp_sendEvent
  8507 ;;		_vscp_setSegmentCRC
  8508 ;; This function is called by:
  8509 ;;		_main
  8510 ;; This function uses a non-reentrant model
  8511 ;;
  8512                           
  8513                           	psect	text47
  8514  00266A                     __ptext47:
  8515                           	opt stack 0
  8516  00266A                     _vscp_handleProbeState:
  8517                           	opt stack 22
  8518                           
  8519                           ;vscp_firmware.c: 203: switch (vscp_node_substate) {
  8520                           
  8521                           ;incstack = 0
  8522                           ;incstack = 0
  8523  00266A  D053               	goto	l5954
  8524  00266C                     l5884:
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;vscp_firmware.c: 207: if (0xff != vscp_probe_address) {
  8528  00266C  2857               	incf	_vscp_probe_address,w,c
  8529  00266E  E010               	bz	l5900
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;vscp_firmware.c: 209: vscp_omsg.flags = 0x80 + 1;
  8533  002670  0E81               	movlw	129
  8534  002672  6F83               	movwf	_vscp_omsg& (0+255),b
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;vscp_firmware.c: 210: vscp_omsg.priority = 0x00;
  8538  002674  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;vscp_firmware.c: 211: vscp_omsg.vscp_class = 0;
  8542  002676  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8543  002678  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8544                           
  8545                           ;vscp_firmware.c: 212: vscp_omsg.vscp_type = 2;
  8546  00267A  0E02               	movlw	2
  8547  00267C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;vscp_firmware.c: 213: vscp_omsg.data[ 0 ] = vscp_probe_address;
  8551  00267E  C057  F088         	movff	_vscp_probe_address,_vscp_omsg+5
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;vscp_firmware.c: 216: vscp_sendEvent();
  8555  002682  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;vscp_firmware.c: 218: vscp_node_substate = 0x01;
  8559  002686  0E01               	movlw	1
  8560  002688  6F72               	movwf	_vscp_node_substate& (0+255),b
  8561  00268A                     l5898:
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;vscp_firmware.c: 219: vscp_timer = 0;
  8565  00268A  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8566  00268C  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8567                           
  8568                           ;vscp_firmware.c: 221: }
  8569  00268E  D048               	goto	l850
  8570  002690                     l5900:
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;vscp_firmware.c: 222: else {
  8574                           ;vscp_firmware.c: 225: vscp_node_state = 0x04;
  8575  002690  0E04               	movlw	4
  8576  002692  6F71               	movwf	_vscp_node_state& (0+255),b
  8577                           
  8578                           ;vscp_firmware.c: 228: vscp_omsg.flags = 0x80 + 1;
  8579  002694  0E81               	movlw	129
  8580  002696  6F83               	movwf	_vscp_omsg& (0+255),b
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;vscp_firmware.c: 229: vscp_omsg.data[ 0 ] = 0xff;
  8584  002698  6988               	setf	(_vscp_omsg+5)& (0+255),b
  8585                           
  8586                           ;vscp_firmware.c: 230: vscp_omsg.priority = 0x07;
  8587  00269A  0E07               	movlw	7
  8588  00269C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;vscp_firmware.c: 231: vscp_omsg.vscp_class = 0;
  8592  00269E  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8593  0026A0  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8594                           
  8595                           ;vscp_firmware.c: 232: vscp_omsg.vscp_type = 3;
  8596  0026A2  0E03               	movlw	3
  8597  0026A4  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;vscp_firmware.c: 235: vscp_sendEvent();
  8601  0026A6  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  8602  0026AA  D03A               	goto	l850
  8603  0026AC                     l851:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;vscp_firmware.c: 242: if (vscp_imsg.flags & 0x80) {
  8607  0026AC  AF75               	btfss	_vscp_imsg& (0+255),7,b
  8608  0026AE  D00F               	goto	l5924
  8609                           
  8610                           ; BSR set to: 0
  8611                           ;vscp_firmware.c: 245: if ((0 == vscp_imsg.vscp_class) &&
  8612                           ;vscp_firmware.c: 246: (3 == vscp_imsg.vscp_type)) {
  8613  0026B0  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  8614  0026B2  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8615  0026B4  E135               	bnz	l850
  8616                           
  8617                           ; BSR set to: 0
  8618  0026B6  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  8619  0026B8  0A03               	xorlw	3
  8620  0026BA  E132               	bnz	l850
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;vscp_firmware.c: 249: if (0 == vscp_probe_address) {
  8624  0026BC  6657               	tstfsz	_vscp_probe_address,c
  8625  0026BE  D003               	goto	l5918
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;vscp_firmware.c: 253: vscp_node_state = 0x02;
  8629  0026C0  0E02               	movlw	2
  8630  0026C2  6F71               	movwf	_vscp_node_state& (0+255),b
  8631  0026C4  D7E2               	goto	l5898
  8632  0026C6                     l5918:
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;vscp_firmware.c: 257: else {
  8636                           ;vscp_firmware.c: 260: vscp_probe_address++;
  8637  0026C6  2A57               	incf	_vscp_probe_address,f,c
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;vscp_firmware.c: 261: vscp_node_substate = 0x00;
  8641  0026C8  6B72               	clrf	_vscp_node_substate& (0+255),b
  8642  0026CA                     l5922:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;vscp_firmware.c: 262: vscp_probe_cnt = 0;
  8646  0026CA  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8647  0026CC  D029               	goto	l850
  8648  0026CE                     l5924:
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;vscp_firmware.c: 267: else {
  8652                           ;vscp_firmware.c: 269: if (vscp_timer > 1000) {
  8653  0026CE  0EE9               	movlw	233
  8654  0026D0  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8655  0026D2  0E03               	movlw	3
  8656  0026D4  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8657  0026D6  E324               	bnc	l850
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;vscp_firmware.c: 271: vscp_probe_cnt++;
  8661  0026D8  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;vscp_firmware.c: 273: if (vscp_probe_cnt >= 3) {
  8665  0026DA  0E02               	movlw	2
  8666  0026DC  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8667  0026DE  D017               	goto	l858
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;vscp_firmware.c: 276: if (0 == vscp_probe_address) {
  8671  0026E0  6657               	tstfsz	_vscp_probe_address,c
  8672  0026E2  D005               	goto	l859
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;vscp_firmware.c: 279: vscp_probe_address++;
  8676  0026E4  2A57               	incf	_vscp_probe_address,f,c
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;vscp_firmware.c: 280: vscp_node_substate = 0x00;
  8680  0026E6  6B72               	clrf	_vscp_node_substate& (0+255),b
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;vscp_firmware.c: 281: vscp_timer = 0;
  8684  0026E8  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8685  0026EA  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8686  0026EC  D7EE               	goto	l5922
  8687  0026EE                     l859:
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;vscp_firmware.c: 285: else {
  8691                           ;vscp_firmware.c: 288: vscp_nickname = vscp_probe_address;
  8692  0026EE  C057  F070         	movff	_vscp_probe_address,_vscp_nickname
  8693                           
  8694                           ; BSR set to: 0
  8695                           ;vscp_firmware.c: 289: vscp_node_state = 0x03;
  8696  0026F2  0E03               	movlw	3
  8697  0026F4  6F71               	movwf	_vscp_node_state& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;vscp_firmware.c: 290: vscp_node_substate = 0x00;
  8701  0026F6  6B72               	clrf	_vscp_node_substate& (0+255),b
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;vscp_firmware.c: 291: vscp_writeNicknamePermanent(vscp_nickname);
  8705  0026F8  5170               	movf	_vscp_nickname& (0+255),w,b
  8706  0026FA  EC9B  F017         	call	_vscp_writeNicknamePermanent
  8707                           
  8708                           ;vscp_firmware.c: 292: vscp_setSegmentCRC(0x40);
  8709  0026FE  0E40               	movlw	64
  8710  002700  EC90  F017         	call	_vscp_setSegmentCRC
  8711                           
  8712                           ;vscp_firmware.c: 295: vscp_probe_cnt = 0;
  8713  002704  0100               	movlb	0	; () banked
  8714  002706  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;vscp_firmware.c: 296: vscp_goActiveState();
  8718  002708  EC28  F017         	call	_vscp_goActiveState	;wreg free
  8719  00270C  D009               	goto	l850
  8720  00270E                     l858:
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;vscp_firmware.c: 300: else {
  8724                           ;vscp_firmware.c: 301: vscp_node_substate = 0x00;
  8725  00270E  6B72               	clrf	_vscp_node_substate& (0+255),b
  8726  002710  D007               	goto	l850
  8727  002712                     l5954:
  8728  002712  0100               	movlb	0	; () banked
  8729  002714  5172               	movf	_vscp_node_substate& (0+255),w,b
  8730                           
  8731                           ; Switch size 1, requested type "space"
  8732                           ; Number of cases is 3, Range of values is 0 to 2
  8733                           ; switch strategies available:
  8734                           ; Name         Instructions Cycles
  8735                           ; simple_byte           10     6 (average)
  8736                           ;	Chosen strategy is simple_byte
  8737  002716  E0AA               	bz	l5884
  8738  002718  0A01               	xorlw	1	; case 1
  8739  00271A  E0C8               	bz	l851
  8740  00271C  0A03               	xorlw	3	; case 2
  8741  00271E  E1F7               	bnz	l858
  8742  002720                     l850:
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;vscp_firmware.c: 316: vscp_imsg.flags = 0;
  8746  002720  6B75               	clrf	_vscp_imsg& (0+255),b
  8747                           
  8748                           ; BSR set to: 0
  8749  002722  0012               	return	
  8750  002724                     __end_of_vscp_handleProbeState:
  8751                           	opt stack 0
  8752                           tblptru	equ	0xFF8
  8753                           tblptrh	equ	0xFF7
  8754                           tblptrl	equ	0xFF6
  8755                           tablat	equ	0xFF5
  8756                           prodh	equ	0xFF4
  8757                           prodl	equ	0xFF3
  8758                           intcon	equ	0xFF2
  8759                           postinc0	equ	0xFEE
  8760                           wreg	equ	0xFE8
  8761                           indf1	equ	0xFE7
  8762                           fsr1h	equ	0xFE2
  8763                           fsr1l	equ	0xFE1
  8764                           indf2	equ	0xFDF
  8765                           postinc2	equ	0xFDE
  8766                           postdec2	equ	0xFDD
  8767                           plusw2	equ	0xFDB
  8768                           fsr2h	equ	0xFDA
  8769                           fsr2l	equ	0xFD9
  8770                           status	equ	0xFD8
  8771                           
  8772 ;; *************** function _vscp_goActiveState *****************
  8773 ;; Defined at:
  8774 ;;		line 358 in file "../../vscp_firmware/common/vscp_firmware.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;		None
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;		None
  8779 ;; Return value:  Size  Location     Type
  8780 ;;		None               void
  8781 ;; Registers used:
  8782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : F/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8792 ;;Total ram usage:        0 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    7
  8795 ;; This function calls:
  8796 ;;		_vscp_sendEvent
  8797 ;; This function is called by:
  8798 ;;		_main
  8799 ;;		_vscp_handleProbeState
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text48
  8804  002E50                     __ptext48:
  8805                           	opt stack 0
  8806  002E50                     _vscp_goActiveState:
  8807                           	opt stack 22
  8808                           
  8809                           ;vscp_firmware.c: 359: vscp_omsg.flags = 0x80 + 1;
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;incstack = 0
  8813                           ;incstack = 0
  8814  002E50  0E81               	movlw	129
  8815  002E52  0100               	movlb	0	; () banked
  8816  002E54  6F83               	movwf	_vscp_omsg& (0+255),b
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;vscp_firmware.c: 360: vscp_omsg.priority = 0x00;
  8820  002E56  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;vscp_firmware.c: 361: vscp_omsg.vscp_class = 0;
  8824  002E58  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8825  002E5A  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8826                           
  8827                           ;vscp_firmware.c: 362: vscp_omsg.vscp_type = 2;
  8828  002E5C  0E02               	movlw	2
  8829  002E5E  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;vscp_firmware.c: 363: vscp_omsg.data[ 0 ] = vscp_nickname;
  8833  002E60  C070  F088         	movff	_vscp_nickname,_vscp_omsg+5
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;vscp_firmware.c: 366: vscp_sendEvent();
  8837  002E64  EC7F  F016         	call	_vscp_sendEvent	;wreg free
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;vscp_firmware.c: 368: vscp_initledfunc = 0x01;
  8841  002E68  0E01               	movlw	1
  8842  002E6A  6E56               	movwf	_vscp_initledfunc,c
  8843                           
  8844                           ; BSR set to: 0
  8845  002E6C  0C01               	retlw	1
  8846  002E6E                     __end_of_vscp_goActiveState:
  8847                           	opt stack 0
  8848                           tblptru	equ	0xFF8
  8849                           tblptrh	equ	0xFF7
  8850                           tblptrl	equ	0xFF6
  8851                           tablat	equ	0xFF5
  8852                           prodh	equ	0xFF4
  8853                           prodl	equ	0xFF3
  8854                           intcon	equ	0xFF2
  8855                           postinc0	equ	0xFEE
  8856                           wreg	equ	0xFE8
  8857                           indf1	equ	0xFE7
  8858                           fsr1h	equ	0xFE2
  8859                           fsr1l	equ	0xFE1
  8860                           indf2	equ	0xFDF
  8861                           postinc2	equ	0xFDE
  8862                           postdec2	equ	0xFDD
  8863                           plusw2	equ	0xFDB
  8864                           fsr2h	equ	0xFDA
  8865                           fsr2l	equ	0xFD9
  8866                           status	equ	0xFD8
  8867                           
  8868 ;; *************** function _vscp_sendEvent *****************
  8869 ;; Defined at:
  8870 ;;		line 1288 in file "../../vscp_firmware/common/vscp_firmware.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;		None
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  rv              1    0        unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  1    wreg      unsigned char 
  8877 ;; Registers used:
  8878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : F/0
  8881 ;;		On exit  : F/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8885 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8887 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8888 ;;Total ram usage:        1 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    6
  8891 ;; This function calls:
  8892 ;;		_sendVSCPFrame
  8893 ;; This function is called by:
  8894 ;;		_vscp_handleProbeState
  8895 ;;		_vscp_goActiveState
  8896 ;;		_vscp_sendHeartBeat
  8897 ;;		_vscp_newNodeOnline
  8898 ;;		_vscp_handleProtocolEvent
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text49
  8903  002CFE                     __ptext49:
  8904                           	opt stack 0
  8905  002CFE                     _vscp_sendEvent:
  8906                           	opt stack 22
  8907                           
  8908                           ; BSR set to: 0
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;incstack = 0
  8912                           ;incstack = 0
  8913  002CFE  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8914  002D02  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8915  002D06  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8916  002D0A  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8917  002D0E  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8918  002D12  5183               	movf	_vscp_omsg& (0+255),w,b
  8919  002D14  0B0F               	andlw	15
  8920  002D16  6E44               	movwf	?_sendVSCPFrame+5,c
  8921  002D18  0E00               	movlw	high (_vscp_omsg+5)
  8922  002D1A  6E46               	movwf	?_sendVSCPFrame+7,c
  8923  002D1C  0E88               	movlw	low (_vscp_omsg+5)
  8924  002D1E  6E45               	movwf	?_sendVSCPFrame+6,c
  8925  002D20  EF92  F013         	goto	_sendVSCPFrame	;wreg free
  8926  002D24                     __end_of_vscp_sendEvent:
  8927                           	opt stack 0
  8928                           tblptru	equ	0xFF8
  8929                           tblptrh	equ	0xFF7
  8930                           tblptrl	equ	0xFF6
  8931                           tablat	equ	0xFF5
  8932                           prodh	equ	0xFF4
  8933                           prodl	equ	0xFF3
  8934                           intcon	equ	0xFF2
  8935                           postinc0	equ	0xFEE
  8936                           wreg	equ	0xFE8
  8937                           indf1	equ	0xFE7
  8938                           fsr1h	equ	0xFE2
  8939                           fsr1l	equ	0xFE1
  8940                           indf2	equ	0xFDF
  8941                           postinc2	equ	0xFDE
  8942                           postdec2	equ	0xFDD
  8943                           plusw2	equ	0xFDB
  8944                           fsr2h	equ	0xFDA
  8945                           fsr2l	equ	0xFD9
  8946                           status	equ	0xFD8
  8947                           
  8948 ;; *************** function _sendVSCPFrame *****************
  8949 ;; Defined at:
  8950 ;;		line 1453 in file "../main.c"
  8951 ;; Parameters:    Size  Location     Type
  8952 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8953 ;;  vscptype        1   64[COMRAM] unsigned char 
  8954 ;;  nodeid          1   65[COMRAM] unsigned char 
  8955 ;;  priority        1   66[COMRAM] unsigned char 
  8956 ;;  size            1   67[COMRAM] unsigned char 
  8957 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8958 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;  id              4   70[COMRAM] unsigned long 
  8961 ;; Return value:  Size  Location     Type
  8962 ;;                  1    wreg      unsigned char 
  8963 ;; Registers used:
  8964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8965 ;; Tracked objects:
  8966 ;;		On entry : F/0
  8967 ;;		On exit  : F/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8970 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8971 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8972 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8973 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8974 ;;Total ram usage:       32 bytes
  8975 ;; Hardware stack levels used:    1
  8976 ;; Hardware stack levels required when called:    5
  8977 ;; This function calls:
  8978 ;;		_sendCANFrame
  8979 ;; This function is called by:
  8980 ;;		_SendInformationEvent
  8981 ;;		_vscp_sendEvent
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           	psect	text50
  8986  002724                     __ptext50:
  8987                           	opt stack 0
  8988  002724                     _sendVSCPFrame:
  8989                           	opt stack 22
  8990                           
  8991                           ; BSR set to: 0
  8992                           ;main.c: 1454: uint32_t id = ( (uint32_t)priority << 26 ) |
  8993                           ;main.c: 1455: ( (uint32_t)vscpclass << 16 ) |
  8994                           ;main.c: 1456: ( (uint32_t)vscptype << 8 ) |
  8995                           ;main.c: 1457: nodeid;
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;incstack = 0
  8999                           ;incstack = 0
  9000  002724  C041  F090         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  9001  002728  6B91               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  9002  00272A  6B92               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  9003  00272C  6B93               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  9004  00272E  C092  F093         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  9005  002732  C091  F092         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  9006  002736  C090  F091         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  9007  00273A  6B90               	clrf	??_sendVSCPFrame& (0+255),b
  9008  00273C  503F               	movf	sendVSCPFrame@vscpclass,w,c
  9009  00273E  6F94               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  9010  002740  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  9011  002742  6F95               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  9012  002744  6B96               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  9013  002746  6B97               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  9014  002748  C095  F097         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  9015  00274C  C094  F096         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  9016  002750  6B95               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  9017  002752  6B94               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  9018  002754  C043  F098         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  9019  002758  6B99               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  9020  00275A  6B9A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  9021  00275C  6B9B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  9022  00275E  0E1A               	movlw	26
  9023  002760                     u6795:
  9024  002760  90D8               	bcf	status,0,c
  9025  002762  3798               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  9026  002764  3799               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  9027  002766  379A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  9028  002768  379B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  9029  00276A  2EE8               	decfsz	wreg,f,c
  9030  00276C  D7F9               	goto	u6795
  9031  00276E  5194               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  9032  002770  1198               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  9033  002772  6F9C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  9034  002774  5195               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  9035  002776  1199               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  9036  002778  6F9D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  9037  00277A  5196               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  9038  00277C  119A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  9039  00277E  6F9E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  9040  002780  5197               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  9041  002782  119B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  9042  002784  6F9F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  9043  002786  5190               	movf	??_sendVSCPFrame& (0+255),w,b
  9044  002788  119C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  9045  00278A  6FA0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  9046  00278C  5191               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  9047  00278E  119D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  9048  002790  6FA1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  9049  002792  5192               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  9050  002794  119E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  9051  002796  6FA2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  9052  002798  5193               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  9053  00279A  119F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  9054  00279C  6FA3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  9055  00279E  5042               	movf	sendVSCPFrame@nodeid,w,c
  9056  0027A0  11A0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  9057  0027A2  6E47               	movwf	sendVSCPFrame@id,c
  9058  0027A4  51A1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  9059  0027A6  6E48               	movwf	sendVSCPFrame@id+1,c
  9060  0027A8  51A2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  9061  0027AA  6E49               	movwf	sendVSCPFrame@id+2,c
  9062  0027AC  51A3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  9063  0027AE  6E4A               	movwf	sendVSCPFrame@id+3,c
  9064                           
  9065                           ; BSR set to: 0
  9066                           ;main.c: 1459: if ( !sendCANFrame( id, size, pData ) ) {
  9067  0027B0  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  9068  0027B4  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  9069  0027B8  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  9070  0027BC  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  9071  0027C0  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  9072  0027C4  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  9073  0027C8  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  9074  0027CC  EC8D  F015         	call	_sendCANFrame	;wreg free
  9075  0027D0  0900               	iorlw	0
  9076  0027D2  E101               	bnz	l6624
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;main.c: 1460: return 0;
  9080  0027D4  0C00               	retlw	0
  9081  0027D6                     l6624:
  9082                           
  9083                           ; BSR set to: 0
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;main.c: 1461: }
  9087                           ;main.c: 1463: return 1;
  9088  0027D6  0C01               	retlw	1
  9089  0027D8                     __end_of_sendVSCPFrame:
  9090                           	opt stack 0
  9091                           tblptru	equ	0xFF8
  9092                           tblptrh	equ	0xFF7
  9093                           tblptrl	equ	0xFF6
  9094                           tablat	equ	0xFF5
  9095                           prodh	equ	0xFF4
  9096                           prodl	equ	0xFF3
  9097                           intcon	equ	0xFF2
  9098                           postinc0	equ	0xFEE
  9099                           wreg	equ	0xFE8
  9100                           indf1	equ	0xFE7
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           plusw2	equ	0xFDB
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _sendCANFrame *****************
  9112 ;; Defined at:
  9113 ;;		line 1498 in file "../main.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;  id              4   54[COMRAM] unsigned long 
  9116 ;;  dlc             1   58[COMRAM] unsigned char 
  9117 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  9118 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;  rv              1   61[COMRAM] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      unsigned char 
  9123 ;; Registers used:
  9124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : F/0
  9127 ;;		On exit  : F/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9130 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9131 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9133 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9134 ;;Total ram usage:        8 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    4
  9137 ;; This function calls:
  9138 ;;		_ECANSendMessage
  9139 ;; This function is called by:
  9140 ;;		_sendVSCPFrame
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text51
  9145  002B1A                     __ptext51:
  9146                           	opt stack 0
  9147  002B1A                     _sendCANFrame:
  9148                           	opt stack 22
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;main.c: 1499: uint8_t rv = 0;
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;incstack = 0
  9155                           ;incstack = 0
  9156  002B1A  6A3E               	clrf	sendCANFrame@rv,c
  9157                           
  9158                           ;main.c: 1500: sendTimer = 0;
  9159  002B1C  6A55               	clrf	_sendTimer,c
  9160                           
  9161                           ;main.c: 1502: while ( sendTimer < 1 ) {
  9162  002B1E  D017               	goto	l6722
  9163  002B20                     l6718:
  9164                           
  9165                           ;main.c: 1503: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  9166  002B20  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  9167  002B24  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  9168  002B28  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  9169  002B2C  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  9170  002B30  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  9171  002B34  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  9172  002B38  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  9173  002B3C  0E20               	movlw	32
  9174  002B3E  6E19               	movwf	?_ECANSendMessage+7,c
  9175  002B40  EC23  F00E         	call	_ECANSendMessage	;wreg free
  9176  002B44  0900               	iorlw	0
  9177  002B46  E003               	bz	l6722
  9178                           
  9179                           ;main.c: 1504: rv = 1;
  9180  002B48  0E01               	movlw	1
  9181  002B4A  6E3E               	movwf	sendCANFrame@rv,c
  9182                           
  9183                           ;main.c: 1505: break;
  9184  002B4C  D002               	goto	l456
  9185  002B4E                     l6722:
  9186  002B4E  5055               	movf	_sendTimer,w,c
  9187  002B50  E0E7               	bz	l6718
  9188  002B52                     l456:
  9189                           
  9190                           ;main.c: 1506: }
  9191                           ;main.c: 1507: }
  9192                           ;main.c: 1509: vscp_omsg.flags = 0;
  9193  002B52  0100               	movlb	0	; () banked
  9194  002B54  6B83               	clrf	_vscp_omsg& (0+255),b
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;main.c: 1511: return rv;
  9198  002B56  503E               	movf	sendCANFrame@rv,w,c
  9199                           
  9200                           ; BSR set to: 0
  9201  002B58  0012               	return	
  9202  002B5A                     __end_of_sendCANFrame:
  9203                           	opt stack 0
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           postinc0	equ	0xFEE
  9212                           wreg	equ	0xFE8
  9213                           indf1	equ	0xFE7
  9214                           fsr1h	equ	0xFE2
  9215                           fsr1l	equ	0xFE1
  9216                           indf2	equ	0xFDF
  9217                           postinc2	equ	0xFDE
  9218                           postdec2	equ	0xFDD
  9219                           plusw2	equ	0xFDB
  9220                           fsr2h	equ	0xFDA
  9221                           fsr2l	equ	0xFD9
  9222                           status	equ	0xFD8
  9223                           
  9224 ;; *************** function _ECANSendMessage *****************
  9225 ;; Defined at:
  9226 ;;		line 617 in file "../ECAN.c"
  9227 ;; Parameters:    Size  Location     Type
  9228 ;;  id              4   17[COMRAM] unsigned long 
  9229 ;;  data            2   21[COMRAM] PTR unsigned char 
  9230 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  9231 ;;  dataLen         1   23[COMRAM] unsigned char 
  9232 ;;  msgFlags        1   24[COMRAM] enum E18958
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  9235 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9236 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9237 ;;		 -> B0CON(1), 
  9238 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  9239 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9240 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9241 ;;		 -> B0CON(1), 
  9242 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  9243 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9244 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9245 ;;		 -> B0CON(1), 
  9246 ;;  i               1   51[COMRAM] unsigned char 
  9247 ;;  temp            1   50[COMRAM] unsigned char 
  9248 ;;  tempBSEL0       1   47[COMRAM] struct .
  9249 ;;  j               1   46[COMRAM] unsigned char 
  9250 ;;  buffers         1   45[COMRAM] unsigned char 
  9251 ;;  mode            1   44[COMRAM] unsigned char 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      enum E18242
  9254 ;; Registers used:
  9255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9261 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9262 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9264 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9265 ;;Total ram usage:       37 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    3
  9268 ;; This function calls:
  9269 ;;		__CANIDToRegs
  9270 ;; This function is called by:
  9271 ;;		_sendCANFrame
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           	psect	text52
  9276  001C46                     __ptext52:
  9277                           	opt stack 0
  9278  001C46                     _ECANSendMessage:
  9279                           	opt stack 22
  9280                           
  9281                           ;ECAN.c: 619: BYTE mode;
  9282                           ;ECAN.c: 620: BYTE buffers;
  9283                           ;ECAN.c: 628: BYTE i,j;
  9284                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  9285                           ;ECAN.c: 630: BYTE* pb[9];
  9286                           ;ECAN.c: 631: BYTE temp;
  9287                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  9288                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;incstack = 0
  9292                           ;incstack = 0
  9293  001C46  0E0F               	movlw	15	;volatile
  9294  001C48  6E1C               	movwf	ECANSendMessage@pb+1,c
  9295  001C4A  0E20               	movlw	32	;volatile
  9296  001C4C  6E1B               	movwf	ECANSendMessage@pb,c
  9297                           
  9298                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  9299  001C4E  0E0F               	movlw	15	;volatile
  9300  001C50  6E1E               	movwf	ECANSendMessage@pb+3,c
  9301  001C52  0E10               	movlw	16	;volatile
  9302  001C54  6E1D               	movwf	ECANSendMessage@pb+2,c
  9303                           
  9304                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  9305  001C56  0E0F               	movlw	15	;volatile
  9306  001C58  6E20               	movwf	ECANSendMessage@pb+5,c
  9307  001C5A  6A1F               	clrf	ECANSendMessage@pb+4,c
  9308                           
  9309                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  9310  001C5C  010E               	movlb	14	; () banked
  9311  001C5E  0E0E               	movlw	14	;volatile
  9312  001C60  6E22               	movwf	ECANSendMessage@pb+7,c
  9313  001C62  0E80               	movlw	128	;volatile
  9314  001C64  6E21               	movwf	ECANSendMessage@pb+6,c
  9315                           
  9316                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  9317  001C66  0E0E               	movlw	14	;volatile
  9318  001C68  6E24               	movwf	ECANSendMessage@pb+9,c
  9319  001C6A  0E90               	movlw	144	;volatile
  9320  001C6C  6E23               	movwf	ECANSendMessage@pb+8,c
  9321                           
  9322                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  9323  001C6E  0E0E               	movlw	14	;volatile
  9324  001C70  6E26               	movwf	ECANSendMessage@pb+11,c
  9325  001C72  0EA0               	movlw	160	;volatile
  9326  001C74  6E25               	movwf	ECANSendMessage@pb+10,c
  9327                           
  9328                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  9329  001C76  0E0E               	movlw	14	;volatile
  9330  001C78  6E28               	movwf	ECANSendMessage@pb+13,c
  9331  001C7A  0EB0               	movlw	176	;volatile
  9332  001C7C  6E27               	movwf	ECANSendMessage@pb+12,c
  9333                           
  9334                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  9335  001C7E  0E0E               	movlw	14	;volatile
  9336  001C80  6E2A               	movwf	ECANSendMessage@pb+15,c
  9337  001C82  0EC0               	movlw	192	;volatile
  9338  001C84  6E29               	movwf	ECANSendMessage@pb+14,c
  9339                           
  9340                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  9341  001C86  0E0E               	movlw	14	;volatile
  9342  001C88  6E2C               	movwf	ECANSendMessage@pb+17,c
  9343  001C8A  0ED0               	movlw	208	;volatile
  9344  001C8C  6E2B               	movwf	ECANSendMessage@pb+16,c
  9345                           
  9346                           ; BSR set to: 14
  9347                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  9348  001C8E  5072               	movf	3954,w,c	;volatile
  9349  001C90  0BC0               	andlw	192
  9350  001C92  6E2D               	movwf	ECANSendMessage@mode,c
  9351                           
  9352                           ; BSR set to: 14
  9353                           ;ECAN.c: 660: if ( mode == 0x00 )
  9354  001C94  662D               	tstfsz	ECANSendMessage@mode,c
  9355  001C96  D002               	goto	l6736
  9356                           
  9357                           ; BSR set to: 14
  9358                           ;ECAN.c: 661: buffers = 2;
  9359  001C98  0E02               	movlw	2
  9360  001C9A  D001               	goto	L27
  9361  001C9C                     l6736:
  9362                           
  9363                           ; BSR set to: 14
  9364                           ;ECAN.c: 662: else
  9365                           ;ECAN.c: 663: buffers = 8;
  9366  001C9C  0E08               	movlw	8
  9367  001C9E                     L27:
  9368  001C9E  6E2E               	movwf	ECANSendMessage@buffers,c
  9369                           
  9370                           ; BSR set to: 14
  9371                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  9372  001CA0  90D8               	bcf	status,0,c
  9373  001CA2  317D               	rrcf	125,w,b	;volatile
  9374  001CA4  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  9375                           
  9376                           ; BSR set to: 14
  9377                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  9378  001CA6  6A34               	clrf	ECANSendMessage@i,c
  9379  001CA8  D07C               	goto	l6796
  9380  001CAA                     l6742:
  9381                           
  9382                           ;ECAN.c: 688: {
  9383                           ;ECAN.c: 693: ptr = pb[i];
  9384  001CAA  5034               	movf	ECANSendMessage@i,w,c
  9385  001CAC  0D02               	mullw	2
  9386  001CAE  50F3               	movf	prodl,w,c
  9387  001CB0  0F1B               	addlw	low ECANSendMessage@pb
  9388  001CB2  6ED9               	movwf	fsr2l,c
  9389  001CB4  6ADA               	clrf	fsr2h,c
  9390  001CB6  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  9391  001CBA  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  9392                           
  9393                           ;ECAN.c: 694: tempPtr = ptr;
  9394  001CBE  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  9395  001CC2  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  9396                           
  9397                           ;ECAN.c: 702: if ( i > 2 )
  9398  001CC6  0E02               	movlw	2
  9399  001CC8  6434               	cpfsgt	ECANSendMessage@i,c
  9400  001CCA  D004               	goto	l6754
  9401                           
  9402                           ;ECAN.c: 703: {
  9403                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  9404  001CCC  90D8               	bcf	status,0,c
  9405  001CCE  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  9406                           
  9407                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  9408  001CD0  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  9409  001CD2  D066               	goto	l6794
  9410  001CD4                     l6754:
  9411                           
  9412                           ;ECAN.c: 714: }
  9413                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  9414  001CD4  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9415  001CD8  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9416  001CDC  50DF               	movf	indf2,w,c
  9417  001CDE  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9418  001CE0  B61A               	btfsc	??_ECANSendMessage,3,c
  9419  001CE2  D05E               	goto	l6794
  9420                           
  9421                           ;ECAN.c: 721: {
  9422                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  9423  001CE4  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9424  001CE8  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9425  001CEC  0EFC               	movlw	252
  9426  001CEE  16DF               	andwf	indf2,f,c
  9427                           
  9428                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  9429  001CF0  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  9430  001CF4  0E03               	movlw	3
  9431  001CF6  161A               	andwf	??_ECANSendMessage,f,c
  9432  001CF8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9433  001CFC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9434  001D00  501A               	movf	??_ECANSendMessage,w,c
  9435  001D02  12DF               	iorwf	indf2,f,c
  9436                           
  9437                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  9438  001D04  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  9439  001D06  D004               	goto	l648
  9440                           
  9441                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  9442  001D08  5018               	movf	ECANSendMessage@dataLen,w,c
  9443  001D0A  0940               	iorlw	64
  9444  001D0C  6E33               	movwf	ECANSendMessage@temp,c
  9445  001D0E  D002               	goto	l6764
  9446  001D10                     l648:
  9447                           
  9448                           ;ECAN.c: 729: else
  9449                           ;ECAN.c: 730: temp = dataLen;
  9450  001D10  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  9451  001D14                     l6764:
  9452                           
  9453                           ;ECAN.c: 732: *(ptr+5) = temp;
  9454  001D14  EE20 F005          	lfsr	2,5
  9455  001D18  5035               	movf	ECANSendMessage@ptr,w,c
  9456  001D1A  26D9               	addwf	fsr2l,f,c
  9457  001D1C  5036               	movf	ECANSendMessage@ptr+1,w,c
  9458  001D1E  22DA               	addwfc	fsr2h,f,c
  9459  001D20  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  9460                           
  9461                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  9462  001D24  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  9463  001D26  D003               	goto	l650
  9464                           
  9465                           ;ECAN.c: 736: temp = 1;
  9466  001D28  0E01               	movlw	1
  9467  001D2A  6E33               	movwf	ECANSendMessage@temp,c
  9468  001D2C  D001               	goto	l6770
  9469  001D2E                     l650:
  9470                           
  9471                           ;ECAN.c: 738: else
  9472                           ;ECAN.c: 739: temp = 0;
  9473  001D2E  6A33               	clrf	ECANSendMessage@temp,c
  9474  001D30                     l6770:
  9475                           
  9476                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  9477  001D30  2835               	incf	ECANSendMessage@ptr,w,c
  9478  001D32  6E08               	movwf	?__CANIDToRegs,c
  9479  001D34  0E00               	movlw	0
  9480  001D36  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  9481  001D38  6E09               	movwf	?__CANIDToRegs+1,c
  9482  001D3A  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  9483  001D3E  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  9484  001D42  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  9485  001D46  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  9486  001D4A  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  9487  001D4E  EC87  F010         	call	__CANIDToRegs	;wreg free
  9488                           
  9489                           ;ECAN.c: 745: ptr += 6;
  9490  001D52  0E06               	movlw	6
  9491  001D54  2635               	addwf	ECANSendMessage@ptr,f,c
  9492  001D56  0E00               	movlw	0
  9493  001D58  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  9494                           
  9495                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  9496  001D5A  6A2F               	clrf	ECANSendMessage@j,c
  9497  001D5C  D00F               	goto	l6784
  9498  001D5E                     l6776:
  9499                           
  9500                           ;ECAN.c: 748: *ptr++ = *data++;
  9501  001D5E  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  9502  001D62  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  9503  001D66  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  9504  001D6A  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  9505  001D6E  CFDF FFE7          	movff	indf2,indf1
  9506  001D72  4A16               	infsnz	ECANSendMessage@data,f,c
  9507  001D74  2A17               	incf	ECANSendMessage@data+1,f,c
  9508  001D76  4A35               	infsnz	ECANSendMessage@ptr,f,c
  9509  001D78  2A36               	incf	ECANSendMessage@ptr+1,f,c
  9510  001D7A  2A2F               	incf	ECANSendMessage@j,f,c
  9511  001D7C                     l6784:
  9512  001D7C  5018               	movf	ECANSendMessage@dataLen,w,c
  9513  001D7E  5C2F               	subwf	ECANSendMessage@j,w,c
  9514  001D80  E3EE               	bnc	l6776
  9515                           
  9516                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  9517  001D82  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9518  001D86  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9519  001D8A  50DF               	movf	indf2,w,c
  9520  001D8C  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9521  001D8E  B41A               	btfsc	??_ECANSendMessage,2,c
  9522  001D90  0C01               	retlw	1
  9523                           
  9524                           ;ECAN.c: 753: *tempPtr |= 0x08;
  9525  001D92  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9526  001D96  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9527  001D9A  0E00               	movlw	0
  9528  001D9C  86DB               	bsf	plusw2,3,c
  9529                           
  9530                           ;ECAN.c: 755: return TRUE;
  9531  001D9E  0C01               	retlw	1
  9532  001DA0                     l6794:
  9533  001DA0  2A34               	incf	ECANSendMessage@i,f,c
  9534  001DA2                     l6796:
  9535  001DA2  502E               	movf	ECANSendMessage@buffers,w,c
  9536  001DA4  5C34               	subwf	ECANSendMessage@i,w,c
  9537  001DA6  E381               	bnc	l6742
  9538                           
  9539                           ;ECAN.c: 756: }
  9540                           ;ECAN.c: 757: }
  9541                           ;ECAN.c: 760: return FALSE;
  9542  001DA8  0C00               	retlw	0
  9543  001DAA                     __end_of_ECANSendMessage:
  9544                           	opt stack 0
  9545                           tblptru	equ	0xFF8
  9546                           tblptrh	equ	0xFF7
  9547                           tblptrl	equ	0xFF6
  9548                           tablat	equ	0xFF5
  9549                           prodh	equ	0xFF4
  9550                           prodl	equ	0xFF3
  9551                           intcon	equ	0xFF2
  9552                           postinc0	equ	0xFEE
  9553                           wreg	equ	0xFE8
  9554                           indf1	equ	0xFE7
  9555                           fsr1h	equ	0xFE2
  9556                           fsr1l	equ	0xFE1
  9557                           indf2	equ	0xFDF
  9558                           postinc2	equ	0xFDE
  9559                           postdec2	equ	0xFDD
  9560                           plusw2	equ	0xFDB
  9561                           fsr2h	equ	0xFDA
  9562                           fsr2l	equ	0xFD9
  9563                           status	equ	0xFD8
  9564                           
  9565 ;; *************** function __CANIDToRegs *****************
  9566 ;; Defined at:
  9567 ;;		line 1099 in file "../ECAN.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9570 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9571 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9572 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  9573 ;;  val             4    9[COMRAM] unsigned long 
  9574 ;;  type            1   13[COMRAM] unsigned char 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  9577 ;;		 -> _CANIDToRegs@val(4), 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;		None               void
  9580 ;; Registers used:
  9581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : 0/E
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9587 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9588 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9589 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9590 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9591 ;;Total ram usage:       10 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    2
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_ECANSendMessage
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text53
  9602  00210E                     __ptext53:
  9603                           	opt stack 0
  9604  00210E                     __CANIDToRegs:
  9605                           	opt stack 22
  9606                           
  9607                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9608                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9609                           
  9610                           ;incstack = 0
  9611                           ;incstack = 0
  9612  00210E  0E0A               	movlw	low __CANIDToRegs@val
  9613  002110  6E11               	movwf	__CANIDToRegs@Value,c
  9614                           
  9615                           ;ECAN.c: 1104: if ( type == 0 )
  9616  002112  660E               	tstfsz	__CANIDToRegs@type,c
  9617  002114  D022               	goto	l6812
  9618                           
  9619                           ;ECAN.c: 1105: {
  9620                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9621  002116  5011               	movf	__CANIDToRegs@Value,w,c
  9622  002118  6ED9               	movwf	fsr2l,c
  9623  00211A  6ADA               	clrf	fsr2h,c
  9624  00211C  50DF               	movf	indf2,w,c
  9625  00211E  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9626  002120  90D8               	bcf	status,0,c
  9627  002122  320F               	rrcf	??__CANIDToRegs,f,c
  9628  002124  90D8               	bcf	status,0,c
  9629  002126  320F               	rrcf	??__CANIDToRegs,f,c
  9630  002128  90D8               	bcf	status,0,c
  9631  00212A  300F               	rrcf	??__CANIDToRegs,w,c
  9632                           
  9633                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9634  00212C  D862               	call	PL14	;call to abstracted procedure
  9635  00212E  2AD9               	incf	fsr2l,f,c
  9636  002130  6ADA               	clrf	fsr2h,c
  9637  002132  D872               	call	PL36	;call to abstracted procedure
  9638  002134                     u7035:
  9639  002134  90D8               	bcf	status,0,c
  9640  002136  360F               	rlcf	??__CANIDToRegs,f,c
  9641  002138  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9642  00213A  D7FC               	goto	u7035
  9643  00213C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9644                           
  9645                           ;ECAN.c: 1109: ptr++;
  9646                           
  9647                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9648  002140  D846               	call	PL4	;call to abstracted procedure
  9649  002142  D86A               	call	PL36	;call to abstracted procedure
  9650  002144                     u7045:
  9651  002144  90D8               	bcf	status,0,c
  9652  002146  360F               	rlcf	??__CANIDToRegs,f,c
  9653  002148  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9654  00214A  D7FC               	goto	u7045
  9655  00214C  500F               	movf	??__CANIDToRegs,w,c
  9656  00214E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9657  002152  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9658  002156  6EDF               	movwf	indf2,c
  9659                           
  9660                           ;ECAN.c: 1111: }
  9661  002158  0012               	return	
  9662  00215A                     l6812:
  9663                           
  9664                           ;ECAN.c: 1112: else
  9665                           ;ECAN.c: 1113: {
  9666                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9667  00215A  5011               	movf	__CANIDToRegs@Value,w,c
  9668  00215C  D842               	call	PL10	;call to abstracted procedure
  9669  00215E  0E05               	movlw	5
  9670  002160  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9671  002162                     u7055:
  9672  002162  90D8               	bcf	status,0,c
  9673  002164  320F               	rrcf	??__CANIDToRegs,f,c
  9674  002166  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9675  002168  D7FC               	goto	u7055
  9676  00216A  500F               	movf	??__CANIDToRegs,w,c
  9677                           
  9678                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9679  00216C  D842               	call	PL14	;call to abstracted procedure
  9680  00216E  0E03               	movlw	3
  9681  002170  D849               	call	PL22	;call to abstracted procedure
  9682  002172  360F               	rlcf	??__CANIDToRegs,f,c
  9683  002174  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9684                           
  9685                           ;ECAN.c: 1117: ptr++;
  9686                           
  9687                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9688  002178  D82A               	call	PL4	;call to abstracted procedure
  9689  00217A  0E02               	movlw	2
  9690  00217C  D843               	call	PL22	;call to abstracted procedure
  9691  00217E  340F               	rlcf	??__CANIDToRegs,w,c
  9692  002180  0BE0               	andlw	224
  9693  002182  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9694  002186  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9695  00218A  6EDF               	movwf	indf2,c
  9696                           
  9697                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9698  00218C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9699  002190  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9700  002194  0E00               	movlw	0
  9701  002196  86DB               	bsf	plusw2,3,c
  9702                           
  9703                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9704  002198  5011               	movf	__CANIDToRegs@Value,w,c
  9705  00219A  D823               	call	PL10	;call to abstracted procedure
  9706  00219C  0E03               	movlw	3
  9707  00219E  160F               	andwf	??__CANIDToRegs,f,c
  9708  0021A0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9709                           
  9710                           ;ECAN.c: 1122: ptr++;
  9711                           
  9712                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9713  0021A4  D814               	call	PL4	;call to abstracted procedure
  9714  0021A6  2AD9               	incf	fsr2l,f,c
  9715  0021A8  6ADA               	clrf	fsr2h,c
  9716  0021AA  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9717  0021AE  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9718  0021B2  CFDF FFE7          	movff	indf2,indf1
  9719                           
  9720                           ;ECAN.c: 1124: ptr++;
  9721  0021B6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9722  0021B8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9723                           
  9724                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9725  0021BA  5011               	movf	__CANIDToRegs@Value,w,c
  9726  0021BC  6ED9               	movwf	fsr2l,c
  9727  0021BE  6ADA               	clrf	fsr2h,c
  9728  0021C0  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9729  0021C4  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9730  0021C8  CFDF FFE7          	movff	indf2,indf1
  9731  0021CC  0012               	return	
  9732  0021CE                     __end_of__CANIDToRegs:
  9733                           	opt stack 0
  9734  0021CE                     PL4:
  9735                           	opt stack 22
  9736  0021CE  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9737  0021D2  500F               	movf	??__CANIDToRegs,w,c
  9738  0021D4  12DF               	iorwf	indf2,f,c
  9739  0021D6  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9740  0021D8  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9741  0021DA  5011               	movf	__CANIDToRegs@Value,w,c
  9742  0021DC  6ED9               	movwf	fsr2l,c
  9743  0021DE  6ADA               	clrf	fsr2h,c
  9744  0021E0  0012               	return	
  9745  0021E2                     __end_ofPL4:
  9746                           	opt stack 0
  9747  0021E2                     PL10:
  9748                           	opt stack 22
  9749  0021E2  6ED9               	movwf	fsr2l,c
  9750  0021E4  6ADA               	clrf	fsr2h,c
  9751  0021E6  0E02               	movlw	2
  9752  0021E8  26D9               	addwf	fsr2l,f,c
  9753  0021EA  6ADA               	clrf	fsr2h,c
  9754  0021EC  50DF               	movf	indf2,w,c
  9755  0021EE  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9756  0021F0  0012               	return	
  9757  0021F2                     __end_ofPL10:
  9758                           	opt stack 0
  9759  0021F2                     PL14:
  9760                           	opt stack 22
  9761  0021F2  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9762  0021F6  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9763  0021FA  6EDF               	movwf	indf2,c
  9764  0021FC  5011               	movf	__CANIDToRegs@Value,w,c
  9765  0021FE  6ED9               	movwf	fsr2l,c
  9766  002200  6ADA               	clrf	fsr2h,c
  9767  002202  0012               	return	
  9768  002204                     __end_ofPL14:
  9769                           	opt stack 0
  9770  002204                     PL22:
  9771                           	opt stack 22
  9772  002204  26D9               	addwf	fsr2l,f,c
  9773  002206  6ADA               	clrf	fsr2h,c
  9774  002208  50DF               	movf	indf2,w,c
  9775  00220A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9776  00220C  90D8               	bcf	status,0,c
  9777  00220E  360F               	rlcf	??__CANIDToRegs,f,c
  9778  002210  90D8               	bcf	status,0,c
  9779  002212  360F               	rlcf	??__CANIDToRegs,f,c
  9780  002214  90D8               	bcf	status,0,c
  9781  002216  0012               	return	
  9782  002218                     __end_ofPL22:
  9783                           	opt stack 0
  9784  002218                     PL36:
  9785                           	opt stack 22
  9786  002218  50DF               	movf	indf2,w,c
  9787  00221A  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9788  00221C  0E05               	movlw	5
  9789  00221E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9790  002220  0C05               	retlw	5
  9791  002222                     __end_ofPL36:
  9792                           	opt stack 0
  9793                           tblptru	equ	0xFF8
  9794                           tblptrh	equ	0xFF7
  9795                           tblptrl	equ	0xFF6
  9796                           tablat	equ	0xFF5
  9797                           prodh	equ	0xFF4
  9798                           prodl	equ	0xFF3
  9799                           intcon	equ	0xFF2
  9800                           postinc0	equ	0xFEE
  9801                           wreg	equ	0xFE8
  9802                           indf1	equ	0xFE7
  9803                           fsr1h	equ	0xFE2
  9804                           fsr1l	equ	0xFE1
  9805                           indf2	equ	0xFDF
  9806                           postinc2	equ	0xFDE
  9807                           postdec2	equ	0xFDD
  9808                           plusw2	equ	0xFDB
  9809                           fsr2h	equ	0xFDA
  9810                           fsr2l	equ	0xFD9
  9811                           status	equ	0xFD8
  9812                           
  9813 ;; *************** function _vscp_getEvent *****************
  9814 ;; Defined at:
  9815 ;;		line 1308 in file "../../vscp_firmware/common/vscp_firmware.c"
  9816 ;; Parameters:    Size  Location     Type
  9817 ;;		None
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  rv              1   43[COMRAM] unsigned char 
  9820 ;; Return value:  Size  Location     Type
  9821 ;;                  1    wreg      unsigned char 
  9822 ;; Registers used:
  9823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9824 ;; Tracked objects:
  9825 ;;		On entry : F/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9832 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9833 ;;Total ram usage:        1 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:    6
  9836 ;; This function calls:
  9837 ;;		_getVSCPFrame
  9838 ;; This function is called by:
  9839 ;;		_main
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           	psect	text54
  9844  002C5A                     __ptext54:
  9845                           	opt stack 0
  9846  002C5A                     _vscp_getEvent:
  9847                           	opt stack 24
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;vscp_firmware.c: 1309: int8_t rv;
  9851                           ;vscp_firmware.c: 1315: if (vscp_imsg.flags & 0x80) return !0;
  9852                           
  9853                           ;incstack = 0
  9854                           ;incstack = 0
  9855  002C5A  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9856  002C5C  0012               	return	
  9857                           
  9858                           ; BSR set to: 0
  9859                           ;vscp_firmware.c: 1318: if ((rv = getVSCPFrame( &vscp_imsg.vscp_class,
  9860                           ;vscp_firmware.c: 1319: &vscp_imsg.vscp_type,
  9861                           ;vscp_firmware.c: 1320: &vscp_imsg.oaddr,
  9862                           ;vscp_firmware.c: 1321: &vscp_imsg.priority,
  9863                           ;vscp_firmware.c: 1322: &vscp_imsg.flags,
  9864                           ;vscp_firmware.c: 1323: vscp_imsg.data ) ) ) {
  9865  002C5E  0E79               	movlw	low (_vscp_imsg+4)
  9866  002C60  6E1E               	movwf	?_getVSCPFrame,c
  9867  002C62  0E7A               	movlw	low (_vscp_imsg+5)
  9868  002C64  6E1F               	movwf	?_getVSCPFrame+1,c
  9869  002C66  0E76               	movlw	low (_vscp_imsg+1)
  9870  002C68  6E20               	movwf	?_getVSCPFrame+2,c
  9871  002C6A  0E75               	movlw	low _vscp_imsg
  9872  002C6C  6E21               	movwf	?_getVSCPFrame+3,c
  9873  002C6E  0E7B               	movlw	low (_vscp_imsg+6)
  9874  002C70  6E22               	movwf	?_getVSCPFrame+4,c
  9875  002C72  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  9876  002C74  ECBE  F014         	call	_getVSCPFrame
  9877  002C78  6E2C               	movwf	vscp_getEvent@rv,c
  9878  002C7A  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9879  002C7C  B4D8               	btfsc	status,2,c
  9880  002C7E  0012               	return	
  9881                           
  9882                           ;vscp_firmware.c: 1325: vscp_imsg.flags |= 0x80;
  9883  002C80  0100               	movlb	0	; () banked
  9884  002C82  8F75               	bsf	_vscp_imsg& (0+255),7,b
  9885  002C84  0012               	return	
  9886  002C86                     __end_of_vscp_getEvent:
  9887                           	opt stack 0
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           intcon	equ	0xFF2
  9895                           postinc0	equ	0xFEE
  9896                           wreg	equ	0xFE8
  9897                           indf1	equ	0xFE7
  9898                           fsr1h	equ	0xFE2
  9899                           fsr1l	equ	0xFE1
  9900                           indf2	equ	0xFDF
  9901                           postinc2	equ	0xFDE
  9902                           postdec2	equ	0xFDD
  9903                           plusw2	equ	0xFDB
  9904                           fsr2h	equ	0xFDA
  9905                           fsr2l	equ	0xFD9
  9906                           status	equ	0xFD8
  9907                           
  9908 ;; *************** function _getVSCPFrame *****************
  9909 ;; Defined at:
  9910 ;;		line 1477 in file "../main.c"
  9911 ;; Parameters:    Size  Location     Type
  9912 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9913 ;;		 -> vscp_imsg(14), 
  9914 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9915 ;;		 -> vscp_imsg(14), 
  9916 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9917 ;;		 -> vscp_imsg(14), 
  9918 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9919 ;;		 -> vscp_imsg(14), 
  9920 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9921 ;;		 -> vscp_imsg(14), 
  9922 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9923 ;;		 -> vscp_imsg(14), 
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9926 ;;		 -> vscp_imsg(14), 
  9927 ;;  id              4   39[COMRAM] unsigned long 
  9928 ;; Return value:  Size  Location     Type
  9929 ;;                  1    wreg      unsigned char 
  9930 ;; Registers used:
  9931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9932 ;; Tracked objects:
  9933 ;;		On entry : F/0
  9934 ;;		On exit  : 0/0
  9935 ;;		Unchanged: 0/0
  9936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9937 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9938 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9939 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9940 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9941 ;;Total ram usage:       14 bytes
  9942 ;; Hardware stack levels used:    1
  9943 ;; Hardware stack levels required when called:    5
  9944 ;; This function calls:
  9945 ;;		_getCANFrame
  9946 ;; This function is called by:
  9947 ;;		_vscp_getEvent
  9948 ;; This function uses a non-reentrant model
  9949 ;;
  9950                           
  9951                           	psect	text55
  9952  00297C                     __ptext55:
  9953                           	opt stack 0
  9954  00297C                     _getVSCPFrame:
  9955                           	opt stack 24
  9956                           
  9957                           ;incstack = 0
  9958                           ;incstack = 0
  9959                           ;getVSCPFrame@pvscpclass stored from wreg
  9960  00297C  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9961                           
  9962                           ; BSR set to: 0
  9963                           ;main.c: 1478: uint32_t id;
  9964                           ;main.c: 1480: if ( !getCANFrame(&id, pSize, pData) ) {
  9965  002980  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9966  002984  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9967  002988  0E28               	movlw	getVSCPFrame@id& (0+255)
  9968  00298A  EC92  F016         	call	_getCANFrame
  9969  00298E  0900               	iorlw	0
  9970  002990  E101               	bnz	l5098
  9971                           
  9972                           ;main.c: 1481: return 0;
  9973  002992  0C00               	retlw	0
  9974  002994                     l5098:
  9975                           
  9976                           ;main.c: 1482: }
  9977                           ;main.c: 1484: *pNodeId = id & 0x0ff;
  9978  002994  501F               	movf	getVSCPFrame@pNodeId,w,c
  9979  002996  6ED9               	movwf	fsr2l,c
  9980  002998  6ADA               	clrf	fsr2h,c
  9981  00299A  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9982                           
  9983                           ;main.c: 1485: *pvscptype = (id >> 8) & 0xff;
  9984  00299E  501E               	movf	getVSCPFrame@pvscptype,w,c
  9985  0029A0  6ED9               	movwf	fsr2l,c
  9986  0029A2  6ADA               	clrf	fsr2h,c
  9987  0029A4  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9988                           
  9989                           ;main.c: 1486: *pvscpclass = (id >> 16) & 0x1ff;
  9990  0029A8  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9991  0029AA  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9992  0029AC  0E01               	movlw	1
  9993  0029AE  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9994  0029B0  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9995  0029B2  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9996  0029B4  6ED9               	movwf	fsr2l,c
  9997  0029B6  6ADA               	clrf	fsr2h,c
  9998  0029B8  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9999  0029BC  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 10000                           
 10001                           ;main.c: 1487: *pPriority = (uint16_t) (0x07 & (id >> 26));
 10002  0029C0  5020               	movf	getVSCPFrame@pPriority,w,c
 10003  0029C2  6ED9               	movwf	fsr2l,c
 10004  0029C4  6ADA               	clrf	fsr2h,c
 10005  0029C6  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 10006  0029CA  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 10007  0029CE  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 10008  0029D2  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 10009  0029D6  0E1B               	movlw	27
 10010  0029D8  D005               	goto	u4440
 10011  0029DA                     u4445:
 10012  0029DA  90D8               	bcf	status,0,c
 10013  0029DC  3226               	rrcf	??_getVSCPFrame+3,f,c
 10014  0029DE  3225               	rrcf	??_getVSCPFrame+2,f,c
 10015  0029E0  3224               	rrcf	??_getVSCPFrame+1,f,c
 10016  0029E2  3223               	rrcf	??_getVSCPFrame,f,c
 10017  0029E4                     u4440:
 10018  0029E4  2EE8               	decfsz	wreg,f,c
 10019  0029E6  D7F9               	goto	u4445
 10020  0029E8  5023               	movf	??_getVSCPFrame,w,c
 10021  0029EA  0B07               	andlw	7
 10022  0029EC  6EDF               	movwf	indf2,c
 10023                           
 10024                           ;main.c: 1489: return 1;
 10025  0029EE  0C01               	retlw	1
 10026  0029F0                     __end_of_getVSCPFrame:
 10027                           	opt stack 0
 10028                           tblptru	equ	0xFF8
 10029                           tblptrh	equ	0xFF7
 10030                           tblptrl	equ	0xFF6
 10031                           tablat	equ	0xFF5
 10032                           prodh	equ	0xFF4
 10033                           prodl	equ	0xFF3
 10034                           intcon	equ	0xFF2
 10035                           postinc0	equ	0xFEE
 10036                           wreg	equ	0xFE8
 10037                           indf1	equ	0xFE7
 10038                           fsr1h	equ	0xFE2
 10039                           fsr1l	equ	0xFE1
 10040                           indf2	equ	0xFDF
 10041                           postinc2	equ	0xFDE
 10042                           postdec2	equ	0xFDD
 10043                           plusw2	equ	0xFDB
 10044                           fsr2h	equ	0xFDA
 10045                           fsr2l	equ	0xFD9
 10046                           status	equ	0xFD8
 10047                           
 10048 ;; *************** function _getCANFrame *****************
 10049 ;; Defined at:
 10050 ;;		line 1519 in file "../main.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;  pid             1    wreg     PTR unsigned long 
 10053 ;;		 -> getVSCPFrame@id(4), 
 10054 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 10055 ;;		 -> vscp_imsg(14), 
 10056 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 10057 ;;		 -> vscp_imsg(14), 
 10058 ;; Auto vars:     Size  Location     Type
 10059 ;;  pid             1   27[COMRAM] PTR unsigned long 
 10060 ;;		 -> getVSCPFrame@id(4), 
 10061 ;;  flags           1   28[COMRAM] enum E18984
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  1    wreg      unsigned char 
 10064 ;; Registers used:
 10065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10066 ;; Tracked objects:
 10067 ;;		On entry : F/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10071 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10074 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10075 ;;Total ram usage:        4 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:    4
 10078 ;; This function calls:
 10079 ;;		_ECANReceiveMessage
 10080 ;; This function is called by:
 10081 ;;		_getVSCPFrame
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085                           	psect	text56
 10086  002D24                     __ptext56:
 10087                           	opt stack 0
 10088  002D24                     _getCANFrame:
 10089                           	opt stack 24
 10090                           
 10091                           ;incstack = 0
 10092                           ;incstack = 0
 10093                           ;getCANFrame@pid stored from wreg
 10094  002D24  CFE8 F01C          	movff	wreg,getCANFrame@pid
 10095                           
 10096                           ; BSR set to: 0
 10097                           ;main.c: 1520: ECAN_RX_MSG_FLAGS flags;
 10098                           ;main.c: 1524: if (vscp_imsg.flags & 0x80) return 0;
 10099  002D28  BF75               	btfsc	_vscp_imsg& (0+255),7,b
 10100  002D2A                     l5110:
 10101  002D2A  0C00               	retlw	0
 10102                           
 10103                           ; BSR set to: 0
 10104                           ;main.c: 1526: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 10105  002D2C  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 10106  002D30  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 10107  002D34  0E1D               	movlw	low getCANFrame@flags
 10108  002D36  6E11               	movwf	?_ECANReceiveMessage+2,c
 10109  002D38  501C               	movf	getCANFrame@pid,w,c
 10110  002D3A  EC95  F00B         	call	_ECANReceiveMessage
 10111  002D3E  0900               	iorlw	0
 10112  002D40  E0F4               	bz	l5110
 10113                           
 10114                           ;main.c: 1529: if (flags & ECAN_RX_RTR_FRAME) return 0;
 10115  002D42  AC1D               	btfss	getCANFrame@flags,6,c
 10116                           
 10117                           ;main.c: 1532: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 10118  002D44  AA1D               	btfss	getCANFrame@flags,5,c
 10119  002D46  0C00               	retlw	0
 10120                           
 10121                           ;main.c: 1534: return 1;
 10122  002D48  0C01               	retlw	1
 10123  002D4A                     __end_of_getCANFrame:
 10124                           	opt stack 0
 10125                           tblptru	equ	0xFF8
 10126                           tblptrh	equ	0xFF7
 10127                           tblptrl	equ	0xFF6
 10128                           tablat	equ	0xFF5
 10129                           prodh	equ	0xFF4
 10130                           prodl	equ	0xFF3
 10131                           intcon	equ	0xFF2
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           indf1	equ	0xFE7
 10135                           fsr1h	equ	0xFE2
 10136                           fsr1l	equ	0xFE1
 10137                           indf2	equ	0xFDF
 10138                           postinc2	equ	0xFDE
 10139                           postdec2	equ	0xFDD
 10140                           plusw2	equ	0xFDB
 10141                           fsr2h	equ	0xFDA
 10142                           fsr2l	equ	0xFD9
 10143                           status	equ	0xFD8
 10144                           
 10145 ;; *************** function _ECANReceiveMessage *****************
 10146 ;; Defined at:
 10147 ;;		line 803 in file "../ECAN.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;  id              1    wreg     PTR unsigned long 
 10150 ;;		 -> getVSCPFrame@id(4), 
 10151 ;;  data            1   14[COMRAM] PTR unsigned char 
 10152 ;;		 -> vscp_imsg(14), 
 10153 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 10154 ;;		 -> vscp_imsg(14), 
 10155 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
 10156 ;;		 -> getCANFrame@flags(1), 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  id              1   19[COMRAM] PTR unsigned long 
 10159 ;;		 -> getVSCPFrame@id(4), 
 10160 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 10161 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10162 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10163 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 10164 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10165 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10166 ;;  temp            1   22[COMRAM] struct .
 10167 ;;  mode            1   21[COMRAM] unsigned char 
 10168 ;;  i               1   20[COMRAM] unsigned char 
 10169 ;; Return value:  Size  Location     Type
 10170 ;;                  1    wreg      enum E18242
 10171 ;; Registers used:
 10172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10173 ;; Tracked objects:
 10174 ;;		On entry : F/0
 10175 ;;		On exit  : 0/0
 10176 ;;		Unchanged: 0/0
 10177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10178 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10179 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10181 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10182 ;;Total ram usage:       11 bytes
 10183 ;; Hardware stack levels used:    1
 10184 ;; Hardware stack levels required when called:    3
 10185 ;; This function calls:
 10186 ;;		__ECANPointBuffer
 10187 ;;		__RegsToCANID
 10188 ;; This function is called by:
 10189 ;;		_getCANFrame
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           	psect	text57
 10194  00172A                     __ptext57:
 10195                           	opt stack 0
 10196  00172A                     _ECANReceiveMessage:
 10197                           	opt stack 24
 10198                           
 10199                           ;incstack = 0
 10200                           ;incstack = 0
 10201                           ;ECANReceiveMessage@id stored from wreg
 10202  00172A  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;ECAN.c: 805: BYTE mode;
 10206                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 10207                           ;ECAN.c: 809: char i;
 10208                           ;ECAN.c: 810: BYTE_VAL temp;
 10209                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 10210  00172E  6A54               	clrf	__ECANRxFilterHitInfo,c
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 10214  001730  5072               	movf	3954,w,c	;volatile
 10215  001732  0BC0               	andlw	192
 10216  001734  6E16               	movwf	ECANReceiveMessage@mode,c
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;ECAN.c: 816: if ( mode == 0x00 )
 10220  001736  6616               	tstfsz	ECANReceiveMessage@mode,c
 10221  001738  D030               	goto	l5246
 10222                           
 10223                           ; BSR set to: 0
 10224                           ;ECAN.c: 822: {
 10225                           ;ECAN.c: 824: if ( RXB0FUL )
 10226  00173A  AE60               	btfss	3936,7,c	;volatile
 10227  00173C  D012               	goto	l661
 10228                           
 10229                           ; BSR set to: 0
 10230                           ;ECAN.c: 825: {
 10231                           ;ECAN.c: 827: RXB0IF = 0;
 10232  00173E  9077               	bcf	3959,0,c	;volatile
 10233                           
 10234                           ;ECAN.c: 830: if ( RXB0OVFL )
 10235  001740  AE71               	btfss	3953,7,c	;volatile
 10236  001742  D006               	goto	l5222
 10237                           
 10238                           ; BSR set to: 0
 10239                           ;ECAN.c: 831: {
 10240                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 10241  001744  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10242  001746  6ED9               	movwf	fsr2l,c
 10243  001748  6ADA               	clrf	fsr2h,c
 10244  00174A  0E00               	movlw	0
 10245  00174C  86DB               	bsf	plusw2,3,c
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;ECAN.c: 833: RXB0OVFL = 0;
 10249  00174E  9E71               	bcf	3953,7,c	;volatile
 10250  001750                     l5222:
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;ECAN.c: 834: }
 10254                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 10255  001750  A060               	btfss	3936,0,c	;volatile
 10256  001752  D002               	bra	u4615
 10257  001754  8054               	bsf	__ECANRxFilterHitInfo,0,c
 10258  001756  D001               	bra	u4617
 10259  001758                     u4615:
 10260  001758  9054               	bcf	__ECANRxFilterHitInfo,0,c
 10261  00175A                     u4617:
 10262                           
 10263                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 10264  00175A  0E0F               	movlw	15	;volatile
 10265  00175C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10266  00175E  0E60               	movlw	96	;volatile
 10267  001760  D01A               	goto	L28
 10268  001762                     l661:
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 10272  001762  010F               	movlb	15	; () banked
 10273  001764  AF30               	btfss	48,7,b	;volatile
 10274  001766  0C00               	retlw	0
 10275                           
 10276                           ; BSR set to: 15
 10277                           ;ECAN.c: 842: {
 10278                           ;ECAN.c: 844: RXB1IF = 0;
 10279  001768  9277               	bcf	3959,1,c	;volatile
 10280                           
 10281                           ;ECAN.c: 847: if ( RXB1OVFL )
 10282  00176A  AC71               	btfss	3953,6,c	;volatile
 10283  00176C  D006               	goto	l5232
 10284                           
 10285                           ; BSR set to: 15
 10286                           ;ECAN.c: 848: {
 10287                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 10288  00176E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10289  001770  6ED9               	movwf	fsr2l,c
 10290  001772  6ADA               	clrf	fsr2h,c
 10291  001774  0E00               	movlw	0
 10292  001776  86DB               	bsf	plusw2,3,c
 10293                           
 10294                           ; BSR set to: 15
 10295                           ;ECAN.c: 850: RXB1OVFL = 0;
 10296  001778  9C71               	bcf	3953,6,c	;volatile
 10297  00177A                     l5232:
 10298                           
 10299                           ; BSR set to: 15
 10300                           ;ECAN.c: 851: }
 10301                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 10302  00177A  5130               	movf	48,w,b	;volatile
 10303  00177C  0B07               	andlw	7
 10304  00177E  6E54               	movwf	__ECANRxFilterHitInfo,c
 10305                           
 10306                           ; BSR set to: 15
 10307                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 10308  001780  0E02               	movlw	2
 10309  001782  6054               	cpfslt	__ECANRxFilterHitInfo,c
 10310  001784  D005               	goto	l5238
 10311                           
 10312                           ; BSR set to: 15
 10313                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 10314  001786  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10315  001788  6ED9               	movwf	fsr2l,c
 10316  00178A  6ADA               	clrf	fsr2h,c
 10317  00178C  0E00               	movlw	0
 10318  00178E  8EDB               	bsf	plusw2,7,c
 10319  001790                     l5238:
 10320                           
 10321                           ; BSR set to: 15
 10322                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 10323  001790  0E0F               	movlw	15	;volatile
 10324  001792  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10325  001794  0E30               	movlw	48	;volatile
 10326  001796                     L28:
 10327  001796  6E18               	movwf	ECANReceiveMessage@ptr,c
 10328                           
 10329                           ;ECAN.c: 860: }
 10330  001798  D05B               	goto	l5300
 10331  00179A                     l5246:
 10332                           
 10333                           ; BSR set to: 0
 10334                           ;ECAN.c: 869: else if ( mode == 0x40 )
 10335  00179A  5016               	movf	ECANReceiveMessage@mode,w,c
 10336  00179C  0A40               	xorlw	64
 10337  00179E  E13E               	bnz	l671
 10338                           
 10339                           ; BSR set to: 0
 10340                           ;ECAN.c: 875: {
 10341                           ;ECAN.c: 876: if ( RXB0FUL )
 10342  0017A0  AE60               	btfss	3936,7,c	;volatile
 10343  0017A2  D004               	goto	l672
 10344                           
 10345                           ; BSR set to: 0
 10346                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 10347  0017A4  0E0F               	movlw	15	;volatile
 10348  0017A6  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10349  0017A8  0E60               	movlw	96	;volatile
 10350  0017AA  D036               	goto	L35
 10351  0017AC                     l672:
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 10355  0017AC  010F               	movlb	15	; () banked
 10356  0017AE  AF30               	btfss	48,7,b	;volatile
 10357  0017B0  D004               	goto	l674
 10358                           
 10359                           ; BSR set to: 15
 10360                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 10361  0017B2  0E0F               	movlw	15	;volatile
 10362  0017B4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10363  0017B6  0E30               	movlw	48	;volatile
 10364  0017B8  D02F               	goto	L35
 10365  0017BA                     l674:
 10366                           
 10367                           ; BSR set to: 15
 10368                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 10369  0017BA  010E               	movlb	14
 10370  0017BC  A57D               	btfss	125,2,b	;volatile
 10371  0017BE  AF80               	btfss	128,7,b	;volatile
 10372  0017C0  D004               	goto	l676
 10373                           
 10374                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 10375  0017C2  0E0E               	movlw	14	;volatile
 10376  0017C4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10377  0017C6  0E80               	movlw	128	;volatile
 10378  0017C8  D027               	goto	L35
 10379  0017CA                     l676:
 10380                           
 10381                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 10382  0017CA  010E               	movlb	14
 10383  0017CC  A77D               	btfss	125,3,b	;volatile
 10384  0017CE  AF90               	btfss	144,7,b	;volatile
 10385  0017D0  D004               	goto	l678
 10386                           
 10387                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 10388  0017D2  0E0E               	movlw	14	;volatile
 10389  0017D4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10390  0017D6  0E90               	movlw	144	;volatile
 10391  0017D8  D01F               	goto	L35
 10392  0017DA                     l678:
 10393                           
 10394                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 10395  0017DA  010E               	movlb	14
 10396  0017DC  A97D               	btfss	125,4,b	;volatile
 10397  0017DE  AFA0               	btfss	160,7,b	;volatile
 10398  0017E0  D004               	goto	l680
 10399                           
 10400                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 10401  0017E2  0E0E               	movlw	14	;volatile
 10402  0017E4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10403  0017E6  0EA0               	movlw	160	;volatile
 10404  0017E8  D017               	goto	L35
 10405  0017EA                     l680:
 10406                           
 10407                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 10408  0017EA  010E               	movlb	14
 10409  0017EC  AB7D               	btfss	125,5,b	;volatile
 10410  0017EE  AFB0               	btfss	176,7,b	;volatile
 10411  0017F0  D004               	goto	l682
 10412                           
 10413                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 10414  0017F2  0E0E               	movlw	14	;volatile
 10415  0017F4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10416  0017F6  0EB0               	movlw	176	;volatile
 10417  0017F8  D00F               	goto	L35
 10418  0017FA                     l682:
 10419                           
 10420                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 10421  0017FA  010E               	movlb	14
 10422  0017FC  AD7D               	btfss	125,6,b	;volatile
 10423  0017FE  AFC0               	btfss	192,7,b	;volatile
 10424  001800  D004               	goto	l684
 10425                           
 10426                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 10427  001802  0E0E               	movlw	14	;volatile
 10428  001804  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10429  001806  0EC0               	movlw	192	;volatile
 10430  001808  D007               	goto	L35
 10431  00180A                     l684:
 10432                           
 10433                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 10434  00180A  010E               	movlb	14
 10435  00180C  AF7D               	btfss	125,7,b	;volatile
 10436  00180E  AFD0               	btfss	208,7,b	;volatile
 10437  001810  0C00               	retlw	0
 10438                           
 10439                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 10440  001812  0E0E               	movlw	14	;volatile
 10441  001814  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10442  001816  0ED0               	movlw	208	;volatile
 10443  001818                     L35:
 10444  001818  6E18               	movwf	ECANReceiveMessage@ptr,c
 10445  00181A  D00A               	goto	l5290
 10446  00181C                     l671:
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;ECAN.c: 910: else
 10450                           ;ECAN.c: 915: {
 10451                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 10452  00181C  AE71               	btfss	3953,7,c	;volatile
 10453  00181E  0C00               	retlw	0
 10454                           
 10455                           ; BSR set to: 0
 10456                           ;ECAN.c: 917: {
 10457                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 10458  001820  506F               	movf	3951,w,c	;volatile
 10459  001822  0B07               	andlw	7
 10460  001824  EC7F  F014         	call	__ECANPointBuffer
 10461  001828  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 10462  00182C  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 10463  001830                     l5290:
 10464                           
 10465                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 10466  001830  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10467  001834  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10468  001838  50DF               	movf	indf2,w,c
 10469  00183A  0B1F               	andlw	31
 10470  00183C  6E54               	movwf	__ECANRxFilterHitInfo,c
 10471                           
 10472                           ;ECAN.c: 932: RXB1IF = 0;
 10473  00183E  9277               	bcf	3959,1,c	;volatile
 10474                           
 10475                           ;ECAN.c: 934: if ( RXB1OVFL )
 10476  001840  AC71               	btfss	3953,6,c	;volatile
 10477  001842  D006               	goto	l5300
 10478                           
 10479                           ;ECAN.c: 935: {
 10480                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 10481  001844  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10482  001846  6ED9               	movwf	fsr2l,c
 10483  001848  6ADA               	clrf	fsr2h,c
 10484  00184A  0E00               	movlw	0
 10485  00184C  86DB               	bsf	plusw2,3,c
 10486                           
 10487                           ;ECAN.c: 937: RXB1OVFL = 0;
 10488  00184E  9C71               	bcf	3953,6,c	;volatile
 10489  001850                     l5300:
 10490                           
 10491                           ;ECAN.c: 942: savedPtr = ptr;
 10492  001850  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 10493  001854  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 10494                           
 10495                           ;ECAN.c: 943: *msgFlags = 0;
 10496  001858  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10497  00185A  6ED9               	movwf	fsr2l,c
 10498  00185C  6ADA               	clrf	fsr2h,c
 10499  00185E  6ADF               	clrf	indf2,c
 10500                           
 10501                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 10502  001860  EE20 F005          	lfsr	2,5
 10503  001864  D854               	call	PL32	;call to abstracted procedure
 10504                           
 10505                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 10506  001866  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10507  001868  6ED9               	movwf	fsr2l,c
 10508  00186A  6ADA               	clrf	fsr2h,c
 10509  00186C  5017               	movf	ECANReceiveMessage@temp,w,c
 10510  00186E  0B0F               	andlw	15
 10511  001870  6EDF               	movwf	indf2,c
 10512                           
 10513                           ;ECAN.c: 950: if ( temp.bits.b6 )
 10514  001872  AC17               	btfss	ECANReceiveMessage@temp,6,c
 10515  001874  D005               	goto	l692
 10516                           
 10517                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 10518  001876  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10519  001878  6ED9               	movwf	fsr2l,c
 10520  00187A  6ADA               	clrf	fsr2h,c
 10521  00187C  0E00               	movlw	0
 10522  00187E  8CDB               	bsf	plusw2,6,c
 10523  001880                     l692:
 10524                           
 10525                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 10526  001880  EE20 F002          	lfsr	2,2
 10527  001884  D844               	call	PL32	;call to abstracted procedure
 10528                           
 10529                           ;ECAN.c: 955: if ( temp.bits.b3 )
 10530  001886  A617               	btfss	ECANReceiveMessage@temp,3,c
 10531  001888  D008               	goto	l693
 10532                           
 10533                           ;ECAN.c: 956: {
 10534                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 10535  00188A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10536  00188C  6ED9               	movwf	fsr2l,c
 10537  00188E  6ADA               	clrf	fsr2h,c
 10538  001890  0E00               	movlw	0
 10539  001892  8ADB               	bsf	plusw2,5,c
 10540                           
 10541                           ;ECAN.c: 958: temp.Val = 1;
 10542  001894  0E01               	movlw	1
 10543  001896  6E17               	movwf	ECANReceiveMessage@temp,c
 10544                           
 10545                           ;ECAN.c: 959: }
 10546  001898  D001               	goto	l5318
 10547  00189A                     l693:
 10548                           
 10549                           ;ECAN.c: 960: else
 10550                           ;ECAN.c: 961: temp.Val = 0;
 10551  00189A  6A17               	clrf	ECANReceiveMessage@temp,c
 10552  00189C                     l5318:
 10553                           
 10554                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 10555  00189C  2818               	incf	ECANReceiveMessage@ptr,w,c
 10556  00189E  6E08               	movwf	?__RegsToCANID,c
 10557  0018A0  0E00               	movlw	0
 10558  0018A2  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 10559  0018A4  6E09               	movwf	?__RegsToCANID+1,c
 10560  0018A6  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 10561  0018AA  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 10562  0018AE  EC6B  F00F         	call	__RegsToCANID	;wreg free
 10563                           
 10564                           ;ECAN.c: 966: ptr += 6;
 10565  0018B2  0E06               	movlw	6
 10566  0018B4  2618               	addwf	ECANReceiveMessage@ptr,f,c
 10567  0018B6  0E00               	movlw	0
 10568  0018B8  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 10569                           
 10570                           ;ECAN.c: 967: temp.Val = *dataLen;
 10571  0018BA  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10572  0018BC  6ED9               	movwf	fsr2l,c
 10573  0018BE  6ADA               	clrf	fsr2h,c
 10574  0018C0  50DF               	movf	indf2,w,c
 10575  0018C2  6E17               	movwf	ECANReceiveMessage@temp,c
 10576                           
 10577                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 10578  0018C4  6A15               	clrf	ECANReceiveMessage@i,c
 10579  0018C6  D00D               	goto	l5334
 10580  0018C8                     l5326:
 10581                           
 10582                           ;ECAN.c: 969: *data++ = *ptr++;
 10583  0018C8  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10584  0018CC  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10585  0018D0  500F               	movf	ECANReceiveMessage@data,w,c
 10586  0018D2  6EE1               	movwf	fsr1l,c
 10587  0018D4  6AE2               	clrf	fsr1h,c
 10588  0018D6  CFDF FFE7          	movff	indf2,indf1
 10589  0018DA  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10590  0018DC  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10591  0018DE  2A0F               	incf	ECANReceiveMessage@data,f,c
 10592  0018E0  2A15               	incf	ECANReceiveMessage@i,f,c
 10593  0018E2                     l5334:
 10594  0018E2  5017               	movf	ECANReceiveMessage@temp,w,c
 10595  0018E4  5C15               	subwf	ECANReceiveMessage@i,w,c
 10596  0018E6  E3F0               	bnc	l5326
 10597                           
 10598                           ;ECAN.c: 972: if ( IRXIF )
 10599  0018E8  AE77               	btfss	3959,7,c	;volatile
 10600  0018EA  D006               	goto	l5340
 10601                           
 10602                           ;ECAN.c: 973: {
 10603                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10604  0018EC  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10605  0018EE  6ED9               	movwf	fsr2l,c
 10606  0018F0  6ADA               	clrf	fsr2h,c
 10607  0018F2  0E00               	movlw	0
 10608  0018F4  88DB               	bsf	plusw2,4,c
 10609                           
 10610                           ;ECAN.c: 975: IRXIF = 0;
 10611  0018F6  9E77               	bcf	3959,7,c	;volatile
 10612  0018F8                     l5340:
 10613                           
 10614                           ;ECAN.c: 976: }
 10615                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10616  0018F8  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10617  0018FC  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10618  001900  0E7F               	movlw	127
 10619  001902  16DF               	andwf	indf2,f,c
 10620                           
 10621                           ;ECAN.c: 983: if ( mode == 0x80 )
 10622  001904  5016               	movf	ECANReceiveMessage@mode,w,c
 10623  001906  0A80               	xorlw	128
 10624  001908  B4D8               	btfsc	status,2,c
 10625                           
 10626                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10627  00190A  9E71               	bcf	3953,7,c	;volatile
 10628                           
 10629                           ;ECAN.c: 990: return TRUE;
 10630  00190C  0C01               	retlw	1
 10631  00190E                     __end_of_ECANReceiveMessage:
 10632                           	opt stack 0
 10633  00190E                     PL32:
 10634                           	opt stack 24
 10635  00190E  5018               	movf	ECANReceiveMessage@ptr,w,c
 10636  001910  26D9               	addwf	fsr2l,f,c
 10637  001912  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10638  001914  22DA               	addwfc	fsr2h,f,c
 10639  001916  50DF               	movf	indf2,w,c
 10640  001918  6E17               	movwf	ECANReceiveMessage@temp,c
 10641  00191A  0012               	return	
 10642  00191C                     __end_ofPL32:
 10643                           	opt stack 0
 10644                           tblptru	equ	0xFF8
 10645                           tblptrh	equ	0xFF7
 10646                           tblptrl	equ	0xFF6
 10647                           tablat	equ	0xFF5
 10648                           prodh	equ	0xFF4
 10649                           prodl	equ	0xFF3
 10650                           intcon	equ	0xFF2
 10651                           postinc0	equ	0xFEE
 10652                           wreg	equ	0xFE8
 10653                           indf1	equ	0xFE7
 10654                           fsr1h	equ	0xFE2
 10655                           fsr1l	equ	0xFE1
 10656                           indf2	equ	0xFDF
 10657                           postinc2	equ	0xFDE
 10658                           postdec2	equ	0xFDD
 10659                           plusw2	equ	0xFDB
 10660                           fsr2h	equ	0xFDA
 10661                           fsr2l	equ	0xFD9
 10662                           status	equ	0xFD8
 10663                           
 10664 ;; *************** function __RegsToCANID *****************
 10665 ;; Defined at:
 10666 ;;		line 1156 in file "../ECAN.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10669 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10670 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10671 ;;  val             1    9[COMRAM] PTR unsigned long 
 10672 ;;		 -> getVSCPFrame@id(4), 
 10673 ;;  type            1   10[COMRAM] unsigned char 
 10674 ;; Auto vars:     Size  Location     Type
 10675 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10676 ;;		 -> getVSCPFrame@id(4), 
 10677 ;; Return value:  Size  Location     Type
 10678 ;;		None               void
 10679 ;; Registers used:
 10680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10681 ;; Tracked objects:
 10682 ;;		On entry : 0/0
 10683 ;;		On exit  : 0/0
 10684 ;;		Unchanged: 0/0
 10685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10689 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10690 ;;Total ram usage:        7 bytes
 10691 ;; Hardware stack levels used:    1
 10692 ;; Hardware stack levels required when called:    2
 10693 ;; This function calls:
 10694 ;;		Nothing
 10695 ;; This function is called by:
 10696 ;;		_ECANReceiveMessage
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           	psect	text58
 10701  001ED6                     __ptext58:
 10702                           	opt stack 0
 10703  001ED6                     __RegsToCANID:
 10704                           	opt stack 24
 10705                           
 10706                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10707                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10708                           
 10709                           ;incstack = 0
 10710                           ;incstack = 0
 10711  001ED6  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10712                           
 10713                           ;ECAN.c: 1161: if ( type == 0 )
 10714  001EDA  660B               	tstfsz	__RegsToCANID@type,c
 10715  001EDC  D02B               	goto	l5414
 10716                           
 10717                           ;ECAN.c: 1162: {
 10718                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10719  001EDE  500E               	movf	__RegsToCANID@Value,w,c
 10720  001EE0  6ED9               	movwf	fsr2l,c
 10721  001EE2  D862               	call	PL18	;call to abstracted procedure
 10722  001EE4  360C               	rlcf	??__RegsToCANID,f,c
 10723  001EE6  90D8               	bcf	status,0,c
 10724  001EE8  360C               	rlcf	??__RegsToCANID,f,c
 10725  001EEA  90D8               	bcf	status,0,c
 10726  001EEC  340C               	rlcf	??__RegsToCANID,w,c
 10727  001EEE  6EDF               	movwf	indf2,c
 10728                           
 10729                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10730  001EF0  500E               	movf	__RegsToCANID@Value,w,c
 10731  001EF2  6ED9               	movwf	fsr2l,c
 10732  001EF4  6ADA               	clrf	fsr2h,c
 10733  001EF6  2AD9               	incf	fsr2l,f,c
 10734  001EF8  6ADA               	clrf	fsr2h,c
 10735  001EFA  D873               	call	PL28	;call to abstracted procedure
 10736  001EFC                     u4935:
 10737  001EFC  90D8               	bcf	status,0,c
 10738  001EFE  320C               	rrcf	??__RegsToCANID,f,c
 10739  001F00  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10740  001F02  D7FC               	goto	u4935
 10741  001F04  500C               	movf	??__RegsToCANID,w,c
 10742                           
 10743                           ;ECAN.c: 1166: ptr++;
 10744                           
 10745                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10746  001F06  D859               	call	PL20	;call to abstracted procedure
 10747  001F08  0E05               	movlw	5
 10748  001F0A  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10749  001F0C                     u4945:
 10750  001F0C  90D8               	bcf	status,0,c
 10751  001F0E  320C               	rrcf	??__RegsToCANID,f,c
 10752  001F10  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10753  001F12  D7FC               	goto	u4945
 10754  001F14  500E               	movf	__RegsToCANID@Value,w,c
 10755  001F16  6ED9               	movwf	fsr2l,c
 10756  001F18  6ADA               	clrf	fsr2h,c
 10757  001F1A  500C               	movf	??__RegsToCANID,w,c
 10758  001F1C  12DF               	iorwf	indf2,f,c
 10759                           
 10760                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10761  001F1E  D83D               	call	PL8	;call to abstracted procedure
 10762  001F20  6ADF               	clrf	indf2,c
 10763                           
 10764                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10765  001F22  500E               	movf	__RegsToCANID@Value,w,c
 10766  001F24  6ED9               	movwf	fsr2l,c
 10767  001F26  6ADA               	clrf	fsr2h,c
 10768  001F28  0E03               	movlw	3
 10769  001F2A  26D9               	addwf	fsr2l,f,c
 10770  001F2C  6ADA               	clrf	fsr2h,c
 10771  001F2E  0E00               	movlw	0
 10772  001F30  6EDF               	movwf	indf2,c
 10773                           
 10774                           ;ECAN.c: 1170: }
 10775  001F32  0C00               	retlw	0
 10776  001F34                     l5414:
 10777                           
 10778                           ;ECAN.c: 1171: else
 10779                           ;ECAN.c: 1172: {
 10780                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10781  001F34  D832               	call	PL8	;call to abstracted procedure
 10782  001F36  D855               	call	PL28	;call to abstracted procedure
 10783  001F38                     u4955:
 10784  001F38  90D8               	bcf	status,0,c
 10785  001F3A  360C               	rlcf	??__RegsToCANID,f,c
 10786  001F3C  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10787  001F3E  D7FC               	goto	u4955
 10788  001F40  500C               	movf	??__RegsToCANID,w,c
 10789  001F42  6EDF               	movwf	indf2,c
 10790                           
 10791                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10792  001F44  500E               	movf	__RegsToCANID@Value,w,c
 10793  001F46  6ED9               	movwf	fsr2l,c
 10794  001F48  6ADA               	clrf	fsr2h,c
 10795  001F4A  0E03               	movlw	3
 10796  001F4C  26D9               	addwf	fsr2l,f,c
 10797  001F4E  D82C               	call	PL18	;call to abstracted procedure
 10798  001F50  320C               	rrcf	??__RegsToCANID,f,c
 10799  001F52  90D8               	bcf	status,0,c
 10800  001F54  320C               	rrcf	??__RegsToCANID,f,c
 10801  001F56  90D8               	bcf	status,0,c
 10802  001F58  300C               	rrcf	??__RegsToCANID,w,c
 10803                           
 10804                           ;ECAN.c: 1176: ptr++;
 10805                           
 10806                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10807  001F5A  D82F               	call	PL20	;call to abstracted procedure
 10808  001F5C  0E03               	movlw	3
 10809  001F5E  160C               	andwf	??__RegsToCANID,f,c
 10810  001F60  D81C               	call	PL8	;call to abstracted procedure
 10811  001F62  500C               	movf	??__RegsToCANID,w,c
 10812  001F64  12DF               	iorwf	indf2,f,c
 10813                           
 10814                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10815  001F66  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10816  001F6A  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10817  001F6E  50DF               	movf	indf2,w,c
 10818  001F70  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10819  001F72  90D8               	bcf	status,0,c
 10820  001F74  320C               	rrcf	??__RegsToCANID,f,c
 10821  001F76  90D8               	bcf	status,0,c
 10822  001F78  320C               	rrcf	??__RegsToCANID,f,c
 10823  001F7A  90D8               	bcf	status,0,c
 10824  001F7C  320C               	rrcf	??__RegsToCANID,f,c
 10825  001F7E  0E1C               	movlw	28
 10826  001F80  160C               	andwf	??__RegsToCANID,f,c
 10827  001F82  D80B               	call	PL8	;call to abstracted procedure
 10828  001F84  500C               	movf	??__RegsToCANID,w,c
 10829  001F86  12DF               	iorwf	indf2,f,c
 10830                           
 10831                           ;ECAN.c: 1180: ptr++;
 10832                           
 10833                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10834  001F88  D822               	call	PL26	;call to abstracted procedure
 10835  001F8A  2AE1               	incf	fsr1l,f,c
 10836  001F8C  6AE2               	clrf	fsr1h,c
 10837  001F8E  CFDF FFE7          	movff	indf2,indf1
 10838                           
 10839                           ;ECAN.c: 1182: ptr++;
 10840                           
 10841                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10842  001F92  D81D               	call	PL26	;call to abstracted procedure
 10843  001F94  CFDF FFE7          	movff	indf2,indf1
 10844  001F98  0012               	return	
 10845  001F9A                     __end_of__RegsToCANID:
 10846                           	opt stack 0
 10847  001F9A                     PL8:
 10848                           	opt stack 24
 10849  001F9A  500E               	movf	__RegsToCANID@Value,w,c
 10850  001F9C  6ED9               	movwf	fsr2l,c
 10851  001F9E  6ADA               	clrf	fsr2h,c
 10852  001FA0  0E02               	movlw	2
 10853  001FA2  26D9               	addwf	fsr2l,f,c
 10854  001FA4  6ADA               	clrf	fsr2h,c
 10855  001FA6  0012               	return	
 10856  001FA8                     __end_ofPL8:
 10857                           	opt stack 0
 10858  001FA8                     PL18:
 10859                           	opt stack 24
 10860  001FA8  6ADA               	clrf	fsr2h,c
 10861  001FAA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10862  001FAE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10863  001FB2  50E7               	movf	indf1,w,c
 10864  001FB4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10865  001FB6  90D8               	bcf	status,0,c
 10866  001FB8  0012               	return	
 10867  001FBA                     __end_ofPL18:
 10868                           	opt stack 0
 10869  001FBA                     PL20:
 10870                           	opt stack 24
 10871  001FBA  6EDF               	movwf	indf2,c
 10872  001FBC  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10873  001FBE  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10874  001FC0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10875  001FC4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10876  001FC8  50DF               	movf	indf2,w,c
 10877  001FCA  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10878  001FCC  0012               	return	
 10879  001FCE                     __end_ofPL20:
 10880                           	opt stack 0
 10881  001FCE                     PL26:
 10882                           	opt stack 24
 10883  001FCE  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10884  001FD0  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10885  001FD2  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10886  001FD6  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10887  001FDA  500E               	movf	__RegsToCANID@Value,w,c
 10888  001FDC  6EE1               	movwf	fsr1l,c
 10889  001FDE  6AE2               	clrf	fsr1h,c
 10890  001FE0  0012               	return	
 10891  001FE2                     __end_ofPL26:
 10892                           	opt stack 0
 10893  001FE2                     PL28:
 10894                           	opt stack 24
 10895  001FE2  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10896  001FE6  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10897  001FEA  50E7               	movf	indf1,w,c
 10898  001FEC  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10899  001FEE  0E05               	movlw	5
 10900  001FF0  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10901  001FF2  0C05               	retlw	5
 10902  001FF4                     __end_ofPL28:
 10903                           	opt stack 0
 10904                           tblptru	equ	0xFF8
 10905                           tblptrh	equ	0xFF7
 10906                           tblptrl	equ	0xFF6
 10907                           tablat	equ	0xFF5
 10908                           prodh	equ	0xFF4
 10909                           prodl	equ	0xFF3
 10910                           intcon	equ	0xFF2
 10911                           postinc0	equ	0xFEE
 10912                           wreg	equ	0xFE8
 10913                           indf1	equ	0xFE7
 10914                           fsr1h	equ	0xFE2
 10915                           fsr1l	equ	0xFE1
 10916                           indf2	equ	0xFDF
 10917                           postinc2	equ	0xFDE
 10918                           postdec2	equ	0xFDD
 10919                           plusw2	equ	0xFDB
 10920                           fsr2h	equ	0xFDA
 10921                           fsr2l	equ	0xFD9
 10922                           status	equ	0xFD8
 10923                           
 10924 ;; *************** function __ECANPointBuffer *****************
 10925 ;; Defined at:
 10926 ;;		line 1207 in file "../ECAN.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;  b               1    wreg     unsigned char 
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;  b               1   10[COMRAM] unsigned char 
 10931 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10932 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10933 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10934 ;; Return value:  Size  Location     Type
 10935 ;;                  2    7[COMRAM] PTR unsigned char 
 10936 ;; Registers used:
 10937 ;;		wreg, status,2, status,0
 10938 ;; Tracked objects:
 10939 ;;		On entry : F/0
 10940 ;;		On exit  : 0/0
 10941 ;;		Unchanged: 0/0
 10942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10943 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10944 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10946 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10947 ;;Total ram usage:        6 bytes
 10948 ;; Hardware stack levels used:    1
 10949 ;; Hardware stack levels required when called:    2
 10950 ;; This function calls:
 10951 ;;		Nothing
 10952 ;; This function is called by:
 10953 ;;		_ECANReceiveMessage
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           	psect	text59
 10958  0028FE                     __ptext59:
 10959                           	opt stack 0
 10960  0028FE                     __ECANPointBuffer:
 10961                           	opt stack 24
 10962                           
 10963                           ;incstack = 0
 10964                           ;incstack = 0
 10965                           ;__ECANPointBuffer@b stored from wreg
 10966  0028FE  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;ECAN.c: 1208: BYTE* pt;
 10970                           ;ECAN.c: 1210: switch(b)
 10971  002902  D028               	goto	l5400
 10972  002904                     l5382:
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10976  002904  0E0F               	movlw	15	;volatile
 10977  002906  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10978  002908  0E60               	movlw	96	;volatile
 10979  00290A  D022               	goto	L42
 10980  00290C                     l5384:
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10984  00290C  010F               	movlb	15	; () banked
 10985  00290E  0E0F               	movlw	15	;volatile
 10986  002910  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10987  002912  0E30               	movlw	48	;volatile
 10988  002914  D01D               	goto	L42
 10989  002916                     l5386:
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10993  002916  010E               	movlb	14	; () banked
 10994  002918  0E0E               	movlw	14	;volatile
 10995  00291A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10996  00291C  0E80               	movlw	128	;volatile
 10997  00291E  D018               	goto	L42
 10998  002920                     l5388:
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 11002  002920  010E               	movlb	14	; () banked
 11003  002922  0E0E               	movlw	14	;volatile
 11004  002924  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11005  002926  0E90               	movlw	144	;volatile
 11006  002928  D013               	goto	L42
 11007  00292A                     l5390:
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 11011  00292A  010E               	movlb	14	; () banked
 11012  00292C  0E0E               	movlw	14	;volatile
 11013  00292E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11014  002930  0EA0               	movlw	160	;volatile
 11015  002932  D00E               	goto	L42
 11016  002934                     l5392:
 11017                           
 11018                           ; BSR set to: 0
 11019                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 11020  002934  010E               	movlb	14	; () banked
 11021  002936  0E0E               	movlw	14	;volatile
 11022  002938  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11023  00293A  0EB0               	movlw	176	;volatile
 11024  00293C  D009               	goto	L42
 11025  00293E                     l5394:
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 11029  00293E  010E               	movlb	14	; () banked
 11030  002940  0E0E               	movlw	14	;volatile
 11031  002942  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11032  002944  0EC0               	movlw	192	;volatile
 11033  002946  D004               	goto	L42
 11034  002948                     l5396:
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 11038  002948  010E               	movlb	14	; () banked
 11039  00294A  0E0E               	movlw	14	;volatile
 11040  00294C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11041  00294E  0ED0               	movlw	208	;volatile
 11042  002950                     L42:
 11043  002950  6E0C               	movwf	__ECANPointBuffer@pt,c
 11044                           
 11045                           ;ECAN.c: 1235: break;
 11046  002952  D00F               	goto	l720
 11047  002954                     l5400:
 11048                           
 11049                           ; BSR set to: 0
 11050  002954  500B               	movf	__ECANPointBuffer@b,w,c
 11051                           
 11052                           ; Switch size 1, requested type "space"
 11053                           ; Number of cases is 7, Range of values is 0 to 6
 11054                           ; switch strategies available:
 11055                           ; Name         Instructions Cycles
 11056                           ; simple_byte           22    12 (average)
 11057                           ;	Chosen strategy is simple_byte
 11058  002956  E0D6               	bz	l5382
 11059  002958  0A01               	xorlw	1	; case 1
 11060  00295A  E0D8               	bz	l5384
 11061  00295C  0A03               	xorlw	3	; case 2
 11062  00295E  E0DB               	bz	l5386
 11063  002960  0A01               	xorlw	1	; case 3
 11064  002962  E0DE               	bz	l5388
 11065  002964  0A07               	xorlw	7	; case 4
 11066  002966  E0E1               	bz	l5390
 11067  002968  0A01               	xorlw	1	; case 5
 11068  00296A  E0E4               	bz	l5392
 11069  00296C  0A03               	xorlw	3	; case 6
 11070  00296E  E0E7               	bz	l5394
 11071  002970  D7EB               	goto	l5396
 11072  002972                     l720:
 11073                           
 11074                           ;ECAN.c: 1237: return (pt);
 11075  002972  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 11076  002976  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 11077  00297A  0012               	return	
 11078  00297C                     __end_of__ECANPointBuffer:
 11079                           	opt stack 0
 11080                           tblptru	equ	0xFF8
 11081                           tblptrh	equ	0xFF7
 11082                           tblptrl	equ	0xFF6
 11083                           tablat	equ	0xFF5
 11084                           prodh	equ	0xFF4
 11085                           prodl	equ	0xFF3
 11086                           intcon	equ	0xFF2
 11087                           postinc0	equ	0xFEE
 11088                           wreg	equ	0xFE8
 11089                           indf1	equ	0xFE7
 11090                           fsr1h	equ	0xFE2
 11091                           fsr1l	equ	0xFE1
 11092                           indf2	equ	0xFDF
 11093                           postinc2	equ	0xFDE
 11094                           postdec2	equ	0xFDD
 11095                           plusw2	equ	0xFDB
 11096                           fsr2h	equ	0xFDA
 11097                           fsr2l	equ	0xFD9
 11098                           status	equ	0xFD8
 11099                           
 11100 ;; *************** function _vscp_check_pstorage *****************
 11101 ;; Defined at:
 11102 ;;		line 168 in file "../../vscp_firmware/common/vscp_firmware.c"
 11103 ;; Parameters:    Size  Location     Type
 11104 ;;		None
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;		None
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  1    wreg      unsigned char 
 11109 ;; Registers used:
 11110 ;;		wreg, status,2, status,0, cstack
 11111 ;; Tracked objects:
 11112 ;;		On entry : E/E
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11120 ;;Total ram usage:        0 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; Hardware stack levels required when called:    4
 11123 ;; This function calls:
 11124 ;;		_vscp_writeNicknamePermanent
 11125 ;;		_vscp_getSegmentCRC
 11126 ;;		_vscp_setSegmentCRC
 11127 ;;		_vscp_setControlByte
 11128 ;; This function is called by:
 11129 ;;		_main
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           	psect	text60
 11134  002DD6                     __ptext60:
 11135                           	opt stack 0
 11136  002DD6                     _vscp_check_pstorage:
 11137                           	opt stack 26
 11138                           
 11139                           ;vscp_firmware.c: 171: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 11140                           
 11141                           ;incstack = 0
 11142                           ;incstack = 0
 11143  002DD6  ECF8  F017         	call	_vscp_getSegmentCRC	;wreg free
 11144  002DDA  0BC0               	andlw	192
 11145  002DDC  0A40               	xorlw	64
 11146  002DDE  E101               	bnz	l5842
 11147                           
 11148                           ;vscp_firmware.c: 172: return !0;
 11149  002DE0  0C01               	retlw	1
 11150  002DE2                     l5842:
 11151                           
 11152                           ;vscp_firmware.c: 173: }
 11153                           ;vscp_firmware.c: 176: vscp_writeNicknamePermanent(0xff);
 11154  002DE2  0EFF               	movlw	255
 11155  002DE4  EC9B  F017         	call	_vscp_writeNicknamePermanent
 11156                           
 11157                           ;vscp_firmware.c: 179: vscp_setSegmentCRC(0x00);
 11158  002DE8  0E00               	movlw	0
 11159  002DEA  EC90  F017         	call	_vscp_setSegmentCRC
 11160                           
 11161                           ;vscp_firmware.c: 183: vscp_setControlByte(0xA0);
 11162  002DEE  0EA0               	movlw	160
 11163  002DF0  EC85  F017         	call	_vscp_setControlByte
 11164                           
 11165                           ;vscp_firmware.c: 185: return 0;
 11166  002DF4  0C00               	retlw	0
 11167  002DF6                     __end_of_vscp_check_pstorage:
 11168                           	opt stack 0
 11169                           tblptru	equ	0xFF8
 11170                           tblptrh	equ	0xFF7
 11171                           tblptrl	equ	0xFF6
 11172                           tablat	equ	0xFF5
 11173                           prodh	equ	0xFF4
 11174                           prodl	equ	0xFF3
 11175                           intcon	equ	0xFF2
 11176                           postinc0	equ	0xFEE
 11177                           wreg	equ	0xFE8
 11178                           indf1	equ	0xFE7
 11179                           fsr1h	equ	0xFE2
 11180                           fsr1l	equ	0xFE1
 11181                           indf2	equ	0xFDF
 11182                           postinc2	equ	0xFDE
 11183                           postdec2	equ	0xFDD
 11184                           plusw2	equ	0xFDB
 11185                           fsr2h	equ	0xFDA
 11186                           fsr2l	equ	0xFD9
 11187                           status	equ	0xFD8
 11188                           
 11189 ;; *************** function _vscp_setControlByte *****************
 11190 ;; Defined at:
 11191 ;;		line 1337 in file "../main.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;  ctrl            1    wreg     unsigned char 
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;  ctrl            1   11[COMRAM] unsigned char 
 11196 ;; Return value:  Size  Location     Type
 11197 ;;		None               void
 11198 ;; Registers used:
 11199 ;;		wreg, status,2, status,0, cstack
 11200 ;; Tracked objects:
 11201 ;;		On entry : 0/E
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11209 ;;Total ram usage:        1 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    3
 11212 ;; This function calls:
 11213 ;;		_Busy_eep
 11214 ;;		_Write_b_eep
 11215 ;; This function is called by:
 11216 ;;		_vscp_check_pstorage
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           	psect	text61
 11221  002F0A                     __ptext61:
 11222                           	opt stack 0
 11223  002F0A                     _vscp_setControlByte:
 11224                           	opt stack 26
 11225                           
 11226                           ;incstack = 0
 11227                           ;incstack = 0
 11228                           ;vscp_setControlByte@ctrl stored from wreg
 11229  002F0A  CFE8 F00C          	movff	wreg,vscp_setControlByte@ctrl
 11230                           
 11231                           ;main.c: 1338: (Busy_eep(), Write_b_eep(0x03,ctrl));
 11232  002F0E  EC01  F018         	call	_Busy_eep	;wreg free
 11233  002F12  6A09               	clrf	?_Write_b_eep+1,c
 11234  002F14  0E03               	movlw	3
 11235  002F16  6E08               	movwf	?_Write_b_eep,c
 11236  002F18  C00C  F00A         	movff	vscp_setControlByte@ctrl,?_Write_b_eep+2
 11237  002F1C  EFAD  F015         	goto	_Write_b_eep	;wreg free
 11238  002F20                     __end_of_vscp_setControlByte:
 11239                           	opt stack 0
 11240                           tblptru	equ	0xFF8
 11241                           tblptrh	equ	0xFF7
 11242                           tblptrl	equ	0xFF6
 11243                           tablat	equ	0xFF5
 11244                           prodh	equ	0xFF4
 11245                           prodl	equ	0xFF3
 11246                           intcon	equ	0xFF2
 11247                           postinc0	equ	0xFEE
 11248                           wreg	equ	0xFE8
 11249                           indf1	equ	0xFE7
 11250                           fsr1h	equ	0xFE2
 11251                           fsr1l	equ	0xFE1
 11252                           indf2	equ	0xFDF
 11253                           postinc2	equ	0xFDE
 11254                           postdec2	equ	0xFDD
 11255                           plusw2	equ	0xFDB
 11256                           fsr2h	equ	0xFDA
 11257                           fsr2l	equ	0xFD9
 11258                           status	equ	0xFD8
 11259                           
 11260 ;; *************** function _vscp_setSegmentCRC *****************
 11261 ;; Defined at:
 11262 ;;		line 1328 in file "../main.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;  crc             1    wreg     unsigned char 
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  crc             1   11[COMRAM] unsigned char 
 11267 ;; Return value:  Size  Location     Type
 11268 ;;		None               void
 11269 ;; Registers used:
 11270 ;;		wreg, status,2, status,0, cstack
 11271 ;; Tracked objects:
 11272 ;;		On entry : 0/0
 11273 ;;		On exit  : 0/0
 11274 ;;		Unchanged: 0/0
 11275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11279 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11280 ;;Total ram usage:        1 bytes
 11281 ;; Hardware stack levels used:    1
 11282 ;; Hardware stack levels required when called:    3
 11283 ;; This function calls:
 11284 ;;		_Busy_eep
 11285 ;;		_Write_b_eep
 11286 ;; This function is called by:
 11287 ;;		_vscp_check_pstorage
 11288 ;;		_vscp_handleProbeState
 11289 ;;		_vscp_handleHeartbeat
 11290 ;;		_vscp_handleSetNickname
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           	psect	text62
 11295  002F20                     __ptext62:
 11296                           	opt stack 0
 11297  002F20                     _vscp_setSegmentCRC:
 11298                           	opt stack 25
 11299                           
 11300                           ;incstack = 0
 11301                           ;incstack = 0
 11302                           ;vscp_setSegmentCRC@crc stored from wreg
 11303  002F20  CFE8 F00C          	movff	wreg,vscp_setSegmentCRC@crc
 11304                           
 11305                           ;main.c: 1329: (Busy_eep(), Write_b_eep(0x02,crc));
 11306  002F24  EC01  F018         	call	_Busy_eep	;wreg free
 11307  002F28  6A09               	clrf	?_Write_b_eep+1,c
 11308  002F2A  0E02               	movlw	2
 11309  002F2C  6E08               	movwf	?_Write_b_eep,c
 11310  002F2E  C00C  F00A         	movff	vscp_setSegmentCRC@crc,?_Write_b_eep+2
 11311  002F32  EFAD  F015         	goto	_Write_b_eep	;wreg free
 11312  002F36                     __end_of_vscp_setSegmentCRC:
 11313                           	opt stack 0
 11314                           tblptru	equ	0xFF8
 11315                           tblptrh	equ	0xFF7
 11316                           tblptrl	equ	0xFF6
 11317                           tablat	equ	0xFF5
 11318                           prodh	equ	0xFF4
 11319                           prodl	equ	0xFF3
 11320                           intcon	equ	0xFF2
 11321                           postinc0	equ	0xFEE
 11322                           wreg	equ	0xFE8
 11323                           indf1	equ	0xFE7
 11324                           fsr1h	equ	0xFE2
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           plusw2	equ	0xFDB
 11330                           fsr2h	equ	0xFDA
 11331                           fsr2l	equ	0xFD9
 11332                           status	equ	0xFD8
 11333                           
 11334 ;; *************** function _vscp_getSegmentCRC *****************
 11335 ;; Defined at:
 11336 ;;		line 1319 in file "../main.c"
 11337 ;; Parameters:    Size  Location     Type
 11338 ;;		None
 11339 ;; Auto vars:     Size  Location     Type
 11340 ;;		None
 11341 ;; Return value:  Size  Location     Type
 11342 ;;                  1    wreg      unsigned char 
 11343 ;; Registers used:
 11344 ;;		wreg, status,2, status,0, cstack
 11345 ;; Tracked objects:
 11346 ;;		On entry : 0/0
 11347 ;;		On exit  : 0/0
 11348 ;;		Unchanged: 0/0
 11349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11354 ;;Total ram usage:        0 bytes
 11355 ;; Hardware stack levels used:    1
 11356 ;; Hardware stack levels required when called:    3
 11357 ;; This function calls:
 11358 ;;		_Read_b_eep
 11359 ;; This function is called by:
 11360 ;;		_vscp_check_pstorage
 11361 ;;		_vscp_handleHeartbeat
 11362 ;; This function uses a non-reentrant model
 11363 ;;
 11364                           
 11365                           	psect	text63
 11366  002FF0                     __ptext63:
 11367                           	opt stack 0
 11368  002FF0                     _vscp_getSegmentCRC:
 11369                           	opt stack 25
 11370                           
 11371                           ;main.c: 1320: return Read_b_eep(0x02);
 11372                           
 11373                           ;incstack = 0
 11374                           ;incstack = 0
 11375  002FF0  6A09               	clrf	?_Read_b_eep+1,c
 11376  002FF2  0E02               	movlw	2
 11377  002FF4  6E08               	movwf	?_Read_b_eep,c
 11378  002FF6  EF62  F017         	goto	_Read_b_eep	;wreg free
 11379  002FFA                     __end_of_vscp_getSegmentCRC:
 11380                           	opt stack 0
 11381                           tblptru	equ	0xFF8
 11382                           tblptrh	equ	0xFF7
 11383                           tblptrl	equ	0xFF6
 11384                           tablat	equ	0xFF5
 11385                           prodh	equ	0xFF4
 11386                           prodl	equ	0xFF3
 11387                           intcon	equ	0xFF2
 11388                           postinc0	equ	0xFEE
 11389                           wreg	equ	0xFE8
 11390                           indf1	equ	0xFE7
 11391                           fsr1h	equ	0xFE2
 11392                           fsr1l	equ	0xFE1
 11393                           indf2	equ	0xFDF
 11394                           postinc2	equ	0xFDE
 11395                           postdec2	equ	0xFDD
 11396                           plusw2	equ	0xFDB
 11397                           fsr2h	equ	0xFDA
 11398                           fsr2l	equ	0xFD9
 11399                           status	equ	0xFD8
 11400                           
 11401 ;; *************** function _Read_b_eep *****************
 11402 ;; Defined at:
 11403 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;  badd            2    7[COMRAM] unsigned int 
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;		None
 11408 ;; Return value:  Size  Location     Type
 11409 ;;                  1    wreg      unsigned char 
 11410 ;; Registers used:
 11411 ;;		wreg, status,2, status,0
 11412 ;; Tracked objects:
 11413 ;;		On entry : 0/0
 11414 ;;		On exit  : 0/0
 11415 ;;		Unchanged: 0/0
 11416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11421 ;;Total ram usage:        2 bytes
 11422 ;; Hardware stack levels used:    1
 11423 ;; Hardware stack levels required when called:    2
 11424 ;; This function calls:
 11425 ;;		Nothing
 11426 ;; This function is called by:
 11427 ;;		_main
 11428 ;;		_vscp_readNicknamePermanent
 11429 ;;		_vscp_getZone
 11430 ;;		_vscp_getSubzone
 11431 ;;		_vscp_readAppReg
 11432 ;;		_vscp_writeAppReg
 11433 ;;		_SendInformationEvent
 11434 ;;		_doDM
 11435 ;;		_actionSet
 11436 ;;		_actionClr
 11437 ;;		_vscp_getGUID
 11438 ;;		_vscp_getUserID
 11439 ;;		_vscp_getManufacturerId
 11440 ;;		_vscp_getSegmentCRC
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           	psect	text64
 11445  002EC4                     __ptext64:
 11446                           	opt stack 0
 11447  002EC4                     _Read_b_eep:
 11448                           	opt stack 26
 11449                           
 11450                           ;incstack = 0
 11451                           ;incstack = 0
 11452  002EC4  5009               	movf	Read_b_eep@badd+1,w,c
 11453  002EC6  0B03               	andlw	3
 11454  002EC8  6E75               	movwf	3957,c	;volatile
 11455  002ECA  C008  FF74         	movff	Read_b_eep@badd,3956	;volatile
 11456  002ECE  9C7F               	bcf	3967,6,c	;volatile
 11457  002ED0  9E7F               	bcf	3967,7,c	;volatile
 11458  002ED2  807F               	bsf	3967,0,c	;volatile
 11459  002ED4  F000               	nop		;# 
 11460  002ED6  F000               	nop		;# 
 11461  002ED8  5073               	movf	3955,w,c	;volatile
 11462  002EDA  0012               	return	
 11463  002EDC                     __end_of_Read_b_eep:
 11464                           	opt stack 0
 11465                           tblptru	equ	0xFF8
 11466                           tblptrh	equ	0xFF7
 11467                           tblptrl	equ	0xFF6
 11468                           tablat	equ	0xFF5
 11469                           prodh	equ	0xFF4
 11470                           prodl	equ	0xFF3
 11471                           intcon	equ	0xFF2
 11472                           postinc0	equ	0xFEE
 11473                           wreg	equ	0xFE8
 11474                           indf1	equ	0xFE7
 11475                           fsr1h	equ	0xFE2
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           postdec2	equ	0xFDD
 11480                           plusw2	equ	0xFDB
 11481                           fsr2h	equ	0xFDA
 11482                           fsr2l	equ	0xFD9
 11483                           status	equ	0xFD8
 11484                           
 11485 ;; *************** function _vscp_writeNicknamePermanent *****************
 11486 ;; Defined at:
 11487 ;;		line 545 in file "../main.c"
 11488 ;; Parameters:    Size  Location     Type
 11489 ;;  nickname        1    wreg     unsigned char 
 11490 ;; Auto vars:     Size  Location     Type
 11491 ;;  nickname        1   11[COMRAM] unsigned char 
 11492 ;; Return value:  Size  Location     Type
 11493 ;;		None               void
 11494 ;; Registers used:
 11495 ;;		wreg, status,2, status,0, cstack
 11496 ;; Tracked objects:
 11497 ;;		On entry : 0/0
 11498 ;;		On exit  : 0/0
 11499 ;;		Unchanged: 0/0
 11500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11505 ;;Total ram usage:        1 bytes
 11506 ;; Hardware stack levels used:    1
 11507 ;; Hardware stack levels required when called:    3
 11508 ;; This function calls:
 11509 ;;		_Busy_eep
 11510 ;;		_Write_b_eep
 11511 ;; This function is called by:
 11512 ;;		_vscp_check_pstorage
 11513 ;;		_vscp_handleProbeState
 11514 ;;		_vscp_handleHeartbeat
 11515 ;;		_vscp_handleSetNickname
 11516 ;;		_vscp_handleDropNickname
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           	psect	text65
 11521  002F36                     __ptext65:
 11522                           	opt stack 0
 11523  002F36                     _vscp_writeNicknamePermanent:
 11524                           	opt stack 25
 11525                           
 11526                           ;incstack = 0
 11527                           ;incstack = 0
 11528                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11529  002F36  CFE8 F00C          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11530                           
 11531                           ;main.c: 546: (Busy_eep(), Write_b_eep(0x01,nickname));
 11532  002F3A  EC01  F018         	call	_Busy_eep	;wreg free
 11533  002F3E  6A09               	clrf	?_Write_b_eep+1,c
 11534  002F40  0E01               	movlw	1
 11535  002F42  6E08               	movwf	?_Write_b_eep,c
 11536  002F44  C00C  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_Write_b_eep+2
 11537  002F48  EFAD  F015         	goto	_Write_b_eep	;wreg free
 11538  002F4C                     __end_of_vscp_writeNicknamePermanent:
 11539                           	opt stack 0
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           postinc0	equ	0xFEE
 11548                           wreg	equ	0xFE8
 11549                           indf1	equ	0xFE7
 11550                           fsr1h	equ	0xFE2
 11551                           fsr1l	equ	0xFE1
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           plusw2	equ	0xFDB
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function _Write_b_eep *****************
 11561 ;; Defined at:
 11562 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  badd            2    7[COMRAM] unsigned int 
 11565 ;;  bdat            1    9[COMRAM] unsigned char 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  GIE_BIT_VAL     1   10[COMRAM] unsigned char 
 11568 ;; Return value:  Size  Location     Type
 11569 ;;		None               void
 11570 ;; Registers used:
 11571 ;;		wreg, status,2, status,0
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11577 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11580 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11581 ;;Total ram usage:        4 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    2
 11584 ;; This function calls:
 11585 ;;		Nothing
 11586 ;; This function is called by:
 11587 ;;		_main
 11588 ;;		_init_app_eeprom
 11589 ;;		_vscp_setGUID
 11590 ;;		_vscp_setManufacturerId
 11591 ;;		_vscp_writeNicknamePermanent
 11592 ;;		_vscp_writeAppReg
 11593 ;;		_vscp_setUserID
 11594 ;;		_vscp_setSegmentCRC
 11595 ;;		_vscp_setControlByte
 11596 ;;		_vscp_goBootloaderMode
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           	psect	text66
 11601  002B5A                     __ptext66:
 11602                           	opt stack 0
 11603  002B5A                     _Write_b_eep:
 11604                           	opt stack 24
 11605                           
 11606                           ;incstack = 0
 11607                           ;incstack = 0
 11608  002B5A  5009               	movf	Write_b_eep@badd+1,w,c
 11609  002B5C  0B03               	andlw	3
 11610  002B5E  6E75               	movwf	3957,c	;volatile
 11611  002B60  C008  FF74         	movff	Write_b_eep@badd,3956	;volatile
 11612  002B64  C00A  FF73         	movff	Write_b_eep@bdat,3955	;volatile
 11613  002B68  9E7F               	bcf	3967,7,c	;volatile
 11614  002B6A  9C7F               	bcf	3967,6,c	;volatile
 11615  002B6C  847F               	bsf	3967,2,c	;volatile
 11616  002B6E  0E00               	movlw	0
 11617  002B70  BEF2               	btfsc	intcon,7,c	;volatile
 11618  002B72  0E01               	movlw	1
 11619  002B74  6E0B               	movwf	Write_b_eep@GIE_BIT_VAL,c
 11620  002B76  9EF2               	bcf	intcon,7,c	;volatile
 11621  002B78  0E55               	movlw	85
 11622  002B7A  6E7E               	movwf	3966,c	;volatile
 11623  002B7C  0EAA               	movlw	170
 11624  002B7E  6E7E               	movwf	3966,c	;volatile
 11625  002B80  827F               	bsf	3967,1,c	;volatile
 11626  002B82                     l1119:
 11627  002B82  B27F               	btfsc	3967,1,c	;volatile
 11628  002B84  D7FE               	goto	l1119
 11629  002B86  B00B               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 11630  002B88  D002               	bra	u3145
 11631  002B8A  9EF2               	bcf	intcon,7,c	;volatile
 11632  002B8C  D001               	bra	u3146
 11633  002B8E                     u3145:
 11634  002B8E  8EF2               	bsf	intcon,7,c	;volatile
 11635  002B90                     u3146:
 11636  002B90  947F               	bcf	3967,2,c	;volatile
 11637  002B92  0012               	return	
 11638  002B94                     __end_of_Write_b_eep:
 11639                           	opt stack 0
 11640                           tblptru	equ	0xFF8
 11641                           tblptrh	equ	0xFF7
 11642                           tblptrl	equ	0xFF6
 11643                           tablat	equ	0xFF5
 11644                           prodh	equ	0xFF4
 11645                           prodl	equ	0xFF3
 11646                           intcon	equ	0xFF2
 11647                           postinc0	equ	0xFEE
 11648                           wreg	equ	0xFE8
 11649                           indf1	equ	0xFE7
 11650                           fsr1h	equ	0xFE2
 11651                           fsr1l	equ	0xFE1
 11652                           indf2	equ	0xFDF
 11653                           postinc2	equ	0xFDE
 11654                           postdec2	equ	0xFDD
 11655                           plusw2	equ	0xFDB
 11656                           fsr2h	equ	0xFDA
 11657                           fsr2l	equ	0xFD9
 11658                           status	equ	0xFD8
 11659                           
 11660 ;; *************** function _Busy_eep *****************
 11661 ;; Defined at:
 11662 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;		None               void
 11669 ;; Registers used:
 11670 ;;		None
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11680 ;;Total ram usage:        0 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    2
 11683 ;; This function calls:
 11684 ;;		Nothing
 11685 ;; This function is called by:
 11686 ;;		_main
 11687 ;;		_init_app_eeprom
 11688 ;;		_vscp_setGUID
 11689 ;;		_vscp_setManufacturerId
 11690 ;;		_vscp_writeNicknamePermanent
 11691 ;;		_vscp_writeAppReg
 11692 ;;		_vscp_setUserID
 11693 ;;		_vscp_setSegmentCRC
 11694 ;;		_vscp_setControlByte
 11695 ;;		_vscp_goBootloaderMode
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699                           	psect	text67
 11700  003002                     __ptext67:
 11701                           	opt stack 0
 11702  003002                     _Busy_eep:
 11703                           	opt stack 24
 11704  003002                     l1090:
 11705  003002  A27F               	btfss	3967,1,c	;volatile
 11706  003004  0012               	return	
 11707  003006  D7FD               	goto	l1090
 11708  003008                     __end_of_Busy_eep:
 11709                           	opt stack 0
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           indf1	equ	0xFE7
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           indf2	equ	0xFDF
 11723                           postinc2	equ	0xFDE
 11724                           postdec2	equ	0xFDD
 11725                           plusw2	equ	0xFDB
 11726                           fsr2h	equ	0xFDA
 11727                           fsr2l	equ	0xFD9
 11728                           status	equ	0xFD8
 11729                           
 11730 ;; *************** function _init *****************
 11731 ;; Defined at:
 11732 ;;		line 302 in file "../main.c"
 11733 ;; Parameters:    Size  Location     Type
 11734 ;;		None
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;		None
 11737 ;; Return value:  Size  Location     Type
 11738 ;;		None               void
 11739 ;; Registers used:
 11740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11741 ;; Tracked objects:
 11742 ;;		On entry : 0/0
 11743 ;;		On exit  : E/E
 11744 ;;		Unchanged: 0/0
 11745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11750 ;;Total ram usage:        0 bytes
 11751 ;; Hardware stack levels used:    1
 11752 ;; Hardware stack levels required when called:    4
 11753 ;; This function calls:
 11754 ;;		_WriteTimer0
 11755 ;;		_init_app_ram
 11756 ;;		_OpenTimer0
 11757 ;;		_ECANInitialize
 11758 ;; This function is called by:
 11759 ;;		_main
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text68
 11764  002B94                     __ptext68:
 11765                           	opt stack 0
 11766  002B94                     _init:
 11767                           	opt stack 26
 11768                           
 11769                           ;main.c: 306: init_app_ram();
 11770                           
 11771                           ;incstack = 0
 11772                           ;incstack = 0
 11773  002B94  ECC4  F017         	call	_init_app_ram	;wreg free
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;main.c: 311: ANCON0 = 0;
 11777  002B98  010F               	movlb	15	; () banked
 11778  002B9A  6B5D               	clrf	93,b	;volatile
 11779                           
 11780                           ; BSR set to: 15
 11781                           ;main.c: 312: ANCON1 = 0;
 11782  002B9C  6B5C               	clrf	92,b	;volatile
 11783                           
 11784                           ; BSR set to: 15
 11785                           ;main.c: 321: TRISA = 0x00;
 11786  002B9E  6A92               	clrf	3986,c	;volatile
 11787                           
 11788                           ; BSR set to: 15
 11789                           ;main.c: 322: PORTA = 0x00;
 11790  002BA0  6A80               	clrf	3968,c	;volatile
 11791                           
 11792                           ; BSR set to: 15
 11793                           ;main.c: 334: TRISB = 0b00001100;
 11794  002BA2  0E0C               	movlw	12
 11795  002BA4  6E93               	movwf	3987,c	;volatile
 11796                           
 11797                           ; BSR set to: 15
 11798                           ;main.c: 335: PORTB = 0x00;
 11799  002BA6  6A81               	clrf	3969,c	;volatile
 11800                           
 11801                           ; BSR set to: 15
 11802                           ;main.c: 345: TRISC = 0b00000001;
 11803  002BA8  0E01               	movlw	1
 11804  002BAA  6E94               	movwf	3988,c	;volatile
 11805                           
 11806                           ; BSR set to: 15
 11807                           ;main.c: 346: PORTC = 0x00;
 11808  002BAC  6A82               	clrf	3970,c	;volatile
 11809                           
 11810                           ; BSR set to: 15
 11811                           ;main.c: 372: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11812  002BAE  0E92               	movlw	146
 11813  002BB0  EC37  F017         	call	_OpenTimer0
 11814                           
 11815                           ; BSR set to: 15
 11816                           ;main.c: 373: WriteTimer0( 0xfb1d );
 11817  002BB4  0EFB               	movlw	251
 11818  002BB6  6E09               	movwf	?_WriteTimer0+1,c
 11819  002BB8  0E1D               	movlw	29
 11820  002BBA  6E08               	movwf	?_WriteTimer0,c
 11821  002BBC  ECCD  F017         	call	_WriteTimer0	;wreg free
 11822                           
 11823                           ; BSR set to: 15
 11824                           ;main.c: 376: ECANInitialize();
 11825  002BC0  EC3A  F014         	call	_ECANInitialize	;wreg free
 11826                           
 11827                           ;main.c: 397: INTCONbits.PEIE = 1;
 11828  002BC4  8CF2               	bsf	intcon,6,c	;volatile
 11829                           
 11830                           ;main.c: 400: INTCONbits.GIE = 1;
 11831  002BC6  8EF2               	bsf	intcon,7,c	;volatile
 11832  002BC8  0012               	return	
 11833  002BCA                     __end_of_init:
 11834                           	opt stack 0
 11835                           tblptru	equ	0xFF8
 11836                           tblptrh	equ	0xFF7
 11837                           tblptrl	equ	0xFF6
 11838                           tablat	equ	0xFF5
 11839                           prodh	equ	0xFF4
 11840                           prodl	equ	0xFF3
 11841                           intcon	equ	0xFF2
 11842                           postinc0	equ	0xFEE
 11843                           wreg	equ	0xFE8
 11844                           indf1	equ	0xFE7
 11845                           fsr1h	equ	0xFE2
 11846                           fsr1l	equ	0xFE1
 11847                           indf2	equ	0xFDF
 11848                           postinc2	equ	0xFDE
 11849                           postdec2	equ	0xFDD
 11850                           plusw2	equ	0xFDB
 11851                           fsr2h	equ	0xFDA
 11852                           fsr2l	equ	0xFD9
 11853                           status	equ	0xFD8
 11854                           
 11855 ;; *************** function _ECANInitialize *****************
 11856 ;; Defined at:
 11857 ;;		line 168 in file "../ECAN.c"
 11858 ;; Parameters:    Size  Location     Type
 11859 ;;		None
 11860 ;; Auto vars:     Size  Location     Type
 11861 ;;		None
 11862 ;; Return value:  Size  Location     Type
 11863 ;;		None               void
 11864 ;; Registers used:
 11865 ;;		wreg, status,2, status,0, cstack
 11866 ;; Tracked objects:
 11867 ;;		On entry : F/F
 11868 ;;		On exit  : E/E
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11875 ;;Total ram usage:        0 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    3
 11878 ;; This function calls:
 11879 ;;		_ECANSetOperationMode
 11880 ;; This function is called by:
 11881 ;;		_init
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text69
 11886  002874                     __ptext69:
 11887                           	opt stack 0
 11888  002874                     _ECANInitialize:
 11889                           	opt stack 26
 11890                           
 11891                           ; BSR set to: 15
 11892                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11893                           
 11894                           ;incstack = 0
 11895                           ;incstack = 0
 11896  002874  0E80               	movlw	128
 11897  002876  EC6E  F017         	call	_ECANSetOperationMode
 11898                           
 11899                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11900  00287A  0E09               	movlw	9
 11901  00287C  010E               	movlb	14	; () banked
 11902  00287E  6F43               	movwf	67,b	;volatile
 11903                           
 11904                           ; BSR set to: 14
 11905                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11906  002880  0EFC               	movlw	252
 11907  002882  6F44               	movwf	68,b	;volatile
 11908                           
 11909                           ; BSR set to: 14
 11910                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11911                           ;ECAN.c: 181: (0 << 6) |
 11912                           ;ECAN.c: 182: (2-1);
 11913  002884  0E01               	movlw	1
 11914  002886  6F45               	movwf	69,b	;volatile
 11915                           
 11916                           ; BSR set to: 14
 11917                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11918  002888  0E20               	movlw	32
 11919  00288A  6E70               	movwf	3952,c	;volatile
 11920                           
 11921                           ; BSR set to: 14
 11922                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11923  00288C  8E72               	bsf	3954,7,c	;volatile
 11924                           
 11925                           ; BSR set to: 14
 11926                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11927  00288E  9C72               	bcf	3954,6,c	;volatile
 11928                           
 11929                           ; BSR set to: 14
 11930                           ;ECAN.c: 205: RXB0CON = 0;
 11931  002890  6A60               	clrf	3936,c	;volatile
 11932                           
 11933                           ; BSR set to: 14
 11934                           ;ECAN.c: 211: RXB1CON = 0;
 11935  002892  010F               	movlb	15	; () banked
 11936  002894  6B30               	clrf	48,b	;volatile
 11937                           
 11938                           ; BSR set to: 15
 11939                           ;ECAN.c: 221: B0CON = 0;
 11940  002896  010E               	movlb	14	; () banked
 11941  002898  6B80               	clrf	128,b	;volatile
 11942                           
 11943                           ; BSR set to: 14
 11944                           ;ECAN.c: 231: B1CON = 0;
 11945  00289A  6B90               	clrf	144,b	;volatile
 11946                           
 11947                           ; BSR set to: 14
 11948                           ;ECAN.c: 241: B2CON = 0;
 11949  00289C  6BA0               	clrf	160,b	;volatile
 11950                           
 11951                           ; BSR set to: 14
 11952                           ;ECAN.c: 254: B3CON = 0 << 2;
 11953  00289E  6BB0               	clrf	176,b	;volatile
 11954                           
 11955                           ; BSR set to: 14
 11956                           ;ECAN.c: 264: B4CON = 0 << 2;
 11957  0028A0  6BC0               	clrf	192,b	;volatile
 11958                           
 11959                           ; BSR set to: 14
 11960                           ;ECAN.c: 274: B5CON = 0 << 2;
 11961  0028A2  6BD0               	clrf	208,b	;volatile
 11962                           
 11963                           ; BSR set to: 14
 11964                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11965  0028A4  0EE0               	movlw	224
 11966  0028A6  6F7D               	movwf	125,b	;volatile
 11967                           
 11968                           ; BSR set to: 14
 11969                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11970  0028A8  6BE0               	clrf	224,b	;volatile
 11971                           
 11972                           ; BSR set to: 14
 11973  0028AA  0E08               	movlw	8
 11974  0028AC  6FE1               	movwf	225,b	;volatile
 11975                           
 11976                           ; BSR set to: 14
 11977  0028AE  6BE2               	clrf	226,b	;volatile
 11978                           
 11979                           ; BSR set to: 14
 11980  0028B0  6BE3               	clrf	227,b	;volatile
 11981                           
 11982                           ; BSR set to: 14
 11983                           ;ECAN.c: 303: RXF1SIDH = (long)0x00000000L >> 21L;RXF1SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF1EIDH = (long)0x00000000L >> 8L;RXF1E
      +                          IDL = 0x00000000L;;
 11984  0028B2  6BE4               	clrf	228,b	;volatile
 11985                           
 11986                           ; BSR set to: 14
 11987  0028B4  0E08               	movlw	8
 11988  0028B6  6FE5               	movwf	229,b	;volatile
 11989                           
 11990                           ; BSR set to: 14
 11991  0028B8  6BE6               	clrf	230,b	;volatile
 11992                           
 11993                           ; BSR set to: 14
 11994  0028BA  6BE7               	clrf	231,b	;volatile
 11995                           
 11996                           ; BSR set to: 14
 11997                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11998  0028BC  0E03               	movlw	3
 11999  0028BE  6F46               	movwf	70,b	;volatile
 12000                           
 12001                           ; BSR set to: 14
 12002                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 12003  0028C0  6B47               	clrf	71,b	;volatile
 12004                           
 12005                           ; BSR set to: 14
 12006                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 12007  0028C2  6B71               	clrf	113,b	;volatile
 12008                           
 12009                           ; BSR set to: 14
 12010                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 12011  0028C4  0E11               	movlw	17
 12012  0028C6  6F72               	movwf	114,b	;volatile
 12013                           
 12014                           ; BSR set to: 14
 12015                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 12016  0028C8  6F73               	movwf	115,b	;volatile
 12017                           
 12018                           ; BSR set to: 14
 12019                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 12020  0028CA  6B74               	clrf	116,b	;volatile
 12021                           
 12022                           ; BSR set to: 14
 12023                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 12024  0028CC  6B75               	clrf	117,b	;volatile
 12025                           
 12026                           ; BSR set to: 14
 12027                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 12028  0028CE  6B76               	clrf	118,b	;volatile
 12029                           
 12030                           ; BSR set to: 14
 12031                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 12032  0028D0  6B77               	clrf	119,b	;volatile
 12033                           
 12034                           ; BSR set to: 14
 12035                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 12036  0028D2  6B78               	clrf	120,b	;volatile
 12037                           
 12038                           ; BSR set to: 14
 12039                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 12040  0028D4  0E54               	movlw	84
 12041  0028D6  6F79               	movwf	121,b	;volatile
 12042                           
 12043                           ; BSR set to: 14
 12044                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 12045  0028D8  0E05               	movlw	5
 12046  0028DA  6F7A               	movwf	122,b	;volatile
 12047                           
 12048                           ; BSR set to: 14
 12049                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 12050  0028DC  6B7B               	clrf	123,b	;volatile
 12051                           
 12052                           ; BSR set to: 14
 12053                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 12054  0028DE  6B7B               	clrf	123,b	;volatile
 12055                           
 12056                           ; BSR set to: 14
 12057                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 12058  0028E0  0E0F               	movlw	15
 12059  0028E2  6FF8               	movwf	248,b	;volatile
 12060                           
 12061                           ; BSR set to: 14
 12062  0028E4  0EE0               	movlw	224
 12063  0028E6  6FF9               	movwf	249,b	;volatile
 12064                           
 12065                           ; BSR set to: 14
 12066  0028E8  6BFA               	clrf	250,b	;volatile
 12067                           
 12068                           ; BSR set to: 14
 12069  0028EA  6BFB               	clrf	251,b	;volatile
 12070                           
 12071                           ; BSR set to: 14
 12072                           ;ECAN.c: 482: RXM0EXIDM = 1;
 12073  0028EC  87F9               	bsf	249,3,b	;volatile
 12074                           
 12075                           ; BSR set to: 14
 12076                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 12077  0028EE  6BFC               	clrf	252,b	;volatile
 12078                           
 12079                           ; BSR set to: 14
 12080  0028F0  6BFD               	clrf	253,b	;volatile
 12081                           
 12082                           ; BSR set to: 14
 12083  0028F2  6BFE               	clrf	254,b	;volatile
 12084                           
 12085                           ; BSR set to: 14
 12086  0028F4  6BFF               	clrf	255,b	;volatile
 12087                           
 12088                           ; BSR set to: 14
 12089                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 12090  0028F6  87FD               	bsf	253,3,b	;volatile
 12091                           
 12092                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 12093  0028F8  0E00               	movlw	0
 12094  0028FA  EF6E  F017         	goto	_ECANSetOperationMode
 12095  0028FE                     __end_of_ECANInitialize:
 12096                           	opt stack 0
 12097                           tblptru	equ	0xFF8
 12098                           tblptrh	equ	0xFF7
 12099                           tblptrl	equ	0xFF6
 12100                           tablat	equ	0xFF5
 12101                           prodh	equ	0xFF4
 12102                           prodl	equ	0xFF3
 12103                           intcon	equ	0xFF2
 12104                           postinc0	equ	0xFEE
 12105                           wreg	equ	0xFE8
 12106                           indf1	equ	0xFE7
 12107                           fsr1h	equ	0xFE2
 12108                           fsr1l	equ	0xFE1
 12109                           indf2	equ	0xFDF
 12110                           postinc2	equ	0xFDE
 12111                           postdec2	equ	0xFDD
 12112                           plusw2	equ	0xFDB
 12113                           fsr2h	equ	0xFDA
 12114                           fsr2l	equ	0xFD9
 12115                           status	equ	0xFD8
 12116                           
 12117 ;; *************** function _ECANSetOperationMode *****************
 12118 ;; Defined at:
 12119 ;;		line 1012 in file "../ECAN.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;  mode            1    wreg     enum E18989
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;  mode            1    7[COMRAM] enum E18989
 12124 ;; Return value:  Size  Location     Type
 12125 ;;		None               void
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, status,0
 12128 ;; Tracked objects:
 12129 ;;		On entry : E/F
 12130 ;;		On exit  : E/E
 12131 ;;		Unchanged: E/0
 12132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12137 ;;Total ram usage:        1 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    2
 12140 ;; This function calls:
 12141 ;;		Nothing
 12142 ;; This function is called by:
 12143 ;;		_ECANInitialize
 12144 ;; This function uses a non-reentrant model
 12145 ;;
 12146                           
 12147                           	psect	text70
 12148  002EDC                     __ptext70:
 12149                           	opt stack 0
 12150  002EDC                     _ECANSetOperationMode:
 12151                           	opt stack 26
 12152                           
 12153                           ;incstack = 0
 12154                           ;incstack = 0
 12155                           ;ECANSetOperationMode@mode stored from wreg
 12156  002EDC  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 12157                           
 12158                           ;ECAN.c: 1013: CANCON &= 0x1F;
 12159  002EE0  0E1F               	movlw	31
 12160  002EE2  166F               	andwf	3951,f,c	;volatile
 12161                           
 12162                           ;ECAN.c: 1014: CANCON |= mode;
 12163  002EE4  5008               	movf	ECANSetOperationMode@mode,w,c
 12164  002EE6  126F               	iorwf	3951,f,c	;volatile
 12165  002EE8                     l5352:
 12166  002EE8  506F               	movf	3951,w,c	;volatile
 12167  002EEA  0BE0               	andlw	224
 12168  002EEC  1808               	xorwf	ECANSetOperationMode@mode,w,c
 12169  002EEE  B4D8               	btfsc	status,2,c
 12170  002EF0  0012               	return	
 12171  002EF2  D7FA               	goto	l5352
 12172  002EF4                     __end_of_ECANSetOperationMode:
 12173                           	opt stack 0
 12174                           tblptru	equ	0xFF8
 12175                           tblptrh	equ	0xFF7
 12176                           tblptrl	equ	0xFF6
 12177                           tablat	equ	0xFF5
 12178                           prodh	equ	0xFF4
 12179                           prodl	equ	0xFF3
 12180                           intcon	equ	0xFF2
 12181                           postinc0	equ	0xFEE
 12182                           wreg	equ	0xFE8
 12183                           indf1	equ	0xFE7
 12184                           fsr1h	equ	0xFE2
 12185                           fsr1l	equ	0xFE1
 12186                           indf2	equ	0xFDF
 12187                           postinc2	equ	0xFDE
 12188                           postdec2	equ	0xFDD
 12189                           plusw2	equ	0xFDB
 12190                           fsr2h	equ	0xFDA
 12191                           fsr2l	equ	0xFD9
 12192                           status	equ	0xFD8
 12193                           
 12194 ;; *************** function _OpenTimer0 *****************
 12195 ;; Defined at:
 12196 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  config          1    wreg     unsigned char 
 12199 ;; Auto vars:     Size  Location     Type
 12200 ;;  config          1    7[COMRAM] unsigned char 
 12201 ;; Return value:  Size  Location     Type
 12202 ;;		None               void
 12203 ;; Registers used:
 12204 ;;		wreg, status,2, status,0
 12205 ;; Tracked objects:
 12206 ;;		On entry : F/F
 12207 ;;		On exit  : F/F
 12208 ;;		Unchanged: E/0
 12209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12213 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12214 ;;Total ram usage:        1 bytes
 12215 ;; Hardware stack levels used:    1
 12216 ;; Hardware stack levels required when called:    2
 12217 ;; This function calls:
 12218 ;;		Nothing
 12219 ;; This function is called by:
 12220 ;;		_init
 12221 ;; This function uses a non-reentrant model
 12222 ;;
 12223                           
 12224                           	psect	text71
 12225  002E6E                     __ptext71:
 12226                           	opt stack 0
 12227  002E6E                     _OpenTimer0:
 12228                           	opt stack 27
 12229                           
 12230                           ;incstack = 0
 12231                           ;incstack = 0
 12232                           ;OpenTimer0@config stored from wreg
 12233  002E6E  CFE8 F008          	movff	wreg,OpenTimer0@config
 12234                           
 12235                           ; BSR set to: 15
 12236  002E72  5008               	movf	OpenTimer0@config,w,c
 12237  002E74  0B7F               	andlw	127
 12238  002E76  6ED5               	movwf	4053,c	;volatile
 12239                           
 12240                           ; BSR set to: 15
 12241  002E78  6AD7               	clrf	4055,c	;volatile
 12242                           
 12243                           ; BSR set to: 15
 12244  002E7A  6AD6               	clrf	4054,c	;volatile
 12245                           
 12246                           ; BSR set to: 15
 12247  002E7C  94F2               	bcf	intcon,2,c	;volatile
 12248                           
 12249                           ; BSR set to: 15
 12250  002E7E  AE08               	btfss	OpenTimer0@config,7,c
 12251  002E80  D002               	goto	l1135
 12252                           
 12253                           ; BSR set to: 15
 12254  002E82  8AF2               	bsf	intcon,5,c	;volatile
 12255  002E84  D001               	goto	l1136
 12256  002E86                     l1135:
 12257                           
 12258                           ; BSR set to: 15
 12259  002E86  9AF2               	bcf	intcon,5,c	;volatile
 12260  002E88                     l1136:
 12261                           
 12262                           ; BSR set to: 15
 12263  002E88  8ED5               	bsf	4053,7,c	;volatile
 12264                           
 12265                           ; BSR set to: 15
 12266  002E8A  0012               	return	
 12267  002E8C                     __end_of_OpenTimer0:
 12268                           	opt stack 0
 12269                           tblptru	equ	0xFF8
 12270                           tblptrh	equ	0xFF7
 12271                           tblptrl	equ	0xFF6
 12272                           tablat	equ	0xFF5
 12273                           prodh	equ	0xFF4
 12274                           prodl	equ	0xFF3
 12275                           intcon	equ	0xFF2
 12276                           postinc0	equ	0xFEE
 12277                           wreg	equ	0xFE8
 12278                           indf1	equ	0xFE7
 12279                           fsr1h	equ	0xFE2
 12280                           fsr1l	equ	0xFE1
 12281                           indf2	equ	0xFDF
 12282                           postinc2	equ	0xFDE
 12283                           postdec2	equ	0xFDD
 12284                           plusw2	equ	0xFDB
 12285                           fsr2h	equ	0xFDA
 12286                           fsr2l	equ	0xFD9
 12287                           status	equ	0xFD8
 12288                           
 12289 ;; *************** function _init_app_ram *****************
 12290 ;; Defined at:
 12291 ;;		line 410 in file "../main.c"
 12292 ;; Parameters:    Size  Location     Type
 12293 ;;		None
 12294 ;; Auto vars:     Size  Location     Type
 12295 ;;  i               1    0        unsigned char 
 12296 ;; Return value:  Size  Location     Type
 12297 ;;		None               void
 12298 ;; Registers used:
 12299 ;;		None
 12300 ;; Tracked objects:
 12301 ;;		On entry : 0/E
 12302 ;;		On exit  : F/0
 12303 ;;		Unchanged: 0/0
 12304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12309 ;;Total ram usage:        0 bytes
 12310 ;; Hardware stack levels used:    1
 12311 ;; Hardware stack levels required when called:    2
 12312 ;; This function calls:
 12313 ;;		Nothing
 12314 ;; This function is called by:
 12315 ;;		_main
 12316 ;;		_init
 12317 ;;		_vscp_restoreDefaults
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           	psect	text72
 12322  002F88                     __ptext72:
 12323                           	opt stack 0
 12324  002F88                     _init_app_ram:
 12325                           	opt stack 25
 12326                           
 12327                           ;main.c: 411: uint8_t i;
 12328                           ;main.c: 413: measurement_clock = 0;
 12329                           
 12330                           ; BSR set to: 15
 12331                           ;incstack = 0
 12332                           ;incstack = 0
 12333  002F88  0100               	movlb	0	; () banked
 12334  002F8A  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 12335  002F8C  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 12336  002F8E  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 12337  002F90  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 12338                           
 12339                           ;main.c: 415: seconds = 0;
 12340  002F92  6B6A               	clrf	_seconds& (0+255),b
 12341                           
 12342                           ;main.c: 416: minutes = 0;
 12343  002F94  6B69               	clrf	_minutes& (0+255),b
 12344                           
 12345                           ;main.c: 417: hours = 0;
 12346  002F96  6B68               	clrf	_hours& (0+255),b
 12347                           
 12348                           ; BSR set to: 0
 12349  002F98  0012               	return	
 12350  002F9A                     __end_of_init_app_ram:
 12351                           	opt stack 0
 12352                           tblptru	equ	0xFF8
 12353                           tblptrh	equ	0xFF7
 12354                           tblptrl	equ	0xFF6
 12355                           tablat	equ	0xFF5
 12356                           prodh	equ	0xFF4
 12357                           prodl	equ	0xFF3
 12358                           intcon	equ	0xFF2
 12359                           postinc0	equ	0xFEE
 12360                           wreg	equ	0xFE8
 12361                           indf1	equ	0xFE7
 12362                           fsr1h	equ	0xFE2
 12363                           fsr1l	equ	0xFE1
 12364                           indf2	equ	0xFDF
 12365                           postinc2	equ	0xFDE
 12366                           postdec2	equ	0xFDD
 12367                           plusw2	equ	0xFDB
 12368                           fsr2h	equ	0xFDA
 12369                           fsr2l	equ	0xFD9
 12370                           status	equ	0xFD8
 12371                           
 12372 ;; *************** function _WriteTimer0 *****************
 12373 ;; Defined at:
 12374 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12375 ;; Parameters:    Size  Location     Type
 12376 ;;  timer0          2    7[COMRAM] unsigned int 
 12377 ;; Auto vars:     Size  Location     Type
 12378 ;;  timer           2    9[COMRAM] struct Timers
 12379 ;; Return value:  Size  Location     Type
 12380 ;;		None               void
 12381 ;; Registers used:
 12382 ;;		None
 12383 ;; Tracked objects:
 12384 ;;		On entry : F/F
 12385 ;;		On exit  : F/F
 12386 ;;		Unchanged: E/0
 12387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12388 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12389 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12391 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12392 ;;Total ram usage:        4 bytes
 12393 ;; Hardware stack levels used:    1
 12394 ;; Hardware stack levels required when called:    2
 12395 ;; This function calls:
 12396 ;;		Nothing
 12397 ;; This function is called by:
 12398 ;;		_init
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           	psect	text73
 12403  002F9A                     __ptext73:
 12404                           	opt stack 0
 12405  002F9A                     _WriteTimer0:
 12406                           	opt stack 27
 12407                           
 12408                           ; BSR set to: 15
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;incstack = 0
 12412                           ;incstack = 0
 12413  002F9A  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 12414  002F9E  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 12415  002FA2  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 12416  002FA6  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 12417                           
 12418                           ; BSR set to: 15
 12419  002FAA  0012               	return	
 12420  002FAC                     __end_of_WriteTimer0:
 12421                           	opt stack 0
 12422                           tblptru	equ	0xFF8
 12423                           tblptrh	equ	0xFF7
 12424                           tblptrl	equ	0xFF6
 12425                           tablat	equ	0xFF5
 12426                           prodh	equ	0xFF4
 12427                           prodl	equ	0xFF3
 12428                           intcon	equ	0xFF2
 12429                           postinc0	equ	0xFEE
 12430                           wreg	equ	0xFE8
 12431                           indf1	equ	0xFE7
 12432                           fsr1h	equ	0xFE2
 12433                           fsr1l	equ	0xFE1
 12434                           indf2	equ	0xFDF
 12435                           postinc2	equ	0xFDE
 12436                           postdec2	equ	0xFDD
 12437                           plusw2	equ	0xFDB
 12438                           fsr2h	equ	0xFDA
 12439                           fsr2l	equ	0xFD9
 12440                           status	equ	0xFD8
 12441                           
 12442 ;; *************** function _readControlReg *****************
 12443 ;; Defined at:
 12444 ;;		line 751 in file "../main.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;  ctrlreg         1    wreg     unsigned char 
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 12449 ;;  rv              1   15[COMRAM] unsigned char 
 12450 ;; Return value:  Size  Location     Type
 12451 ;;                  1    wreg      unsigned char 
 12452 ;; Registers used:
 12453 ;;		wreg, status,2, status,0, prodl, prodh
 12454 ;; Tracked objects:
 12455 ;;		On entry : 0/0
 12456 ;;		On exit  : 0/0
 12457 ;;		Unchanged: 0/0
 12458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12461 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12462 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12463 ;;Total ram usage:        9 bytes
 12464 ;; Hardware stack levels used:    1
 12465 ;; Hardware stack levels required when called:    2
 12466 ;; This function calls:
 12467 ;;		Nothing
 12468 ;; This function is called by:
 12469 ;;		_vscp_readAppReg
 12470 ;;		_writeControlReg
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text74
 12475  002328                     __ptext74:
 12476                           	opt stack 0
 12477  002328                     _readControlReg:
 12478                           	opt stack 24
 12479                           
 12480                           ; BSR set to: 15
 12481                           ;incstack = 0
 12482                           ;incstack = 0
 12483                           ;readControlReg@ctrlreg stored from wreg
 12484  002328  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 12485                           
 12486                           ;main.c: 752: uint8_t rv = 0;
 12487  00232C  6A10               	clrf	readControlReg@rv,c
 12488                           
 12489                           ;main.c: 754: switch ( ctrlreg ) {
 12490  00232E  D060               	goto	l4826
 12491  002330                     l4818:
 12492                           
 12493                           ;main.c: 757: rv = ( PORTCbits.RC7 << 0 ) +
 12494                           ;main.c: 758: ( PORTCbits.RC6 << 1 ) +
 12495                           ;main.c: 759: ( PORTCbits.RC3 << 2 ) +
 12496                           ;main.c: 760: ( PORTCbits.RC4 << 3 ) +
 12497                           ;main.c: 761: ( PORTCbits.RC5 << 4 ) +
 12498                           ;main.c: 762: ( PORTAbits.RA0 << 5 ) +
 12499                           ;main.c: 763: ( PORTAbits.RA1 << 6 ) +
 12500                           ;main.c: 764: ( PORTAbits.RA2 << 7 );
 12501  002330  3482               	rlcf	3970,w,c	;volatile
 12502  002332  36E8               	rlcf	wreg,f,c
 12503  002334  0B01               	andlw	1
 12504  002336  6E08               	movwf	??_readControlReg& (0+255),c
 12505  002338  3882               	swapf	3970,w,c	;volatile
 12506  00233A  32E8               	rrcf	wreg,f,c
 12507  00233C  32E8               	rrcf	wreg,f,c
 12508  00233E  0B01               	andlw	1
 12509  002340  0D02               	mullw	2
 12510  002342  CFF3 F009          	movff	prodl,??_readControlReg+1
 12511  002346  3082               	rrcf	3970,w,c	;volatile
 12512  002348  32E8               	rrcf	wreg,f,c
 12513  00234A  32E8               	rrcf	wreg,f,c
 12514  00234C  0B01               	andlw	1
 12515  00234E  0D04               	mullw	4
 12516  002350  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12517  002354  3882               	swapf	3970,w,c	;volatile
 12518  002356  0B01               	andlw	1
 12519  002358  0D08               	mullw	8
 12520  00235A  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12521  00235E  3882               	swapf	3970,w,c	;volatile
 12522  002360  32E8               	rrcf	wreg,f,c
 12523  002362  0B01               	andlw	1
 12524  002364  0D10               	mullw	16
 12525  002366  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12526  00236A  5080               	movf	3968,w,c	;volatile
 12527  00236C  0B01               	andlw	1
 12528  00236E  0D20               	mullw	32
 12529  002370  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12530  002374  3080               	rrcf	3968,w,c	;volatile
 12531  002376  0B01               	andlw	1
 12532  002378  0D40               	mullw	64
 12533  00237A  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12534  00237E  3080               	rrcf	3968,w,c	;volatile
 12535  002380  32E8               	rrcf	wreg,f,c
 12536  002382  0B01               	andlw	1
 12537  002384  0D80               	mullw	128
 12538  002386  50F3               	movf	prodl,w,c
 12539  002388  240E               	addwf	??_readControlReg+6,w,c
 12540  00238A  240D               	addwf	??_readControlReg+5,w,c
 12541  00238C  D01F               	goto	L43
 12542  00238E                     l4820:
 12543                           
 12544                           ;main.c: 768: rv = ( PORTAbits.RA3 << 0 ) +
 12545                           ;main.c: 769: ( PORTAbits.RA5 << 1 ) +
 12546                           ;main.c: 772: ( PORTBbits.RB4 << 4 ) +
 12547                           ;main.c: 773: ( PORTCbits.RC2 << 5 ) +
 12548                           ;main.c: 774: ( PORTBbits.RB1 << 6 ) +
 12549                           ;main.c: 775: ( PORTBbits.RB0 << 7 );
 12550  00238E  3080               	rrcf	3968,w,c	;volatile
 12551  002390  32E8               	rrcf	wreg,f,c
 12552  002392  32E8               	rrcf	wreg,f,c
 12553  002394  0B01               	andlw	1
 12554  002396  6E08               	movwf	??_readControlReg& (0+255),c
 12555  002398  3880               	swapf	3968,w,c	;volatile
 12556  00239A  32E8               	rrcf	wreg,f,c
 12557  00239C  0B01               	andlw	1
 12558  00239E  0D02               	mullw	2
 12559  0023A0  CFF3 F009          	movff	prodl,??_readControlReg+1
 12560  0023A4  3881               	swapf	3969,w,c	;volatile
 12561  0023A6  0B01               	andlw	1
 12562  0023A8  0D10               	mullw	16
 12563  0023AA  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12564  0023AE  3082               	rrcf	3970,w,c	;volatile
 12565  0023B0  32E8               	rrcf	wreg,f,c
 12566  0023B2  0B01               	andlw	1
 12567  0023B4  0D20               	mullw	32
 12568  0023B6  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12569  0023BA  3081               	rrcf	3969,w,c	;volatile
 12570  0023BC  0B01               	andlw	1
 12571  0023BE  0D40               	mullw	64
 12572  0023C0  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12573  0023C4  5081               	movf	3969,w,c	;volatile
 12574  0023C6  0B01               	andlw	1
 12575  0023C8  0D80               	mullw	128
 12576  0023CA  50F3               	movf	prodl,w,c
 12577  0023CC                     L43:
 12578  0023CC  240C               	addwf	??_readControlReg+4,w,c
 12579  0023CE  240B               	addwf	??_readControlReg+3,w,c
 12580  0023D0  240A               	addwf	??_readControlReg+2,w,c
 12581  0023D2  2409               	addwf	??_readControlReg+1,w,c
 12582  0023D4  D00A               	goto	L44
 12583  0023D6                     l4822:
 12584                           
 12585                           ;main.c: 779: rv = ( PORTBbits.RB6 << 0 ) +
 12586                           ;main.c: 780: ( PORTBbits.RB5 << 1 );
 12587  0023D6  3881               	swapf	3969,w,c	;volatile
 12588  0023D8  32E8               	rrcf	wreg,f,c
 12589  0023DA  32E8               	rrcf	wreg,f,c
 12590  0023DC  0B01               	andlw	1
 12591  0023DE  6E08               	movwf	??_readControlReg& (0+255),c
 12592  0023E0  3881               	swapf	3969,w,c	;volatile
 12593  0023E2  32E8               	rrcf	wreg,f,c
 12594  0023E4  0B01               	andlw	1
 12595  0023E6  0D02               	mullw	2
 12596  0023E8  50F3               	movf	prodl,w,c
 12597  0023EA                     L44:
 12598  0023EA  2408               	addwf	??_readControlReg,w,c
 12599  0023EC  6E10               	movwf	readControlReg@rv,c
 12600                           
 12601                           ;main.c: 781: break;
 12602  0023EE  D006               	goto	l4828
 12603  0023F0                     l4826:
 12604  0023F0  500F               	movf	readControlReg@ctrlreg,w,c
 12605                           
 12606                           ; Switch size 1, requested type "space"
 12607                           ; Number of cases is 3, Range of values is 0 to 2
 12608                           ; switch strategies available:
 12609                           ; Name         Instructions Cycles
 12610                           ; simple_byte           10     6 (average)
 12611                           ;	Chosen strategy is simple_byte
 12612  0023F2  E09E               	bz	l4818
 12613  0023F4  0A01               	xorlw	1	; case 1
 12614  0023F6  E0CB               	bz	l4820
 12615  0023F8  0A03               	xorlw	3	; case 2
 12616  0023FA  E0ED               	bz	l4822
 12617  0023FC                     l4828:
 12618                           
 12619                           ;main.c: 784: return rv;
 12620  0023FC  5010               	movf	readControlReg@rv,w,c
 12621  0023FE  0012               	return	
 12622  002400                     __end_of_readControlReg:
 12623                           	opt stack 0
 12624                           tblptru	equ	0xFF8
 12625                           tblptrh	equ	0xFF7
 12626                           tblptrl	equ	0xFF6
 12627                           tablat	equ	0xFF5
 12628                           prodh	equ	0xFF4
 12629                           prodl	equ	0xFF3
 12630                           intcon	equ	0xFF2
 12631                           postinc0	equ	0xFEE
 12632                           wreg	equ	0xFE8
 12633                           indf1	equ	0xFE7
 12634                           fsr1h	equ	0xFE2
 12635                           fsr1l	equ	0xFE1
 12636                           indf2	equ	0xFDF
 12637                           postinc2	equ	0xFDE
 12638                           postdec2	equ	0xFDD
 12639                           plusw2	equ	0xFDB
 12640                           fsr2h	equ	0xFDA
 12641                           fsr2l	equ	0xFD9
 12642                           status	equ	0xFD8
 12643                           
 12644 ;; *************** function _vscp_readAppReg *****************
 12645 ;; Defined at:
 12646 ;;		line 586 in file "../main.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;  reg             1    wreg     unsigned char 
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;  reg             1   17[COMRAM] unsigned char 
 12651 ;;  rv              1   16[COMRAM] unsigned char 
 12652 ;; Return value:  Size  Location     Type
 12653 ;;                  1    wreg      unsigned char 
 12654 ;; Registers used:
 12655 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12656 ;; Tracked objects:
 12657 ;;		On entry : F/0
 12658 ;;		On exit  : 0/0
 12659 ;;		Unchanged: 0/0
 12660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12664 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12665 ;;Total ram usage:        2 bytes
 12666 ;; Hardware stack levels used:    1
 12667 ;; Hardware stack levels required when called:    3
 12668 ;; This function calls:
 12669 ;;		_Read_b_eep
 12670 ;;		_readControlReg
 12671 ;; This function is called by:
 12672 ;;		_vscp_readRegister
 12673 ;;		_vscp_handleProtocolEvent
 12674 ;; This function uses a non-reentrant model
 12675 ;;
 12676                           
 12677                           	psect	text75
 12678  0027D8                     __ptext75:
 12679                           	opt stack 0
 12680  0027D8                     _vscp_readAppReg:
 12681                           	opt stack 25
 12682                           
 12683                           ;incstack = 0
 12684                           ;incstack = 0
 12685                           ;vscp_readAppReg@reg stored from wreg
 12686  0027D8  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;main.c: 587: uint8_t rv;
 12690                           ;main.c: 589: rv = 0x00;
 12691  0027DC  6A11               	clrf	vscp_readAppReg@rv,c
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;main.c: 592: if ( 0 == vscp_page_select ) {
 12695  0027DE  5053               	movf	_vscp_page_select+1,w,c
 12696  0027E0  1052               	iorwf	_vscp_page_select,w,c
 12697  0027E2  E137               	bnz	l6526
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;main.c: 594: if ( reg == 0x00 ) {
 12701  0027E4  6612               	tstfsz	vscp_readAppReg@reg,c
 12702  0027E6  D006               	goto	l6502
 12703                           
 12704                           ; BSR set to: 0
 12705                           ;main.c: 595: rv = Read_b_eep(0x21 + 0);
 12706  0027E8  6A09               	clrf	?_Read_b_eep+1,c
 12707  0027EA  0E21               	movlw	33
 12708  0027EC  6E08               	movwf	?_Read_b_eep,c
 12709  0027EE  EC62  F017         	call	_Read_b_eep	;wreg free
 12710  0027F2  D03D               	goto	L45
 12711  0027F4                     l6502:
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;main.c: 598: else if ( reg == 0x01 ) {
 12715  0027F4  0412               	decf	vscp_readAppReg@reg,w,c
 12716  0027F6  E106               	bnz	l6506
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;main.c: 599: rv = Read_b_eep(0x21 + 1);
 12720  0027F8  6A09               	clrf	?_Read_b_eep+1,c
 12721  0027FA  0E22               	movlw	34
 12722  0027FC  6E08               	movwf	?_Read_b_eep,c
 12723  0027FE  EC62  F017         	call	_Read_b_eep	;wreg free
 12724  002802  D035               	goto	L45
 12725  002804                     l6506:
 12726                           
 12727                           ; BSR set to: 0
 12728                           ;main.c: 602: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12729  002804  0E04               	movlw	4
 12730  002806  6412               	cpfsgt	vscp_readAppReg@reg,c
 12731  002808  D00C               	goto	l6512
 12732                           
 12733                           ; BSR set to: 0
 12734  00280A  0E17               	movlw	23
 12735  00280C  6012               	cpfslt	vscp_readAppReg@reg,c
 12736  00280E  D009               	goto	l6512
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;main.c: 603: rv = Read_b_eep(0x21 + 5 + ( reg - 5 ));
 12740  002810  0E21               	movlw	33
 12741  002812  2412               	addwf	vscp_readAppReg@reg,w,c
 12742  002814  6E08               	movwf	?_Read_b_eep,c
 12743  002816  6A09               	clrf	?_Read_b_eep+1,c
 12744  002818  0E00               	movlw	0
 12745  00281A  2209               	addwfc	?_Read_b_eep+1,f,c
 12746  00281C  EC62  F017         	call	_Read_b_eep	;wreg free
 12747  002820  D026               	goto	L45
 12748  002822                     l6512:
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;main.c: 607: else if ( reg == 2 ) {
 12752  002822  5012               	movf	vscp_readAppReg@reg,w,c
 12753  002824  0A02               	xorlw	2
 12754  002826  E104               	bnz	l6516
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;main.c: 608: rv = readControlReg( 0 );
 12758  002828  0E00               	movlw	0
 12759  00282A  EC94  F011         	call	_readControlReg
 12760  00282E  D01F               	goto	L45
 12761  002830                     l6516:
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;main.c: 611: else if ( reg == 3 ) {
 12765  002830  5012               	movf	vscp_readAppReg@reg,w,c
 12766  002832  0A03               	xorlw	3
 12767  002834  E104               	bnz	l6520
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;main.c: 612: rv = readControlReg( 1 );
 12771  002836  0E01               	movlw	1
 12772  002838  EC94  F011         	call	_readControlReg
 12773  00283C  D018               	goto	L45
 12774  00283E                     l6520:
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;main.c: 615: else if ( reg == 4 ) {
 12778  00283E  5012               	movf	vscp_readAppReg@reg,w,c
 12779  002840  0A04               	xorlw	4
 12780  002842  E116               	bnz	l6532
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;main.c: 616: rv = readControlReg( 2 );
 12784  002844  0E02               	movlw	2
 12785  002846  EC94  F011         	call	_readControlReg
 12786  00284A  6E11               	movwf	vscp_readAppReg@rv,c
 12787                           
 12788                           ;main.c: 617: rv &= 0x03;
 12789  00284C  0E03               	movlw	3
 12790  00284E  1611               	andwf	vscp_readAppReg@rv,f,c
 12791  002850  D00F               	goto	l6532
 12792  002852                     l6526:
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;main.c: 621: else if ( 1 == vscp_page_select ) {
 12796  002852  0452               	decf	_vscp_page_select,w,c
 12797  002854  1053               	iorwf	_vscp_page_select+1,w,c
 12798  002856  E10C               	bnz	l6532
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;main.c: 624: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12802                           ;main.c: 625: ( 8 * 8 ) ) ) ) {
 12803  002858  0E41               	movlw	65
 12804  00285A  6012               	cpfslt	vscp_readAppReg@reg,c
 12805  00285C  D009               	goto	l6532
 12806                           
 12807                           ; BSR set to: 0
 12808                           ;main.c: 626: rv = Read_b_eep(0x21 + 23 + ( reg - 0 ));
 12809  00285E  0E38               	movlw	56
 12810  002860  2412               	addwf	vscp_readAppReg@reg,w,c
 12811  002862  6E08               	movwf	?_Read_b_eep,c
 12812  002864  6A09               	clrf	?_Read_b_eep+1,c
 12813  002866  0E00               	movlw	0
 12814  002868  2209               	addwfc	?_Read_b_eep+1,f,c
 12815  00286A  EC62  F017         	call	_Read_b_eep	;wreg free
 12816  00286E                     L45:
 12817  00286E  6E11               	movwf	vscp_readAppReg@rv,c
 12818  002870                     l6532:
 12819                           
 12820                           ;main.c: 628: }
 12821                           ;main.c: 630: }
 12822                           ;main.c: 632: return rv;
 12823  002870  5011               	movf	vscp_readAppReg@rv,w,c
 12824  002872  0012               	return	
 12825  002874                     __end_of_vscp_readAppReg:
 12826                           	opt stack 0
 12827                           tblptru	equ	0xFF8
 12828                           tblptrh	equ	0xFF7
 12829                           tblptrl	equ	0xFF6
 12830                           tablat	equ	0xFF5
 12831                           prodh	equ	0xFF4
 12832                           prodl	equ	0xFF3
 12833                           intcon	equ	0xFF2
 12834                           postinc0	equ	0xFEE
 12835                           wreg	equ	0xFE8
 12836                           indf1	equ	0xFE7
 12837                           fsr1h	equ	0xFE2
 12838                           fsr1l	equ	0xFE1
 12839                           indf2	equ	0xFDF
 12840                           postinc2	equ	0xFDE
 12841                           postdec2	equ	0xFDD
 12842                           plusw2	equ	0xFDB
 12843                           fsr2h	equ	0xFDA
 12844                           fsr2l	equ	0xFD9
 12845                           status	equ	0xFD8
 12846                           
 12847 ;; *************** function _interrupt_at_low_vector *****************
 12848 ;; Defined at:
 12849 ;;		line 111 in file "../main.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;		None
 12852 ;; Auto vars:     Size  Location     Type
 12853 ;;		None
 12854 ;; Return value:  Size  Location     Type
 12855 ;;		None               void
 12856 ;; Registers used:
 12857 ;;		wreg, status,2, status,0, cstack
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12865 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12866 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12867 ;;Total ram usage:        3 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; Hardware stack levels required when called:    1
 12870 ;; This function calls:
 12871 ;;		i1_WriteTimer0
 12872 ;; This function is called by:
 12873 ;;		Interrupt level 1
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           	psect	intcodelo
 12878  000018                     __pintcodelo:
 12879                           	opt stack 0
 12880  000018                     _interrupt_at_low_vector:
 12881                           	opt stack 22
 12882                           
 12883                           ;incstack = 0
 12884  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12885  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12886  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12887  000024                     
 12888                           ;main.c: 113: if ( INTCONbits.TMR0IF ) {
 12889  000024  A4F2               	btfss	intcon,2,c	;volatile
 12890  000026  D001               	goto	i1u552_21
 12891  000028  D001               	goto	i1u552_20
 12892  00002A                     i1u552_21:
 12893  00002A  D03E               	goto	i1l143
 12894  00002C                     i1u552_20:
 12895  00002C                     
 12896                           ;main.c: 116: WriteTimer0(0xfb1d);
 12897  00002C  0EFB               	movlw	251
 12898  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 12899  000030  0E1D               	movlw	29
 12900  000032  6E01               	movwf	?i1_WriteTimer0,c
 12901  000034  ECD6  F017         	call	i1_WriteTimer0	;wreg free
 12902  000038                     
 12903                           ;main.c: 118: vscp_timer++;
 12904  000038  0100               	movlb	0	; () banked
 12905  00003A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12906  00003C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12907  00003E                     
 12908                           ; BSR set to: 0
 12909                           ;main.c: 119: vscp_configtimer++;
 12910  00003E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12911  000040  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12912  000042                     
 12913                           ; BSR set to: 0
 12914                           ;main.c: 120: measurement_clock++;
 12915  000042  0E01               	movlw	1
 12916  000044  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12917  000046  0E00               	movlw	0
 12918  000048  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12919  00004A  0E00               	movlw	0
 12920  00004C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12921  00004E  0E00               	movlw	0
 12922  000050  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12923  000052                     
 12924                           ; BSR set to: 0
 12925                           ;main.c: 123: if ( PORTCbits.RC0 ) {
 12926  000052  A082               	btfss	3970,0,c	;volatile
 12927  000054  D001               	goto	i1u553_21
 12928  000056  D001               	goto	i1u553_20
 12929  000058                     i1u553_21:
 12930  000058  D002               	goto	i1l5708
 12931  00005A                     i1u553_20:
 12932  00005A                     
 12933                           ; BSR set to: 0
 12934                           ;main.c: 124: vscp_initbtncnt = 0;
 12935  00005A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12936                           
 12937                           ;main.c: 125: } else {
 12938  00005C  D001               	goto	i1l135
 12939  00005E                     i1l5708:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;main.c: 127: vscp_initbtncnt++;
 12943  00005E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12944  000060                     i1l135:
 12945                           
 12946                           ; BSR set to: 0
 12947                           ;main.c: 128: }
 12948                           ;main.c: 131: vscp_statuscnt++;
 12949  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 12950  000062                     
 12951                           ; BSR set to: 0
 12952                           ;main.c: 132: if ( ( 0x02 == vscp_initledfunc ) &&
 12953                           ;main.c: 133: ( vscp_statuscnt > 100 ) ) {
 12954  000062  5056               	movf	_vscp_initledfunc,w,c
 12955  000064  0A02               	xorlw	2
 12956  000066  A4D8               	btfss	status,2,c
 12957  000068  D001               	goto	i1u554_21
 12958  00006A  D001               	goto	i1u554_20
 12959  00006C                     i1u554_21:
 12960  00006C  D00E               	goto	i1l5718
 12961  00006E                     i1u554_20:
 12962  00006E                     
 12963                           ; BSR set to: 0
 12964  00006E  0E64               	movlw	100
 12965  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 12966  000072  D001               	goto	i1u555_21
 12967  000074  D001               	goto	i1u555_20
 12968  000076                     i1u555_21:
 12969  000076  D009               	goto	i1l5718
 12970  000078                     i1u555_20:
 12971  000078                     
 12972                           ; BSR set to: 0
 12973                           ;main.c: 135: if ( PORTCbits.RC1 ) {
 12974  000078  A282               	btfss	3970,1,c	;volatile
 12975  00007A  D001               	goto	i1u556_21
 12976  00007C  D001               	goto	i1u556_20
 12977  00007E                     i1u556_21:
 12978  00007E  D002               	goto	i1l137
 12979  000080                     i1u556_20:
 12980  000080                     
 12981                           ; BSR set to: 0
 12982                           ;main.c: 136: PORTCbits.RC1 = 0;
 12983  000080  9282               	bcf	3970,1,c	;volatile
 12984                           
 12985                           ;main.c: 137: }
 12986  000082  D001               	goto	i1l138
 12987  000084                     i1l137:
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;main.c: 138: else {
 12991                           ;main.c: 139: PORTCbits.RC1 = 1;
 12992  000084  8282               	bsf	3970,1,c	;volatile
 12993  000086                     i1l138:
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;main.c: 140: }
 12997                           ;main.c: 142: vscp_statuscnt = 0;
 12998  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12999                           
 13000                           ;main.c: 144: }
 13001  000088  D00E               	goto	i1l139
 13002  00008A                     i1l5718:
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;main.c: 145: else if (0x01 == vscp_initledfunc) {
 13006  00008A  0456               	decf	_vscp_initledfunc,w,c
 13007  00008C  A4D8               	btfss	status,2,c
 13008  00008E  D001               	goto	i1u557_21
 13009  000090  D001               	goto	i1u557_20
 13010  000092                     i1u557_21:
 13011  000092  D003               	goto	i1l140
 13012  000094                     i1u557_20:
 13013  000094                     
 13014                           ; BSR set to: 0
 13015                           ;main.c: 146: PORTCbits.RC1 = 1;
 13016  000094  8282               	bsf	3970,1,c	;volatile
 13017                           
 13018                           ;main.c: 147: vscp_statuscnt = 0;
 13019  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 13020                           
 13021                           ;main.c: 148: }
 13022  000098  D006               	goto	i1l139
 13023  00009A                     i1l140:
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;main.c: 149: else if (0x00 == vscp_initledfunc) {
 13027  00009A  6656               	tstfsz	_vscp_initledfunc,c
 13028  00009C  D001               	goto	i1u558_21
 13029  00009E  D001               	goto	i1u558_20
 13030  0000A0                     i1u558_21:
 13031  0000A0  D002               	goto	i1l139
 13032  0000A2                     i1u558_20:
 13033  0000A2                     
 13034                           ; BSR set to: 0
 13035                           ;main.c: 150: PORTCbits.RC1 = 0;
 13036  0000A2  9282               	bcf	3970,1,c	;volatile
 13037                           
 13038                           ;main.c: 151: vscp_statuscnt = 0;
 13039  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 13040  0000A6                     i1l139:
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;main.c: 152: }
 13044                           ;main.c: 154: INTCONbits.TMR0IF = 0;
 13045  0000A6  94F2               	bcf	intcon,2,c	;volatile
 13046  0000A8                     i1l143:
 13047  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 13048  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 13049  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 13050  0000B4  0010               	retfie	
 13051  0000B6                     __end_of_interrupt_at_low_vector:
 13052                           	opt stack 0
 13053                           tblptru	equ	0xFF8
 13054                           tblptrh	equ	0xFF7
 13055                           tblptrl	equ	0xFF6
 13056                           tablat	equ	0xFF5
 13057                           prodh	equ	0xFF4
 13058                           prodl	equ	0xFF3
 13059                           intcon	equ	0xFF2
 13060                           postinc0	equ	0xFEE
 13061                           wreg	equ	0xFE8
 13062                           indf1	equ	0xFE7
 13063                           fsr1h	equ	0xFE2
 13064                           fsr1l	equ	0xFE1
 13065                           bsr	equ	0xFE0
 13066                           indf2	equ	0xFDF
 13067                           postinc2	equ	0xFDE
 13068                           postdec2	equ	0xFDD
 13069                           plusw2	equ	0xFDB
 13070                           fsr2h	equ	0xFDA
 13071                           fsr2l	equ	0xFD9
 13072                           status	equ	0xFD8
 13073                           
 13074 ;; *************** function i1_WriteTimer0 *****************
 13075 ;; Defined at:
 13076 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 13077 ;; Parameters:    Size  Location     Type
 13078 ;;  timer0          2    0[COMRAM] unsigned int 
 13079 ;; Auto vars:     Size  Location     Type
 13080 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 13081 ;; Return value:  Size  Location     Type
 13082 ;;		None               void
 13083 ;; Registers used:
 13084 ;;		None
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13093 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13094 ;;Total ram usage:        4 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; This function calls:
 13097 ;;		Nothing
 13098 ;; This function is called by:
 13099 ;;		_interrupt_at_low_vector
 13100 ;; This function uses a non-reentrant model
 13101 ;;
 13102                           
 13103                           	psect	text77
 13104  002FAC                     __ptext77:
 13105                           	opt stack 0
 13106  002FAC                     i1_WriteTimer0:
 13107                           	opt stack 22
 13108                           
 13109                           ;incstack = 0
 13110                           ;incstack = 0
 13111  002FAC  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 13112  002FB0  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 13113  002FB4  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 13114  002FB8  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 13115  002FBC  0012               	return	
 13116  002FBE                     __end_ofi1_WriteTimer0:
 13117                           	opt stack 0
 13118                           tblptru	equ	0xFF8
 13119                           tblptrh	equ	0xFF7
 13120                           tblptrl	equ	0xFF6
 13121                           tablat	equ	0xFF5
 13122                           prodh	equ	0xFF4
 13123                           prodl	equ	0xFF3
 13124                           intcon	equ	0xFF2
 13125                           postinc0	equ	0xFEE
 13126                           wreg	equ	0xFE8
 13127                           indf1	equ	0xFE7
 13128                           fsr1h	equ	0xFE2
 13129                           fsr1l	equ	0xFE1
 13130                           bsr	equ	0xFE0
 13131                           indf2	equ	0xFDF
 13132                           postinc2	equ	0xFDE
 13133                           postdec2	equ	0xFDD
 13134                           plusw2	equ	0xFDB
 13135                           fsr2h	equ	0xFDA
 13136                           fsr2l	equ	0xFD9
 13137                           status	equ	0xFD8
 13138                           tblptru	equ	0xFF8
 13139                           tblptrh	equ	0xFF7
 13140                           tblptrl	equ	0xFF6
 13141                           tablat	equ	0xFF5
 13142                           prodh	equ	0xFF4
 13143                           prodl	equ	0xFF3
 13144                           intcon	equ	0xFF2
 13145                           postinc0	equ	0xFEE
 13146                           wreg	equ	0xFE8
 13147                           indf1	equ	0xFE7
 13148                           fsr1h	equ	0xFE2
 13149                           fsr1l	equ	0xFE1
 13150                           bsr	equ	0xFE0
 13151                           indf2	equ	0xFDF
 13152                           postinc2	equ	0xFDE
 13153                           postdec2	equ	0xFDD
 13154                           plusw2	equ	0xFDB
 13155                           fsr2h	equ	0xFDA
 13156                           fsr2l	equ	0xFD9
 13157                           status	equ	0xFD8
 13158                           
 13159                           	psect	rparam
 13160  0000                     tblptru	equ	0xFF8
 13161                           tblptrh	equ	0xFF7
 13162                           tblptrl	equ	0xFF6
 13163                           tablat	equ	0xFF5
 13164                           prodh	equ	0xFF4
 13165                           prodl	equ	0xFF3
 13166                           intcon	equ	0xFF2
 13167                           postinc0	equ	0xFEE
 13168                           wreg	equ	0xFE8
 13169                           indf1	equ	0xFE7
 13170                           fsr1h	equ	0xFE2
 13171                           fsr1l	equ	0xFE1
 13172                           bsr	equ	0xFE0
 13173                           indf2	equ	0xFDF
 13174                           postinc2	equ	0xFDE
 13175                           postdec2	equ	0xFDD
 13176                           plusw2	equ	0xFDB
 13177                           fsr2h	equ	0xFDA
 13178                           fsr2l	equ	0xFD9
 13179                           status	equ	0xFD8
 13180                           tblptru	equ	0xFF8
 13181                           tblptrh	equ	0xFF7
 13182                           tblptrl	equ	0xFF6
 13183                           tablat	equ	0xFF5
 13184                           prodh	equ	0xFF4
 13185                           prodl	equ	0xFF3
 13186                           intcon	equ	0xFF2
 13187                           postinc0	equ	0xFEE
 13188                           wreg	equ	0xFE8
 13189                           indf1	equ	0xFE7
 13190                           fsr1h	equ	0xFE2
 13191                           fsr1l	equ	0xFE1
 13192                           bsr	equ	0xFE0
 13193                           indf2	equ	0xFDF
 13194                           postinc2	equ	0xFDE
 13195                           postdec2	equ	0xFDD
 13196                           plusw2	equ	0xFDB
 13197                           fsr2h	equ	0xFDA
 13198                           fsr2l	equ	0xFD9
 13199                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     48      96
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_Read_b_eep
    _vscp_getZone->_Read_b_eep
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _vscp_setUserID->_Write_b_eep
    _vscp_setManufacturerId->_Write_b_eep
    _vscp_setGUID->_Write_b_eep
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_Read_b_eep
    _vscp_getUserID->_Read_b_eep
    _vscp_getGUID->_Read_b_eep
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_Read_b_eep
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_Write_b_eep
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_Write_b_eep
    _vscp_setSegmentCRC->_Write_b_eep
    _vscp_getSegmentCRC->_Read_b_eep
    _vscp_writeNicknamePermanent->_Write_b_eep
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   44193
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2432
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                15    15      0   12274
                                             22 BANK0     15    15      0
                         _Read_b_eep
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         4     3      1    2635
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1    2787
                                             78 COMRAM     1     0      1
                         _Read_b_eep
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    2536
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _Read_b_eep
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            28    28      0   19392
                                             20 BANK0     28    28      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    3440
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1914
                                             15 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     316
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     316
                                             11 COMRAM     4     4      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1     134
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     156
                                             11 COMRAM     2     1      1
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1371
                                             20 COMRAM     3     2      1
                         _Read_b_eep
                    _writeControlReg
                           _Busy_eep
                        _Write_b_eep
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _Read_b_eep (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1998
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1427
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      93
                                              9 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     270
                                             12 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      62
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     224
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     286
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4716
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     398
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      62
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      62
                                              7 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0     112
                                             11 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (5) _Write_b_eep                                          4     1      3      90
                                              7 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (5) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     478
                                             16 COMRAM     2     2      0
                         _Read_b_eep
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_getSegmentCRC
       _Read_b_eep
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
     _vscp_setControlByte
       _Busy_eep
       _Write_b_eep
   _init_app_eeprom
     _Busy_eep
     _Write_b_eep
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _Read_b_eep
   _Read_b_eep
   _writeControlReg
     _Read_b_eep (ARG)
     _readControlReg (ARG)
   _Busy_eep
   _Write_b_eep
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _Busy_eep
       _Write_b_eep
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _Busy_eep
       _Write_b_eep
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _Read_b_eep
     _vscp_readAppReg
       _Read_b_eep
       _readControlReg
     _vscp_writeAppReg
       _Read_b_eep
       _writeControlReg
         _Read_b_eep (ARG)
         _readControlReg (ARG)
       _Busy_eep
       _Write_b_eep
       _vscp_readAppReg (ARG)
         _Read_b_eep
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _Read_b_eep
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _Busy_eep
       _Write_b_eep
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_getSegmentCRC
         _Read_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
       _vscp_setSegmentCRC
         _Busy_eep
         _Write_b_eep
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _Read_b_eep
       _vscp_writeNicknamePermanent
         _Busy_eep
         _Write_b_eep
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _Read_b_eep
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _Read_b_eep
         _vscp_getMDF_URL
         _vscp_getUserID
           _Read_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _Read_b_eep
       _vscp_getMDF_URL
       _vscp_getUserID
         _Read_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _Read_b_eep
         _writeControlReg
           _Read_b_eep (ARG)
           _readControlReg (ARG)
         _Busy_eep
         _Write_b_eep
         _vscp_readAppReg (ARG)
           _Read_b_eep
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _Busy_eep
           _Write_b_eep
         _vscp_setManufacturerId
           _Busy_eep
           _Write_b_eep
         _vscp_getGUID
           _Read_b_eep
         _vscp_getUserID
           _Read_b_eep
         _vscp_setUserID
           _Busy_eep
           _Write_b_eep
         _vscp_getManufacturerId
           _Read_b_eep
         _vscp_restoreDefaults
           _init_app_eeprom
             _Busy_eep
             _Write_b_eep
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _Busy_eep
         _Write_b_eep
       _vscp_setManufacturerId
         _Busy_eep
         _Write_b_eep
       _vscp_getGUID
         _Read_b_eep
       _vscp_getUserID
         _Read_b_eep
       _vscp_setUserID
         _Busy_eep
         _Write_b_eep
       _vscp_getManufacturerId
         _Read_b_eep
       _vscp_restoreDefaults
         _init_app_eeprom
           _Busy_eep
           _Write_b_eep
         _init_app_ram
     ___lbmod
   _doDM
     _Read_b_eep
     _actionSet
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClr
       _Read_b_eep
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionSetAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClrAll
       _SendInformationEvent
         _Read_b_eep
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _Read_b_eep
     _vscp_getSubzone
       _Read_b_eep
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _Read_b_eep
       _vscp_getSubzone (ARG)
         _Read_b_eep
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     30      60       5       60.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8       6        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Jul 07 10:33:34 2015

                __end_of_vscp_readAppReg 2874                    __end_of_sendVSCPFrame 27D8  
                                     PL2 1704                                       PL4 21CE  
                                     PL6 171C                                       PL8 1F9A  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000C  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1A9A  
                                    PL10 21E2                                      PL20 1FBA  
                                    PL12 14EC                                      PL30 1EC6  
                                    PL22 2204                                      PL14 21F2  
                                    PL40 1526                                      PL32 190E  
                                    PL24 1A9A                                      PL16 1504  
                                    PL34 1518                                      PL26 1FCE  
                                    PL18 1FA8                                      PL36 2218  
                                    PL28 1FE2                                      PL38 1AAE  
                                    l320 251E                                      l160 20A4  
                                    l321 2522                                      l330 253E  
                                    l322 2526                                      l331 2542  
                                    l323 252A                                      l315 250E  
                                    l147 2042                                      l332 2546  
                                    l324 252E                                      l156 208A  
                                    l333 254A                                      l325 2532  
                                    l317 2512                                      l318 2516  
                                    l350 245A                                      l342 243E  
                                    l319 251A                                      l351 245E  
                                    l328 2536                                      l360 247A  
                                    l352 2462                                      l344 2442  
                                    l329 253A                                      l345 2446  
                     vscp_readStdReg@idx 0019                                      l346 244A  
                                    l179 2620                                      l355 2466  
                                    l347 244E                                      l291 1578  
                                    l356 246A                                      l348 2452  
                                    l357 246E                                      l349 2456  
                                    l293 1592                                      l358 2472  
                                    l359 2476                                      l720 2972  
                                    l456 2B52                                      l650 1D2E  
                                    l661 1762                                      l671 181C  
                                    l680 17EA                                      l672 17AC  
                                    l648 1D10                                      l682 17FA  
                                    l674 17BA                                      l850 2720  
                                    l851 26AC                                      l835 2AA8  
                                    l692 1880                                      l684 180A  
                                    l676 17CA                                      l693 189A  
                                    l678 17DA                       vscp_readStdReg@reg 001C  
                                    l858 270E                                      l859 26EE  
                                    l893 2C4E                                      l982 2322  
         __size_of_vscp_handleProbeState 00BA                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2BFA            __end_of_vscp_handleProbeState 2724  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                   __size_of_Write_b_eep 003A                                      wreg 000FE8  
                   __end_of_actionSetAll 2C2A              ?_doApplicationOneSecondWork 0001  
                                   l1040 1258                                     l1016 10DC  
                                   l1041 126C                                     l1042 12A8  
                                   l1051 12E4                                     l1135 2E86  
                                   l1119 2B82                                     l1136 2E88  
                                   l1090 3002                                     l5110 2D2A  
                                   l5300 1850                                     l5222 1750  
                                   l5062 2DC2                                     l5400 2954  
                                   l5232 177A                      vscp_readStdReg@code 0011  
                                   l5340 18F8                                     l7020 2288  
                                   l5414 1F34                                     l5326 18C8  
                                   l5334 18E2                                     l5318 189C  
                                   l5238 1790                                     l5246 179A  
                                   l3902 25C8                                     l7030 22AA  
                                   l7014 226C                                     l7102 2008  
                                   l5352 2EE8                                     l7032 22C0  
                                   l7008 224C                                     l5290 1830  
                                   l5098 2994                                     l7210 0F78  
                                   l7130 207A                                     l7122 2068  
                                   l4820 238E                                     l7052 2308  
                                   l7044 22F4                                     l7028 22A6  
                                   l7132 207E                                     l6502 27F4  
                                   l4822 23D6                                     l5390 292A  
                                   l5382 2904                                     l7062 2324  
                                   l7142 209E                                     l7134 2084  
                                   l7126 2070                vscp_getManufacturerId@idx 000A  
                                   l6520 283E                                     l6512 2822  
                                   l5392 2934                                     l5384 290C  
                                   l6600 1EC2                                     l3928 2622  
                                   l7304 10A8                                     l7224 0F80  
                                   l7160 20EC                                     l6506 2804  
                                   l4818 2330                                     l4826 23F0  
                                   l5394 293E                                     l5386 2916  
                                   l4746 2D7A                                     l4754 2D56  
                                   l7322 110C                                     l7146 20A8  
                                   l6516 2830                                     l6532 2870  
                                   l4828 23FC                                     l5396 2948  
                                   l5388 2920                                     l5900 2690  
                                   l3972 1BFC                                     l3980 1C42  
                                   l3964 1AC2                                     l7500 130E  
                                   l7332 116A                                     l7316 10E0  
                                   l7244 0FA6                                     l7172 2100  
                                   l7148 20C0                                     l6526 2852  
                                   l7510 1332                                     l7414 124C  
                                   l7326 1124                                     l7318 10FE  
                                   l7190 0F3C                                     l7182 0F2C  
                                   l6470 2A72                                     l6624 27D6  
                                   l3968 1B76                                     l7336 1180  
                                   l7352 11A6                                     l7184 0F30  
                                   l7600 1488                                     l6640 24F6  
                                   l6464 2A68                                     l7176 2108  
                                   l5842 2DE2                                     l6722 2B4E  
                                   l5922 26CA                                     l3978 1C34  
                                   l6554 1DFC                                     l6546 1DDA  
                                   l7522 135E                                     l7450 129C  
                                   l7442 128C                                     l7434 126E  
                                   l7370 11F8                                     l7354 11A8  
                                   l7274 100C                                     l7258 0FB2  
                                   l7186 0F34                                     l6474 2A7A  
                                   l6812 215A                                     l5924 26CE  
                                   l6900 193A                                     l6580 1E6E  
                                   l6572 1E4A                                     l6564 1E26  
                                   l7460 12AA                                     l7364 11CC  
                                   l7356 11B2                                     l7284 1040  
                                   l7188 0F38                                     l6644 24FE  
                                   l6636 24EE                                     l6742 1CAA  
                                   l6718 2B20                                     l5918 26C6  
                                   l6590 1E98                                     l5686 2CD0  
                                   l5678 2CBA                                     l7526 1370  
                                   l7446 1294                                     l7382 120C  
                                   l7294 1074                                     l6670 247E  
                                   l6662 2426                                     l6736 1C9C  
                                   l6920 1972                                     l6912 195A  
                                   l6904 1944                                     l7552 13B6  
                                   l7544 1386                                     l7528 1376  
                                   l7464 12C4                                     l6648 254E  
                                   l6680 2C06                                     l7616 153C  
                                   l6770 1D30                                     l6754 1CD4  
                                   l5954 2712                                     l6850 2B12  
                                   l6930 1998                                     l6666 242E  
                                   l6658 241E                                     l7650 1660  
                                   l6764 1D14                                     l5884 266C  
                                   l6924 1982                                     l6916 1966  
                                   l6908 194E                                     l7556 13CE  
                                   l7548 13A0                                     l6950 19D2  
                                   l6942 19BA                                     l6934 19A4  
                                   l7574 1412                                     l7566 13F8  
                                   l7486 12E6                                     l7398 122C  
                                   l6694 2BD6                                     l7662 16B4  
                                   l7654 167C                                     l7638 15AC  
                                   l7670 16F8                                     l6776 1D5E  
                                   l6784 1D7C                                     l6794 1DA0  
                                   l5898 268A                                     l6954 19DE  
                                   l6946 19C6                                     l6938 19B0  
                                   l7578 1436                                     l7658 1698  
                                   l6796 1DA2                                     l6980 1A86  
                                   l6964 1A28                                     l7668 16D0  
                                   l6974 1A70                                     l6886 2F04  
                                   l6984 1A96                                     l6896 1930  
                                   l6996 2E28                                     u3145 2B8E  
                                   u3146 2B90              __size_of_vscp_getMatrixInfo 0020  
                                   u4440 29E4                           sendCANFrame@id 0037  
                                   u4445 29DA                                     u4615 1758  
                                   u4617 175A                                     u7035 2134  
                                   u7045 2144                                     u7055 2162  
                                   u7350 1A1E                                     u4935 1EFC  
                                   u4945 1F0C                                     u4955 1F38  
                                   u7355 1A1C                                     u7380 1A68  
                                   u7385 1A66                           sendCANFrame@rv 003E  
                                   u6795 2760                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000D                                     _doDM 1530  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 1FF4                                     _init 2B94  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 1DAA                              _vscp_minute 006F  
                            _vscp_second 0074                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B6  
          __size_of_vscp_doOneSecondWork 0050                            __CFG_FOSC$HS2 000000  
                      vscp_getUserID@idx 000A                    __size_of_vscp_setGUID 0024  
                          __CFG_MCLRE$ON 000000                         _vscp_writeStdReg 2222  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 29F0              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 0026                                    _B0CON 000E80  
                                  _B1CON 000E90                                    ?_doDM 0001  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_SendInformationEvent 0056  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 2E6E            ??_vscp_writeNicknamePermanent 000C  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 2FAC  
                                  _EEADR 000F74                          __end_of___lbmod 2CD8  
                _vscp_handleDropNickname 2C2A                                    _BSEL0 000E7D  
                                  _T0CON 000FD5                                    i1l140 009A  
                                  i1l135 0060                                    i1l143 00A8  
                                  i1l137 0084                                    i1l138 0086  
                                  i1l139 00A6                            __CFG_WDTEN$ON 000000  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                         readControlReg@rv 0010  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 2FF0               _vscp_readNicknamePermanent 2FE6  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                             _vscp_getGUID 2F74  
                                  doDM@i 00B4                           Read_b_eep@badd 0008  
                 Write_b_eep@GIE_BIT_VAL 000B                             _vscp_getZone 2FC8  
                     vscp_writeAppReg@rv 0016                                    _hours 0068  
              _vscp_getRegisterPagesUsed 3010                   __size_of_vscp_getEvent 002C  
                           _vscp_setGUID 2D6E                                    tablat 000FF5  
                _vscp_getSubMinorVersion 3016                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 2CFE  
                   _ECANSetOperationMode 2EDC                          __initialization 2DF6  
                           __end_of_doDM 1704                             __end_of_main 210E  
                           __end_of_init 2BCA                        ??_writeControlReg 0012  
                       ?_vscp_readAppReg 0001                               _Read_b_eep 2EC4  
                _interrupt_at_low_vector 0018                         __end_of_Busy_eep 3008  
                         doDM@class_mask 00AB                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00A6  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 0010                                   ??_main 0052  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000A                 ??_vscp_setManufacturerId 000D  
               _vscp_handleProtocolEvent 0F22                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEADRH 000F75  
                                 _EEDATA 000F73                                   _EECON2 000F7E  
                                 _ANCON0 000F5D                                   _ANCON1 000F5C  
                                 _CIOCON 000F70                            doDM@type_mask 00AE  
                     vscp_writeStdReg@rv 0015                            ?_init_app_ram 0001  
                                 _MDSEL0 007B96                                   _MDSEL1 007B97  
                        __CFG_BBSIZ$BB2K 000000                                   i1l5700 003E  
                                 i1l5710 0062                                   i1l5702 0042  
                                 i1l5720 0094                                   i1l5712 006E  
                                 i1l5704 0052                               _OpenTimer0 2E6E  
                                 i1l5722 00A2                                   i1l5714 0078  
                                 i1l5706 005A                                   i1l5716 0080  
                                 i1l5708 005E                                   i1l5718 008A  
                                 i1l5694 0024                                   i1l5696 002C  
                                 i1l5698 0038                          _init_app_eeprom 25A0  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 2C86                   writeControlReg@ctrlreg 0013  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1144 00AD  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 2C5A  
                                 _doWork 300C                         OpenTimer0@config 0008  
                  __size_of_actionClrAll 0030                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000D                      vscp_writeAppReg@reg 0017  
             __end_of_vscp_setSegmentCRC 2F36                      vscp_writeAppReg@val 0015  
                                 clear_0 2DFC                                   clear_1 2E08  
                  __size_of_actionSetAll 0030                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00BA                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0070                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000C  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0008                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                               __accesstop 0060  
                __end_of__initialization 2E0E                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                             _actionClrAll 2BCA  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 2E14  
              ??_interrupt_at_low_vector 0005                             _actionSetAll 2BFA  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 2DF6  
                __size_of_vscp_setUserID 001C                              ?_Read_b_eep 0008  
                        ??i1_WriteTimer0 0003                       __size_of_actionClr 00D0  
                     __size_of_actionSet 00D0                      ?_vscp_writeRegister 0018  
                             __end_ofPL2 171C                               __end_ofPL4 21E2  
                             __end_ofPL6 172A                               __end_ofPL8 1FA8  
                         ??_sendCANFrame 003E               __end_of_vscp_getFamilyCode 2FE6  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01E4  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 2FDC  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0018  
        __size_of_vscp_setManufacturerId 0024                 __end_of_vscp_writeAppReg 1EC6  
                __size_of_readControlReg 00D8                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 266A              __end_of_vscp_setControlByte 2F20  
               __end_of_vscp_writeStdReg 2328                       __RegsToCANID@Value 000E  
                          actionClrAll@i 0050                     ??_vscp_writeRegister 0019  
        __end_of_vscp_handleDropNickname 2C5A                             _getVSCPFrame 297C  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 3014                                ?_Busy_eep 0001  
                  vscp_writeRegister@reg 0019                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                            actionSetAll@i 0050  
        __end_of_vscp_getSubMinorVersion 3018                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000C  
                                _B5RXFUL 007687                         WriteTimer0@timer 000A  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                            ??_Write_b_eep 000B  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000E43  
                                _BRGCON2 000E44                                  _BRGCON3 000E45  
         SendInformationEvent@eventClass 00A4                      vscp_writeStdReg@reg 0016  
           __end_of_vscp_doOneSecondWork 2A96                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
        __end_of_interrupt_at_low_vector 00B6                 vscp_readStdReg@code_1117 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 266A  
                                _RXB0CON 000F60                                  _RXB1CON 000F30  
                                _RXB0FUL 007B07                         __ECANPointBuffer 28FE  
             __end_of_vscp_getMatrixInfo 2DD6                                  _TXB0CON 000F20  
                                _TXB1CON 000F10                                  _TXB2CON 000F00  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                     _vscp_goActiveState 2E50                        __end_of_actionClr 24D0  
                      __end_of_actionSet 25A0                   __size_of_sendVSCPFrame 00B4  
           __end_of_SendInformationEvent 2A46             __end_of_vscp_getMajorVersion 301C  
                    __size_of_Read_b_eep 0018                        writeControlReg@rv 0014  
                        _writeControlReg 1ABA                       __size_of_vscp_init 0044  
                             ??_Busy_eep 0008                  SendInformationEvent@idx 004E  
                 _vscp_getManufacturerId 2F4C                   _vscp_setManufacturerId 2D4A  
                      actionSetAll@param 004F                          _ECANSendMessage 1C46  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0072               __end_of_vscp_getSegmentCRC 2FFA  
             ??_vscp_handleProtocolEvent 00A4                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 3012                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 2CB0                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 2F9A  
                     _vscp_sendHeartBeat 2CD8                                  __pcinit 2DF6  
                         _vscp_deviceURL 0F00                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 1FF4  
                                __ptext1 300C                                  __ptext2 300E  
                                __ptext3 2A46                                  __ptext4 2CD8  
                                __ptext5 2FBE                                  __ptext6 2FC8  
                                __ptext7 3008                                  __ptext8 1530  
                                __ptext9 2BCA                           _vscp_getUserID 2F60  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 0010                      ?_vscp_sendHeartBeat 00A4  
               ??_vscp_handleSetNickname 000D                                  _minutes 0069  
                                _seconds 006A                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 2FAC                         ?_init_app_eeprom 0001  
                    __end_of_Write_b_eep 2B94                        vscp_readAppReg@rv 0011  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00B1  
                   end_of_initialization 2E0E             __end_of_vscp_handleHeartbeat 2B1A  
               __size_of_vscp_getSubzone 000A                     __end_of_sendCANFrame 2B5A  
              vscp_handleProtocolEvent@i 00BE                vscp_handleProtocolEvent@j 00BF  
              vscp_handleProtocolEvent@k 00B8                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 2CFE                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 008A                           _vscp_setUserID 2E8C  
                                postinc0 000FEE                                  postinc2 000FDE  
                       actionClr@dmflags 0001                   __end_of_vscp_deviceURL 0F20  
    __end_of_vscp_writeNicknamePermanent 2F4C              _vscp_writeNicknamePermanent 2F36  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 2724  
                 __end_of_vscp_getUserID 2F74             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0077CB                        __end_of_vscp_init 2ADA  
                         _vscp_probe_cnt 0073                                _PORTAbits 000F80  
                              _PORTBbits 000F81                                _PORTCbits 000F82  
                    __end_of_getCANFrame 2D4A                           _readControlReg 2328  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 009C                         ___lbmod@dividend 0009  
                __end_of_writeControlReg 1C46                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 2F20  
             vscp_handleProtocolEvent@cb 00B6                  __end_of_ECANSendMessage 1DAA  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00B3  
                   __end_of__RegsToCANID 1F9A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 2D24                               _vscp_error 3008  
                   _vscp_doOneSecondWork 2A46                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0066                   __end_of_vscp_setUserID 2EA8  
                 vscp_sendHeartBeat@zone 004C                             ??_Read_b_eep 000A  
                         ?_sendVSCPFrame 003F                          ?_vscp_getUserID 0001  
                    actionSetAll@dmflags 0001                           __end_of_doWork 300E  
           __end_of_vscp_getMinorVersion 301A                              _WriteTimer0 2F9A  
                 __end_of_readControlReg 2400                     _SendInformationEvent 29F0  
                   _vscp_getMajorVersion 301A                              _Write_b_eep 2B5A  
                   ??_vscp_setSegmentCRC 000C                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                              __end_ofPL10 21F2  
                            __end_ofPL20 1FCE                              __end_ofPL12 1504  
                      ?_vscp_writeAppReg 0015                              __end_ofPL30 1ED6  
                            __end_ofPL22 2218                              __end_ofPL14 2204  
                            __end_ofPL40 1530                              __end_ofPL32 191C  
                            __end_ofPL24 1AAE                              __end_ofPL16 1518  
                            __end_ofPL34 1526                              __end_ofPL26 1FE2  
                            __end_ofPL18 1FBA                              __end_ofPL36 2222  
                            __end_ofPL28 1FF4                              __end_ofPL38 1ABA  
                    start_initialization 2DF6          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 0016                        ?_vscp_writeStdReg 0010  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0011                       _vscp_getFamilyCode 2FDC  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 2FD2  
                       doDM@class_filter 00A9                       __end_of_Read_b_eep 2EDC  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 2EF4  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00B5  
                  ?_vscp_doOneSecondWork 0001                        __size_of_Busy_eep 0006  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 14EC  
                              _doDM$2000 00B1                                _doDM$2001 00B2  
                        ?_vscp_setUserID 000C                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 0012                                _doDM$1998 00AF  
                              _doDM$1999 00B0                 ?_vscp_handleDropNickname 0001  
                      ??_vscp_getSubzone 000A                 __end_of__ECANPointBuffer 297C  
                      __CANIDToRegs@type 000E                              _getCANFrame 2D24  
                               ??_doWork 0008                       _vscp_getBufferSize 3012  
            vscp_handleProtocolEvent@len 00B2              vscp_handleProtocolEvent@pos 00B0  
             __end_of_ECANReceiveMessage 190E                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001E                    ?_SendInformationEvent 00A4  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 2FBE  
          __end_of_vscp_goBootloaderMode 2E50                          ?_readControlReg 0001  
                         actionClr@param 004F                     _vscp_handleHeartbeat 2ADA  
                     __end_of_OpenTimer0 2E8C      __size_of_doApplicationOneSecondWork 0002  
                    ?_vscp_getBufferSize 0001             __size_of_vscp_check_pstorage 0020  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0090  
                       _vscp_alarmstatus 006B                         ?_writeControlReg 0011  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0040  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000C  
                          ?_vscp_setGUID 000C              __size_of_vscp_writeRegister 001E  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 0011  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 2F0A  
                           _init_app_ram 2F88             __size_of_vscp_setControlByte 0016  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                _actionClr 2400  
                              _actionSet 24D0                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 2DB6                   _vscp_handleSetNickname 2D92  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 0090  
                         _ECANInitialize 2874                                 ?___lbmod 0008  
                         actionSet@param 004F                      ?_vscp_getMatrixInfo 0001  
                        vscp_getGUID@idx 000A                              __pintcodelo 0018  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1134 00B4  
                vscp_readStdReg@idx_1118 001A               vscp_setManufacturerId@data 000C  
                           _sendCANFrame 2B1A                              __smallconst 0F00  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 2FF0  
                       actionSet@dmflags 0001                           ??_vscp_getGUID 000A  
                         ??_vscp_getZone 000A           __end_of_vscp_getManufacturerId 2F60  
         __end_of_vscp_setManufacturerId 2D6E                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1133 00B3                          doDM@type_filter 00AD  
                         ??_vscp_setGUID 000D                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0064  
        SendInformationEvent@eventTypeId 00A5                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 3018  
                              _sendTimer 0055                               ?_actionClr 004F  
                             ?_actionSet 004F                   __end_of_ECANInitialize 28FE  
                               i1u552_20 002C                                 i1u552_21 002A  
                               i1u553_20 005A                                 i1u553_21 0058  
                               i1u554_20 006E                                 i1u554_21 006C  
                               i1u555_20 0078                                 i1u555_21 0076  
                               i1u556_20 0080                                 i1u556_21 007E  
                               i1u557_20 0094                                 i1u557_21 0092  
                               i1u558_20 00A2                                 i1u558_21 00A0  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 2C86                                 _RXF0EIDH 000EE2  
                               _RXF0EIDL 000EE3                                 _RXB0OVFL 007B8F  
                               _RXF1EIDH 000EE6                                 _RXF1EIDL 000EE7  
                               _RXB1OVFL 007B8E                                 _RXF0SIDH 000EE0  
                               _RXF0SIDL 000EE1                                 _RXF1SIDH 000EE4  
                               _RXF1SIDL 000EE5                                 _RXM0EIDH 000EFA  
                               _RXM0EIDL 000EFB                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000EFE                                 _RXM1EIDL 000EFF  
                   ??_vscp_getSegmentCRC 000A                                 _RXFBCON0 000E71  
                               _RXFBCON1 000E72                                 _RXFBCON2 000E73  
                               _RXFBCON3 000E74                                 _RXFBCON4 000E75  
                               _RXFBCON5 000E76                                 _RXFBCON6 000E77  
                               _RXFBCON7 000E78                                 _RXM0SIDH 000EF8  
                               _RXM0SIDL 000EF9                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000C  
                   __end_of__CANIDToRegs 21CE                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1ED6                       _vscp_probe_address 0057  
                        Write_b_eep@badd 0008                          Write_b_eep@bdat 000A  
            __size_of_vscp_goActiveState 001E                       writeControlReg@val 0011  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 2A96  
                              _vscp_imsg 0075                                _vscp_hour 006D  
                              _vscp_omsg 0083                         vscp_setGUID@data 000C  
      __size_of_vscp_handleProtocolEvent 05CA                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0016       __end_of_doApplicationOneSecondWork 3010  
             _doApplicationOneSecondWork 300E                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0060  
                               _Busy_eep 3002                    ?_vscp_getMinorVersion 0001  
               __size_of_init_app_eeprom 00CA                      actionClrAll@dmflags 0001  
           __end_of_vscp_restoreDefaults 3002                               _EECON1bits 000F7F  
                          ?_actionClrAll 004F                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                            ?_actionSetAll 004F  
                       ??_vscp_getUserID 000A                          _vscp_getMDF_URL 2EA8  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                       __CFG_BOREN$SBORDIS 000000  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000D                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                           ?_Write_b_eep 0008                               ?_vscp_init 0001  
                               __ptext10 2BFA                                 __ptext11 2400  
                               __ptext20 2E8C                                 __ptext12 24D0  
                               __ptext21 2D4A                                 __ptext13 29F0  
                               __ptext30 3012                                 __ptext22 2D6E  
                               __ptext14 0F22                                 __ptext31 3014  
                               __ptext23 1DAA                                 __ptext15 2CB0  
                               __ptext40 2C2A                                 __ptext32 2F4C  
                               __ptext24 1ABA                                 __ptext16 2E14  
                               __ptext41 2A96                                 __ptext33 2F60  
                               __ptext25 2EF4                                 __ptext17 2222  
                               __ptext50 2724                                 __ptext42 2FE6  
                               __ptext34 2EA8                                 __ptext26 191C  
                               __ptext18 2FFA                                 __ptext51 2B1A  
                               __ptext43 2D92                                 __ptext35 2F74  
                               __ptext27 3010                                 __ptext19 25A0  
                               __ptext60 2DD6                                 __ptext52 1C46  
                               __ptext44 2ADA                                 __ptext36 3016  
                               __ptext28 2FD2                                 __ptext61 2F0A  
                               __ptext53 210E                                 __ptext45 2DB6  
                               __ptext37 3018                                 __ptext29 2FDC  
                               __ptext70 2EDC                                 __ptext62 2F20  
                               __ptext54 2C5A                                 __ptext46 2E32  
                               __ptext38 301A                                 __ptext71 2E6E  
                               __ptext63 2FF0                                 __ptext55 297C  
                               __ptext47 266A                                 __ptext39 2C86  
                               __ptext72 2F88                                 __ptext64 2EC4  
                               __ptext56 2D24                                 __ptext48 2E50  
                               __ptext73 2F9A                                 __ptext65 2F36  
                               __ptext57 172A                                 __ptext49 2CFE  
                               __ptext74 2328                                 __ptext66 2B5A  
                               __ptext58 1ED6                                 __ptext75 27D8  
                               __ptext67 3002                                 __ptext59 28FE  
                               __ptext68 2B94                                 __ptext77 2FAC  
                               __ptext69 2874           vscp_goBootloaderMode@algorithm 000C  
              vscp_sendHeartBeat@subzone 00A4                            ?_getVSCPFrame 001E  
                       ??_vscp_sendEvent 004B                          _vscp_getSubzone 2FBE  
                       ??_vscp_setUserID 000D                            __size_of_doDM 01D4  
                          __size_of_main 011A                            __size_of_init 0036  
                         ??_actionClrAll 0050                              ??_actionClr 0050  
                            ??_actionSet 0050                __size_of_vscp_writeAppReg 011C  
                    _vscp_check_pstorage 2DD6                           ??_actionSetAll 0050  
         vscp_handleProtocolEvent@i_1132 00B9           vscp_handleProtocolEvent@i_1135 00BD  
         vscp_handleProtocolEvent@i_1143 00B7                     __end_of_vscp_getGUID 2F88  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                         ??_readControlReg 0008  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 2FD2                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        vscp_setUserID@idx 000D  
                   __end_of_vscp_setGUID 2D92                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00AF  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000D  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000F  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 2F0A  
            __size_of_vscp_setSegmentCRC 0016                          _vscp_readAppReg 27D8  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000A                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 006C                          _vscp_readStdReg 191C  
           vscp_handleDropNickname@bytes 000D               __end_of_vscp_newNodeOnline 2CB0  
                     _ECANReceiveMessage 172A                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 006E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 2EC4  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0071                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
                vscp_setControlByte@ctrl 000C                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000C                    __size_of__CANIDToRegs 00C0  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 3016              _vscp_getBootLoaderAlgorithm 3014  
                  readControlReg@ctrlreg 000F         __size_of_interrupt_at_low_vector 009E  
                      actionClrAll@param 004F                   ECANSendMessage@dataLen 0018  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000D                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2E32             __end_of_ECANSetOperationMode 2EF4  
                   _vscp_restoreDefaults 2FFA              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000A                  __end_of_vscp_getSubzone 2FC8  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2E32                       __end_of_vscp_error 300C  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2DB6  
     vscp_handleProtocolEvent@bytes_1139 00BB                    ??_vscp_setControlByte 000C  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 210E                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00AB  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
