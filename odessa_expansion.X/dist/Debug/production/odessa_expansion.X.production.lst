

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Apr 24 15:44:15 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    87                           	psect	text76,global,reloc=2,class=CODE,delta=1
    88                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    90                           	psect	pa_nodes,global,class=CODE,delta=1
    91  0000                     tblptru	equ	0xFF8
    92                           tblptrh	equ	0xFF7
    93                           tblptrl	equ	0xFF6
    94                           tablat	equ	0xFF5
    95                           prodh	equ	0xFF4
    96                           prodl	equ	0xFF3
    97                           intcon	equ	0xFF2
    98                           wreg	equ	0xFE8
    99                           indf1	equ	0xFE7
   100                           fsr1h	equ	0xFE2
   101                           fsr1l	equ	0xFE1
   102                           indf2	equ	0xFDF
   103                           postinc2	equ	0xFDE
   104                           postdec2	equ	0xFDD
   105                           plusw2	equ	0xFDB
   106                           fsr2h	equ	0xFDA
   107                           fsr2l	equ	0xFD9
   108                           status	equ	0xFD8
   109                           
   110                           	psect	smallconst
   111  000F00                     __psmallconst:
   112                           	opt stack 0
   113  000F00                     _vscp_deviceURL:
   114                           	opt stack 0
   115  000F00  77                 	db	119
   116  000F01  77                 	db	119
   117  000F02  77                 	db	119
   118  000F03  2E                 	db	46
   119  000F04  65                 	db	101
   120  000F05  75                 	db	117
   121  000F06  72                 	db	114
   122  000F07  6F                 	db	111
   123  000F08  73                 	db	115
   124  000F09  6F                 	db	111
   125  000F0A  75                 	db	117
   126  000F0B  72                 	db	114
   127  000F0C  63                 	db	99
   128  000F0D  65                 	db	101
   129  000F0E  2E                 	db	46
   130  000F0F  73                 	db	115
   131  000F10  65                 	db	101
   132  000F11  2F                 	db	47
   133  000F12  6F                 	db	111
   134  000F13  64                 	db	100
   135  000F14  65                 	db	101
   136  000F15  73                 	db	115
   137  000F16  73                 	db	115
   138  000F17  61                 	db	97
   139  000F18  30                 	db	48
   140  000F19  30                 	db	48
   141  000F1A  31                 	db	49
   142  000F1B  2E                 	db	46
   143  000F1C  78                 	db	120
   144  000F1D  6D                 	db	109
   145  000F1E  6C                 	db	108
   146  000F1F  00                 	db	0
   147  000F20                     __end_of_vscp_deviceURL:
   148                           	opt stack 0
   149  0000                     _ANCON0	set	3933
   150  0000                     _ANCON1	set	3932
   151  0000                     _BRGCON1	set	3651
   152  0000                     _BRGCON2	set	3652
   153  0000                     _BRGCON3	set	3653
   154  0000                     _BSEL0	set	3709
   155  0000                     _CANCON	set	3951
   156  0000                     _CIOCON	set	3952
   157  0000                     _ECANCON	set	3954
   158  0000                     _EEADR	set	3956
   159  0000                     _EECON1bits	set	3967
   160  0000                     _EECON2	set	3966
   161  0000                     _EEDATA	set	3955
   162  0000                     _INTCONbits	set	4082
   163  0000                     _MSEL0	set	3705
   164  0000                     _MSEL1	set	3706
   165  0000                     _MSEL2	set	3707
   166  0000                     _PIR4bits	set	4023
   167  0000                     _PORTA	set	3968
   168  0000                     _PORTAbits	set	3968
   169  0000                     _PORTB	set	3969
   170  0000                     _PORTBbits	set	3969
   171  0000                     _PORTC	set	3970
   172  0000                     _PORTCbits	set	3970
   173  0000                     _RXB1CONbits	set	3888
   174  0000                     _RXF0EIDH	set	3810
   175  0000                     _RXF0EIDL	set	3811
   176  0000                     _RXF0SIDH	set	3808
   177  0000                     _RXF0SIDL	set	3809
   178  0000                     _RXF1EIDH	set	3814
   179  0000                     _RXF1EIDL	set	3815
   180  0000                     _RXF1SIDL	set	3813
   181  0000                     _RXFBCON0	set	3697
   182  0000                     _RXFBCON1	set	3698
   183  0000                     _RXFBCON2	set	3699
   184  0000                     _RXFBCON3	set	3700
   185  0000                     _RXFBCON4	set	3701
   186  0000                     _RXFBCON5	set	3702
   187  0000                     _RXFBCON6	set	3703
   188  0000                     _RXFBCON7	set	3704
   189  0000                     _RXFCON0	set	3654
   190  0000                     _RXFCON1	set	3655
   191  0000                     _RXM0EIDH	set	3834
   192  0000                     _RXM0EIDL	set	3835
   193  0000                     _RXM0SIDH	set	3832
   194  0000                     _RXM0SIDL	set	3833
   195  0000                     _RXM1EIDH	set	3838
   196  0000                     _RXM1EIDL	set	3839
   197  0000                     _RXM1SIDL	set	3837
   198  0000                     _T0CON	set	4053
   199  0000                     _T0CONbits	set	4053
   200  0000                     _TMR0H	set	4055
   201  0000                     _TMR0L	set	4054
   202  0000                     _TRISA	set	3986
   203  0000                     _TRISB	set	3987
   204  0000                     _TRISC	set	3988
   205  0000                     _B0RXFUL	set	29703
   206  0000                     _B0TXEN	set	29674
   207  0000                     _B1RXFUL	set	29831
   208  0000                     _B1TXEN	set	29675
   209  0000                     _B2RXFUL	set	29959
   210  0000                     _B2TXEN	set	29676
   211  0000                     _B3RXFUL	set	30087
   212  0000                     _B3TXEN	set	29677
   213  0000                     _B4RXFUL	set	30215
   214  0000                     _B4TXEN	set	29678
   215  0000                     _B5RXFUL	set	30343
   216  0000                     _B5TXEN	set	29679
   217  0000                     _FIFOEMPTY	set	31631
   218  0000                     _IRXIF	set	31679
   219  0000                     _MDSEL0	set	31638
   220  0000                     _MDSEL1	set	31639
   221  0000                     _RXB0FILHIT0	set	31488
   222  0000                     _RXB0FUL	set	31495
   223  0000                     _RXB0IF	set	31672
   224  0000                     _RXB0OVFL	set	31631
   225  0000                     _RXB1IF	set	31673
   226  0000                     _RXB1OVFL	set	31630
   227  0000                     _RXF1EN	set	29233
   228  0000                     _RXM0EXIDM	set	30667
   229  0000                     _RXM1EXIDEN	set	30699
   230  0000                     _B0CON	set	3712
   231  0000                     _B1CON	set	3728
   232  0000                     _B2CON	set	3744
   233  0000                     _B3CON	set	3760
   234  0000                     _B4CON	set	3776
   235  0000                     _B5CON	set	3792
   236  0000                     _RXB0CON	set	3936
   237  0000                     _RXB1CON	set	3888
   238  0000                     _RXF1SIDH	set	3812
   239  0000                     _RXM1SIDH	set	3836
   240  0000                     _TXB0CON	set	3872
   241  0000                     _TXB1CON	set	3856
   242  0000                     _TXB2CON	set	3840
   243                           
   244                           ; #config settings
   245  000F20  00                 	db	0	; dummy byte at the end
   246  0000                     tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           prodh	equ	0xFF4
   251                           prodl	equ	0xFF3
   252                           intcon	equ	0xFF2
   253                           wreg	equ	0xFE8
   254                           indf1	equ	0xFE7
   255                           fsr1h	equ	0xFE2
   256                           fsr1l	equ	0xFE1
   257                           indf2	equ	0xFDF
   258                           postinc2	equ	0xFDE
   259                           postdec2	equ	0xFDD
   260                           plusw2	equ	0xFDB
   261                           fsr2h	equ	0xFDA
   262                           fsr2l	equ	0xFD9
   263                           status	equ	0xFD8
   264                           
   265                           	psect	cinit
   266  002D7C                     __pcinit:
   267                           	opt stack 0
   268  002D7C                     start_initialization:
   269                           	opt stack 0
   270  002D7C                     __initialization:
   271                           	opt stack 0
   272                           
   273                           ; Clear objects allocated to BANK0 (48 bytes)
   274  002D7C  EE00  F060         	lfsr	0,__pbssBANK0
   275  002D80  0E30               	movlw	48
   276  002D82                     clear_0:
   277  002D82  6AEE               	clrf	postinc0,c
   278  002D84  06E8               	decf	wreg,f,c
   279  002D86  E1FD               	bnz	clear_0
   280                           
   281                           ; Clear objects allocated to COMRAM (7 bytes)
   282  002D88  EE00  F052         	lfsr	0,__pbssCOMRAM
   283  002D8C  0E07               	movlw	7
   284  002D8E                     clear_1:
   285  002D8E  6AEE               	clrf	postinc0,c
   286  002D90  06E8               	decf	wreg,f,c
   287  002D92  E1FD               	bnz	clear_1
   288  002D94                     end_of_initialization:
   289                           	opt stack 0
   290  002D94                     __end_of__initialization:
   291                           	opt stack 0
   292  002D94  0100               	movlb	0
   293  002D96  EF53  F00F         	goto	_main	;jump to C main() function
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           prodh	equ	0xFF4
   299                           prodl	equ	0xFF3
   300                           intcon	equ	0xFF2
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           indf1	equ	0xFE7
   304                           fsr1h	equ	0xFE2
   305                           fsr1l	equ	0xFE1
   306                           indf2	equ	0xFDF
   307                           postinc2	equ	0xFDE
   308                           postdec2	equ	0xFDD
   309                           plusw2	equ	0xFDB
   310                           fsr2h	equ	0xFDA
   311                           fsr2l	equ	0xFD9
   312                           status	equ	0xFD8
   313                           
   314                           	psect	bssCOMRAM
   315  000052                     __pbssCOMRAM:
   316                           	opt stack 0
   317  000052                     _vscp_page_select:
   318                           	opt stack 0
   319  000052                     	ds	2
   320  000054                     __ECANRxFilterHitInfo:
   321                           	opt stack 0
   322  000054                     	ds	1
   323  000055                     _sendTimer:
   324                           	opt stack 0
   325  000055                     	ds	1
   326  000056                     _vscp_initledfunc:
   327                           	opt stack 0
   328  000056                     	ds	1
   329  000057                     _vscp_probe_address:
   330                           	opt stack 0
   331  000057                     	ds	1
   332  000058                     _vscp_statuscnt:
   333                           	opt stack 0
   334  000058                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           prodh	equ	0xFF4
   340                           prodl	equ	0xFF3
   341                           intcon	equ	0xFF2
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           indf1	equ	0xFE7
   345                           fsr1h	equ	0xFE2
   346                           fsr1l	equ	0xFE1
   347                           indf2	equ	0xFDF
   348                           postinc2	equ	0xFDE
   349                           postdec2	equ	0xFDD
   350                           plusw2	equ	0xFDB
   351                           fsr2h	equ	0xFDA
   352                           fsr2l	equ	0xFD9
   353                           status	equ	0xFD8
   354                           
   355                           	psect	bssBANK0
   356  000060                     __pbssBANK0:
   357                           	opt stack 0
   358  000060                     _measurement_clock:
   359                           	opt stack 0
   360  000060                     	ds	4
   361  000064                     _vscp_configtimer:
   362                           	opt stack 0
   363  000064                     	ds	2
   364  000066                     _vscp_timer:
   365                           	opt stack 0
   366  000066                     	ds	2
   367  000068                     _hours:
   368                           	opt stack 0
   369  000068                     	ds	1
   370  000069                     _minutes:
   371                           	opt stack 0
   372  000069                     	ds	1
   373  00006A                     _seconds:
   374                           	opt stack 0
   375  00006A                     	ds	1
   376  00006B                     _vscp_alarmstatus:
   377                           	opt stack 0
   378  00006B                     	ds	1
   379  00006C                     _vscp_guid_reset:
   380                           	opt stack 0
   381  00006C                     	ds	1
   382  00006D                     _vscp_hour:
   383                           	opt stack 0
   384  00006D                     	ds	1
   385  00006E                     _vscp_initbtncnt:
   386                           	opt stack 0
   387  00006E                     	ds	1
   388  00006F                     _vscp_minute:
   389                           	opt stack 0
   390  00006F                     	ds	1
   391  000070                     _vscp_nickname:
   392                           	opt stack 0
   393  000070                     	ds	1
   394  000071                     _vscp_node_state:
   395                           	opt stack 0
   396  000071                     	ds	1
   397  000072                     _vscp_node_substate:
   398                           	opt stack 0
   399  000072                     	ds	1
   400  000073                     _vscp_probe_cnt:
   401                           	opt stack 0
   402  000073                     	ds	1
   403  000074                     _vscp_second:
   404                           	opt stack 0
   405  000074                     	ds	1
   406  000075                     _vscp_imsg:
   407                           	opt stack 0
   408  000075                     	ds	14
   409  000083                     _vscp_omsg:
   410                           	opt stack 0
   411  000083                     	ds	13
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           prodh	equ	0xFF4
   417                           prodl	equ	0xFF3
   418                           intcon	equ	0xFF2
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           indf1	equ	0xFE7
   422                           fsr1h	equ	0xFE2
   423                           fsr1l	equ	0xFE1
   424                           indf2	equ	0xFDF
   425                           postinc2	equ	0xFDE
   426                           postdec2	equ	0xFDD
   427                           plusw2	equ	0xFDB
   428                           fsr2h	equ	0xFDA
   429                           fsr2l	equ	0xFD9
   430                           status	equ	0xFD8
   431                           
   432                           	psect	cstackBANK0
   433  000090                     __pcstackBANK0:
   434                           	opt stack 0
   435  000090                     ??_sendVSCPFrame:
   436                           
   437                           ; 0 bytes @ 0x0
   438  000090                     	ds	20
   439  0000A4                     ??_vscp_handleProtocolEvent:
   440  0000A4                     ?_SendInformationEvent:
   441                           	opt stack 0
   442  0000A4                     ?_vscp_sendHeartBeat:
   443                           	opt stack 0
   444  0000A4                     SendInformationEvent@eventClass:
   445                           	opt stack 0
   446  0000A4                     vscp_sendHeartBeat@subzone:
   447                           	opt stack 0
   448                           
   449                           ; 1 bytes @ 0x14
   450  0000A4                     	ds	1
   451  0000A5                     SendInformationEvent@eventTypeId:
   452                           	opt stack 0
   453                           
   454                           ; 1 bytes @ 0x15
   455  0000A5                     	ds	1
   456  0000A6                     ??_doDM:
   457                           
   458                           ; 0 bytes @ 0x16
   459  0000A6                     	ds	3
   460  0000A9                     doDM@class_filter:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x19
   464  0000A9                     	ds	2
   465  0000AB                     doDM@class_mask:
   466                           	opt stack 0
   467  0000AB                     vscp_handleProtocolEvent@page_save:
   468                           	opt stack 0
   469                           
   470                           ; 2 bytes @ 0x1B
   471  0000AB                     	ds	2
   472  0000AD                     doDM@type_filter:
   473                           	opt stack 0
   474  0000AD                     vscp_handleProtocolEvent@page_save_1140:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x1D
   478  0000AD                     	ds	1
   479  0000AE                     doDM@type_mask:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x1E
   483  0000AE                     	ds	1
   484  0000AF                     vscp_handleProtocolEvent@offset:
   485                           	opt stack 0
   486  0000AF                     _doDM$1986:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x1F
   490  0000AF                     	ds	1
   491  0000B0                     vscp_handleProtocolEvent@pos:
   492                           	opt stack 0
   493  0000B0                     _doDM$1987:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x20
   497  0000B0                     	ds	1
   498  0000B1                     vscp_handleProtocolEvent@bytes:
   499                           	opt stack 0
   500  0000B1                     _doDM$1988:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x21
   504  0000B1                     	ds	1
   505  0000B2                     vscp_handleProtocolEvent@len:
   506                           	opt stack 0
   507  0000B2                     _doDM$1989:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x22
   511  0000B2                     	ds	1
   512  0000B3                     doDM@dmflags:
   513                           	opt stack 0
   514  0000B3                     vscp_handleProtocolEvent@pos_1129:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x23
   518  0000B3                     	ds	1
   519  0000B4                     doDM@i:
   520                           	opt stack 0
   521  0000B4                     vscp_handleProtocolEvent@len_1130:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x24
   525  0000B4                     	ds	1
   526  0000B5                     vscp_handleProtocolEvent@bytes_this_time:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x25
   530  0000B5                     	ds	1
   531  0000B6                     vscp_handleProtocolEvent@cb:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x26
   535  0000B6                     	ds	1
   536  0000B7                     vscp_handleProtocolEvent@i_1139:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x27
   540  0000B7                     	ds	1
   541  0000B8                     vscp_handleProtocolEvent@k:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x28
   545  0000B8                     	ds	1
   546  0000B9                     vscp_handleProtocolEvent@bytes_1136:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x29
   550  0000B9                     	ds	1
   551  0000BA                     vscp_handleProtocolEvent@i_1128:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x2A
   555  0000BA                     	ds	1
   556  0000BB                     vscp_handleProtocolEvent@byte:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x2B
   560  0000BB                     	ds	1
   561  0000BC                     vscp_handleProtocolEvent@i_1131:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x2C
   565  0000BC                     	ds	1
   566  0000BD                     vscp_handleProtocolEvent@i:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x2D
   570  0000BD                     	ds	1
   571  0000BE                     vscp_handleProtocolEvent@j:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x2E
   575  0000BE                     	ds	1
   576                           tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           prodh	equ	0xFF4
   581                           prodl	equ	0xFF3
   582                           intcon	equ	0xFF2
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           indf1	equ	0xFE7
   586                           fsr1h	equ	0xFE2
   587                           fsr1l	equ	0xFE1
   588                           indf2	equ	0xFDF
   589                           postinc2	equ	0xFDE
   590                           postdec2	equ	0xFDD
   591                           plusw2	equ	0xFDB
   592                           fsr2h	equ	0xFDA
   593                           fsr2l	equ	0xFD9
   594                           status	equ	0xFD8
   595                           
   596                           	psect	cstackCOMRAM
   597  000001                     __pcstackCOMRAM:
   598                           	opt stack 0
   599  000001                     ?i1_WriteTimer0:
   600                           	opt stack 0
   601  000001                     i1WriteTimer0@timer0:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x0
   605  000001                     	ds	2
   606  000003                     i1WriteTimer0@timer:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x2
   610  000003                     	ds	2
   611  000005                     ??_interrupt_at_low_vector:
   612                           
   613                           ; 0 bytes @ 0x4
   614  000005                     	ds	3
   615  000008                     ?_WriteTimer0:
   616                           	opt stack 0
   617  000008                     ?_writeEEPROM:
   618                           	opt stack 0
   619  000008                     ??_readControlReg:
   620  000008                     ?__CANIDToRegs:
   621                           	opt stack 0
   622  000008                     ?__RegsToCANID:
   623                           	opt stack 0
   624  000008                     ??_vscp_getMDF_URL:
   625  000008                     ?_readEEPROM:
   626                           	opt stack 0
   627  000008                     ?___lbmod:
   628                           	opt stack 0
   629  000008                     ?__ECANPointBuffer:
   630                           	opt stack 0
   631  000008                     ?_vscp_getFamilyCode:
   632                           	opt stack 0
   633  000008                     ?_vscp_getFamilyType:
   634                           	opt stack 0
   635  000008                     vscp_getMatrixInfo@i:
   636                           	opt stack 0
   637  000008                     ECANSetOperationMode@mode:
   638                           	opt stack 0
   639  000008                     OpenTimer0@config:
   640                           	opt stack 0
   641  000008                     ___lbmod@divisor:
   642                           	opt stack 0
   643  000008                     __CANIDToRegs@ptr:
   644                           	opt stack 0
   645  000008                     __RegsToCANID@ptr:
   646                           	opt stack 0
   647  000008                     writeEEPROM@address:
   648                           	opt stack 0
   649  000008                     readEEPROM@address:
   650                           	opt stack 0
   651  000008                     WriteTimer0@timer0:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x7
   655  000008                     	ds	1
   656  000009                     vscp_getMDF_URL@idx:
   657                           	opt stack 0
   658  000009                     ___lbmod@dividend:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x8
   662  000009                     	ds	1
   663  00000A                     __RegsToCANID@val:
   664                           	opt stack 0
   665  00000A                     writeEEPROM@data:
   666                           	opt stack 0
   667  00000A                     readEEPROM@data:
   668                           	opt stack 0
   669  00000A                     ___lbmod@counter:
   670                           	opt stack 0
   671  00000A                     WriteTimer0@timer:
   672                           	opt stack 0
   673  00000A                     __CANIDToRegs@val:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x9
   677  00000A                     	ds	1
   678  00000B                     ??_init_app_eeprom:
   679  00000B                     ?_vscp_setGUID:
   680                           	opt stack 0
   681  00000B                     ?_vscp_setManufacturerId:
   682                           	opt stack 0
   683  00000B                     ?_vscp_setUserID:
   684                           	opt stack 0
   685  00000B                     vscp_setGUID@data:
   686                           	opt stack 0
   687  00000B                     vscp_setManufacturerId@data:
   688                           	opt stack 0
   689  00000B                     vscp_writeNicknamePermanent@nickname:
   690                           	opt stack 0
   691  00000B                     vscp_getGUID@idx:
   692                           	opt stack 0
   693  00000B                     vscp_getUserID@idx:
   694                           	opt stack 0
   695  00000B                     vscp_setUserID@data:
   696                           	opt stack 0
   697  00000B                     vscp_getManufacturerId@idx:
   698                           	opt stack 0
   699  00000B                     vscp_setSegmentCRC@crc:
   700                           	opt stack 0
   701  00000B                     vscp_setControlByte@ctrl:
   702                           	opt stack 0
   703  00000B                     vscp_goBootloaderMode@algorithm:
   704                           	opt stack 0
   705  00000B                     __RegsToCANID@type:
   706                           	opt stack 0
   707  00000B                     __ECANPointBuffer@b:
   708                           	opt stack 0
   709  00000B                     ___lbmod@rem:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0xA
   713  00000B                     	ds	1
   714  00000C                     ??__RegsToCANID:
   715  00000C                     ??_vscp_readStdReg:
   716  00000C                     vscp_setGUID@idx:
   717                           	opt stack 0
   718  00000C                     vscp_setManufacturerId@idx:
   719                           	opt stack 0
   720  00000C                     vscp_setUserID@idx:
   721                           	opt stack 0
   722  00000C                     vscp_handleDropNickname@bytes:
   723                           	opt stack 0
   724  00000C                     __ECANPointBuffer@pt:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0xB
   728  00000C                     	ds	1
   729  00000D                     init_app_eeprom@j:
   730                           	opt stack 0
   731                           
   732                           ; 1 bytes @ 0xC
   733  00000D                     	ds	1
   734  00000E                     init_app_eeprom@i:
   735                           	opt stack 0
   736  00000E                     __CANIDToRegs@type:
   737                           	opt stack 0
   738  00000E                     __RegsToCANID@Value:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0xD
   742  00000E                     	ds	1
   743  00000F                     ??__CANIDToRegs:
   744  00000F                     ?_ECANReceiveMessage:
   745                           	opt stack 0
   746  00000F                     ?_vscp_writeStdReg:
   747                           	opt stack 0
   748  00000F                     readControlReg@ctrlreg:
   749                           	opt stack 0
   750  00000F                     ECANReceiveMessage@data:
   751                           	opt stack 0
   752  00000F                     vscp_writeStdReg@value:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0xE
   756  00000F                     	ds	1
   757  000010                     ??_vscp_writeStdReg:
   758  000010                     readControlReg@rv:
   759                           	opt stack 0
   760  000010                     ECANReceiveMessage@dataLen:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0xF
   764  000010                     	ds	1
   765  000011                     ?_writeControlReg:
   766                           	opt stack 0
   767  000011                     vscp_readAppReg@rv:
   768                           	opt stack 0
   769  000011                     writeControlReg@val:
   770                           	opt stack 0
   771  000011                     ECANReceiveMessage@msgFlags:
   772                           	opt stack 0
   773  000011                     __CANIDToRegs@Value:
   774                           	opt stack 0
   775  000011                     vscp_readStdReg@code:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x10
   779  000011                     	ds	1
   780  000012                     ??_writeControlReg:
   781  000012                     ?_ECANSendMessage:
   782                           	opt stack 0
   783  000012                     vscp_readAppReg@reg:
   784                           	opt stack 0
   785  000012                     ECANReceiveMessage@savedPtr:
   786                           	opt stack 0
   787  000012                     ECANSendMessage@id:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x11
   791  000012                     	ds	1
   792  000013                     writeControlReg@ctrlreg:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x12
   796  000013                     	ds	1
   797  000014                     writeControlReg@rv:
   798                           	opt stack 0
   799  000014                     ECANReceiveMessage@id:
   800                           	opt stack 0
   801  000014                     vscp_writeStdReg@rv:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x13
   805  000014                     	ds	1
   806  000015                     ?_vscp_writeAppReg:
   807                           	opt stack 0
   808  000015                     vscp_writeAppReg@val:
   809                           	opt stack 0
   810  000015                     ECANReceiveMessage@i:
   811                           	opt stack 0
   812  000015                     vscp_writeStdReg@reg:
   813                           	opt stack 0
   814  000015                     vscp_readStdReg@code_1113:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x14
   818  000015                     	ds	1
   819  000016                     vscp_writeAppReg@rv:
   820                           	opt stack 0
   821  000016                     ECANReceiveMessage@mode:
   822                           	opt stack 0
   823  000016                     ECANSendMessage@data:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x15
   827  000016                     	ds	1
   828  000017                     vscp_writeAppReg@reg:
   829                           	opt stack 0
   830  000017                     ECANReceiveMessage@temp:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x16
   834  000017                     	ds	1
   835  000018                     ?_vscp_writeRegister:
   836                           	opt stack 0
   837  000018                     ECANSendMessage@dataLen:
   838                           	opt stack 0
   839  000018                     vscp_writeRegister@value:
   840                           	opt stack 0
   841  000018                     ECANReceiveMessage@ptr:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x17
   845  000018                     	ds	1
   846  000019                     ECANSendMessage@msgFlags:
   847                           	opt stack 0
   848  000019                     vscp_readStdReg@idx:
   849                           	opt stack 0
   850  000019                     vscp_writeRegister@reg:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x18
   854  000019                     	ds	1
   855  00001A                     ??_ECANSendMessage:
   856  00001A                     ?_getCANFrame:
   857                           	opt stack 0
   858  00001A                     getCANFrame@pdlc:
   859                           	opt stack 0
   860  00001A                     vscp_readStdReg@idx_1114:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x19
   864  00001A                     	ds	1
   865  00001B                     getCANFrame@pdata:
   866                           	opt stack 0
   867  00001B                     vscp_readStdReg@rv:
   868                           	opt stack 0
   869  00001B                     ECANSendMessage@pb:
   870                           	opt stack 0
   871                           
   872                           ; 18 bytes @ 0x1A
   873  00001B                     	ds	1
   874  00001C                     getCANFrame@pid:
   875                           	opt stack 0
   876  00001C                     vscp_readStdReg@reg:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x1B
   880  00001C                     	ds	1
   881  00001D                     getCANFrame@flags:
   882                           	opt stack 0
   883  00001D                     vscp_readRegister@reg:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x1C
   887  00001D                     	ds	1
   888  00001E                     ?_getVSCPFrame:
   889                           	opt stack 0
   890  00001E                     getVSCPFrame@pvscptype:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x1D
   894  00001E                     	ds	1
   895  00001F                     getVSCPFrame@pNodeId:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x1E
   899  00001F                     	ds	1
   900  000020                     getVSCPFrame@pPriority:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x1F
   904  000020                     	ds	1
   905  000021                     getVSCPFrame@pSize:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x20
   909  000021                     	ds	1
   910  000022                     getVSCPFrame@pData:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x21
   914  000022                     	ds	1
   915  000023                     ??_getVSCPFrame:
   916                           
   917                           ; 0 bytes @ 0x22
   918  000023                     	ds	4
   919  000027                     getVSCPFrame@pvscpclass:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x26
   923  000027                     	ds	1
   924  000028                     getVSCPFrame@id:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x27
   928  000028                     	ds	4
   929  00002C                     vscp_getEvent@rv:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x2B
   933  00002C                     	ds	1
   934  00002D                     ECANSendMessage@mode:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x2C
   938  00002D                     	ds	1
   939  00002E                     ECANSendMessage@buffers:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x2D
   943  00002E                     	ds	1
   944  00002F                     ECANSendMessage@j:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x2E
   948  00002F                     	ds	1
   949  000030                     ECANSendMessage@tempBSEL0:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x2F
   953  000030                     	ds	1
   954  000031                     ECANSendMessage@tempPtr:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x30
   958  000031                     	ds	2
   959  000033                     ECANSendMessage@temp:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x32
   963  000033                     	ds	1
   964  000034                     ECANSendMessage@i:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x33
   968  000034                     	ds	1
   969  000035                     ECANSendMessage@ptr:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x34
   973  000035                     	ds	2
   974  000037                     ?_sendCANFrame:
   975                           	opt stack 0
   976  000037                     sendCANFrame@id:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x36
   980  000037                     	ds	4
   981  00003B                     sendCANFrame@dlc:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x3A
   985  00003B                     	ds	1
   986  00003C                     sendCANFrame@pdata:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x3B
   990  00003C                     	ds	2
   991  00003E                     sendCANFrame@rv:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x3D
   995  00003E                     	ds	1
   996  00003F                     ?_sendVSCPFrame:
   997                           	opt stack 0
   998  00003F                     sendVSCPFrame@vscpclass:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x3E
  1002  00003F                     	ds	2
  1003  000041                     sendVSCPFrame@vscptype:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x40
  1007  000041                     	ds	1
  1008  000042                     sendVSCPFrame@nodeid:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x41
  1012  000042                     	ds	1
  1013  000043                     sendVSCPFrame@priority:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x42
  1017  000043                     	ds	1
  1018  000044                     sendVSCPFrame@size:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x43
  1022  000044                     	ds	1
  1023  000045                     sendVSCPFrame@pData:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x44
  1027  000045                     	ds	2
  1028  000047                     sendVSCPFrame@id:
  1029                           	opt stack 0
  1030                           
  1031                           ; 4 bytes @ 0x46
  1032  000047                     	ds	4
  1033  00004B                     SendInformationEvent@data:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x4A
  1037  00004B                     	ds	1
  1038  00004C                     ??_vscp_newNodeOnline:
  1039  00004C                     vscp_sendHeartBeat@zone:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x4B
  1043  00004C                     	ds	1
  1044  00004D                     ??_vscp_doOneSecondWork:
  1045                           
  1046                           ; 0 bytes @ 0x4C
  1047  00004D                     	ds	1
  1048  00004E                     SendInformationEvent@idx:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x4D
  1052  00004E                     	ds	1
  1053  00004F                     ?_actionSet:
  1054                           	opt stack 0
  1055  00004F                     ?_actionClr:
  1056                           	opt stack 0
  1057  00004F                     ?_actionSetAll:
  1058                           	opt stack 0
  1059  00004F                     ?_actionClrAll:
  1060                           	opt stack 0
  1061  00004F                     actionSet@param:
  1062                           	opt stack 0
  1063  00004F                     actionClr@param:
  1064                           	opt stack 0
  1065  00004F                     
  1066                           ; 1 bytes @ 0x4E
  1067  00004F                     	ds	1
  1068  000050                     actionSetAll@i:
  1069                           	opt stack 0
  1070  000050                     actionClrAll@i:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x4F
  1074  000050                     	ds	2
  1075  000052                     tblptru	equ	0xFF8
  1076                           tblptrh	equ	0xFF7
  1077                           tblptrl	equ	0xFF6
  1078                           tablat	equ	0xFF5
  1079                           prodh	equ	0xFF4
  1080                           prodl	equ	0xFF3
  1081                           intcon	equ	0xFF2
  1082                           postinc0	equ	0xFEE
  1083                           wreg	equ	0xFE8
  1084                           indf1	equ	0xFE7
  1085                           fsr1h	equ	0xFE2
  1086                           fsr1l	equ	0xFE1
  1087                           indf2	equ	0xFDF
  1088                           postinc2	equ	0xFDE
  1089                           postdec2	equ	0xFDD
  1090                           plusw2	equ	0xFDB
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           status	equ	0xFD8
  1094                           
  1095                           ; 0 bytes @ 0x51
  1096 ;;
  1097 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1098 ;;
  1099 ;; *************** function _main *****************
  1100 ;; Defined at:
  1101 ;;		line 167 in file "../main.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;		None
  1106 ;; Return value:  Size  Location     Type
  1107 ;;		None               void
  1108 ;; Registers used:
  1109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : F/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1119 ;;Total ram usage:        0 bytes
  1120 ;; Hardware stack levels required when called:    9
  1121 ;; This function calls:
  1122 ;;		_init
  1123 ;;		_vscp_check_pstorage
  1124 ;;		_init_app_eeprom
  1125 ;;		_init_app_ram
  1126 ;;		_vscp_init
  1127 ;;		_readEEPROM
  1128 ;;		_writeControlReg
  1129 ;;		_writeEEPROM
  1130 ;;		_vscp_getEvent
  1131 ;;		_vscp_goActiveState
  1132 ;;		_vscp_handleProbeState
  1133 ;;		_vscp_handleProtocolEvent
  1134 ;;		_doDM
  1135 ;;		_vscp_error
  1136 ;;		_vscp_doOneSecondWork
  1137 ;;		_doApplicationOneSecondWork
  1138 ;;		_doWork
  1139 ;; This function is called by:
  1140 ;;		Startup code after reset
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text0
  1145  001EA6                     __ptext0:
  1146                           	opt stack 0
  1147  001EA6                     _main:
  1148                           	opt stack 22
  1149                           
  1150                           ;main.c: 168: init();
  1151                           
  1152                           ;incstack = 0
  1153                           ;incstack = 0
  1154  001EA6  EC7E  F015         	call	_init	;wreg free
  1155                           
  1156                           ;main.c: 172: if ( !vscp_check_pstorage() ) {
  1157  001EAA  ECAE  F016         	call	_vscp_check_pstorage	;wreg free
  1158  001EAE  0900               	iorlw	0
  1159  001EB0  E104               	bnz	l6893
  1160                           
  1161                           ;main.c: 175: init_app_eeprom();
  1162  001EB2  EC66  F013         	call	_init_app_eeprom	;wreg free
  1163                           
  1164                           ;main.c: 176: init_app_ram();
  1165  001EB6  EC7A  F017         	call	_init_app_ram	;wreg free
  1166  001EBA                     l6893:
  1167                           
  1168                           ;main.c: 179: }
  1169                           ;main.c: 181: vscp_init();
  1170  001EBA  EC1C  F015         	call	_vscp_init	;wreg free
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 184: writeControlReg( 0, readEEPROM( 0x21 + 2 ) );
  1174  001EBE  6A09               	clrf	?_readEEPROM+1,c
  1175  001EC0  0E23               	movlw	35
  1176  001EC2  6E08               	movwf	?_readEEPROM,c
  1177  001EC4  EC68  F017         	call	_readEEPROM	;wreg free
  1178  001EC8  6E11               	movwf	?_writeControlReg,c
  1179  001ECA  0E00               	movlw	0
  1180  001ECC  EC4C  F00D         	call	_writeControlReg
  1181                           
  1182                           ;main.c: 185: writeControlReg( 1, readEEPROM( 0x21 + 3 ) );
  1183  001ED0  6A09               	clrf	?_readEEPROM+1,c
  1184  001ED2  0E24               	movlw	36
  1185  001ED4  6E08               	movwf	?_readEEPROM,c
  1186  001ED6  EC68  F017         	call	_readEEPROM	;wreg free
  1187  001EDA  6E11               	movwf	?_writeControlReg,c
  1188  001EDC  0E01               	movlw	1
  1189  001EDE  EC4C  F00D         	call	_writeControlReg
  1190                           
  1191                           ;main.c: 186: writeControlReg( 2, readEEPROM( 0x21 + 4 ) );
  1192  001EE2  6A09               	clrf	?_readEEPROM+1,c
  1193  001EE4  0E25               	movlw	37
  1194  001EE6  6E08               	movwf	?_readEEPROM,c
  1195  001EE8  EC68  F017         	call	_readEEPROM	;wreg free
  1196  001EEC  6E11               	movwf	?_writeControlReg,c
  1197  001EEE  0E02               	movlw	2
  1198  001EF0  EC4C  F00D         	call	_writeControlReg
  1199  001EF4                     l145:
  1200  001EF4  0004               	clrwdt		;# 
  1201                           
  1202                           ;main.c: 192: if ( ( vscp_initbtncnt > 250 ) &&
  1203                           ;main.c: 193: ( 0x01 != vscp_node_state ) ) {
  1204  001EF6  0EFA               	movlw	250
  1205  001EF8  0100               	movlb	0	; () banked
  1206  001EFA  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1207  001EFC  D00C               	goto	l6909
  1208                           
  1209                           ; BSR set to: 0
  1210  001EFE  0571               	decf	_vscp_node_state& (0+255),w,b
  1211  001F00  E00A               	bz	l6909
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;main.c: 196: vscp_nickname = 0xff;
  1215  001F02  6970               	setf	_vscp_nickname& (0+255),b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 197: writeEEPROM( 0x01, 0xff );
  1219  001F04  6A09               	clrf	?_writeEEPROM+1,c
  1220  001F06  0E01               	movlw	1
  1221  001F08  6E08               	movwf	?_writeEEPROM,c
  1222  001F0A  0EFF               	movlw	255
  1223  001F0C  680A               	setf	?_writeEEPROM+2,c
  1224  001F0E  EC59  F016         	call	_writeEEPROM	;wreg free
  1225                           
  1226                           ;main.c: 198: vscp_init();
  1227  001F12  EC1C  F015         	call	_vscp_init	;wreg free
  1228  001F16                     l6909:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 200: }
  1232                           ;main.c: 203: vscp_imsg.flags = 0;
  1233  001F16  6B75               	clrf	_vscp_imsg& (0+255),b
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 204: vscp_getEvent();
  1237  001F18  ECE1  F015         	call	_vscp_getEvent	;wreg free
  1238                           
  1239                           ;main.c: 206: switch ( vscp_node_state ) {
  1240  001F1C  D01C               	goto	l6933
  1241  001F1E                     l6913:
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 211: if (0xff == vscp_nickname) {
  1245  001F1E  2970               	incf	_vscp_nickname& (0+255),w,b
  1246  001F20  E103               	bnz	l6917
  1247                           
  1248                           ; BSR set to: 0
  1249                           ;main.c: 213: vscp_node_state = 0x01;
  1250  001F22  0E01               	movlw	1
  1251  001F24  6F71               	movwf	_vscp_node_state& (0+255),b
  1252                           
  1253                           ;main.c: 214: } else {
  1254  001F26  D023               	goto	l6935
  1255  001F28                     l6917:
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 216: vscp_node_state = 0x03;
  1259  001F28  0E03               	movlw	3
  1260  001F2A  6F71               	movwf	_vscp_node_state& (0+255),b
  1261  001F2C                     l6919:
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 217: vscp_goActiveState();
  1265  001F2C  ECDC  F016         	call	_vscp_goActiveState	;wreg free
  1266  001F30  D01E               	goto	l6935
  1267  001F32                     l6921:
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 222: vscp_handleProbeState();
  1271  001F32  ECAF  F012         	call	_vscp_handleProbeState	;wreg free
  1272                           
  1273                           ;main.c: 223: break;
  1274  001F36  D01B               	goto	l6935
  1275  001F38                     l154:
  1276                           
  1277                           ; BSR set to: 0
  1278                           ;main.c: 232: if (vscp_imsg.flags & 0x80) {
  1279  001F38  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1280  001F3A  D019               	goto	l6935
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 234: if ( 0 == vscp_imsg.vscp_class ) {
  1284  001F3C  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1285  001F3E  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1286  001F40  B4D8               	btfsc	status,2,c
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 237: vscp_handleProtocolEvent();
  1290  001F42  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1291                           
  1292                           ;main.c: 239: }
  1293                           ;main.c: 241: doDM();
  1294  001F46  EC87  F00A         	call	_doDM	;wreg free
  1295  001F4A  D011               	goto	l6935
  1296  001F4C                     l6929:
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 247: vscp_error();
  1300  001F4C  ECB7  F017         	call	_vscp_error	;wreg free
  1301                           
  1302                           ;main.c: 248: break;
  1303  001F50  D00E               	goto	l6935
  1304  001F52                     l158:
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;main.c: 251: vscp_node_state = 0x00;
  1308  001F52  6B71               	clrf	_vscp_node_state& (0+255),b
  1309                           
  1310                           ;main.c: 252: break;
  1311  001F54  D00C               	goto	l6935
  1312  001F56                     l6933:
  1313  001F56  0100               	movlb	0	; () banked
  1314  001F58  5171               	movf	_vscp_node_state& (0+255),w,b
  1315                           
  1316                           ; Switch size 1, requested type "space"
  1317                           ; Number of cases is 5, Range of values is 0 to 4
  1318                           ; switch strategies available:
  1319                           ; Name         Instructions Cycles
  1320                           ; simple_byte           16     9 (average)
  1321                           ;	Chosen strategy is simple_byte
  1322  001F5A  E0E1               	bz	l6913
  1323  001F5C  0A01               	xorlw	1	; case 1
  1324  001F5E  E0E9               	bz	l6921
  1325  001F60  0A03               	xorlw	3	; case 2
  1326  001F62  E0E4               	bz	l6919
  1327  001F64  0A01               	xorlw	1	; case 3
  1328  001F66  E0E8               	bz	l154
  1329  001F68  0A07               	xorlw	7	; case 4
  1330  001F6A  E0F0               	bz	l6929
  1331  001F6C  D7F2               	goto	l158
  1332  001F6E                     l6935:
  1333                           
  1334                           ;main.c: 257: if ( measurement_clock > 1000 ) {
  1335  001F6E  0EE9               	movlw	233
  1336  001F70  0100               	movlb	0	; () banked
  1337  001F72  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1338  001F74  0E03               	movlw	3
  1339  001F76  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1340  001F78  0E00               	movlw	0
  1341  001F7A  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1342  001F7C  0E00               	movlw	0
  1343  001F7E  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1344  001F80  E30C               	bnc	l6947
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 259: measurement_clock = 0;
  1348  001F82  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1349  001F84  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1350  001F86  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1351  001F88  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 261: sendTimer++;
  1355  001F8A  2A55               	incf	_sendTimer,f,c
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;main.c: 264: vscp_doOneSecondWork();
  1359  001F8C  ECF4  F014         	call	_vscp_doOneSecondWork	;wreg free
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;main.c: 268: if ( 0x03 == vscp_node_state ) {
  1363  001F90  5171               	movf	_vscp_node_state& (0+255),w,b
  1364  001F92  0A03               	xorlw	3
  1365  001F94  B4D8               	btfsc	status,2,c
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;main.c: 271: doApplicationOneSecondWork();
  1369  001F96  ECBA  F017         	call	_doApplicationOneSecondWork	;wreg free
  1370  001F9A                     l6947:
  1371                           
  1372                           ; BSR set to: 0
  1373                           ;main.c: 273: }
  1374                           ;main.c: 275: }
  1375                           ;main.c: 278: if ( seconds > 59 ) {
  1376  001F9A  0E3B               	movlw	59
  1377  001F9C  656A               	cpfsgt	_seconds& (0+255),b
  1378  001F9E  D00B               	goto	l6963
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 280: seconds = 0;
  1382  001FA0  6B6A               	clrf	_seconds& (0+255),b
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 281: minutes++;
  1386  001FA2  2B69               	incf	_minutes& (0+255),f,b
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 283: if ( minutes > 59 ) {
  1390  001FA4  0E3B               	movlw	59
  1391  001FA6  6569               	cpfsgt	_minutes& (0+255),b
  1392  001FA8  D002               	goto	l6959
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 284: minutes = 0;
  1396  001FAA  6B69               	clrf	_minutes& (0+255),b
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 285: hours++;
  1400  001FAC  2B68               	incf	_hours& (0+255),f,b
  1401  001FAE                     l6959:
  1402                           
  1403                           ; BSR set to: 0
  1404                           ;main.c: 286: }
  1405                           ;main.c: 288: if ( hours > 23 ) hours = 0;
  1406  001FAE  0E17               	movlw	23
  1407  001FB0  6568               	cpfsgt	_hours& (0+255),b
  1408  001FB2  D001               	goto	l6963
  1409                           
  1410                           ; BSR set to: 0
  1411  001FB4  6B68               	clrf	_hours& (0+255),b
  1412  001FB6                     l6963:
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;main.c: 290: }
  1416                           ;main.c: 292: doWork();
  1417  001FB6  ECB9  F017         	call	_doWork	;wreg free
  1418  001FBA  D79C               	goto	l145
  1419  001FBC                     __end_of_main:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           prodh	equ	0xFF4
  1426                           prodl	equ	0xFF3
  1427                           intcon	equ	0xFF2
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           indf1	equ	0xFE7
  1431                           fsr1h	equ	0xFE2
  1432                           fsr1l	equ	0xFE1
  1433                           indf2	equ	0xFDF
  1434                           postinc2	equ	0xFDE
  1435                           postdec2	equ	0xFDD
  1436                           plusw2	equ	0xFDB
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           
  1441 ;; *************** function _doWork *****************
  1442 ;; Defined at:
  1443 ;;		line 574 in file "../main.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;		None
  1446 ;; Auto vars:     Size  Location     Type
  1447 ;;		None
  1448 ;; Return value:  Size  Location     Type
  1449 ;;		None               void
  1450 ;; Registers used:
  1451 ;;		wreg, status,2, status,0
  1452 ;; Tracked objects:
  1453 ;;		On entry : F/0
  1454 ;;		On exit  : F/0
  1455 ;;		Unchanged: F/0
  1456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1461 ;;Total ram usage:        0 bytes
  1462 ;; Hardware stack levels used:    1
  1463 ;; Hardware stack levels required when called:    2
  1464 ;; This function calls:
  1465 ;;		Nothing
  1466 ;; This function is called by:
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text1
  1472  002F72                     __ptext1:
  1473                           	opt stack 0
  1474  002F72                     _doWork:
  1475                           	opt stack 28
  1476                           
  1477                           ; BSR set to: 0
  1478                           
  1479                           ; BSR set to: 0
  1480                           
  1481                           ; BSR set to: 0
  1482                           ;incstack = 0
  1483                           ;incstack = 0
  1484  002F72  0012               	return	
  1485  002F74                     __end_of_doWork:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           intcon	equ	0xFF2
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           indf1	equ	0xFE7
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           indf2	equ	0xFDF
  1500                           postinc2	equ	0xFDE
  1501                           postdec2	equ	0xFDD
  1502                           plusw2	equ	0xFDB
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _doApplicationOneSecondWork *****************
  1508 ;; Defined at:
  1509 ;;		line 456 in file "../main.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;		None               void
  1516 ;; Registers used:
  1517 ;;		None
  1518 ;; Tracked objects:
  1519 ;;		On entry : F/0
  1520 ;;		On exit  : F/0
  1521 ;;		Unchanged: F/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1527 ;;Total ram usage:        0 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    2
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text2
  1538  002F74                     __ptext2:
  1539                           	opt stack 0
  1540  002F74                     _doApplicationOneSecondWork:
  1541                           	opt stack 28
  1542                           
  1543                           ; BSR set to: 0
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;incstack = 0
  1547                           ;incstack = 0
  1548  002F74  0012               	return	
  1549  002F76                     __end_of_doApplicationOneSecondWork:
  1550                           	opt stack 0
  1551                           tblptru	equ	0xFF8
  1552                           tblptrh	equ	0xFF7
  1553                           tblptrl	equ	0xFF6
  1554                           tablat	equ	0xFF5
  1555                           prodh	equ	0xFF4
  1556                           prodl	equ	0xFF3
  1557                           intcon	equ	0xFF2
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           indf1	equ	0xFE7
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           indf2	equ	0xFDF
  1564                           postinc2	equ	0xFDE
  1565                           postdec2	equ	0xFDD
  1566                           plusw2	equ	0xFDB
  1567                           fsr2h	equ	0xFDA
  1568                           fsr2l	equ	0xFD9
  1569                           status	equ	0xFD8
  1570                           
  1571 ;; *************** function _vscp_doOneSecondWork *****************
  1572 ;; Defined at:
  1573 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;		None
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;		None
  1578 ;; Return value:  Size  Location     Type
  1579 ;;		None               void
  1580 ;; Registers used:
  1581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : F/0
  1584 ;;		On exit  : F/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1591 ;;Total ram usage:        1 bytes
  1592 ;; Hardware stack levels used:    1
  1593 ;; Hardware stack levels required when called:    8
  1594 ;; This function calls:
  1595 ;;		_vscp_getZone
  1596 ;;		_vscp_getSubzone
  1597 ;;		_vscp_sendHeartBeat
  1598 ;; This function is called by:
  1599 ;;		_main
  1600 ;; This function uses a non-reentrant model
  1601 ;;
  1602                           
  1603                           	psect	text3
  1604  0029E8                     __ptext3:
  1605                           	opt stack 0
  1606  0029E8                     _vscp_doOneSecondWork:
  1607                           	opt stack 22
  1608                           
  1609                           ; BSR set to: 0
  1610                           ;vscp_firmware.c: 518: ++vscp_second;
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;incstack = 0
  1614                           ;incstack = 0
  1615  0029E8  2B74               	incf	_vscp_second& (0+255),f,b
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  1619  0029EA  0E3B               	movlw	59
  1620  0029EC  6574               	cpfsgt	_vscp_second& (0+255),b
  1621  0029EE  D00D               	goto	l6277
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;vscp_firmware.c: 521: vscp_second = 0;
  1625  0029F0  6B74               	clrf	_vscp_second& (0+255),b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;vscp_firmware.c: 522: vscp_minute++;
  1629  0029F2  2B6F               	incf	_vscp_minute& (0+255),f,b
  1630                           
  1631                           ; BSR set to: 0
  1632                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  1633  0029F4  5171               	movf	_vscp_node_state& (0+255),w,b
  1634  0029F6  0A03               	xorlw	3
  1635  0029F8  E108               	bnz	l6277
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  1639                           ;vscp_firmware.c: 527: vscp_getSubzone());
  1640  0029FA  EC95  F017         	call	_vscp_getSubzone	;wreg free
  1641  0029FE  0100               	movlb	0	; () banked
  1642  002A00  6FA4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1643  002A02  EC9A  F017         	call	_vscp_getZone	;wreg free
  1644  002A06  EC20  F016         	call	_vscp_sendHeartBeat
  1645  002A0A                     l6277:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;vscp_firmware.c: 528: }
  1649                           ;vscp_firmware.c: 529: }
  1650                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  1651  002A0A  0E3B               	movlw	59
  1652  002A0C  656F               	cpfsgt	_vscp_minute& (0+255),b
  1653  002A0E  D002               	goto	l6283
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;vscp_firmware.c: 532: vscp_minute = 0;
  1657  002A10  6B6F               	clrf	_vscp_minute& (0+255),b
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;vscp_firmware.c: 533: vscp_hour++;
  1661  002A12  2B6D               	incf	_vscp_hour& (0+255),f,b
  1662  002A14                     l6283:
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;vscp_firmware.c: 534: }
  1666                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  1667  002A14  0E17               	movlw	23
  1668  002A16  656D               	cpfsgt	_vscp_hour& (0+255),b
  1669  002A18  D001               	goto	l6287
  1670                           
  1671                           ; BSR set to: 0
  1672  002A1A  6B6D               	clrf	_vscp_hour& (0+255),b
  1673  002A1C                     l6287:
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  1677  002A1C  5171               	movf	_vscp_node_state& (0+255),w,b
  1678  002A1E  0A03               	xorlw	3
  1679  002A20  A4D8               	btfss	status,2,c
  1680  002A22  0012               	return	
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  1684  002A24  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  1688  002A26  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1689  002A2A  0E0F               	movlw	15
  1690  002A2C  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1691  002A2E  0E02               	movlw	2
  1692  002A30  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1693  002A32  B0D8               	btfsc	status,0,c
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  1697  002A34  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1698                           
  1699                           ; BSR set to: 0
  1700  002A36  0012               	return	
  1701  002A38                     __end_of_vscp_doOneSecondWork:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           prodh	equ	0xFF4
  1708                           prodl	equ	0xFF3
  1709                           intcon	equ	0xFF2
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           indf1	equ	0xFE7
  1713                           fsr1h	equ	0xFE2
  1714                           fsr1l	equ	0xFE1
  1715                           indf2	equ	0xFDF
  1716                           postinc2	equ	0xFDE
  1717                           postdec2	equ	0xFDD
  1718                           plusw2	equ	0xFDB
  1719                           fsr2h	equ	0xFDA
  1720                           fsr2l	equ	0xFD9
  1721                           status	equ	0xFD8
  1722                           
  1723 ;; *************** function _vscp_sendHeartBeat *****************
  1724 ;; Defined at:
  1725 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;  zone            1    wreg     unsigned char 
  1728 ;;  subzone         1   20[BANK0 ] unsigned char 
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;  zone            1   75[COMRAM] unsigned char 
  1731 ;; Return value:  Size  Location     Type
  1732 ;;		None               void
  1733 ;; Registers used:
  1734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : F/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1740 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1743 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1744 ;;Total ram usage:        2 bytes
  1745 ;; Hardware stack levels used:    1
  1746 ;; Hardware stack levels required when called:    7
  1747 ;; This function calls:
  1748 ;;		_vscp_sendEvent
  1749 ;; This function is called by:
  1750 ;;		_vscp_doOneSecondWork
  1751 ;; This function uses a non-reentrant model
  1752 ;;
  1753                           
  1754                           	psect	text4
  1755  002C40                     __ptext4:
  1756                           	opt stack 0
  1757  002C40                     _vscp_sendHeartBeat:
  1758                           	opt stack 22
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;incstack = 0
  1762                           ;incstack = 0
  1763                           ;vscp_sendHeartBeat@zone stored from wreg
  1764  002C40  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1765                           
  1766                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  1767  002C44  0E83               	movlw	131
  1768  002C46  0100               	movlb	0	; () banked
  1769  002C48  6F83               	movwf	_vscp_omsg& (0+255),b
  1770                           
  1771                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  1772  002C4A  0E07               	movlw	7
  1773  002C4C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1774                           
  1775                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  1776  002C4E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1777  002C50  0E14               	movlw	20
  1778  002C52  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1779                           
  1780                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  1781  002C54  0E09               	movlw	9
  1782  002C56  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  1786  002C58  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  1790  002C5A  C04C  F089         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  1794  002C5E  C0A4  F08A         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1795                           
  1796                           ; BSR set to: 0
  1797                           ;vscp_firmware.c: 380: vscp_sendEvent();
  1798  002C62  EF33  F016         	goto	_vscp_sendEvent	;wreg free
  1799  002C66                     __end_of_vscp_sendHeartBeat:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           prodh	equ	0xFF4
  1806                           prodl	equ	0xFF3
  1807                           intcon	equ	0xFF2
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           indf1	equ	0xFE7
  1811                           fsr1h	equ	0xFE2
  1812                           fsr1l	equ	0xFE1
  1813                           indf2	equ	0xFDF
  1814                           postinc2	equ	0xFDE
  1815                           postdec2	equ	0xFDD
  1816                           plusw2	equ	0xFDB
  1817                           fsr2h	equ	0xFDA
  1818                           fsr2l	equ	0xFD9
  1819                           status	equ	0xFD8
  1820                           
  1821 ;; *************** function _vscp_getSubzone *****************
  1822 ;; Defined at:
  1823 ;;		line 563 in file "../main.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      unsigned char 
  1830 ;; Registers used:
  1831 ;;		wreg, status,2, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : F/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    3
  1844 ;; This function calls:
  1845 ;;		_readEEPROM
  1846 ;; This function is called by:
  1847 ;;		_vscp_doOneSecondWork
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text5
  1852  002F2A                     __ptext5:
  1853                           	opt stack 0
  1854  002F2A                     _vscp_getSubzone:
  1855                           	opt stack 26
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 564: return readEEPROM( 0x21 + 1 );
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;incstack = 0
  1862                           ;incstack = 0
  1863  002F2A  6A09               	clrf	?_readEEPROM+1,c
  1864  002F2C  0E22               	movlw	34
  1865  002F2E  6E08               	movwf	?_readEEPROM,c
  1866  002F30  EF68  F017         	goto	_readEEPROM	;wreg free
  1867  002F34                     __end_of_vscp_getSubzone:
  1868                           	opt stack 0
  1869                           tblptru	equ	0xFF8
  1870                           tblptrh	equ	0xFF7
  1871                           tblptrl	equ	0xFF6
  1872                           tablat	equ	0xFF5
  1873                           prodh	equ	0xFF4
  1874                           prodl	equ	0xFF3
  1875                           intcon	equ	0xFF2
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           indf1	equ	0xFE7
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           indf2	equ	0xFDF
  1882                           postinc2	equ	0xFDE
  1883                           postdec2	equ	0xFDD
  1884                           plusw2	equ	0xFDB
  1885                           fsr2h	equ	0xFDA
  1886                           fsr2l	equ	0xFD9
  1887                           status	equ	0xFD8
  1888                           
  1889 ;; *************** function _vscp_getZone *****************
  1890 ;; Defined at:
  1891 ;;		line 554 in file "../main.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      unsigned char 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, cstack
  1900 ;; Tracked objects:
  1901 ;;		On entry : F/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; Hardware stack levels required when called:    3
  1912 ;; This function calls:
  1913 ;;		_readEEPROM
  1914 ;; This function is called by:
  1915 ;;		_vscp_doOneSecondWork
  1916 ;; This function uses a non-reentrant model
  1917 ;;
  1918                           
  1919                           	psect	text6
  1920  002F34                     __ptext6:
  1921                           	opt stack 0
  1922  002F34                     _vscp_getZone:
  1923                           	opt stack 26
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 555: return readEEPROM( 0x21 + 0 );
  1927                           
  1928                           ;incstack = 0
  1929                           ;incstack = 0
  1930  002F34  6A09               	clrf	?_readEEPROM+1,c
  1931  002F36  0E21               	movlw	33
  1932  002F38  6E08               	movwf	?_readEEPROM,c
  1933  002F3A  EF68  F017         	goto	_readEEPROM	;wreg free
  1934  002F3E                     __end_of_vscp_getZone:
  1935                           	opt stack 0
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           prodh	equ	0xFF4
  1941                           prodl	equ	0xFF3
  1942                           intcon	equ	0xFF2
  1943                           postinc0	equ	0xFEE
  1944                           wreg	equ	0xFE8
  1945                           indf1	equ	0xFE7
  1946                           fsr1h	equ	0xFE2
  1947                           fsr1l	equ	0xFE1
  1948                           indf2	equ	0xFDF
  1949                           postinc2	equ	0xFDE
  1950                           postdec2	equ	0xFDD
  1951                           plusw2	equ	0xFDB
  1952                           fsr2h	equ	0xFDA
  1953                           fsr2l	equ	0xFD9
  1954                           status	equ	0xFD8
  1955                           
  1956 ;; *************** function _vscp_error *****************
  1957 ;; Defined at:
  1958 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		None
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    2
  1979 ;; This function calls:
  1980 ;;		Nothing
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text7
  1987  002F6E                     __ptext7:
  1988                           	opt stack 0
  1989  002F6E                     _vscp_error:
  1990                           	opt stack 28
  1991                           
  1992                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  1993                           
  1994                           ;incstack = 0
  1995                           ;incstack = 0
  1996  002F6E  6A56               	clrf	_vscp_initledfunc,c
  1997  002F70  0012               	return	
  1998  002F72                     __end_of_vscp_error:
  1999                           	opt stack 0
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           prodh	equ	0xFF4
  2005                           prodl	equ	0xFF3
  2006                           intcon	equ	0xFF2
  2007                           postinc0	equ	0xFEE
  2008                           wreg	equ	0xFE8
  2009                           indf1	equ	0xFE7
  2010                           fsr1h	equ	0xFE2
  2011                           fsr1l	equ	0xFE1
  2012                           indf2	equ	0xFDF
  2013                           postinc2	equ	0xFDE
  2014                           postdec2	equ	0xFDD
  2015                           plusw2	equ	0xFDB
  2016                           fsr2h	equ	0xFDA
  2017                           fsr2l	equ	0xFD9
  2018                           status	equ	0xFD8
  2019                           
  2020 ;; *************** function _doDM *****************
  2021 ;; Defined at:
  2022 ;;		line 835 in file "../main.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  class_mask      2   27[BANK0 ] unsigned short 
  2027 ;;  class_filter    2   25[BANK0 ] unsigned short 
  2028 ;;  i               1   36[BANK0 ] unsigned char 
  2029 ;;  dmflags         1   35[BANK0 ] unsigned char 
  2030 ;;  type_mask       1   30[BANK0 ] unsigned char 
  2031 ;;  type_filter     1   29[BANK0 ] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;		None               void
  2034 ;; Registers used:
  2035 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : F/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2042 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2043 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2044 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2045 ;;Total ram usage:       15 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    8
  2048 ;; This function calls:
  2049 ;;		_readEEPROM
  2050 ;;		_actionSet
  2051 ;;		_actionClr
  2052 ;;		_actionSetAll
  2053 ;;		_actionClrAll
  2054 ;; This function is called by:
  2055 ;;		_main
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           	psect	text8
  2060  00150E                     __ptext8:
  2061                           	opt stack 0
  2062  00150E                     _doDM:
  2063                           	opt stack 22
  2064                           
  2065                           ;main.c: 836: unsigned char i;
  2066                           ;main.c: 837: unsigned char dmflags;
  2067                           ;main.c: 838: unsigned short class_filter;
  2068                           ;main.c: 839: unsigned short class_mask;
  2069                           ;main.c: 840: unsigned char type_filter;
  2070                           ;main.c: 841: unsigned char type_mask;
  2071                           ;main.c: 844: if ( 0 == vscp_imsg.vscp_class ) return;
  2072                           
  2073                           ;incstack = 0
  2074                           ;incstack = 0
  2075  00150E  0100               	movlb	0	; () banked
  2076  001510  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  2077  001512  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2078  001514  B4D8               	btfsc	status,2,c
  2079  001516  0012               	return	
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;main.c: 846: for (i = 0; i < 8; i++) {
  2083  001518  6BB4               	clrf	doDM@i& (0+255),b
  2084  00151A                     l7397:
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;main.c: 849: dmflags = readEEPROM( 0x21 + 23 +
  2088                           ;main.c: 850: 0 + 1 + (8 * i) );
  2089  00151A  51B4               	movf	doDM@i& (0+255),w,b
  2090  00151C  D8E2               	call	PL2	;call to abstracted procedure
  2091  00151E  0E39               	movlw	57
  2092  001520  25A6               	addwf	??_doDM& (0+255),w,b
  2093  001522  6E08               	movwf	?_readEEPROM,c
  2094  001524  0E00               	movlw	0
  2095  001526  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2096  001528  6E09               	movwf	?_readEEPROM+1,c
  2097  00152A  EC68  F017         	call	_readEEPROM	;wreg free
  2098  00152E  0100               	movlb	0	; () banked
  2099  001530  6FB3               	movwf	doDM@dmflags& (0+255),b
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;main.c: 853: if ( dmflags & 0x80 ) {
  2103  001532  AFB3               	btfss	doDM@dmflags& (0+255),7,b
  2104  001534  D0D0               	goto	l7451
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;main.c: 856: if ( ( dmflags & 0x40 ) &&
  2108                           ;main.c: 857: ( vscp_imsg.oaddr != readEEPROM( 0x21 + 23 +
  2109                           ;main.c: 858: 0 + (8 * i) ) ) ) {
  2110  001536  ADB3               	btfss	doDM@dmflags& (0+255),6,b
  2111  001538  D00E               	goto	l289
  2112                           
  2113                           ; BSR set to: 0
  2114  00153A  51B4               	movf	doDM@i& (0+255),w,b
  2115  00153C  D8D2               	call	PL2	;call to abstracted procedure
  2116  00153E  0E38               	movlw	56
  2117  001540  25A6               	addwf	??_doDM& (0+255),w,b
  2118  001542  6E08               	movwf	?_readEEPROM,c
  2119  001544  0E00               	movlw	0
  2120  001546  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2121  001548  6E09               	movwf	?_readEEPROM+1,c
  2122  00154A  EC68  F017         	call	_readEEPROM	;wreg free
  2123  00154E  0100               	movlb	0	; () banked
  2124  001550  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2125  001552  E001 D0C0          	bnz	l7451
  2126  001556                     l289:
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;main.c: 860: }
  2130                           ;main.c: 863: if ( dmflags & 0x10 ) {
  2131  001556  A9B3               	btfss	doDM@dmflags& (0+255),4,b
  2132  001558  D00B               	goto	l291
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;main.c: 864: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2136  00155A  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2137  00155C  E009               	bz	l291
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;main.c: 865: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  2141  00155E  6A09               	clrf	?_readEEPROM+1,c
  2142  001560  0E21               	movlw	33
  2143  001562  6E08               	movwf	?_readEEPROM,c
  2144  001564  EC68  F017         	call	_readEEPROM	;wreg free
  2145  001568  0100               	movlb	0	; () banked
  2146  00156A  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2147  00156C  E001 D0B3          	bnz	l7451
  2148  001570                     l291:
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;main.c: 867: }
  2152                           ;main.c: 868: }
  2153                           ;main.c: 869: }
  2154                           ;main.c: 872: if ( dmflags & 0x08 ) {
  2155  001570  A7B3               	btfss	doDM@dmflags& (0+255),3,b
  2156  001572  D00B               	goto	l7419
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;main.c: 873: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2160  001574  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2161  001576  E009               	bz	l7419
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;main.c: 874: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  2165  001578  6A09               	clrf	?_readEEPROM+1,c
  2166  00157A  0E21               	movlw	33
  2167  00157C  6E08               	movwf	?_readEEPROM,c
  2168  00157E  EC68  F017         	call	_readEEPROM	;wreg free
  2169  001582  0100               	movlb	0	; () banked
  2170  001584  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2171  001586  E001 D0A6          	bnz	l7451
  2172  00158A                     l7419:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;main.c: 876: }
  2176                           ;main.c: 877: }
  2177                           ;main.c: 878: }
  2178                           ;main.c: 880: class_filter = ( dmflags & 0x01)*256 +
  2179                           ;main.c: 881: readEEPROM( 0x21 + 23 +
  2180                           ;main.c: 882: 0 +
  2181                           ;main.c: 883: (8 * i) +
  2182                           ;main.c: 884: 3);
  2183  00158A  51B4               	movf	doDM@i& (0+255),w,b
  2184  00158C  0D08               	mullw	8
  2185  00158E  0E3B               	movlw	59
  2186  001590  24F3               	addwf	prodl,w,c
  2187  001592  6E08               	movwf	?_readEEPROM,c
  2188  001594  0E00               	movlw	0
  2189  001596  20F4               	addwfc	prodh,w,c
  2190  001598  6E09               	movwf	?_readEEPROM+1,c
  2191  00159A  EC68  F017         	call	_readEEPROM	;wreg free
  2192  00159E  0100               	movlb	0	; () banked
  2193  0015A0  6FA6               	movwf	??_doDM& (0+255),b
  2194  0015A2  51B3               	movf	doDM@dmflags& (0+255),w,b
  2195  0015A4  0B01               	andlw	1
  2196  0015A6  6FA8               	movwf	(??_doDM+2)& (0+255),b
  2197  0015A8  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2198  0015AA  51A6               	movf	??_doDM& (0+255),w,b
  2199  0015AC  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  2200  0015AE  6FA9               	movwf	doDM@class_filter& (0+255),b
  2201  0015B0  0E00               	movlw	0
  2202  0015B2  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  2203  0015B4  6FAA               	movwf	(doDM@class_filter+1)& (0+255),b
  2204                           
  2205                           ;main.c: 885: class_mask = ( dmflags & 0x02)*256 +
  2206                           ;main.c: 886: readEEPROM( 0x21 + 23 +
  2207                           ;main.c: 887: 0 +
  2208                           ;main.c: 888: (8 * i) +
  2209                           ;main.c: 889: 2);
  2210  0015B6  51B4               	movf	doDM@i& (0+255),w,b
  2211  0015B8  0D08               	mullw	8
  2212  0015BA  0E3A               	movlw	58
  2213  0015BC  24F3               	addwf	prodl,w,c
  2214  0015BE  6E08               	movwf	?_readEEPROM,c
  2215  0015C0  0E00               	movlw	0
  2216  0015C2  20F4               	addwfc	prodh,w,c
  2217  0015C4  6E09               	movwf	?_readEEPROM+1,c
  2218  0015C6  EC68  F017         	call	_readEEPROM	;wreg free
  2219  0015CA  0100               	movlb	0	; () banked
  2220  0015CC  6FA6               	movwf	??_doDM& (0+255),b
  2221  0015CE  51B3               	movf	doDM@dmflags& (0+255),w,b
  2222  0015D0  0B02               	andlw	2
  2223  0015D2  6FA8               	movwf	(??_doDM+2)& (0+255),b
  2224  0015D4  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2225  0015D6  51A6               	movf	??_doDM& (0+255),w,b
  2226  0015D8  25A7               	addwf	(??_doDM+1)& (0+255),w,b
  2227  0015DA  6FAB               	movwf	doDM@class_mask& (0+255),b
  2228  0015DC  0E00               	movlw	0
  2229  0015DE  21A8               	addwfc	(??_doDM+2)& (0+255),w,b
  2230  0015E0  6FAC               	movwf	(doDM@class_mask+1)& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;main.c: 890: type_filter = readEEPROM( 0x21 + 23 +
  2234                           ;main.c: 891: 0 +
  2235                           ;main.c: 892: (8 * i) +
  2236                           ;main.c: 893: 5);
  2237  0015E2  51B4               	movf	doDM@i& (0+255),w,b
  2238  0015E4  D87E               	call	PL2	;call to abstracted procedure
  2239  0015E6  0E3D               	movlw	61
  2240  0015E8  25A6               	addwf	??_doDM& (0+255),w,b
  2241  0015EA  6E08               	movwf	?_readEEPROM,c
  2242  0015EC  0E00               	movlw	0
  2243  0015EE  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2244  0015F0  6E09               	movwf	?_readEEPROM+1,c
  2245  0015F2  EC68  F017         	call	_readEEPROM	;wreg free
  2246  0015F6  0100               	movlb	0	; () banked
  2247  0015F8  6FAD               	movwf	doDM@type_filter& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;main.c: 894: type_mask = readEEPROM( 0x21 + 23 +
  2251                           ;main.c: 895: 0 +
  2252                           ;main.c: 896: (8 * i) +
  2253                           ;main.c: 897: 4);
  2254  0015FA  51B4               	movf	doDM@i& (0+255),w,b
  2255  0015FC  D872               	call	PL2	;call to abstracted procedure
  2256  0015FE  0E3C               	movlw	60
  2257  001600  25A6               	addwf	??_doDM& (0+255),w,b
  2258  001602  6E08               	movwf	?_readEEPROM,c
  2259  001604  0E00               	movlw	0
  2260  001606  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2261  001608  6E09               	movwf	?_readEEPROM+1,c
  2262  00160A  EC68  F017         	call	_readEEPROM	;wreg free
  2263  00160E  0100               	movlb	0	; () banked
  2264  001610  6FAE               	movwf	doDM@type_mask& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;main.c: 899: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2268                           ;main.c: 900: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2269  001612  EE20  F077         	lfsr	2,_vscp_imsg+2
  2270  001616  CFDE F0A6          	movff	postinc2,??_doDM
  2271  00161A  CFDD F0A7          	movff	postdec2,??_doDM+1
  2272  00161E  51A9               	movf	doDM@class_filter& (0+255),w,b
  2273  001620  1BA6               	xorwf	??_doDM& (0+255),f,b
  2274  001622  51AA               	movf	(doDM@class_filter+1)& (0+255),w,b
  2275  001624  1BA7               	xorwf	(??_doDM+1)& (0+255),f,b
  2276  001626  51AB               	movf	doDM@class_mask& (0+255),w,b
  2277  001628  17A6               	andwf	??_doDM& (0+255),f,b
  2278  00162A  51AC               	movf	(doDM@class_mask+1)& (0+255),w,b
  2279  00162C  17A7               	andwf	(??_doDM+1)& (0+255),f,b
  2280  00162E  51A7               	movf	(??_doDM+1)& (0+255),w,b
  2281  001630  11A6               	iorwf	??_doDM& (0+255),w,b
  2282  001632  E151               	bnz	l7451
  2283                           
  2284                           ; BSR set to: 0
  2285  001634  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2286  001636  19AD               	xorwf	doDM@type_filter& (0+255),w,b
  2287  001638  15AE               	andwf	doDM@type_mask& (0+255),w,b
  2288  00163A  E039               	bz	l7449
  2289  00163C  D04C               	goto	l7451
  2290  00163E                     l7431:
  2291                           
  2292                           ;main.c: 911: actionSet( dmflags,
  2293                           ;main.c: 912: readEEPROM( 0x21 + 23 +
  2294                           ;main.c: 913: 0 + (8 * i) +
  2295                           ;main.c: 914: 7 ) );
  2296  00163E  0100               	movlb	0	; () banked
  2297  001640  51B4               	movf	doDM@i& (0+255),w,b
  2298  001642  D84F               	call	PL2	;call to abstracted procedure
  2299  001644  D85A               	call	PL6	;call to abstracted procedure
  2300  001646  EC68  F017         	call	_readEEPROM	;wreg free
  2301  00164A  0100               	movlb	0	; () banked
  2302  00164C  6FAF               	movwf	_doDM$1986& (0+255),b
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;main.c: 911: actionSet( dmflags,
  2306                           ;main.c: 912: readEEPROM( 0x21 + 23 +
  2307                           ;main.c: 913: 0 + (8 * i) +
  2308                           ;main.c: 914: 7 ) );
  2309  00164E  C0AF  F04F         	movff	_doDM$1986,?_actionSet
  2310  001652  51B3               	movf	doDM@dmflags& (0+255),w,b
  2311  001654  EC47  F012         	call	_actionSet
  2312                           
  2313                           ;main.c: 915: break;
  2314  001658  D03E               	goto	l7451
  2315  00165A                     l7435:
  2316                           
  2317                           ;main.c: 918: actionClr( dmflags,
  2318                           ;main.c: 919: readEEPROM( 0x21 + 23 +
  2319                           ;main.c: 920: 0 + (8 * i) +
  2320                           ;main.c: 921: 7 ) );
  2321  00165A  0100               	movlb	0	; () banked
  2322  00165C  51B4               	movf	doDM@i& (0+255),w,b
  2323  00165E  D841               	call	PL2	;call to abstracted procedure
  2324  001660  D84C               	call	PL6	;call to abstracted procedure
  2325  001662  EC68  F017         	call	_readEEPROM	;wreg free
  2326  001666  0100               	movlb	0	; () banked
  2327  001668  6FB0               	movwf	_doDM$1987& (0+255),b
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;main.c: 918: actionClr( dmflags,
  2331                           ;main.c: 919: readEEPROM( 0x21 + 23 +
  2332                           ;main.c: 920: 0 + (8 * i) +
  2333                           ;main.c: 921: 7 ) );
  2334  00166A  C0B0  F04F         	movff	_doDM$1987,?_actionClr
  2335  00166E  51B3               	movf	doDM@dmflags& (0+255),w,b
  2336  001670  ECDF  F011         	call	_actionClr
  2337                           
  2338                           ;main.c: 922: break;
  2339  001674  D030               	goto	l7451
  2340  001676                     l7439:
  2341                           
  2342                           ;main.c: 925: actionSetAll( dmflags,
  2343                           ;main.c: 926: readEEPROM( 0x21 + 23 +
  2344                           ;main.c: 927: 0 + (8 * i) +
  2345                           ;main.c: 928: 7 ) );
  2346  001676  0100               	movlb	0	; () banked
  2347  001678  51B4               	movf	doDM@i& (0+255),w,b
  2348  00167A  D833               	call	PL2	;call to abstracted procedure
  2349  00167C  D83E               	call	PL6	;call to abstracted procedure
  2350  00167E  EC68  F017         	call	_readEEPROM	;wreg free
  2351  001682  0100               	movlb	0	; () banked
  2352  001684  6FB1               	movwf	_doDM$1988& (0+255),b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 925: actionSetAll( dmflags,
  2356                           ;main.c: 926: readEEPROM( 0x21 + 23 +
  2357                           ;main.c: 927: 0 + (8 * i) +
  2358                           ;main.c: 928: 7 ) );
  2359  001686  C0B1  F04F         	movff	_doDM$1988,?_actionSetAll
  2360  00168A  51B3               	movf	doDM@dmflags& (0+255),w,b
  2361  00168C  ECB1  F015         	call	_actionSetAll
  2362                           
  2363                           ;main.c: 929: break;
  2364  001690  D022               	goto	l7451
  2365  001692                     l7443:
  2366                           
  2367                           ;main.c: 932: actionClrAll( dmflags,
  2368                           ;main.c: 933: readEEPROM( 0x21 + 23 +
  2369                           ;main.c: 934: 0 + (8 * i) +
  2370                           ;main.c: 935: 7 ) );
  2371  001692  0100               	movlb	0	; () banked
  2372  001694  51B4               	movf	doDM@i& (0+255),w,b
  2373  001696  D825               	call	PL2	;call to abstracted procedure
  2374  001698  D830               	call	PL6	;call to abstracted procedure
  2375  00169A  EC68  F017         	call	_readEEPROM	;wreg free
  2376  00169E  0100               	movlb	0	; () banked
  2377  0016A0  6FB2               	movwf	_doDM$1989& (0+255),b
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;main.c: 932: actionClrAll( dmflags,
  2381                           ;main.c: 933: readEEPROM( 0x21 + 23 +
  2382                           ;main.c: 934: 0 + (8 * i) +
  2383                           ;main.c: 935: 7 ) );
  2384  0016A2  C0B2  F04F         	movff	_doDM$1989,?_actionClrAll
  2385  0016A6  51B3               	movf	doDM@dmflags& (0+255),w,b
  2386  0016A8  EC99  F015         	call	_actionClrAll
  2387                           
  2388                           ;main.c: 936: break;
  2389  0016AC  D014               	goto	l7451
  2390  0016AE                     l7449:
  2391                           
  2392                           ; BSR set to: 0
  2393  0016AE  51B4               	movf	doDM@i& (0+255),w,b
  2394  0016B0  D818               	call	PL2	;call to abstracted procedure
  2395  0016B2  0E3E               	movlw	62
  2396  0016B4  25A6               	addwf	??_doDM& (0+255),w,b
  2397  0016B6  6E08               	movwf	?_readEEPROM,c
  2398  0016B8  0E00               	movlw	0
  2399  0016BA  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2400  0016BC  6E09               	movwf	?_readEEPROM+1,c
  2401  0016BE  EC68  F017         	call	_readEEPROM	;wreg free
  2402                           
  2403                           ; Switch size 1, requested type "space"
  2404                           ; Number of cases is 5, Range of values is 0 to 4
  2405                           ; switch strategies available:
  2406                           ; Name         Instructions Cycles
  2407                           ; simple_byte           16     9 (average)
  2408                           ;	Chosen strategy is simple_byte
  2409  0016C2  0A00               	xorlw	0	; case 0
  2410  0016C4  E008               	bz	l7451
  2411  0016C6  0A01               	xorlw	1	; case 1
  2412  0016C8  E0BA               	bz	l7431
  2413  0016CA  0A03               	xorlw	3	; case 2
  2414  0016CC  E0C6               	bz	l7435
  2415  0016CE  0A01               	xorlw	1	; case 3
  2416  0016D0  E0D2               	bz	l7439
  2417  0016D2  0A07               	xorlw	7	; case 4
  2418  0016D4  E0DE               	bz	l7443
  2419  0016D6                     l7451:
  2420  0016D6  0100               	movlb	0	; () banked
  2421  0016D8  2BB4               	incf	doDM@i& (0+255),f,b
  2422                           
  2423                           ; BSR set to: 0
  2424  0016DA  0E07               	movlw	7
  2425  0016DC  65B4               	cpfsgt	doDM@i& (0+255),b
  2426  0016DE  D71D               	goto	l7397
  2427  0016E0  0C07               	retlw	7
  2428  0016E2                     __end_of_doDM:
  2429                           	opt stack 0
  2430  0016E2                     PL2:
  2431                           	opt stack 22
  2432  0016E2  6FA6               	movwf	??_doDM& (0+255),b
  2433  0016E4  6BA7               	clrf	(??_doDM+1)& (0+255),b
  2434  0016E6  90D8               	bcf	status,0,c
  2435  0016E8  37A6               	rlcf	??_doDM& (0+255),f,b
  2436  0016EA  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2437  0016EC  90D8               	bcf	status,0,c
  2438  0016EE  37A6               	rlcf	??_doDM& (0+255),f,b
  2439  0016F0  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2440  0016F2  90D8               	bcf	status,0,c
  2441  0016F4  37A6               	rlcf	??_doDM& (0+255),f,b
  2442  0016F6  37A7               	rlcf	(??_doDM+1)& (0+255),f,b
  2443  0016F8  0012               	return	
  2444  0016FA                     __end_ofPL2:
  2445                           	opt stack 0
  2446  0016FA                     PL6:
  2447                           	opt stack 22
  2448  0016FA  0E3F               	movlw	63
  2449  0016FC  25A6               	addwf	??_doDM& (0+255),w,b
  2450  0016FE  6E08               	movwf	?_readEEPROM,c
  2451  001700  0E00               	movlw	0
  2452  001702  21A7               	addwfc	(??_doDM+1)& (0+255),w,b
  2453  001704  6E09               	movwf	?_readEEPROM+1,c
  2454  001706  0012               	return	
  2455  001708                     __end_ofPL6:
  2456                           	opt stack 0
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           prodh	equ	0xFF4
  2462                           prodl	equ	0xFF3
  2463                           intcon	equ	0xFF2
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           indf1	equ	0xFE7
  2467                           fsr1h	equ	0xFE2
  2468                           fsr1l	equ	0xFE1
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           plusw2	equ	0xFDB
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _actionClrAll *****************
  2478 ;; Defined at:
  2479 ;;		line 1179 in file "../main.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  dmflags         1    wreg     unsigned char 
  2482 ;;  param           1   78[COMRAM] unsigned char 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  dmflags         1    0[COMRAM] unsigned char 
  2485 ;;  i               2   79[COMRAM] int 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;		None               void
  2488 ;; Registers used:
  2489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2490 ;; Tracked objects:
  2491 ;;		On entry : F/0
  2492 ;;		On exit  : F/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2495 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2498 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2499 ;;Total ram usage:        3 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; Hardware stack levels required when called:    7
  2502 ;; This function calls:
  2503 ;;		_SendInformationEvent
  2504 ;; This function is called by:
  2505 ;;		_doDM
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           	psect	text9
  2510  002B32                     __ptext9:
  2511                           	opt stack 0
  2512  002B32                     _actionClrAll:
  2513                           	opt stack 22
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;main.c: 1180: PORTA = 0x00;
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;incstack = 0
  2520                           ;incstack = 0
  2521  002B32  6A80               	clrf	3968,c	;volatile
  2522                           
  2523                           ;main.c: 1181: PORTB = 0x00;
  2524  002B34  6A81               	clrf	3969,c	;volatile
  2525                           
  2526                           ;main.c: 1182: PORTC = 0x00;
  2527  002B36  6A82               	clrf	3970,c	;volatile
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;main.c: 1184: for ( int i=3; i<21; i++ ) {
  2531  002B38  6A51               	clrf	actionClrAll@i+1,c
  2532  002B3A  0E03               	movlw	3
  2533  002B3C  6E50               	movwf	actionClrAll@i,c
  2534  002B3E                     l6485:
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;main.c: 1185: SendInformationEvent( i,
  2538                           ;main.c: 1186: 20,
  2539                           ;main.c: 1187: 4 );
  2540  002B3E  0E14               	movlw	20
  2541  002B40  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2542  002B42  0E04               	movlw	4
  2543  002B44  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2544  002B46  5050               	movf	actionClrAll@i,w,c
  2545  002B48  ECC9  F014         	call	_SendInformationEvent
  2546                           
  2547                           ; BSR set to: 0
  2548  002B4C  4A50               	infsnz	actionClrAll@i,f,c
  2549  002B4E  2A51               	incf	actionClrAll@i+1,f,c
  2550                           
  2551                           ; BSR set to: 0
  2552  002B50  5051               	movf	actionClrAll@i+1,w,c
  2553  002B52  0A80               	xorlw	128
  2554  002B54  0F80               	addlw	-128
  2555  002B56  0E15               	movlw	21
  2556  002B58  B4D8               	btfsc	status,2,c
  2557  002B5A  5C50               	subwf	actionClrAll@i,w,c
  2558  002B5C  B0D8               	btfsc	status,0,c
  2559  002B5E  0012               	return	
  2560  002B60  D7EE               	goto	l6485
  2561  002B62                     __end_of_actionClrAll:
  2562                           	opt stack 0
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           prodh	equ	0xFF4
  2568                           prodl	equ	0xFF3
  2569                           intcon	equ	0xFF2
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           indf1	equ	0xFE7
  2573                           fsr1h	equ	0xFE2
  2574                           fsr1l	equ	0xFE1
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           plusw2	equ	0xFDB
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _actionSetAll *****************
  2584 ;; Defined at:
  2585 ;;		line 1160 in file "../main.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  dmflags         1    wreg     unsigned char 
  2588 ;;  param           1   78[COMRAM] unsigned char 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  dmflags         1    0[COMRAM] unsigned char 
  2591 ;;  i               2   79[COMRAM] int 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;		None               void
  2594 ;; Registers used:
  2595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : F/0
  2598 ;;		On exit  : F/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2604 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2605 ;;Total ram usage:        3 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    7
  2608 ;; This function calls:
  2609 ;;		_SendInformationEvent
  2610 ;; This function is called by:
  2611 ;;		_doDM
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text10
  2616  002B62                     __ptext10:
  2617                           	opt stack 0
  2618  002B62                     _actionSetAll:
  2619                           	opt stack 22
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 1161: PORTA = 0xff;
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;incstack = 0
  2626                           ;incstack = 0
  2627  002B62  6880               	setf	3968,c	;volatile
  2628                           
  2629                           ;main.c: 1162: PORTB = 0xff;
  2630  002B64  6881               	setf	3969,c	;volatile
  2631                           
  2632                           ;main.c: 1163: PORTC = 0xff;
  2633  002B66  6882               	setf	3970,c	;volatile
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;main.c: 1165: for ( int i=3; i<21; i++ ) {
  2637  002B68  6A51               	clrf	actionSetAll@i+1,c
  2638  002B6A  0E03               	movlw	3
  2639  002B6C  6E50               	movwf	actionSetAll@i,c
  2640  002B6E                     l6471:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 1166: SendInformationEvent( i,
  2644                           ;main.c: 1167: 20,
  2645                           ;main.c: 1168: 3 );
  2646  002B6E  0E14               	movlw	20
  2647  002B70  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2648  002B72  0E03               	movlw	3
  2649  002B74  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2650  002B76  5050               	movf	actionSetAll@i,w,c
  2651  002B78  ECC9  F014         	call	_SendInformationEvent
  2652                           
  2653                           ; BSR set to: 0
  2654  002B7C  4A50               	infsnz	actionSetAll@i,f,c
  2655  002B7E  2A51               	incf	actionSetAll@i+1,f,c
  2656                           
  2657                           ; BSR set to: 0
  2658  002B80  5051               	movf	actionSetAll@i+1,w,c
  2659  002B82  0A80               	xorlw	128
  2660  002B84  0F80               	addlw	-128
  2661  002B86  0E15               	movlw	21
  2662  002B88  B4D8               	btfsc	status,2,c
  2663  002B8A  5C50               	subwf	actionSetAll@i,w,c
  2664  002B8C  B0D8               	btfsc	status,0,c
  2665  002B8E  0012               	return	
  2666  002B90  D7EE               	goto	l6471
  2667  002B92                     __end_of_actionSetAll:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           indf1	equ	0xFE7
  2679                           fsr1h	equ	0xFE2
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           plusw2	equ	0xFDB
  2685                           fsr2h	equ	0xFDA
  2686                           fsr2l	equ	0xFD9
  2687                           status	equ	0xFD8
  2688                           
  2689 ;; *************** function _actionClr *****************
  2690 ;; Defined at:
  2691 ;;		line 1056 in file "../main.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;  dmflags         1    wreg     unsigned char 
  2694 ;;  param           1   78[COMRAM] unsigned char 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  dmflags         1    0[COMRAM] unsigned char 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;		None               void
  2699 ;; Registers used:
  2700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : F/0
  2703 ;;		On exit  : F/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2706 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2709 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2710 ;;Total ram usage:        1 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    7
  2713 ;; This function calls:
  2714 ;;		_readEEPROM
  2715 ;;		_SendInformationEvent
  2716 ;; This function is called by:
  2717 ;;		_doDM
  2718 ;; This function uses a non-reentrant model
  2719 ;;
  2720                           
  2721                           	psect	text11
  2722  0023BE                     __ptext11:
  2723                           	opt stack 0
  2724  0023BE                     _actionClr:
  2725                           	opt stack 22
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;main.c: 1058: if ( param & 0x80 ) {
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;incstack = 0
  2732                           ;incstack = 0
  2733  0023BE  AE4F               	btfss	actionClr@param,7,c
  2734  0023C0  D00D               	goto	l6449
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 1060: param &= 0x7f;
  2738  0023C2  9E4F               	bcf	actionClr@param,7,c
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 1062: if ( readEEPROM( 0x21 + 5 + (param - 3) )
  2742                           ;main.c: 1063: != vscp_imsg.data[ 2 ] ) {
  2743  0023C4  0E23               	movlw	35
  2744  0023C6  244F               	addwf	actionClr@param,w,c
  2745  0023C8  6E08               	movwf	?_readEEPROM,c
  2746  0023CA  6A09               	clrf	?_readEEPROM+1,c
  2747  0023CC  0E00               	movlw	0
  2748  0023CE  2209               	addwfc	?_readEEPROM+1,f,c
  2749  0023D0  EC68  F017         	call	_readEEPROM	;wreg free
  2750  0023D4  0100               	movlb	0	; () banked
  2751  0023D6  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2752  0023D8  A4D8               	btfss	status,2,c
  2753  0023DA  0012               	return	
  2754  0023DC                     l6449:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;main.c: 1065: }
  2758                           ;main.c: 1066: }
  2759                           ;main.c: 1068: if ( param < 3) return;
  2760  0023DC  0E03               	movlw	3
  2761  0023DE  604F               	cpfslt	actionClr@param,c
  2762  0023E0  D001               	goto	l6453
  2763  0023E2  0C03               	retlw	3
  2764  0023E4                     l6453:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;main.c: 1069: if ( param > 20 ) return;
  2768  0023E4  0E14               	movlw	20
  2769  0023E6  644F               	cpfsgt	actionClr@param,c
  2770  0023E8  D001               	goto	l6457
  2771  0023EA  0C14               	retlw	20
  2772  0023EC                     l6457:
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;main.c: 1071: SendInformationEvent( param,
  2776                           ;main.c: 1072: 20,
  2777                           ;main.c: 1073: 4 );
  2778  0023EC  0E14               	movlw	20
  2779  0023EE  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  2780  0023F0  0E04               	movlw	4
  2781  0023F2  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2782  0023F4  504F               	movf	actionClr@param,w,c
  2783  0023F6  ECC9  F014         	call	_SendInformationEvent
  2784                           
  2785                           ;main.c: 1075: switch ( param ) {
  2786  0023FA  D020               	goto	l6461
  2787  0023FC                     l340:
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;main.c: 1078: PORTCbits.RC7 = 0;
  2791  0023FC  9E82               	bcf	3970,7,c	;volatile
  2792                           
  2793                           ;main.c: 1079: break;
  2794  0023FE  0012               	return	
  2795  002400                     l342:
  2796                           
  2797                           ; BSR set to: 0
  2798                           ;main.c: 1082: PORTCbits.RC6 = 0;
  2799  002400  9C82               	bcf	3970,6,c	;volatile
  2800                           
  2801                           ;main.c: 1083: break;
  2802  002402  0012               	return	
  2803  002404                     l343:
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;main.c: 1086: PORTCbits.RC3 = 0;
  2807  002404  9682               	bcf	3970,3,c	;volatile
  2808                           
  2809                           ;main.c: 1087: break;
  2810  002406  0012               	return	
  2811  002408                     l344:
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;main.c: 1090: PORTCbits.RC4 = 0;
  2815  002408  9882               	bcf	3970,4,c	;volatile
  2816                           
  2817                           ;main.c: 1091: break;
  2818  00240A  0012               	return	
  2819  00240C                     l345:
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;main.c: 1094: PORTCbits.RC5 = 0;
  2823  00240C  9A82               	bcf	3970,5,c	;volatile
  2824                           
  2825                           ;main.c: 1095: break;
  2826  00240E  0012               	return	
  2827  002410                     l346:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 1098: PORTAbits.RA0 = 0;
  2831  002410  9080               	bcf	3968,0,c	;volatile
  2832                           
  2833                           ;main.c: 1099: break;
  2834  002412  0012               	return	
  2835  002414                     l347:
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;main.c: 1102: PORTAbits.RA1 = 0;
  2839  002414  9280               	bcf	3968,1,c	;volatile
  2840                           
  2841                           ;main.c: 1103: break;
  2842  002416  0012               	return	
  2843  002418                     l348:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 1106: PORTAbits.RA2 = 0;
  2847  002418  9480               	bcf	3968,2,c	;volatile
  2848                           
  2849                           ;main.c: 1107: break;
  2850  00241A  0012               	return	
  2851  00241C                     l349:
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 1110: PORTAbits.RA3 = 0;
  2855  00241C  9680               	bcf	3968,3,c	;volatile
  2856                           
  2857                           ;main.c: 1111: break;
  2858  00241E  0012               	return	
  2859  002420                     l350:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 1114: PORTAbits.RA5 = 0;
  2863  002420  9A80               	bcf	3968,5,c	;volatile
  2864                           
  2865                           ;main.c: 1115: break;
  2866  002422  0012               	return	
  2867  002424                     l353:
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 1126: PORTBbits.RB4 = 0;
  2871  002424  9881               	bcf	3969,4,c	;volatile
  2872                           
  2873                           ;main.c: 1127: break;
  2874  002426  0012               	return	
  2875  002428                     l354:
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;main.c: 1130: PORTCbits.RC2 = 0;
  2879  002428  9482               	bcf	3970,2,c	;volatile
  2880                           
  2881                           ;main.c: 1131: break;
  2882  00242A  0012               	return	
  2883  00242C                     l355:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 1134: PORTBbits.RB1 = 0;
  2887  00242C  9281               	bcf	3969,1,c	;volatile
  2888                           
  2889                           ;main.c: 1135: break;
  2890  00242E  0012               	return	
  2891  002430                     l356:
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;main.c: 1138: PORTBbits.RB0 = 0;
  2895  002430  9081               	bcf	3969,0,c	;volatile
  2896                           
  2897                           ;main.c: 1139: break;
  2898  002432  0012               	return	
  2899  002434                     l357:
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;main.c: 1142: PORTBbits.RB6 = 0;
  2903  002434  9C81               	bcf	3969,6,c	;volatile
  2904                           
  2905                           ;main.c: 1143: break;
  2906  002436  0012               	return	
  2907  002438                     l358:
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;main.c: 1146: PORTBbits.RB5 = 0;
  2911  002438  9A81               	bcf	3969,5,c	;volatile
  2912                           
  2913                           ;main.c: 1147: break;
  2914  00243A  0012               	return	
  2915  00243C                     l6461:
  2916                           
  2917                           ; BSR set to: 0
  2918  00243C  504F               	movf	actionClr@param,w,c
  2919                           
  2920                           ; Switch size 1, requested type "space"
  2921                           ; Number of cases is 18, Range of values is 3 to 20
  2922                           ; switch strategies available:
  2923                           ; Name         Instructions Cycles
  2924                           ; simple_byte           55    28 (average)
  2925                           ;	Chosen strategy is simple_byte
  2926  00243E  0A03               	xorlw	3	; case 3
  2927  002440  E0DD               	bz	l340
  2928  002442  0A07               	xorlw	7	; case 4
  2929  002444  E0DD               	bz	l342
  2930  002446  0A01               	xorlw	1	; case 5
  2931  002448  E0DD               	bz	l343
  2932  00244A  0A03               	xorlw	3	; case 6
  2933  00244C  E0DD               	bz	l344
  2934  00244E  0A01               	xorlw	1	; case 7
  2935  002450  E0DD               	bz	l345
  2936  002452  0A0F               	xorlw	15	; case 8
  2937  002454  E0DD               	bz	l346
  2938  002456  0A01               	xorlw	1	; case 9
  2939  002458  E0DD               	bz	l347
  2940  00245A  0A03               	xorlw	3	; case 10
  2941  00245C  E0DD               	bz	l348
  2942  00245E  0A01               	xorlw	1	; case 11
  2943  002460  E0DD               	bz	l349
  2944  002462  0A07               	xorlw	7	; case 12
  2945  002464  E0DD               	bz	l350
  2946  002466  0A01               	xorlw	1	; case 13
  2947  002468  B4D8               	btfsc	status,2,c
  2948  00246A  0012               	return	
  2949  00246C  0A03               	xorlw	3	; case 14
  2950  00246E  B4D8               	btfsc	status,2,c
  2951  002470  0012               	return	
  2952  002472  0A01               	xorlw	1	; case 15
  2953  002474  E0D7               	bz	l353
  2954  002476  0A1F               	xorlw	31	; case 16
  2955  002478  E0D7               	bz	l354
  2956  00247A  0A01               	xorlw	1	; case 17
  2957  00247C  E0D7               	bz	l355
  2958  00247E  0A03               	xorlw	3	; case 18
  2959  002480  E0D7               	bz	l356
  2960  002482  0A01               	xorlw	1	; case 19
  2961  002484  E0D7               	bz	l357
  2962  002486  0A07               	xorlw	7	; case 20
  2963  002488  A4D8               	btfss	status,2,c
  2964  00248A  0012               	return	
  2965  00248C  D7D5               	goto	l358
  2966  00248E                     __end_of_actionClr:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           tblptrh	equ	0xFF7
  2970                           tblptrl	equ	0xFF6
  2971                           tablat	equ	0xFF5
  2972                           prodh	equ	0xFF4
  2973                           prodl	equ	0xFF3
  2974                           intcon	equ	0xFF2
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           indf1	equ	0xFE7
  2978                           fsr1h	equ	0xFE2
  2979                           fsr1l	equ	0xFE1
  2980                           indf2	equ	0xFDF
  2981                           postinc2	equ	0xFDE
  2982                           postdec2	equ	0xFDD
  2983                           plusw2	equ	0xFDB
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _actionSet *****************
  2989 ;; Defined at:
  2990 ;;		line 953 in file "../main.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  dmflags         1    wreg     unsigned char 
  2993 ;;  param           1   78[COMRAM] unsigned char 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;  dmflags         1    0[COMRAM] unsigned char 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;		None               void
  2998 ;; Registers used:
  2999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : F/0
  3002 ;;		On exit  : F/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3005 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3008 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3009 ;;Total ram usage:        1 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    7
  3012 ;; This function calls:
  3013 ;;		_readEEPROM
  3014 ;;		_SendInformationEvent
  3015 ;; This function is called by:
  3016 ;;		_doDM
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text12
  3021  00248E                     __ptext12:
  3022                           	opt stack 0
  3023  00248E                     _actionSet:
  3024                           	opt stack 22
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;main.c: 955: if ( param & 0x80 ) {
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;incstack = 0
  3031                           ;incstack = 0
  3032  00248E  AE4F               	btfss	actionSet@param,7,c
  3033  002490  D00D               	goto	l6427
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;main.c: 957: param &= 0x7f;
  3037  002492  9E4F               	bcf	actionSet@param,7,c
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;main.c: 959: if ( readEEPROM( 0x21 + 5 + (param - 3) )
  3041                           ;main.c: 960: != vscp_imsg.data[ 2 ] ) {
  3042  002494  0E23               	movlw	35
  3043  002496  244F               	addwf	actionSet@param,w,c
  3044  002498  6E08               	movwf	?_readEEPROM,c
  3045  00249A  6A09               	clrf	?_readEEPROM+1,c
  3046  00249C  0E00               	movlw	0
  3047  00249E  2209               	addwfc	?_readEEPROM+1,f,c
  3048  0024A0  EC68  F017         	call	_readEEPROM	;wreg free
  3049  0024A4  0100               	movlb	0	; () banked
  3050  0024A6  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3051  0024A8  A4D8               	btfss	status,2,c
  3052  0024AA  0012               	return	
  3053  0024AC                     l6427:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;main.c: 962: }
  3057                           ;main.c: 963: }
  3058                           ;main.c: 965: if ( param < 3) return;
  3059  0024AC  0E03               	movlw	3
  3060  0024AE  604F               	cpfslt	actionSet@param,c
  3061  0024B0  D001               	goto	l6431
  3062  0024B2  0C03               	retlw	3
  3063  0024B4                     l6431:
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;main.c: 966: if ( param > 20 ) return;
  3067  0024B4  0E14               	movlw	20
  3068  0024B6  644F               	cpfsgt	actionSet@param,c
  3069  0024B8  D001               	goto	l6435
  3070  0024BA  0C14               	retlw	20
  3071  0024BC                     l6435:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 968: SendInformationEvent( param,
  3075                           ;main.c: 969: 20,
  3076                           ;main.c: 970: 3 );
  3077  0024BC  0E14               	movlw	20
  3078  0024BE  6FA4               	movwf	?_SendInformationEvent& (0+255),b
  3079  0024C0  0E03               	movlw	3
  3080  0024C2  6FA5               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3081  0024C4  504F               	movf	actionSet@param,w,c
  3082  0024C6  ECC9  F014         	call	_SendInformationEvent
  3083                           
  3084                           ;main.c: 972: switch ( param ) {
  3085  0024CA  D020               	goto	l6439
  3086  0024CC                     l313:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;main.c: 975: PORTCbits.RC7 = 1;
  3090  0024CC  8E82               	bsf	3970,7,c	;volatile
  3091                           
  3092                           ;main.c: 976: break;
  3093  0024CE  0012               	return	
  3094  0024D0                     l315:
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;main.c: 979: PORTCbits.RC6 = 1;
  3098  0024D0  8C82               	bsf	3970,6,c	;volatile
  3099                           
  3100                           ;main.c: 980: break;
  3101  0024D2  0012               	return	
  3102  0024D4                     l316:
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;main.c: 983: PORTCbits.RC3 = 1;
  3106  0024D4  8682               	bsf	3970,3,c	;volatile
  3107                           
  3108                           ;main.c: 984: break;
  3109  0024D6  0012               	return	
  3110  0024D8                     l317:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;main.c: 987: PORTCbits.RC4 = 1;
  3114  0024D8  8882               	bsf	3970,4,c	;volatile
  3115                           
  3116                           ;main.c: 988: break;
  3117  0024DA  0012               	return	
  3118  0024DC                     l318:
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;main.c: 991: PORTCbits.RC5 = 1;
  3122  0024DC  8A82               	bsf	3970,5,c	;volatile
  3123                           
  3124                           ;main.c: 992: break;
  3125  0024DE  0012               	return	
  3126  0024E0                     l319:
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;main.c: 995: PORTAbits.RA0 = 1;
  3130  0024E0  8080               	bsf	3968,0,c	;volatile
  3131                           
  3132                           ;main.c: 996: break;
  3133  0024E2  0012               	return	
  3134  0024E4                     l320:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 999: PORTAbits.RA1 = 1;
  3138  0024E4  8280               	bsf	3968,1,c	;volatile
  3139                           
  3140                           ;main.c: 1000: break;
  3141  0024E6  0012               	return	
  3142  0024E8                     l321:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;main.c: 1003: PORTAbits.RA2 = 1;
  3146  0024E8  8480               	bsf	3968,2,c	;volatile
  3147                           
  3148                           ;main.c: 1004: break;
  3149  0024EA  0012               	return	
  3150  0024EC                     l322:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 1007: PORTAbits.RA3 = 1;
  3154  0024EC  8680               	bsf	3968,3,c	;volatile
  3155                           
  3156                           ;main.c: 1008: break;
  3157  0024EE  0012               	return	
  3158  0024F0                     l323:
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;main.c: 1011: PORTAbits.RA5 = 1;
  3162  0024F0  8A80               	bsf	3968,5,c	;volatile
  3163                           
  3164                           ;main.c: 1012: break;
  3165  0024F2  0012               	return	
  3166  0024F4                     l326:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;main.c: 1023: PORTBbits.RB4 = 1;
  3170  0024F4  8881               	bsf	3969,4,c	;volatile
  3171                           
  3172                           ;main.c: 1024: break;
  3173  0024F6  0012               	return	
  3174  0024F8                     l327:
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;main.c: 1027: PORTCbits.RC2 = 1;
  3178  0024F8  8482               	bsf	3970,2,c	;volatile
  3179                           
  3180                           ;main.c: 1028: break;
  3181  0024FA  0012               	return	
  3182  0024FC                     l328:
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 1031: PORTBbits.RB1 = 1;
  3186  0024FC  8281               	bsf	3969,1,c	;volatile
  3187                           
  3188                           ;main.c: 1032: break;
  3189  0024FE  0012               	return	
  3190  002500                     l329:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;main.c: 1035: PORTBbits.RB0 = 1;
  3194  002500  8081               	bsf	3969,0,c	;volatile
  3195                           
  3196                           ;main.c: 1036: break;
  3197  002502  0012               	return	
  3198  002504                     l330:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 1039: PORTBbits.RB6 = 1;
  3202  002504  8C81               	bsf	3969,6,c	;volatile
  3203                           
  3204                           ;main.c: 1040: break;
  3205  002506  0012               	return	
  3206  002508                     l331:
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 1043: PORTBbits.RB5 = 1;
  3210  002508  8A81               	bsf	3969,5,c	;volatile
  3211                           
  3212                           ;main.c: 1044: break;
  3213  00250A  0012               	return	
  3214  00250C                     l6439:
  3215                           
  3216                           ; BSR set to: 0
  3217  00250C  504F               	movf	actionSet@param,w,c
  3218                           
  3219                           ; Switch size 1, requested type "space"
  3220                           ; Number of cases is 18, Range of values is 3 to 20
  3221                           ; switch strategies available:
  3222                           ; Name         Instructions Cycles
  3223                           ; simple_byte           55    28 (average)
  3224                           ;	Chosen strategy is simple_byte
  3225  00250E  0A03               	xorlw	3	; case 3
  3226  002510  E0DD               	bz	l313
  3227  002512  0A07               	xorlw	7	; case 4
  3228  002514  E0DD               	bz	l315
  3229  002516  0A01               	xorlw	1	; case 5
  3230  002518  E0DD               	bz	l316
  3231  00251A  0A03               	xorlw	3	; case 6
  3232  00251C  E0DD               	bz	l317
  3233  00251E  0A01               	xorlw	1	; case 7
  3234  002520  E0DD               	bz	l318
  3235  002522  0A0F               	xorlw	15	; case 8
  3236  002524  E0DD               	bz	l319
  3237  002526  0A01               	xorlw	1	; case 9
  3238  002528  E0DD               	bz	l320
  3239  00252A  0A03               	xorlw	3	; case 10
  3240  00252C  E0DD               	bz	l321
  3241  00252E  0A01               	xorlw	1	; case 11
  3242  002530  E0DD               	bz	l322
  3243  002532  0A07               	xorlw	7	; case 12
  3244  002534  E0DD               	bz	l323
  3245  002536  0A01               	xorlw	1	; case 13
  3246  002538  B4D8               	btfsc	status,2,c
  3247  00253A  0012               	return	
  3248  00253C  0A03               	xorlw	3	; case 14
  3249  00253E  B4D8               	btfsc	status,2,c
  3250  002540  0012               	return	
  3251  002542  0A01               	xorlw	1	; case 15
  3252  002544  E0D7               	bz	l326
  3253  002546  0A1F               	xorlw	31	; case 16
  3254  002548  E0D7               	bz	l327
  3255  00254A  0A01               	xorlw	1	; case 17
  3256  00254C  E0D7               	bz	l328
  3257  00254E  0A03               	xorlw	3	; case 18
  3258  002550  E0D7               	bz	l329
  3259  002552  0A01               	xorlw	1	; case 19
  3260  002554  E0D7               	bz	l330
  3261  002556  0A07               	xorlw	7	; case 20
  3262  002558  A4D8               	btfss	status,2,c
  3263  00255A  0012               	return	
  3264  00255C  D7D5               	goto	l331
  3265  00255E                     __end_of_actionSet:
  3266                           	opt stack 0
  3267                           tblptru	equ	0xFF8
  3268                           tblptrh	equ	0xFF7
  3269                           tblptrl	equ	0xFF6
  3270                           tablat	equ	0xFF5
  3271                           prodh	equ	0xFF4
  3272                           prodl	equ	0xFF3
  3273                           intcon	equ	0xFF2
  3274                           postinc0	equ	0xFEE
  3275                           wreg	equ	0xFE8
  3276                           indf1	equ	0xFE7
  3277                           fsr1h	equ	0xFE2
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           postinc2	equ	0xFDE
  3281                           postdec2	equ	0xFDD
  3282                           plusw2	equ	0xFDB
  3283                           fsr2h	equ	0xFDA
  3284                           fsr2l	equ	0xFD9
  3285                           status	equ	0xFD8
  3286                           
  3287 ;; *************** function _SendInformationEvent *****************
  3288 ;; Defined at:
  3289 ;;		line 813 in file "../main.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  idx             1    wreg     unsigned char 
  3292 ;;  eventClass      1   20[BANK0 ] unsigned char 
  3293 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  idx             1   77[COMRAM] unsigned char 
  3296 ;;  data            3   74[COMRAM] unsigned char [3]
  3297 ;; Return value:  Size  Location     Type
  3298 ;;		None               void
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : F/0
  3303 ;;		On exit  : F/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3306 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3307 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3309 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3310 ;;Total ram usage:        6 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    6
  3313 ;; This function calls:
  3314 ;;		_readEEPROM
  3315 ;;		_sendVSCPFrame
  3316 ;; This function is called by:
  3317 ;;		_actionSet
  3318 ;;		_actionClr
  3319 ;;		_actionSetAll
  3320 ;;		_actionClrAll
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text13
  3325  002992                     __ptext13:
  3326                           	opt stack 0
  3327  002992                     _SendInformationEvent:
  3328                           	opt stack 22
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;incstack = 0
  3332                           ;incstack = 0
  3333                           ;SendInformationEvent@idx stored from wreg
  3334  002992  CFE8 F04E          	movff	wreg,SendInformationEvent@idx
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;main.c: 814: uint8_t data[3];
  3338                           ;main.c: 815: idx -= 3;
  3339  002996  0E03               	movlw	3
  3340  002998  5E4E               	subwf	SendInformationEvent@idx,f,c
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 817: data[ 0 ] = idx;
  3344  00299A  C04E  F04B         	movff	SendInformationEvent@idx,SendInformationEvent@data
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 818: data[ 1 ] = readEEPROM( 0x21 + 0 );
  3348  00299E  6A09               	clrf	?_readEEPROM+1,c
  3349  0029A0  0E21               	movlw	33
  3350  0029A2  6E08               	movwf	?_readEEPROM,c
  3351  0029A4  EC68  F017         	call	_readEEPROM	;wreg free
  3352  0029A8  6E4C               	movwf	SendInformationEvent@data+1,c
  3353                           
  3354                           ;main.c: 819: data[ 2 ] = readEEPROM( 0x21 + 5 + idx );
  3355  0029AA  0E26               	movlw	38
  3356  0029AC  244E               	addwf	SendInformationEvent@idx,w,c
  3357  0029AE  6E08               	movwf	?_readEEPROM,c
  3358  0029B0  6A09               	clrf	?_readEEPROM+1,c
  3359  0029B2  0E00               	movlw	0
  3360  0029B4  2209               	addwfc	?_readEEPROM+1,f,c
  3361  0029B6  EC68  F017         	call	_readEEPROM	;wreg free
  3362  0029BA  6E4D               	movwf	SendInformationEvent@data+2,c
  3363                           
  3364                           ;main.c: 820: sendVSCPFrame( eventClass,
  3365                           ;main.c: 821: eventTypeId,
  3366                           ;main.c: 822: vscp_nickname,
  3367                           ;main.c: 823: 0x03,
  3368                           ;main.c: 824: 3,
  3369                           ;main.c: 825: data );
  3370  0029BC  0100               	movlb	0	; () banked
  3371  0029BE  C0A4  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
  3372  0029C2  6A40               	clrf	?_sendVSCPFrame+1,c
  3373  0029C4  C0A5  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
  3374  0029C8  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  3375  0029CC  0E03               	movlw	3
  3376  0029CE  6E43               	movwf	?_sendVSCPFrame+4,c
  3377  0029D0  6E44               	movwf	?_sendVSCPFrame+5,c
  3378  0029D2  0E4B               	movlw	low SendInformationEvent@data
  3379  0029D4  6E45               	movwf	?_sendVSCPFrame+6,c
  3380  0029D6  0E00               	movlw	high SendInformationEvent@data
  3381  0029D8  6E46               	movwf	?_sendVSCPFrame+7,c
  3382  0029DA  0E0F               	movlw	15
  3383  0029DC  6E46               	movwf	?_sendVSCPFrame+7,c
  3384  0029DE  0E5F               	movlw	__accesstop+-1
  3385  0029E0  6445               	cpfsgt	?_sendVSCPFrame+6,c
  3386  0029E2  6A46               	clrf	?_sendVSCPFrame+7,c
  3387  0029E4  EF0C  F013         	goto	_sendVSCPFrame	;wreg free
  3388  0029E8                     __end_of_SendInformationEvent:
  3389                           	opt stack 0
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           prodh	equ	0xFF4
  3395                           prodl	equ	0xFF3
  3396                           intcon	equ	0xFF2
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           indf1	equ	0xFE7
  3400                           fsr1h	equ	0xFE2
  3401                           fsr1l	equ	0xFE1
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           plusw2	equ	0xFDB
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _vscp_handleProtocolEvent *****************
  3411 ;; Defined at:
  3412 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  bytes           1   33[BANK0 ] unsigned char 
  3417 ;;  page_save       2   29[BANK0 ] unsigned short 
  3418 ;;  i               1   39[BANK0 ] unsigned char 
  3419 ;;  page_save       2   27[BANK0 ] unsigned short 
  3420 ;;  byte            1   43[BANK0 ] unsigned char 
  3421 ;;  bytes           1   41[BANK0 ] unsigned char 
  3422 ;;  cb              1   38[BANK0 ] unsigned char 
  3423 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  3424 ;;  j               1   46[BANK0 ] unsigned char 
  3425 ;;  i               1   44[BANK0 ] unsigned char 
  3426 ;;  k               1   40[BANK0 ] unsigned char 
  3427 ;;  i               1   42[BANK0 ] unsigned char 
  3428 ;;  len             1   36[BANK0 ] unsigned char 
  3429 ;;  pos             1   35[BANK0 ] unsigned char 
  3430 ;;  i               1   45[BANK0 ] unsigned char 
  3431 ;;  len             1   34[BANK0 ] unsigned char 
  3432 ;;  pos             1   32[BANK0 ] unsigned char 
  3433 ;;  offset          1   31[BANK0 ] unsigned char 
  3434 ;; Return value:  Size  Location     Type
  3435 ;;		None               void
  3436 ;; Registers used:
  3437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : F/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3444 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3445 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3446 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3447 ;;Total ram usage:       27 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    8
  3450 ;; This function calls:
  3451 ;;		_vscp_init
  3452 ;;		_vscp_readAppReg
  3453 ;;		_vscp_writeAppReg
  3454 ;;		_vscp_sendEvent
  3455 ;;		_vscp_getGUID
  3456 ;;		_vscp_getMDF_URL
  3457 ;;		_vscp_goBootloaderMode
  3458 ;;		_vscp_getMatrixInfo
  3459 ;;		_vscp_handleHeartbeat
  3460 ;;		_vscp_handleSetNickname
  3461 ;;		_vscp_handleDropNickname
  3462 ;;		_vscp_newNodeOnline
  3463 ;;		_vscp_readRegister
  3464 ;;		_vscp_readStdReg
  3465 ;;		_vscp_writeRegister
  3466 ;;		_vscp_writeStdReg
  3467 ;;		___lbmod
  3468 ;; This function is called by:
  3469 ;;		_main
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text14
  3474  000F22                     __ptext14:
  3475                           	opt stack 0
  3476  000F22                     _vscp_handleProtocolEvent:
  3477                           	opt stack 22
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;incstack = 0
  3484                           ;incstack = 0
  3485  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  3486  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  3487  000F26  A4D8               	btfss	status,2,c
  3488  000F28  0012               	return	
  3489  000F2A  D29D               	goto	l7381
  3490  000F2C                     l6969:
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  3494  000F2C  EF3E  F015         	goto	_vscp_handleHeartbeat	;wreg free
  3495  000F30                     l6971:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  3499  000F30  EFF7  F015         	goto	_vscp_newNodeOnline	;wreg free
  3500  000F34                     l6973:
  3501                           
  3502                           ; BSR set to: 0
  3503                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  3504  000F34  EF6C  F016         	goto	_vscp_handleSetNickname	;wreg free
  3505  000F38                     l6975:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  3509  000F38  EFC9  F015         	goto	_vscp_handleDropNickname	;wreg free
  3510  000F3C                     l6977:
  3511                           
  3512                           ; BSR set to: 0
  3513                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  3514                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3515  000F3C  5175               	movf	_vscp_imsg& (0+255),w,b
  3516  000F3E  0B0F               	andlw	15
  3517  000F40  0A02               	xorlw	2
  3518  000F42  A4D8               	btfss	status,2,c
  3519  000F44  0012               	return	
  3520                           
  3521                           ; BSR set to: 0
  3522  000F46  5170               	movf	_vscp_nickname& (0+255),w,b
  3523  000F48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3524  000F4C  62DF               	cpfseq	indf2,c
  3525  000F4E  0012               	return	
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  3529  000F50  0E80               	movlw	128
  3530  000F52  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3531  000F54  D011               	goto	l6997
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  3535  000F56  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3536  000F58  ECBD  F013         	call	_vscp_readAppReg
  3537  000F5C                     L1:
  3538  000F5C  0100               	movlb	0	; () banked
  3539  000F5E  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  3543  000F60  C07C  F088         	movff	_vscp_imsg+7,_vscp_omsg+5
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  3547  000F64  0E03               	movlw	3
  3548  000F66  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  3552  000F68  0E82               	movlw	130
  3553  000F6A  6F83               	movwf	_vscp_omsg& (0+255),b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  3557  000F6C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3558  000F6E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  3562  000F70  0E0A               	movlw	10
  3563  000F72  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3564                           
  3565                           ; BSR set to: 0
  3566                           ;vscp_firmware.c: 832: vscp_sendEvent();
  3567  000F74  EF33  F016         	goto	_vscp_sendEvent	;wreg free
  3568  000F78                     l6997:
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  3572                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  3573  000F78  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3574  000F7A  EC7D  F00C         	call	_vscp_readStdReg
  3575  000F7E  D7EE               	goto	L1
  3576  000F80                     l7011:
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  3580                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  3581  000F80  5175               	movf	_vscp_imsg& (0+255),w,b
  3582  000F82  0B0F               	andlw	15
  3583  000F84  0A03               	xorlw	3
  3584  000F86  A4D8               	btfss	status,2,c
  3585  000F88  0012               	return	
  3586                           
  3587                           ; BSR set to: 0
  3588  000F8A  5170               	movf	_vscp_nickname& (0+255),w,b
  3589  000F8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3590  000F90  62DF               	cpfseq	indf2,c
  3591  000F92  0012               	return	
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  3595  000F94  0E80               	movlw	128
  3596  000F96  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  3597  000F98  D006               	goto	l7031
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  3601                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3602  000F9A  C07D  F015         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  3603  000F9E  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3604  000FA0  EC68  F010         	call	_vscp_writeAppReg
  3605  000FA4  D7DB               	goto	L1
  3606  000FA6                     l7031:
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  3610                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  3611  000FA6  C07D  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  3612  000FAA  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3613  000FAC  ECF0  F010         	call	_vscp_writeStdReg
  3614  000FB0  D7D5               	goto	L1
  3615  000FB2                     l7045:
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  3619                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  3620                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  3621                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  3622                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  3623                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  3624                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  3625  000FB2  5170               	movf	_vscp_nickname& (0+255),w,b
  3626  000FB4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3627  000FB8  62DF               	cpfseq	indf2,c
  3628  000FBA  0012               	return	
  3629                           
  3630                           ; BSR set to: 0
  3631  000FBC  0E00               	movlw	0
  3632  000FBE  EC4C  F017         	call	_vscp_getGUID
  3633  000FC2  0100               	movlb	0	; () banked
  3634  000FC4  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3635  000FC6  A4D8               	btfss	status,2,c
  3636  000FC8  0012               	return	
  3637                           
  3638                           ; BSR set to: 0
  3639  000FCA  0E03               	movlw	3
  3640  000FCC  EC4C  F017         	call	_vscp_getGUID
  3641  000FD0  0100               	movlb	0	; () banked
  3642  000FD2  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3643  000FD4  A4D8               	btfss	status,2,c
  3644  000FD6  0012               	return	
  3645                           
  3646                           ; BSR set to: 0
  3647  000FD8  0E05               	movlw	5
  3648  000FDA  EC4C  F017         	call	_vscp_getGUID
  3649  000FDE  0100               	movlb	0	; () banked
  3650  000FE0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3651  000FE2  A4D8               	btfss	status,2,c
  3652  000FE4  0012               	return	
  3653                           
  3654                           ; BSR set to: 0
  3655  000FE6  0E07               	movlw	7
  3656  000FE8  EC4C  F017         	call	_vscp_getGUID
  3657  000FEC  0100               	movlb	0	; () banked
  3658  000FEE  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  3659  000FF0  A4D8               	btfss	status,2,c
  3660  000FF2  0012               	return	
  3661                           
  3662                           ; BSR set to: 0
  3663  000FF4  5053               	movf	_vscp_page_select+1,w,c
  3664  000FF6  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  3665  000FF8  A4D8               	btfss	status,2,c
  3666  000FFA  0012               	return	
  3667                           
  3668                           ; BSR set to: 0
  3669  000FFC  5052               	movf	_vscp_page_select,w,c
  3670  000FFE  EE20  F082         	lfsr	2,_vscp_imsg+13
  3671  001002  62DF               	cpfseq	indf2,c
  3672  001004  0012               	return	
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  3676  001006  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3677  001008  EF08  F017         	goto	_vscp_goBootloaderMode
  3678  00100C                     l7061:
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  3682                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  3683                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  3684                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  3685  00100C  0E00               	movlw	0
  3686  00100E  EC4C  F017         	call	_vscp_getGUID
  3687  001012  0100               	movlb	0	; () banked
  3688  001014  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3689  001016  E173               	bnz	l7105
  3690                           
  3691                           ; BSR set to: 0
  3692  001018  0E01               	movlw	1
  3693  00101A  EC4C  F017         	call	_vscp_getGUID
  3694  00101E  0100               	movlb	0	; () banked
  3695  001020  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3696  001022  E16D               	bnz	l7105
  3697                           
  3698                           ; BSR set to: 0
  3699  001024  0E02               	movlw	2
  3700  001026  EC4C  F017         	call	_vscp_getGUID
  3701  00102A  0100               	movlb	0	; () banked
  3702  00102C  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3703  00102E  E167               	bnz	l7105
  3704                           
  3705                           ; BSR set to: 0
  3706  001030  0E03               	movlw	3
  3707  001032  EC4C  F017         	call	_vscp_getGUID
  3708  001036  0100               	movlb	0	; () banked
  3709  001038  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3710  00103A  E161               	bnz	l7105
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  3714  00103C  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  3715  00103E  D05F               	goto	l7105
  3716  001040                     l7071:
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  3720                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  3721                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  3722                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  3723  001040  0E04               	movlw	4
  3724  001042  EC4C  F017         	call	_vscp_getGUID
  3725  001046  0100               	movlb	0	; () banked
  3726  001048  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3727  00104A  E159               	bnz	l7105
  3728                           
  3729                           ; BSR set to: 0
  3730  00104C  0E05               	movlw	5
  3731  00104E  EC4C  F017         	call	_vscp_getGUID
  3732  001052  0100               	movlb	0	; () banked
  3733  001054  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3734  001056  E153               	bnz	l7105
  3735                           
  3736                           ; BSR set to: 0
  3737  001058  0E06               	movlw	6
  3738  00105A  EC4C  F017         	call	_vscp_getGUID
  3739  00105E  0100               	movlb	0	; () banked
  3740  001060  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3741  001062  E14D               	bnz	l7105
  3742                           
  3743                           ; BSR set to: 0
  3744  001064  0E07               	movlw	7
  3745  001066  EC4C  F017         	call	_vscp_getGUID
  3746  00106A  0100               	movlb	0	; () banked
  3747  00106C  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3748  00106E  E147               	bnz	l7105
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  3752  001070  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  3753  001072  D045               	goto	l7105
  3754  001074                     l7081:
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  3758                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  3759                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  3760                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  3761  001074  0E08               	movlw	8
  3762  001076  EC4C  F017         	call	_vscp_getGUID
  3763  00107A  0100               	movlb	0	; () banked
  3764  00107C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3765  00107E  E13F               	bnz	l7105
  3766                           
  3767                           ; BSR set to: 0
  3768  001080  0E09               	movlw	9
  3769  001082  EC4C  F017         	call	_vscp_getGUID
  3770  001086  0100               	movlb	0	; () banked
  3771  001088  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3772  00108A  E139               	bnz	l7105
  3773                           
  3774                           ; BSR set to: 0
  3775  00108C  0E0A               	movlw	10
  3776  00108E  EC4C  F017         	call	_vscp_getGUID
  3777  001092  0100               	movlb	0	; () banked
  3778  001094  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3779  001096  E133               	bnz	l7105
  3780                           
  3781                           ; BSR set to: 0
  3782  001098  0E0B               	movlw	11
  3783  00109A  EC4C  F017         	call	_vscp_getGUID
  3784  00109E  0100               	movlb	0	; () banked
  3785  0010A0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3786  0010A2  E12D               	bnz	l7105
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  3790  0010A4  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  3791  0010A6  D02B               	goto	l7105
  3792  0010A8                     l7091:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  3796                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  3797                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  3798                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  3799  0010A8  0E0C               	movlw	12
  3800  0010AA  EC4C  F017         	call	_vscp_getGUID
  3801  0010AE  0100               	movlb	0	; () banked
  3802  0010B0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  3803  0010B2  E125               	bnz	l7105
  3804                           
  3805                           ; BSR set to: 0
  3806  0010B4  0E0D               	movlw	13
  3807  0010B6  EC4C  F017         	call	_vscp_getGUID
  3808  0010BA  0100               	movlb	0	; () banked
  3809  0010BC  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3810  0010BE  E11F               	bnz	l7105
  3811                           
  3812                           ; BSR set to: 0
  3813  0010C0  0E0E               	movlw	14
  3814  0010C2  EC4C  F017         	call	_vscp_getGUID
  3815  0010C6  0100               	movlb	0	; () banked
  3816  0010C8  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  3817  0010CA  E119               	bnz	l7105
  3818                           
  3819                           ; BSR set to: 0
  3820  0010CC  0E0F               	movlw	15
  3821  0010CE  EC4C  F017         	call	_vscp_getGUID
  3822  0010D2  0100               	movlb	0	; () banked
  3823  0010D4  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  3824  0010D6  E113               	bnz	l7105
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  3828  0010D8  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  3829  0010DA  D011               	goto	l7105
  3830  0010DC                     l1014:
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  3834  0010DC  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  3835                           
  3836                           ;vscp_firmware.c: 952: break;
  3837  0010DE  D00F               	goto	l7105
  3838  0010E0                     l7103:
  3839                           
  3840                           ; BSR set to: 0
  3841  0010E0  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  3842  0010E2  0B0F               	andlw	15
  3843  0010E4  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3844  0010E6  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3845                           
  3846                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3847                           ; Switch size 1, requested type "space"
  3848                           ; Number of cases is 1, Range of values is 0 to 0
  3849                           ; switch strategies available:
  3850                           ; Name         Instructions Cycles
  3851                           ; simple_byte            4     3 (average)
  3852                           ;	Chosen strategy is simple_byte
  3853  0010E8  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3854  0010EA  E1F8               	bnz	l1014
  3855                           
  3856                           ; BSR set to: 0
  3857                           ; Switch size 1, requested type "space"
  3858                           ; Number of cases is 4, Range of values is 0 to 3
  3859                           ; switch strategies available:
  3860                           ; Name         Instructions Cycles
  3861                           ; simple_byte           13     7 (average)
  3862                           ;	Chosen strategy is simple_byte
  3863  0010EC  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3864  0010EE  E08E               	bz	l7061
  3865  0010F0  0A01               	xorlw	1	; case 1
  3866  0010F2  E0A6               	bz	l7071
  3867  0010F4  0A03               	xorlw	3	; case 2
  3868  0010F6  E0BE               	bz	l7081
  3869  0010F8  0A01               	xorlw	1	; case 3
  3870  0010FA  E0D6               	bz	l7091
  3871  0010FC  D7EF               	goto	l1014
  3872  0010FE                     l7105:
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3876  0010FE  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3877  001100  0BF0               	andlw	240
  3878  001102  0AF0               	xorlw	240
  3879  001104  B4D8               	btfsc	status,2,c
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;vscp_firmware.c: 957: vscp_init();
  3883  001106  EC1C  F015         	call	_vscp_init	;wreg free
  3884  00110A  0012               	return	
  3885  00110C                     l7109:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3889  00110C  5170               	movf	_vscp_nickname& (0+255),w,b
  3890  00110E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3891  001112  62DF               	cpfseq	indf2,c
  3892  001114  0012               	return	
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;vscp_firmware.c: 965: uint8_t i;
  3896                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  3897  001116  6BB0               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3898                           
  3899                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  3900  001118  C07C  F0AF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3901                           
  3902                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  3903  00111C  C07D  F0B2         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3904                           
  3905                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  3906  001120  6BBD               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3907  001122  D042               	goto	l7141
  3908  001124                     l7113:
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3912  001124  0E07               	movlw	7
  3913  001126  6E08               	movwf	?___lbmod,c
  3914  001128  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3915  00112A  EC0C  F016         	call	___lbmod
  3916  00112E  0100               	movlb	0	; () banked
  3917  001130  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3918  001132  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3919  001134  0F89               	addlw	low (_vscp_omsg+6)
  3920  001136  6ED9               	movwf	fsr2l,c
  3921  001138  6ADA               	clrf	fsr2h,c
  3922  00113A  51AF               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3923  00113C  25BD               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3924  00113E  EC2D  F017         	call	_vscp_readRegister
  3925  001142  6EDF               	movwf	indf2,c
  3926                           
  3927                           ;vscp_firmware.c: 973: if ( (i % 7) == 6 || i == (len - 1) ) {
  3928  001144  0E07               	movlw	7
  3929  001146  6E08               	movwf	?___lbmod,c
  3930  001148  0100               	movlb	0	; () banked
  3931  00114A  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3932  00114C  EC0C  F016         	call	___lbmod
  3933  001150  0A06               	xorlw	6
  3934  001152  E00B               	bz	l7119
  3935  001154  0EFF               	movlw	255
  3936  001156  0100               	movlb	0	; () banked
  3937  001158  25B2               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3938  00115A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3939  00115C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3940  00115E  0EFF               	movlw	255
  3941  001160  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3942  001162  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3943  001164  19A4               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3944  001166  11A5               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3945  001168  E11E               	bnz	l7139
  3946  00116A                     l7119:
  3947                           
  3948                           ;vscp_firmware.c: 975: uint8_t bytes;
  3949                           ;vscp_firmware.c: 977: if ( ( i % 7 ) == 6 ) {
  3950  00116A  0E07               	movlw	7
  3951  00116C  6E08               	movwf	?___lbmod,c
  3952  00116E  0100               	movlb	0	; () banked
  3953  001170  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3954  001172  EC0C  F016         	call	___lbmod
  3955  001176  0A06               	xorlw	6
  3956  001178  E103               	bnz	l7123
  3957                           
  3958                           ;vscp_firmware.c: 978: bytes = 7;
  3959  00117A  0E07               	movlw	7
  3960  00117C  0100               	movlb	0	; () banked
  3961  00117E  D009               	goto	L2
  3962  001180                     l7123:
  3963                           
  3964                           ;vscp_firmware.c: 980: else {
  3965                           ;vscp_firmware.c: 981: bytes = ( i % 7 ) + 1;
  3966  001180  0E07               	movlw	7
  3967  001182  6E08               	movwf	?___lbmod,c
  3968  001184  0100               	movlb	0	; () banked
  3969  001186  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3970  001188  EC0C  F016         	call	___lbmod
  3971  00118C  0100               	movlb	0	; () banked
  3972  00118E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3973  001190  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3974  001192                     L2:
  3975  001192  6FB1               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;vscp_firmware.c: 982: }
  3979                           ;vscp_firmware.c: 984: vscp_omsg.flags = 0x80 + bytes + 1;
  3980  001194  51B1               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3981  001196  0F81               	addlw	129
  3982  001198  6F83               	movwf	_vscp_omsg& (0+255),b
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;vscp_firmware.c: 985: vscp_omsg.priority = 0x03;
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;vscp_firmware.c: 986: vscp_omsg.vscp_class = 0;
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;vscp_firmware.c: 987: vscp_omsg.vscp_type = 26;
  3992  00119A  D9AD               	call	PL32	;call to abstracted procedure
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;vscp_firmware.c: 988: vscp_omsg.data[ 0 ] = pos;
  3996  00119C  C0B0  F088         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;vscp_firmware.c: 991: vscp_sendEvent();
  4000  0011A0  EC33  F016         	call	_vscp_sendEvent	;wreg free
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;vscp_firmware.c: 992: pos++;
  4004  0011A4  2BB0               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  4005  0011A6                     l7139:
  4006                           
  4007                           ; BSR set to: 0
  4008  0011A6  2BBD               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  4009  0011A8                     l7141:
  4010                           
  4011                           ; BSR set to: 0
  4012  0011A8  51B2               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  4013  0011AA  5DBD               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  4014  0011AC  B0D8               	btfsc	status,0,c
  4015  0011AE  0012               	return	
  4016  0011B0  D7B9               	goto	l7113
  4017  0011B2                     l7143:
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;vscp_firmware.c: 1000: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4021  0011B2  5170               	movf	_vscp_nickname& (0+255),w,b
  4022  0011B4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4023  0011B8  62DF               	cpfseq	indf2,c
  4024  0011BA  0012               	return	
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;vscp_firmware.c: 1001: uint8_t i;
  4028                           ;vscp_firmware.c: 1002: uint8_t pos = vscp_imsg.data[ 1 ];
  4029  0011BC  C07C  F0B3         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1129
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;vscp_firmware.c: 1003: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  4033  0011C0  5175               	movf	_vscp_imsg& (0+255),w,b
  4034  0011C2  0FFE               	addlw	254
  4035  0011C4  0B07               	andlw	7
  4036  0011C6  6FB4               	movwf	vscp_handleProtocolEvent@len_1130& (0+255),b
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;vscp_firmware.c: 1005: for (i = 0; i < len; i++) {
  4040  0011C8  6BBA               	clrf	vscp_handleProtocolEvent@i_1128& (0+255),b
  4041  0011CA  D016               	goto	l7157
  4042  0011CC                     l7151:
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;vscp_firmware.c: 1007: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  4046  0011CC  51BA               	movf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  4047  0011CE  0F7D               	addlw	low (_vscp_imsg+8)
  4048  0011D0  6ED9               	movwf	fsr2l,c
  4049  0011D2  6ADA               	clrf	fsr2h,c
  4050  0011D4  50DF               	movf	indf2,w,c
  4051  0011D6  6E18               	movwf	?_vscp_writeRegister,c
  4052  0011D8  51B3               	movf	vscp_handleProtocolEvent@pos_1129& (0+255),w,b
  4053  0011DA  25BA               	addwf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  4054  0011DC  ECCD  F016         	call	_vscp_writeRegister
  4055                           
  4056                           ;vscp_firmware.c: 1008: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  4057  0011E0  0100               	movlb	0	; () banked
  4058  0011E2  51BA               	movf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  4059  0011E4  0F89               	addlw	low (_vscp_omsg+6)
  4060  0011E6  6ED9               	movwf	fsr2l,c
  4061  0011E8  6ADA               	clrf	fsr2h,c
  4062  0011EA  51B3               	movf	vscp_handleProtocolEvent@pos_1129& (0+255),w,b
  4063  0011EC  25BA               	addwf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  4064  0011EE  EC2D  F017         	call	_vscp_readRegister
  4065  0011F2  6EDF               	movwf	indf2,c
  4066  0011F4  0100               	movlb	0	; () banked
  4067  0011F6  2BBA               	incf	vscp_handleProtocolEvent@i_1128& (0+255),f,b
  4068  0011F8                     l7157:
  4069                           
  4070                           ; BSR set to: 0
  4071  0011F8  51B4               	movf	vscp_handleProtocolEvent@len_1130& (0+255),w,b
  4072  0011FA  5DBA               	subwf	vscp_handleProtocolEvent@i_1128& (0+255),w,b
  4073  0011FC  E3E7               	bnc	l7151
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;vscp_firmware.c: 1009: }
  4077                           ;vscp_firmware.c: 1011: vscp_omsg.priority = 0x03;
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;vscp_firmware.c: 1012: vscp_omsg.vscp_class = 0;
  4081                           
  4082                           ;vscp_firmware.c: 1013: vscp_omsg.vscp_type = 26;
  4083  0011FE  D97B               	call	PL32	;call to abstracted procedure
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;vscp_firmware.c: 1014: vscp_omsg.data[ 0 ] = 0;
  4087  001200  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;vscp_firmware.c: 1015: vscp_omsg.flags = 0x80 + len + 1;
  4091  001202  51B4               	movf	vscp_handleProtocolEvent@len_1130& (0+255),w,b
  4092  001204  0F81               	addlw	129
  4093  001206  6F83               	movwf	_vscp_omsg& (0+255),b
  4094  001208  EF33  F016         	goto	_vscp_sendEvent
  4095  00120C                     l7169:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;vscp_firmware.c: 1025: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4099  00120C  5170               	movf	_vscp_nickname& (0+255),w,b
  4100  00120E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4101  001212  62DF               	cpfseq	indf2,c
  4102  001214  0012               	return	
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  4106                           ;vscp_firmware.c: 1028: vscp_imsg.data[ 1 ],
  4107                           ;vscp_firmware.c: 1029: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  4108  001216  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4109  001218  ECBD  F013         	call	_vscp_readAppReg
  4110  00121C  0100               	movlb	0	; () banked
  4111  00121E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4112  001220  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  4113  001222  6E15               	movwf	?_vscp_writeAppReg,c
  4114  001224  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4115  001226  EC68  F010         	call	_vscp_writeAppReg
  4116  00122A  D698               	goto	L1
  4117  00122C                     l7185:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;vscp_firmware.c: 1045: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4121  00122C  5170               	movf	_vscp_nickname& (0+255),w,b
  4122  00122E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4123  001232  62DF               	cpfseq	indf2,c
  4124  001234  0012               	return	
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;vscp_firmware.c: 1047: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  4128                           ;vscp_firmware.c: 1048: vscp_imsg.data[ 1 ],
  4129                           ;vscp_firmware.c: 1049: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  4130  001236  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4131  001238  ECBD  F013         	call	_vscp_readAppReg
  4132  00123C  0100               	movlb	0	; () banked
  4133  00123E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4134  001240  05A4               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  4135  001242  6E15               	movwf	?_vscp_writeAppReg,c
  4136  001244  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  4137  001246  EC68  F010         	call	_vscp_writeAppReg
  4138  00124A  D688               	goto	L1
  4139  00124C                     l7201:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;vscp_firmware.c: 1065: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  4143                           ;vscp_firmware.c: 1066: (0xff == vscp_imsg.data[ 0 ])) {
  4144  00124C  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  4145  00124E  1970               	xorwf	_vscp_nickname& (0+255),w,b
  4146  001250  E003               	bz	l1038
  4147                           
  4148                           ; BSR set to: 0
  4149  001252  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  4150  001254  A4D8               	btfss	status,2,c
  4151  001256  0012               	return	
  4152  001258                     l1038:
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;vscp_firmware.c: 1068: uint8_t i, j, k = 0;
  4156  001258  6BB8               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;vscp_firmware.c: 1072: vscp_omsg.priority = 0x03;
  4160  00125A  0E03               	movlw	3
  4161  00125C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4162                           
  4163                           ;vscp_firmware.c: 1073: vscp_omsg.flags = 0x80 + 8;
  4164  00125E  0E88               	movlw	136
  4165  001260  6F83               	movwf	_vscp_omsg& (0+255),b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;vscp_firmware.c: 1074: vscp_omsg.vscp_class = 0;
  4169  001262  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4170  001264  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4171                           
  4172                           ;vscp_firmware.c: 1075: vscp_omsg.vscp_type = 32;
  4173  001266  0E20               	movlw	32
  4174  001268  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;vscp_firmware.c: 1077: for (i = 0; i < 3; i++)
  4178  00126A  6BBC               	clrf	vscp_handleProtocolEvent@i_1131& (0+255),b
  4179  00126C                     l1039:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;vscp_firmware.c: 1078: {
  4183                           ;vscp_firmware.c: 1079: vscp_omsg.data[0] = i;
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;vscp_firmware.c: 1081: for (j = 1; j < 8; j++) {
  4187  00126C  D94B               	call	PL40	;call to abstracted procedure
  4188  00126E                     l7221:
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;vscp_firmware.c: 1082: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  4192  00126E  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4193  001270  0F88               	addlw	low (_vscp_omsg+5)
  4194  001272  6ED9               	movwf	fsr2l,c
  4195  001274  6ADA               	clrf	fsr2h,c
  4196  001276  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4197  001278  080F               	sublw	15
  4198  00127A  EC4C  F017         	call	_vscp_getGUID
  4199  00127E  6EDF               	movwf	indf2,c
  4200  001280  0100               	movlb	0	; () banked
  4201  001282  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;vscp_firmware.c: 1083: if (k > 16)
  4205  001284  0E10               	movlw	16
  4206  001286  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  4207  001288  D001               	goto	l7229
  4208  00128A  D004               	goto	l7233
  4209  00128C                     l7229:
  4210                           
  4211                           ; BSR set to: 0
  4212  00128C  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4213                           
  4214                           ; BSR set to: 0
  4215  00128E  0E07               	movlw	7
  4216  001290  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4217  001292  D7ED               	goto	l7221
  4218  001294                     l7233:
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;vscp_firmware.c: 1085: }
  4222                           ;vscp_firmware.c: 1087: if (k > 16)
  4223  001294  0E10               	movlw	16
  4224  001296  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  4225  001298  D001               	goto	l7237
  4226  00129A  D006               	goto	l1040
  4227  00129C                     l7237:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;vscp_firmware.c: 1090: vscp_sendEvent();
  4231  00129C  EC33  F016         	call	_vscp_sendEvent	;wreg free
  4232                           
  4233                           ; BSR set to: 0
  4234  0012A0  2BBC               	incf	vscp_handleProtocolEvent@i_1131& (0+255),f,b
  4235                           
  4236                           ; BSR set to: 0
  4237  0012A2  0E02               	movlw	2
  4238  0012A4  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1131& (0+255),b
  4239  0012A6  D7E2               	goto	l1039
  4240  0012A8                     l1040:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;vscp_firmware.c: 1091: }
  4244                           ;vscp_firmware.c: 1093: for (j = 0; j < 5; j++)
  4245  0012A8  6BBE               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  4246  0012AA                     l7247:
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;vscp_firmware.c: 1094: {
  4250                           ;vscp_firmware.c: 1095: if (vscp_getMDF_URL(j) > 0)
  4251  0012AA  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4252  0012AC  ECFA  F016         	call	_vscp_getMDF_URL
  4253  0012B0  0900               	iorlw	0
  4254  0012B2  E008               	bz	l7251
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;vscp_firmware.c: 1096: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  4258  0012B4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4259  0012B6  0F8B               	addlw	low (_vscp_omsg+8)
  4260  0012B8  6ED9               	movwf	fsr2l,c
  4261  0012BA  6ADA               	clrf	fsr2h,c
  4262  0012BC  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4263  0012BE  ECFA  F016         	call	_vscp_getMDF_URL
  4264  0012C2  D005               	goto	L3
  4265  0012C4                     l7251:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;vscp_firmware.c: 1097: else
  4269                           ;vscp_firmware.c: 1098: vscp_omsg.data[3 + j] = 0;
  4270  0012C4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4271  0012C6  0F8B               	addlw	low (_vscp_omsg+8)
  4272  0012C8  6ED9               	movwf	fsr2l,c
  4273  0012CA  6ADA               	clrf	fsr2h,c
  4274  0012CC  0E00               	movlw	0
  4275  0012CE                     L3:
  4276  0012CE  6EDF               	movwf	indf2,c
  4277                           
  4278                           ; BSR set to: 0
  4279  0012D0  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4280                           
  4281                           ; BSR set to: 0
  4282  0012D2  0E04               	movlw	4
  4283  0012D4  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4284  0012D6  D7E9               	goto	l7247
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;vscp_firmware.c: 1099: }
  4288                           ;vscp_firmware.c: 1101: vscp_sendEvent();
  4289  0012D8  EC33  F016         	call	_vscp_sendEvent	;wreg free
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;vscp_firmware.c: 1103: k = 5;
  4293  0012DC  0E05               	movlw	5
  4294  0012DE  6FB8               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;vscp_firmware.c: 1104: for (i = 3; i < 7; i++)
  4298  0012E0  0E03               	movlw	3
  4299  0012E2  6FBC               	movwf	vscp_handleProtocolEvent@i_1131& (0+255),b
  4300  0012E4                     l1049:
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;vscp_firmware.c: 1105: {
  4304                           ;vscp_firmware.c: 1106: vscp_omsg.data[0] = i;
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;vscp_firmware.c: 1108: for (j = 1; j < 8; j++) {
  4308  0012E4  D90F               	call	PL40	;call to abstracted procedure
  4309  0012E6                     l7273:
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;vscp_firmware.c: 1109: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  4313  0012E6  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  4314  0012E8  0F88               	addlw	low (_vscp_omsg+5)
  4315  0012EA  6ED9               	movwf	fsr2l,c
  4316  0012EC  6ADA               	clrf	fsr2h,c
  4317  0012EE  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  4318  0012F0  ECFA  F016         	call	_vscp_getMDF_URL
  4319  0012F4  6EDF               	movwf	indf2,c
  4320                           
  4321                           ; BSR set to: 0
  4322  0012F6  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  4323                           
  4324                           ; BSR set to: 0
  4325  0012F8  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  4326                           
  4327                           ; BSR set to: 0
  4328  0012FA  0E07               	movlw	7
  4329  0012FC  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  4330  0012FE  D7F3               	goto	l7273
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;vscp_firmware.c: 1110: }
  4334                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  4335  001300  EC33  F016         	call	_vscp_sendEvent	;wreg free
  4336                           
  4337                           ; BSR set to: 0
  4338  001304  2BBC               	incf	vscp_handleProtocolEvent@i_1131& (0+255),f,b
  4339                           
  4340                           ; BSR set to: 0
  4341  001306  0E06               	movlw	6
  4342  001308  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1131& (0+255),b
  4343  00130A  D7EC               	goto	l1049
  4344  00130C  0C06               	retlw	6
  4345  00130E                     l7287:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;vscp_firmware.c: 1120: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  4349  00130E  5170               	movf	_vscp_nickname& (0+255),w,b
  4350  001310  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4351  001314  62DF               	cpfseq	indf2,c
  4352  001316  0012               	return	
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;vscp_firmware.c: 1122: vscp_omsg.priority = 0x03;
  4356  001318  0E03               	movlw	3
  4357  00131A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4358                           
  4359                           ;vscp_firmware.c: 1123: vscp_omsg.flags = 0x80 + 7;
  4360  00131C  0E87               	movlw	135
  4361  00131E  6F83               	movwf	_vscp_omsg& (0+255),b
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;vscp_firmware.c: 1124: vscp_omsg.vscp_class = 0;
  4365  001320  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4366  001322  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4367                           
  4368                           ;vscp_firmware.c: 1125: vscp_omsg.vscp_type = 34;
  4369  001324  0E22               	movlw	34
  4370  001326  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;vscp_firmware.c: 1127: vscp_getMatrixInfo((char *) vscp_omsg.data);
  4374  001328  0E88               	movlw	(_vscp_omsg+5)& (0+255)
  4375  00132A  EC9E  F016         	call	_vscp_getMatrixInfo
  4376  00132E  EF33  F016         	goto	_vscp_sendEvent
  4377  001332                     l7297:
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;vscp_firmware.c: 1143: if ( vscp_nickname == vscp_imsg.data[0] ) {
  4381  001332  5170               	movf	_vscp_nickname& (0+255),w,b
  4382  001334  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4383  001338  62DF               	cpfseq	indf2,c
  4384  00133A  0012               	return	
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;vscp_firmware.c: 1145: uint16_t page_save;
  4388                           ;vscp_firmware.c: 1146: uint8_t byte = 0, bytes = 0;
  4389  00133C  6BBB               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;vscp_firmware.c: 1147: uint8_t bytes_this_time, cb;
  4393                           ;vscp_firmware.c: 1151: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  4394  00133E  C075  F0A4         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  4395  001342  0E0F               	movlw	15
  4396  001344  17A4               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4397  001346  0E04               	movlw	4
  4398  001348  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4399  00134A  E304               	bnc	l7305
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;vscp_firmware.c: 1154: bytes = vscp_imsg.data[4];
  4403  00134C  C07F  F0B9         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1136
  4404                           
  4405                           ;vscp_firmware.c: 1156: if ( 0 == bytes ) {
  4406  001350  67B9               	tstfsz	vscp_handleProtocolEvent@bytes_1136& (0+255),b
  4407  001352  D002               	goto	l7309
  4408  001354                     l7305:
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;vscp_firmware.c: 1157: bytes = 1;
  4412  001354  0E01               	movlw	1
  4413  001356  6FB9               	movwf	vscp_handleProtocolEvent@bytes_1136& (0+255),b
  4414  001358                     l7309:
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;vscp_firmware.c: 1162: }
  4418                           ;vscp_firmware.c: 1165: page_save = vscp_page_select;
  4419  001358  C052  F0AB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  4420  00135C  C053  F0AC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;vscp_firmware.c: 1170: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  4424  001360  D8B4               	call	PL12	;call to abstracted procedure
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;vscp_firmware.c: 1173: vscp_omsg.priority = 0x03;
  4428  001362  0E03               	movlw	3
  4429  001364  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;vscp_firmware.c: 1174: vscp_omsg.vscp_class = 0;
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;vscp_firmware.c: 1175: vscp_omsg.vscp_type = 39;
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;vscp_firmware.c: 1176: vscp_omsg.data[0] = 0;
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;vscp_firmware.c: 1177: vscp_omsg.data[1] = vscp_imsg.data[1];
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;vscp_firmware.c: 1178: vscp_omsg.data[2] = vscp_imsg.data[2];
  4445  001366  D8BD               	call	PL16	;call to abstracted procedure
  4446  001368                     l7325:
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;vscp_firmware.c: 1182: if ( ( bytes - byte ) >= 4 ) {
  4450  001368  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4451  00136A  C0B9  F0A4         	movff	vscp_handleProtocolEvent@bytes_1136,??_vscp_handleProtocolEvent
  4452  00136E  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4453  001370  5FA4               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4454  001372  0E00               	movlw	0
  4455  001374  5BA5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4456  001376  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4457  001378  0A80               	xorlw	128
  4458  00137A  0F80               	addlw	-128
  4459  00137C  0E04               	movlw	4
  4460  00137E  B4D8               	btfsc	status,2,c
  4461  001380  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4462  001382  E302               	bnc	l7329
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;vscp_firmware.c: 1183: bytes_this_time = 4;
  4466  001384  0E04               	movlw	4
  4467  001386  D002               	goto	L4
  4468  001388                     l7329:
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;vscp_firmware.c: 1185: else {
  4472                           ;vscp_firmware.c: 1186: bytes_this_time = (bytes - byte);
  4473  001388  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4474  00138A  5DB9               	subwf	vscp_handleProtocolEvent@bytes_1136& (0+255),w,b
  4475  00138C                     L4:
  4476  00138C  6FB5               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;vscp_firmware.c: 1187: }
  4480                           ;vscp_firmware.c: 1190: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  4481  00138E  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4482  001390  0F84               	addlw	132
  4483  001392  6F83               	movwf	_vscp_omsg& (0+255),b
  4484                           
  4485                           ;vscp_firmware.c: 1191: vscp_omsg.data[3] =
  4486                           ;vscp_firmware.c: 1192: vscp_imsg.data[3] + byte;
  4487  001394  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4488  001396  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4489  001398  6F8B               	movwf	(_vscp_omsg+8)& (0+255),b
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;vscp_firmware.c: 1195: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  4493  00139A  6BB6               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  4494  00139C  D00C               	goto	l7337
  4495  00139E                     l7333:
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;vscp_firmware.c: 1196: vscp_omsg.data[ (4 + cb) ] =
  4499                           ;vscp_firmware.c: 1197: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  4500  00139E  51B6               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4501  0013A0  0F8C               	addlw	low (_vscp_omsg+9)
  4502  0013A2  6ED9               	movwf	fsr2l,c
  4503  0013A4  6ADA               	clrf	fsr2h,c
  4504  0013A6  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4505  0013A8  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4506  0013AA  25B6               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4507  0013AC  EC2D  F017         	call	_vscp_readRegister
  4508  0013B0  6EDF               	movwf	indf2,c
  4509  0013B2  0100               	movlb	0	; () banked
  4510  0013B4  2BB6               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  4511  0013B6                     l7337:
  4512                           
  4513                           ; BSR set to: 0
  4514  0013B6  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4515  0013B8  5DB6               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  4516  0013BA  E3F1               	bnc	l7333
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;vscp_firmware.c: 1198: }
  4520                           ;vscp_firmware.c: 1201: vscp_sendEvent();
  4521  0013BC  EC33  F016         	call	_vscp_sendEvent	;wreg free
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;vscp_firmware.c: 1204: byte += bytes_this_time;
  4525  0013C0  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  4526  0013C2  27BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;vscp_firmware.c: 1207: vscp_omsg.data[0] += 1;
  4530  0013C4  2B88               	incf	(_vscp_omsg+5)& (0+255),f,b
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;vscp_firmware.c: 1209: } while (byte < bytes);
  4534  0013C6  51B9               	movf	vscp_handleProtocolEvent@bytes_1136& (0+255),w,b
  4535  0013C8  5DBB               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  4536  0013CA  E3CE               	bnc	l7325
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;vscp_firmware.c: 1212: vscp_page_select = page_save;
  4540  0013CC  C0AB  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  4541  0013D0  C0AC  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  4542  0013D4  0012               	return	
  4543  0013D6                     l7347:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;vscp_firmware.c: 1219: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  4547  0013D6  5170               	movf	_vscp_nickname& (0+255),w,b
  4548  0013D8  EE20  F07B         	lfsr	2,_vscp_imsg+6
  4549  0013DC  62DF               	cpfseq	indf2,c
  4550  0013DE  0012               	return	
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;vscp_firmware.c: 1221: uint8_t i;
  4554                           ;vscp_firmware.c: 1222: uint16_t page_save;
  4555                           ;vscp_firmware.c: 1225: page_save = vscp_page_select;
  4556  0013E0  C052  F0AD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1140
  4557  0013E4  C053  F0AE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1140+1
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;vscp_firmware.c: 1229: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  4561  0013E8  D870               	call	PL12	;call to abstracted procedure
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;vscp_firmware.c: 1231: for (i = vscp_imsg.data[ 3 ];
  4565  0013EA  C07E  F0B7         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1139
  4566                           
  4567                           ;vscp_firmware.c: 1234: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  4568                           ;vscp_firmware.c: 1235: i++) {
  4569  0013EE  D012               	goto	l7359
  4570  0013F0                     l7355:
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;vscp_firmware.c: 1236: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  4574                           ;vscp_firmware.c: 1237: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  4575  0013F0  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4576  0013F2  088C               	sublw	low (_vscp_omsg+9)
  4577  0013F4  25B7               	addwf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4578  0013F6  6ED9               	movwf	fsr2l,c
  4579  0013F8  6ADA               	clrf	fsr2h,c
  4580  0013FA  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4581  0013FC  087F               	sublw	low (_vscp_imsg+10)
  4582  0013FE  25B7               	addwf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4583  001400  6EE1               	movwf	fsr1l,c
  4584  001402  6AE2               	clrf	fsr1h,c
  4585  001404  50E7               	movf	indf1,w,c
  4586  001406  6E18               	movwf	?_vscp_writeRegister,c
  4587  001408  51B7               	movf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4588  00140A  ECCD  F016         	call	_vscp_writeRegister
  4589  00140E  6EDF               	movwf	indf2,c
  4590  001410  0100               	movlb	0	; () banked
  4591  001412  2BB7               	incf	vscp_handleProtocolEvent@i_1139& (0+255),f,b
  4592  001414                     l7359:
  4593                           
  4594                           ; BSR set to: 0
  4595  001414  5175               	movf	_vscp_imsg& (0+255),w,b
  4596  001416  0B0F               	andlw	15
  4597  001418  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  4598  00141A  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4599  00141C  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  4600  00141E  27A4               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  4601  001420  0E00               	movlw	0
  4602  001422  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  4603  001424  0EFC               	movlw	252
  4604  001426  25A4               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4605  001428  6FA6               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  4606  00142A  0EFF               	movlw	255
  4607  00142C  21A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4608  00142E  6FA7               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  4609  001430  51B7               	movf	vscp_handleProtocolEvent@i_1139& (0+255),w,b
  4610  001432  6FA8               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  4611  001434  6BA9               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  4612  001436  51A9               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  4613  001438  0A80               	xorlw	128
  4614  00143A  6FAA               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  4615  00143C  51A6               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  4616  00143E  5DA8               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  4617  001440  51A7               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  4618  001442  0A80               	xorlw	128
  4619  001444  59AA               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  4620  001446  E3D4               	bnc	l7355
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;vscp_firmware.c: 1238: }
  4624                           ;vscp_firmware.c: 1241: vscp_page_select = page_save;
  4625  001448  C0AD  F052         	movff	vscp_handleProtocolEvent@page_save_1140,_vscp_page_select
  4626  00144C  C0AE  F053         	movff	vscp_handleProtocolEvent@page_save_1140+1,_vscp_page_select+1
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;vscp_firmware.c: 1243: vscp_omsg.priority = 0x03;
  4630  001450  0E03               	movlw	3
  4631  001452  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;vscp_firmware.c: 1244: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  4635  001454  5175               	movf	_vscp_imsg& (0+255),w,b
  4636  001456  0B0F               	andlw	15
  4637  001458  0F80               	addlw	128
  4638  00145A  6F83               	movwf	_vscp_omsg& (0+255),b
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;vscp_firmware.c: 1245: vscp_omsg.vscp_class = 0;
  4642                           
  4643                           ; BSR set to: 0
  4644                           ;vscp_firmware.c: 1246: vscp_omsg.vscp_type = 39;
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;vscp_firmware.c: 1247: vscp_omsg.data[0] = 0;
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;vscp_firmware.c: 1248: vscp_omsg.data[1] = vscp_imsg.data[1];
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;vscp_firmware.c: 1249: vscp_omsg.data[2] = vscp_imsg.data[2];
  4654  00145C  D842               	call	PL16	;call to abstracted procedure
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;vscp_firmware.c: 1250: vscp_omsg.data[3] = vscp_imsg.data[3];
  4658  00145E  C07E  F08B         	movff	_vscp_imsg+9,_vscp_omsg+8
  4659  001462  EF33  F016         	goto	_vscp_sendEvent
  4660  001466                     l7381:
  4661                           
  4662                           ; BSR set to: 0
  4663  001466  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  4664                           
  4665                           ; Switch size 1, requested type "space"
  4666                           ; Number of cases is 16, Range of values is 1 to 38
  4667                           ; switch strategies available:
  4668                           ; Name         Instructions Cycles
  4669                           ; simple_byte           49    25 (average)
  4670                           ;	Chosen strategy is simple_byte
  4671  001468  0A01               	xorlw	1	; case 1
  4672  00146A  E101 D55F          	bz	l6969
  4673  00146E  0A03               	xorlw	3	; case 2
  4674  001470  E101 D55E          	bz	l6971
  4675  001474  0A04               	xorlw	4	; case 6
  4676  001476  E101 D55D          	bz	l6973
  4677  00147A  0A0E               	xorlw	14	; case 8
  4678  00147C  E101 D55C          	bz	l6975
  4679  001480  0A01               	xorlw	1	; case 9
  4680  001482  E101 D55B          	bz	l6977
  4681  001486  0A02               	xorlw	2	; case 11
  4682  001488  E101 D57A          	bz	l7011
  4683  00148C  0A07               	xorlw	7	; case 12
  4684  00148E  E101 D590          	bz	l7045
  4685  001492  0A1B               	xorlw	27	; case 23
  4686  001494  E101 D624          	bz	l7103
  4687  001498  0A0F               	xorlw	15	; case 24
  4688  00149A  E101 D637          	bz	l7109
  4689  00149E  0A01               	xorlw	1	; case 25
  4690  0014A0  E101 D687          	bz	l7143
  4691  0014A4  0A04               	xorlw	4	; case 29
  4692  0014A6  E101 D6B1          	bz	l7169
  4693  0014AA  0A03               	xorlw	3	; case 30
  4694  0014AC  E101 D6BE          	bz	l7185
  4695  0014B0  0A01               	xorlw	1	; case 31
  4696  0014B2  E101 D6CB          	bz	l7201
  4697  0014B6  0A3E               	xorlw	62	; case 33
  4698  0014B8  E101 D729          	bz	l7287
  4699  0014BC  0A04               	xorlw	4	; case 37
  4700  0014BE  E101 D738          	bz	l7297
  4701  0014C2  0A03               	xorlw	3	; case 38
  4702  0014C4  A4D8               	btfss	status,2,c
  4703  0014C6  0012               	return	
  4704  0014C8  D786               	goto	l7347
  4705  0014CA                     __end_of_vscp_handleProtocolEvent:
  4706                           	opt stack 0
  4707  0014CA                     PL12:
  4708                           	opt stack 22
  4709  0014CA  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  4710  0014CC  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  4711  0014D0  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  4712  0014D2  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  4713  0014D6  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  4714  0014D8  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  4715  0014DA  6E52               	movwf	_vscp_page_select,c
  4716  0014DC  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  4717  0014DE  6E53               	movwf	_vscp_page_select+1,c
  4718  0014E0  0012               	return	
  4719  0014E2                     __end_ofPL12:
  4720                           	opt stack 0
  4721  0014E2                     PL16:
  4722                           	opt stack 22
  4723  0014E2  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4724  0014E4  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4725  0014E6  0E27               	movlw	39
  4726  0014E8  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4727  0014EA  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  4728  0014EC  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  4729  0014F0  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  4730  0014F4  0012               	return	
  4731  0014F6                     __end_ofPL16:
  4732                           	opt stack 0
  4733  0014F6                     PL32:
  4734                           	opt stack 22
  4735  0014F6  0E03               	movlw	3
  4736  0014F8  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  4737  0014FA  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  4738  0014FC  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  4739  0014FE  0E1A               	movlw	26
  4740  001500  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  4741  001502  0C1A               	retlw	26
  4742  001504                     __end_ofPL32:
  4743                           	opt stack 0
  4744  001504                     PL40:
  4745                           	opt stack 22
  4746  001504  C0BC  F088         	movff	vscp_handleProtocolEvent@i_1131,_vscp_omsg+5
  4747  001508  0E01               	movlw	1
  4748  00150A  6FBE               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  4749  00150C  0C01               	retlw	1
  4750  00150E                     __end_ofPL40:
  4751                           	opt stack 0
  4752                           tblptru	equ	0xFF8
  4753                           tblptrh	equ	0xFF7
  4754                           tblptrl	equ	0xFF6
  4755                           tablat	equ	0xFF5
  4756                           prodh	equ	0xFF4
  4757                           prodl	equ	0xFF3
  4758                           intcon	equ	0xFF2
  4759                           postinc0	equ	0xFEE
  4760                           wreg	equ	0xFE8
  4761                           indf1	equ	0xFE7
  4762                           fsr1h	equ	0xFE2
  4763                           fsr1l	equ	0xFE1
  4764                           indf2	equ	0xFDF
  4765                           postinc2	equ	0xFDE
  4766                           postdec2	equ	0xFDD
  4767                           plusw2	equ	0xFDB
  4768                           fsr2h	equ	0xFDA
  4769                           fsr2l	equ	0xFD9
  4770                           status	equ	0xFD8
  4771                           
  4772 ;; *************** function ___lbmod *****************
  4773 ;; Defined at:
  4774 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  4775 ;; Parameters:    Size  Location     Type
  4776 ;;  dividend        1    wreg     unsigned char 
  4777 ;;  divisor         1    7[COMRAM] unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  dividend        1    8[COMRAM] unsigned char 
  4780 ;;  rem             1   10[COMRAM] unsigned char 
  4781 ;;  counter         1    9[COMRAM] unsigned char 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      unsigned char 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0
  4786 ;; Tracked objects:
  4787 ;;		On entry : F/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4791 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4792 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4794 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4795 ;;Total ram usage:        4 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    2
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_vscp_handleProtocolEvent
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text15
  4806  002C18                     __ptext15:
  4807                           	opt stack 0
  4808  002C18                     ___lbmod:
  4809                           	opt stack 27
  4810                           
  4811                           ;incstack = 0
  4812                           ;incstack = 0
  4813                           ;___lbmod@dividend stored from wreg
  4814  002C18  CFE8 F009          	movff	wreg,___lbmod@dividend
  4815                           
  4816                           ; BSR set to: 0
  4817  002C1C  0E08               	movlw	8
  4818  002C1E  6E0A               	movwf	___lbmod@counter,c
  4819                           
  4820                           ; BSR set to: 0
  4821  002C20  6A0B               	clrf	___lbmod@rem,c
  4822  002C22                     l5509:
  4823  002C22  90D8               	bcf	status,0,c
  4824  002C24  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  4825  002C26  340B               	rlcf	___lbmod@rem& (0+255),w,c
  4826  002C28  6E0B               	movwf	___lbmod@rem,c
  4827  002C2A  90D8               	bcf	status,0,c
  4828  002C2C  3609               	rlcf	___lbmod@dividend,f,c
  4829  002C2E  5008               	movf	___lbmod@divisor,w,c
  4830  002C30  5C0B               	subwf	___lbmod@rem,w,c
  4831  002C32  E302               	bnc	l5517
  4832  002C34  5008               	movf	___lbmod@divisor,w,c
  4833  002C36  5E0B               	subwf	___lbmod@rem,f,c
  4834  002C38                     l5517:
  4835  002C38  2E0A               	decfsz	___lbmod@counter,f,c
  4836  002C3A  D7F3               	goto	l5509
  4837  002C3C  500B               	movf	___lbmod@rem,w,c
  4838  002C3E  0012               	return	
  4839  002C40                     __end_of___lbmod:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           postinc0	equ	0xFEE
  4849                           wreg	equ	0xFE8
  4850                           indf1	equ	0xFE7
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           plusw2	equ	0xFDB
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function _vscp_writeRegister *****************
  4862 ;; Defined at:
  4863 ;;		line 692 in file "../../vscp_firmware/common/vscp_firmware.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  reg             1    wreg     unsigned char 
  4866 ;;  value           1   23[COMRAM] unsigned char 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  reg             1   24[COMRAM] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  1    wreg      unsigned char 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : F/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4878 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4881 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4882 ;;Total ram usage:        2 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    6
  4885 ;; This function calls:
  4886 ;;		_vscp_writeAppReg
  4887 ;;		_vscp_writeStdReg
  4888 ;; This function is called by:
  4889 ;;		_vscp_handleProtocolEvent
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text16
  4894  002D9A                     __ptext16:
  4895                           	opt stack 0
  4896  002D9A                     _vscp_writeRegister:
  4897                           	opt stack 23
  4898                           
  4899                           ;incstack = 0
  4900                           ;incstack = 0
  4901                           ;vscp_writeRegister@reg stored from wreg
  4902  002D9A  CFE8 F019          	movff	wreg,vscp_writeRegister@reg
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;vscp_firmware.c: 693: if (reg >= 0x80) {
  4906  002D9E  0E7F               	movlw	127
  4907  002DA0  6419               	cpfsgt	vscp_writeRegister@reg,c
  4908  002DA2  D005               	goto	l6787
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;vscp_firmware.c: 694: return vscp_writeStdReg(reg, value);
  4912  002DA4  C018  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4913  002DA8  5019               	movf	vscp_writeRegister@reg,w,c
  4914  002DAA  EFF0  F010         	goto	_vscp_writeStdReg
  4915  002DAE                     l6787:
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;vscp_firmware.c: 696: return vscp_writeAppReg(reg, value);
  4919  002DAE  C018  F015         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4920  002DB2  5019               	movf	vscp_writeRegister@reg,w,c
  4921  002DB4  EF68  F010         	goto	_vscp_writeAppReg
  4922  002DB8                     __end_of_vscp_writeRegister:
  4923                           	opt stack 0
  4924                           tblptru	equ	0xFF8
  4925                           tblptrh	equ	0xFF7
  4926                           tblptrl	equ	0xFF6
  4927                           tablat	equ	0xFF5
  4928                           prodh	equ	0xFF4
  4929                           prodl	equ	0xFF3
  4930                           intcon	equ	0xFF2
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           indf1	equ	0xFE7
  4934                           fsr1h	equ	0xFE2
  4935                           fsr1l	equ	0xFE1
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           postdec2	equ	0xFDD
  4939                           plusw2	equ	0xFDB
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _vscp_writeStdReg *****************
  4945 ;; Defined at:
  4946 ;;		line 705 in file "../../vscp_firmware/common/vscp_firmware.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  reg             1    wreg     unsigned char 
  4949 ;;  value           1   14[COMRAM] unsigned char 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;  reg             1   20[COMRAM] unsigned char 
  4952 ;;  rv              1   19[COMRAM] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      unsigned char 
  4955 ;; Registers used:
  4956 ;;		wreg, status,2, status,0, cstack
  4957 ;; Tracked objects:
  4958 ;;		On entry : F/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4963 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4964 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4965 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4966 ;;Total ram usage:        7 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    5
  4969 ;; This function calls:
  4970 ;;		_vscp_setGUID
  4971 ;;		_vscp_setManufacturerId
  4972 ;;		_vscp_getGUID
  4973 ;;		_vscp_getUserID
  4974 ;;		_vscp_setUserID
  4975 ;;		_vscp_getManufacturerId
  4976 ;;		_vscp_restoreDefaults
  4977 ;; This function is called by:
  4978 ;;		_vscp_writeRegister
  4979 ;;		_vscp_handleProtocolEvent
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text17
  4984  0021E0                     __ptext17:
  4985                           	opt stack 0
  4986  0021E0                     _vscp_writeStdReg:
  4987                           	opt stack 24
  4988                           
  4989                           ;incstack = 0
  4990                           ;incstack = 0
  4991                           ;vscp_writeStdReg@reg stored from wreg
  4992  0021E0  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  4993                           
  4994                           ; BSR set to: 0
  4995                           ;vscp_firmware.c: 706: uint8_t rv = ~value;
  4996  0021E4  1C0F               	comf	vscp_writeStdReg@value,w,c
  4997  0021E6  6E14               	movwf	vscp_writeStdReg@rv,c
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;vscp_firmware.c: 708: if ((reg > (0x82 + 1)) &&
  5001                           ;vscp_firmware.c: 709: (reg < 0x89)) {
  5002  0021E8  0E83               	movlw	131
  5003  0021EA  6415               	cpfsgt	vscp_writeStdReg@reg,c
  5004  0021EC  D00E               	goto	l6799
  5005                           
  5006                           ; BSR set to: 0
  5007  0021EE  0E89               	movlw	137
  5008  0021F0  6015               	cpfslt	vscp_writeStdReg@reg,c
  5009  0021F2  D00B               	goto	l6799
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;vscp_firmware.c: 712: vscp_setUserID((reg - 0x84), value);
  5013  0021F4  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  5014  0021F8  5015               	movf	vscp_writeStdReg@reg,w,c
  5015  0021FA  0F7C               	addlw	124
  5016  0021FC  EC15  F017         	call	_vscp_setUserID
  5017                           
  5018                           ;vscp_firmware.c: 713: rv = vscp_getUserID((reg - 0x84));
  5019  002200  5015               	movf	vscp_writeStdReg@reg,w,c
  5020  002202  0F7C               	addlw	124
  5021  002204  EC42  F017         	call	_vscp_getUserID
  5022  002208  D069               	goto	L10
  5023  00220A                     l6799:
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;vscp_firmware.c: 716: else if (0x92 == reg) {
  5027  00220A  5015               	movf	vscp_writeStdReg@reg,w,c
  5028  00220C  0A92               	xorlw	146
  5029  00220E  E10D               	bnz	l6805
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;vscp_firmware.c: 719: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  5033  002210  500F               	movf	vscp_writeStdReg@value,w,c
  5034  002212  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  5035  002214  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  5036  002216  5052               	movf	_vscp_page_select,w,c
  5037  002218  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  5038  00221A  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  5039  00221C  1010               	iorwf	??_vscp_writeStdReg,w,c
  5040  00221E  6E52               	movwf	_vscp_page_select,c
  5041  002220  5011               	movf	??_vscp_writeStdReg+1,w,c
  5042  002222  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  5043  002224  6E53               	movwf	_vscp_page_select+1,c
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;vscp_firmware.c: 720: rv = (vscp_page_select >> 8) & 0xff;
  5047  002226  5053               	movf	_vscp_page_select+1,w,c
  5048  002228  D059               	goto	L10
  5049  00222A                     l6805:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;vscp_firmware.c: 722: else if (0x93 == reg) {
  5053  00222A  5015               	movf	vscp_writeStdReg@reg,w,c
  5054  00222C  0A93               	xorlw	147
  5055  00222E  E10B               	bnz	l6811
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;vscp_firmware.c: 725: vscp_page_select = (vscp_page_select & 0xff00) | value;
  5059  002230  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  5060  002232  5053               	movf	_vscp_page_select+1,w,c
  5061  002234  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  5062  002236  500F               	movf	vscp_writeStdReg@value,w,c
  5063  002238  1010               	iorwf	??_vscp_writeStdReg,w,c
  5064  00223A  6E52               	movwf	_vscp_page_select,c
  5065  00223C  5011               	movf	??_vscp_writeStdReg+1,w,c
  5066  00223E  6E53               	movwf	_vscp_page_select+1,c
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;vscp_firmware.c: 726: rv = (vscp_page_select & 0xff);
  5070  002240  C052  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  5071                           
  5072                           ;vscp_firmware.c: 727: }
  5073  002244  D04E               	goto	l6853
  5074  002246                     l6811:
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;vscp_firmware.c: 732: else if ((reg > 0x88) && (reg < 0x91)) {
  5078  002246  0E88               	movlw	136
  5079  002248  6415               	cpfsgt	vscp_writeStdReg@reg,c
  5080  00224A  D019               	goto	l6823
  5081                           
  5082                           ; BSR set to: 0
  5083  00224C  0E91               	movlw	145
  5084  00224E  6015               	cpfslt	vscp_writeStdReg@reg,c
  5085  002250  D016               	goto	l6823
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;vscp_firmware.c: 734: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  5089                           ;vscp_firmware.c: 735: (0xff != (vscp_page_select & 0xff))) {
  5090  002252  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  5091  002256  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  5092  00225A  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  5093  00225C  2811               	incf	??_vscp_writeStdReg+1,w,c
  5094  00225E  E102               	bnz	l6819
  5095                           
  5096                           ; BSR set to: 0
  5097  002260  2852               	incf	_vscp_page_select,w,c
  5098  002262  E002               	bz	l6821
  5099  002264                     l6819:
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;vscp_firmware.c: 737: rv = ~value;
  5103  002264  1C0F               	comf	vscp_writeStdReg@value,w,c
  5104  002266  D03A               	goto	L10
  5105  002268                     l6821:
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;vscp_firmware.c: 740: vscp_setManufacturerId(reg - 0x89, value);
  5109  002268  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  5110  00226C  5015               	movf	vscp_writeStdReg@reg,w,c
  5111  00226E  0F77               	addlw	119
  5112  002270  EC7E  F016         	call	_vscp_setManufacturerId
  5113                           
  5114                           ;vscp_firmware.c: 741: rv = vscp_getManufacturerId(reg - 0x89);
  5115  002274  5015               	movf	vscp_writeStdReg@reg,w,c
  5116  002276  0F77               	addlw	119
  5117  002278  EC38  F017         	call	_vscp_getManufacturerId
  5118  00227C  D02F               	goto	L10
  5119  00227E                     l6823:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;vscp_firmware.c: 744: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  5123  00227E  0ECF               	movlw	207
  5124  002280  6415               	cpfsgt	vscp_writeStdReg@reg,c
  5125  002282  D017               	goto	l6835
  5126                           
  5127                           ; BSR set to: 0
  5128  002284  0EE0               	movlw	224
  5129  002286  6015               	cpfslt	vscp_writeStdReg@reg,c
  5130  002288  D014               	goto	l6835
  5131                           
  5132                           ; BSR set to: 0
  5133                           ;vscp_firmware.c: 746: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  5134                           ;vscp_firmware.c: 747: (0xff != (vscp_page_select & 0xff))) {
  5135  00228A  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  5136  00228E  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  5137  002292  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  5138  002294  2811               	incf	??_vscp_writeStdReg+1,w,c
  5139  002296  E1E6               	bnz	l6819
  5140                           
  5141                           ; BSR set to: 0
  5142  002298  2852               	incf	_vscp_page_select,w,c
  5143  00229A  E1E4               	bnz	l6819
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;vscp_firmware.c: 751: else {
  5147                           ;vscp_firmware.c: 752: vscp_setGUID(reg - 0xD0, value);
  5148  00229C  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  5149  0022A0  5015               	movf	vscp_writeStdReg@reg,w,c
  5150  0022A2  0F30               	addlw	48
  5151  0022A4  EC8E  F016         	call	_vscp_setGUID
  5152                           
  5153                           ;vscp_firmware.c: 753: rv = vscp_getGUID(reg - 0xD0);
  5154  0022A8  5015               	movf	vscp_writeStdReg@reg,w,c
  5155  0022AA  0F30               	addlw	48
  5156  0022AC  EC4C  F017         	call	_vscp_getGUID
  5157  0022B0  D015               	goto	L10
  5158  0022B2                     l6835:
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  5162  0022B2  5015               	movf	vscp_writeStdReg@reg,w,c
  5163  0022B4  0AA2               	xorlw	162
  5164  0022B6  E1D6               	bnz	l6819
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  5168  0022B8  500F               	movf	vscp_writeStdReg@value,w,c
  5169  0022BA  0A55               	xorlw	85
  5170  0022BC  E104               	bnz	l6843
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  5174  0022BE  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  5175  0022C0  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  5176                           
  5177                           ; BSR set to: 0
  5178                           ;vscp_firmware.c: 760: rv = 0x55;
  5179  0022C2  0E55               	movlw	85
  5180  0022C4  D00B               	goto	L10
  5181  0022C6                     l6843:
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  5185  0022C6  500F               	movf	vscp_writeStdReg@value,w,c
  5186  0022C8  0AAA               	xorlw	170
  5187  0022CA  E10B               	bnz	l6853
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  5191  0022CC  0EE8               	movlw	232
  5192  0022CE  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  5193  0022D0  0E03               	movlw	3
  5194  0022D2  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  5195  0022D4  E205               	bc	l980
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  5199  0022D6  ECB3  F017         	call	_vscp_restoreDefaults	;wreg free
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;vscp_firmware.c: 765: rv = 0xaa;
  5203  0022DA  0EAA               	movlw	170
  5204  0022DC                     L10:
  5205  0022DC  6E14               	movwf	vscp_writeStdReg@rv,c
  5206                           
  5207                           ;vscp_firmware.c: 766: }
  5208  0022DE  D001               	goto	l6853
  5209  0022E0                     l980:
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;vscp_firmware.c: 767: else {
  5213                           ;vscp_firmware.c: 768: rv = 0;
  5214  0022E0  6A14               	clrf	vscp_writeStdReg@rv,c
  5215  0022E2                     l6853:
  5216                           
  5217                           ;vscp_firmware.c: 776: }
  5218                           ;vscp_firmware.c: 778: return rv;
  5219  0022E2  5014               	movf	vscp_writeStdReg@rv,w,c
  5220  0022E4  0012               	return	
  5221  0022E6                     __end_of_vscp_writeStdReg:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf1	equ	0xFE7
  5233                           fsr1h	equ	0xFE2
  5234                           fsr1l	equ	0xFE1
  5235                           indf2	equ	0xFDF
  5236                           postinc2	equ	0xFDE
  5237                           postdec2	equ	0xFDD
  5238                           plusw2	equ	0xFDB
  5239                           fsr2h	equ	0xFDA
  5240                           fsr2l	equ	0xFD9
  5241                           status	equ	0xFD8
  5242                           
  5243 ;; *************** function _vscp_restoreDefaults *****************
  5244 ;; Defined at:
  5245 ;;		line 1428 in file "../main.c"
  5246 ;; Parameters:    Size  Location     Type
  5247 ;;		None
  5248 ;; Auto vars:     Size  Location     Type
  5249 ;;		None
  5250 ;; Return value:  Size  Location     Type
  5251 ;;		None               void
  5252 ;; Registers used:
  5253 ;;		wreg, status,2, status,0, cstack
  5254 ;; Tracked objects:
  5255 ;;		On entry : F/0
  5256 ;;		On exit  : F/0
  5257 ;;		Unchanged: 0/0
  5258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5263 ;;Total ram usage:        0 bytes
  5264 ;; Hardware stack levels used:    1
  5265 ;; Hardware stack levels required when called:    4
  5266 ;; This function calls:
  5267 ;;		_init_app_eeprom
  5268 ;;		_init_app_ram
  5269 ;; This function is called by:
  5270 ;;		_vscp_writeStdReg
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text18
  5275  002F66                     __ptext18:
  5276                           	opt stack 0
  5277  002F66                     _vscp_restoreDefaults:
  5278                           	opt stack 24
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;main.c: 1429: init_app_eeprom();
  5282                           
  5283                           ;incstack = 0
  5284                           ;incstack = 0
  5285  002F66  EC66  F013         	call	_init_app_eeprom	;wreg free
  5286                           
  5287                           ;main.c: 1430: init_app_ram();
  5288  002F6A  EF7A  F017         	goto	_init_app_ram	;wreg free
  5289  002F6E                     __end_of_vscp_restoreDefaults:
  5290                           	opt stack 0
  5291                           tblptru	equ	0xFF8
  5292                           tblptrh	equ	0xFF7
  5293                           tblptrl	equ	0xFF6
  5294                           tablat	equ	0xFF5
  5295                           prodh	equ	0xFF4
  5296                           prodl	equ	0xFF3
  5297                           intcon	equ	0xFF2
  5298                           postinc0	equ	0xFEE
  5299                           wreg	equ	0xFE8
  5300                           indf1	equ	0xFE7
  5301                           fsr1h	equ	0xFE2
  5302                           fsr1l	equ	0xFE1
  5303                           indf2	equ	0xFDF
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           plusw2	equ	0xFDB
  5307                           fsr2h	equ	0xFDA
  5308                           fsr2l	equ	0xFD9
  5309                           status	equ	0xFD8
  5310                           
  5311 ;; *************** function _init_app_eeprom *****************
  5312 ;; Defined at:
  5313 ;;		line 427 in file "../main.c"
  5314 ;; Parameters:    Size  Location     Type
  5315 ;;		None
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  i               1   13[COMRAM] unsigned char 
  5318 ;;  j               1   12[COMRAM] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/E
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5330 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5331 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5332 ;;Total ram usage:        4 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    3
  5335 ;; This function calls:
  5336 ;;		_writeEEPROM
  5337 ;; This function is called by:
  5338 ;;		_main
  5339 ;;		_vscp_restoreDefaults
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text19
  5344  0026CC                     __ptext19:
  5345                           	opt stack 0
  5346  0026CC                     _init_app_eeprom:
  5347                           	opt stack 24
  5348                           
  5349                           ;main.c: 428: unsigned char i, j;
  5350                           ;main.c: 430: writeEEPROM( 0x21 + 0, 0 );
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;incstack = 0
  5354                           ;incstack = 0
  5355  0026CC  6A09               	clrf	?_writeEEPROM+1,c
  5356  0026CE  0E21               	movlw	33
  5357  0026D0  6E08               	movwf	?_writeEEPROM,c
  5358  0026D2  0E00               	movlw	0
  5359  0026D4  6A0A               	clrf	?_writeEEPROM+2,c
  5360  0026D6  EC59  F016         	call	_writeEEPROM	;wreg free
  5361                           
  5362                           ;main.c: 431: writeEEPROM( 0x21 + 1, 0 );
  5363  0026DA  6A09               	clrf	?_writeEEPROM+1,c
  5364  0026DC  0E22               	movlw	34
  5365  0026DE  6E08               	movwf	?_writeEEPROM,c
  5366  0026E0  0E00               	movlw	0
  5367  0026E2  6A0A               	clrf	?_writeEEPROM+2,c
  5368  0026E4  EC59  F016         	call	_writeEEPROM	;wreg free
  5369                           
  5370                           ;main.c: 433: for ( i=3; i<21; i++ ) {
  5371  0026E8  0E03               	movlw	3
  5372  0026EA  6E0E               	movwf	init_app_eeprom@i,c
  5373  0026EC                     l3809:
  5374                           
  5375                           ;main.c: 434: writeEEPROM( 0x21 + 5 + (i-3), i );
  5376  0026EC  0E23               	movlw	35
  5377  0026EE  240E               	addwf	init_app_eeprom@i,w,c
  5378  0026F0  6E08               	movwf	?_writeEEPROM,c
  5379  0026F2  6A09               	clrf	?_writeEEPROM+1,c
  5380  0026F4  0E00               	movlw	0
  5381  0026F6  2209               	addwfc	?_writeEEPROM+1,f,c
  5382  0026F8  C00E  F00A         	movff	init_app_eeprom@i,?_writeEEPROM+2
  5383  0026FC  EC59  F016         	call	_writeEEPROM	;wreg free
  5384  002700  2A0E               	incf	init_app_eeprom@i,f,c
  5385  002702  0E14               	movlw	20
  5386  002704  640E               	cpfsgt	init_app_eeprom@i,c
  5387  002706  D7F2               	goto	l3809
  5388                           
  5389                           ;main.c: 435: }
  5390                           ;main.c: 437: writeEEPROM( 0x21 + 2, 0 );
  5391  002708  6A09               	clrf	?_writeEEPROM+1,c
  5392  00270A  0E23               	movlw	35
  5393  00270C  6E08               	movwf	?_writeEEPROM,c
  5394  00270E  0E00               	movlw	0
  5395  002710  6A0A               	clrf	?_writeEEPROM+2,c
  5396  002712  EC59  F016         	call	_writeEEPROM	;wreg free
  5397                           
  5398                           ;main.c: 438: writeEEPROM( 0x21 + 3, 0 );
  5399  002716  6A09               	clrf	?_writeEEPROM+1,c
  5400  002718  0E24               	movlw	36
  5401  00271A  6E08               	movwf	?_writeEEPROM,c
  5402  00271C  0E00               	movlw	0
  5403  00271E  6A0A               	clrf	?_writeEEPROM+2,c
  5404  002720  EC59  F016         	call	_writeEEPROM	;wreg free
  5405                           
  5406                           ;main.c: 439: writeEEPROM( 0x21 + 4, 0 );
  5407  002724  6A09               	clrf	?_writeEEPROM+1,c
  5408  002726  0E25               	movlw	37
  5409  002728  6E08               	movwf	?_writeEEPROM,c
  5410  00272A  0E00               	movlw	0
  5411  00272C  6A0A               	clrf	?_writeEEPROM+2,c
  5412  00272E  EC59  F016         	call	_writeEEPROM	;wreg free
  5413                           
  5414                           ;main.c: 443: for ( i = 0; i < 8; i++ ) {
  5415  002732  6A0E               	clrf	init_app_eeprom@i,c
  5416  002734                     l177:
  5417                           
  5418                           ;main.c: 444: for ( j = 0; j < 8; j++ ) {
  5419  002734  6A0D               	clrf	init_app_eeprom@j,c
  5420  002736                     l3827:
  5421                           
  5422                           ;main.c: 445: writeEEPROM( 0x21 + 23 + 0 + i * 8 + j, 0 );
  5423  002736  500D               	movf	init_app_eeprom@j,w,c
  5424  002738  C00E  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  5425  00273C  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  5426  00273E  90D8               	bcf	status,0,c
  5427  002740  360B               	rlcf	??_init_app_eeprom,f,c
  5428  002742  360C               	rlcf	??_init_app_eeprom+1,f,c
  5429  002744  90D8               	bcf	status,0,c
  5430  002746  360B               	rlcf	??_init_app_eeprom,f,c
  5431  002748  360C               	rlcf	??_init_app_eeprom+1,f,c
  5432  00274A  90D8               	bcf	status,0,c
  5433  00274C  360B               	rlcf	??_init_app_eeprom,f,c
  5434  00274E  360C               	rlcf	??_init_app_eeprom+1,f,c
  5435  002750  260B               	addwf	??_init_app_eeprom,f,c
  5436  002752  0E00               	movlw	0
  5437  002754  220C               	addwfc	??_init_app_eeprom+1,f,c
  5438  002756  0E38               	movlw	56
  5439  002758  240B               	addwf	??_init_app_eeprom,w,c
  5440  00275A  6E08               	movwf	?_writeEEPROM,c
  5441  00275C  0E00               	movlw	0
  5442  00275E  200C               	addwfc	??_init_app_eeprom+1,w,c
  5443  002760  6E09               	movwf	?_writeEEPROM+1,c
  5444  002762  0E00               	movlw	0
  5445  002764  6A0A               	clrf	?_writeEEPROM+2,c
  5446  002766  EC59  F016         	call	_writeEEPROM	;wreg free
  5447  00276A  2A0D               	incf	init_app_eeprom@j,f,c
  5448  00276C  0E07               	movlw	7
  5449  00276E  640D               	cpfsgt	init_app_eeprom@j,c
  5450  002770  D7E2               	goto	l3827
  5451  002772  2A0E               	incf	init_app_eeprom@i,f,c
  5452  002774  640E               	cpfsgt	init_app_eeprom@i,c
  5453  002776  D7DE               	goto	l177
  5454  002778  0C07               	retlw	7
  5455  00277A                     __end_of_init_app_eeprom:
  5456                           	opt stack 0
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           intcon	equ	0xFF2
  5464                           postinc0	equ	0xFEE
  5465                           wreg	equ	0xFE8
  5466                           indf1	equ	0xFE7
  5467                           fsr1h	equ	0xFE2
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           plusw2	equ	0xFDB
  5473                           fsr2h	equ	0xFDA
  5474                           fsr2l	equ	0xFD9
  5475                           status	equ	0xFD8
  5476                           
  5477 ;; *************** function _vscp_setUserID *****************
  5478 ;; Defined at:
  5479 ;;		line 1262 in file "../main.c"
  5480 ;; Parameters:    Size  Location     Type
  5481 ;;  idx             1    wreg     unsigned char 
  5482 ;;  data            1   10[COMRAM] unsigned char 
  5483 ;; Auto vars:     Size  Location     Type
  5484 ;;  idx             1   11[COMRAM] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;		None               void
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0, cstack
  5489 ;; Tracked objects:
  5490 ;;		On entry : F/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5494 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5495 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5498 ;;Total ram usage:        2 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    3
  5501 ;; This function calls:
  5502 ;;		_writeEEPROM
  5503 ;; This function is called by:
  5504 ;;		_vscp_writeStdReg
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text20
  5509  002E2A                     __ptext20:
  5510                           	opt stack 0
  5511  002E2A                     _vscp_setUserID:
  5512                           	opt stack 25
  5513                           
  5514                           ;incstack = 0
  5515                           ;incstack = 0
  5516                           ;vscp_setUserID@idx stored from wreg
  5517  002E2A  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;main.c: 1263: writeEEPROM( idx + 0x04, data );
  5521  002E2E  0E04               	movlw	4
  5522  002E30  240C               	addwf	vscp_setUserID@idx,w,c
  5523  002E32  6E08               	movwf	?_writeEEPROM,c
  5524  002E34  6A09               	clrf	?_writeEEPROM+1,c
  5525  002E36  0E00               	movlw	0
  5526  002E38  2209               	addwfc	?_writeEEPROM+1,f,c
  5527  002E3A  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  5528  002E3E  EF59  F016         	goto	_writeEEPROM	;wreg free
  5529  002E42                     __end_of_vscp_setUserID:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           intcon	equ	0xFF2
  5538                           postinc0	equ	0xFEE
  5539                           wreg	equ	0xFE8
  5540                           indf1	equ	0xFE7
  5541                           fsr1h	equ	0xFE2
  5542                           fsr1l	equ	0xFE1
  5543                           indf2	equ	0xFDF
  5544                           postinc2	equ	0xFDE
  5545                           postdec2	equ	0xFDD
  5546                           plusw2	equ	0xFDB
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function _vscp_setManufacturerId *****************
  5552 ;; Defined at:
  5553 ;;		line 507 in file "../main.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  idx             1    wreg     unsigned char 
  5556 ;;  data            1   10[COMRAM] unsigned char 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  idx             1   11[COMRAM] unsigned char 
  5559 ;; Return value:  Size  Location     Type
  5560 ;;		None               void
  5561 ;; Registers used:
  5562 ;;		wreg, status,2, status,0, cstack
  5563 ;; Tracked objects:
  5564 ;;		On entry : F/0
  5565 ;;		On exit  : 0/0
  5566 ;;		Unchanged: 0/0
  5567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5568 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5572 ;;Total ram usage:        2 bytes
  5573 ;; Hardware stack levels used:    1
  5574 ;; Hardware stack levels required when called:    3
  5575 ;; This function calls:
  5576 ;;		_writeEEPROM
  5577 ;; This function is called by:
  5578 ;;		_vscp_writeStdReg
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text21
  5583  002CFC                     __ptext21:
  5584                           	opt stack 0
  5585  002CFC                     _vscp_setManufacturerId:
  5586                           	opt stack 25
  5587                           
  5588                           ;incstack = 0
  5589                           ;incstack = 0
  5590                           ;vscp_setManufacturerId@idx stored from wreg
  5591  002CFC  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;main.c: 508: if ( idx>7 ) return;
  5595  002D00  0E07               	movlw	7
  5596  002D02  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  5597  002D04  D001               	goto	l4619
  5598  002D06  0C07               	retlw	7
  5599  002D08                     l4619:
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;main.c: 509: writeEEPROM(0x09 + idx, data);
  5603  002D08  0E09               	movlw	9
  5604  002D0A  240C               	addwf	vscp_setManufacturerId@idx,w,c
  5605  002D0C  6E08               	movwf	?_writeEEPROM,c
  5606  002D0E  6A09               	clrf	?_writeEEPROM+1,c
  5607  002D10  0E00               	movlw	0
  5608  002D12  2209               	addwfc	?_writeEEPROM+1,f,c
  5609  002D14  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  5610  002D18  EF59  F016         	goto	_writeEEPROM	;wreg free
  5611  002D1C                     __end_of_vscp_setManufacturerId:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           indf1	equ	0xFE7
  5623                           fsr1h	equ	0xFE2
  5624                           fsr1l	equ	0xFE1
  5625                           indf2	equ	0xFDF
  5626                           postinc2	equ	0xFDE
  5627                           postdec2	equ	0xFDD
  5628                           plusw2	equ	0xFDB
  5629                           fsr2h	equ	0xFDA
  5630                           fsr2l	equ	0xFD9
  5631                           status	equ	0xFD8
  5632                           
  5633 ;; *************** function _vscp_setGUID *****************
  5634 ;; Defined at:
  5635 ;;		line 495 in file "../main.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  idx             1    wreg     unsigned char 
  5638 ;;  data            1   10[COMRAM] unsigned char 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;  idx             1   11[COMRAM] unsigned char 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;		None               void
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : F/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5650 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5653 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5654 ;;Total ram usage:        2 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    3
  5657 ;; This function calls:
  5658 ;;		_writeEEPROM
  5659 ;; This function is called by:
  5660 ;;		_vscp_writeStdReg
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text22
  5665  002D1C                     __ptext22:
  5666                           	opt stack 0
  5667  002D1C                     _vscp_setGUID:
  5668                           	opt stack 25
  5669                           
  5670                           ;incstack = 0
  5671                           ;incstack = 0
  5672                           ;vscp_setGUID@idx stored from wreg
  5673  002D1C  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;main.c: 496: if ( idx>15 ) return;
  5677  002D20  0E0F               	movlw	15
  5678  002D22  640C               	cpfsgt	vscp_setGUID@idx,c
  5679  002D24  D001               	goto	l4613
  5680  002D26  0C0F               	retlw	15
  5681  002D28                     l4613:
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;main.c: 497: writeEEPROM(0x11 + idx, data);
  5685  002D28  0E11               	movlw	17
  5686  002D2A  240C               	addwf	vscp_setGUID@idx,w,c
  5687  002D2C  6E08               	movwf	?_writeEEPROM,c
  5688  002D2E  6A09               	clrf	?_writeEEPROM+1,c
  5689  002D30  0E00               	movlw	0
  5690  002D32  2209               	addwfc	?_writeEEPROM+1,f,c
  5691  002D34  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  5692  002D38  EF59  F016         	goto	_writeEEPROM	;wreg free
  5693  002D3C                     __end_of_vscp_setGUID:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           postinc0	equ	0xFEE
  5703                           wreg	equ	0xFE8
  5704                           indf1	equ	0xFE7
  5705                           fsr1h	equ	0xFE2
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           plusw2	equ	0xFDB
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _vscp_writeAppReg *****************
  5716 ;; Defined at:
  5717 ;;		line 641 in file "../main.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  reg             1    wreg     unsigned char 
  5720 ;;  val             1   20[COMRAM] unsigned char 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  reg             1   22[COMRAM] unsigned char 
  5723 ;;  rv              1   21[COMRAM] unsigned char 
  5724 ;; Return value:  Size  Location     Type
  5725 ;;                  1    wreg      unsigned char 
  5726 ;; Registers used:
  5727 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5728 ;; Tracked objects:
  5729 ;;		On entry : F/0
  5730 ;;		On exit  : 0/0
  5731 ;;		Unchanged: 0/0
  5732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5733 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5734 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5736 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5737 ;;Total ram usage:        3 bytes
  5738 ;; Hardware stack levels used:    1
  5739 ;; Hardware stack levels required when called:    4
  5740 ;; This function calls:
  5741 ;;		_readEEPROM
  5742 ;;		_writeControlReg
  5743 ;;		_writeEEPROM
  5744 ;; This function is called by:
  5745 ;;		_vscp_writeRegister
  5746 ;;		_vscp_handleProtocolEvent
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text23
  5751  0020D0                     __ptext23:
  5752                           	opt stack 0
  5753  0020D0                     _vscp_writeAppReg:
  5754                           	opt stack 24
  5755                           
  5756                           ;incstack = 0
  5757                           ;incstack = 0
  5758                           ;vscp_writeAppReg@reg stored from wreg
  5759  0020D0  CFE8 F017          	movff	wreg,vscp_writeAppReg@reg
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;main.c: 642: uint8_t rv;
  5763                           ;main.c: 644: rv = ~val;
  5764  0020D4  1C15               	comf	vscp_writeAppReg@val,w,c
  5765  0020D6  6E16               	movwf	vscp_writeAppReg@rv,c
  5766                           
  5767                           ;main.c: 647: if ( 0 == vscp_page_select ) {
  5768  0020D8  5053               	movf	_vscp_page_select+1,w,c
  5769  0020DA  1052               	iorwf	_vscp_page_select,w,c
  5770  0020DC  E164               	bnz	l6385
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;main.c: 650: if ( reg == 0 ) {
  5774  0020DE  6617               	tstfsz	vscp_writeAppReg@reg,c
  5775  0020E0  D00D               	goto	l6355
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;main.c: 651: writeEEPROM(0x21 + 0, val);
  5779  0020E2  6A09               	clrf	?_writeEEPROM+1,c
  5780  0020E4  0E21               	movlw	33
  5781  0020E6  6E08               	movwf	?_writeEEPROM,c
  5782  0020E8  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5783  0020EC  EC59  F016         	call	_writeEEPROM	;wreg free
  5784                           
  5785                           ;main.c: 652: rv = readEEPROM(0x21 + 0);
  5786  0020F0  6A09               	clrf	?_readEEPROM+1,c
  5787  0020F2  0E21               	movlw	33
  5788  0020F4  6E08               	movwf	?_readEEPROM,c
  5789  0020F6  EC68  F017         	call	_readEEPROM	;wreg free
  5790  0020FA  D067               	goto	L11
  5791  0020FC                     l6355:
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;main.c: 654: else if ( reg == 1 ) {
  5795  0020FC  0417               	decf	vscp_writeAppReg@reg,w,c
  5796  0020FE  E10D               	bnz	l6359
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;main.c: 656: writeEEPROM(0x21 + 1, val);
  5800  002100  6A09               	clrf	?_writeEEPROM+1,c
  5801  002102  0E22               	movlw	34
  5802  002104  6E08               	movwf	?_writeEEPROM,c
  5803  002106  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5804  00210A  EC59  F016         	call	_writeEEPROM	;wreg free
  5805                           
  5806                           ;main.c: 657: rv = readEEPROM(0x21 + 1);
  5807  00210E  6A09               	clrf	?_readEEPROM+1,c
  5808  002110  0E22               	movlw	34
  5809  002112  6E08               	movwf	?_readEEPROM,c
  5810  002114  EC68  F017         	call	_readEEPROM	;wreg free
  5811  002118  D058               	goto	L11
  5812  00211A                     l6359:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;main.c: 660: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
  5816  00211A  0E04               	movlw	4
  5817  00211C  6417               	cpfsgt	vscp_writeAppReg@reg,c
  5818  00211E  D010               	goto	l6365
  5819                           
  5820                           ; BSR set to: 0
  5821  002120  0E17               	movlw	23
  5822  002122  6017               	cpfslt	vscp_writeAppReg@reg,c
  5823  002124  D00D               	goto	l6365
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;main.c: 661: writeEEPROM(0x21 + 5 +
  5827                           ;main.c: 662: ( reg - 5 ), val);
  5828  002126  0E21               	movlw	33
  5829  002128  D853               	call	PL30	;call to abstracted procedure
  5830  00212A  EC59  F016         	call	_writeEEPROM	;wreg free
  5831                           
  5832                           ;main.c: 663: rv = readEEPROM( 0x21 + 5 +
  5833                           ;main.c: 664: ( reg - 5 ) );
  5834  00212E  0E21               	movlw	33
  5835  002130  2417               	addwf	vscp_writeAppReg@reg,w,c
  5836  002132  6E08               	movwf	?_readEEPROM,c
  5837  002134  6A09               	clrf	?_readEEPROM+1,c
  5838  002136  0E00               	movlw	0
  5839  002138  2209               	addwfc	?_readEEPROM+1,f,c
  5840  00213A  EC68  F017         	call	_readEEPROM	;wreg free
  5841  00213E  D045               	goto	L11
  5842  002140                     l6365:
  5843                           
  5844                           ; BSR set to: 0
  5845                           ;main.c: 667: else if ( reg == 2 ) {
  5846  002140  5017               	movf	vscp_writeAppReg@reg,w,c
  5847  002142  0A02               	xorlw	2
  5848  002144  E10D               	bnz	l6371
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;main.c: 668: writeEEPROM(0x21 + 2, val);
  5852  002146  6A09               	clrf	?_writeEEPROM+1,c
  5853  002148  0E23               	movlw	35
  5854  00214A  6E08               	movwf	?_writeEEPROM,c
  5855  00214C  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5856  002150  EC59  F016         	call	_writeEEPROM	;wreg free
  5857                           
  5858                           ;main.c: 669: rv = writeControlReg( 0, val );
  5859  002154  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5860  002158  0E00               	movlw	0
  5861  00215A  EC4C  F00D         	call	_writeControlReg
  5862  00215E  D035               	goto	L11
  5863  002160                     l6371:
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;main.c: 672: else if ( reg == 3 ) {
  5867  002160  5017               	movf	vscp_writeAppReg@reg,w,c
  5868  002162  0A03               	xorlw	3
  5869  002164  E10D               	bnz	l6377
  5870                           
  5871                           ; BSR set to: 0
  5872                           ;main.c: 673: writeEEPROM(0x21 + 3, val);
  5873  002166  6A09               	clrf	?_writeEEPROM+1,c
  5874  002168  0E24               	movlw	36
  5875  00216A  6E08               	movwf	?_writeEEPROM,c
  5876  00216C  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5877  002170  EC59  F016         	call	_writeEEPROM	;wreg free
  5878                           
  5879                           ;main.c: 674: rv = writeControlReg( 1, val );
  5880  002174  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5881  002178  0E01               	movlw	1
  5882  00217A  EC4C  F00D         	call	_writeControlReg
  5883  00217E  D025               	goto	L11
  5884  002180                     l6377:
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;main.c: 677: else if ( reg == 4 ) {
  5888  002180  5017               	movf	vscp_writeAppReg@reg,w,c
  5889  002182  0A04               	xorlw	4
  5890  002184  E123               	bnz	l6391
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;main.c: 678: writeEEPROM(0x21 + 4, val);
  5894  002186  6A09               	clrf	?_writeEEPROM+1,c
  5895  002188  0E25               	movlw	37
  5896  00218A  6E08               	movwf	?_writeEEPROM,c
  5897  00218C  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5898  002190  EC59  F016         	call	_writeEEPROM	;wreg free
  5899                           
  5900                           ;main.c: 679: rv = writeControlReg( 2, val );
  5901  002194  C015  F011         	movff	vscp_writeAppReg@val,?_writeControlReg
  5902  002198  0E02               	movlw	2
  5903  00219A  EC4C  F00D         	call	_writeControlReg
  5904  00219E  6E16               	movwf	vscp_writeAppReg@rv,c
  5905                           
  5906                           ;main.c: 680: rv &= 0x03;
  5907  0021A0  0E03               	movlw	3
  5908  0021A2  1616               	andwf	vscp_writeAppReg@rv,f,c
  5909  0021A4  D013               	goto	l6391
  5910  0021A6                     l6385:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;main.c: 685: else if ( 1 == vscp_page_select ) {
  5914  0021A6  0452               	decf	_vscp_page_select,w,c
  5915  0021A8  1053               	iorwf	_vscp_page_select+1,w,c
  5916  0021AA  E110               	bnz	l6391
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;main.c: 688: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5920                           ;main.c: 689: ( 8 * 8 ) ) ) ) {
  5921  0021AC  0E41               	movlw	65
  5922  0021AE  6017               	cpfslt	vscp_writeAppReg@reg,c
  5923  0021B0  D00D               	goto	l6391
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;main.c: 690: writeEEPROM(0x21 + 23 +
  5927                           ;main.c: 691: ( reg - 0 ), val);
  5928  0021B2  0E38               	movlw	56
  5929  0021B4  D80D               	call	PL30	;call to abstracted procedure
  5930  0021B6  EC59  F016         	call	_writeEEPROM	;wreg free
  5931                           
  5932                           ;main.c: 692: rv = readEEPROM(0x21 + 23 +
  5933                           ;main.c: 693: ( reg - 0 ) );
  5934  0021BA  0E38               	movlw	56
  5935  0021BC  2417               	addwf	vscp_writeAppReg@reg,w,c
  5936  0021BE  6E08               	movwf	?_readEEPROM,c
  5937  0021C0  6A09               	clrf	?_readEEPROM+1,c
  5938  0021C2  0E00               	movlw	0
  5939  0021C4  2209               	addwfc	?_readEEPROM+1,f,c
  5940  0021C6  EC68  F017         	call	_readEEPROM	;wreg free
  5941  0021CA                     L11:
  5942  0021CA  6E16               	movwf	vscp_writeAppReg@rv,c
  5943  0021CC                     l6391:
  5944                           
  5945                           ;main.c: 694: }
  5946                           ;main.c: 696: }
  5947                           ;main.c: 698: return rv;
  5948  0021CC  5016               	movf	vscp_writeAppReg@rv,w,c
  5949  0021CE  0012               	return	
  5950  0021D0                     __end_of_vscp_writeAppReg:
  5951                           	opt stack 0
  5952  0021D0                     PL30:
  5953                           	opt stack 24
  5954  0021D0  2417               	addwf	vscp_writeAppReg@reg,w,c
  5955  0021D2  6E08               	movwf	?_writeEEPROM,c
  5956  0021D4  6A09               	clrf	?_writeEEPROM+1,c
  5957  0021D6  0E00               	movlw	0
  5958  0021D8  2209               	addwfc	?_writeEEPROM+1,f,c
  5959  0021DA  C015  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5960  0021DE  0C00               	retlw	0
  5961  0021E0                     __end_ofPL30:
  5962                           	opt stack 0
  5963                           tblptru	equ	0xFF8
  5964                           tblptrh	equ	0xFF7
  5965                           tblptrl	equ	0xFF6
  5966                           tablat	equ	0xFF5
  5967                           prodh	equ	0xFF4
  5968                           prodl	equ	0xFF3
  5969                           intcon	equ	0xFF2
  5970                           postinc0	equ	0xFEE
  5971                           wreg	equ	0xFE8
  5972                           indf1	equ	0xFE7
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           postdec2	equ	0xFDD
  5978                           plusw2	equ	0xFDB
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function _writeControlReg *****************
  5984 ;; Defined at:
  5985 ;;		line 706 in file "../main.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  ctrlreg         1    wreg     unsigned char 
  5988 ;;  val             1   16[COMRAM] unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  ctrlreg         1   18[COMRAM] unsigned char 
  5991 ;;  rv              1   19[COMRAM] unsigned char 
  5992 ;; Return value:  Size  Location     Type
  5993 ;;                  1    wreg      unsigned char 
  5994 ;; Registers used:
  5995 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5996 ;; Tracked objects:
  5997 ;;		On entry : 0/0
  5998 ;;		On exit  : 0/0
  5999 ;;		Unchanged: 0/0
  6000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6001 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6004 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6005 ;;Total ram usage:        4 bytes
  6006 ;; Hardware stack levels used:    1
  6007 ;; Hardware stack levels required when called:    3
  6008 ;; This function calls:
  6009 ;;		_readControlReg
  6010 ;; This function is called by:
  6011 ;;		_main
  6012 ;;		_vscp_writeAppReg
  6013 ;; This function uses a non-reentrant model
  6014 ;;
  6015                           
  6016                           	psect	text24
  6017  001A98                     __ptext24:
  6018                           	opt stack 0
  6019  001A98                     _writeControlReg:
  6020                           	opt stack 24
  6021                           
  6022                           ;incstack = 0
  6023                           ;incstack = 0
  6024                           ;writeControlReg@ctrlreg stored from wreg
  6025  001A98  CFE8 F013          	movff	wreg,writeControlReg@ctrlreg
  6026                           
  6027                           ;main.c: 707: uint8_t rv = 0;
  6028  001A9C  6A14               	clrf	writeControlReg@rv,c
  6029                           
  6030                           ;main.c: 709: switch ( ctrlreg ) {
  6031  001A9E  D0B9               	goto	l3869
  6032  001AA0                     l3855:
  6033  001AA0  0E01               	movlw	1
  6034                           
  6035                           ;main.c: 712: PORTCbits.RC7 = ( val & 0x01 ) ? 1 : 0;
  6036  001AA2  A011               	btfss	writeControlReg@val,0,c
  6037  001AA4  0E00               	movlw	0
  6038  001AA6  6E12               	movwf	??_writeControlReg& (0+255),c
  6039  001AA8  3212               	rrcf	??_writeControlReg,f,c
  6040  001AAA  3212               	rrcf	??_writeControlReg,f,c
  6041  001AAC  5082               	movf	3970,w,c	;volatile
  6042  001AAE  1812               	xorwf	??_writeControlReg,w,c
  6043  001AB0  0B7F               	andlw	-129
  6044  001AB2  1812               	xorwf	??_writeControlReg,w,c
  6045  001AB4  6E82               	movwf	3970,c	;volatile
  6046  001AB6  0E01               	movlw	1
  6047                           
  6048                           ;main.c: 713: PORTCbits.RC6 = ( val & 0x02 ) ? 1 : 0;
  6049  001AB8  A211               	btfss	writeControlReg@val,1,c
  6050  001ABA  0E00               	movlw	0
  6051  001ABC  6E12               	movwf	??_writeControlReg& (0+255),c
  6052  001ABE  3A12               	swapf	??_writeControlReg,f,c
  6053  001AC0  4612               	rlncf	??_writeControlReg,f,c
  6054  001AC2  4612               	rlncf	??_writeControlReg,f,c
  6055  001AC4  5082               	movf	3970,w,c	;volatile
  6056  001AC6  1812               	xorwf	??_writeControlReg,w,c
  6057  001AC8  0BBF               	andlw	-65
  6058  001ACA  1812               	xorwf	??_writeControlReg,w,c
  6059  001ACC  6E82               	movwf	3970,c	;volatile
  6060  001ACE  0E01               	movlw	1
  6061                           
  6062                           ;main.c: 714: PORTCbits.RC3 = ( val & 0x04 ) ? 1 : 0;
  6063  001AD0  A411               	btfss	writeControlReg@val,2,c
  6064  001AD2  0E00               	movlw	0
  6065  001AD4  6E12               	movwf	??_writeControlReg& (0+255),c
  6066  001AD6  4612               	rlncf	??_writeControlReg,f,c
  6067  001AD8  4612               	rlncf	??_writeControlReg,f,c
  6068  001ADA  4612               	rlncf	??_writeControlReg,f,c
  6069  001ADC  5082               	movf	3970,w,c	;volatile
  6070  001ADE  1812               	xorwf	??_writeControlReg,w,c
  6071  001AE0  0BF7               	andlw	-9
  6072  001AE2  1812               	xorwf	??_writeControlReg,w,c
  6073  001AE4  6E82               	movwf	3970,c	;volatile
  6074  001AE6  0E01               	movlw	1
  6075                           
  6076                           ;main.c: 715: PORTCbits.RC4 = ( val & 0x08 ) ? 1 : 0;
  6077  001AE8  A611               	btfss	writeControlReg@val,3,c
  6078  001AEA  0E00               	movlw	0
  6079  001AEC  6E12               	movwf	??_writeControlReg& (0+255),c
  6080  001AEE  3A12               	swapf	??_writeControlReg,f,c
  6081  001AF0  5082               	movf	3970,w,c	;volatile
  6082  001AF2  1812               	xorwf	??_writeControlReg,w,c
  6083  001AF4  0BEF               	andlw	-17
  6084  001AF6  1812               	xorwf	??_writeControlReg,w,c
  6085  001AF8  6E82               	movwf	3970,c	;volatile
  6086  001AFA  0E01               	movlw	1
  6087                           
  6088                           ;main.c: 716: PORTCbits.RC5 = ( val & 0x10 ) ? 1 : 0;
  6089  001AFC  A811               	btfss	writeControlReg@val,4,c
  6090  001AFE  0E00               	movlw	0
  6091  001B00  6E12               	movwf	??_writeControlReg& (0+255),c
  6092  001B02  3A12               	swapf	??_writeControlReg,f,c
  6093  001B04  4612               	rlncf	??_writeControlReg,f,c
  6094  001B06  5082               	movf	3970,w,c	;volatile
  6095  001B08  1812               	xorwf	??_writeControlReg,w,c
  6096  001B0A  0BDF               	andlw	-33
  6097  001B0C  1812               	xorwf	??_writeControlReg,w,c
  6098  001B0E  6E82               	movwf	3970,c	;volatile
  6099  001B10  0E01               	movlw	1
  6100                           
  6101                           ;main.c: 717: PORTAbits.RA0 = ( val & 0x20 ) ? 1 : 0;
  6102  001B12  AA11               	btfss	writeControlReg@val,5,c
  6103  001B14  0E00               	movlw	0
  6104  001B16  6E12               	movwf	??_writeControlReg& (0+255),c
  6105  001B18  5080               	movf	3968,w,c	;volatile
  6106  001B1A  1812               	xorwf	??_writeControlReg,w,c
  6107  001B1C  0BFE               	andlw	-2
  6108  001B1E  1812               	xorwf	??_writeControlReg,w,c
  6109  001B20  6E80               	movwf	3968,c	;volatile
  6110  001B22  0E01               	movlw	1
  6111                           
  6112                           ;main.c: 718: PORTAbits.RA1 = ( val & 0x40 ) ? 1 : 0;
  6113  001B24  AC11               	btfss	writeControlReg@val,6,c
  6114  001B26  0E00               	movlw	0
  6115  001B28  6E12               	movwf	??_writeControlReg& (0+255),c
  6116  001B2A  4612               	rlncf	??_writeControlReg,f,c
  6117  001B2C  5080               	movf	3968,w,c	;volatile
  6118  001B2E  1812               	xorwf	??_writeControlReg,w,c
  6119  001B30  0BFD               	andlw	-3
  6120  001B32  1812               	xorwf	??_writeControlReg,w,c
  6121  001B34  6E80               	movwf	3968,c	;volatile
  6122  001B36  0E01               	movlw	1
  6123                           
  6124                           ;main.c: 719: PORTAbits.RA2 = ( val & 0x80 ) ? 1 : 0;
  6125  001B38  AE11               	btfss	writeControlReg@val,7,c
  6126  001B3A  0E00               	movlw	0
  6127  001B3C  6E12               	movwf	??_writeControlReg& (0+255),c
  6128  001B3E  4612               	rlncf	??_writeControlReg,f,c
  6129  001B40  4612               	rlncf	??_writeControlReg,f,c
  6130  001B42  5080               	movf	3968,w,c	;volatile
  6131  001B44  1812               	xorwf	??_writeControlReg,w,c
  6132  001B46  0BFB               	andlw	-5
  6133  001B48  1812               	xorwf	??_writeControlReg,w,c
  6134  001B4A  6E80               	movwf	3968,c	;volatile
  6135                           
  6136                           ;main.c: 720: rv = readControlReg( 0 );
  6137  001B4C  0E00               	movlw	0
  6138  001B4E  EC73  F011         	call	_readControlReg
  6139  001B52  D05D               	goto	L13
  6140  001B54                     l3859:
  6141  001B54  0E01               	movlw	1
  6142                           
  6143                           ;main.c: 724: PORTAbits.RA3 = ( val & 0x01 ) ? 1 : 0;
  6144  001B56  A011               	btfss	writeControlReg@val,0,c
  6145  001B58  0E00               	movlw	0
  6146  001B5A  6E12               	movwf	??_writeControlReg& (0+255),c
  6147  001B5C  4612               	rlncf	??_writeControlReg,f,c
  6148  001B5E  4612               	rlncf	??_writeControlReg,f,c
  6149  001B60  4612               	rlncf	??_writeControlReg,f,c
  6150  001B62  5080               	movf	3968,w,c	;volatile
  6151  001B64  1812               	xorwf	??_writeControlReg,w,c
  6152  001B66  0BF7               	andlw	-9
  6153  001B68  1812               	xorwf	??_writeControlReg,w,c
  6154  001B6A  6E80               	movwf	3968,c	;volatile
  6155  001B6C  0E01               	movlw	1
  6156                           
  6157                           ;main.c: 725: PORTAbits.RA5 = ( val & 0x02 ) ? 1 : 0;
  6158  001B6E  A211               	btfss	writeControlReg@val,1,c
  6159  001B70  0E00               	movlw	0
  6160  001B72  6E12               	movwf	??_writeControlReg& (0+255),c
  6161  001B74  3A12               	swapf	??_writeControlReg,f,c
  6162  001B76  4612               	rlncf	??_writeControlReg,f,c
  6163  001B78  5080               	movf	3968,w,c	;volatile
  6164  001B7A  1812               	xorwf	??_writeControlReg,w,c
  6165  001B7C  0BDF               	andlw	-33
  6166  001B7E  1812               	xorwf	??_writeControlReg,w,c
  6167  001B80  6E80               	movwf	3968,c	;volatile
  6168  001B82  0E01               	movlw	1
  6169                           
  6170                           ;main.c: 728: PORTBbits.RB4 = ( val & 0x10 ) ? 1 : 0;
  6171  001B84  A811               	btfss	writeControlReg@val,4,c
  6172  001B86  0E00               	movlw	0
  6173  001B88  6E12               	movwf	??_writeControlReg& (0+255),c
  6174  001B8A  3A12               	swapf	??_writeControlReg,f,c
  6175  001B8C  5081               	movf	3969,w,c	;volatile
  6176  001B8E  1812               	xorwf	??_writeControlReg,w,c
  6177  001B90  0BEF               	andlw	-17
  6178  001B92  1812               	xorwf	??_writeControlReg,w,c
  6179  001B94  6E81               	movwf	3969,c	;volatile
  6180  001B96  0E01               	movlw	1
  6181                           
  6182                           ;main.c: 729: PORTCbits.RC2 = ( val & 0x20 ) ? 1 : 0;
  6183  001B98  AA11               	btfss	writeControlReg@val,5,c
  6184  001B9A  0E00               	movlw	0
  6185  001B9C  6E12               	movwf	??_writeControlReg& (0+255),c
  6186  001B9E  4612               	rlncf	??_writeControlReg,f,c
  6187  001BA0  4612               	rlncf	??_writeControlReg,f,c
  6188  001BA2  5082               	movf	3970,w,c	;volatile
  6189  001BA4  1812               	xorwf	??_writeControlReg,w,c
  6190  001BA6  0BFB               	andlw	-5
  6191  001BA8  1812               	xorwf	??_writeControlReg,w,c
  6192  001BAA  6E82               	movwf	3970,c	;volatile
  6193  001BAC  0E01               	movlw	1
  6194                           
  6195                           ;main.c: 730: PORTBbits.RB1 = ( val & 0x40 ) ? 1 : 0;
  6196  001BAE  AC11               	btfss	writeControlReg@val,6,c
  6197  001BB0  0E00               	movlw	0
  6198  001BB2  6E12               	movwf	??_writeControlReg& (0+255),c
  6199  001BB4  4612               	rlncf	??_writeControlReg,f,c
  6200  001BB6  5081               	movf	3969,w,c	;volatile
  6201  001BB8  1812               	xorwf	??_writeControlReg,w,c
  6202  001BBA  0BFD               	andlw	-3
  6203  001BBC  1812               	xorwf	??_writeControlReg,w,c
  6204  001BBE  6E81               	movwf	3969,c	;volatile
  6205  001BC0  0E01               	movlw	1
  6206                           
  6207                           ;main.c: 731: PORTBbits.RB0 = ( val & 0x80 ) ? 1 : 0;
  6208  001BC2  AE11               	btfss	writeControlReg@val,7,c
  6209  001BC4  0E00               	movlw	0
  6210  001BC6  6E12               	movwf	??_writeControlReg& (0+255),c
  6211  001BC8  5081               	movf	3969,w,c	;volatile
  6212  001BCA  1812               	xorwf	??_writeControlReg,w,c
  6213  001BCC  0BFE               	andlw	-2
  6214  001BCE  1812               	xorwf	??_writeControlReg,w,c
  6215  001BD0  6E81               	movwf	3969,c	;volatile
  6216                           
  6217                           ;main.c: 732: rv = readControlReg( 1 );
  6218  001BD2  0E01               	movlw	1
  6219  001BD4  EC73  F011         	call	_readControlReg
  6220  001BD8  D01A               	goto	L13
  6221  001BDA                     l3863:
  6222  001BDA  0E01               	movlw	1
  6223                           
  6224                           ;main.c: 736: PORTBbits.RB6 = ( val & 0x01 ) ? 1 : 0;
  6225  001BDC  A011               	btfss	writeControlReg@val,0,c
  6226  001BDE  0E00               	movlw	0
  6227  001BE0  6E12               	movwf	??_writeControlReg& (0+255),c
  6228  001BE2  3A12               	swapf	??_writeControlReg,f,c
  6229  001BE4  4612               	rlncf	??_writeControlReg,f,c
  6230  001BE6  4612               	rlncf	??_writeControlReg,f,c
  6231  001BE8  5081               	movf	3969,w,c	;volatile
  6232  001BEA  1812               	xorwf	??_writeControlReg,w,c
  6233  001BEC  0BBF               	andlw	-65
  6234  001BEE  1812               	xorwf	??_writeControlReg,w,c
  6235  001BF0  6E81               	movwf	3969,c	;volatile
  6236  001BF2  0E01               	movlw	1
  6237                           
  6238                           ;main.c: 737: PORTBbits.RB5 = ( val & 0x02 ) ? 1 : 0;
  6239  001BF4  A211               	btfss	writeControlReg@val,1,c
  6240  001BF6  0E00               	movlw	0
  6241  001BF8  6E12               	movwf	??_writeControlReg& (0+255),c
  6242  001BFA  3A12               	swapf	??_writeControlReg,f,c
  6243  001BFC  4612               	rlncf	??_writeControlReg,f,c
  6244  001BFE  5081               	movf	3969,w,c	;volatile
  6245  001C00  1812               	xorwf	??_writeControlReg,w,c
  6246  001C02  0BDF               	andlw	-33
  6247  001C04  1812               	xorwf	??_writeControlReg,w,c
  6248  001C06  6E81               	movwf	3969,c	;volatile
  6249                           
  6250                           ;main.c: 738: rv = readControlReg( 2 );
  6251  001C08  0E02               	movlw	2
  6252  001C0A  EC73  F011         	call	_readControlReg
  6253  001C0E                     L13:
  6254  001C0E  6E14               	movwf	writeControlReg@rv,c
  6255                           
  6256                           ;main.c: 739: break;
  6257  001C10  D007               	goto	l3871
  6258  001C12                     l3869:
  6259  001C12  5013               	movf	writeControlReg@ctrlreg,w,c
  6260                           
  6261                           ; Switch size 1, requested type "space"
  6262                           ; Number of cases is 3, Range of values is 0 to 2
  6263                           ; switch strategies available:
  6264                           ; Name         Instructions Cycles
  6265                           ; simple_byte           10     6 (average)
  6266                           ;	Chosen strategy is simple_byte
  6267  001C14  E101 D744          	bz	l3855
  6268  001C18  0A01               	xorlw	1	; case 1
  6269  001C1A  E09C               	bz	l3859
  6270  001C1C  0A03               	xorlw	3	; case 2
  6271  001C1E  E0DD               	bz	l3863
  6272  001C20                     l3871:
  6273                           
  6274                           ;main.c: 742: return rv;
  6275  001C20  5014               	movf	writeControlReg@rv,w,c
  6276  001C22  0012               	return	
  6277  001C24                     __end_of_writeControlReg:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           indf1	equ	0xFE7
  6289                           fsr1h	equ	0xFE2
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           plusw2	equ	0xFDB
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function _vscp_readRegister *****************
  6300 ;; Defined at:
  6301 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  reg             1    wreg     unsigned char 
  6304 ;; Auto vars:     Size  Location     Type
  6305 ;;  reg             1   28[COMRAM] unsigned char 
  6306 ;; Return value:  Size  Location     Type
  6307 ;;                  1    wreg      unsigned char 
  6308 ;; Registers used:
  6309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6310 ;; Tracked objects:
  6311 ;;		On entry : F/0
  6312 ;;		On exit  : 0/0
  6313 ;;		Unchanged: 0/0
  6314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6316 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6318 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6319 ;;Total ram usage:        1 bytes
  6320 ;; Hardware stack levels used:    1
  6321 ;; Hardware stack levels required when called:    5
  6322 ;; This function calls:
  6323 ;;		_vscp_readAppReg
  6324 ;;		_vscp_readStdReg
  6325 ;; This function is called by:
  6326 ;;		_vscp_handleProtocolEvent
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text25
  6331  002E5A                     __ptext25:
  6332                           	opt stack 0
  6333  002E5A                     _vscp_readRegister:
  6334                           	opt stack 24
  6335                           
  6336                           ;incstack = 0
  6337                           ;incstack = 0
  6338                           ;vscp_readRegister@reg stored from wreg
  6339  002E5A  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
  6343  002E5E  0E7F               	movlw	127
  6344  002E60  641D               	cpfsgt	vscp_readRegister@reg,c
  6345  002E62  D003               	goto	l6677
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
  6349  002E64  501D               	movf	vscp_readRegister@reg,w,c
  6350  002E66  EF7D  F00C         	goto	_vscp_readStdReg
  6351  002E6A                     l6677:
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
  6355  002E6A  501D               	movf	vscp_readRegister@reg,w,c
  6356  002E6C  EFBD  F013         	goto	_vscp_readAppReg
  6357  002E70                     __end_of_vscp_readRegister:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           intcon	equ	0xFF2
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           indf1	equ	0xFE7
  6369                           fsr1h	equ	0xFE2
  6370                           fsr1l	equ	0xFE1
  6371                           indf2	equ	0xFDF
  6372                           postinc2	equ	0xFDE
  6373                           postdec2	equ	0xFDD
  6374                           plusw2	equ	0xFDB
  6375                           fsr2h	equ	0xFDA
  6376                           fsr2l	equ	0xFD9
  6377                           status	equ	0xFD8
  6378                           
  6379 ;; *************** function _vscp_readStdReg *****************
  6380 ;; Defined at:
  6381 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
  6382 ;; Parameters:    Size  Location     Type
  6383 ;;  reg             1    wreg     unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  reg             1   27[COMRAM] unsigned char 
  6386 ;;  code            4   20[COMRAM] unsigned long 
  6387 ;;  idx             1   25[COMRAM] unsigned char 
  6388 ;;  code            4   16[COMRAM] unsigned long 
  6389 ;;  idx             1   24[COMRAM] unsigned char 
  6390 ;;  rv              1   26[COMRAM] unsigned char 
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      unsigned char 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : F/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6401 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6402 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6403 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6404 ;;Total ram usage:       17 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    4
  6407 ;; This function calls:
  6408 ;;		_vscp_getMajorVersion
  6409 ;;		_vscp_getMinorVersion
  6410 ;;		_vscp_getSubMinorVersion
  6411 ;;		_vscp_getGUID
  6412 ;;		_vscp_getMDF_URL
  6413 ;;		_vscp_getUserID
  6414 ;;		_vscp_getManufacturerId
  6415 ;;		_vscp_getBootLoaderAlgorithm
  6416 ;;		_vscp_getBufferSize
  6417 ;;		_vscp_getFamilyCode
  6418 ;;		_vscp_getFamilyType
  6419 ;;		_vscp_getRegisterPagesUsed
  6420 ;; This function is called by:
  6421 ;;		_vscp_readRegister
  6422 ;;		_vscp_handleProtocolEvent
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text26
  6427  0018FA                     __ptext26:
  6428                           	opt stack 0
  6429  0018FA                     _vscp_readStdReg:
  6430                           	opt stack 25
  6431                           
  6432                           ;incstack = 0
  6433                           ;incstack = 0
  6434                           ;vscp_readStdReg@reg stored from wreg
  6435  0018FA  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;vscp_firmware.c: 567: uint8_t rv = 0;
  6439  0018FE  6A1B               	clrf	vscp_readStdReg@rv,c
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;vscp_firmware.c: 569: if (0x80 == reg) {
  6443  001900  501C               	movf	vscp_readStdReg@reg,w,c
  6444  001902  0A80               	xorlw	128
  6445  001904  E104               	bnz	l6687
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
  6449  001906  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  6450                           
  6451                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
  6452  00190A  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6453                           
  6454                           ;vscp_firmware.c: 575: }
  6455  00190C  D0B3               	goto	l6775
  6456  00190E                     l6687:
  6457                           
  6458                           ; BSR set to: 0
  6459                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
  6460  00190E  501C               	movf	vscp_readStdReg@reg,w,c
  6461  001910  0A81               	xorlw	129
  6462  001912  E102               	bnz	l6691
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;vscp_firmware.c: 579: rv = 1;
  6466  001914  0E01               	movlw	1
  6467  001916  D075               	goto	L24
  6468  001918                     l6691:
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
  6472  001918  501C               	movf	vscp_readStdReg@reg,w,c
  6473  00191A  0A82               	xorlw	130
  6474  00191C  E102               	bnz	l6695
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;vscp_firmware.c: 585: rv = 5;
  6478  00191E  0E05               	movlw	5
  6479  001920  D070               	goto	L24
  6480  001922                     l6695:
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
  6484  001922  501C               	movf	vscp_readStdReg@reg,w,c
  6485  001924  0A83               	xorlw	131
  6486  001926  E102               	bnz	l6699
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;vscp_firmware.c: 591: rv = 0;
  6490  001928  6A1B               	clrf	vscp_readStdReg@rv,c
  6491                           
  6492                           ;vscp_firmware.c: 593: }
  6493  00192A  D0A4               	goto	l6775
  6494  00192C                     l6699:
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
  6498  00192C  501C               	movf	vscp_readStdReg@reg,w,c
  6499  00192E  0A94               	xorlw	148
  6500  001930  E103               	bnz	l6703
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
  6504  001932  ECC0  F017         	call	_vscp_getMajorVersion	;wreg free
  6505  001936  D065               	goto	L24
  6506  001938                     l6703:
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
  6510  001938  501C               	movf	vscp_readStdReg@reg,w,c
  6511  00193A  0A95               	xorlw	149
  6512  00193C  E103               	bnz	l6707
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
  6516  00193E  ECBF  F017         	call	_vscp_getMinorVersion	;wreg free
  6517  001942  D05F               	goto	L24
  6518  001944                     l6707:
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
  6522  001944  501C               	movf	vscp_readStdReg@reg,w,c
  6523  001946  0A96               	xorlw	150
  6524  001948  E103               	bnz	l6711
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
  6528  00194A  ECBE  F017         	call	_vscp_getSubMinorVersion	;wreg free
  6529  00194E  D059               	goto	L24
  6530  001950                     l6711:
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
  6534  001950  0E89               	movlw	137
  6535  001952  601C               	cpfslt	vscp_readStdReg@reg,c
  6536  001954  D005               	goto	l6715
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
  6540  001956  501C               	movf	vscp_readStdReg@reg,w,c
  6541  001958  0F7C               	addlw	124
  6542  00195A  EC42  F017         	call	_vscp_getUserID
  6543  00195E  D051               	goto	L24
  6544  001960                     l6715:
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
  6548                           ;vscp_firmware.c: 619: (reg < 0x91)) {
  6549  001960  0E88               	movlw	136
  6550  001962  641C               	cpfsgt	vscp_readStdReg@reg,c
  6551  001964  D008               	goto	l6721
  6552                           
  6553                           ; BSR set to: 0
  6554  001966  0E91               	movlw	145
  6555  001968  601C               	cpfslt	vscp_readStdReg@reg,c
  6556  00196A  D005               	goto	l6721
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
  6560  00196C  501C               	movf	vscp_readStdReg@reg,w,c
  6561  00196E  0F77               	addlw	119
  6562  001970  EC38  F017         	call	_vscp_getManufacturerId
  6563  001974  D046               	goto	L24
  6564  001976                     l6721:
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
  6568  001976  501C               	movf	vscp_readStdReg@reg,w,c
  6569  001978  0A91               	xorlw	145
  6570  00197A  E103               	bnz	l6725
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;vscp_firmware.c: 628: rv = vscp_nickname;
  6574  00197C  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  6575                           
  6576                           ;vscp_firmware.c: 630: }
  6577  001980  D079               	goto	l6775
  6578  001982                     l6725:
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
  6582  001982  501C               	movf	vscp_readStdReg@reg,w,c
  6583  001984  0A93               	xorlw	147
  6584  001986  E103               	bnz	l6729
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
  6588  001988  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  6589                           
  6590                           ;vscp_firmware.c: 636: }
  6591  00198C  D073               	goto	l6775
  6592  00198E                     l6729:
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
  6596  00198E  501C               	movf	vscp_readStdReg@reg,w,c
  6597  001990  0A92               	xorlw	146
  6598  001992  E102               	bnz	l6733
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
  6602  001994  5053               	movf	_vscp_page_select+1,w,c
  6603  001996  D035               	goto	L24
  6604  001998                     l6733:
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
  6608  001998  501C               	movf	vscp_readStdReg@reg,w,c
  6609  00199A  0A97               	xorlw	151
  6610  00199C  E103               	bnz	l6737
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
  6614  00199E  ECBD  F017         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  6615  0019A2  D02F               	goto	L24
  6616  0019A4                     l6737:
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
  6620  0019A4  501C               	movf	vscp_readStdReg@reg,w,c
  6621  0019A6  0A98               	xorlw	152
  6622  0019A8  E103               	bnz	l6741
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
  6626  0019AA  ECBC  F017         	call	_vscp_getBufferSize	;wreg free
  6627  0019AE  D029               	goto	L24
  6628  0019B0                     l6741:
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
  6632  0019B0  501C               	movf	vscp_readStdReg@reg,w,c
  6633  0019B2  0A99               	xorlw	153
  6634  0019B4  E103               	bnz	l6745
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
  6638  0019B6  ECBB  F017         	call	_vscp_getRegisterPagesUsed	;wreg free
  6639  0019BA  D023               	goto	L24
  6640  0019BC                     l6745:
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;vscp_firmware.c: 656: else if ( ( reg >= 0x9A ) &&
  6644                           ;vscp_firmware.c: 657: ( reg < ( 0x9A + 4 ) ) ) {
  6645  0019BC  0E99               	movlw	153
  6646  0019BE  641C               	cpfsgt	vscp_readStdReg@reg,c
  6647  0019C0  D022               	goto	l6755
  6648                           
  6649                           ; BSR set to: 0
  6650  0019C2  0E9E               	movlw	158
  6651  0019C4  601C               	cpfslt	vscp_readStdReg@reg,c
  6652  0019C6  D01F               	goto	l6755
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;vscp_firmware.c: 659: uint32_t code = vscp_getFamilyCode();
  6656  0019C8  ECA4  F017         	call	_vscp_getFamilyCode	;wreg free
  6657  0019CC  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  6658  0019D0  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  6659  0019D4  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  6660  0019D8  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;vscp_firmware.c: 660: uint8_t idx = reg - 0x9A;
  6664  0019DC  501C               	movf	vscp_readStdReg@reg,w,c
  6665  0019DE  0F66               	addlw	102
  6666  0019E0  6E19               	movwf	vscp_readStdReg@idx,c
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;vscp_firmware.c: 661: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6670  0019E2  5019               	movf	vscp_readStdReg@idx,w,c
  6671  0019E4  D849               	call	PL24	;call to abstracted procedure
  6672  0019E6  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  6673  0019EA  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  6674  0019EE  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  6675  0019F2  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  6676  0019F6  2AE8               	incf	wreg,f,c
  6677  0019F8  D001               	goto	u7280
  6678  0019FA                     u7285:
  6679  0019FA  D848               	call	PL38	;call to abstracted procedure
  6680  0019FC                     u7280:
  6681  0019FC  2EE8               	decfsz	wreg,f,c
  6682  0019FE  D7FD               	goto	u7285
  6683  001A00  D024               	goto	L25
  6684  001A02                     L24:
  6685  001A02  6E1B               	movwf	vscp_readStdReg@rv,c
  6686                           
  6687                           ;vscp_firmware.c: 662: }
  6688  001A04  D037               	goto	l6775
  6689  001A06                     l6755:
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;vscp_firmware.c: 663: else if ( ( reg >= 0x9E ) &&
  6693                           ;vscp_firmware.c: 664: ( reg < ( 0x9E + 4 ) ) ) {
  6694  001A06  0E9D               	movlw	157
  6695  001A08  641C               	cpfsgt	vscp_readStdReg@reg,c
  6696  001A0A  D021               	goto	l6765
  6697                           
  6698                           ; BSR set to: 0
  6699  001A0C  0EA2               	movlw	162
  6700  001A0E  601C               	cpfslt	vscp_readStdReg@reg,c
  6701  001A10  D01E               	goto	l6765
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;vscp_firmware.c: 666: uint32_t code = vscp_getFamilyType();
  6705  001A12  EC9F  F017         	call	_vscp_getFamilyType	;wreg free
  6706  001A16  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1113+3
  6707  001A1A  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1113+2
  6708  001A1E  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1113+1
  6709  001A22  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1113
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;vscp_firmware.c: 667: uint8_t idx = reg - 0x9E;
  6713  001A26  501C               	movf	vscp_readStdReg@reg,w,c
  6714  001A28  0F62               	addlw	98
  6715  001A2A  6E1A               	movwf	vscp_readStdReg@idx_1114,c
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;vscp_firmware.c: 668: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  6719  001A2C  501A               	movf	vscp_readStdReg@idx_1114,w,c
  6720  001A2E  D824               	call	PL24	;call to abstracted procedure
  6721  001A30  C015  F00D         	movff	vscp_readStdReg@code_1113,??_vscp_readStdReg+1
  6722  001A34  C016  F00E         	movff	vscp_readStdReg@code_1113+1,??_vscp_readStdReg+2
  6723  001A38  C017  F00F         	movff	vscp_readStdReg@code_1113+2,??_vscp_readStdReg+3
  6724  001A3C  C018  F010         	movff	vscp_readStdReg@code_1113+3,??_vscp_readStdReg+4
  6725  001A40  2AE8               	incf	wreg,f,c
  6726  001A42  D001               	goto	u7310
  6727  001A44                     u7315:
  6728  001A44  D823               	call	PL38	;call to abstracted procedure
  6729  001A46                     u7310:
  6730  001A46  2EE8               	decfsz	wreg,f,c
  6731  001A48  D7FD               	goto	u7315
  6732  001A4A                     L25:
  6733  001A4A  500D               	movf	??_vscp_readStdReg+1,w,c
  6734  001A4C  D7DA               	goto	L24
  6735  001A4E                     l6765:
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;vscp_firmware.c: 670: else if ((reg > (0xD0 - 1)) &&
  6739                           ;vscp_firmware.c: 671: (reg < 0xE0)) {
  6740  001A4E  0ECF               	movlw	207
  6741  001A50  641C               	cpfsgt	vscp_readStdReg@reg,c
  6742  001A52  D008               	goto	l6771
  6743                           
  6744                           ; BSR set to: 0
  6745  001A54  0EE0               	movlw	224
  6746  001A56  601C               	cpfslt	vscp_readStdReg@reg,c
  6747  001A58  D005               	goto	l6771
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;vscp_firmware.c: 674: rv = vscp_getGUID(reg - 0xD0);
  6751  001A5A  501C               	movf	vscp_readStdReg@reg,w,c
  6752  001A5C  0F30               	addlw	48
  6753  001A5E  EC4C  F017         	call	_vscp_getGUID
  6754  001A62  D7CF               	goto	L24
  6755  001A64                     l6771:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;vscp_firmware.c: 677: else if ( reg >= 0xE0 ) {
  6759  001A64  0EDF               	movlw	223
  6760  001A66  641C               	cpfsgt	vscp_readStdReg@reg,c
  6761  001A68  D005               	goto	l6775
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;vscp_firmware.c: 680: rv = vscp_getMDF_URL(reg - 0xE0);
  6765  001A6A  501C               	movf	vscp_readStdReg@reg,w,c
  6766  001A6C  0F20               	addlw	32
  6767  001A6E  ECFA  F016         	call	_vscp_getMDF_URL
  6768  001A72  D7C7               	goto	L24
  6769  001A74                     l6775:
  6770                           
  6771                           ;vscp_firmware.c: 682: }
  6772                           ;vscp_firmware.c: 684: return rv;
  6773  001A74  501B               	movf	vscp_readStdReg@rv,w,c
  6774  001A76  0012               	return	
  6775  001A78                     __end_of_vscp_readStdReg:
  6776                           	opt stack 0
  6777  001A78                     PL24:
  6778                           	opt stack 25
  6779  001A78  0803               	sublw	3
  6780  001A7A  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  6781  001A7C  90D8               	bcf	status,0,c
  6782  001A7E  360C               	rlcf	??_vscp_readStdReg,f,c
  6783  001A80  90D8               	bcf	status,0,c
  6784  001A82  360C               	rlcf	??_vscp_readStdReg,f,c
  6785  001A84  90D8               	bcf	status,0,c
  6786  001A86  360C               	rlcf	??_vscp_readStdReg,f,c
  6787  001A88  500C               	movf	??_vscp_readStdReg,w,c
  6788  001A8A  0012               	return	
  6789  001A8C                     __end_ofPL24:
  6790                           	opt stack 0
  6791  001A8C                     PL38:
  6792                           	opt stack 25
  6793  001A8C  90D8               	bcf	status,0,c
  6794  001A8E  3210               	rrcf	??_vscp_readStdReg+4,f,c
  6795  001A90  320F               	rrcf	??_vscp_readStdReg+3,f,c
  6796  001A92  320E               	rrcf	??_vscp_readStdReg+2,f,c
  6797  001A94  320D               	rrcf	??_vscp_readStdReg+1,f,c
  6798  001A96  0012               	return	
  6799  001A98                     __end_ofPL38:
  6800                           	opt stack 0
  6801                           tblptru	equ	0xFF8
  6802                           tblptrh	equ	0xFF7
  6803                           tblptrl	equ	0xFF6
  6804                           tablat	equ	0xFF5
  6805                           prodh	equ	0xFF4
  6806                           prodl	equ	0xFF3
  6807                           intcon	equ	0xFF2
  6808                           postinc0	equ	0xFEE
  6809                           wreg	equ	0xFE8
  6810                           indf1	equ	0xFE7
  6811                           fsr1h	equ	0xFE2
  6812                           fsr1l	equ	0xFE1
  6813                           indf2	equ	0xFDF
  6814                           postinc2	equ	0xFDE
  6815                           postdec2	equ	0xFDD
  6816                           plusw2	equ	0xFDB
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _vscp_getRegisterPagesUsed *****************
  6822 ;; Defined at:
  6823 ;;		line 1439 in file "../main.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;                  1    wreg      unsigned char 
  6830 ;; Registers used:
  6831 ;;		wreg
  6832 ;; Tracked objects:
  6833 ;;		On entry : F/0
  6834 ;;		On exit  : F/0
  6835 ;;		Unchanged: F/0
  6836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6841 ;;Total ram usage:        0 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:    2
  6844 ;; This function calls:
  6845 ;;		Nothing
  6846 ;; This function is called by:
  6847 ;;		_vscp_readStdReg
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text27
  6852  002F76                     __ptext27:
  6853                           	opt stack 0
  6854  002F76                     _vscp_getRegisterPagesUsed:
  6855                           	opt stack 26
  6856                           
  6857                           ; BSR set to: 0
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;main.c: 1440: return 1;
  6861                           
  6862                           ;incstack = 0
  6863                           ;incstack = 0
  6864  002F76  0C01               	retlw	1
  6865  002F78                     __end_of_vscp_getRegisterPagesUsed:
  6866                           	opt stack 0
  6867                           tblptru	equ	0xFF8
  6868                           tblptrh	equ	0xFF7
  6869                           tblptrl	equ	0xFF6
  6870                           tablat	equ	0xFF5
  6871                           prodh	equ	0xFF4
  6872                           prodl	equ	0xFF3
  6873                           intcon	equ	0xFF2
  6874                           postinc0	equ	0xFEE
  6875                           wreg	equ	0xFE8
  6876                           indf1	equ	0xFE7
  6877                           fsr1h	equ	0xFE2
  6878                           fsr1l	equ	0xFE1
  6879                           indf2	equ	0xFDF
  6880                           postinc2	equ	0xFDE
  6881                           postdec2	equ	0xFDD
  6882                           plusw2	equ	0xFDB
  6883                           fsr2h	equ	0xFDA
  6884                           fsr2l	equ	0xFD9
  6885                           status	equ	0xFD8
  6886                           
  6887 ;; *************** function _vscp_getFamilyType *****************
  6888 ;; Defined at:
  6889 ;;		line 1420 in file "../main.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  4    7[COMRAM] unsigned long 
  6896 ;; Registers used:
  6897 ;;		None
  6898 ;; Tracked objects:
  6899 ;;		On entry : F/0
  6900 ;;		On exit  : F/0
  6901 ;;		Unchanged: F/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6906 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6907 ;;Total ram usage:        4 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    2
  6910 ;; This function calls:
  6911 ;;		Nothing
  6912 ;; This function is called by:
  6913 ;;		_vscp_readStdReg
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text28
  6918  002F3E                     __ptext28:
  6919                           	opt stack 0
  6920  002F3E                     _vscp_getFamilyType:
  6921                           	opt stack 26
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;main.c: 1421: return 0;
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;incstack = 0
  6928                           ;incstack = 0
  6929  002F3E  6A08               	clrf	?_vscp_getFamilyType,c
  6930  002F40  6A09               	clrf	?_vscp_getFamilyType+1,c
  6931  002F42  6A0A               	clrf	?_vscp_getFamilyType+2,c
  6932  002F44  6A0B               	clrf	?_vscp_getFamilyType+3,c
  6933                           
  6934                           ; BSR set to: 0
  6935  002F46  0012               	return	
  6936  002F48                     __end_of_vscp_getFamilyType:
  6937                           	opt stack 0
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           postinc0	equ	0xFEE
  6946                           wreg	equ	0xFE8
  6947                           indf1	equ	0xFE7
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           plusw2	equ	0xFDB
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _vscp_getFamilyCode *****************
  6959 ;; Defined at:
  6960 ;;		line 1411 in file "../main.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  4    7[COMRAM] unsigned long 
  6967 ;; Registers used:
  6968 ;;		None
  6969 ;; Tracked objects:
  6970 ;;		On entry : F/0
  6971 ;;		On exit  : F/0
  6972 ;;		Unchanged: F/0
  6973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6974 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6977 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6978 ;;Total ram usage:        4 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; Hardware stack levels required when called:    2
  6981 ;; This function calls:
  6982 ;;		Nothing
  6983 ;; This function is called by:
  6984 ;;		_vscp_readStdReg
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           	psect	text29
  6989  002F48                     __ptext29:
  6990                           	opt stack 0
  6991  002F48                     _vscp_getFamilyCode:
  6992                           	opt stack 26
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 1412: return 0L;
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;incstack = 0
  6999                           ;incstack = 0
  7000  002F48  6A08               	clrf	?_vscp_getFamilyCode,c
  7001  002F4A  6A09               	clrf	?_vscp_getFamilyCode+1,c
  7002  002F4C  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  7003  002F4E  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  7004                           
  7005                           ; BSR set to: 0
  7006  002F50  0012               	return	
  7007  002F52                     __end_of_vscp_getFamilyCode:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           prodh	equ	0xFF4
  7014                           prodl	equ	0xFF3
  7015                           intcon	equ	0xFF2
  7016                           postinc0	equ	0xFEE
  7017                           wreg	equ	0xFE8
  7018                           indf1	equ	0xFE7
  7019                           fsr1h	equ	0xFE2
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           plusw2	equ	0xFDB
  7025                           fsr2h	equ	0xFDA
  7026                           fsr2l	equ	0xFD9
  7027                           status	equ	0xFD8
  7028                           
  7029 ;; *************** function _vscp_getBufferSize *****************
  7030 ;; Defined at:
  7031 ;;		line 1291 in file "../main.c"
  7032 ;; Parameters:    Size  Location     Type
  7033 ;;		None
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;		None
  7036 ;; Return value:  Size  Location     Type
  7037 ;;                  1    wreg      unsigned char 
  7038 ;; Registers used:
  7039 ;;		wreg
  7040 ;; Tracked objects:
  7041 ;;		On entry : F/0
  7042 ;;		On exit  : F/0
  7043 ;;		Unchanged: F/0
  7044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7049 ;;Total ram usage:        0 bytes
  7050 ;; Hardware stack levels used:    1
  7051 ;; Hardware stack levels required when called:    2
  7052 ;; This function calls:
  7053 ;;		Nothing
  7054 ;; This function is called by:
  7055 ;;		_vscp_readStdReg
  7056 ;; This function uses a non-reentrant model
  7057 ;;
  7058                           
  7059                           	psect	text30
  7060  002F78                     __ptext30:
  7061                           	opt stack 0
  7062  002F78                     _vscp_getBufferSize:
  7063                           	opt stack 26
  7064                           
  7065                           ; BSR set to: 0
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;main.c: 1292: return 8;
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;incstack = 0
  7072                           ;incstack = 0
  7073  002F78  0C08               	retlw	8
  7074  002F7A                     __end_of_vscp_getBufferSize:
  7075                           	opt stack 0
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           intcon	equ	0xFF2
  7083                           postinc0	equ	0xFEE
  7084                           wreg	equ	0xFE8
  7085                           indf1	equ	0xFE7
  7086                           fsr1h	equ	0xFE2
  7087                           fsr1l	equ	0xFE1
  7088                           indf2	equ	0xFDF
  7089                           postinc2	equ	0xFDE
  7090                           postdec2	equ	0xFDD
  7091                           plusw2	equ	0xFDB
  7092                           fsr2h	equ	0xFDA
  7093                           fsr2l	equ	0xFD9
  7094                           status	equ	0xFD8
  7095                           
  7096 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  7097 ;; Defined at:
  7098 ;;		line 1282 in file "../main.c"
  7099 ;; Parameters:    Size  Location     Type
  7100 ;;		None
  7101 ;; Auto vars:     Size  Location     Type
  7102 ;;		None
  7103 ;; Return value:  Size  Location     Type
  7104 ;;                  1    wreg      unsigned char 
  7105 ;; Registers used:
  7106 ;;		wreg
  7107 ;; Tracked objects:
  7108 ;;		On entry : F/0
  7109 ;;		On exit  : F/0
  7110 ;;		Unchanged: F/0
  7111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7116 ;;Total ram usage:        0 bytes
  7117 ;; Hardware stack levels used:    1
  7118 ;; Hardware stack levels required when called:    2
  7119 ;; This function calls:
  7120 ;;		Nothing
  7121 ;; This function is called by:
  7122 ;;		_vscp_readStdReg
  7123 ;; This function uses a non-reentrant model
  7124 ;;
  7125                           
  7126                           	psect	text31
  7127  002F7A                     __ptext31:
  7128                           	opt stack 0
  7129  002F7A                     _vscp_getBootLoaderAlgorithm:
  7130                           	opt stack 26
  7131                           
  7132                           ; BSR set to: 0
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;main.c: 1283: return 0x01;
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;incstack = 0
  7139                           ;incstack = 0
  7140  002F7A  0C01               	retlw	1
  7141  002F7C                     __end_of_vscp_getBootLoaderAlgorithm:
  7142                           	opt stack 0
  7143                           tblptru	equ	0xFF8
  7144                           tblptrh	equ	0xFF7
  7145                           tblptrl	equ	0xFF6
  7146                           tablat	equ	0xFF5
  7147                           prodh	equ	0xFF4
  7148                           prodl	equ	0xFF3
  7149                           intcon	equ	0xFF2
  7150                           postinc0	equ	0xFEE
  7151                           wreg	equ	0xFE8
  7152                           indf1	equ	0xFE7
  7153                           fsr1h	equ	0xFE2
  7154                           fsr1l	equ	0xFE1
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           plusw2	equ	0xFDB
  7159                           fsr2h	equ	0xFDA
  7160                           fsr2l	equ	0xFD9
  7161                           status	equ	0xFD8
  7162                           
  7163 ;; *************** function _vscp_getManufacturerId *****************
  7164 ;; Defined at:
  7165 ;;		line 1273 in file "../main.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  idx             1    wreg     unsigned char 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  idx             1   10[COMRAM] unsigned char 
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  1    wreg      unsigned char 
  7172 ;; Registers used:
  7173 ;;		wreg, status,2, status,0, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7183 ;;Total ram usage:        1 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    3
  7186 ;; This function calls:
  7187 ;;		_readEEPROM
  7188 ;; This function is called by:
  7189 ;;		_vscp_readStdReg
  7190 ;;		_vscp_writeStdReg
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           	psect	text32
  7195  002E70                     __ptext32:
  7196                           	opt stack 0
  7197  002E70                     _vscp_getManufacturerId:
  7198                           	opt stack 25
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;incstack = 0
  7202                           ;incstack = 0
  7203                           ;vscp_getManufacturerId@idx stored from wreg
  7204  002E70  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
  7205                           
  7206                           ;main.c: 1274: return readEEPROM( 0x09 + idx );
  7207  002E74  0E09               	movlw	9
  7208  002E76  240B               	addwf	vscp_getManufacturerId@idx,w,c
  7209  002E78  6E08               	movwf	?_readEEPROM,c
  7210  002E7A  6A09               	clrf	?_readEEPROM+1,c
  7211  002E7C  0E00               	movlw	0
  7212  002E7E  2209               	addwfc	?_readEEPROM+1,f,c
  7213  002E80  EF68  F017         	goto	_readEEPROM	;wreg free
  7214  002E84                     __end_of_vscp_getManufacturerId:
  7215                           	opt stack 0
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           intcon	equ	0xFF2
  7223                           postinc0	equ	0xFEE
  7224                           wreg	equ	0xFE8
  7225                           indf1	equ	0xFE7
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           plusw2	equ	0xFDB
  7232                           fsr2h	equ	0xFDA
  7233                           fsr2l	equ	0xFD9
  7234                           status	equ	0xFD8
  7235                           
  7236 ;; *************** function _vscp_getUserID *****************
  7237 ;; Defined at:
  7238 ;;		line 1253 in file "../main.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;  idx             1    wreg     unsigned char 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  idx             1   10[COMRAM] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  1    wreg      unsigned char 
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7256 ;;Total ram usage:        1 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    3
  7259 ;; This function calls:
  7260 ;;		_readEEPROM
  7261 ;; This function is called by:
  7262 ;;		_vscp_readStdReg
  7263 ;;		_vscp_writeStdReg
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text33
  7268  002E84                     __ptext33:
  7269                           	opt stack 0
  7270  002E84                     _vscp_getUserID:
  7271                           	opt stack 25
  7272                           
  7273                           ;incstack = 0
  7274                           ;incstack = 0
  7275                           ;vscp_getUserID@idx stored from wreg
  7276  002E84  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
  7277                           
  7278                           ;main.c: 1254: return readEEPROM( 0x04 + idx );
  7279  002E88  0E04               	movlw	4
  7280  002E8A  240B               	addwf	vscp_getUserID@idx,w,c
  7281  002E8C  6E08               	movwf	?_readEEPROM,c
  7282  002E8E  6A09               	clrf	?_readEEPROM+1,c
  7283  002E90  0E00               	movlw	0
  7284  002E92  2209               	addwfc	?_readEEPROM+1,f,c
  7285  002E94  EF68  F017         	goto	_readEEPROM	;wreg free
  7286  002E98                     __end_of_vscp_getUserID:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           prodh	equ	0xFF4
  7293                           prodl	equ	0xFF3
  7294                           intcon	equ	0xFF2
  7295                           postinc0	equ	0xFEE
  7296                           wreg	equ	0xFE8
  7297                           indf1	equ	0xFE7
  7298                           fsr1h	equ	0xFE2
  7299                           fsr1l	equ	0xFE1
  7300                           indf2	equ	0xFDF
  7301                           postinc2	equ	0xFDE
  7302                           postdec2	equ	0xFDD
  7303                           plusw2	equ	0xFDB
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _vscp_getMDF_URL *****************
  7309 ;; Defined at:
  7310 ;;		line 1244 in file "../main.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  idx             1    wreg     unsigned char 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;  idx             1    8[COMRAM] unsigned char 
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      unsigned char 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  7319 ;; Tracked objects:
  7320 ;;		On entry : F/0
  7321 ;;		On exit  : F/0
  7322 ;;		Unchanged: F/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7327 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7328 ;;Total ram usage:        2 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    2
  7331 ;; This function calls:
  7332 ;;		Nothing
  7333 ;; This function is called by:
  7334 ;;		_vscp_readStdReg
  7335 ;;		_vscp_handleProtocolEvent
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text34
  7340  002DF4                     __ptext34:
  7341                           	opt stack 0
  7342  002DF4                     _vscp_getMDF_URL:
  7343                           	opt stack 26
  7344                           
  7345                           ;incstack = 0
  7346                           ;incstack = 0
  7347                           ;vscp_getMDF_URL@idx stored from wreg
  7348  002DF4  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;main.c: 1245: return vscp_deviceURL[ idx ];
  7352  002DF8  5009               	movf	vscp_getMDF_URL@idx,w,c
  7353  002DFA  0F00               	addlw	low _vscp_deviceURL
  7354  002DFC  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  7355  002DFE  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  7356  002E02  0E0F               	movlw	high __smallconst
  7357  002E04  6EF7               	movwf	tblptrh,c
  7358  002E06  0E00               	movlw	low (__smallconst shr (0+16))
  7359  002E08  6EF8               	movwf	tblptru,c
  7360  002E0A  0008               	tblrd		*
  7361  002E0C  50F5               	movf	tablat,w,c
  7362                           
  7363                           ; BSR set to: 0
  7364  002E0E  0012               	return	
  7365  002E10                     __end_of_vscp_getMDF_URL:
  7366                           	opt stack 0
  7367                           tblptru	equ	0xFF8
  7368                           tblptrh	equ	0xFF7
  7369                           tblptrl	equ	0xFF6
  7370                           tablat	equ	0xFF5
  7371                           prodh	equ	0xFF4
  7372                           prodl	equ	0xFF3
  7373                           intcon	equ	0xFF2
  7374                           postinc0	equ	0xFEE
  7375                           wreg	equ	0xFE8
  7376                           indf1	equ	0xFE7
  7377                           fsr1h	equ	0xFE2
  7378                           fsr1l	equ	0xFE1
  7379                           indf2	equ	0xFDF
  7380                           postinc2	equ	0xFDE
  7381                           postdec2	equ	0xFDD
  7382                           plusw2	equ	0xFDB
  7383                           fsr2h	equ	0xFDA
  7384                           fsr2l	equ	0xFD9
  7385                           status	equ	0xFD8
  7386                           
  7387 ;; *************** function _vscp_getGUID *****************
  7388 ;; Defined at:
  7389 ;;		line 1232 in file "../main.c"
  7390 ;; Parameters:    Size  Location     Type
  7391 ;;  idx             1    wreg     unsigned char 
  7392 ;; Auto vars:     Size  Location     Type
  7393 ;;  idx             1   10[COMRAM] unsigned char 
  7394 ;; Return value:  Size  Location     Type
  7395 ;;                  1    wreg      unsigned char 
  7396 ;; Registers used:
  7397 ;;		wreg, status,2, status,0, cstack
  7398 ;; Tracked objects:
  7399 ;;		On entry : 0/0
  7400 ;;		On exit  : 0/0
  7401 ;;		Unchanged: 0/0
  7402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7407 ;;Total ram usage:        1 bytes
  7408 ;; Hardware stack levels used:    1
  7409 ;; Hardware stack levels required when called:    3
  7410 ;; This function calls:
  7411 ;;		_readEEPROM
  7412 ;; This function is called by:
  7413 ;;		_vscp_readStdReg
  7414 ;;		_vscp_writeStdReg
  7415 ;;		_vscp_handleProtocolEvent
  7416 ;; This function uses a non-reentrant model
  7417 ;;
  7418                           
  7419                           	psect	text35
  7420  002E98                     __ptext35:
  7421                           	opt stack 0
  7422  002E98                     _vscp_getGUID:
  7423                           	opt stack 25
  7424                           
  7425                           ; BSR set to: 0
  7426                           ;incstack = 0
  7427                           ;incstack = 0
  7428                           ;vscp_getGUID@idx stored from wreg
  7429  002E98  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
  7430                           
  7431                           ;main.c: 1233: return readEEPROM( 0x11 + idx );
  7432  002E9C  0E11               	movlw	17
  7433  002E9E  240B               	addwf	vscp_getGUID@idx,w,c
  7434  002EA0  6E08               	movwf	?_readEEPROM,c
  7435  002EA2  6A09               	clrf	?_readEEPROM+1,c
  7436  002EA4  0E00               	movlw	0
  7437  002EA6  2209               	addwfc	?_readEEPROM+1,f,c
  7438  002EA8  EF68  F017         	goto	_readEEPROM	;wreg free
  7439  002EAC                     __end_of_vscp_getGUID:
  7440                           	opt stack 0
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           postinc0	equ	0xFEE
  7449                           wreg	equ	0xFE8
  7450                           indf1	equ	0xFE7
  7451                           fsr1h	equ	0xFE2
  7452                           fsr1l	equ	0xFE1
  7453                           indf2	equ	0xFDF
  7454                           postinc2	equ	0xFDE
  7455                           postdec2	equ	0xFDD
  7456                           plusw2	equ	0xFDB
  7457                           fsr2h	equ	0xFDA
  7458                           fsr2l	equ	0xFD9
  7459                           status	equ	0xFD8
  7460                           
  7461 ;; *************** function _vscp_getSubMinorVersion *****************
  7462 ;; Defined at:
  7463 ;;		line 1221 in file "../main.c"
  7464 ;; Parameters:    Size  Location     Type
  7465 ;;		None
  7466 ;; Auto vars:     Size  Location     Type
  7467 ;;		None
  7468 ;; Return value:  Size  Location     Type
  7469 ;;                  1    wreg      unsigned char 
  7470 ;; Registers used:
  7471 ;;		wreg
  7472 ;; Tracked objects:
  7473 ;;		On entry : F/0
  7474 ;;		On exit  : F/0
  7475 ;;		Unchanged: F/0
  7476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7481 ;;Total ram usage:        0 bytes
  7482 ;; Hardware stack levels used:    1
  7483 ;; Hardware stack levels required when called:    2
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_vscp_readStdReg
  7488 ;; This function uses a non-reentrant model
  7489 ;;
  7490                           
  7491                           	psect	text36
  7492  002F7C                     __ptext36:
  7493                           	opt stack 0
  7494  002F7C                     _vscp_getSubMinorVersion:
  7495                           	opt stack 26
  7496                           
  7497                           ; BSR set to: 0
  7498                           
  7499                           ; BSR set to: 0
  7500                           ;main.c: 1222: return 0;
  7501                           
  7502                           ;incstack = 0
  7503                           ;incstack = 0
  7504  002F7C  0C00               	retlw	0
  7505  002F7E                     __end_of_vscp_getSubMinorVersion:
  7506                           	opt stack 0
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           postinc0	equ	0xFEE
  7515                           wreg	equ	0xFE8
  7516                           indf1	equ	0xFE7
  7517                           fsr1h	equ	0xFE2
  7518                           fsr1l	equ	0xFE1
  7519                           indf2	equ	0xFDF
  7520                           postinc2	equ	0xFDE
  7521                           postdec2	equ	0xFDD
  7522                           plusw2	equ	0xFDB
  7523                           fsr2h	equ	0xFDA
  7524                           fsr2l	equ	0xFD9
  7525                           status	equ	0xFD8
  7526                           
  7527 ;; *************** function _vscp_getMinorVersion *****************
  7528 ;; Defined at:
  7529 ;;		line 1212 in file "../main.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;                  1    wreg      unsigned char 
  7536 ;; Registers used:
  7537 ;;		wreg
  7538 ;; Tracked objects:
  7539 ;;		On entry : F/0
  7540 ;;		On exit  : F/0
  7541 ;;		Unchanged: F/0
  7542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7547 ;;Total ram usage:        0 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    2
  7550 ;; This function calls:
  7551 ;;		Nothing
  7552 ;; This function is called by:
  7553 ;;		_vscp_readStdReg
  7554 ;; This function uses a non-reentrant model
  7555 ;;
  7556                           
  7557                           	psect	text37
  7558  002F7E                     __ptext37:
  7559                           	opt stack 0
  7560  002F7E                     _vscp_getMinorVersion:
  7561                           	opt stack 26
  7562                           
  7563                           ; BSR set to: 0
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;main.c: 1213: return 0;
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;incstack = 0
  7570                           ;incstack = 0
  7571  002F7E  0C00               	retlw	0
  7572  002F80                     __end_of_vscp_getMinorVersion:
  7573                           	opt stack 0
  7574                           tblptru	equ	0xFF8
  7575                           tblptrh	equ	0xFF7
  7576                           tblptrl	equ	0xFF6
  7577                           tablat	equ	0xFF5
  7578                           prodh	equ	0xFF4
  7579                           prodl	equ	0xFF3
  7580                           intcon	equ	0xFF2
  7581                           postinc0	equ	0xFEE
  7582                           wreg	equ	0xFE8
  7583                           indf1	equ	0xFE7
  7584                           fsr1h	equ	0xFE2
  7585                           fsr1l	equ	0xFE1
  7586                           indf2	equ	0xFDF
  7587                           postinc2	equ	0xFDE
  7588                           postdec2	equ	0xFDD
  7589                           plusw2	equ	0xFDB
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function _vscp_getMajorVersion *****************
  7595 ;; Defined at:
  7596 ;;		line 1203 in file "../main.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;		None
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;		None
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  1    wreg      unsigned char 
  7603 ;; Registers used:
  7604 ;;		wreg
  7605 ;; Tracked objects:
  7606 ;;		On entry : F/0
  7607 ;;		On exit  : F/0
  7608 ;;		Unchanged: F/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7614 ;;Total ram usage:        0 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    2
  7617 ;; This function calls:
  7618 ;;		Nothing
  7619 ;; This function is called by:
  7620 ;;		_vscp_readStdReg
  7621 ;; This function uses a non-reentrant model
  7622 ;;
  7623                           
  7624                           	psect	text38
  7625  002F80                     __ptext38:
  7626                           	opt stack 0
  7627  002F80                     _vscp_getMajorVersion:
  7628                           	opt stack 26
  7629                           
  7630                           ; BSR set to: 0
  7631                           
  7632                           ; BSR set to: 0
  7633                           ;main.c: 1204: return 1;
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;incstack = 0
  7637                           ;incstack = 0
  7638  002F80  0C01               	retlw	1
  7639  002F82                     __end_of_vscp_getMajorVersion:
  7640                           	opt stack 0
  7641                           tblptru	equ	0xFF8
  7642                           tblptrh	equ	0xFF7
  7643                           tblptrl	equ	0xFF6
  7644                           tablat	equ	0xFF5
  7645                           prodh	equ	0xFF4
  7646                           prodl	equ	0xFF3
  7647                           intcon	equ	0xFF2
  7648                           postinc0	equ	0xFEE
  7649                           wreg	equ	0xFE8
  7650                           indf1	equ	0xFE7
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           plusw2	equ	0xFDB
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661 ;; *************** function _vscp_newNodeOnline *****************
  7662 ;; Defined at:
  7663 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;		None               void
  7670 ;; Registers used:
  7671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7672 ;; Tracked objects:
  7673 ;;		On entry : F/0
  7674 ;;		On exit  : F/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7679 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7681 ;;Total ram usage:        1 bytes
  7682 ;; Hardware stack levels used:    1
  7683 ;; Hardware stack levels required when called:    7
  7684 ;; This function calls:
  7685 ;;		_vscp_sendEvent
  7686 ;; This function is called by:
  7687 ;;		_vscp_handleProtocolEvent
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           	psect	text39
  7692  002BEE                     __ptext39:
  7693                           	opt stack 0
  7694  002BEE                     _vscp_newNodeOnline:
  7695                           	opt stack 22
  7696                           
  7697                           ; BSR set to: 0
  7698                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
  7699                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;incstack = 0
  7703                           ;incstack = 0
  7704  002BEE  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  7705  002BF2  0E0F               	movlw	15
  7706  002BF4  164C               	andwf	??_vscp_newNodeOnline,f,c
  7707  002BF6  044C               	decf	??_vscp_newNodeOnline,w,c
  7708  002BF8  A4D8               	btfss	status,2,c
  7709  002BFA  0012               	return	
  7710                           
  7711                           ; BSR set to: 0
  7712  002BFC  5170               	movf	_vscp_nickname& (0+255),w,b
  7713  002BFE  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7714  002C02  62DF               	cpfseq	indf2,c
  7715  002C04  0012               	return	
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
  7719  002C06  0E80               	movlw	128
  7720  002C08  6F83               	movwf	_vscp_omsg& (0+255),b
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
  7724  002C0A  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
  7728  002C0C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7729  002C0E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7730                           
  7731                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
  7732  002C10  0E03               	movlw	3
  7733  002C12  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;vscp_firmware.c: 506: vscp_sendEvent();
  7737  002C14  EF33  F016         	goto	_vscp_sendEvent	;wreg free
  7738  002C18                     __end_of_vscp_newNodeOnline:
  7739                           	opt stack 0
  7740                           tblptru	equ	0xFF8
  7741                           tblptrh	equ	0xFF7
  7742                           tblptrl	equ	0xFF6
  7743                           tablat	equ	0xFF5
  7744                           prodh	equ	0xFF4
  7745                           prodl	equ	0xFF3
  7746                           intcon	equ	0xFF2
  7747                           postinc0	equ	0xFEE
  7748                           wreg	equ	0xFE8
  7749                           indf1	equ	0xFE7
  7750                           fsr1h	equ	0xFE2
  7751                           fsr1l	equ	0xFE1
  7752                           indf2	equ	0xFDF
  7753                           postinc2	equ	0xFDE
  7754                           postdec2	equ	0xFDD
  7755                           plusw2	equ	0xFDB
  7756                           fsr2h	equ	0xFDA
  7757                           fsr2l	equ	0xFD9
  7758                           status	equ	0xFD8
  7759                           
  7760 ;; *************** function _vscp_handleDropNickname *****************
  7761 ;; Defined at:
  7762 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
  7763 ;; Parameters:    Size  Location     Type
  7764 ;;		None
  7765 ;; Auto vars:     Size  Location     Type
  7766 ;;  bytes           1   11[COMRAM] unsigned char 
  7767 ;; Return value:  Size  Location     Type
  7768 ;;		None               void
  7769 ;; Registers used:
  7770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7771 ;; Tracked objects:
  7772 ;;		On entry : F/0
  7773 ;;		On exit  : F/0
  7774 ;;		Unchanged: 0/0
  7775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7779 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7780 ;;Total ram usage:        1 bytes
  7781 ;; Hardware stack levels used:    1
  7782 ;; Hardware stack levels required when called:    5
  7783 ;; This function calls:
  7784 ;;		_vscp_init
  7785 ;;		_vscp_writeNicknamePermanent
  7786 ;; This function is called by:
  7787 ;;		_vscp_handleProtocolEvent
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text40
  7792  002B92                     __ptext40:
  7793                           	opt stack 0
  7794  002B92                     _vscp_handleDropNickname:
  7795                           	opt stack 24
  7796                           
  7797                           ; BSR set to: 0
  7798                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;incstack = 0
  7802                           ;incstack = 0
  7803  002B92  5175               	movf	_vscp_imsg& (0+255),w,b
  7804  002B94  0B0F               	andlw	15
  7805  002B96  6E0C               	movwf	vscp_handleDropNickname@bytes,c
  7806                           
  7807                           ; BSR set to: 0
  7808                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7809  002B98  500C               	movf	vscp_handleDropNickname@bytes,w,c
  7810  002B9A  B4D8               	btfsc	status,2,c
  7811  002B9C  0012               	return	
  7812                           
  7813                           ; BSR set to: 0
  7814  002B9E  5170               	movf	_vscp_nickname& (0+255),w,b
  7815  002BA0  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7816  002BA4  62DF               	cpfseq	indf2,c
  7817  002BA6  0012               	return	
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  7821  002BA8  040C               	decf	vscp_handleDropNickname@bytes,w,c
  7822  002BAA  E005               	bz	l891
  7823                           
  7824                           ; BSR set to: 0
  7825  002BAC  0E01               	movlw	1
  7826  002BAE  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
  7827  002BB0  0C01               	retlw	1
  7828                           
  7829                           ; BSR set to: 0
  7830  002BB2  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  7831  002BB4  0C01               	retlw	1
  7832  002BB6                     l891:
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
  7836  002BB6  6970               	setf	_vscp_nickname& (0+255),b
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
  7840  002BB8  0EFF               	movlw	255
  7841  002BBA  EC71  F017         	call	_vscp_writeNicknamePermanent
  7842                           
  7843                           ;vscp_firmware.c: 473: vscp_init();
  7844  002BBE  EF1C  F015         	goto	_vscp_init	;wreg free
  7845  002BC2                     __end_of_vscp_handleDropNickname:
  7846                           	opt stack 0
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           postinc0	equ	0xFEE
  7855                           wreg	equ	0xFE8
  7856                           indf1	equ	0xFE7
  7857                           fsr1h	equ	0xFE2
  7858                           fsr1l	equ	0xFE1
  7859                           indf2	equ	0xFDF
  7860                           postinc2	equ	0xFDE
  7861                           postdec2	equ	0xFDD
  7862                           plusw2	equ	0xFDB
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function _vscp_init *****************
  7868 ;; Defined at:
  7869 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;		None
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;		None
  7874 ;; Return value:  Size  Location     Type
  7875 ;;		None               void
  7876 ;; Registers used:
  7877 ;;		wreg, status,2, cstack
  7878 ;; Tracked objects:
  7879 ;;		On entry : 0/E
  7880 ;;		On exit  : F/0
  7881 ;;		Unchanged: 0/0
  7882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7887 ;;Total ram usage:        0 bytes
  7888 ;; Hardware stack levels used:    1
  7889 ;; Hardware stack levels required when called:    4
  7890 ;; This function calls:
  7891 ;;		_vscp_readNicknamePermanent
  7892 ;; This function is called by:
  7893 ;;		_main
  7894 ;;		_vscp_handleDropNickname
  7895 ;;		_vscp_handleProtocolEvent
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           	psect	text41
  7900  002A38                     __ptext41:
  7901                           	opt stack 0
  7902  002A38                     _vscp_init:
  7903                           	opt stack 24
  7904                           
  7905                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;incstack = 0
  7909                           ;incstack = 0
  7910  002A38  0E02               	movlw	2
  7911  002A3A  6E56               	movwf	_vscp_initledfunc,c
  7912                           
  7913                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
  7914  002A3C  ECA9  F017         	call	_vscp_readNicknamePermanent	;wreg free
  7915  002A40  0100               	movlb	0	; () banked
  7916  002A42  6F70               	movwf	_vscp_nickname& (0+255),b
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
  7920  002A44  6770               	tstfsz	_vscp_nickname& (0+255),b
  7921  002A46  D001               	goto	l833
  7922                           
  7923                           ; BSR set to: 0
  7924  002A48  6970               	setf	_vscp_nickname& (0+255),b
  7925  002A4A                     l833:
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
  7929  002A4A  6B75               	clrf	_vscp_imsg& (0+255),b
  7930                           
  7931                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
  7932  002A4C  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  7933                           
  7934                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
  7935  002A4E  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  7936  002A50  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  7937                           
  7938                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
  7939  002A52  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  7940                           
  7941                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
  7942  002A54  6B83               	clrf	_vscp_omsg& (0+255),b
  7943                           
  7944                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
  7945  002A56  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7946                           
  7947                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
  7948  002A58  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7949  002A5A  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7950                           
  7951                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
  7952  002A5C  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  7953                           
  7954                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
  7955  002A5E  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  7956                           
  7957                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
  7958  002A60  6A57               	clrf	_vscp_probe_address,c
  7959                           
  7960                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
  7961  002A62  6B71               	clrf	_vscp_node_state& (0+255),b
  7962                           
  7963                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
  7964  002A64  6B72               	clrf	_vscp_node_substate& (0+255),b
  7965                           
  7966                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
  7967  002A66  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7968                           
  7969                           ;vscp_firmware.c: 148: vscp_page_select = 0;
  7970  002A68  6A52               	clrf	_vscp_page_select,c
  7971  002A6A  6A53               	clrf	_vscp_page_select+1,c
  7972                           
  7973                           ;vscp_firmware.c: 151: vscp_timer = 0;
  7974  002A6C  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7975  002A6E  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7976                           
  7977                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
  7978  002A70  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  7979  002A72  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  7980                           
  7981                           ;vscp_firmware.c: 153: vscp_second = 0;
  7982  002A74  6B74               	clrf	_vscp_second& (0+255),b
  7983                           
  7984                           ;vscp_firmware.c: 154: vscp_minute = 0;
  7985  002A76  6B6F               	clrf	_vscp_minute& (0+255),b
  7986                           
  7987                           ;vscp_firmware.c: 155: vscp_hour = 0;
  7988  002A78  6B6D               	clrf	_vscp_hour& (0+255),b
  7989                           
  7990                           ; BSR set to: 0
  7991  002A7A  0012               	return	
  7992  002A7C                     __end_of_vscp_init:
  7993                           	opt stack 0
  7994                           tblptru	equ	0xFF8
  7995                           tblptrh	equ	0xFF7
  7996                           tblptrl	equ	0xFF6
  7997                           tablat	equ	0xFF5
  7998                           prodh	equ	0xFF4
  7999                           prodl	equ	0xFF3
  8000                           intcon	equ	0xFF2
  8001                           postinc0	equ	0xFEE
  8002                           wreg	equ	0xFE8
  8003                           indf1	equ	0xFE7
  8004                           fsr1h	equ	0xFE2
  8005                           fsr1l	equ	0xFE1
  8006                           indf2	equ	0xFDF
  8007                           postinc2	equ	0xFDE
  8008                           postdec2	equ	0xFDD
  8009                           plusw2	equ	0xFDB
  8010                           fsr2h	equ	0xFDA
  8011                           fsr2l	equ	0xFD9
  8012                           status	equ	0xFD8
  8013                           
  8014 ;; *************** function _vscp_readNicknamePermanent *****************
  8015 ;; Defined at:
  8016 ;;		line 536 in file "../main.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;		None
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;		None
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  1    wreg      unsigned char 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/E
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8034 ;;Total ram usage:        0 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    3
  8037 ;; This function calls:
  8038 ;;		_readEEPROM
  8039 ;; This function is called by:
  8040 ;;		_vscp_init
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           	psect	text42
  8045  002F52                     __ptext42:
  8046                           	opt stack 0
  8047  002F52                     _vscp_readNicknamePermanent:
  8048                           	opt stack 24
  8049                           
  8050                           ;main.c: 537: return readEEPROM( 0x01 );
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;incstack = 0
  8054                           ;incstack = 0
  8055  002F52  6A09               	clrf	?_readEEPROM+1,c
  8056  002F54  0E01               	movlw	1
  8057  002F56  6E08               	movwf	?_readEEPROM,c
  8058  002F58  EF68  F017         	goto	_readEEPROM	;wreg free
  8059  002F5C                     __end_of_vscp_readNicknamePermanent:
  8060                           	opt stack 0
  8061                           tblptru	equ	0xFF8
  8062                           tblptrh	equ	0xFF7
  8063                           tblptrl	equ	0xFF6
  8064                           tablat	equ	0xFF5
  8065                           prodh	equ	0xFF4
  8066                           prodl	equ	0xFF3
  8067                           intcon	equ	0xFF2
  8068                           postinc0	equ	0xFEE
  8069                           wreg	equ	0xFE8
  8070                           indf1	equ	0xFE7
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           postdec2	equ	0xFDD
  8076                           plusw2	equ	0xFDB
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _vscp_handleSetNickname *****************
  8082 ;; Defined at:
  8083 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : F/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    4
  8104 ;; This function calls:
  8105 ;;		_vscp_writeNicknamePermanent
  8106 ;;		_vscp_setSegmentCRC
  8107 ;; This function is called by:
  8108 ;;		_vscp_handleProtocolEvent
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           	psect	text43
  8113  002CD8                     __ptext43:
  8114                           	opt stack 0
  8115  002CD8                     _vscp_handleSetNickname:
  8116                           	opt stack 25
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  8120                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  8121                           
  8122                           ;incstack = 0
  8123                           ;incstack = 0
  8124  002CD8  5175               	movf	_vscp_imsg& (0+255),w,b
  8125  002CDA  0B0F               	andlw	15
  8126  002CDC  0A02               	xorlw	2
  8127  002CDE  A4D8               	btfss	status,2,c
  8128  002CE0  0012               	return	
  8129                           
  8130                           ; BSR set to: 0
  8131  002CE2  5170               	movf	_vscp_nickname& (0+255),w,b
  8132  002CE4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  8133  002CE8  62DF               	cpfseq	indf2,c
  8134  002CEA  0012               	return	
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
  8138  002CEC  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
  8142  002CF0  5170               	movf	_vscp_nickname& (0+255),w,b
  8143  002CF2  EC71  F017         	call	_vscp_writeNicknamePermanent
  8144                           
  8145                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
  8146  002CF6  0E40               	movlw	64
  8147  002CF8  EF5F  F017         	goto	_vscp_setSegmentCRC
  8148  002CFC                     __end_of_vscp_handleSetNickname:
  8149                           	opt stack 0
  8150                           tblptru	equ	0xFF8
  8151                           tblptrh	equ	0xFF7
  8152                           tblptrl	equ	0xFF6
  8153                           tablat	equ	0xFF5
  8154                           prodh	equ	0xFF4
  8155                           prodl	equ	0xFF3
  8156                           intcon	equ	0xFF2
  8157                           postinc0	equ	0xFEE
  8158                           wreg	equ	0xFE8
  8159                           indf1	equ	0xFE7
  8160                           fsr1h	equ	0xFE2
  8161                           fsr1l	equ	0xFE1
  8162                           indf2	equ	0xFDF
  8163                           postinc2	equ	0xFDE
  8164                           postdec2	equ	0xFDD
  8165                           plusw2	equ	0xFDB
  8166                           fsr2h	equ	0xFDA
  8167                           fsr2l	equ	0xFD9
  8168                           status	equ	0xFD8
  8169                           
  8170 ;; *************** function _vscp_handleHeartbeat *****************
  8171 ;; Defined at:
  8172 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
  8173 ;; Parameters:    Size  Location     Type
  8174 ;;		None
  8175 ;; Auto vars:     Size  Location     Type
  8176 ;;		None
  8177 ;; Return value:  Size  Location     Type
  8178 ;;		None               void
  8179 ;; Registers used:
  8180 ;;		wreg, status,2, status,0, cstack
  8181 ;; Tracked objects:
  8182 ;;		On entry : F/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8190 ;;Total ram usage:        0 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    4
  8193 ;; This function calls:
  8194 ;;		_vscp_writeNicknamePermanent
  8195 ;;		_vscp_getSegmentCRC
  8196 ;;		_vscp_setSegmentCRC
  8197 ;; This function is called by:
  8198 ;;		_vscp_handleProtocolEvent
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           	psect	text44
  8203  002A7C                     __ptext44:
  8204                           	opt stack 0
  8205  002A7C                     _vscp_handleHeartbeat:
  8206                           	opt stack 25
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
  8210                           
  8211                           ;incstack = 0
  8212                           ;incstack = 0
  8213  002A7C  ECAE  F017         	call	_vscp_getSegmentCRC	;wreg free
  8214  002A80  0900               	iorlw	0
  8215  002A82  E118               	bnz	l6641
  8216                           
  8217                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  8218                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  8219  002A84  0100               	movlb	0	; () banked
  8220  002A86  5175               	movf	_vscp_imsg& (0+255),w,b
  8221  002A88  0B0F               	andlw	15
  8222  002A8A  0A05               	xorlw	5
  8223  002A8C  A4D8               	btfss	status,2,c
  8224  002A8E  0012               	return	
  8225                           
  8226                           ; BSR set to: 0
  8227  002A90  ECAE  F017         	call	_vscp_getSegmentCRC	;wreg free
  8228  002A94  0100               	movlb	0	; () banked
  8229  002A96  197B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  8230  002A98  B4D8               	btfsc	status,2,c
  8231  002A9A  0012               	return	
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  8235  002A9C  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  8236  002A9E  EC5F  F017         	call	_vscp_setSegmentCRC
  8237                           
  8238                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
  8239  002AA2  0100               	movlb	0	; () banked
  8240  002AA4  6970               	setf	_vscp_nickname& (0+255),b
  8241                           
  8242                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
  8243  002AA6  0EFF               	movlw	255
  8244  002AA8  EC71  F017         	call	_vscp_writeNicknamePermanent
  8245                           
  8246                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
  8247  002AAC  0E01               	movlw	1
  8248  002AAE  0100               	movlb	0	; () banked
  8249  002AB0  6F71               	movwf	_vscp_node_state& (0+255),b
  8250  002AB2  0C01               	retlw	1
  8251  002AB4                     l6641:
  8252                           
  8253                           ;vscp_firmware.c: 403: else {
  8254                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  8255  002AB4  0100               	movlb	0	; () banked
  8256  002AB6  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  8257  002AB8  EF5F  F017         	goto	_vscp_setSegmentCRC
  8258  002ABC                     __end_of_vscp_handleHeartbeat:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           tblptrh	equ	0xFF7
  8262                           tblptrl	equ	0xFF6
  8263                           tablat	equ	0xFF5
  8264                           prodh	equ	0xFF4
  8265                           prodl	equ	0xFF3
  8266                           intcon	equ	0xFF2
  8267                           postinc0	equ	0xFEE
  8268                           wreg	equ	0xFE8
  8269                           indf1	equ	0xFE7
  8270                           fsr1h	equ	0xFE2
  8271                           fsr1l	equ	0xFE1
  8272                           indf2	equ	0xFDF
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           plusw2	equ	0xFDB
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           
  8280 ;; *************** function _vscp_getMatrixInfo *****************
  8281 ;; Defined at:
  8282 ;;		line 1394 in file "../main.c"
  8283 ;; Parameters:    Size  Location     Type
  8284 ;;  pData           1    wreg     PTR unsigned char 
  8285 ;;		 -> vscp_omsg(13), 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  pData           1    0[COMRAM] PTR unsigned char 
  8288 ;;		 -> vscp_omsg(13), 
  8289 ;;  i               1    7[COMRAM] unsigned char 
  8290 ;; Return value:  Size  Location     Type
  8291 ;;		None               void
  8292 ;; Registers used:
  8293 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8294 ;; Tracked objects:
  8295 ;;		On entry : F/0
  8296 ;;		On exit  : F/0
  8297 ;;		Unchanged: 0/0
  8298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8300 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8302 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8303 ;;Total ram usage:        1 bytes
  8304 ;; Hardware stack levels used:    1
  8305 ;; Hardware stack levels required when called:    2
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_vscp_handleProtocolEvent
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	text45
  8314  002D3C                     __ptext45:
  8315                           	opt stack 0
  8316  002D3C                     _vscp_getMatrixInfo:
  8317                           	opt stack 27
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;main.c: 1395: uint8_t i;
  8321                           ;main.c: 1397: vscp_omsg.data[ 0 ] = 7;
  8322                           
  8323                           ;incstack = 0
  8324                           ;incstack = 0
  8325  002D3C  0E07               	movlw	7
  8326  002D3E  6F88               	movwf	(_vscp_omsg+5)& (0+255),b
  8327                           
  8328                           ;main.c: 1398: vscp_omsg.data[ 1 ] = 72;
  8329  002D40  0E48               	movlw	72
  8330  002D42  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  8331                           
  8332                           ;main.c: 1401: for ( i = 2; i < 8; i++ ) {
  8333  002D44  0E02               	movlw	2
  8334  002D46  6E08               	movwf	vscp_getMatrixInfo@i,c
  8335  002D48                     l4893:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 1402: vscp_omsg.data[ i ] = 0;
  8339  002D48  5008               	movf	vscp_getMatrixInfo@i,w,c
  8340  002D4A  0F88               	addlw	low (_vscp_omsg+5)
  8341  002D4C  6ED9               	movwf	fsr2l,c
  8342  002D4E  6ADA               	clrf	fsr2h,c
  8343  002D50  6ADF               	clrf	indf2,c
  8344                           
  8345                           ; BSR set to: 0
  8346  002D52  2A08               	incf	vscp_getMatrixInfo@i,f,c
  8347                           
  8348                           ; BSR set to: 0
  8349  002D54  0E07               	movlw	7
  8350  002D56  6408               	cpfsgt	vscp_getMatrixInfo@i,c
  8351  002D58  D7F7               	goto	l4893
  8352  002D5A  0C07               	retlw	7
  8353  002D5C                     __end_of_vscp_getMatrixInfo:
  8354                           	opt stack 0
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           intcon	equ	0xFF2
  8362                           postinc0	equ	0xFEE
  8363                           wreg	equ	0xFE8
  8364                           indf1	equ	0xFE7
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           plusw2	equ	0xFDB
  8371                           fsr2h	equ	0xFDA
  8372                           fsr2l	equ	0xFD9
  8373                           status	equ	0xFD8
  8374                           
  8375 ;; *************** function _vscp_goBootloaderMode *****************
  8376 ;; Defined at:
  8377 ;;		line 1378 in file "../main.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  algorithm       1    wreg     unsigned char 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  algorithm       1   10[COMRAM] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;		None               void
  8384 ;; Registers used:
  8385 ;;		wreg, status,2, status,0, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : F/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8394 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8395 ;;Total ram usage:        1 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    3
  8398 ;; This function calls:
  8399 ;;		_writeEEPROM
  8400 ;; This function is called by:
  8401 ;;		_vscp_handleProtocolEvent
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text46
  8406  002E10                     __ptext46:
  8407                           	opt stack 0
  8408  002E10                     _vscp_goBootloaderMode:
  8409                           	opt stack 26
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;incstack = 0
  8413                           ;incstack = 0
  8414                           ;vscp_goBootloaderMode@algorithm stored from wreg
  8415  002E10  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;main.c: 1379: if ( 0x01 != algorithm ) return;
  8419  002E14  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
  8420  002E16  A4D8               	btfss	status,2,c
  8421  002E18  0012               	return	
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;main.c: 1383: writeEEPROM(0x00, 0xff);
  8425  002E1A  6A09               	clrf	?_writeEEPROM+1,c
  8426  002E1C  6A08               	clrf	?_writeEEPROM,c
  8427  002E1E  0EFF               	movlw	255
  8428  002E20  680A               	setf	?_writeEEPROM+2,c
  8429  002E22  EC59  F016         	call	_writeEEPROM	;wreg free
  8430  002E26  00FF               	reset		;# 
  8431  002E28  0012               	return	
  8432  002E2A                     __end_of_vscp_goBootloaderMode:
  8433                           	opt stack 0
  8434                           tblptru	equ	0xFF8
  8435                           tblptrh	equ	0xFF7
  8436                           tblptrl	equ	0xFF6
  8437                           tablat	equ	0xFF5
  8438                           prodh	equ	0xFF4
  8439                           prodl	equ	0xFF3
  8440                           intcon	equ	0xFF2
  8441                           postinc0	equ	0xFEE
  8442                           wreg	equ	0xFE8
  8443                           indf1	equ	0xFE7
  8444                           fsr1h	equ	0xFE2
  8445                           fsr1l	equ	0xFE1
  8446                           indf2	equ	0xFDF
  8447                           postinc2	equ	0xFDE
  8448                           postdec2	equ	0xFDD
  8449                           plusw2	equ	0xFDB
  8450                           fsr2h	equ	0xFDA
  8451                           fsr2l	equ	0xFD9
  8452                           status	equ	0xFD8
  8453                           
  8454 ;; *************** function _vscp_handleProbeState *****************
  8455 ;; Defined at:
  8456 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;		None
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;		None
  8461 ;; Return value:  Size  Location     Type
  8462 ;;		None               void
  8463 ;; Registers used:
  8464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8465 ;; Tracked objects:
  8466 ;;		On entry : 0/0
  8467 ;;		On exit  : F/0
  8468 ;;		Unchanged: 0/0
  8469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8474 ;;Total ram usage:        0 bytes
  8475 ;; Hardware stack levels used:    1
  8476 ;; Hardware stack levels required when called:    8
  8477 ;; This function calls:
  8478 ;;		_vscp_goActiveState
  8479 ;;		_vscp_writeNicknamePermanent
  8480 ;;		_vscp_sendEvent
  8481 ;;		_vscp_setSegmentCRC
  8482 ;; This function is called by:
  8483 ;;		_main
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           	psect	text47
  8488  00255E                     __ptext47:
  8489                           	opt stack 0
  8490  00255E                     _vscp_handleProbeState:
  8491                           	opt stack 22
  8492                           
  8493                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
  8494                           
  8495                           ;incstack = 0
  8496                           ;incstack = 0
  8497  00255E  D053               	goto	l5773
  8498  002560                     l5703:
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
  8502  002560  2857               	incf	_vscp_probe_address,w,c
  8503  002562  E010               	bz	l5719
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
  8507  002564  0E81               	movlw	129
  8508  002566  6F83               	movwf	_vscp_omsg& (0+255),b
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
  8512  002568  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
  8516  00256A  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8517  00256C  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8518                           
  8519                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
  8520  00256E  0E02               	movlw	2
  8521  002570  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
  8525  002572  C057  F088         	movff	_vscp_probe_address,_vscp_omsg+5
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;vscp_firmware.c: 214: vscp_sendEvent();
  8529  002576  EC33  F016         	call	_vscp_sendEvent	;wreg free
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
  8533  00257A  0E01               	movlw	1
  8534  00257C  6F72               	movwf	_vscp_node_substate& (0+255),b
  8535  00257E                     l5717:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;vscp_firmware.c: 217: vscp_timer = 0;
  8539  00257E  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8540  002580  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8541                           
  8542                           ;vscp_firmware.c: 219: } else {
  8543  002582  D048               	goto	l848
  8544  002584                     l5719:
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
  8548  002584  0E04               	movlw	4
  8549  002586  6F71               	movwf	_vscp_node_state& (0+255),b
  8550                           
  8551                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
  8552  002588  0E81               	movlw	129
  8553  00258A  6F83               	movwf	_vscp_omsg& (0+255),b
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
  8557  00258C  6988               	setf	(_vscp_omsg+5)& (0+255),b
  8558                           
  8559                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
  8560  00258E  0E07               	movlw	7
  8561  002590  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  8562                           
  8563                           ; BSR set to: 0
  8564                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
  8565  002592  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8566  002594  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8567                           
  8568                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
  8569  002596  0E03               	movlw	3
  8570  002598  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;vscp_firmware.c: 232: vscp_sendEvent();
  8574  00259A  EC33  F016         	call	_vscp_sendEvent	;wreg free
  8575  00259E  D03A               	goto	l848
  8576  0025A0                     l849:
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
  8580  0025A0  AF75               	btfss	_vscp_imsg& (0+255),7,b
  8581  0025A2  D00F               	goto	l5743
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
  8585                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
  8586  0025A4  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  8587  0025A6  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  8588  0025A8  E135               	bnz	l848
  8589                           
  8590                           ; BSR set to: 0
  8591  0025AA  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  8592  0025AC  0A03               	xorlw	3
  8593  0025AE  E132               	bnz	l848
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
  8597  0025B0  6657               	tstfsz	_vscp_probe_address,c
  8598  0025B2  D003               	goto	l5737
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
  8602  0025B4  0E02               	movlw	2
  8603  0025B6  6F71               	movwf	_vscp_node_state& (0+255),b
  8604  0025B8  D7E2               	goto	l5717
  8605  0025BA                     l5737:
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;vscp_firmware.c: 256: vscp_probe_address++;
  8609  0025BA  2A57               	incf	_vscp_probe_address,f,c
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
  8613  0025BC  6B72               	clrf	_vscp_node_substate& (0+255),b
  8614  0025BE                     l5741:
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
  8618  0025BE  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8619  0025C0  D029               	goto	l848
  8620  0025C2                     l5743:
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
  8624  0025C2  0EE9               	movlw	233
  8625  0025C4  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  8626  0025C6  0E03               	movlw	3
  8627  0025C8  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  8628  0025CA  E324               	bnc	l848
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
  8632  0025CC  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  8633                           
  8634                           ; BSR set to: 0
  8635                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
  8636  0025CE  0E02               	movlw	2
  8637  0025D0  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  8638  0025D2  D017               	goto	l856
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
  8642  0025D4  6657               	tstfsz	_vscp_probe_address,c
  8643  0025D6  D005               	goto	l857
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;vscp_firmware.c: 274: vscp_probe_address++;
  8647  0025D8  2A57               	incf	_vscp_probe_address,f,c
  8648                           
  8649                           ; BSR set to: 0
  8650                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
  8651  0025DA  6B72               	clrf	_vscp_node_substate& (0+255),b
  8652                           
  8653                           ; BSR set to: 0
  8654                           ;vscp_firmware.c: 276: vscp_timer = 0;
  8655  0025DC  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  8656  0025DE  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  8657  0025E0  D7EE               	goto	l5741
  8658  0025E2                     l857:
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
  8662  0025E2  C057  F070         	movff	_vscp_probe_address,_vscp_nickname
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
  8666  0025E6  0E03               	movlw	3
  8667  0025E8  6F71               	movwf	_vscp_node_state& (0+255),b
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
  8671  0025EA  6B72               	clrf	_vscp_node_substate& (0+255),b
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
  8675  0025EC  5170               	movf	_vscp_nickname& (0+255),w,b
  8676  0025EE  EC71  F017         	call	_vscp_writeNicknamePermanent
  8677                           
  8678                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
  8679  0025F2  0E40               	movlw	64
  8680  0025F4  EC5F  F017         	call	_vscp_setSegmentCRC
  8681                           
  8682                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
  8683  0025F8  0100               	movlb	0	; () banked
  8684  0025FA  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;vscp_firmware.c: 290: vscp_goActiveState();
  8688  0025FC  ECDC  F016         	call	_vscp_goActiveState	;wreg free
  8689  002600  D009               	goto	l848
  8690  002602                     l856:
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
  8694  002602  6B72               	clrf	_vscp_node_substate& (0+255),b
  8695  002604  D007               	goto	l848
  8696  002606                     l5773:
  8697  002606  0100               	movlb	0	; () banked
  8698  002608  5172               	movf	_vscp_node_substate& (0+255),w,b
  8699                           
  8700                           ; Switch size 1, requested type "space"
  8701                           ; Number of cases is 3, Range of values is 0 to 2
  8702                           ; switch strategies available:
  8703                           ; Name         Instructions Cycles
  8704                           ; simple_byte           10     6 (average)
  8705                           ;	Chosen strategy is simple_byte
  8706  00260A  E0AA               	bz	l5703
  8707  00260C  0A01               	xorlw	1	; case 1
  8708  00260E  E0C8               	bz	l849
  8709  002610  0A03               	xorlw	3	; case 2
  8710  002612  E1F7               	bnz	l856
  8711  002614                     l848:
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
  8715  002614  6B75               	clrf	_vscp_imsg& (0+255),b
  8716                           
  8717                           ; BSR set to: 0
  8718  002616  0012               	return	
  8719  002618                     __end_of_vscp_handleProbeState:
  8720                           	opt stack 0
  8721                           tblptru	equ	0xFF8
  8722                           tblptrh	equ	0xFF7
  8723                           tblptrl	equ	0xFF6
  8724                           tablat	equ	0xFF5
  8725                           prodh	equ	0xFF4
  8726                           prodl	equ	0xFF3
  8727                           intcon	equ	0xFF2
  8728                           postinc0	equ	0xFEE
  8729                           wreg	equ	0xFE8
  8730                           indf1	equ	0xFE7
  8731                           fsr1h	equ	0xFE2
  8732                           fsr1l	equ	0xFE1
  8733                           indf2	equ	0xFDF
  8734                           postinc2	equ	0xFDE
  8735                           postdec2	equ	0xFDD
  8736                           plusw2	equ	0xFDB
  8737                           fsr2h	equ	0xFDA
  8738                           fsr2l	equ	0xFD9
  8739                           status	equ	0xFD8
  8740                           
  8741 ;; *************** function _vscp_goActiveState *****************
  8742 ;; Defined at:
  8743 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
  8744 ;; Parameters:    Size  Location     Type
  8745 ;;		None
  8746 ;; Auto vars:     Size  Location     Type
  8747 ;;		None
  8748 ;; Return value:  Size  Location     Type
  8749 ;;		None               void
  8750 ;; Registers used:
  8751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : F/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8761 ;;Total ram usage:        0 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    7
  8764 ;; This function calls:
  8765 ;;		_vscp_sendEvent
  8766 ;; This function is called by:
  8767 ;;		_main
  8768 ;;		_vscp_handleProbeState
  8769 ;; This function uses a non-reentrant model
  8770 ;;
  8771                           
  8772                           	psect	text48
  8773  002DB8                     __ptext48:
  8774                           	opt stack 0
  8775  002DB8                     _vscp_goActiveState:
  8776                           	opt stack 22
  8777                           
  8778                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;incstack = 0
  8782                           ;incstack = 0
  8783  002DB8  0E81               	movlw	129
  8784  002DBA  0100               	movlb	0	; () banked
  8785  002DBC  6F83               	movwf	_vscp_omsg& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
  8789  002DBE  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
  8793  002DC0  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  8794  002DC2  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  8795                           
  8796                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
  8797  002DC4  0E02               	movlw	2
  8798  002DC6  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
  8802  002DC8  C070  F088         	movff	_vscp_nickname,_vscp_omsg+5
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;vscp_firmware.c: 358: vscp_sendEvent();
  8806  002DCC  EC33  F016         	call	_vscp_sendEvent	;wreg free
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
  8810  002DD0  0E01               	movlw	1
  8811  002DD2  6E56               	movwf	_vscp_initledfunc,c
  8812                           
  8813                           ; BSR set to: 0
  8814  002DD4  0C01               	retlw	1
  8815  002DD6                     __end_of_vscp_goActiveState:
  8816                           	opt stack 0
  8817                           tblptru	equ	0xFF8
  8818                           tblptrh	equ	0xFF7
  8819                           tblptrl	equ	0xFF6
  8820                           tablat	equ	0xFF5
  8821                           prodh	equ	0xFF4
  8822                           prodl	equ	0xFF3
  8823                           intcon	equ	0xFF2
  8824                           postinc0	equ	0xFEE
  8825                           wreg	equ	0xFE8
  8826                           indf1	equ	0xFE7
  8827                           fsr1h	equ	0xFE2
  8828                           fsr1l	equ	0xFE1
  8829                           indf2	equ	0xFDF
  8830                           postinc2	equ	0xFDE
  8831                           postdec2	equ	0xFDD
  8832                           plusw2	equ	0xFDB
  8833                           fsr2h	equ	0xFDA
  8834                           fsr2l	equ	0xFD9
  8835                           status	equ	0xFD8
  8836                           
  8837 ;; *************** function _vscp_sendEvent *****************
  8838 ;; Defined at:
  8839 ;;		line 1275 in file "../../vscp_firmware/common/vscp_firmware.c"
  8840 ;; Parameters:    Size  Location     Type
  8841 ;;		None
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  rv              1    0        unsigned char 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  1    wreg      unsigned char 
  8846 ;; Registers used:
  8847 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8848 ;; Tracked objects:
  8849 ;;		On entry : F/0
  8850 ;;		On exit  : F/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8857 ;;Total ram usage:        1 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    6
  8860 ;; This function calls:
  8861 ;;		_sendVSCPFrame
  8862 ;; This function is called by:
  8863 ;;		_vscp_handleProbeState
  8864 ;;		_vscp_goActiveState
  8865 ;;		_vscp_sendHeartBeat
  8866 ;;		_vscp_newNodeOnline
  8867 ;;		_vscp_handleProtocolEvent
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           	psect	text49
  8872  002C66                     __ptext49:
  8873                           	opt stack 0
  8874  002C66                     _vscp_sendEvent:
  8875                           	opt stack 22
  8876                           
  8877                           ; BSR set to: 0
  8878                           
  8879                           ; BSR set to: 0
  8880                           ;incstack = 0
  8881                           ;incstack = 0
  8882  002C66  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  8883  002C6A  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  8884  002C6E  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  8885  002C72  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  8886  002C76  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  8887  002C7A  5183               	movf	_vscp_omsg& (0+255),w,b
  8888  002C7C  0B0F               	andlw	15
  8889  002C7E  6E44               	movwf	?_sendVSCPFrame+5,c
  8890  002C80  0E00               	movlw	high (_vscp_omsg+5)
  8891  002C82  6E46               	movwf	?_sendVSCPFrame+7,c
  8892  002C84  0E88               	movlw	low (_vscp_omsg+5)
  8893  002C86  6E45               	movwf	?_sendVSCPFrame+6,c
  8894  002C88  EF0C  F013         	goto	_sendVSCPFrame	;wreg free
  8895  002C8C                     __end_of_vscp_sendEvent:
  8896                           	opt stack 0
  8897                           tblptru	equ	0xFF8
  8898                           tblptrh	equ	0xFF7
  8899                           tblptrl	equ	0xFF6
  8900                           tablat	equ	0xFF5
  8901                           prodh	equ	0xFF4
  8902                           prodl	equ	0xFF3
  8903                           intcon	equ	0xFF2
  8904                           postinc0	equ	0xFEE
  8905                           wreg	equ	0xFE8
  8906                           indf1	equ	0xFE7
  8907                           fsr1h	equ	0xFE2
  8908                           fsr1l	equ	0xFE1
  8909                           indf2	equ	0xFDF
  8910                           postinc2	equ	0xFDE
  8911                           postdec2	equ	0xFDD
  8912                           plusw2	equ	0xFDB
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function _sendVSCPFrame *****************
  8918 ;; Defined at:
  8919 ;;		line 1453 in file "../main.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  vscpclass       2   62[COMRAM] unsigned short 
  8922 ;;  vscptype        1   64[COMRAM] unsigned char 
  8923 ;;  nodeid          1   65[COMRAM] unsigned char 
  8924 ;;  priority        1   66[COMRAM] unsigned char 
  8925 ;;  size            1   67[COMRAM] unsigned char 
  8926 ;;  pData           2   68[COMRAM] PTR unsigned char 
  8927 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;  id              4   70[COMRAM] unsigned long 
  8930 ;; Return value:  Size  Location     Type
  8931 ;;                  1    wreg      unsigned char 
  8932 ;; Registers used:
  8933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8934 ;; Tracked objects:
  8935 ;;		On entry : F/0
  8936 ;;		On exit  : F/0
  8937 ;;		Unchanged: 0/0
  8938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8939 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8940 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8941 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8942 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8943 ;;Total ram usage:       32 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:    5
  8946 ;; This function calls:
  8947 ;;		_sendCANFrame
  8948 ;; This function is called by:
  8949 ;;		_SendInformationEvent
  8950 ;;		_vscp_sendEvent
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           	psect	text50
  8955  002618                     __ptext50:
  8956                           	opt stack 0
  8957  002618                     _sendVSCPFrame:
  8958                           	opt stack 22
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;main.c: 1454: uint32_t id = ( (uint32_t)priority << 26 ) |
  8962                           ;main.c: 1455: ( (uint32_t)vscpclass << 16 ) |
  8963                           ;main.c: 1456: ( (uint32_t)vscptype << 8 ) |
  8964                           ;main.c: 1457: nodeid;
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;incstack = 0
  8968                           ;incstack = 0
  8969  002618  C041  F090         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  8970  00261C  6B91               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  8971  00261E  6B92               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  8972  002620  6B93               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  8973  002622  C092  F093         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  8974  002626  C091  F092         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  8975  00262A  C090  F091         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  8976  00262E  6B90               	clrf	??_sendVSCPFrame& (0+255),b
  8977  002630  503F               	movf	sendVSCPFrame@vscpclass,w,c
  8978  002632  6F94               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  8979  002634  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  8980  002636  6F95               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  8981  002638  6B96               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  8982  00263A  6B97               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  8983  00263C  C095  F097         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  8984  002640  C094  F096         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  8985  002644  6B95               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  8986  002646  6B94               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  8987  002648  C043  F098         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  8988  00264C  6B99               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  8989  00264E  6B9A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  8990  002650  6B9B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  8991  002652  0E1A               	movlw	26
  8992  002654                     u6725:
  8993  002654  90D8               	bcf	status,0,c
  8994  002656  3798               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  8995  002658  3799               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  8996  00265A  379A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  8997  00265C  379B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  8998  00265E  2EE8               	decfsz	wreg,f,c
  8999  002660  D7F9               	goto	u6725
  9000  002662  5194               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  9001  002664  1198               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  9002  002666  6F9C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  9003  002668  5195               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  9004  00266A  1199               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  9005  00266C  6F9D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  9006  00266E  5196               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  9007  002670  119A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  9008  002672  6F9E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  9009  002674  5197               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  9010  002676  119B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  9011  002678  6F9F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  9012  00267A  5190               	movf	??_sendVSCPFrame& (0+255),w,b
  9013  00267C  119C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  9014  00267E  6FA0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  9015  002680  5191               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  9016  002682  119D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  9017  002684  6FA1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  9018  002686  5192               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  9019  002688  119E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  9020  00268A  6FA2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  9021  00268C  5193               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  9022  00268E  119F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  9023  002690  6FA3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  9024  002692  5042               	movf	sendVSCPFrame@nodeid,w,c
  9025  002694  11A0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  9026  002696  6E47               	movwf	sendVSCPFrame@id,c
  9027  002698  51A1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  9028  00269A  6E48               	movwf	sendVSCPFrame@id+1,c
  9029  00269C  51A2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  9030  00269E  6E49               	movwf	sendVSCPFrame@id+2,c
  9031  0026A0  51A3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  9032  0026A2  6E4A               	movwf	sendVSCPFrame@id+3,c
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;main.c: 1459: if ( !sendCANFrame( id, size, pData ) ) {
  9036  0026A4  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  9037  0026A8  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  9038  0026AC  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  9039  0026B0  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  9040  0026B4  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  9041  0026B8  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  9042  0026BC  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  9043  0026C0  EC5E  F015         	call	_sendCANFrame	;wreg free
  9044  0026C4  0900               	iorlw	0
  9045  0026C6  E101               	bnz	l6415
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;main.c: 1460: return 0;
  9049  0026C8  0C00               	retlw	0
  9050  0026CA                     l6415:
  9051                           
  9052                           ; BSR set to: 0
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;main.c: 1461: }
  9056                           ;main.c: 1463: return 1;
  9057  0026CA  0C01               	retlw	1
  9058  0026CC                     __end_of_sendVSCPFrame:
  9059                           	opt stack 0
  9060                           tblptru	equ	0xFF8
  9061                           tblptrh	equ	0xFF7
  9062                           tblptrl	equ	0xFF6
  9063                           tablat	equ	0xFF5
  9064                           prodh	equ	0xFF4
  9065                           prodl	equ	0xFF3
  9066                           intcon	equ	0xFF2
  9067                           postinc0	equ	0xFEE
  9068                           wreg	equ	0xFE8
  9069                           indf1	equ	0xFE7
  9070                           fsr1h	equ	0xFE2
  9071                           fsr1l	equ	0xFE1
  9072                           indf2	equ	0xFDF
  9073                           postinc2	equ	0xFDE
  9074                           postdec2	equ	0xFDD
  9075                           plusw2	equ	0xFDB
  9076                           fsr2h	equ	0xFDA
  9077                           fsr2l	equ	0xFD9
  9078                           status	equ	0xFD8
  9079                           
  9080 ;; *************** function _sendCANFrame *****************
  9081 ;; Defined at:
  9082 ;;		line 1498 in file "../main.c"
  9083 ;; Parameters:    Size  Location     Type
  9084 ;;  id              4   54[COMRAM] unsigned long 
  9085 ;;  dlc             1   58[COMRAM] unsigned char 
  9086 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  9087 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;  rv              1   61[COMRAM] unsigned char 
  9090 ;; Return value:  Size  Location     Type
  9091 ;;                  1    wreg      unsigned char 
  9092 ;; Registers used:
  9093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9094 ;; Tracked objects:
  9095 ;;		On entry : F/0
  9096 ;;		On exit  : F/0
  9097 ;;		Unchanged: 0/0
  9098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9099 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9102 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9103 ;;Total ram usage:        8 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; Hardware stack levels required when called:    4
  9106 ;; This function calls:
  9107 ;;		_ECANSendMessage
  9108 ;; This function is called by:
  9109 ;;		_sendVSCPFrame
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text51
  9114  002ABC                     __ptext51:
  9115                           	opt stack 0
  9116  002ABC                     _sendCANFrame:
  9117                           	opt stack 22
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;main.c: 1499: uint8_t rv = 0;
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;incstack = 0
  9124                           ;incstack = 0
  9125  002ABC  6A3E               	clrf	sendCANFrame@rv,c
  9126                           
  9127                           ;main.c: 1500: sendTimer = 0;
  9128  002ABE  6A55               	clrf	_sendTimer,c
  9129                           
  9130                           ;main.c: 1502: while ( sendTimer < 1 ) {
  9131  002AC0  D017               	goto	l6513
  9132  002AC2                     l6509:
  9133                           
  9134                           ;main.c: 1503: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  9135  002AC2  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  9136  002AC6  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  9137  002ACA  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  9138  002ACE  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  9139  002AD2  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  9140  002AD6  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  9141  002ADA  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  9142  002ADE  0E20               	movlw	32
  9143  002AE0  6E19               	movwf	?_ECANSendMessage+7,c
  9144  002AE2  EC12  F00E         	call	_ECANSendMessage	;wreg free
  9145  002AE6  0900               	iorlw	0
  9146  002AE8  E003               	bz	l6513
  9147                           
  9148                           ;main.c: 1504: rv = 1;
  9149  002AEA  0E01               	movlw	1
  9150  002AEC  6E3E               	movwf	sendCANFrame@rv,c
  9151                           
  9152                           ;main.c: 1505: break;
  9153  002AEE  D002               	goto	l454
  9154  002AF0                     l6513:
  9155  002AF0  5055               	movf	_sendTimer,w,c
  9156  002AF2  E0E7               	bz	l6509
  9157  002AF4                     l454:
  9158                           
  9159                           ;main.c: 1506: }
  9160                           ;main.c: 1507: }
  9161                           ;main.c: 1509: vscp_omsg.flags = 0;
  9162  002AF4  0100               	movlb	0	; () banked
  9163  002AF6  6B83               	clrf	_vscp_omsg& (0+255),b
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;main.c: 1511: return rv;
  9167  002AF8  503E               	movf	sendCANFrame@rv,w,c
  9168                           
  9169                           ; BSR set to: 0
  9170  002AFA  0012               	return	
  9171  002AFC                     __end_of_sendCANFrame:
  9172                           	opt stack 0
  9173                           tblptru	equ	0xFF8
  9174                           tblptrh	equ	0xFF7
  9175                           tblptrl	equ	0xFF6
  9176                           tablat	equ	0xFF5
  9177                           prodh	equ	0xFF4
  9178                           prodl	equ	0xFF3
  9179                           intcon	equ	0xFF2
  9180                           postinc0	equ	0xFEE
  9181                           wreg	equ	0xFE8
  9182                           indf1	equ	0xFE7
  9183                           fsr1h	equ	0xFE2
  9184                           fsr1l	equ	0xFE1
  9185                           indf2	equ	0xFDF
  9186                           postinc2	equ	0xFDE
  9187                           postdec2	equ	0xFDD
  9188                           plusw2	equ	0xFDB
  9189                           fsr2h	equ	0xFDA
  9190                           fsr2l	equ	0xFD9
  9191                           status	equ	0xFD8
  9192                           
  9193 ;; *************** function _ECANSendMessage *****************
  9194 ;; Defined at:
  9195 ;;		line 617 in file "../ECAN.c"
  9196 ;; Parameters:    Size  Location     Type
  9197 ;;  id              4   17[COMRAM] unsigned long 
  9198 ;;  data            2   21[COMRAM] PTR unsigned char 
  9199 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  9200 ;;  dataLen         1   23[COMRAM] unsigned char 
  9201 ;;  msgFlags        1   24[COMRAM] enum E18958
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  9204 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9205 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9206 ;;		 -> B0CON(1), 
  9207 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  9208 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9209 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9210 ;;		 -> B0CON(1), 
  9211 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  9212 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9213 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9214 ;;		 -> B0CON(1), 
  9215 ;;  i               1   51[COMRAM] unsigned char 
  9216 ;;  temp            1   50[COMRAM] unsigned char 
  9217 ;;  tempBSEL0       1   47[COMRAM] struct .
  9218 ;;  j               1   46[COMRAM] unsigned char 
  9219 ;;  buffers         1   45[COMRAM] unsigned char 
  9220 ;;  mode            1   44[COMRAM] unsigned char 
  9221 ;; Return value:  Size  Location     Type
  9222 ;;                  1    wreg      enum E18242
  9223 ;; Registers used:
  9224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9230 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9231 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9233 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9234 ;;Total ram usage:       37 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    3
  9237 ;; This function calls:
  9238 ;;		__CANIDToRegs
  9239 ;; This function is called by:
  9240 ;;		_sendCANFrame
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text52
  9245  001C24                     __ptext52:
  9246                           	opt stack 0
  9247  001C24                     _ECANSendMessage:
  9248                           	opt stack 22
  9249                           
  9250                           ;ECAN.c: 619: BYTE mode;
  9251                           ;ECAN.c: 620: BYTE buffers;
  9252                           ;ECAN.c: 628: BYTE i,j;
  9253                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  9254                           ;ECAN.c: 630: BYTE* pb[9];
  9255                           ;ECAN.c: 631: BYTE temp;
  9256                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  9257                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  9258                           
  9259                           ; BSR set to: 0
  9260                           ;incstack = 0
  9261                           ;incstack = 0
  9262  001C24  0E0F               	movlw	15	;volatile
  9263  001C26  6E1C               	movwf	ECANSendMessage@pb+1,c
  9264  001C28  0E20               	movlw	32	;volatile
  9265  001C2A  6E1B               	movwf	ECANSendMessage@pb,c
  9266                           
  9267                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  9268  001C2C  0E0F               	movlw	15	;volatile
  9269  001C2E  6E1E               	movwf	ECANSendMessage@pb+3,c
  9270  001C30  0E10               	movlw	16	;volatile
  9271  001C32  6E1D               	movwf	ECANSendMessage@pb+2,c
  9272                           
  9273                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  9274  001C34  0E0F               	movlw	15	;volatile
  9275  001C36  6E20               	movwf	ECANSendMessage@pb+5,c
  9276  001C38  6A1F               	clrf	ECANSendMessage@pb+4,c
  9277                           
  9278                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  9279  001C3A  010E               	movlb	14	; () banked
  9280  001C3C  0E0E               	movlw	14	;volatile
  9281  001C3E  6E22               	movwf	ECANSendMessage@pb+7,c
  9282  001C40  0E80               	movlw	128	;volatile
  9283  001C42  6E21               	movwf	ECANSendMessage@pb+6,c
  9284                           
  9285                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  9286  001C44  0E0E               	movlw	14	;volatile
  9287  001C46  6E24               	movwf	ECANSendMessage@pb+9,c
  9288  001C48  0E90               	movlw	144	;volatile
  9289  001C4A  6E23               	movwf	ECANSendMessage@pb+8,c
  9290                           
  9291                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  9292  001C4C  0E0E               	movlw	14	;volatile
  9293  001C4E  6E26               	movwf	ECANSendMessage@pb+11,c
  9294  001C50  0EA0               	movlw	160	;volatile
  9295  001C52  6E25               	movwf	ECANSendMessage@pb+10,c
  9296                           
  9297                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  9298  001C54  0E0E               	movlw	14	;volatile
  9299  001C56  6E28               	movwf	ECANSendMessage@pb+13,c
  9300  001C58  0EB0               	movlw	176	;volatile
  9301  001C5A  6E27               	movwf	ECANSendMessage@pb+12,c
  9302                           
  9303                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  9304  001C5C  0E0E               	movlw	14	;volatile
  9305  001C5E  6E2A               	movwf	ECANSendMessage@pb+15,c
  9306  001C60  0EC0               	movlw	192	;volatile
  9307  001C62  6E29               	movwf	ECANSendMessage@pb+14,c
  9308                           
  9309                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  9310  001C64  0E0E               	movlw	14	;volatile
  9311  001C66  6E2C               	movwf	ECANSendMessage@pb+17,c
  9312  001C68  0ED0               	movlw	208	;volatile
  9313  001C6A  6E2B               	movwf	ECANSendMessage@pb+16,c
  9314                           
  9315                           ; BSR set to: 14
  9316                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  9317  001C6C  5072               	movf	3954,w,c	;volatile
  9318  001C6E  0BC0               	andlw	192
  9319  001C70  6E2D               	movwf	ECANSendMessage@mode,c
  9320                           
  9321                           ; BSR set to: 14
  9322                           ;ECAN.c: 660: if ( mode == 0x00 )
  9323  001C72  662D               	tstfsz	ECANSendMessage@mode,c
  9324  001C74  D002               	goto	l6527
  9325                           
  9326                           ; BSR set to: 14
  9327                           ;ECAN.c: 661: buffers = 2;
  9328  001C76  0E02               	movlw	2
  9329  001C78  D001               	goto	L26
  9330  001C7A                     l6527:
  9331                           
  9332                           ; BSR set to: 14
  9333                           ;ECAN.c: 662: else
  9334                           ;ECAN.c: 663: buffers = 8;
  9335  001C7A  0E08               	movlw	8
  9336  001C7C                     L26:
  9337  001C7C  6E2E               	movwf	ECANSendMessage@buffers,c
  9338                           
  9339                           ; BSR set to: 14
  9340                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  9341  001C7E  90D8               	bcf	status,0,c
  9342  001C80  317D               	rrcf	125,w,b	;volatile
  9343  001C82  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  9344                           
  9345                           ; BSR set to: 14
  9346                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  9347  001C84  6A34               	clrf	ECANSendMessage@i,c
  9348  001C86  D07C               	goto	l6587
  9349  001C88                     l6533:
  9350                           
  9351                           ;ECAN.c: 688: {
  9352                           ;ECAN.c: 693: ptr = pb[i];
  9353  001C88  5034               	movf	ECANSendMessage@i,w,c
  9354  001C8A  0D02               	mullw	2
  9355  001C8C  50F3               	movf	prodl,w,c
  9356  001C8E  0F1B               	addlw	low ECANSendMessage@pb
  9357  001C90  6ED9               	movwf	fsr2l,c
  9358  001C92  6ADA               	clrf	fsr2h,c
  9359  001C94  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  9360  001C98  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  9361                           
  9362                           ;ECAN.c: 694: tempPtr = ptr;
  9363  001C9C  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  9364  001CA0  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  9365                           
  9366                           ;ECAN.c: 702: if ( i > 2 )
  9367  001CA4  0E02               	movlw	2
  9368  001CA6  6434               	cpfsgt	ECANSendMessage@i,c
  9369  001CA8  D004               	goto	l6545
  9370                           
  9371                           ;ECAN.c: 703: {
  9372                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  9373  001CAA  90D8               	bcf	status,0,c
  9374  001CAC  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  9375                           
  9376                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  9377  001CAE  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  9378  001CB0  D066               	goto	l6585
  9379  001CB2                     l6545:
  9380                           
  9381                           ;ECAN.c: 714: }
  9382                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  9383  001CB2  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9384  001CB6  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9385  001CBA  50DF               	movf	indf2,w,c
  9386  001CBC  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9387  001CBE  B61A               	btfsc	??_ECANSendMessage,3,c
  9388  001CC0  D05E               	goto	l6585
  9389                           
  9390                           ;ECAN.c: 721: {
  9391                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  9392  001CC2  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9393  001CC6  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9394  001CCA  0EFC               	movlw	252
  9395  001CCC  16DF               	andwf	indf2,f,c
  9396                           
  9397                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  9398  001CCE  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  9399  001CD2  0E03               	movlw	3
  9400  001CD4  161A               	andwf	??_ECANSendMessage,f,c
  9401  001CD6  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  9402  001CDA  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  9403  001CDE  501A               	movf	??_ECANSendMessage,w,c
  9404  001CE0  12DF               	iorwf	indf2,f,c
  9405                           
  9406                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  9407  001CE2  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  9408  001CE4  D004               	goto	l646
  9409                           
  9410                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  9411  001CE6  5018               	movf	ECANSendMessage@dataLen,w,c
  9412  001CE8  0940               	iorlw	64
  9413  001CEA  6E33               	movwf	ECANSendMessage@temp,c
  9414  001CEC  D002               	goto	l6555
  9415  001CEE                     l646:
  9416                           
  9417                           ;ECAN.c: 729: else
  9418                           ;ECAN.c: 730: temp = dataLen;
  9419  001CEE  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  9420  001CF2                     l6555:
  9421                           
  9422                           ;ECAN.c: 732: *(ptr+5) = temp;
  9423  001CF2  EE20 F005          	lfsr	2,5
  9424  001CF6  5035               	movf	ECANSendMessage@ptr,w,c
  9425  001CF8  26D9               	addwf	fsr2l,f,c
  9426  001CFA  5036               	movf	ECANSendMessage@ptr+1,w,c
  9427  001CFC  22DA               	addwfc	fsr2h,f,c
  9428  001CFE  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  9429                           
  9430                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  9431  001D02  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  9432  001D04  D003               	goto	l648
  9433                           
  9434                           ;ECAN.c: 736: temp = 1;
  9435  001D06  0E01               	movlw	1
  9436  001D08  6E33               	movwf	ECANSendMessage@temp,c
  9437  001D0A  D001               	goto	l6561
  9438  001D0C                     l648:
  9439                           
  9440                           ;ECAN.c: 738: else
  9441                           ;ECAN.c: 739: temp = 0;
  9442  001D0C  6A33               	clrf	ECANSendMessage@temp,c
  9443  001D0E                     l6561:
  9444                           
  9445                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  9446  001D0E  2835               	incf	ECANSendMessage@ptr,w,c
  9447  001D10  6E08               	movwf	?__CANIDToRegs,c
  9448  001D12  0E00               	movlw	0
  9449  001D14  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  9450  001D16  6E09               	movwf	?__CANIDToRegs+1,c
  9451  001D18  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  9452  001D1C  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  9453  001D20  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  9454  001D24  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  9455  001D28  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  9456  001D2C  ECDE  F00F         	call	__CANIDToRegs	;wreg free
  9457                           
  9458                           ;ECAN.c: 745: ptr += 6;
  9459  001D30  0E06               	movlw	6
  9460  001D32  2635               	addwf	ECANSendMessage@ptr,f,c
  9461  001D34  0E00               	movlw	0
  9462  001D36  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  9463                           
  9464                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  9465  001D38  6A2F               	clrf	ECANSendMessage@j,c
  9466  001D3A  D00F               	goto	l6575
  9467  001D3C                     l6567:
  9468                           
  9469                           ;ECAN.c: 748: *ptr++ = *data++;
  9470  001D3C  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  9471  001D40  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  9472  001D44  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  9473  001D48  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  9474  001D4C  CFDF FFE7          	movff	indf2,indf1
  9475  001D50  4A16               	infsnz	ECANSendMessage@data,f,c
  9476  001D52  2A17               	incf	ECANSendMessage@data+1,f,c
  9477  001D54  4A35               	infsnz	ECANSendMessage@ptr,f,c
  9478  001D56  2A36               	incf	ECANSendMessage@ptr+1,f,c
  9479  001D58  2A2F               	incf	ECANSendMessage@j,f,c
  9480  001D5A                     l6575:
  9481  001D5A  5018               	movf	ECANSendMessage@dataLen,w,c
  9482  001D5C  5C2F               	subwf	ECANSendMessage@j,w,c
  9483  001D5E  E3EE               	bnc	l6567
  9484                           
  9485                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  9486  001D60  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9487  001D64  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9488  001D68  50DF               	movf	indf2,w,c
  9489  001D6A  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  9490  001D6C  B41A               	btfsc	??_ECANSendMessage,2,c
  9491  001D6E  0C01               	retlw	1
  9492                           
  9493                           ;ECAN.c: 753: *tempPtr |= 0x08;
  9494  001D70  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  9495  001D74  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  9496  001D78  0E00               	movlw	0
  9497  001D7A  86DB               	bsf	plusw2,3,c
  9498                           
  9499                           ;ECAN.c: 755: return TRUE;
  9500  001D7C  0C01               	retlw	1
  9501  001D7E                     l6585:
  9502  001D7E  2A34               	incf	ECANSendMessage@i,f,c
  9503  001D80                     l6587:
  9504  001D80  502E               	movf	ECANSendMessage@buffers,w,c
  9505  001D82  5C34               	subwf	ECANSendMessage@i,w,c
  9506  001D84  E381               	bnc	l6533
  9507                           
  9508                           ;ECAN.c: 756: }
  9509                           ;ECAN.c: 757: }
  9510                           ;ECAN.c: 760: return FALSE;
  9511  001D86  0C00               	retlw	0
  9512  001D88                     __end_of_ECANSendMessage:
  9513                           	opt stack 0
  9514                           tblptru	equ	0xFF8
  9515                           tblptrh	equ	0xFF7
  9516                           tblptrl	equ	0xFF6
  9517                           tablat	equ	0xFF5
  9518                           prodh	equ	0xFF4
  9519                           prodl	equ	0xFF3
  9520                           intcon	equ	0xFF2
  9521                           postinc0	equ	0xFEE
  9522                           wreg	equ	0xFE8
  9523                           indf1	equ	0xFE7
  9524                           fsr1h	equ	0xFE2
  9525                           fsr1l	equ	0xFE1
  9526                           indf2	equ	0xFDF
  9527                           postinc2	equ	0xFDE
  9528                           postdec2	equ	0xFDD
  9529                           plusw2	equ	0xFDB
  9530                           fsr2h	equ	0xFDA
  9531                           fsr2l	equ	0xFD9
  9532                           status	equ	0xFD8
  9533                           
  9534 ;; *************** function __CANIDToRegs *****************
  9535 ;; Defined at:
  9536 ;;		line 1099 in file "../ECAN.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9539 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  9540 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  9541 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  9542 ;;  val             4    9[COMRAM] unsigned long 
  9543 ;;  type            1   13[COMRAM] unsigned char 
  9544 ;; Auto vars:     Size  Location     Type
  9545 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  9546 ;;		 -> _CANIDToRegs@val(4), 
  9547 ;; Return value:  Size  Location     Type
  9548 ;;		None               void
  9549 ;; Registers used:
  9550 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9551 ;; Tracked objects:
  9552 ;;		On entry : 0/E
  9553 ;;		On exit  : 0/0
  9554 ;;		Unchanged: 0/0
  9555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9556 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9558 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9559 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9560 ;;Total ram usage:       10 bytes
  9561 ;; Hardware stack levels used:    1
  9562 ;; Hardware stack levels required when called:    2
  9563 ;; This function calls:
  9564 ;;		Nothing
  9565 ;; This function is called by:
  9566 ;;		_ECANSendMessage
  9567 ;; This function uses a non-reentrant model
  9568 ;;
  9569                           
  9570                           	psect	text53
  9571  001FBC                     __ptext53:
  9572                           	opt stack 0
  9573  001FBC                     __CANIDToRegs:
  9574                           	opt stack 22
  9575                           
  9576                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  9577                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  9578                           
  9579                           ;incstack = 0
  9580                           ;incstack = 0
  9581  001FBC  0E0A               	movlw	low __CANIDToRegs@val
  9582  001FBE  6E11               	movwf	__CANIDToRegs@Value,c
  9583                           
  9584                           ;ECAN.c: 1104: if ( type == 0 )
  9585  001FC0  660E               	tstfsz	__CANIDToRegs@type,c
  9586  001FC2  D022               	goto	l6603
  9587                           
  9588                           ;ECAN.c: 1105: {
  9589                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  9590  001FC4  5011               	movf	__CANIDToRegs@Value,w,c
  9591  001FC6  6ED9               	movwf	fsr2l,c
  9592  001FC8  6ADA               	clrf	fsr2h,c
  9593  001FCA  50DF               	movf	indf2,w,c
  9594  001FCC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9595  001FCE  90D8               	bcf	status,0,c
  9596  001FD0  320F               	rrcf	??__CANIDToRegs,f,c
  9597  001FD2  90D8               	bcf	status,0,c
  9598  001FD4  320F               	rrcf	??__CANIDToRegs,f,c
  9599  001FD6  90D8               	bcf	status,0,c
  9600  001FD8  300F               	rrcf	??__CANIDToRegs,w,c
  9601                           
  9602                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  9603  001FDA  D862               	call	PL14	;call to abstracted procedure
  9604  001FDC  2AD9               	incf	fsr2l,f,c
  9605  001FDE  6ADA               	clrf	fsr2h,c
  9606  001FE0  D872               	call	PL36	;call to abstracted procedure
  9607  001FE2                     u6965:
  9608  001FE2  90D8               	bcf	status,0,c
  9609  001FE4  360F               	rlcf	??__CANIDToRegs,f,c
  9610  001FE6  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9611  001FE8  D7FC               	goto	u6965
  9612  001FEA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9613                           
  9614                           ;ECAN.c: 1109: ptr++;
  9615                           
  9616                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  9617  001FEE  D846               	call	PL4	;call to abstracted procedure
  9618  001FF0  D86A               	call	PL36	;call to abstracted procedure
  9619  001FF2                     u6975:
  9620  001FF2  90D8               	bcf	status,0,c
  9621  001FF4  360F               	rlcf	??__CANIDToRegs,f,c
  9622  001FF6  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9623  001FF8  D7FC               	goto	u6975
  9624  001FFA  500F               	movf	??__CANIDToRegs,w,c
  9625  001FFC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9626  002000  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9627  002004  6EDF               	movwf	indf2,c
  9628                           
  9629                           ;ECAN.c: 1111: }
  9630  002006  0012               	return	
  9631  002008                     l6603:
  9632                           
  9633                           ;ECAN.c: 1112: else
  9634                           ;ECAN.c: 1113: {
  9635                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  9636  002008  5011               	movf	__CANIDToRegs@Value,w,c
  9637  00200A  D842               	call	PL10	;call to abstracted procedure
  9638  00200C  0E05               	movlw	5
  9639  00200E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9640  002010                     u6985:
  9641  002010  90D8               	bcf	status,0,c
  9642  002012  320F               	rrcf	??__CANIDToRegs,f,c
  9643  002014  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  9644  002016  D7FC               	goto	u6985
  9645  002018  500F               	movf	??__CANIDToRegs,w,c
  9646                           
  9647                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  9648  00201A  D842               	call	PL14	;call to abstracted procedure
  9649  00201C  0E03               	movlw	3
  9650  00201E  D849               	call	PL22	;call to abstracted procedure
  9651  002020  360F               	rlcf	??__CANIDToRegs,f,c
  9652  002022  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9653                           
  9654                           ;ECAN.c: 1117: ptr++;
  9655                           
  9656                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  9657  002026  D82A               	call	PL4	;call to abstracted procedure
  9658  002028  0E02               	movlw	2
  9659  00202A  D843               	call	PL22	;call to abstracted procedure
  9660  00202C  340F               	rlcf	??__CANIDToRegs,w,c
  9661  00202E  0BE0               	andlw	224
  9662  002030  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9663  002034  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9664  002038  6EDF               	movwf	indf2,c
  9665                           
  9666                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  9667  00203A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9668  00203E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9669  002042  0E00               	movlw	0
  9670  002044  86DB               	bsf	plusw2,3,c
  9671                           
  9672                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  9673  002046  5011               	movf	__CANIDToRegs@Value,w,c
  9674  002048  D823               	call	PL10	;call to abstracted procedure
  9675  00204A  0E03               	movlw	3
  9676  00204C  160F               	andwf	??__CANIDToRegs,f,c
  9677  00204E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9678                           
  9679                           ;ECAN.c: 1122: ptr++;
  9680                           
  9681                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  9682  002052  D814               	call	PL4	;call to abstracted procedure
  9683  002054  2AD9               	incf	fsr2l,f,c
  9684  002056  6ADA               	clrf	fsr2h,c
  9685  002058  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9686  00205C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9687  002060  CFDF FFE7          	movff	indf2,indf1
  9688                           
  9689                           ;ECAN.c: 1124: ptr++;
  9690  002064  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9691  002066  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9692                           
  9693                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  9694  002068  5011               	movf	__CANIDToRegs@Value,w,c
  9695  00206A  6ED9               	movwf	fsr2l,c
  9696  00206C  6ADA               	clrf	fsr2h,c
  9697  00206E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  9698  002072  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  9699  002076  CFDF FFE7          	movff	indf2,indf1
  9700  00207A  0012               	return	
  9701  00207C                     __end_of__CANIDToRegs:
  9702                           	opt stack 0
  9703  00207C                     PL4:
  9704                           	opt stack 22
  9705  00207C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9706  002080  500F               	movf	??__CANIDToRegs,w,c
  9707  002082  12DF               	iorwf	indf2,f,c
  9708  002084  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  9709  002086  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  9710  002088  5011               	movf	__CANIDToRegs@Value,w,c
  9711  00208A  6ED9               	movwf	fsr2l,c
  9712  00208C  6ADA               	clrf	fsr2h,c
  9713  00208E  0012               	return	
  9714  002090                     __end_ofPL4:
  9715                           	opt stack 0
  9716  002090                     PL10:
  9717                           	opt stack 22
  9718  002090  6ED9               	movwf	fsr2l,c
  9719  002092  6ADA               	clrf	fsr2h,c
  9720  002094  0E02               	movlw	2
  9721  002096  26D9               	addwf	fsr2l,f,c
  9722  002098  6ADA               	clrf	fsr2h,c
  9723  00209A  50DF               	movf	indf2,w,c
  9724  00209C  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9725  00209E  0012               	return	
  9726  0020A0                     __end_ofPL10:
  9727                           	opt stack 0
  9728  0020A0                     PL14:
  9729                           	opt stack 22
  9730  0020A0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  9731  0020A4  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  9732  0020A8  6EDF               	movwf	indf2,c
  9733  0020AA  5011               	movf	__CANIDToRegs@Value,w,c
  9734  0020AC  6ED9               	movwf	fsr2l,c
  9735  0020AE  6ADA               	clrf	fsr2h,c
  9736  0020B0  0012               	return	
  9737  0020B2                     __end_ofPL14:
  9738                           	opt stack 0
  9739  0020B2                     PL22:
  9740                           	opt stack 22
  9741  0020B2  26D9               	addwf	fsr2l,f,c
  9742  0020B4  6ADA               	clrf	fsr2h,c
  9743  0020B6  50DF               	movf	indf2,w,c
  9744  0020B8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9745  0020BA  90D8               	bcf	status,0,c
  9746  0020BC  360F               	rlcf	??__CANIDToRegs,f,c
  9747  0020BE  90D8               	bcf	status,0,c
  9748  0020C0  360F               	rlcf	??__CANIDToRegs,f,c
  9749  0020C2  90D8               	bcf	status,0,c
  9750  0020C4  0012               	return	
  9751  0020C6                     __end_ofPL22:
  9752                           	opt stack 0
  9753  0020C6                     PL36:
  9754                           	opt stack 22
  9755  0020C6  50DF               	movf	indf2,w,c
  9756  0020C8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  9757  0020CA  0E05               	movlw	5
  9758  0020CC  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  9759  0020CE  0C05               	retlw	5
  9760  0020D0                     __end_ofPL36:
  9761                           	opt stack 0
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodh	equ	0xFF4
  9767                           prodl	equ	0xFF3
  9768                           intcon	equ	0xFF2
  9769                           postinc0	equ	0xFEE
  9770                           wreg	equ	0xFE8
  9771                           indf1	equ	0xFE7
  9772                           fsr1h	equ	0xFE2
  9773                           fsr1l	equ	0xFE1
  9774                           indf2	equ	0xFDF
  9775                           postinc2	equ	0xFDE
  9776                           postdec2	equ	0xFDD
  9777                           plusw2	equ	0xFDB
  9778                           fsr2h	equ	0xFDA
  9779                           fsr2l	equ	0xFD9
  9780                           status	equ	0xFD8
  9781                           
  9782 ;; *************** function _vscp_getEvent *****************
  9783 ;; Defined at:
  9784 ;;		line 1295 in file "../../vscp_firmware/common/vscp_firmware.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;  rv              1   43[COMRAM] unsigned char 
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      unsigned char 
  9791 ;; Registers used:
  9792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9793 ;; Tracked objects:
  9794 ;;		On entry : F/0
  9795 ;;		On exit  : 0/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9801 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9802 ;;Total ram usage:        1 bytes
  9803 ;; Hardware stack levels used:    1
  9804 ;; Hardware stack levels required when called:    6
  9805 ;; This function calls:
  9806 ;;		_getVSCPFrame
  9807 ;; This function is called by:
  9808 ;;		_main
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text54
  9813  002BC2                     __ptext54:
  9814                           	opt stack 0
  9815  002BC2                     _vscp_getEvent:
  9816                           	opt stack 24
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;vscp_firmware.c: 1296: int8_t rv;
  9820                           ;vscp_firmware.c: 1302: if (vscp_imsg.flags & 0x80) return !0;
  9821                           
  9822                           ;incstack = 0
  9823                           ;incstack = 0
  9824  002BC2  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  9825  002BC4  0012               	return	
  9826                           
  9827                           ; BSR set to: 0
  9828                           ;vscp_firmware.c: 1305: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
  9829                           ;vscp_firmware.c: 1306: &vscp_imsg.vscp_type,
  9830                           ;vscp_firmware.c: 1307: &vscp_imsg.oaddr,
  9831                           ;vscp_firmware.c: 1308: &vscp_imsg.priority,
  9832                           ;vscp_firmware.c: 1309: &vscp_imsg.flags,
  9833                           ;vscp_firmware.c: 1310: vscp_imsg.data))) {
  9834  002BC6  0E79               	movlw	low (_vscp_imsg+4)
  9835  002BC8  6E1E               	movwf	?_getVSCPFrame,c
  9836  002BCA  0E7A               	movlw	low (_vscp_imsg+5)
  9837  002BCC  6E1F               	movwf	?_getVSCPFrame+1,c
  9838  002BCE  0E76               	movlw	low (_vscp_imsg+1)
  9839  002BD0  6E20               	movwf	?_getVSCPFrame+2,c
  9840  002BD2  0E75               	movlw	low _vscp_imsg
  9841  002BD4  6E21               	movwf	?_getVSCPFrame+3,c
  9842  002BD6  0E7B               	movlw	low (_vscp_imsg+6)
  9843  002BD8  6E22               	movwf	?_getVSCPFrame+4,c
  9844  002BDA  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  9845  002BDC  EC8F  F014         	call	_getVSCPFrame
  9846  002BE0  6E2C               	movwf	vscp_getEvent@rv,c
  9847  002BE2  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  9848  002BE4  B4D8               	btfsc	status,2,c
  9849  002BE6  0012               	return	
  9850                           
  9851                           ;vscp_firmware.c: 1312: vscp_imsg.flags |= 0x80;
  9852  002BE8  0100               	movlb	0	; () banked
  9853  002BEA  8F75               	bsf	_vscp_imsg& (0+255),7,b
  9854  002BEC  0012               	return	
  9855  002BEE                     __end_of_vscp_getEvent:
  9856                           	opt stack 0
  9857                           tblptru	equ	0xFF8
  9858                           tblptrh	equ	0xFF7
  9859                           tblptrl	equ	0xFF6
  9860                           tablat	equ	0xFF5
  9861                           prodh	equ	0xFF4
  9862                           prodl	equ	0xFF3
  9863                           intcon	equ	0xFF2
  9864                           postinc0	equ	0xFEE
  9865                           wreg	equ	0xFE8
  9866                           indf1	equ	0xFE7
  9867                           fsr1h	equ	0xFE2
  9868                           fsr1l	equ	0xFE1
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           plusw2	equ	0xFDB
  9873                           fsr2h	equ	0xFDA
  9874                           fsr2l	equ	0xFD9
  9875                           status	equ	0xFD8
  9876                           
  9877 ;; *************** function _getVSCPFrame *****************
  9878 ;; Defined at:
  9879 ;;		line 1477 in file "../main.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;  pvscpclass      1    wreg     PTR unsigned short 
  9882 ;;		 -> vscp_imsg(14), 
  9883 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  9884 ;;		 -> vscp_imsg(14), 
  9885 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  9886 ;;		 -> vscp_imsg(14), 
  9887 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  9888 ;;		 -> vscp_imsg(14), 
  9889 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  9890 ;;		 -> vscp_imsg(14), 
  9891 ;;  pData           1   33[COMRAM] PTR unsigned char 
  9892 ;;		 -> vscp_imsg(14), 
  9893 ;; Auto vars:     Size  Location     Type
  9894 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  9895 ;;		 -> vscp_imsg(14), 
  9896 ;;  id              4   39[COMRAM] unsigned long 
  9897 ;; Return value:  Size  Location     Type
  9898 ;;                  1    wreg      unsigned char 
  9899 ;; Registers used:
  9900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9901 ;; Tracked objects:
  9902 ;;		On entry : F/0
  9903 ;;		On exit  : 0/0
  9904 ;;		Unchanged: 0/0
  9905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9906 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9907 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9908 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9909 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9910 ;;Total ram usage:       14 bytes
  9911 ;; Hardware stack levels used:    1
  9912 ;; Hardware stack levels required when called:    5
  9913 ;; This function calls:
  9914 ;;		_getCANFrame
  9915 ;; This function is called by:
  9916 ;;		_vscp_getEvent
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           	psect	text55
  9921  00291E                     __ptext55:
  9922                           	opt stack 0
  9923  00291E                     _getVSCPFrame:
  9924                           	opt stack 24
  9925                           
  9926                           ;incstack = 0
  9927                           ;incstack = 0
  9928                           ;getVSCPFrame@pvscpclass stored from wreg
  9929  00291E  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;main.c: 1478: uint32_t id;
  9933                           ;main.c: 1480: if ( !getCANFrame(&id, pSize, pData) ) {
  9934  002922  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  9935  002926  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  9936  00292A  0E28               	movlw	getVSCPFrame@id& (0+255)
  9937  00292C  EC46  F016         	call	_getCANFrame
  9938  002930  0900               	iorlw	0
  9939  002932  E101               	bnz	l4929
  9940                           
  9941                           ;main.c: 1481: return 0;
  9942  002934  0C00               	retlw	0
  9943  002936                     l4929:
  9944                           
  9945                           ;main.c: 1482: }
  9946                           ;main.c: 1484: *pNodeId = id & 0x0ff;
  9947  002936  501F               	movf	getVSCPFrame@pNodeId,w,c
  9948  002938  6ED9               	movwf	fsr2l,c
  9949  00293A  6ADA               	clrf	fsr2h,c
  9950  00293C  C028  FFDF         	movff	getVSCPFrame@id,indf2
  9951                           
  9952                           ;main.c: 1485: *pvscptype = (id >> 8) & 0xff;
  9953  002940  501E               	movf	getVSCPFrame@pvscptype,w,c
  9954  002942  6ED9               	movwf	fsr2l,c
  9955  002944  6ADA               	clrf	fsr2h,c
  9956  002946  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  9957                           
  9958                           ;main.c: 1486: *pvscpclass = (id >> 16) & 0x1ff;
  9959  00294A  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  9960  00294C  6E23               	movwf	??_getVSCPFrame& (0+255),c
  9961  00294E  0E01               	movlw	1
  9962  002950  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  9963  002952  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  9964  002954  5027               	movf	getVSCPFrame@pvscpclass,w,c
  9965  002956  6ED9               	movwf	fsr2l,c
  9966  002958  6ADA               	clrf	fsr2h,c
  9967  00295A  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  9968  00295E  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  9969                           
  9970                           ;main.c: 1487: *pPriority = (uint16_t) (0x07 & (id >> 26));
  9971  002962  5020               	movf	getVSCPFrame@pPriority,w,c
  9972  002964  6ED9               	movwf	fsr2l,c
  9973  002966  6ADA               	clrf	fsr2h,c
  9974  002968  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  9975  00296C  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  9976  002970  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  9977  002974  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  9978  002978  0E1B               	movlw	27
  9979  00297A  D005               	goto	u4380
  9980  00297C                     u4385:
  9981  00297C  90D8               	bcf	status,0,c
  9982  00297E  3226               	rrcf	??_getVSCPFrame+3,f,c
  9983  002980  3225               	rrcf	??_getVSCPFrame+2,f,c
  9984  002982  3224               	rrcf	??_getVSCPFrame+1,f,c
  9985  002984  3223               	rrcf	??_getVSCPFrame,f,c
  9986  002986                     u4380:
  9987  002986  2EE8               	decfsz	wreg,f,c
  9988  002988  D7F9               	goto	u4385
  9989  00298A  5023               	movf	??_getVSCPFrame,w,c
  9990  00298C  0B07               	andlw	7
  9991  00298E  6EDF               	movwf	indf2,c
  9992                           
  9993                           ;main.c: 1489: return 1;
  9994  002990  0C01               	retlw	1
  9995  002992                     __end_of_getVSCPFrame:
  9996                           	opt stack 0
  9997                           tblptru	equ	0xFF8
  9998                           tblptrh	equ	0xFF7
  9999                           tblptrl	equ	0xFF6
 10000                           tablat	equ	0xFF5
 10001                           prodh	equ	0xFF4
 10002                           prodl	equ	0xFF3
 10003                           intcon	equ	0xFF2
 10004                           postinc0	equ	0xFEE
 10005                           wreg	equ	0xFE8
 10006                           indf1	equ	0xFE7
 10007                           fsr1h	equ	0xFE2
 10008                           fsr1l	equ	0xFE1
 10009                           indf2	equ	0xFDF
 10010                           postinc2	equ	0xFDE
 10011                           postdec2	equ	0xFDD
 10012                           plusw2	equ	0xFDB
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function _getCANFrame *****************
 10018 ;; Defined at:
 10019 ;;		line 1519 in file "../main.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  pid             1    wreg     PTR unsigned long 
 10022 ;;		 -> getVSCPFrame@id(4), 
 10023 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 10024 ;;		 -> vscp_imsg(14), 
 10025 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 10026 ;;		 -> vscp_imsg(14), 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;  pid             1   27[COMRAM] PTR unsigned long 
 10029 ;;		 -> getVSCPFrame@id(4), 
 10030 ;;  flags           1   28[COMRAM] enum E19001
 10031 ;; Return value:  Size  Location     Type
 10032 ;;                  1    wreg      unsigned char 
 10033 ;; Registers used:
 10034 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10035 ;; Tracked objects:
 10036 ;;		On entry : F/0
 10037 ;;		On exit  : 0/0
 10038 ;;		Unchanged: 0/0
 10039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10040 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10043 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10044 ;;Total ram usage:        4 bytes
 10045 ;; Hardware stack levels used:    1
 10046 ;; Hardware stack levels required when called:    4
 10047 ;; This function calls:
 10048 ;;		_ECANReceiveMessage
 10049 ;; This function is called by:
 10050 ;;		_getVSCPFrame
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           	psect	text56
 10055  002C8C                     __ptext56:
 10056                           	opt stack 0
 10057  002C8C                     _getCANFrame:
 10058                           	opt stack 24
 10059                           
 10060                           ;incstack = 0
 10061                           ;incstack = 0
 10062                           ;getCANFrame@pid stored from wreg
 10063  002C8C  CFE8 F01C          	movff	wreg,getCANFrame@pid
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;main.c: 1520: ECAN_RX_MSG_FLAGS flags;
 10067                           ;main.c: 1524: if (vscp_imsg.flags & 0x80) return 0;
 10068  002C90  BF75               	btfsc	_vscp_imsg& (0+255),7,b
 10069  002C92                     l4941:
 10070  002C92  0C00               	retlw	0
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;main.c: 1526: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 10074  002C94  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 10075  002C98  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 10076  002C9C  0E1D               	movlw	low getCANFrame@flags
 10077  002C9E  6E11               	movwf	?_ECANReceiveMessage+2,c
 10078  002CA0  501C               	movf	getCANFrame@pid,w,c
 10079  002CA2  EC84  F00B         	call	_ECANReceiveMessage
 10080  002CA6  0900               	iorlw	0
 10081  002CA8  E0F4               	bz	l4941
 10082                           
 10083                           ;main.c: 1529: if (flags & ECAN_RX_RTR_FRAME) return 0;
 10084  002CAA  AC1D               	btfss	getCANFrame@flags,6,c
 10085                           
 10086                           ;main.c: 1532: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 10087  002CAC  AA1D               	btfss	getCANFrame@flags,5,c
 10088  002CAE  0C00               	retlw	0
 10089                           
 10090                           ;main.c: 1534: return 1;
 10091  002CB0  0C01               	retlw	1
 10092  002CB2                     __end_of_getCANFrame:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           postinc0	equ	0xFEE
 10102                           wreg	equ	0xFE8
 10103                           indf1	equ	0xFE7
 10104                           fsr1h	equ	0xFE2
 10105                           fsr1l	equ	0xFE1
 10106                           indf2	equ	0xFDF
 10107                           postinc2	equ	0xFDE
 10108                           postdec2	equ	0xFDD
 10109                           plusw2	equ	0xFDB
 10110                           fsr2h	equ	0xFDA
 10111                           fsr2l	equ	0xFD9
 10112                           status	equ	0xFD8
 10113                           
 10114 ;; *************** function _ECANReceiveMessage *****************
 10115 ;; Defined at:
 10116 ;;		line 803 in file "../ECAN.c"
 10117 ;; Parameters:    Size  Location     Type
 10118 ;;  id              1    wreg     PTR unsigned long 
 10119 ;;		 -> getVSCPFrame@id(4), 
 10120 ;;  data            1   14[COMRAM] PTR unsigned char 
 10121 ;;		 -> vscp_imsg(14), 
 10122 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 10123 ;;		 -> vscp_imsg(14), 
 10124 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
 10125 ;;		 -> getCANFrame@flags(1), 
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;  id              1   19[COMRAM] PTR unsigned long 
 10128 ;;		 -> getVSCPFrame@id(4), 
 10129 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 10130 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10131 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10132 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 10133 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10134 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10135 ;;  temp            1   22[COMRAM] struct .
 10136 ;;  mode            1   21[COMRAM] unsigned char 
 10137 ;;  i               1   20[COMRAM] unsigned char 
 10138 ;; Return value:  Size  Location     Type
 10139 ;;                  1    wreg      enum E18242
 10140 ;; Registers used:
 10141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10142 ;; Tracked objects:
 10143 ;;		On entry : F/0
 10144 ;;		On exit  : 0/0
 10145 ;;		Unchanged: 0/0
 10146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10147 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10148 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10150 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10151 ;;Total ram usage:       11 bytes
 10152 ;; Hardware stack levels used:    1
 10153 ;; Hardware stack levels required when called:    3
 10154 ;; This function calls:
 10155 ;;		__ECANPointBuffer
 10156 ;;		__RegsToCANID
 10157 ;; This function is called by:
 10158 ;;		_getCANFrame
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162                           	psect	text57
 10163  001708                     __ptext57:
 10164                           	opt stack 0
 10165  001708                     _ECANReceiveMessage:
 10166                           	opt stack 24
 10167                           
 10168                           ;incstack = 0
 10169                           ;incstack = 0
 10170                           ;ECANReceiveMessage@id stored from wreg
 10171  001708  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;ECAN.c: 805: BYTE mode;
 10175                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 10176                           ;ECAN.c: 809: char i;
 10177                           ;ECAN.c: 810: BYTE_VAL temp;
 10178                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 10179  00170C  6A54               	clrf	__ECANRxFilterHitInfo,c
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 10183  00170E  5072               	movf	3954,w,c	;volatile
 10184  001710  0BC0               	andlw	192
 10185  001712  6E16               	movwf	ECANReceiveMessage@mode,c
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;ECAN.c: 816: if ( mode == 0x00 )
 10189  001714  6616               	tstfsz	ECANReceiveMessage@mode,c
 10190  001716  D030               	goto	l5077
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;ECAN.c: 822: {
 10194                           ;ECAN.c: 824: if ( RXB0FUL )
 10195  001718  AE60               	btfss	3936,7,c	;volatile
 10196  00171A  D012               	goto	l659
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;ECAN.c: 825: {
 10200                           ;ECAN.c: 827: RXB0IF = 0;
 10201  00171C  9077               	bcf	3959,0,c	;volatile
 10202                           
 10203                           ;ECAN.c: 830: if ( RXB0OVFL )
 10204  00171E  AE71               	btfss	3953,7,c	;volatile
 10205  001720  D006               	goto	l5053
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;ECAN.c: 831: {
 10209                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 10210  001722  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10211  001724  6ED9               	movwf	fsr2l,c
 10212  001726  6ADA               	clrf	fsr2h,c
 10213  001728  0E00               	movlw	0
 10214  00172A  86DB               	bsf	plusw2,3,c
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;ECAN.c: 833: RXB0OVFL = 0;
 10218  00172C  9E71               	bcf	3953,7,c	;volatile
 10219  00172E                     l5053:
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;ECAN.c: 834: }
 10223                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 10224  00172E  A060               	btfss	3936,0,c	;volatile
 10225  001730  D002               	bra	u4555
 10226  001732  8054               	bsf	__ECANRxFilterHitInfo,0,c
 10227  001734  D001               	bra	u4557
 10228  001736                     u4555:
 10229  001736  9054               	bcf	__ECANRxFilterHitInfo,0,c
 10230  001738                     u4557:
 10231                           
 10232                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 10233  001738  0E0F               	movlw	15	;volatile
 10234  00173A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10235  00173C  0E60               	movlw	96	;volatile
 10236  00173E  D01A               	goto	L27
 10237  001740                     l659:
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 10241  001740  010F               	movlb	15	; () banked
 10242  001742  AF30               	btfss	48,7,b	;volatile
 10243  001744  0C00               	retlw	0
 10244                           
 10245                           ; BSR set to: 15
 10246                           ;ECAN.c: 842: {
 10247                           ;ECAN.c: 844: RXB1IF = 0;
 10248  001746  9277               	bcf	3959,1,c	;volatile
 10249                           
 10250                           ;ECAN.c: 847: if ( RXB1OVFL )
 10251  001748  AC71               	btfss	3953,6,c	;volatile
 10252  00174A  D006               	goto	l5063
 10253                           
 10254                           ; BSR set to: 15
 10255                           ;ECAN.c: 848: {
 10256                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 10257  00174C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10258  00174E  6ED9               	movwf	fsr2l,c
 10259  001750  6ADA               	clrf	fsr2h,c
 10260  001752  0E00               	movlw	0
 10261  001754  86DB               	bsf	plusw2,3,c
 10262                           
 10263                           ; BSR set to: 15
 10264                           ;ECAN.c: 850: RXB1OVFL = 0;
 10265  001756  9C71               	bcf	3953,6,c	;volatile
 10266  001758                     l5063:
 10267                           
 10268                           ; BSR set to: 15
 10269                           ;ECAN.c: 851: }
 10270                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 10271  001758  5130               	movf	48,w,b	;volatile
 10272  00175A  0B07               	andlw	7
 10273  00175C  6E54               	movwf	__ECANRxFilterHitInfo,c
 10274                           
 10275                           ; BSR set to: 15
 10276                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 10277  00175E  0E02               	movlw	2
 10278  001760  6054               	cpfslt	__ECANRxFilterHitInfo,c
 10279  001762  D005               	goto	l5069
 10280                           
 10281                           ; BSR set to: 15
 10282                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 10283  001764  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10284  001766  6ED9               	movwf	fsr2l,c
 10285  001768  6ADA               	clrf	fsr2h,c
 10286  00176A  0E00               	movlw	0
 10287  00176C  8EDB               	bsf	plusw2,7,c
 10288  00176E                     l5069:
 10289                           
 10290                           ; BSR set to: 15
 10291                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 10292  00176E  0E0F               	movlw	15	;volatile
 10293  001770  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10294  001772  0E30               	movlw	48	;volatile
 10295  001774                     L27:
 10296  001774  6E18               	movwf	ECANReceiveMessage@ptr,c
 10297                           
 10298                           ;ECAN.c: 860: }
 10299  001776  D05B               	goto	l5131
 10300  001778                     l5077:
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;ECAN.c: 869: else if ( mode == 0x40 )
 10304  001778  5016               	movf	ECANReceiveMessage@mode,w,c
 10305  00177A  0A40               	xorlw	64
 10306  00177C  E13E               	bnz	l669
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;ECAN.c: 875: {
 10310                           ;ECAN.c: 876: if ( RXB0FUL )
 10311  00177E  AE60               	btfss	3936,7,c	;volatile
 10312  001780  D004               	goto	l670
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 10316  001782  0E0F               	movlw	15	;volatile
 10317  001784  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10318  001786  0E60               	movlw	96	;volatile
 10319  001788  D036               	goto	L34
 10320  00178A                     l670:
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 10324  00178A  010F               	movlb	15	; () banked
 10325  00178C  AF30               	btfss	48,7,b	;volatile
 10326  00178E  D004               	goto	l672
 10327                           
 10328                           ; BSR set to: 15
 10329                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 10330  001790  0E0F               	movlw	15	;volatile
 10331  001792  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10332  001794  0E30               	movlw	48	;volatile
 10333  001796  D02F               	goto	L34
 10334  001798                     l672:
 10335                           
 10336                           ; BSR set to: 15
 10337                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 10338  001798  010E               	movlb	14
 10339  00179A  A57D               	btfss	125,2,b	;volatile
 10340  00179C  AF80               	btfss	128,7,b	;volatile
 10341  00179E  D004               	goto	l674
 10342                           
 10343                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 10344  0017A0  0E0E               	movlw	14	;volatile
 10345  0017A2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10346  0017A4  0E80               	movlw	128	;volatile
 10347  0017A6  D027               	goto	L34
 10348  0017A8                     l674:
 10349                           
 10350                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 10351  0017A8  010E               	movlb	14
 10352  0017AA  A77D               	btfss	125,3,b	;volatile
 10353  0017AC  AF90               	btfss	144,7,b	;volatile
 10354  0017AE  D004               	goto	l676
 10355                           
 10356                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 10357  0017B0  0E0E               	movlw	14	;volatile
 10358  0017B2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10359  0017B4  0E90               	movlw	144	;volatile
 10360  0017B6  D01F               	goto	L34
 10361  0017B8                     l676:
 10362                           
 10363                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 10364  0017B8  010E               	movlb	14
 10365  0017BA  A97D               	btfss	125,4,b	;volatile
 10366  0017BC  AFA0               	btfss	160,7,b	;volatile
 10367  0017BE  D004               	goto	l678
 10368                           
 10369                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 10370  0017C0  0E0E               	movlw	14	;volatile
 10371  0017C2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10372  0017C4  0EA0               	movlw	160	;volatile
 10373  0017C6  D017               	goto	L34
 10374  0017C8                     l678:
 10375                           
 10376                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 10377  0017C8  010E               	movlb	14
 10378  0017CA  AB7D               	btfss	125,5,b	;volatile
 10379  0017CC  AFB0               	btfss	176,7,b	;volatile
 10380  0017CE  D004               	goto	l680
 10381                           
 10382                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 10383  0017D0  0E0E               	movlw	14	;volatile
 10384  0017D2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10385  0017D4  0EB0               	movlw	176	;volatile
 10386  0017D6  D00F               	goto	L34
 10387  0017D8                     l680:
 10388                           
 10389                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 10390  0017D8  010E               	movlb	14
 10391  0017DA  AD7D               	btfss	125,6,b	;volatile
 10392  0017DC  AFC0               	btfss	192,7,b	;volatile
 10393  0017DE  D004               	goto	l682
 10394                           
 10395                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 10396  0017E0  0E0E               	movlw	14	;volatile
 10397  0017E2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10398  0017E4  0EC0               	movlw	192	;volatile
 10399  0017E6  D007               	goto	L34
 10400  0017E8                     l682:
 10401                           
 10402                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 10403  0017E8  010E               	movlb	14
 10404  0017EA  AF7D               	btfss	125,7,b	;volatile
 10405  0017EC  AFD0               	btfss	208,7,b	;volatile
 10406  0017EE  0C00               	retlw	0
 10407                           
 10408                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 10409  0017F0  0E0E               	movlw	14	;volatile
 10410  0017F2  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 10411  0017F4  0ED0               	movlw	208	;volatile
 10412  0017F6                     L34:
 10413  0017F6  6E18               	movwf	ECANReceiveMessage@ptr,c
 10414  0017F8  D00A               	goto	l5121
 10415  0017FA                     l669:
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;ECAN.c: 910: else
 10419                           ;ECAN.c: 915: {
 10420                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 10421  0017FA  AE71               	btfss	3953,7,c	;volatile
 10422  0017FC  0C00               	retlw	0
 10423                           
 10424                           ; BSR set to: 0
 10425                           ;ECAN.c: 917: {
 10426                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 10427  0017FE  506F               	movf	3951,w,c	;volatile
 10428  001800  0B07               	andlw	7
 10429  001802  EC50  F014         	call	__ECANPointBuffer
 10430  001806  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 10431  00180A  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 10432  00180E                     l5121:
 10433                           
 10434                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 10435  00180E  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10436  001812  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10437  001816  50DF               	movf	indf2,w,c
 10438  001818  0B1F               	andlw	31
 10439  00181A  6E54               	movwf	__ECANRxFilterHitInfo,c
 10440                           
 10441                           ;ECAN.c: 932: RXB1IF = 0;
 10442  00181C  9277               	bcf	3959,1,c	;volatile
 10443                           
 10444                           ;ECAN.c: 934: if ( RXB1OVFL )
 10445  00181E  AC71               	btfss	3953,6,c	;volatile
 10446  001820  D006               	goto	l5131
 10447                           
 10448                           ;ECAN.c: 935: {
 10449                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 10450  001822  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10451  001824  6ED9               	movwf	fsr2l,c
 10452  001826  6ADA               	clrf	fsr2h,c
 10453  001828  0E00               	movlw	0
 10454  00182A  86DB               	bsf	plusw2,3,c
 10455                           
 10456                           ;ECAN.c: 937: RXB1OVFL = 0;
 10457  00182C  9C71               	bcf	3953,6,c	;volatile
 10458  00182E                     l5131:
 10459                           
 10460                           ;ECAN.c: 942: savedPtr = ptr;
 10461  00182E  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 10462  001832  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 10463                           
 10464                           ;ECAN.c: 943: *msgFlags = 0;
 10465  001836  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10466  001838  6ED9               	movwf	fsr2l,c
 10467  00183A  6ADA               	clrf	fsr2h,c
 10468  00183C  6ADF               	clrf	indf2,c
 10469                           
 10470                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 10471  00183E  EE20 F005          	lfsr	2,5
 10472  001842  D854               	call	PL34	;call to abstracted procedure
 10473                           
 10474                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 10475  001844  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10476  001846  6ED9               	movwf	fsr2l,c
 10477  001848  6ADA               	clrf	fsr2h,c
 10478  00184A  5017               	movf	ECANReceiveMessage@temp,w,c
 10479  00184C  0B0F               	andlw	15
 10480  00184E  6EDF               	movwf	indf2,c
 10481                           
 10482                           ;ECAN.c: 950: if ( temp.bits.b6 )
 10483  001850  AC17               	btfss	ECANReceiveMessage@temp,6,c
 10484  001852  D005               	goto	l690
 10485                           
 10486                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 10487  001854  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10488  001856  6ED9               	movwf	fsr2l,c
 10489  001858  6ADA               	clrf	fsr2h,c
 10490  00185A  0E00               	movlw	0
 10491  00185C  8CDB               	bsf	plusw2,6,c
 10492  00185E                     l690:
 10493                           
 10494                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 10495  00185E  EE20 F002          	lfsr	2,2
 10496  001862  D844               	call	PL34	;call to abstracted procedure
 10497                           
 10498                           ;ECAN.c: 955: if ( temp.bits.b3 )
 10499  001864  A617               	btfss	ECANReceiveMessage@temp,3,c
 10500  001866  D008               	goto	l691
 10501                           
 10502                           ;ECAN.c: 956: {
 10503                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 10504  001868  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10505  00186A  6ED9               	movwf	fsr2l,c
 10506  00186C  6ADA               	clrf	fsr2h,c
 10507  00186E  0E00               	movlw	0
 10508  001870  8ADB               	bsf	plusw2,5,c
 10509                           
 10510                           ;ECAN.c: 958: temp.Val = 1;
 10511  001872  0E01               	movlw	1
 10512  001874  6E17               	movwf	ECANReceiveMessage@temp,c
 10513                           
 10514                           ;ECAN.c: 959: }
 10515  001876  D001               	goto	l5149
 10516  001878                     l691:
 10517                           
 10518                           ;ECAN.c: 960: else
 10519                           ;ECAN.c: 961: temp.Val = 0;
 10520  001878  6A17               	clrf	ECANReceiveMessage@temp,c
 10521  00187A                     l5149:
 10522                           
 10523                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 10524  00187A  2818               	incf	ECANReceiveMessage@ptr,w,c
 10525  00187C  6E08               	movwf	?__RegsToCANID,c
 10526  00187E  0E00               	movlw	0
 10527  001880  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 10528  001882  6E09               	movwf	?__RegsToCANID+1,c
 10529  001884  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 10530  001888  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 10531  00188C  ECC4  F00E         	call	__RegsToCANID	;wreg free
 10532                           
 10533                           ;ECAN.c: 966: ptr += 6;
 10534  001890  0E06               	movlw	6
 10535  001892  2618               	addwf	ECANReceiveMessage@ptr,f,c
 10536  001894  0E00               	movlw	0
 10537  001896  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 10538                           
 10539                           ;ECAN.c: 967: temp.Val = *dataLen;
 10540  001898  5010               	movf	ECANReceiveMessage@dataLen,w,c
 10541  00189A  6ED9               	movwf	fsr2l,c
 10542  00189C  6ADA               	clrf	fsr2h,c
 10543  00189E  50DF               	movf	indf2,w,c
 10544  0018A0  6E17               	movwf	ECANReceiveMessage@temp,c
 10545                           
 10546                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 10547  0018A2  6A15               	clrf	ECANReceiveMessage@i,c
 10548  0018A4  D00D               	goto	l5165
 10549  0018A6                     l5157:
 10550                           
 10551                           ;ECAN.c: 969: *data++ = *ptr++;
 10552  0018A6  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 10553  0018AA  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 10554  0018AE  500F               	movf	ECANReceiveMessage@data,w,c
 10555  0018B0  6EE1               	movwf	fsr1l,c
 10556  0018B2  6AE2               	clrf	fsr1h,c
 10557  0018B4  CFDF FFE7          	movff	indf2,indf1
 10558  0018B8  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 10559  0018BA  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 10560  0018BC  2A0F               	incf	ECANReceiveMessage@data,f,c
 10561  0018BE  2A15               	incf	ECANReceiveMessage@i,f,c
 10562  0018C0                     l5165:
 10563  0018C0  5017               	movf	ECANReceiveMessage@temp,w,c
 10564  0018C2  5C15               	subwf	ECANReceiveMessage@i,w,c
 10565  0018C4  E3F0               	bnc	l5157
 10566                           
 10567                           ;ECAN.c: 972: if ( IRXIF )
 10568  0018C6  AE77               	btfss	3959,7,c	;volatile
 10569  0018C8  D006               	goto	l5171
 10570                           
 10571                           ;ECAN.c: 973: {
 10572                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 10573  0018CA  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 10574  0018CC  6ED9               	movwf	fsr2l,c
 10575  0018CE  6ADA               	clrf	fsr2h,c
 10576  0018D0  0E00               	movlw	0
 10577  0018D2  88DB               	bsf	plusw2,4,c
 10578                           
 10579                           ;ECAN.c: 975: IRXIF = 0;
 10580  0018D4  9E77               	bcf	3959,7,c	;volatile
 10581  0018D6                     l5171:
 10582                           
 10583                           ;ECAN.c: 976: }
 10584                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 10585  0018D6  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 10586  0018DA  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 10587  0018DE  0E7F               	movlw	127
 10588  0018E0  16DF               	andwf	indf2,f,c
 10589                           
 10590                           ;ECAN.c: 983: if ( mode == 0x80 )
 10591  0018E2  5016               	movf	ECANReceiveMessage@mode,w,c
 10592  0018E4  0A80               	xorlw	128
 10593  0018E6  B4D8               	btfsc	status,2,c
 10594                           
 10595                           ;ECAN.c: 984: FIFOEMPTY = 0;
 10596  0018E8  9E71               	bcf	3953,7,c	;volatile
 10597                           
 10598                           ;ECAN.c: 990: return TRUE;
 10599  0018EA  0C01               	retlw	1
 10600  0018EC                     __end_of_ECANReceiveMessage:
 10601                           	opt stack 0
 10602  0018EC                     PL34:
 10603                           	opt stack 24
 10604  0018EC  5018               	movf	ECANReceiveMessage@ptr,w,c
 10605  0018EE  26D9               	addwf	fsr2l,f,c
 10606  0018F0  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 10607  0018F2  22DA               	addwfc	fsr2h,f,c
 10608  0018F4  50DF               	movf	indf2,w,c
 10609  0018F6  6E17               	movwf	ECANReceiveMessage@temp,c
 10610  0018F8  0012               	return	
 10611  0018FA                     __end_ofPL34:
 10612                           	opt stack 0
 10613                           tblptru	equ	0xFF8
 10614                           tblptrh	equ	0xFF7
 10615                           tblptrl	equ	0xFF6
 10616                           tablat	equ	0xFF5
 10617                           prodh	equ	0xFF4
 10618                           prodl	equ	0xFF3
 10619                           intcon	equ	0xFF2
 10620                           postinc0	equ	0xFEE
 10621                           wreg	equ	0xFE8
 10622                           indf1	equ	0xFE7
 10623                           fsr1h	equ	0xFE2
 10624                           fsr1l	equ	0xFE1
 10625                           indf2	equ	0xFDF
 10626                           postinc2	equ	0xFDE
 10627                           postdec2	equ	0xFDD
 10628                           plusw2	equ	0xFDB
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function __RegsToCANID *****************
 10634 ;; Defined at:
 10635 ;;		line 1156 in file "../ECAN.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 10638 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10639 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10640 ;;  val             1    9[COMRAM] PTR unsigned long 
 10641 ;;		 -> getVSCPFrame@id(4), 
 10642 ;;  type            1   10[COMRAM] unsigned char 
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 10645 ;;		 -> getVSCPFrame@id(4), 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;		None               void
 10648 ;; Registers used:
 10649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10657 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10658 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10659 ;;Total ram usage:        7 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:    2
 10662 ;; This function calls:
 10663 ;;		Nothing
 10664 ;; This function is called by:
 10665 ;;		_ECANReceiveMessage
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text58
 10670  001D88                     __ptext58:
 10671                           	opt stack 0
 10672  001D88                     __RegsToCANID:
 10673                           	opt stack 24
 10674                           
 10675                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 10676                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 10677                           
 10678                           ;incstack = 0
 10679                           ;incstack = 0
 10680  001D88  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 10681                           
 10682                           ;ECAN.c: 1161: if ( type == 0 )
 10683  001D8C  660B               	tstfsz	__RegsToCANID@type,c
 10684  001D8E  D02B               	goto	l5245
 10685                           
 10686                           ;ECAN.c: 1162: {
 10687                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 10688  001D90  500E               	movf	__RegsToCANID@Value,w,c
 10689  001D92  6ED9               	movwf	fsr2l,c
 10690  001D94  D862               	call	PL18	;call to abstracted procedure
 10691  001D96  360C               	rlcf	??__RegsToCANID,f,c
 10692  001D98  90D8               	bcf	status,0,c
 10693  001D9A  360C               	rlcf	??__RegsToCANID,f,c
 10694  001D9C  90D8               	bcf	status,0,c
 10695  001D9E  340C               	rlcf	??__RegsToCANID,w,c
 10696  001DA0  6EDF               	movwf	indf2,c
 10697                           
 10698                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 10699  001DA2  500E               	movf	__RegsToCANID@Value,w,c
 10700  001DA4  6ED9               	movwf	fsr2l,c
 10701  001DA6  6ADA               	clrf	fsr2h,c
 10702  001DA8  2AD9               	incf	fsr2l,f,c
 10703  001DAA  6ADA               	clrf	fsr2h,c
 10704  001DAC  D873               	call	PL28	;call to abstracted procedure
 10705  001DAE                     u4875:
 10706  001DAE  90D8               	bcf	status,0,c
 10707  001DB0  320C               	rrcf	??__RegsToCANID,f,c
 10708  001DB2  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10709  001DB4  D7FC               	goto	u4875
 10710  001DB6  500C               	movf	??__RegsToCANID,w,c
 10711                           
 10712                           ;ECAN.c: 1166: ptr++;
 10713                           
 10714                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 10715  001DB8  D859               	call	PL20	;call to abstracted procedure
 10716  001DBA  0E05               	movlw	5
 10717  001DBC  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10718  001DBE                     u4885:
 10719  001DBE  90D8               	bcf	status,0,c
 10720  001DC0  320C               	rrcf	??__RegsToCANID,f,c
 10721  001DC2  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10722  001DC4  D7FC               	goto	u4885
 10723  001DC6  500E               	movf	__RegsToCANID@Value,w,c
 10724  001DC8  6ED9               	movwf	fsr2l,c
 10725  001DCA  6ADA               	clrf	fsr2h,c
 10726  001DCC  500C               	movf	??__RegsToCANID,w,c
 10727  001DCE  12DF               	iorwf	indf2,f,c
 10728                           
 10729                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 10730  001DD0  D83D               	call	PL8	;call to abstracted procedure
 10731  001DD2  6ADF               	clrf	indf2,c
 10732                           
 10733                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 10734  001DD4  500E               	movf	__RegsToCANID@Value,w,c
 10735  001DD6  6ED9               	movwf	fsr2l,c
 10736  001DD8  6ADA               	clrf	fsr2h,c
 10737  001DDA  0E03               	movlw	3
 10738  001DDC  26D9               	addwf	fsr2l,f,c
 10739  001DDE  6ADA               	clrf	fsr2h,c
 10740  001DE0  0E00               	movlw	0
 10741  001DE2  6EDF               	movwf	indf2,c
 10742                           
 10743                           ;ECAN.c: 1170: }
 10744  001DE4  0C00               	retlw	0
 10745  001DE6                     l5245:
 10746                           
 10747                           ;ECAN.c: 1171: else
 10748                           ;ECAN.c: 1172: {
 10749                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 10750  001DE6  D832               	call	PL8	;call to abstracted procedure
 10751  001DE8  D855               	call	PL28	;call to abstracted procedure
 10752  001DEA                     u4895:
 10753  001DEA  90D8               	bcf	status,0,c
 10754  001DEC  360C               	rlcf	??__RegsToCANID,f,c
 10755  001DEE  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 10756  001DF0  D7FC               	goto	u4895
 10757  001DF2  500C               	movf	??__RegsToCANID,w,c
 10758  001DF4  6EDF               	movwf	indf2,c
 10759                           
 10760                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 10761  001DF6  500E               	movf	__RegsToCANID@Value,w,c
 10762  001DF8  6ED9               	movwf	fsr2l,c
 10763  001DFA  6ADA               	clrf	fsr2h,c
 10764  001DFC  0E03               	movlw	3
 10765  001DFE  26D9               	addwf	fsr2l,f,c
 10766  001E00  D82C               	call	PL18	;call to abstracted procedure
 10767  001E02  320C               	rrcf	??__RegsToCANID,f,c
 10768  001E04  90D8               	bcf	status,0,c
 10769  001E06  320C               	rrcf	??__RegsToCANID,f,c
 10770  001E08  90D8               	bcf	status,0,c
 10771  001E0A  300C               	rrcf	??__RegsToCANID,w,c
 10772                           
 10773                           ;ECAN.c: 1176: ptr++;
 10774                           
 10775                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 10776  001E0C  D82F               	call	PL20	;call to abstracted procedure
 10777  001E0E  0E03               	movlw	3
 10778  001E10  160C               	andwf	??__RegsToCANID,f,c
 10779  001E12  D81C               	call	PL8	;call to abstracted procedure
 10780  001E14  500C               	movf	??__RegsToCANID,w,c
 10781  001E16  12DF               	iorwf	indf2,f,c
 10782                           
 10783                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 10784  001E18  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10785  001E1C  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10786  001E20  50DF               	movf	indf2,w,c
 10787  001E22  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10788  001E24  90D8               	bcf	status,0,c
 10789  001E26  320C               	rrcf	??__RegsToCANID,f,c
 10790  001E28  90D8               	bcf	status,0,c
 10791  001E2A  320C               	rrcf	??__RegsToCANID,f,c
 10792  001E2C  90D8               	bcf	status,0,c
 10793  001E2E  320C               	rrcf	??__RegsToCANID,f,c
 10794  001E30  0E1C               	movlw	28
 10795  001E32  160C               	andwf	??__RegsToCANID,f,c
 10796  001E34  D80B               	call	PL8	;call to abstracted procedure
 10797  001E36  500C               	movf	??__RegsToCANID,w,c
 10798  001E38  12DF               	iorwf	indf2,f,c
 10799                           
 10800                           ;ECAN.c: 1180: ptr++;
 10801                           
 10802                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 10803  001E3A  D822               	call	PL26	;call to abstracted procedure
 10804  001E3C  2AE1               	incf	fsr1l,f,c
 10805  001E3E  6AE2               	clrf	fsr1h,c
 10806  001E40  CFDF FFE7          	movff	indf2,indf1
 10807                           
 10808                           ;ECAN.c: 1182: ptr++;
 10809                           
 10810                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 10811  001E44  D81D               	call	PL26	;call to abstracted procedure
 10812  001E46  CFDF FFE7          	movff	indf2,indf1
 10813  001E4A  0012               	return	
 10814  001E4C                     __end_of__RegsToCANID:
 10815                           	opt stack 0
 10816  001E4C                     PL8:
 10817                           	opt stack 24
 10818  001E4C  500E               	movf	__RegsToCANID@Value,w,c
 10819  001E4E  6ED9               	movwf	fsr2l,c
 10820  001E50  6ADA               	clrf	fsr2h,c
 10821  001E52  0E02               	movlw	2
 10822  001E54  26D9               	addwf	fsr2l,f,c
 10823  001E56  6ADA               	clrf	fsr2h,c
 10824  001E58  0012               	return	
 10825  001E5A                     __end_ofPL8:
 10826                           	opt stack 0
 10827  001E5A                     PL18:
 10828                           	opt stack 24
 10829  001E5A  6ADA               	clrf	fsr2h,c
 10830  001E5C  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10831  001E60  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10832  001E64  50E7               	movf	indf1,w,c
 10833  001E66  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10834  001E68  90D8               	bcf	status,0,c
 10835  001E6A  0012               	return	
 10836  001E6C                     __end_ofPL18:
 10837                           	opt stack 0
 10838  001E6C                     PL20:
 10839                           	opt stack 24
 10840  001E6C  6EDF               	movwf	indf2,c
 10841  001E6E  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10842  001E70  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10843  001E72  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10844  001E76  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10845  001E7A  50DF               	movf	indf2,w,c
 10846  001E7C  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10847  001E7E  0012               	return	
 10848  001E80                     __end_ofPL20:
 10849                           	opt stack 0
 10850  001E80                     PL26:
 10851                           	opt stack 24
 10852  001E80  4A08               	infsnz	__RegsToCANID@ptr,f,c
 10853  001E82  2A09               	incf	__RegsToCANID@ptr+1,f,c
 10854  001E84  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 10855  001E88  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 10856  001E8C  500E               	movf	__RegsToCANID@Value,w,c
 10857  001E8E  6EE1               	movwf	fsr1l,c
 10858  001E90  6AE2               	clrf	fsr1h,c
 10859  001E92  0012               	return	
 10860  001E94                     __end_ofPL26:
 10861                           	opt stack 0
 10862  001E94                     PL28:
 10863                           	opt stack 24
 10864  001E94  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 10865  001E98  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 10866  001E9C  50E7               	movf	indf1,w,c
 10867  001E9E  6E0C               	movwf	??__RegsToCANID& (0+255),c
 10868  001EA0  0E05               	movlw	5
 10869  001EA2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 10870  001EA4  0C05               	retlw	5
 10871  001EA6                     __end_ofPL28:
 10872                           	opt stack 0
 10873                           tblptru	equ	0xFF8
 10874                           tblptrh	equ	0xFF7
 10875                           tblptrl	equ	0xFF6
 10876                           tablat	equ	0xFF5
 10877                           prodh	equ	0xFF4
 10878                           prodl	equ	0xFF3
 10879                           intcon	equ	0xFF2
 10880                           postinc0	equ	0xFEE
 10881                           wreg	equ	0xFE8
 10882                           indf1	equ	0xFE7
 10883                           fsr1h	equ	0xFE2
 10884                           fsr1l	equ	0xFE1
 10885                           indf2	equ	0xFDF
 10886                           postinc2	equ	0xFDE
 10887                           postdec2	equ	0xFDD
 10888                           plusw2	equ	0xFDB
 10889                           fsr2h	equ	0xFDA
 10890                           fsr2l	equ	0xFD9
 10891                           status	equ	0xFD8
 10892                           
 10893 ;; *************** function __ECANPointBuffer *****************
 10894 ;; Defined at:
 10895 ;;		line 1207 in file "../ECAN.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;  b               1    wreg     unsigned char 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  b               1   10[COMRAM] unsigned char 
 10900 ;;  pt              2   11[COMRAM] PTR unsigned char 
 10901 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 10902 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  2    7[COMRAM] PTR unsigned char 
 10905 ;; Registers used:
 10906 ;;		wreg, status,2, status,0
 10907 ;; Tracked objects:
 10908 ;;		On entry : F/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10912 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10913 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10915 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10916 ;;Total ram usage:        6 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    2
 10919 ;; This function calls:
 10920 ;;		Nothing
 10921 ;; This function is called by:
 10922 ;;		_ECANReceiveMessage
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           	psect	text59
 10927  0028A0                     __ptext59:
 10928                           	opt stack 0
 10929  0028A0                     __ECANPointBuffer:
 10930                           	opt stack 24
 10931                           
 10932                           ;incstack = 0
 10933                           ;incstack = 0
 10934                           ;__ECANPointBuffer@b stored from wreg
 10935  0028A0  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;ECAN.c: 1208: BYTE* pt;
 10939                           ;ECAN.c: 1210: switch(b)
 10940  0028A4  D028               	goto	l5231
 10941  0028A6                     l5213:
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 10945  0028A6  0E0F               	movlw	15	;volatile
 10946  0028A8  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10947  0028AA  0E60               	movlw	96	;volatile
 10948  0028AC  D022               	goto	L41
 10949  0028AE                     l5215:
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 10953  0028AE  010F               	movlb	15	; () banked
 10954  0028B0  0E0F               	movlw	15	;volatile
 10955  0028B2  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10956  0028B4  0E30               	movlw	48	;volatile
 10957  0028B6  D01D               	goto	L41
 10958  0028B8                     l5217:
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 10962  0028B8  010E               	movlb	14	; () banked
 10963  0028BA  0E0E               	movlw	14	;volatile
 10964  0028BC  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10965  0028BE  0E80               	movlw	128	;volatile
 10966  0028C0  D018               	goto	L41
 10967  0028C2                     l5219:
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 10971  0028C2  010E               	movlb	14	; () banked
 10972  0028C4  0E0E               	movlw	14	;volatile
 10973  0028C6  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10974  0028C8  0E90               	movlw	144	;volatile
 10975  0028CA  D013               	goto	L41
 10976  0028CC                     l5221:
 10977                           
 10978                           ; BSR set to: 0
 10979                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 10980  0028CC  010E               	movlb	14	; () banked
 10981  0028CE  0E0E               	movlw	14	;volatile
 10982  0028D0  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10983  0028D2  0EA0               	movlw	160	;volatile
 10984  0028D4  D00E               	goto	L41
 10985  0028D6                     l5223:
 10986                           
 10987                           ; BSR set to: 0
 10988                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 10989  0028D6  010E               	movlb	14	; () banked
 10990  0028D8  0E0E               	movlw	14	;volatile
 10991  0028DA  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 10992  0028DC  0EB0               	movlw	176	;volatile
 10993  0028DE  D009               	goto	L41
 10994  0028E0                     l5225:
 10995                           
 10996                           ; BSR set to: 0
 10997                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 10998  0028E0  010E               	movlb	14	; () banked
 10999  0028E2  0E0E               	movlw	14	;volatile
 11000  0028E4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11001  0028E6  0EC0               	movlw	192	;volatile
 11002  0028E8  D004               	goto	L41
 11003  0028EA                     l5227:
 11004                           
 11005                           ; BSR set to: 0
 11006                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 11007  0028EA  010E               	movlb	14	; () banked
 11008  0028EC  0E0E               	movlw	14	;volatile
 11009  0028EE  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 11010  0028F0  0ED0               	movlw	208	;volatile
 11011  0028F2                     L41:
 11012  0028F2  6E0C               	movwf	__ECANPointBuffer@pt,c
 11013                           
 11014                           ;ECAN.c: 1235: break;
 11015  0028F4  D00F               	goto	l718
 11016  0028F6                     l5231:
 11017                           
 11018                           ; BSR set to: 0
 11019  0028F6  500B               	movf	__ECANPointBuffer@b,w,c
 11020                           
 11021                           ; Switch size 1, requested type "space"
 11022                           ; Number of cases is 7, Range of values is 0 to 6
 11023                           ; switch strategies available:
 11024                           ; Name         Instructions Cycles
 11025                           ; simple_byte           22    12 (average)
 11026                           ;	Chosen strategy is simple_byte
 11027  0028F8  E0D6               	bz	l5213
 11028  0028FA  0A01               	xorlw	1	; case 1
 11029  0028FC  E0D8               	bz	l5215
 11030  0028FE  0A03               	xorlw	3	; case 2
 11031  002900  E0DB               	bz	l5217
 11032  002902  0A01               	xorlw	1	; case 3
 11033  002904  E0DE               	bz	l5219
 11034  002906  0A07               	xorlw	7	; case 4
 11035  002908  E0E1               	bz	l5221
 11036  00290A  0A01               	xorlw	1	; case 5
 11037  00290C  E0E4               	bz	l5223
 11038  00290E  0A03               	xorlw	3	; case 6
 11039  002910  E0E7               	bz	l5225
 11040  002912  D7EB               	goto	l5227
 11041  002914                     l718:
 11042                           
 11043                           ;ECAN.c: 1237: return (pt);
 11044  002914  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 11045  002918  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 11046  00291C  0012               	return	
 11047  00291E                     __end_of__ECANPointBuffer:
 11048                           	opt stack 0
 11049                           tblptru	equ	0xFF8
 11050                           tblptrh	equ	0xFF7
 11051                           tblptrl	equ	0xFF6
 11052                           tablat	equ	0xFF5
 11053                           prodh	equ	0xFF4
 11054                           prodl	equ	0xFF3
 11055                           intcon	equ	0xFF2
 11056                           postinc0	equ	0xFEE
 11057                           wreg	equ	0xFE8
 11058                           indf1	equ	0xFE7
 11059                           fsr1h	equ	0xFE2
 11060                           fsr1l	equ	0xFE1
 11061                           indf2	equ	0xFDF
 11062                           postinc2	equ	0xFDE
 11063                           postdec2	equ	0xFDD
 11064                           plusw2	equ	0xFDB
 11065                           fsr2h	equ	0xFDA
 11066                           fsr2l	equ	0xFD9
 11067                           status	equ	0xFD8
 11068                           
 11069 ;; *************** function _vscp_check_pstorage *****************
 11070 ;; Defined at:
 11071 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;		None
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;		None
 11076 ;; Return value:  Size  Location     Type
 11077 ;;                  1    wreg      unsigned char 
 11078 ;; Registers used:
 11079 ;;		wreg, status,2, status,0, cstack
 11080 ;; Tracked objects:
 11081 ;;		On entry : E/E
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11089 ;;Total ram usage:        0 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; Hardware stack levels required when called:    4
 11092 ;; This function calls:
 11093 ;;		_vscp_writeNicknamePermanent
 11094 ;;		_vscp_getSegmentCRC
 11095 ;;		_vscp_setSegmentCRC
 11096 ;;		_vscp_setControlByte
 11097 ;; This function is called by:
 11098 ;;		_main
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text60
 11103  002D5C                     __ptext60:
 11104                           	opt stack 0
 11105  002D5C                     _vscp_check_pstorage:
 11106                           	opt stack 26
 11107                           
 11108                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 11109                           
 11110                           ;incstack = 0
 11111                           ;incstack = 0
 11112  002D5C  ECAE  F017         	call	_vscp_getSegmentCRC	;wreg free
 11113  002D60  0BC0               	andlw	192
 11114  002D62  0A40               	xorlw	64
 11115  002D64  E101               	bnz	l5669
 11116                           
 11117                           ;vscp_firmware.c: 170: return !0;
 11118  002D66  0C01               	retlw	1
 11119  002D68                     l5669:
 11120                           
 11121                           ;vscp_firmware.c: 171: }
 11122                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 11123  002D68  0EFF               	movlw	255
 11124  002D6A  EC71  F017         	call	_vscp_writeNicknamePermanent
 11125                           
 11126                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 11127  002D6E  0E00               	movlw	0
 11128  002D70  EC5F  F017         	call	_vscp_setSegmentCRC
 11129                           
 11130                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 11131  002D74  0EA0               	movlw	160
 11132  002D76  EC56  F017         	call	_vscp_setControlByte
 11133                           
 11134                           ;vscp_firmware.c: 183: return 0;
 11135  002D7A  0C00               	retlw	0
 11136  002D7C                     __end_of_vscp_check_pstorage:
 11137                           	opt stack 0
 11138                           tblptru	equ	0xFF8
 11139                           tblptrh	equ	0xFF7
 11140                           tblptrl	equ	0xFF6
 11141                           tablat	equ	0xFF5
 11142                           prodh	equ	0xFF4
 11143                           prodl	equ	0xFF3
 11144                           intcon	equ	0xFF2
 11145                           postinc0	equ	0xFEE
 11146                           wreg	equ	0xFE8
 11147                           indf1	equ	0xFE7
 11148                           fsr1h	equ	0xFE2
 11149                           fsr1l	equ	0xFE1
 11150                           indf2	equ	0xFDF
 11151                           postinc2	equ	0xFDE
 11152                           postdec2	equ	0xFDD
 11153                           plusw2	equ	0xFDB
 11154                           fsr2h	equ	0xFDA
 11155                           fsr2l	equ	0xFD9
 11156                           status	equ	0xFD8
 11157                           
 11158 ;; *************** function _vscp_setControlByte *****************
 11159 ;; Defined at:
 11160 ;;		line 1337 in file "../main.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;  ctrl            1    wreg     unsigned char 
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;  ctrl            1   10[COMRAM] unsigned char 
 11165 ;; Return value:  Size  Location     Type
 11166 ;;		None               void
 11167 ;; Registers used:
 11168 ;;		wreg, status,2, cstack
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/E
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11177 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11178 ;;Total ram usage:        1 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    3
 11181 ;; This function calls:
 11182 ;;		_writeEEPROM
 11183 ;; This function is called by:
 11184 ;;		_vscp_check_pstorage
 11185 ;; This function uses a non-reentrant model
 11186 ;;
 11187                           
 11188                           	psect	text61
 11189  002EAC                     __ptext61:
 11190                           	opt stack 0
 11191  002EAC                     _vscp_setControlByte:
 11192                           	opt stack 26
 11193                           
 11194                           ;incstack = 0
 11195                           ;incstack = 0
 11196                           ;vscp_setControlByte@ctrl stored from wreg
 11197  002EAC  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 11198                           
 11199                           ;main.c: 1338: writeEEPROM(0x03, ctrl);
 11200  002EB0  6A09               	clrf	?_writeEEPROM+1,c
 11201  002EB2  0E03               	movlw	3
 11202  002EB4  6E08               	movwf	?_writeEEPROM,c
 11203  002EB6  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 11204  002EBA  EF59  F016         	goto	_writeEEPROM	;wreg free
 11205  002EBE                     __end_of_vscp_setControlByte:
 11206                           	opt stack 0
 11207                           tblptru	equ	0xFF8
 11208                           tblptrh	equ	0xFF7
 11209                           tblptrl	equ	0xFF6
 11210                           tablat	equ	0xFF5
 11211                           prodh	equ	0xFF4
 11212                           prodl	equ	0xFF3
 11213                           intcon	equ	0xFF2
 11214                           postinc0	equ	0xFEE
 11215                           wreg	equ	0xFE8
 11216                           indf1	equ	0xFE7
 11217                           fsr1h	equ	0xFE2
 11218                           fsr1l	equ	0xFE1
 11219                           indf2	equ	0xFDF
 11220                           postinc2	equ	0xFDE
 11221                           postdec2	equ	0xFDD
 11222                           plusw2	equ	0xFDB
 11223                           fsr2h	equ	0xFDA
 11224                           fsr2l	equ	0xFD9
 11225                           status	equ	0xFD8
 11226                           
 11227 ;; *************** function _vscp_setSegmentCRC *****************
 11228 ;; Defined at:
 11229 ;;		line 1328 in file "../main.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;  crc             1    wreg     unsigned char 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  crc             1   10[COMRAM] unsigned char 
 11234 ;; Return value:  Size  Location     Type
 11235 ;;		None               void
 11236 ;; Registers used:
 11237 ;;		wreg, status,2, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11246 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11247 ;;Total ram usage:        1 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    3
 11250 ;; This function calls:
 11251 ;;		_writeEEPROM
 11252 ;; This function is called by:
 11253 ;;		_vscp_check_pstorage
 11254 ;;		_vscp_handleProbeState
 11255 ;;		_vscp_handleHeartbeat
 11256 ;;		_vscp_handleSetNickname
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260                           	psect	text62
 11261  002EBE                     __ptext62:
 11262                           	opt stack 0
 11263  002EBE                     _vscp_setSegmentCRC:
 11264                           	opt stack 25
 11265                           
 11266                           ;incstack = 0
 11267                           ;incstack = 0
 11268                           ;vscp_setSegmentCRC@crc stored from wreg
 11269  002EBE  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 11270                           
 11271                           ;main.c: 1329: writeEEPROM( 0x02, crc );
 11272  002EC2  6A09               	clrf	?_writeEEPROM+1,c
 11273  002EC4  0E02               	movlw	2
 11274  002EC6  6E08               	movwf	?_writeEEPROM,c
 11275  002EC8  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 11276  002ECC  EF59  F016         	goto	_writeEEPROM	;wreg free
 11277  002ED0                     __end_of_vscp_setSegmentCRC:
 11278                           	opt stack 0
 11279                           tblptru	equ	0xFF8
 11280                           tblptrh	equ	0xFF7
 11281                           tblptrl	equ	0xFF6
 11282                           tablat	equ	0xFF5
 11283                           prodh	equ	0xFF4
 11284                           prodl	equ	0xFF3
 11285                           intcon	equ	0xFF2
 11286                           postinc0	equ	0xFEE
 11287                           wreg	equ	0xFE8
 11288                           indf1	equ	0xFE7
 11289                           fsr1h	equ	0xFE2
 11290                           fsr1l	equ	0xFE1
 11291                           indf2	equ	0xFDF
 11292                           postinc2	equ	0xFDE
 11293                           postdec2	equ	0xFDD
 11294                           plusw2	equ	0xFDB
 11295                           fsr2h	equ	0xFDA
 11296                           fsr2l	equ	0xFD9
 11297                           status	equ	0xFD8
 11298                           
 11299 ;; *************** function _vscp_getSegmentCRC *****************
 11300 ;; Defined at:
 11301 ;;		line 1319 in file "../main.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;		None
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  1    wreg      unsigned char 
 11308 ;; Registers used:
 11309 ;;		wreg, status,2, cstack
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11319 ;;Total ram usage:        0 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    3
 11322 ;; This function calls:
 11323 ;;		_readEEPROM
 11324 ;; This function is called by:
 11325 ;;		_vscp_check_pstorage
 11326 ;;		_vscp_handleHeartbeat
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text63
 11331  002F5C                     __ptext63:
 11332                           	opt stack 0
 11333  002F5C                     _vscp_getSegmentCRC:
 11334                           	opt stack 25
 11335                           
 11336                           ;main.c: 1320: return readEEPROM( 0x02 );
 11337                           
 11338                           ;incstack = 0
 11339                           ;incstack = 0
 11340  002F5C  6A09               	clrf	?_readEEPROM+1,c
 11341  002F5E  0E02               	movlw	2
 11342  002F60  6E08               	movwf	?_readEEPROM,c
 11343  002F62  EF68  F017         	goto	_readEEPROM	;wreg free
 11344  002F66                     __end_of_vscp_getSegmentCRC:
 11345                           	opt stack 0
 11346                           tblptru	equ	0xFF8
 11347                           tblptrh	equ	0xFF7
 11348                           tblptrl	equ	0xFF6
 11349                           tablat	equ	0xFF5
 11350                           prodh	equ	0xFF4
 11351                           prodl	equ	0xFF3
 11352                           intcon	equ	0xFF2
 11353                           postinc0	equ	0xFEE
 11354                           wreg	equ	0xFE8
 11355                           indf1	equ	0xFE7
 11356                           fsr1h	equ	0xFE2
 11357                           fsr1l	equ	0xFE1
 11358                           indf2	equ	0xFDF
 11359                           postinc2	equ	0xFDE
 11360                           postdec2	equ	0xFDD
 11361                           plusw2	equ	0xFDB
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function _readEEPROM *****************
 11367 ;; Defined at:
 11368 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  address         2    7[COMRAM] unsigned short 
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  data            1    9[COMRAM] unsigned char 
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  1    wreg      unsigned char 
 11375 ;; Registers used:
 11376 ;;		wreg, status,2
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11382 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11383 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11385 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11386 ;;Total ram usage:        3 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    2
 11389 ;; This function calls:
 11390 ;;		Nothing
 11391 ;; This function is called by:
 11392 ;;		_main
 11393 ;;		_vscp_readNicknamePermanent
 11394 ;;		_vscp_getZone
 11395 ;;		_vscp_getSubzone
 11396 ;;		_vscp_readAppReg
 11397 ;;		_vscp_writeAppReg
 11398 ;;		_SendInformationEvent
 11399 ;;		_doDM
 11400 ;;		_actionSet
 11401 ;;		_actionClr
 11402 ;;		_vscp_getGUID
 11403 ;;		_vscp_getUserID
 11404 ;;		_vscp_getManufacturerId
 11405 ;;		_vscp_getSegmentCRC
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           	psect	text64
 11410  002ED0                     __ptext64:
 11411                           	opt stack 0
 11412  002ED0                     _readEEPROM:
 11413                           	opt stack 26
 11414                           
 11415                           ;eeprom.c: 93: uint8_t data;
 11416                           ;eeprom.c: 98: EEADR = address & 0xff;
 11417                           
 11418                           ;incstack = 0
 11419                           ;incstack = 0
 11420  002ED0  C008  FF74         	movff	readEEPROM@address,3956	;volatile
 11421                           
 11422                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 11423  002ED4  9E7F               	bcf	3967,7,c	;volatile
 11424                           
 11425                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 11426  002ED6  9C7F               	bcf	3967,6,c	;volatile
 11427                           
 11428                           ;eeprom.c: 101: EECON1bits.RD = 1;
 11429  002ED8  807F               	bsf	3967,0,c	;volatile
 11430                           
 11431                           ;eeprom.c: 102: data = EEDATA;
 11432  002EDA  CF73 F00A          	movff	3955,readEEPROM@data	;volatile
 11433                           
 11434                           ;eeprom.c: 104: return data;
 11435  002EDE  500A               	movf	readEEPROM@data,w,c
 11436  002EE0  0012               	return	
 11437  002EE2                     __end_of_readEEPROM:
 11438                           	opt stack 0
 11439                           tblptru	equ	0xFF8
 11440                           tblptrh	equ	0xFF7
 11441                           tblptrl	equ	0xFF6
 11442                           tablat	equ	0xFF5
 11443                           prodh	equ	0xFF4
 11444                           prodl	equ	0xFF3
 11445                           intcon	equ	0xFF2
 11446                           postinc0	equ	0xFEE
 11447                           wreg	equ	0xFE8
 11448                           indf1	equ	0xFE7
 11449                           fsr1h	equ	0xFE2
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           
 11459 ;; *************** function _vscp_writeNicknamePermanent *****************
 11460 ;; Defined at:
 11461 ;;		line 545 in file "../main.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;  nickname        1    wreg     unsigned char 
 11464 ;; Auto vars:     Size  Location     Type
 11465 ;;  nickname        1   10[COMRAM] unsigned char 
 11466 ;; Return value:  Size  Location     Type
 11467 ;;		None               void
 11468 ;; Registers used:
 11469 ;;		wreg, status,2, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11479 ;;Total ram usage:        1 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    3
 11482 ;; This function calls:
 11483 ;;		_writeEEPROM
 11484 ;; This function is called by:
 11485 ;;		_vscp_check_pstorage
 11486 ;;		_vscp_handleProbeState
 11487 ;;		_vscp_handleHeartbeat
 11488 ;;		_vscp_handleSetNickname
 11489 ;;		_vscp_handleDropNickname
 11490 ;; This function uses a non-reentrant model
 11491 ;;
 11492                           
 11493                           	psect	text65
 11494  002EE2                     __ptext65:
 11495                           	opt stack 0
 11496  002EE2                     _vscp_writeNicknamePermanent:
 11497                           	opt stack 25
 11498                           
 11499                           ;incstack = 0
 11500                           ;incstack = 0
 11501                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 11502  002EE2  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 11503                           
 11504                           ;main.c: 546: writeEEPROM( 0x01, nickname );
 11505  002EE6  6A09               	clrf	?_writeEEPROM+1,c
 11506  002EE8  0E01               	movlw	1
 11507  002EEA  6E08               	movwf	?_writeEEPROM,c
 11508  002EEC  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 11509  002EF0  EF59  F016         	goto	_writeEEPROM	;wreg free
 11510  002EF4                     __end_of_vscp_writeNicknamePermanent:
 11511                           	opt stack 0
 11512                           tblptru	equ	0xFF8
 11513                           tblptrh	equ	0xFF7
 11514                           tblptrl	equ	0xFF6
 11515                           tablat	equ	0xFF5
 11516                           prodh	equ	0xFF4
 11517                           prodl	equ	0xFF3
 11518                           intcon	equ	0xFF2
 11519                           postinc0	equ	0xFEE
 11520                           wreg	equ	0xFE8
 11521                           indf1	equ	0xFE7
 11522                           fsr1h	equ	0xFE2
 11523                           fsr1l	equ	0xFE1
 11524                           indf2	equ	0xFDF
 11525                           postinc2	equ	0xFDE
 11526                           postdec2	equ	0xFDD
 11527                           plusw2	equ	0xFDB
 11528                           fsr2h	equ	0xFDA
 11529                           fsr2l	equ	0xFD9
 11530                           status	equ	0xFD8
 11531                           
 11532 ;; *************** function _writeEEPROM *****************
 11533 ;; Defined at:
 11534 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;  address         2    7[COMRAM] unsigned short 
 11537 ;;  data            1    9[COMRAM] unsigned char 
 11538 ;; Auto vars:     Size  Location     Type
 11539 ;;		None
 11540 ;; Return value:  Size  Location     Type
 11541 ;;		None               void
 11542 ;; Registers used:
 11543 ;;		wreg, status,2
 11544 ;; Tracked objects:
 11545 ;;		On entry : 0/0
 11546 ;;		On exit  : 0/0
 11547 ;;		Unchanged: 0/0
 11548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11549 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11552 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11553 ;;Total ram usage:        3 bytes
 11554 ;; Hardware stack levels used:    1
 11555 ;; Hardware stack levels required when called:    2
 11556 ;; This function calls:
 11557 ;;		Nothing
 11558 ;; This function is called by:
 11559 ;;		_main
 11560 ;;		_init_app_eeprom
 11561 ;;		_vscp_setGUID
 11562 ;;		_vscp_setManufacturerId
 11563 ;;		_vscp_writeNicknamePermanent
 11564 ;;		_vscp_writeAppReg
 11565 ;;		_vscp_setUserID
 11566 ;;		_vscp_setSegmentCRC
 11567 ;;		_vscp_setControlByte
 11568 ;;		_vscp_goBootloaderMode
 11569 ;; This function uses a non-reentrant model
 11570 ;;
 11571                           
 11572                           	psect	text66
 11573  002CB2                     __ptext66:
 11574                           	opt stack 0
 11575  002CB2                     _writeEEPROM:
 11576                           	opt stack 24
 11577                           
 11578                           ;eeprom.c: 29: EEADR = address & 0xff;
 11579                           
 11580                           ;incstack = 0
 11581                           ;incstack = 0
 11582  002CB2  C008  FF74         	movff	writeEEPROM@address,3956	;volatile
 11583                           
 11584                           ;eeprom.c: 30: EEDATA = data;
 11585  002CB6  C00A  FF73         	movff	writeEEPROM@data,3955	;volatile
 11586                           
 11587                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 11588  002CBA  9E7F               	bcf	3967,7,c	;volatile
 11589                           
 11590                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 11591  002CBC  9C7F               	bcf	3967,6,c	;volatile
 11592                           
 11593                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 11594  002CBE  847F               	bsf	3967,2,c	;volatile
 11595                           
 11596                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 11597  002CC0  9EF2               	bcf	intcon,7,c	;volatile
 11598                           
 11599                           ;eeprom.c: 37: EECON2 = 0x55;
 11600  002CC2  0E55               	movlw	85
 11601  002CC4  6E7E               	movwf	3966,c	;volatile
 11602                           
 11603                           ;eeprom.c: 38: EECON2 = 0xaa;
 11604  002CC6  0EAA               	movlw	170
 11605  002CC8  6E7E               	movwf	3966,c	;volatile
 11606                           
 11607                           ;eeprom.c: 39: EECON1bits.WR = 1;
 11608  002CCA  827F               	bsf	3967,1,c	;volatile
 11609                           
 11610                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 11611  002CCC  8EF2               	bsf	intcon,7,c	;volatile
 11612  002CCE                     l1097:
 11613  002CCE  ACB7               	btfss	4023,6,c	;volatile
 11614  002CD0  D7FE               	goto	l1097
 11615                           
 11616                           ;eeprom.c: 44: PIR4bits.EEIF = 0;
 11617  002CD2  9CB7               	bcf	4023,6,c	;volatile
 11618                           
 11619                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 11620  002CD4  947F               	bcf	3967,2,c	;volatile
 11621  002CD6  0012               	return	
 11622  002CD8                     __end_of_writeEEPROM:
 11623                           	opt stack 0
 11624                           tblptru	equ	0xFF8
 11625                           tblptrh	equ	0xFF7
 11626                           tblptrl	equ	0xFF6
 11627                           tablat	equ	0xFF5
 11628                           prodh	equ	0xFF4
 11629                           prodl	equ	0xFF3
 11630                           intcon	equ	0xFF2
 11631                           postinc0	equ	0xFEE
 11632                           wreg	equ	0xFE8
 11633                           indf1	equ	0xFE7
 11634                           fsr1h	equ	0xFE2
 11635                           fsr1l	equ	0xFE1
 11636                           indf2	equ	0xFDF
 11637                           postinc2	equ	0xFDE
 11638                           postdec2	equ	0xFDD
 11639                           plusw2	equ	0xFDB
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function _init *****************
 11645 ;; Defined at:
 11646 ;;		line 302 in file "../main.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;		None
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;		None
 11651 ;; Return value:  Size  Location     Type
 11652 ;;		None               void
 11653 ;; Registers used:
 11654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : E/E
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11664 ;;Total ram usage:        0 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; Hardware stack levels required when called:    4
 11667 ;; This function calls:
 11668 ;;		_WriteTimer0
 11669 ;;		_init_app_ram
 11670 ;;		_OpenTimer0
 11671 ;;		_ECANInitialize
 11672 ;; This function is called by:
 11673 ;;		_main
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           	psect	text67
 11678  002AFC                     __ptext67:
 11679                           	opt stack 0
 11680  002AFC                     _init:
 11681                           	opt stack 26
 11682                           
 11683                           ;main.c: 306: init_app_ram();
 11684                           
 11685                           ;incstack = 0
 11686                           ;incstack = 0
 11687  002AFC  EC7A  F017         	call	_init_app_ram	;wreg free
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;main.c: 311: ANCON0 = 0;
 11691  002B00  010F               	movlb	15	; () banked
 11692  002B02  6B5D               	clrf	93,b	;volatile
 11693                           
 11694                           ; BSR set to: 15
 11695                           ;main.c: 312: ANCON1 = 0;
 11696  002B04  6B5C               	clrf	92,b	;volatile
 11697                           
 11698                           ; BSR set to: 15
 11699                           ;main.c: 321: TRISA = 0x00;
 11700  002B06  6A92               	clrf	3986,c	;volatile
 11701                           
 11702                           ; BSR set to: 15
 11703                           ;main.c: 322: PORTA = 0x00;
 11704  002B08  6A80               	clrf	3968,c	;volatile
 11705                           
 11706                           ; BSR set to: 15
 11707                           ;main.c: 334: TRISB = 0b00001100;
 11708  002B0A  0E0C               	movlw	12
 11709  002B0C  6E93               	movwf	3987,c	;volatile
 11710                           
 11711                           ; BSR set to: 15
 11712                           ;main.c: 335: PORTB = 0x00;
 11713  002B0E  6A81               	clrf	3969,c	;volatile
 11714                           
 11715                           ; BSR set to: 15
 11716                           ;main.c: 345: TRISC = 0b00000001;
 11717  002B10  0E01               	movlw	1
 11718  002B12  6E94               	movwf	3988,c	;volatile
 11719                           
 11720                           ; BSR set to: 15
 11721                           ;main.c: 346: PORTC = 0x00;
 11722  002B14  6A82               	clrf	3970,c	;volatile
 11723                           
 11724                           ; BSR set to: 15
 11725                           ;main.c: 372: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 11726  002B16  0E92               	movlw	146
 11727  002B18  ECEB  F016         	call	_OpenTimer0
 11728                           
 11729                           ; BSR set to: 15
 11730                           ;main.c: 373: WriteTimer0( 0xfb1d );
 11731  002B1C  0EFB               	movlw	251
 11732  002B1E  6E09               	movwf	?_WriteTimer0+1,c
 11733  002B20  0E1D               	movlw	29
 11734  002B22  6E08               	movwf	?_WriteTimer0,c
 11735  002B24  EC83  F017         	call	_WriteTimer0	;wreg free
 11736                           
 11737                           ; BSR set to: 15
 11738                           ;main.c: 376: ECANInitialize();
 11739  002B28  EC0B  F014         	call	_ECANInitialize	;wreg free
 11740                           
 11741                           ;main.c: 397: INTCONbits.PEIE = 1;
 11742  002B2C  8CF2               	bsf	intcon,6,c	;volatile
 11743                           
 11744                           ;main.c: 400: INTCONbits.GIE = 1;
 11745  002B2E  8EF2               	bsf	intcon,7,c	;volatile
 11746  002B30  0012               	return	
 11747  002B32                     __end_of_init:
 11748                           	opt stack 0
 11749                           tblptru	equ	0xFF8
 11750                           tblptrh	equ	0xFF7
 11751                           tblptrl	equ	0xFF6
 11752                           tablat	equ	0xFF5
 11753                           prodh	equ	0xFF4
 11754                           prodl	equ	0xFF3
 11755                           intcon	equ	0xFF2
 11756                           postinc0	equ	0xFEE
 11757                           wreg	equ	0xFE8
 11758                           indf1	equ	0xFE7
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           plusw2	equ	0xFDB
 11765                           fsr2h	equ	0xFDA
 11766                           fsr2l	equ	0xFD9
 11767                           status	equ	0xFD8
 11768                           
 11769 ;; *************** function _ECANInitialize *****************
 11770 ;; Defined at:
 11771 ;;		line 168 in file "../ECAN.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;		None               void
 11778 ;; Registers used:
 11779 ;;		wreg, status,2, status,0, cstack
 11780 ;; Tracked objects:
 11781 ;;		On entry : F/F
 11782 ;;		On exit  : E/E
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11789 ;;Total ram usage:        0 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:    3
 11792 ;; This function calls:
 11793 ;;		_ECANSetOperationMode
 11794 ;; This function is called by:
 11795 ;;		_init
 11796 ;; This function uses a non-reentrant model
 11797 ;;
 11798                           
 11799                           	psect	text68
 11800  002816                     __ptext68:
 11801                           	opt stack 0
 11802  002816                     _ECANInitialize:
 11803                           	opt stack 26
 11804                           
 11805                           ; BSR set to: 15
 11806                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 11807                           
 11808                           ;incstack = 0
 11809                           ;incstack = 0
 11810  002816  0E80               	movlw	128
 11811  002818  EC21  F017         	call	_ECANSetOperationMode
 11812                           
 11813                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 11814  00281C  0E09               	movlw	9
 11815  00281E  010E               	movlb	14	; () banked
 11816  002820  6F43               	movwf	67,b	;volatile
 11817                           
 11818                           ; BSR set to: 14
 11819                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 11820  002822  0EFC               	movlw	252
 11821  002824  6F44               	movwf	68,b	;volatile
 11822                           
 11823                           ; BSR set to: 14
 11824                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 11825                           ;ECAN.c: 181: (0 << 6) |
 11826                           ;ECAN.c: 182: (2-1);
 11827  002826  0E01               	movlw	1
 11828  002828  6F45               	movwf	69,b	;volatile
 11829                           
 11830                           ; BSR set to: 14
 11831                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 11832  00282A  0E20               	movlw	32
 11833  00282C  6E70               	movwf	3952,c	;volatile
 11834                           
 11835                           ; BSR set to: 14
 11836                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 11837  00282E  8E72               	bsf	3954,7,c	;volatile
 11838                           
 11839                           ; BSR set to: 14
 11840                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 11841  002830  9C72               	bcf	3954,6,c	;volatile
 11842                           
 11843                           ; BSR set to: 14
 11844                           ;ECAN.c: 205: RXB0CON = 0;
 11845  002832  6A60               	clrf	3936,c	;volatile
 11846                           
 11847                           ; BSR set to: 14
 11848                           ;ECAN.c: 211: RXB1CON = 0;
 11849  002834  010F               	movlb	15	; () banked
 11850  002836  6B30               	clrf	48,b	;volatile
 11851                           
 11852                           ; BSR set to: 15
 11853                           ;ECAN.c: 221: B0CON = 0;
 11854  002838  010E               	movlb	14	; () banked
 11855  00283A  6B80               	clrf	128,b	;volatile
 11856                           
 11857                           ; BSR set to: 14
 11858                           ;ECAN.c: 231: B1CON = 0;
 11859  00283C  6B90               	clrf	144,b	;volatile
 11860                           
 11861                           ; BSR set to: 14
 11862                           ;ECAN.c: 241: B2CON = 0;
 11863  00283E  6BA0               	clrf	160,b	;volatile
 11864                           
 11865                           ; BSR set to: 14
 11866                           ;ECAN.c: 254: B3CON = 0 << 2;
 11867  002840  6BB0               	clrf	176,b	;volatile
 11868                           
 11869                           ; BSR set to: 14
 11870                           ;ECAN.c: 264: B4CON = 0 << 2;
 11871  002842  6BC0               	clrf	192,b	;volatile
 11872                           
 11873                           ; BSR set to: 14
 11874                           ;ECAN.c: 274: B5CON = 0 << 2;
 11875  002844  6BD0               	clrf	208,b	;volatile
 11876                           
 11877                           ; BSR set to: 14
 11878                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 11879  002846  0EE0               	movlw	224
 11880  002848  6F7D               	movwf	125,b	;volatile
 11881                           
 11882                           ; BSR set to: 14
 11883                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 11884  00284A  6BE0               	clrf	224,b	;volatile
 11885                           
 11886                           ; BSR set to: 14
 11887  00284C  0E08               	movlw	8
 11888  00284E  6FE1               	movwf	225,b	;volatile
 11889                           
 11890                           ; BSR set to: 14
 11891  002850  6BE2               	clrf	226,b	;volatile
 11892                           
 11893                           ; BSR set to: 14
 11894  002852  6BE3               	clrf	227,b	;volatile
 11895                           
 11896                           ; BSR set to: 14
 11897                           ;ECAN.c: 303: RXF1SIDH = (long)0x00000000L >> 21L;RXF1SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF1EIDH = (long)0x00000000L >> 8L;RXF1E
      +                          IDL = 0x00000000L;;
 11898  002854  6BE4               	clrf	228,b	;volatile
 11899                           
 11900                           ; BSR set to: 14
 11901  002856  0E08               	movlw	8
 11902  002858  6FE5               	movwf	229,b	;volatile
 11903                           
 11904                           ; BSR set to: 14
 11905  00285A  6BE6               	clrf	230,b	;volatile
 11906                           
 11907                           ; BSR set to: 14
 11908  00285C  6BE7               	clrf	231,b	;volatile
 11909                           
 11910                           ; BSR set to: 14
 11911                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 11912  00285E  0E03               	movlw	3
 11913  002860  6F46               	movwf	70,b	;volatile
 11914                           
 11915                           ; BSR set to: 14
 11916                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 11917  002862  6B47               	clrf	71,b	;volatile
 11918                           
 11919                           ; BSR set to: 14
 11920                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 11921  002864  6B71               	clrf	113,b	;volatile
 11922                           
 11923                           ; BSR set to: 14
 11924                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 11925  002866  0E11               	movlw	17
 11926  002868  6F72               	movwf	114,b	;volatile
 11927                           
 11928                           ; BSR set to: 14
 11929                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 11930  00286A  6F73               	movwf	115,b	;volatile
 11931                           
 11932                           ; BSR set to: 14
 11933                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 11934  00286C  6B74               	clrf	116,b	;volatile
 11935                           
 11936                           ; BSR set to: 14
 11937                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 11938  00286E  6B75               	clrf	117,b	;volatile
 11939                           
 11940                           ; BSR set to: 14
 11941                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 11942  002870  6B76               	clrf	118,b	;volatile
 11943                           
 11944                           ; BSR set to: 14
 11945                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 11946  002872  6B77               	clrf	119,b	;volatile
 11947                           
 11948                           ; BSR set to: 14
 11949                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 11950  002874  6B78               	clrf	120,b	;volatile
 11951                           
 11952                           ; BSR set to: 14
 11953                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 11954  002876  0E54               	movlw	84
 11955  002878  6F79               	movwf	121,b	;volatile
 11956                           
 11957                           ; BSR set to: 14
 11958                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 11959  00287A  0E05               	movlw	5
 11960  00287C  6F7A               	movwf	122,b	;volatile
 11961                           
 11962                           ; BSR set to: 14
 11963                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11964  00287E  6B7B               	clrf	123,b	;volatile
 11965                           
 11966                           ; BSR set to: 14
 11967                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 11968  002880  6B7B               	clrf	123,b	;volatile
 11969                           
 11970                           ; BSR set to: 14
 11971                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 11972  002882  0E0F               	movlw	15
 11973  002884  6FF8               	movwf	248,b	;volatile
 11974                           
 11975                           ; BSR set to: 14
 11976  002886  0EE0               	movlw	224
 11977  002888  6FF9               	movwf	249,b	;volatile
 11978                           
 11979                           ; BSR set to: 14
 11980  00288A  6BFA               	clrf	250,b	;volatile
 11981                           
 11982                           ; BSR set to: 14
 11983  00288C  6BFB               	clrf	251,b	;volatile
 11984                           
 11985                           ; BSR set to: 14
 11986                           ;ECAN.c: 482: RXM0EXIDM = 1;
 11987  00288E  87F9               	bsf	249,3,b	;volatile
 11988                           
 11989                           ; BSR set to: 14
 11990                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 11991  002890  6BFC               	clrf	252,b	;volatile
 11992                           
 11993                           ; BSR set to: 14
 11994  002892  6BFD               	clrf	253,b	;volatile
 11995                           
 11996                           ; BSR set to: 14
 11997  002894  6BFE               	clrf	254,b	;volatile
 11998                           
 11999                           ; BSR set to: 14
 12000  002896  6BFF               	clrf	255,b	;volatile
 12001                           
 12002                           ; BSR set to: 14
 12003                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 12004  002898  87FD               	bsf	253,3,b	;volatile
 12005                           
 12006                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 12007  00289A  0E00               	movlw	0
 12008  00289C  EF21  F017         	goto	_ECANSetOperationMode
 12009  0028A0                     __end_of_ECANInitialize:
 12010                           	opt stack 0
 12011                           tblptru	equ	0xFF8
 12012                           tblptrh	equ	0xFF7
 12013                           tblptrl	equ	0xFF6
 12014                           tablat	equ	0xFF5
 12015                           prodh	equ	0xFF4
 12016                           prodl	equ	0xFF3
 12017                           intcon	equ	0xFF2
 12018                           postinc0	equ	0xFEE
 12019                           wreg	equ	0xFE8
 12020                           indf1	equ	0xFE7
 12021                           fsr1h	equ	0xFE2
 12022                           fsr1l	equ	0xFE1
 12023                           indf2	equ	0xFDF
 12024                           postinc2	equ	0xFDE
 12025                           postdec2	equ	0xFDD
 12026                           plusw2	equ	0xFDB
 12027                           fsr2h	equ	0xFDA
 12028                           fsr2l	equ	0xFD9
 12029                           status	equ	0xFD8
 12030                           
 12031 ;; *************** function _ECANSetOperationMode *****************
 12032 ;; Defined at:
 12033 ;;		line 1012 in file "../ECAN.c"
 12034 ;; Parameters:    Size  Location     Type
 12035 ;;  mode            1    wreg     enum E18989
 12036 ;; Auto vars:     Size  Location     Type
 12037 ;;  mode            1    7[COMRAM] enum E18989
 12038 ;; Return value:  Size  Location     Type
 12039 ;;		None               void
 12040 ;; Registers used:
 12041 ;;		wreg, status,2, status,0
 12042 ;; Tracked objects:
 12043 ;;		On entry : E/F
 12044 ;;		On exit  : E/E
 12045 ;;		Unchanged: E/0
 12046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12051 ;;Total ram usage:        1 bytes
 12052 ;; Hardware stack levels used:    1
 12053 ;; Hardware stack levels required when called:    2
 12054 ;; This function calls:
 12055 ;;		Nothing
 12056 ;; This function is called by:
 12057 ;;		_ECANInitialize
 12058 ;; This function uses a non-reentrant model
 12059 ;;
 12060                           
 12061                           	psect	text69
 12062  002E42                     __ptext69:
 12063                           	opt stack 0
 12064  002E42                     _ECANSetOperationMode:
 12065                           	opt stack 26
 12066                           
 12067                           ;incstack = 0
 12068                           ;incstack = 0
 12069                           ;ECANSetOperationMode@mode stored from wreg
 12070  002E42  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 12071                           
 12072                           ;ECAN.c: 1013: CANCON &= 0x1F;
 12073  002E46  0E1F               	movlw	31
 12074  002E48  166F               	andwf	3951,f,c	;volatile
 12075                           
 12076                           ;ECAN.c: 1014: CANCON |= mode;
 12077  002E4A  5008               	movf	ECANSetOperationMode@mode,w,c
 12078  002E4C  126F               	iorwf	3951,f,c	;volatile
 12079  002E4E                     l5183:
 12080  002E4E  506F               	movf	3951,w,c	;volatile
 12081  002E50  0BE0               	andlw	224
 12082  002E52  1808               	xorwf	ECANSetOperationMode@mode,w,c
 12083  002E54  B4D8               	btfsc	status,2,c
 12084  002E56  0012               	return	
 12085  002E58  D7FA               	goto	l5183
 12086  002E5A                     __end_of_ECANSetOperationMode:
 12087                           	opt stack 0
 12088                           tblptru	equ	0xFF8
 12089                           tblptrh	equ	0xFF7
 12090                           tblptrl	equ	0xFF6
 12091                           tablat	equ	0xFF5
 12092                           prodh	equ	0xFF4
 12093                           prodl	equ	0xFF3
 12094                           intcon	equ	0xFF2
 12095                           postinc0	equ	0xFEE
 12096                           wreg	equ	0xFE8
 12097                           indf1	equ	0xFE7
 12098                           fsr1h	equ	0xFE2
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           plusw2	equ	0xFDB
 12104                           fsr2h	equ	0xFDA
 12105                           fsr2l	equ	0xFD9
 12106                           status	equ	0xFD8
 12107                           
 12108 ;; *************** function _OpenTimer0 *****************
 12109 ;; Defined at:
 12110 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 12111 ;; Parameters:    Size  Location     Type
 12112 ;;  config          1    wreg     unsigned char 
 12113 ;; Auto vars:     Size  Location     Type
 12114 ;;  config          1    7[COMRAM] unsigned char 
 12115 ;; Return value:  Size  Location     Type
 12116 ;;		None               void
 12117 ;; Registers used:
 12118 ;;		wreg, status,2, status,0
 12119 ;; Tracked objects:
 12120 ;;		On entry : F/F
 12121 ;;		On exit  : F/F
 12122 ;;		Unchanged: E/0
 12123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12127 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12128 ;;Total ram usage:        1 bytes
 12129 ;; Hardware stack levels used:    1
 12130 ;; Hardware stack levels required when called:    2
 12131 ;; This function calls:
 12132 ;;		Nothing
 12133 ;; This function is called by:
 12134 ;;		_init
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text70
 12139  002DD6                     __ptext70:
 12140                           	opt stack 0
 12141  002DD6                     _OpenTimer0:
 12142                           	opt stack 27
 12143                           
 12144                           ;incstack = 0
 12145                           ;incstack = 0
 12146                           ;OpenTimer0@config stored from wreg
 12147  002DD6  CFE8 F008          	movff	wreg,OpenTimer0@config
 12148                           
 12149                           ; BSR set to: 15
 12150  002DDA  5008               	movf	OpenTimer0@config,w,c
 12151  002DDC  0B7F               	andlw	127
 12152  002DDE  6ED5               	movwf	4053,c	;volatile
 12153                           
 12154                           ; BSR set to: 15
 12155  002DE0  6AD7               	clrf	4055,c	;volatile
 12156                           
 12157                           ; BSR set to: 15
 12158  002DE2  6AD6               	clrf	4054,c	;volatile
 12159                           
 12160                           ; BSR set to: 15
 12161  002DE4  94F2               	bcf	intcon,2,c	;volatile
 12162                           
 12163                           ; BSR set to: 15
 12164  002DE6  AE08               	btfss	OpenTimer0@config,7,c
 12165  002DE8  D002               	goto	l1116
 12166                           
 12167                           ; BSR set to: 15
 12168  002DEA  8AF2               	bsf	intcon,5,c	;volatile
 12169  002DEC  D001               	goto	l1117
 12170  002DEE                     l1116:
 12171                           
 12172                           ; BSR set to: 15
 12173  002DEE  9AF2               	bcf	intcon,5,c	;volatile
 12174  002DF0                     l1117:
 12175                           
 12176                           ; BSR set to: 15
 12177  002DF0  8ED5               	bsf	4053,7,c	;volatile
 12178                           
 12179                           ; BSR set to: 15
 12180  002DF2  0012               	return	
 12181  002DF4                     __end_of_OpenTimer0:
 12182                           	opt stack 0
 12183                           tblptru	equ	0xFF8
 12184                           tblptrh	equ	0xFF7
 12185                           tblptrl	equ	0xFF6
 12186                           tablat	equ	0xFF5
 12187                           prodh	equ	0xFF4
 12188                           prodl	equ	0xFF3
 12189                           intcon	equ	0xFF2
 12190                           postinc0	equ	0xFEE
 12191                           wreg	equ	0xFE8
 12192                           indf1	equ	0xFE7
 12193                           fsr1h	equ	0xFE2
 12194                           fsr1l	equ	0xFE1
 12195                           indf2	equ	0xFDF
 12196                           postinc2	equ	0xFDE
 12197                           postdec2	equ	0xFDD
 12198                           plusw2	equ	0xFDB
 12199                           fsr2h	equ	0xFDA
 12200                           fsr2l	equ	0xFD9
 12201                           status	equ	0xFD8
 12202                           
 12203 ;; *************** function _init_app_ram *****************
 12204 ;; Defined at:
 12205 ;;		line 410 in file "../main.c"
 12206 ;; Parameters:    Size  Location     Type
 12207 ;;		None
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;  i               1    0        unsigned char 
 12210 ;; Return value:  Size  Location     Type
 12211 ;;		None               void
 12212 ;; Registers used:
 12213 ;;		None
 12214 ;; Tracked objects:
 12215 ;;		On entry : 0/E
 12216 ;;		On exit  : F/0
 12217 ;;		Unchanged: 0/0
 12218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12223 ;;Total ram usage:        0 bytes
 12224 ;; Hardware stack levels used:    1
 12225 ;; Hardware stack levels required when called:    2
 12226 ;; This function calls:
 12227 ;;		Nothing
 12228 ;; This function is called by:
 12229 ;;		_main
 12230 ;;		_init
 12231 ;;		_vscp_restoreDefaults
 12232 ;; This function uses a non-reentrant model
 12233 ;;
 12234                           
 12235                           	psect	text71
 12236  002EF4                     __ptext71:
 12237                           	opt stack 0
 12238  002EF4                     _init_app_ram:
 12239                           	opt stack 25
 12240                           
 12241                           ;main.c: 411: uint8_t i;
 12242                           ;main.c: 413: measurement_clock = 0;
 12243                           
 12244                           ; BSR set to: 15
 12245                           ;incstack = 0
 12246                           ;incstack = 0
 12247  002EF4  0100               	movlb	0	; () banked
 12248  002EF6  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 12249  002EF8  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 12250  002EFA  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 12251  002EFC  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 12252                           
 12253                           ;main.c: 415: seconds = 0;
 12254  002EFE  6B6A               	clrf	_seconds& (0+255),b
 12255                           
 12256                           ;main.c: 416: minutes = 0;
 12257  002F00  6B69               	clrf	_minutes& (0+255),b
 12258                           
 12259                           ;main.c: 417: hours = 0;
 12260  002F02  6B68               	clrf	_hours& (0+255),b
 12261                           
 12262                           ; BSR set to: 0
 12263  002F04  0012               	return	
 12264  002F06                     __end_of_init_app_ram:
 12265                           	opt stack 0
 12266                           tblptru	equ	0xFF8
 12267                           tblptrh	equ	0xFF7
 12268                           tblptrl	equ	0xFF6
 12269                           tablat	equ	0xFF5
 12270                           prodh	equ	0xFF4
 12271                           prodl	equ	0xFF3
 12272                           intcon	equ	0xFF2
 12273                           postinc0	equ	0xFEE
 12274                           wreg	equ	0xFE8
 12275                           indf1	equ	0xFE7
 12276                           fsr1h	equ	0xFE2
 12277                           fsr1l	equ	0xFE1
 12278                           indf2	equ	0xFDF
 12279                           postinc2	equ	0xFDE
 12280                           postdec2	equ	0xFDD
 12281                           plusw2	equ	0xFDB
 12282                           fsr2h	equ	0xFDA
 12283                           fsr2l	equ	0xFD9
 12284                           status	equ	0xFD8
 12285                           
 12286 ;; *************** function _WriteTimer0 *****************
 12287 ;; Defined at:
 12288 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12289 ;; Parameters:    Size  Location     Type
 12290 ;;  timer0          2    7[COMRAM] unsigned int 
 12291 ;; Auto vars:     Size  Location     Type
 12292 ;;  timer           2    9[COMRAM] struct Timers
 12293 ;; Return value:  Size  Location     Type
 12294 ;;		None               void
 12295 ;; Registers used:
 12296 ;;		None
 12297 ;; Tracked objects:
 12298 ;;		On entry : F/F
 12299 ;;		On exit  : F/F
 12300 ;;		Unchanged: E/0
 12301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12302 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12303 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12305 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12306 ;;Total ram usage:        4 bytes
 12307 ;; Hardware stack levels used:    1
 12308 ;; Hardware stack levels required when called:    2
 12309 ;; This function calls:
 12310 ;;		Nothing
 12311 ;; This function is called by:
 12312 ;;		_init
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           	psect	text72
 12317  002F06                     __ptext72:
 12318                           	opt stack 0
 12319  002F06                     _WriteTimer0:
 12320                           	opt stack 27
 12321                           
 12322                           ; BSR set to: 15
 12323                           
 12324                           ; BSR set to: 0
 12325                           ;incstack = 0
 12326                           ;incstack = 0
 12327  002F06  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 12328  002F0A  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 12329  002F0E  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 12330  002F12  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 12331                           
 12332                           ; BSR set to: 15
 12333  002F16  0012               	return	
 12334  002F18                     __end_of_WriteTimer0:
 12335                           	opt stack 0
 12336                           tblptru	equ	0xFF8
 12337                           tblptrh	equ	0xFF7
 12338                           tblptrl	equ	0xFF6
 12339                           tablat	equ	0xFF5
 12340                           prodh	equ	0xFF4
 12341                           prodl	equ	0xFF3
 12342                           intcon	equ	0xFF2
 12343                           postinc0	equ	0xFEE
 12344                           wreg	equ	0xFE8
 12345                           indf1	equ	0xFE7
 12346                           fsr1h	equ	0xFE2
 12347                           fsr1l	equ	0xFE1
 12348                           indf2	equ	0xFDF
 12349                           postinc2	equ	0xFDE
 12350                           postdec2	equ	0xFDD
 12351                           plusw2	equ	0xFDB
 12352                           fsr2h	equ	0xFDA
 12353                           fsr2l	equ	0xFD9
 12354                           status	equ	0xFD8
 12355                           
 12356 ;; *************** function _readControlReg *****************
 12357 ;; Defined at:
 12358 ;;		line 751 in file "../main.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;  ctrlreg         1    wreg     unsigned char 
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  ctrlreg         1   14[COMRAM] unsigned char 
 12363 ;;  rv              1   15[COMRAM] unsigned char 
 12364 ;; Return value:  Size  Location     Type
 12365 ;;                  1    wreg      unsigned char 
 12366 ;; Registers used:
 12367 ;;		wreg, status,2, status,0, prodl, prodh
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12374 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12375 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12376 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12377 ;;Total ram usage:        9 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    2
 12380 ;; This function calls:
 12381 ;;		Nothing
 12382 ;; This function is called by:
 12383 ;;		_vscp_readAppReg
 12384 ;;		_writeControlReg
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           	psect	text73
 12389  0022E6                     __ptext73:
 12390                           	opt stack 0
 12391  0022E6                     _readControlReg:
 12392                           	opt stack 24
 12393                           
 12394                           ; BSR set to: 15
 12395                           ;incstack = 0
 12396                           ;incstack = 0
 12397                           ;readControlReg@ctrlreg stored from wreg
 12398  0022E6  CFE8 F00F          	movff	wreg,readControlReg@ctrlreg
 12399                           
 12400                           ;main.c: 752: uint8_t rv = 0;
 12401  0022EA  6A10               	clrf	readControlReg@rv,c
 12402                           
 12403                           ;main.c: 754: switch ( ctrlreg ) {
 12404  0022EC  D060               	goto	l4687
 12405  0022EE                     l4679:
 12406                           
 12407                           ;main.c: 757: rv = ( PORTCbits.RC7 << 0 ) +
 12408                           ;main.c: 758: ( PORTCbits.RC6 << 1 ) +
 12409                           ;main.c: 759: ( PORTCbits.RC3 << 2 ) +
 12410                           ;main.c: 760: ( PORTCbits.RC4 << 3 ) +
 12411                           ;main.c: 761: ( PORTCbits.RC5 << 4 ) +
 12412                           ;main.c: 762: ( PORTAbits.RA0 << 5 ) +
 12413                           ;main.c: 763: ( PORTAbits.RA1 << 6 ) +
 12414                           ;main.c: 764: ( PORTAbits.RA2 << 7 );
 12415  0022EE  3482               	rlcf	3970,w,c	;volatile
 12416  0022F0  36E8               	rlcf	wreg,f,c
 12417  0022F2  0B01               	andlw	1
 12418  0022F4  6E08               	movwf	??_readControlReg& (0+255),c
 12419  0022F6  3882               	swapf	3970,w,c	;volatile
 12420  0022F8  32E8               	rrcf	wreg,f,c
 12421  0022FA  32E8               	rrcf	wreg,f,c
 12422  0022FC  0B01               	andlw	1
 12423  0022FE  0D02               	mullw	2
 12424  002300  CFF3 F009          	movff	prodl,??_readControlReg+1
 12425  002304  3082               	rrcf	3970,w,c	;volatile
 12426  002306  32E8               	rrcf	wreg,f,c
 12427  002308  32E8               	rrcf	wreg,f,c
 12428  00230A  0B01               	andlw	1
 12429  00230C  0D04               	mullw	4
 12430  00230E  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12431  002312  3882               	swapf	3970,w,c	;volatile
 12432  002314  0B01               	andlw	1
 12433  002316  0D08               	mullw	8
 12434  002318  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12435  00231C  3882               	swapf	3970,w,c	;volatile
 12436  00231E  32E8               	rrcf	wreg,f,c
 12437  002320  0B01               	andlw	1
 12438  002322  0D10               	mullw	16
 12439  002324  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12440  002328  5080               	movf	3968,w,c	;volatile
 12441  00232A  0B01               	andlw	1
 12442  00232C  0D20               	mullw	32
 12443  00232E  CFF3 F00D          	movff	prodl,??_readControlReg+5
 12444  002332  3080               	rrcf	3968,w,c	;volatile
 12445  002334  0B01               	andlw	1
 12446  002336  0D40               	mullw	64
 12447  002338  CFF3 F00E          	movff	prodl,??_readControlReg+6
 12448  00233C  3080               	rrcf	3968,w,c	;volatile
 12449  00233E  32E8               	rrcf	wreg,f,c
 12450  002340  0B01               	andlw	1
 12451  002342  0D80               	mullw	128
 12452  002344  50F3               	movf	prodl,w,c
 12453  002346  240E               	addwf	??_readControlReg+6,w,c
 12454  002348  240D               	addwf	??_readControlReg+5,w,c
 12455  00234A  D01F               	goto	L42
 12456  00234C                     l4681:
 12457                           
 12458                           ;main.c: 768: rv = ( PORTAbits.RA3 << 0 ) +
 12459                           ;main.c: 769: ( PORTAbits.RA5 << 1 ) +
 12460                           ;main.c: 772: ( PORTBbits.RB4 << 4 ) +
 12461                           ;main.c: 773: ( PORTCbits.RC2 << 5 ) +
 12462                           ;main.c: 774: ( PORTBbits.RB1 << 6 ) +
 12463                           ;main.c: 775: ( PORTBbits.RB0 << 7 );
 12464  00234C  3080               	rrcf	3968,w,c	;volatile
 12465  00234E  32E8               	rrcf	wreg,f,c
 12466  002350  32E8               	rrcf	wreg,f,c
 12467  002352  0B01               	andlw	1
 12468  002354  6E08               	movwf	??_readControlReg& (0+255),c
 12469  002356  3880               	swapf	3968,w,c	;volatile
 12470  002358  32E8               	rrcf	wreg,f,c
 12471  00235A  0B01               	andlw	1
 12472  00235C  0D02               	mullw	2
 12473  00235E  CFF3 F009          	movff	prodl,??_readControlReg+1
 12474  002362  3881               	swapf	3969,w,c	;volatile
 12475  002364  0B01               	andlw	1
 12476  002366  0D10               	mullw	16
 12477  002368  CFF3 F00A          	movff	prodl,??_readControlReg+2
 12478  00236C  3082               	rrcf	3970,w,c	;volatile
 12479  00236E  32E8               	rrcf	wreg,f,c
 12480  002370  0B01               	andlw	1
 12481  002372  0D20               	mullw	32
 12482  002374  CFF3 F00B          	movff	prodl,??_readControlReg+3
 12483  002378  3081               	rrcf	3969,w,c	;volatile
 12484  00237A  0B01               	andlw	1
 12485  00237C  0D40               	mullw	64
 12486  00237E  CFF3 F00C          	movff	prodl,??_readControlReg+4
 12487  002382  5081               	movf	3969,w,c	;volatile
 12488  002384  0B01               	andlw	1
 12489  002386  0D80               	mullw	128
 12490  002388  50F3               	movf	prodl,w,c
 12491  00238A                     L42:
 12492  00238A  240C               	addwf	??_readControlReg+4,w,c
 12493  00238C  240B               	addwf	??_readControlReg+3,w,c
 12494  00238E  240A               	addwf	??_readControlReg+2,w,c
 12495  002390  2409               	addwf	??_readControlReg+1,w,c
 12496  002392  D00A               	goto	L43
 12497  002394                     l4683:
 12498                           
 12499                           ;main.c: 779: rv = ( PORTBbits.RB6 << 0 ) +
 12500                           ;main.c: 780: ( PORTBbits.RB5 << 1 );
 12501  002394  3881               	swapf	3969,w,c	;volatile
 12502  002396  32E8               	rrcf	wreg,f,c
 12503  002398  32E8               	rrcf	wreg,f,c
 12504  00239A  0B01               	andlw	1
 12505  00239C  6E08               	movwf	??_readControlReg& (0+255),c
 12506  00239E  3881               	swapf	3969,w,c	;volatile
 12507  0023A0  32E8               	rrcf	wreg,f,c
 12508  0023A2  0B01               	andlw	1
 12509  0023A4  0D02               	mullw	2
 12510  0023A6  50F3               	movf	prodl,w,c
 12511  0023A8                     L43:
 12512  0023A8  2408               	addwf	??_readControlReg,w,c
 12513  0023AA  6E10               	movwf	readControlReg@rv,c
 12514                           
 12515                           ;main.c: 781: break;
 12516  0023AC  D006               	goto	l4689
 12517  0023AE                     l4687:
 12518  0023AE  500F               	movf	readControlReg@ctrlreg,w,c
 12519                           
 12520                           ; Switch size 1, requested type "space"
 12521                           ; Number of cases is 3, Range of values is 0 to 2
 12522                           ; switch strategies available:
 12523                           ; Name         Instructions Cycles
 12524                           ; simple_byte           10     6 (average)
 12525                           ;	Chosen strategy is simple_byte
 12526  0023B0  E09E               	bz	l4679
 12527  0023B2  0A01               	xorlw	1	; case 1
 12528  0023B4  E0CB               	bz	l4681
 12529  0023B6  0A03               	xorlw	3	; case 2
 12530  0023B8  E0ED               	bz	l4683
 12531  0023BA                     l4689:
 12532                           
 12533                           ;main.c: 784: return rv;
 12534  0023BA  5010               	movf	readControlReg@rv,w,c
 12535  0023BC  0012               	return	
 12536  0023BE                     __end_of_readControlReg:
 12537                           	opt stack 0
 12538                           tblptru	equ	0xFF8
 12539                           tblptrh	equ	0xFF7
 12540                           tblptrl	equ	0xFF6
 12541                           tablat	equ	0xFF5
 12542                           prodh	equ	0xFF4
 12543                           prodl	equ	0xFF3
 12544                           intcon	equ	0xFF2
 12545                           postinc0	equ	0xFEE
 12546                           wreg	equ	0xFE8
 12547                           indf1	equ	0xFE7
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           plusw2	equ	0xFDB
 12554                           fsr2h	equ	0xFDA
 12555                           fsr2l	equ	0xFD9
 12556                           status	equ	0xFD8
 12557                           
 12558 ;; *************** function _vscp_readAppReg *****************
 12559 ;; Defined at:
 12560 ;;		line 586 in file "../main.c"
 12561 ;; Parameters:    Size  Location     Type
 12562 ;;  reg             1    wreg     unsigned char 
 12563 ;; Auto vars:     Size  Location     Type
 12564 ;;  reg             1   17[COMRAM] unsigned char 
 12565 ;;  rv              1   16[COMRAM] unsigned char 
 12566 ;; Return value:  Size  Location     Type
 12567 ;;                  1    wreg      unsigned char 
 12568 ;; Registers used:
 12569 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12570 ;; Tracked objects:
 12571 ;;		On entry : F/0
 12572 ;;		On exit  : 0/0
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12576 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12578 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12579 ;;Total ram usage:        2 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; Hardware stack levels required when called:    3
 12582 ;; This function calls:
 12583 ;;		_readEEPROM
 12584 ;;		_readControlReg
 12585 ;; This function is called by:
 12586 ;;		_vscp_readRegister
 12587 ;;		_vscp_handleProtocolEvent
 12588 ;; This function uses a non-reentrant model
 12589 ;;
 12590                           
 12591                           	psect	text74
 12592  00277A                     __ptext74:
 12593                           	opt stack 0
 12594  00277A                     _vscp_readAppReg:
 12595                           	opt stack 25
 12596                           
 12597                           ;incstack = 0
 12598                           ;incstack = 0
 12599                           ;vscp_readAppReg@reg stored from wreg
 12600  00277A  CFE8 F012          	movff	wreg,vscp_readAppReg@reg
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;main.c: 587: uint8_t rv;
 12604                           ;main.c: 589: rv = 0x00;
 12605  00277E  6A11               	clrf	vscp_readAppReg@rv,c
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;main.c: 592: if ( 0 == vscp_page_select ) {
 12609  002780  5053               	movf	_vscp_page_select+1,w,c
 12610  002782  1052               	iorwf	_vscp_page_select,w,c
 12611  002784  E137               	bnz	l6339
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;main.c: 594: if ( reg == 0x00 ) {
 12615  002786  6612               	tstfsz	vscp_readAppReg@reg,c
 12616  002788  D006               	goto	l6315
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;main.c: 595: rv = readEEPROM(0x21 + 0);
 12620  00278A  6A09               	clrf	?_readEEPROM+1,c
 12621  00278C  0E21               	movlw	33
 12622  00278E  6E08               	movwf	?_readEEPROM,c
 12623  002790  EC68  F017         	call	_readEEPROM	;wreg free
 12624  002794  D03D               	goto	L44
 12625  002796                     l6315:
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;main.c: 598: else if ( reg == 0x01 ) {
 12629  002796  0412               	decf	vscp_readAppReg@reg,w,c
 12630  002798  E106               	bnz	l6319
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;main.c: 599: rv = readEEPROM(0x21 + 1);
 12634  00279A  6A09               	clrf	?_readEEPROM+1,c
 12635  00279C  0E22               	movlw	34
 12636  00279E  6E08               	movwf	?_readEEPROM,c
 12637  0027A0  EC68  F017         	call	_readEEPROM	;wreg free
 12638  0027A4  D035               	goto	L44
 12639  0027A6                     l6319:
 12640                           
 12641                           ; BSR set to: 0
 12642                           ;main.c: 602: else if ( ( reg >= 5 ) && ( reg <= 22 ) ) {
 12643  0027A6  0E04               	movlw	4
 12644  0027A8  6412               	cpfsgt	vscp_readAppReg@reg,c
 12645  0027AA  D00C               	goto	l6325
 12646                           
 12647                           ; BSR set to: 0
 12648  0027AC  0E17               	movlw	23
 12649  0027AE  6012               	cpfslt	vscp_readAppReg@reg,c
 12650  0027B0  D009               	goto	l6325
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;main.c: 603: rv = readEEPROM( 0x21 + 5 +
 12654                           ;main.c: 604: ( reg - 5 ) );
 12655  0027B2  0E21               	movlw	33
 12656  0027B4  2412               	addwf	vscp_readAppReg@reg,w,c
 12657  0027B6  6E08               	movwf	?_readEEPROM,c
 12658  0027B8  6A09               	clrf	?_readEEPROM+1,c
 12659  0027BA  0E00               	movlw	0
 12660  0027BC  2209               	addwfc	?_readEEPROM+1,f,c
 12661  0027BE  EC68  F017         	call	_readEEPROM	;wreg free
 12662  0027C2  D026               	goto	L44
 12663  0027C4                     l6325:
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;main.c: 607: else if ( reg == 2 ) {
 12667  0027C4  5012               	movf	vscp_readAppReg@reg,w,c
 12668  0027C6  0A02               	xorlw	2
 12669  0027C8  E104               	bnz	l6329
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;main.c: 608: rv = readControlReg( 0 );
 12673  0027CA  0E00               	movlw	0
 12674  0027CC  EC73  F011         	call	_readControlReg
 12675  0027D0  D01F               	goto	L44
 12676  0027D2                     l6329:
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;main.c: 611: else if ( reg == 3 ) {
 12680  0027D2  5012               	movf	vscp_readAppReg@reg,w,c
 12681  0027D4  0A03               	xorlw	3
 12682  0027D6  E104               	bnz	l6333
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;main.c: 612: rv = readControlReg( 1 );
 12686  0027D8  0E01               	movlw	1
 12687  0027DA  EC73  F011         	call	_readControlReg
 12688  0027DE  D018               	goto	L44
 12689  0027E0                     l6333:
 12690                           
 12691                           ; BSR set to: 0
 12692                           ;main.c: 615: else if ( reg == 4 ) {
 12693  0027E0  5012               	movf	vscp_readAppReg@reg,w,c
 12694  0027E2  0A04               	xorlw	4
 12695  0027E4  E116               	bnz	l6345
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;main.c: 616: rv = readControlReg( 2 );
 12699  0027E6  0E02               	movlw	2
 12700  0027E8  EC73  F011         	call	_readControlReg
 12701  0027EC  6E11               	movwf	vscp_readAppReg@rv,c
 12702                           
 12703                           ;main.c: 617: rv &= 0x03;
 12704  0027EE  0E03               	movlw	3
 12705  0027F0  1611               	andwf	vscp_readAppReg@rv,f,c
 12706  0027F2  D00F               	goto	l6345
 12707  0027F4                     l6339:
 12708                           
 12709                           ; BSR set to: 0
 12710                           ;main.c: 621: else if ( 1 == vscp_page_select ) {
 12711  0027F4  0452               	decf	_vscp_page_select,w,c
 12712  0027F6  1053               	iorwf	_vscp_page_select+1,w,c
 12713  0027F8  E10C               	bnz	l6345
 12714                           
 12715                           ; BSR set to: 0
 12716                           ;main.c: 624: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 12717                           ;main.c: 625: ( 8 * 8 ) ) ) ) {
 12718  0027FA  0E41               	movlw	65
 12719  0027FC  6012               	cpfslt	vscp_readAppReg@reg,c
 12720  0027FE  D009               	goto	l6345
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;main.c: 626: rv = readEEPROM(0x21 + 23 +
 12724                           ;main.c: 627: ( reg - 0 ) );
 12725  002800  0E38               	movlw	56
 12726  002802  2412               	addwf	vscp_readAppReg@reg,w,c
 12727  002804  6E08               	movwf	?_readEEPROM,c
 12728  002806  6A09               	clrf	?_readEEPROM+1,c
 12729  002808  0E00               	movlw	0
 12730  00280A  2209               	addwfc	?_readEEPROM+1,f,c
 12731  00280C  EC68  F017         	call	_readEEPROM	;wreg free
 12732  002810                     L44:
 12733  002810  6E11               	movwf	vscp_readAppReg@rv,c
 12734  002812                     l6345:
 12735                           
 12736                           ;main.c: 628: }
 12737                           ;main.c: 630: }
 12738                           ;main.c: 632: return rv;
 12739  002812  5011               	movf	vscp_readAppReg@rv,w,c
 12740  002814  0012               	return	
 12741  002816                     __end_of_vscp_readAppReg:
 12742                           	opt stack 0
 12743                           tblptru	equ	0xFF8
 12744                           tblptrh	equ	0xFF7
 12745                           tblptrl	equ	0xFF6
 12746                           tablat	equ	0xFF5
 12747                           prodh	equ	0xFF4
 12748                           prodl	equ	0xFF3
 12749                           intcon	equ	0xFF2
 12750                           postinc0	equ	0xFEE
 12751                           wreg	equ	0xFE8
 12752                           indf1	equ	0xFE7
 12753                           fsr1h	equ	0xFE2
 12754                           fsr1l	equ	0xFE1
 12755                           indf2	equ	0xFDF
 12756                           postinc2	equ	0xFDE
 12757                           postdec2	equ	0xFDD
 12758                           plusw2	equ	0xFDB
 12759                           fsr2h	equ	0xFDA
 12760                           fsr2l	equ	0xFD9
 12761                           status	equ	0xFD8
 12762                           
 12763 ;; *************** function _interrupt_at_low_vector *****************
 12764 ;; Defined at:
 12765 ;;		line 111 in file "../main.c"
 12766 ;; Parameters:    Size  Location     Type
 12767 ;;		None
 12768 ;; Auto vars:     Size  Location     Type
 12769 ;;		None
 12770 ;; Return value:  Size  Location     Type
 12771 ;;		None               void
 12772 ;; Registers used:
 12773 ;;		wreg, status,2, status,0, cstack
 12774 ;; Tracked objects:
 12775 ;;		On entry : 0/0
 12776 ;;		On exit  : 0/0
 12777 ;;		Unchanged: 0/0
 12778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12781 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12782 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12783 ;;Total ram usage:        3 bytes
 12784 ;; Hardware stack levels used:    1
 12785 ;; Hardware stack levels required when called:    1
 12786 ;; This function calls:
 12787 ;;		i1_WriteTimer0
 12788 ;; This function is called by:
 12789 ;;		Interrupt level 1
 12790 ;; This function uses a non-reentrant model
 12791 ;;
 12792                           
 12793                           	psect	intcodelo
 12794  000018                     __pintcodelo:
 12795                           	opt stack 0
 12796  000018                     _interrupt_at_low_vector:
 12797                           	opt stack 22
 12798                           
 12799                           ;incstack = 0
 12800  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 12801  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 12802  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 12803  000024                     
 12804                           ;main.c: 113: if ( INTCONbits.TMR0IF ) {
 12805  000024  A4F2               	btfss	intcon,2,c	;volatile
 12806  000026  D001               	goto	i1u546_21
 12807  000028  D001               	goto	i1u546_20
 12808  00002A                     i1u546_21:
 12809  00002A  D03E               	goto	i1l141
 12810  00002C                     i1u546_20:
 12811  00002C                     
 12812                           ;main.c: 116: WriteTimer0(0xfb1d);
 12813  00002C  0EFB               	movlw	251
 12814  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 12815  000030  0E1D               	movlw	29
 12816  000032  6E01               	movwf	?i1_WriteTimer0,c
 12817  000034  EC8C  F017         	call	i1_WriteTimer0	;wreg free
 12818  000038                     
 12819                           ;main.c: 118: vscp_timer++;
 12820  000038  0100               	movlb	0	; () banked
 12821  00003A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 12822  00003C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 12823  00003E                     
 12824                           ; BSR set to: 0
 12825                           ;main.c: 119: vscp_configtimer++;
 12826  00003E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 12827  000040  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 12828  000042                     
 12829                           ; BSR set to: 0
 12830                           ;main.c: 120: measurement_clock++;
 12831  000042  0E01               	movlw	1
 12832  000044  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 12833  000046  0E00               	movlw	0
 12834  000048  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 12835  00004A  0E00               	movlw	0
 12836  00004C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 12837  00004E  0E00               	movlw	0
 12838  000050  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 12839  000052                     
 12840                           ; BSR set to: 0
 12841                           ;main.c: 123: if ( PORTCbits.RC0 ) {
 12842  000052  A082               	btfss	3970,0,c	;volatile
 12843  000054  D001               	goto	i1u547_21
 12844  000056  D001               	goto	i1u547_20
 12845  000058                     i1u547_21:
 12846  000058  D002               	goto	i1l5539
 12847  00005A                     i1u547_20:
 12848  00005A                     
 12849                           ; BSR set to: 0
 12850                           ;main.c: 124: vscp_initbtncnt = 0;
 12851  00005A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 12852                           
 12853                           ;main.c: 125: } else {
 12854  00005C  D001               	goto	i1l133
 12855  00005E                     i1l5539:
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;main.c: 127: vscp_initbtncnt++;
 12859  00005E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 12860  000060                     i1l133:
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;main.c: 128: }
 12864                           ;main.c: 131: vscp_statuscnt++;
 12865  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 12866  000062                     
 12867                           ; BSR set to: 0
 12868                           ;main.c: 132: if ( ( 0x02 == vscp_initledfunc ) &&
 12869                           ;main.c: 133: ( vscp_statuscnt > 100 ) ) {
 12870  000062  5056               	movf	_vscp_initledfunc,w,c
 12871  000064  0A02               	xorlw	2
 12872  000066  A4D8               	btfss	status,2,c
 12873  000068  D001               	goto	i1u548_21
 12874  00006A  D001               	goto	i1u548_20
 12875  00006C                     i1u548_21:
 12876  00006C  D00E               	goto	i1l5549
 12877  00006E                     i1u548_20:
 12878  00006E                     
 12879                           ; BSR set to: 0
 12880  00006E  0E64               	movlw	100
 12881  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 12882  000072  D001               	goto	i1u549_21
 12883  000074  D001               	goto	i1u549_20
 12884  000076                     i1u549_21:
 12885  000076  D009               	goto	i1l5549
 12886  000078                     i1u549_20:
 12887  000078                     
 12888                           ; BSR set to: 0
 12889                           ;main.c: 135: if ( PORTCbits.RC1 ) {
 12890  000078  A282               	btfss	3970,1,c	;volatile
 12891  00007A  D001               	goto	i1u550_21
 12892  00007C  D001               	goto	i1u550_20
 12893  00007E                     i1u550_21:
 12894  00007E  D002               	goto	i1l135
 12895  000080                     i1u550_20:
 12896  000080                     
 12897                           ; BSR set to: 0
 12898                           ;main.c: 136: PORTCbits.RC1 = 0;
 12899  000080  9282               	bcf	3970,1,c	;volatile
 12900                           
 12901                           ;main.c: 137: }
 12902  000082  D001               	goto	i1l136
 12903  000084                     i1l135:
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;main.c: 138: else {
 12907                           ;main.c: 139: PORTCbits.RC1 = 1;
 12908  000084  8282               	bsf	3970,1,c	;volatile
 12909  000086                     i1l136:
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;main.c: 140: }
 12913                           ;main.c: 142: vscp_statuscnt = 0;
 12914  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12915                           
 12916                           ;main.c: 144: }
 12917  000088  D00E               	goto	i1l137
 12918  00008A                     i1l5549:
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;main.c: 145: else if (0x01 == vscp_initledfunc) {
 12922  00008A  0456               	decf	_vscp_initledfunc,w,c
 12923  00008C  A4D8               	btfss	status,2,c
 12924  00008E  D001               	goto	i1u551_21
 12925  000090  D001               	goto	i1u551_20
 12926  000092                     i1u551_21:
 12927  000092  D003               	goto	i1l138
 12928  000094                     i1u551_20:
 12929  000094                     
 12930                           ; BSR set to: 0
 12931                           ;main.c: 146: PORTCbits.RC1 = 1;
 12932  000094  8282               	bsf	3970,1,c	;volatile
 12933                           
 12934                           ;main.c: 147: vscp_statuscnt = 0;
 12935  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12936                           
 12937                           ;main.c: 148: }
 12938  000098  D006               	goto	i1l137
 12939  00009A                     i1l138:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;main.c: 149: else if (0x00 == vscp_initledfunc) {
 12943  00009A  6656               	tstfsz	_vscp_initledfunc,c
 12944  00009C  D001               	goto	i1u552_21
 12945  00009E  D001               	goto	i1u552_20
 12946  0000A0                     i1u552_21:
 12947  0000A0  D002               	goto	i1l137
 12948  0000A2                     i1u552_20:
 12949  0000A2                     
 12950                           ; BSR set to: 0
 12951                           ;main.c: 150: PORTCbits.RC1 = 0;
 12952  0000A2  9282               	bcf	3970,1,c	;volatile
 12953                           
 12954                           ;main.c: 151: vscp_statuscnt = 0;
 12955  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 12956  0000A6                     i1l137:
 12957                           
 12958                           ; BSR set to: 0
 12959                           ;main.c: 152: }
 12960                           ;main.c: 154: INTCONbits.TMR0IF = 0;
 12961  0000A6  94F2               	bcf	intcon,2,c	;volatile
 12962  0000A8                     i1l141:
 12963  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 12964  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 12965  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 12966  0000B4  0010               	retfie	
 12967  0000B6                     __end_of_interrupt_at_low_vector:
 12968                           	opt stack 0
 12969                           tblptru	equ	0xFF8
 12970                           tblptrh	equ	0xFF7
 12971                           tblptrl	equ	0xFF6
 12972                           tablat	equ	0xFF5
 12973                           prodh	equ	0xFF4
 12974                           prodl	equ	0xFF3
 12975                           intcon	equ	0xFF2
 12976                           postinc0	equ	0xFEE
 12977                           wreg	equ	0xFE8
 12978                           indf1	equ	0xFE7
 12979                           fsr1h	equ	0xFE2
 12980                           fsr1l	equ	0xFE1
 12981                           bsr	equ	0xFE0
 12982                           indf2	equ	0xFDF
 12983                           postinc2	equ	0xFDE
 12984                           postdec2	equ	0xFDD
 12985                           plusw2	equ	0xFDB
 12986                           fsr2h	equ	0xFDA
 12987                           fsr2l	equ	0xFD9
 12988                           status	equ	0xFD8
 12989                           
 12990 ;; *************** function i1_WriteTimer0 *****************
 12991 ;; Defined at:
 12992 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 12993 ;; Parameters:    Size  Location     Type
 12994 ;;  timer0          2    0[COMRAM] unsigned int 
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 12997 ;; Return value:  Size  Location     Type
 12998 ;;		None               void
 12999 ;; Registers used:
 13000 ;;		None
 13001 ;; Tracked objects:
 13002 ;;		On entry : 0/0
 13003 ;;		On exit  : 0/0
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13009 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13010 ;;Total ram usage:        4 bytes
 13011 ;; Hardware stack levels used:    1
 13012 ;; This function calls:
 13013 ;;		Nothing
 13014 ;; This function is called by:
 13015 ;;		_interrupt_at_low_vector
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           	psect	text76
 13020  002F18                     __ptext76:
 13021                           	opt stack 0
 13022  002F18                     i1_WriteTimer0:
 13023                           	opt stack 22
 13024                           
 13025                           ;incstack = 0
 13026                           ;incstack = 0
 13027  002F18  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 13028  002F1C  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 13029  002F20  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 13030  002F24  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 13031  002F28  0012               	return	
 13032  002F2A                     __end_ofi1_WriteTimer0:
 13033                           	opt stack 0
 13034                           tblptru	equ	0xFF8
 13035                           tblptrh	equ	0xFF7
 13036                           tblptrl	equ	0xFF6
 13037                           tablat	equ	0xFF5
 13038                           prodh	equ	0xFF4
 13039                           prodl	equ	0xFF3
 13040                           intcon	equ	0xFF2
 13041                           postinc0	equ	0xFEE
 13042                           wreg	equ	0xFE8
 13043                           indf1	equ	0xFE7
 13044                           fsr1h	equ	0xFE2
 13045                           fsr1l	equ	0xFE1
 13046                           bsr	equ	0xFE0
 13047                           indf2	equ	0xFDF
 13048                           postinc2	equ	0xFDE
 13049                           postdec2	equ	0xFDD
 13050                           plusw2	equ	0xFDB
 13051                           fsr2h	equ	0xFDA
 13052                           fsr2l	equ	0xFD9
 13053                           status	equ	0xFD8
 13054                           tblptru	equ	0xFF8
 13055                           tblptrh	equ	0xFF7
 13056                           tblptrl	equ	0xFF6
 13057                           tablat	equ	0xFF5
 13058                           prodh	equ	0xFF4
 13059                           prodl	equ	0xFF3
 13060                           intcon	equ	0xFF2
 13061                           postinc0	equ	0xFEE
 13062                           wreg	equ	0xFE8
 13063                           indf1	equ	0xFE7
 13064                           fsr1h	equ	0xFE2
 13065                           fsr1l	equ	0xFE1
 13066                           bsr	equ	0xFE0
 13067                           indf2	equ	0xFDF
 13068                           postinc2	equ	0xFDE
 13069                           postdec2	equ	0xFDD
 13070                           plusw2	equ	0xFDB
 13071                           fsr2h	equ	0xFDA
 13072                           fsr2l	equ	0xFD9
 13073                           status	equ	0xFD8
 13074                           
 13075                           	psect	rparam
 13076  0000                     tblptru	equ	0xFF8
 13077                           tblptrh	equ	0xFF7
 13078                           tblptrl	equ	0xFF6
 13079                           tablat	equ	0xFF5
 13080                           prodh	equ	0xFF4
 13081                           prodl	equ	0xFF3
 13082                           intcon	equ	0xFF2
 13083                           postinc0	equ	0xFEE
 13084                           wreg	equ	0xFE8
 13085                           indf1	equ	0xFE7
 13086                           fsr1h	equ	0xFE2
 13087                           fsr1l	equ	0xFE1
 13088                           bsr	equ	0xFE0
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           postdec2	equ	0xFDD
 13092                           plusw2	equ	0xFDB
 13093                           fsr2h	equ	0xFDA
 13094                           fsr2l	equ	0xFD9
 13095                           status	equ	0xFD8
 13096                           tblptru	equ	0xFF8
 13097                           tblptrh	equ	0xFF7
 13098                           tblptrl	equ	0xFF6
 13099                           tablat	equ	0xFF5
 13100                           prodh	equ	0xFF4
 13101                           prodl	equ	0xFF3
 13102                           intcon	equ	0xFF2
 13103                           postinc0	equ	0xFEE
 13104                           wreg	equ	0xFE8
 13105                           indf1	equ	0xFE7
 13106                           fsr1h	equ	0xFE2
 13107                           fsr1l	equ	0xFE1
 13108                           bsr	equ	0xFE0
 13109                           indf2	equ	0xFDF
 13110                           postinc2	equ	0xFDE
 13111                           postdec2	equ	0xFDD
 13112                           plusw2	equ	0xFDB
 13113                           fsr2h	equ	0xFDA
 13114                           fsr2l	equ	0xFD9
 13115                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     47      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_writeControlReg
    _writeControlReg->_readControlReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readControlReg

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _actionClrAll->_SendInformationEvent
    _actionSetAll->_SendInformationEvent
    _actionClr->_SendInformationEvent
    _actionSet->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   43183
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                         _readEEPROM
                    _writeControlReg
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                15    15      0   12295
                                             22 BANK0     15    15      0
                         _readEEPROM
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         4     3      1    2638
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         4     3      1    2638
                                             78 COMRAM     3     2      1
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1    2793
                                             78 COMRAM     1     0      1
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1    2793
                                             78 COMRAM     1     0      1
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (3) _SendInformationEvent                                 6     4      2    2539
                                             74 COMRAM     4     4      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   18668
                                             20 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    3222
                                             23 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1739
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     270
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     270
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     3     2      1    1328
                                             20 COMRAM     3     2      1
                         _readEEPROM
                    _writeControlReg
                        _writeEEPROM
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (4) _writeControlReg                                      4     3      1     448
                                             16 COMRAM     4     3      1
                         _readEEPROM (ARG)
                     _readControlReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    2010
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     481
                                             16 COMRAM     2     2      0
                         _readEEPROM
                     _readControlReg
 ---------------------------------------------------------------------------------
 (5) _readControlReg                                       9     9      0      48
                                              7 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _readEEPROM
   _writeControlReg
     _readEEPROM (ARG)
     _readControlReg (ARG)
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
       _readControlReg
     _vscp_writeAppReg
       _readEEPROM
       _writeControlReg
         _readEEPROM (ARG)
         _readControlReg (ARG)
       _writeEEPROM
       _vscp_readAppReg (ARG)
         _readEEPROM
         _readControlReg
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
         _readControlReg
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _readEEPROM
         _writeControlReg
           _readEEPROM (ARG)
           _readControlReg (ARG)
         _writeEEPROM
         _vscp_readAppReg (ARG)
           _readEEPROM
           _readControlReg
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _doDM
     _readEEPROM
     _actionSet
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClr
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionSetAll
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _actionClrAll
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2F      5F       5       59.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B7       6        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Apr 24 15:44:15 2015

                __end_of_vscp_readAppReg 2816                    __end_of_sendVSCPFrame 26CC  
                                     PL2 16E2                                       PL4 207C  
                                     PL6 16FA                                       PL8 1E4C  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                            __CFG_BORV$1 000000                  __end_of_vscp_readStdReg 1A78  
                                    PL10 2090                                      PL20 1E6C  
                                    PL12 14CA                                      PL30 21D0  
                                    PL22 20B2                                      PL14 20A0  
                                    PL40 1504                                      PL32 14F6  
                                    PL24 1A78                                      PL16 14E2  
                                    PL34 18EC                                      PL26 1E80  
                                    PL18 1E5A                                      PL36 20C6  
                                    PL28 1E94                                      PL38 1A8C  
                                    l320 24E4                                      l321 24E8  
                                    l313 24CC                                      l145 1EF4  
                                    l330 2504                                      l322 24EC  
                                    l154 1F38                                      l331 2508  
                                    l323 24F0                                      l315 24D0  
                                    l316 24D4                                      l340 23FC  
                                    l317 24D8                                      l326 24F4  
                                    l318 24DC                                      l350 2420  
                                    l342 2400                                      l158 1F52  
                                    l327 24F8                                      l319 24E0  
                                    l343 2404                                      l328 24FC  
                                    l344 2408                                      l177 2734  
                                    l329 2500                                      l353 2424  
                                    l345 240C                       vscp_readStdReg@idx 0019  
                                    l354 2428                                      l346 2410  
                                    l355 242C                                      l347 2414  
                                    l291 1570                                      l356 2430  
                                    l348 2418                                      l357 2434  
                                    l349 241C                                      l454 2AF4  
                                    l358 2438                                      l289 1556  
                                    l718 2914                                      l670 178A  
                                    l646 1CEE                                      l680 17D8  
                                    l672 1798                                      l648 1D0C  
                                    l833 2A4A                                      l690 185E  
                                    l682 17E8                                      l674 17A8  
                                    l691 1878                                      l659 1740  
                                    l676 17B8                                      l669 17FA  
                                    l678 17C8                       vscp_readStdReg@reg 001C  
                                    l856 2602                                      l848 2614  
                                    l857 25E2                                      l849 25A0  
                                    l891 2BB6                                      l980 22E0  
         __size_of_vscp_handleProbeState 00BA                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2B62            __end_of_vscp_handleProbeState 2618  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                                    wreg 000FE8                     __end_of_actionSetAll 2B92  
            ?_doApplicationOneSecondWork 0001                                     l1014 10DC  
                                   l1040 12A8                                     l1116 2DEE  
                                   l1117 2DF0                                     l1038 1258  
                                   l1039 126C                                     l1049 12E4  
                                   l1097 2CCE                                     l5121 180E  
                                   l5131 182E                                     l5221 28CC  
                                   l5213 28A6                                     l5053 172E  
                                   l5223 28D6                                     l5215 28AE  
                                   l5231 28F6                                     l5063 1758  
                                   l5225 28E0                                     l5217 28B8  
                                   l5227 28EA                                     l5219 28C2  
                                   l5171 18D6                                     l7011 0F80  
                    vscp_readStdReg@code 0011                                     l5245 1DE6  
                                   l5157 18A6                                     l5165 18C0  
                                   l5149 187A                                     l5069 176E  
                                   l5077 1778                                     l4613 2D28  
                                   l5183 2E4E                                     l7103 10E0  
                                   l7031 0FA6                                     l3809 26EC  
                                   l7201 124C                                     l7113 1124  
                                   l7105 10FE                                     l6315 2796  
                                   l4619 2D08                                     l3827 2736  
                                   l7123 1180                                     l6333 27E0  
                                   l6325 27C4                                     l5517 2C38  
                                   l5509 2C22                                     l7221 126E  
                                   l7141 11A8                                     l7109 110C  
                                   l7061 100C                                     l7045 0FB2  
                                   l6319 27A6                                     l6415 26CA  
                                   l5703 2560                                     l3863 1BDA  
                                   l3871 1C20                                     l3855 1AA0  
                                   l7151 11CC                                     l7143 11B2  
                                   l7119 116A                                     l7071 1040  
                                   l6431 24B4                vscp_getManufacturerId@idx 000B  
                                   l6329 27D2                                     l6345 2812  
                                   l4681 234C                                     l6513 2AF0  
                                   l7305 1354                                     l7233 1294  
                                   l7081 1074                                     l6339 27F4  
                                   l4683 2394                                     l6603 2008  
                                   l3859 1B54                                     l6371 2160  
                                   l6355 20FC                                     l7251 12C4  
                                   l7139 11A6                                     l7091 10A8  
                                   l6435 24BC                                     l6427 24AC  
                                   l6283 2A14                                     l4941 2C92  
                                   l6533 1C88                                     l6509 2AC2  
                                   l5741 25BE                                     l5717 257E  
                                   l3869 1C12                                     l6365 2140  
                                   l7333 139E                                     l7325 1368  
                                   l7309 1358                                     l7237 129C  
                                   l7229 128C                                     l7157 11F8  
                                   l6461 243C                                     l6453 23E4  
                                   l6277 2A0A                                     l4679 22EE  
                                   l4687 23AE                                     l6527 1C7A  
                                   l5743 25C2                                     l5719 2584  
                                   l6711 1950                                     l6703 1938  
                                   l6359 211A                                     l6391 21CC  
                                   l7247 12AA                                     l6439 250C  
                                   l6471 2B6E                                     l7431 163E  
                                   l6287 2A1C                                     l4689 23BA  
                                   l4929 2936                                     l6561 1D0E  
                                   l6545 1CB2                                     l5737 25BA  
                                   l6641 2AB4                                     l6721 1976  
                                   l6377 2180                                     l6385 21A6  
                                   l7337 13B6                                     l7329 1388  
                                   l7273 12E6                                     l7185 122C  
                                   l7169 120C                                     l6457 23EC  
                                   l6449 23DC                                     l6555 1CF2  
                                   l6715 1960                                     l6707 1944  
                                   l6811 2246                                     l7355 13F0  
                                   l7347 13D6                                     l7443 1692  
                                   l7435 165A                                     l7419 158A  
                                   l7451 16D6                                     l5669 2D68  
                                   l5773 2606                                     l4893 2D48  
                                   l6741 19B0                                     l6733 1998  
                                   l6725 1982                                     l6821 2268  
                                   l6805 222A                                     l7381 1466  
                                   l6485 2B3E                                     l6567 1D3C  
                                   l6575 1D5A                                     l6823 227E  
                                   l7359 1414                                     l7287 130E  
                                   l7439 1676                                     l6585 1D7E  
                                   l6745 19BC                                     l6737 19A4  
                                   l6729 198E                                     l7297 1332  
                                   l7449 16AE                                     l6921 1F32  
                                   l6913 1F1E                                     l6587 1D80  
                                   l6771 1A64                                     l6755 1A06  
                                   l6691 1918                                     l6843 22C6  
                                   l6835 22B2                                     l6819 2264  
                                   l6765 1A4E                                     l6677 2E6A  
                                   l6853 22E2                                     l7397 151A  
                                   l6917 1F28                                     l6933 1F56  
                                   l6909 1F16                                     l6695 1922  
                                   l6775 1A74                                     l6687 190E  
                                   l6919 1F2C                                     l6935 1F6E  
                                   l6929 1F4C                                     l6699 192C  
                                   l6787 2DAE                                     l6971 0F30  
                                   l6963 1FB6                                     l6947 1F9A  
                                   l6973 0F34                                     l6893 1EBA  
                                   l6799 220A                                     l6975 0F38  
                                   l6959 1FAE                                     l6977 0F3C  
                                   l6969 0F2C                                     l6997 0F78  
            __size_of_vscp_getMatrixInfo 0020                                     u4380 2986  
                         sendCANFrame@id 0037                                     u4385 297C  
                                   u4555 1736                                     u4557 1738  
                                   u7310 1A46                                     u7315 1A44  
                                   u7280 19FC                                     u4875 1DAE  
                                   u4885 1DBE                                     u6725 2654  
                                   u7285 19FA                                     u4895 1DEA  
                         sendCANFrame@rv 003E                                     u6965 1FE2  
                                   u6975 1FF2                                     u6985 2010  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   _doDM 150E                    __size_of_vscp_getGUID 0014  
                       ?_vscp_getMDF_URL 0001                                     _main 1EA6  
                                   _init 2AFC                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                    __size_of_vscp_getZone 000A  
                    i1WriteTimer0@timer0 0001                         _vscp_writeAppReg 20D0  
                            _vscp_minute 006F                              _vscp_second 0074  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00B6            __size_of_vscp_doOneSecondWork 0050  
                          __CFG_FOSC$HS2 000000                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0020                            __CFG_MCLRE$ON 000000  
                       _vscp_writeStdReg 21E0                              _writeEEPROM 2CB2  
              ECANReceiveMessage@dataLen 0010                    getVSCPFrame@pPriority 0020  
                   __end_of_getVSCPFrame 2992              __size_of_vscp_getSegmentCRC 000A  
                       __RegsToCANID@val 000A                         __RegsToCANID@ptr 0008  
                   __size_of_getCANFrame 0026                                    _B0CON 000E80  
                                  _B1CON 000E90                                    ?_doDM 0001  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_SendInformationEvent 0056  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 2DD6            ??_vscp_writeNicknamePermanent 000B  
                     writeEEPROM@address 0008                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 2F18                                    _EEADR 000F74  
                        __end_of___lbmod 2C40                  _vscp_handleDropNickname 2B92  
                                  _BSEL0 000E7D                                    _T0CON 000FD5  
                                  i1l133 0060                                    i1l141 00A8  
                                  i1l135 0084                                    i1l136 0086  
                                  i1l137 00A6                                    i1l138 009A  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                         readControlReg@rv 0010  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 2F5C               _vscp_readNicknamePermanent 2F52  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                             _vscp_getGUID 2E98  
                                  doDM@i 00B4                             _vscp_getZone 2F34  
                     vscp_writeAppReg@rv 0016                                    _hours 0068  
              _vscp_getRegisterPagesUsed 2F76                   __size_of_vscp_getEvent 002C  
                           _vscp_setGUID 2D1C                                    tablat 000FF5  
                _vscp_getSubMinorVersion 2F7C                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 2C66  
                   _ECANSetOperationMode 2E42                          __initialization 2D7C  
                           __end_of_doDM 16E2                             __end_of_main 1FBC  
                           __end_of_init 2B32                        ??_writeControlReg 0012  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                         doDM@class_mask 00AB                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00A6  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 0052  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 0F22                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000F73  
                                 _EECON2 000F7E                                   _ANCON0 000F5D  
                                 _ANCON1 000F5C                                   _CIOCON 000F70  
                          doDM@type_mask 00AE                       vscp_writeStdReg@rv 0014  
                          ?_init_app_ram 0001                                   _MDSEL0 007B96  
                                 _MDSEL1 007B97                          __CFG_BBSIZ$BB2K 000000  
                                 i1l5531 003E                                   i1l5541 0062  
                                 i1l5533 0042                                   i1l5525 0024  
                                 i1l5551 0094                                   i1l5543 006E  
                                 i1l5535 0052                                   i1l5527 002C  
                                 i1l5553 00A2                                   i1l5545 0078  
                                 i1l5537 005A                                   i1l5529 0038  
                             _OpenTimer0 2DD6                                   i1l5547 0080  
                                 i1l5539 005E                                   i1l5549 008A  
                         __CFG_WDTEN$OFF 000000                          _init_app_eeprom 26CC  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 2BEE                   writeControlReg@ctrlreg 0013  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1140 00AD  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 2BC2  
                                 _doWork 2F72                         OpenTimer0@config 0008  
                  __size_of_actionClrAll 0030                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000C                      vscp_writeAppReg@reg 0017  
             __end_of_vscp_setSegmentCRC 2ED0                      vscp_writeAppReg@val 0015  
                                 clear_0 2D82                                   clear_1 2D8E  
                  __size_of_actionSetAll 0030                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00BB                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0070                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000B  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 0008                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                               __accesstop 0060  
                __end_of__initialization 2D94                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                             _actionClrAll 2B32  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0074  
                     _vscp_writeRegister 2D9A                ??_interrupt_at_low_vector 0005  
                           _actionSetAll 2B62                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
            __end_of_vscp_check_pstorage 2D7C                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                       __size_of_actionClr 00D0  
                     __size_of_actionSet 00D0                      ?_vscp_writeRegister 0018  
                             __end_ofPL2 16FA                               __end_ofPL4 2090  
                             __end_ofPL6 1708                               __end_ofPL8 1E5A  
                         ??_sendCANFrame 003E               __end_of_vscp_getFamilyCode 2F52  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01E4  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 2F48  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 0018  
        __size_of_vscp_setManufacturerId 0020                 __end_of_vscp_writeAppReg 21D0  
                __size_of_readControlReg 00D8                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 277A              __end_of_vscp_setControlByte 2EBE  
               __end_of_vscp_writeStdReg 22E6                       __RegsToCANID@Value 000E  
                          actionClrAll@i 0050                     ??_vscp_writeRegister 0019  
        __end_of_vscp_handleDropNickname 2BC2                             _getVSCPFrame 291E  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 2F7A                    vscp_writeRegister@reg 0019  
                 ??_ECANSetOperationMode 0008       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 0008                            actionSetAll@i 0050  
        __end_of_vscp_getSubMinorVersion 2F7E                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000B  
                                _B5RXFUL 007687                         WriteTimer0@timer 000A  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000E43                                  _BRGCON2 000E44  
                                _BRGCON3 000E45           SendInformationEvent@eventClass 00A4  
                    vscp_writeStdReg@reg 0015             __end_of_vscp_doOneSecondWork 2A38  
                       __CFG_CANMX$PORTB 000000              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041          __end_of_interrupt_at_low_vector 00B6  
               vscp_readStdReg@code_1113 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 255E                                  _RXB0CON 000F60  
                                _RXB1CON 000F30                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 28A0               __end_of_vscp_getMatrixInfo 2D5C  
                                _TXB0CON 000F20                                  _TXB1CON 000F10  
                                _TXB2CON 000F00                                  _RXFCON0 000E46  
                                _RXFCON1 000E47                       _vscp_goActiveState 2DB8  
                      __end_of_actionClr 248E                        __end_of_actionSet 255E  
                 __size_of_sendVSCPFrame 00B4             __end_of_SendInformationEvent 29E8  
           __end_of_vscp_getMajorVersion 2F82                        writeControlReg@rv 0014  
                        _writeControlReg 1A98                       __size_of_vscp_init 0044  
                SendInformationEvent@idx 004E                               _readEEPROM 2ED0  
                 _vscp_getManufacturerId 2E70                   _vscp_setManufacturerId 2CFC  
                      actionSetAll@param 004F                          _ECANSendMessage 1C24  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0072               __end_of_vscp_getSegmentCRC 2F66  
             ??_vscp_handleProtocolEvent 00A4                            ??_getCANFrame 001C  
      __end_of_vscp_getRegisterPagesUsed 2F78                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 2C18                          getCANFrame@pdlc 001A  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 2F06  
                     _vscp_sendHeartBeat 2C40                                  __pcinit 2D7C  
                         _vscp_deviceURL 0F00                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 1EA6  
                                __ptext1 2F72                                  __ptext2 2F74  
                                __ptext3 29E8                                  __ptext4 2C40  
                                __ptext5 2F2A                                  __ptext6 2F34  
                                __ptext7 2F6E                                  __ptext8 150E  
                                __ptext9 2B32                           _vscp_getUserID 2E84  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00A4  
               ??_vscp_handleSetNickname 000C                                  _minutes 0069  
                                _seconds 006A                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 2F18                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 0011                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00B1                     end_of_initialization 2D94  
           __end_of_vscp_handleHeartbeat 2ABC                 __size_of_vscp_getSubzone 000A  
                   __end_of_sendCANFrame 2AFC                vscp_handleProtocolEvent@i 00BD  
              vscp_handleProtocolEvent@j 00BE                vscp_handleProtocolEvent@k 00B8  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 2C66  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 008A  
                         _vscp_setUserID 2E2A                                  postinc0 000FEE  
                                postinc2 000FDE                         actionClr@dmflags 0001  
                 __end_of_vscp_deviceURL 0F20      __end_of_vscp_writeNicknamePermanent 2EF4  
            _vscp_writeNicknamePermanent 2EE2                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 2618                   __end_of_vscp_getUserID 2E98  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0077CB  
                      __end_of_vscp_init 2A7C                           _vscp_probe_cnt 0073  
                              _PORTAbits 000F80                                _PORTBbits 000F81  
                              _PORTCbits 000F82                      __end_of_getCANFrame 2CB2  
                         _readControlReg 22E6            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 009C  
                       ___lbmod@dividend 0009                  __end_of_writeControlReg 1C24  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 017E  
                     _vscp_setSegmentCRC 2EBE                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00B6                  __end_of_ECANSendMessage 1D88  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00B3  
                   __end_of__RegsToCANID 1E4C                              ?_readEEPROM 0008  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 2C8C  
                             _vscp_error 2F6E                     _vscp_doOneSecondWork 29E8  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0066  
                 __end_of_vscp_setUserID 2E42                   vscp_sendHeartBeat@zone 004C  
                         ?_sendVSCPFrame 003F                     __size_of_writeEEPROM 0026  
                        ?_vscp_getUserID 0001                      actionSetAll@dmflags 0001  
                         __end_of_doWork 2F74             __end_of_vscp_getMinorVersion 2F80  
                            _WriteTimer0 2F06                   __end_of_readControlReg 23BE  
                   _SendInformationEvent 2992                     _vscp_getMajorVersion 2F80  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                              __end_ofPL10 20A0  
                            __end_ofPL20 1E80                              __end_ofPL12 14E2  
                      ?_vscp_writeAppReg 0015                              __end_ofPL30 21E0  
                            __end_ofPL22 20C6                              __end_ofPL14 20B2  
                            __end_ofPL40 150E                              __end_ofPL32 1504  
                            __end_ofPL24 1A8C                              __end_ofPL16 14F6  
                            __end_ofPL34 18FA                              __end_ofPL26 1E94  
                            __end_ofPL18 1E6C                              __end_ofPL36 20D0  
                            __end_ofPL28 1EA6                              __end_ofPL38 1A98  
                    start_initialization 2D7C          __size_of_vscp_handleSetNickname 0024  
                     ??_vscp_writeAppReg 0016                        ?_vscp_writeStdReg 000F  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0010                       _vscp_getFamilyCode 2F48  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 2F3E  
                       doDM@class_filter 00A9                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 2E5A                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00B5                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 14CA  
                        ?_vscp_setUserID 000B                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 0012                                _doDM$1986 00AF  
                              _doDM$1987 00B0                                _doDM$1988 00B1  
                              _doDM$1989 00B2                 ?_vscp_handleDropNickname 0001  
                      ??_vscp_getSubzone 000B                 __end_of__ECANPointBuffer 291E  
                      __CANIDToRegs@type 000E                              _getCANFrame 2C8C  
                               ??_doWork 0008                       _vscp_getBufferSize 2F78  
            vscp_handleProtocolEvent@len 00B2              vscp_handleProtocolEvent@pos 00B0  
             __end_of_ECANReceiveMessage 18EC                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001A                    ?_SendInformationEvent 00A4  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 2F2A  
          __end_of_vscp_goBootloaderMode 2E2A                          ?_readControlReg 0001  
                         actionClr@param 004F                     _vscp_handleHeartbeat 2A7C  
                     __end_of_OpenTimer0 2DF4      __size_of_doApplicationOneSecondWork 0002  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
           __size_of_vscp_check_pstorage 0020                     ??_vscp_getFamilyCode 000C  
               ?_vscp_getSubMinorVersion 0001                              __pbssCOMRAM 0052  
                   ??_vscp_getFamilyType 000C                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 0090                         _vscp_alarmstatus 006B  
                       ?_writeControlReg 0011                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 001E                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 0011                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 2E70                             _init_app_ram 2EF4  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              _actionClr 23BE                                _actionSet 248E  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 2D3C  
                 _vscp_handleSetNickname 2CD8            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0090                           _ECANInitialize 2816  
                               ?___lbmod 0008                           actionSet@param 004F  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 000B  
                            __pintcodelo 0018         vscp_handleProtocolEvent@len_1130 00B4  
                  ?_vscp_handleHeartbeat 0001                  vscp_readStdReg@idx_1114 001A  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 2ABC  
                            __smallconst 0F00                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 2F5C                         actionSet@dmflags 0001  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
         __end_of_vscp_getManufacturerId 2E84           __end_of_vscp_setManufacturerId 2D1C  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1129 00B3  
                        doDM@type_filter 00AD                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0064          SendInformationEvent@eventTypeId 00A5  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                   _vscp_getMinorVersion 2F7E                                _sendTimer 0055  
                             ?_actionClr 004F                               ?_actionSet 004F  
                 __end_of_ECANInitialize 28A0                                 i1u550_20 0080  
                               i1u550_21 007E                                 i1u551_20 0094  
                               i1u551_21 0092                                 i1u552_20 00A2  
                               i1u552_21 00A0                                 i1u546_20 002C  
                               i1u546_21 002A                                 i1u547_20 005A  
                               i1u547_21 0058                                 i1u548_20 006E  
                               i1u548_21 006C                                 i1u549_20 0078  
                               i1u549_21 0076                                 _PIR4bits 000FB7  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 2BEE                                 _RXF0EIDH 000EE2  
                               _RXF0EIDL 000EE3                                 _RXB0OVFL 007B8F  
                               _RXF1EIDH 000EE6                                 _RXF1EIDL 000EE7  
                               _RXB1OVFL 007B8E                                 _RXF0SIDH 000EE0  
                               _RXF0SIDL 000EE1                                 _RXF1SIDH 000EE4  
                               _RXF1SIDL 000EE5                                 _RXM0EIDH 000EFA  
                               _RXM0EIDL 000EFB                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000EFE                                 _RXM1EIDL 000EFF  
                   ??_vscp_getSegmentCRC 000B                                 _RXFBCON0 000E71  
                               _RXFBCON1 000E72                                 _RXFBCON2 000E73  
                               _RXFBCON3 000E74                                 _RXFBCON4 000E75  
                               _RXFBCON5 000E76                                 _RXFBCON6 000E77  
                               _RXFBCON7 000E78                                 _RXM0SIDH 000EF8  
                               _RXM0SIDL 000EF9                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 207C                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1D88                       _vscp_probe_address 0057  
            __size_of_vscp_goActiveState 001E                       writeControlReg@val 0011  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 2A38  
                              _vscp_imsg 0075                                _vscp_hour 006D  
                              _vscp_omsg 0083                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 05A8                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004B  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 2F76  
             _doApplicationOneSecondWork 2F74                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0060  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 00AE                      actionClrAll@dmflags 0001  
           __end_of_vscp_restoreDefaults 2F6E                               _EECON1bits 000F7F  
                          ?_actionClrAll 004F                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                            ?_actionSetAll 004F  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 2DF4  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                       __CFG_BOREN$SBORDIS 000000  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                     __end_of_readEEPROM 2EE2                               ?_vscp_init 0001  
                               __ptext10 2B62                                 __ptext11 23BE  
                               __ptext20 2E2A                                 __ptext12 248E  
                               __ptext21 2CFC                                 __ptext13 2992  
                               __ptext30 2F78                                 __ptext22 2D1C  
                               __ptext14 0F22                                 __ptext31 2F7A  
                               __ptext23 20D0                                 __ptext15 2C18  
                               __ptext40 2B92                                 __ptext32 2E70  
                               __ptext24 1A98                                 __ptext16 2D9A  
                               __ptext41 2A38                                 __ptext33 2E84  
                               __ptext25 2E5A                                 __ptext17 21E0  
                               __ptext50 2618                                 __ptext42 2F52  
                               __ptext34 2DF4                                 __ptext26 18FA  
                               __ptext18 2F66                                 __ptext51 2ABC  
                               __ptext43 2CD8                                 __ptext35 2E98  
                               __ptext27 2F76                                 __ptext19 26CC  
                               __ptext60 2D5C                                 __ptext52 1C24  
                               __ptext44 2A7C                                 __ptext36 2F7C  
                               __ptext28 2F3E                                 __ptext61 2EAC  
                               __ptext53 1FBC                                 __ptext45 2D3C  
                               __ptext37 2F7E                                 __ptext29 2F48  
                               __ptext70 2DD6                                 __ptext62 2EBE  
                               __ptext54 2BC2                                 __ptext46 2E10  
                               __ptext38 2F80                                 __ptext71 2EF4  
                               __ptext63 2F5C                                 __ptext55 291E  
                               __ptext47 255E                                 __ptext39 2BEE  
                               __ptext72 2F06                                 __ptext64 2ED0  
                               __ptext56 2C8C                                 __ptext48 2DB8  
                               __ptext73 22E6                                 __ptext65 2EE2  
                               __ptext57 1708                                 __ptext49 2C66  
                               __ptext74 277A                                 __ptext66 2CB2  
                               __ptext58 1D88                                 __ptext67 2AFC  
                               __ptext59 28A0                                 __ptext76 2F18  
                               __ptext68 2816                                 __ptext69 2E42  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00A4  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 2F2A                         ??_vscp_setUserID 000C  
                          __size_of_doDM 01D4                            __size_of_main 0116  
                          __size_of_init 0036                           ??_actionClrAll 0050  
                            ??_actionClr 0050                              ??_actionSet 0050  
              __size_of_vscp_writeAppReg 0100                      _vscp_check_pstorage 2D5C  
                         ??_actionSetAll 0050           vscp_handleProtocolEvent@i_1131 00BC  
         vscp_handleProtocolEvent@i_1128 00BA           vscp_handleProtocolEvent@i_1139 00B7  
                   __end_of_vscp_getGUID 2EAC                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                         ??_readControlReg 0008  
                           ?_getCANFrame 001A                      ECANSendMessage@mode 002D  
                   __end_of_vscp_getZone 2F3E                      ECANSendMessage@temp 0033  
                      ?__ECANPointBuffer 0008                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 2D3C                       vscp_readAppReg@reg 0012  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00AF  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000E  
                       init_app_eeprom@j 000D                      _vscp_setControlByte 2EAC  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 277A  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 006C                          _vscp_readStdReg 18FA  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 2C18  
                     _ECANReceiveMessage 1708                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 006E                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 2E10  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001         __size_of_vscp_getSubMinorVersion 0002  
                        _vscp_node_state 0071                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
                vscp_setControlByte@ctrl 000B                       ECANSendMessage@ptr 0035  
                      ??_init_app_eeprom 000B                    __size_of__CANIDToRegs 00C0  
                         readEEPROM@data 000A                       __CFG_WDTPS$1048576 000000  
    __size_of_vscp_readNicknamePermanent 000A      __end_of_vscp_getBootLoaderAlgorithm 2F7C  
            _vscp_getBootLoaderAlgorithm 2F7A                    readControlReg@ctrlreg 000F  
       __size_of_interrupt_at_low_vector 009E                        actionClrAll@param 004F  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 2CD8  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 2E10             __end_of_ECANSetOperationMode 2E5A  
                   _vscp_restoreDefaults 2F66              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 2F34  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 2DB8                       __end_of_vscp_error 2F72  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 2CFC  
     vscp_handleProtocolEvent@bytes_1136 00B9                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 1FBC                 __size_of_writeControlReg 018C  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00AB  
            __size_of_vscp_getBufferSize 0002                 __size_of_ECANSendMessage 0164  
