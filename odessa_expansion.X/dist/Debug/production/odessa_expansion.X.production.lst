

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Wed Apr 22 10:35:25 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    87                           	psect	pa_nodes,global,class=CODE,delta=1
    88  0000                     tblptru	equ	0xFF8
    89                           tblptrh	equ	0xFF7
    90                           tblptrl	equ	0xFF6
    91                           tablat	equ	0xFF5
    92                           prodh	equ	0xFF4
    93                           prodl	equ	0xFF3
    94                           intcon	equ	0xFF2
    95                           wreg	equ	0xFE8
    96                           indf1	equ	0xFE7
    97                           fsr1h	equ	0xFE2
    98                           fsr1l	equ	0xFE1
    99                           indf2	equ	0xFDF
   100                           postinc2	equ	0xFDE
   101                           postdec2	equ	0xFDD
   102                           plusw2	equ	0xFDB
   103                           fsr2h	equ	0xFDA
   104                           fsr2l	equ	0xFD9
   105                           status	equ	0xFD8
   106                           
   107                           	psect	smallconst
   108  000F00                     __psmallconst:
   109                           	opt stack 0
   110  000F00                     _vscp_deviceURL:
   111                           	opt stack 0
   112  000F00  77                 	db	119
   113  000F01  77                 	db	119
   114  000F02  77                 	db	119
   115  000F03  2E                 	db	46
   116  000F04  65                 	db	101
   117  000F05  75                 	db	117
   118  000F06  72                 	db	114
   119  000F07  6F                 	db	111
   120  000F08  73                 	db	115
   121  000F09  6F                 	db	111
   122  000F0A  75                 	db	117
   123  000F0B  72                 	db	114
   124  000F0C  63                 	db	99
   125  000F0D  65                 	db	101
   126  000F0E  2E                 	db	46
   127  000F0F  73                 	db	115
   128  000F10  65                 	db	101
   129  000F11  2F                 	db	47
   130  000F12  6F                 	db	111
   131  000F13  64                 	db	100
   132  000F14  65                 	db	101
   133  000F15  73                 	db	115
   134  000F16  73                 	db	115
   135  000F17  61                 	db	97
   136  000F18  30                 	db	48
   137  000F19  30                 	db	48
   138  000F1A  31                 	db	49
   139  000F1B  2E                 	db	46
   140  000F1C  78                 	db	120
   141  000F1D  6D                 	db	109
   142  000F1E  6C                 	db	108
   143  000F1F  00                 	db	0
   144  000F20                     __end_of_vscp_deviceURL:
   145                           	opt stack 0
   146  0000                     _BRGCON1	set	3651
   147  0000                     _BRGCON2	set	3652
   148  0000                     _BRGCON3	set	3653
   149  0000                     _BSEL0	set	3709
   150  0000                     _CANCON	set	3951
   151  0000                     _CIOCON	set	3952
   152  0000                     _ECANCON	set	3954
   153  0000                     _EEADR	set	3956
   154  0000                     _EECON1bits	set	3967
   155  0000                     _EECON2	set	3966
   156  0000                     _EEDATA	set	3955
   157  0000                     _INTCONbits	set	4082
   158  0000                     _MSEL0	set	3705
   159  0000                     _MSEL1	set	3706
   160  0000                     _MSEL2	set	3707
   161  0000                     _PIR4bits	set	4023
   162  0000                     _PORTA	set	3968
   163  0000                     _PORTB	set	3969
   164  0000                     _PORTC	set	3970
   165  0000                     _PORTCbits	set	3970
   166  0000                     _RXB1CONbits	set	3888
   167  0000                     _RXF0EIDH	set	3810
   168  0000                     _RXF0EIDL	set	3811
   169  0000                     _RXF0SIDH	set	3808
   170  0000                     _RXF0SIDL	set	3809
   171  0000                     _RXF1EIDH	set	3814
   172  0000                     _RXF1EIDL	set	3815
   173  0000                     _RXF1SIDL	set	3813
   174  0000                     _RXFBCON0	set	3697
   175  0000                     _RXFBCON1	set	3698
   176  0000                     _RXFBCON2	set	3699
   177  0000                     _RXFBCON3	set	3700
   178  0000                     _RXFBCON4	set	3701
   179  0000                     _RXFBCON5	set	3702
   180  0000                     _RXFBCON6	set	3703
   181  0000                     _RXFBCON7	set	3704
   182  0000                     _RXFCON0	set	3654
   183  0000                     _RXFCON1	set	3655
   184  0000                     _RXM0EIDH	set	3834
   185  0000                     _RXM0EIDL	set	3835
   186  0000                     _RXM0SIDH	set	3832
   187  0000                     _RXM0SIDL	set	3833
   188  0000                     _RXM1EIDH	set	3838
   189  0000                     _RXM1EIDL	set	3839
   190  0000                     _RXM1SIDL	set	3837
   191  0000                     _T0CON	set	4053
   192  0000                     _T0CONbits	set	4053
   193  0000                     _TMR0H	set	4055
   194  0000                     _TMR0L	set	4054
   195  0000                     _TRISA	set	3986
   196  0000                     _TRISB	set	3987
   197  0000                     _TRISC	set	3988
   198  0000                     _B0RXFUL	set	29703
   199  0000                     _B0TXEN	set	29674
   200  0000                     _B1RXFUL	set	29831
   201  0000                     _B1TXEN	set	29675
   202  0000                     _B2RXFUL	set	29959
   203  0000                     _B2TXEN	set	29676
   204  0000                     _B3RXFUL	set	30087
   205  0000                     _B3TXEN	set	29677
   206  0000                     _B4RXFUL	set	30215
   207  0000                     _B4TXEN	set	29678
   208  0000                     _B5RXFUL	set	30343
   209  0000                     _B5TXEN	set	29679
   210  0000                     _FIFOEMPTY	set	31631
   211  0000                     _IRXIF	set	31679
   212  0000                     _MDSEL0	set	31638
   213  0000                     _MDSEL1	set	31639
   214  0000                     _RXB0FILHIT0	set	31488
   215  0000                     _RXB0FUL	set	31495
   216  0000                     _RXB0IF	set	31672
   217  0000                     _RXB0OVFL	set	31631
   218  0000                     _RXB1IF	set	31673
   219  0000                     _RXB1OVFL	set	31630
   220  0000                     _RXF1EN	set	29233
   221  0000                     _RXM0EXIDM	set	30667
   222  0000                     _RXM1EXIDEN	set	30699
   223  0000                     _B0CON	set	3712
   224  0000                     _B1CON	set	3728
   225  0000                     _B2CON	set	3744
   226  0000                     _B3CON	set	3760
   227  0000                     _B4CON	set	3776
   228  0000                     _B5CON	set	3792
   229  0000                     _RXB0CON	set	3936
   230  0000                     _RXB1CON	set	3888
   231  0000                     _RXF1SIDH	set	3812
   232  0000                     _RXM1SIDH	set	3836
   233  0000                     _TXB0CON	set	3872
   234  0000                     _TXB1CON	set	3856
   235  0000                     _TXB2CON	set	3840
   236                           
   237                           ; #config settings
   238  000F20  00                 	db	0	; dummy byte at the end
   239  0000                     tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           prodh	equ	0xFF4
   244                           prodl	equ	0xFF3
   245                           intcon	equ	0xFF2
   246                           wreg	equ	0xFE8
   247                           indf1	equ	0xFE7
   248                           fsr1h	equ	0xFE2
   249                           fsr1l	equ	0xFE1
   250                           indf2	equ	0xFDF
   251                           postinc2	equ	0xFDE
   252                           postdec2	equ	0xFDD
   253                           plusw2	equ	0xFDB
   254                           fsr2h	equ	0xFDA
   255                           fsr2l	equ	0xFD9
   256                           status	equ	0xFD8
   257                           
   258                           	psect	cinit
   259  002876                     __pcinit:
   260                           	opt stack 0
   261  002876                     start_initialization:
   262                           	opt stack 0
   263  002876                     __initialization:
   264                           	opt stack 0
   265                           
   266                           ; Clear objects allocated to BANK0 (48 bytes)
   267  002876  EE00  F060         	lfsr	0,__pbssBANK0
   268  00287A  0E30               	movlw	48
   269  00287C                     clear_0:
   270  00287C  6AEE               	clrf	postinc0,c
   271  00287E  06E8               	decf	wreg,f,c
   272  002880  E1FD               	bnz	clear_0
   273                           
   274                           ; Clear objects allocated to COMRAM (7 bytes)
   275  002882  EE00  F04E         	lfsr	0,__pbssCOMRAM
   276  002886  0E07               	movlw	7
   277  002888                     clear_1:
   278  002888  6AEE               	clrf	postinc0,c
   279  00288A  06E8               	decf	wreg,f,c
   280  00288C  E1FD               	bnz	clear_1
   281  00288E                     end_of_initialization:
   282                           	opt stack 0
   283  00288E                     __end_of__initialization:
   284                           	opt stack 0
   285  00288E  0100               	movlb	0
   286  002890  EF11  F010         	goto	_main	;jump to C main() function
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           prodh	equ	0xFF4
   292                           prodl	equ	0xFF3
   293                           intcon	equ	0xFF2
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           indf1	equ	0xFE7
   297                           fsr1h	equ	0xFE2
   298                           fsr1l	equ	0xFE1
   299                           indf2	equ	0xFDF
   300                           postinc2	equ	0xFDE
   301                           postdec2	equ	0xFDD
   302                           plusw2	equ	0xFDB
   303                           fsr2h	equ	0xFDA
   304                           fsr2l	equ	0xFD9
   305                           status	equ	0xFD8
   306                           
   307                           	psect	bssCOMRAM
   308  00004E                     __pbssCOMRAM:
   309                           	opt stack 0
   310  00004E                     _vscp_page_select:
   311                           	opt stack 0
   312  00004E                     	ds	2
   313  000050                     __ECANRxFilterHitInfo:
   314                           	opt stack 0
   315  000050                     	ds	1
   316  000051                     _sendTimer:
   317                           	opt stack 0
   318  000051                     	ds	1
   319  000052                     _vscp_initledfunc:
   320                           	opt stack 0
   321  000052                     	ds	1
   322  000053                     _vscp_probe_address:
   323                           	opt stack 0
   324  000053                     	ds	1
   325  000054                     _vscp_statuscnt:
   326                           	opt stack 0
   327  000054                     	ds	1
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           prodh	equ	0xFF4
   333                           prodl	equ	0xFF3
   334                           intcon	equ	0xFF2
   335                           postinc0	equ	0xFEE
   336                           wreg	equ	0xFE8
   337                           indf1	equ	0xFE7
   338                           fsr1h	equ	0xFE2
   339                           fsr1l	equ	0xFE1
   340                           indf2	equ	0xFDF
   341                           postinc2	equ	0xFDE
   342                           postdec2	equ	0xFDD
   343                           plusw2	equ	0xFDB
   344                           fsr2h	equ	0xFDA
   345                           fsr2l	equ	0xFD9
   346                           status	equ	0xFD8
   347                           
   348                           	psect	bssBANK0
   349  000060                     __pbssBANK0:
   350                           	opt stack 0
   351  000060                     _measurement_clock:
   352                           	opt stack 0
   353  000060                     	ds	4
   354  000064                     _vscp_configtimer:
   355                           	opt stack 0
   356  000064                     	ds	2
   357  000066                     _vscp_timer:
   358                           	opt stack 0
   359  000066                     	ds	2
   360  000068                     _hours:
   361                           	opt stack 0
   362  000068                     	ds	1
   363  000069                     _minutes:
   364                           	opt stack 0
   365  000069                     	ds	1
   366  00006A                     _seconds:
   367                           	opt stack 0
   368  00006A                     	ds	1
   369  00006B                     _vscp_alarmstatus:
   370                           	opt stack 0
   371  00006B                     	ds	1
   372  00006C                     _vscp_guid_reset:
   373                           	opt stack 0
   374  00006C                     	ds	1
   375  00006D                     _vscp_hour:
   376                           	opt stack 0
   377  00006D                     	ds	1
   378  00006E                     _vscp_initbtncnt:
   379                           	opt stack 0
   380  00006E                     	ds	1
   381  00006F                     _vscp_minute:
   382                           	opt stack 0
   383  00006F                     	ds	1
   384  000070                     _vscp_nickname:
   385                           	opt stack 0
   386  000070                     	ds	1
   387  000071                     _vscp_node_state:
   388                           	opt stack 0
   389  000071                     	ds	1
   390  000072                     _vscp_node_substate:
   391                           	opt stack 0
   392  000072                     	ds	1
   393  000073                     _vscp_probe_cnt:
   394                           	opt stack 0
   395  000073                     	ds	1
   396  000074                     _vscp_second:
   397                           	opt stack 0
   398  000074                     	ds	1
   399  000075                     _vscp_imsg:
   400                           	opt stack 0
   401  000075                     	ds	14
   402  000083                     _vscp_omsg:
   403                           	opt stack 0
   404  000083                     	ds	13
   405                           tblptru	equ	0xFF8
   406                           tblptrh	equ	0xFF7
   407                           tblptrl	equ	0xFF6
   408                           tablat	equ	0xFF5
   409                           prodh	equ	0xFF4
   410                           prodl	equ	0xFF3
   411                           intcon	equ	0xFF2
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           indf1	equ	0xFE7
   415                           fsr1h	equ	0xFE2
   416                           fsr1l	equ	0xFE1
   417                           indf2	equ	0xFDF
   418                           postinc2	equ	0xFDE
   419                           postdec2	equ	0xFDD
   420                           plusw2	equ	0xFDB
   421                           fsr2h	equ	0xFDA
   422                           fsr2l	equ	0xFD9
   423                           status	equ	0xFD8
   424                           
   425                           	psect	cstackBANK0
   426  000090                     __pcstackBANK0:
   427                           	opt stack 0
   428  000090                     ??_sendVSCPFrame:
   429                           
   430                           ; 0 bytes @ 0x0
   431  000090                     	ds	20
   432  0000A4                     ??_vscp_handleProtocolEvent:
   433  0000A4                     ?_vscp_sendHeartBeat:
   434                           	opt stack 0
   435  0000A4                     vscp_sendHeartBeat@subzone:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x14
   439  0000A4                     	ds	7
   440  0000AB                     vscp_handleProtocolEvent@page_save:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x1B
   444  0000AB                     	ds	2
   445  0000AD                     vscp_handleProtocolEvent@page_save_1029:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x1D
   449  0000AD                     	ds	2
   450  0000AF                     vscp_handleProtocolEvent@offset:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1F
   454  0000AF                     	ds	1
   455  0000B0                     vscp_handleProtocolEvent@pos:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x20
   459  0000B0                     	ds	1
   460  0000B1                     vscp_handleProtocolEvent@bytes:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x21
   464  0000B1                     	ds	1
   465  0000B2                     vscp_handleProtocolEvent@len:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x22
   469  0000B2                     	ds	1
   470  0000B3                     vscp_handleProtocolEvent@pos_1018:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x23
   474  0000B3                     	ds	1
   475  0000B4                     vscp_handleProtocolEvent@len_1019:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x24
   479  0000B4                     	ds	1
   480  0000B5                     vscp_handleProtocolEvent@bytes_this_time:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x25
   484  0000B5                     	ds	1
   485  0000B6                     vscp_handleProtocolEvent@cb:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x26
   489  0000B6                     	ds	1
   490  0000B7                     vscp_handleProtocolEvent@i_1028:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x27
   494  0000B7                     	ds	1
   495  0000B8                     vscp_handleProtocolEvent@k:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x28
   499  0000B8                     	ds	1
   500  0000B9                     vscp_handleProtocolEvent@bytes_1025:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x29
   504  0000B9                     	ds	1
   505  0000BA                     vscp_handleProtocolEvent@i_1017:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x2A
   509  0000BA                     	ds	1
   510  0000BB                     vscp_handleProtocolEvent@byte:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x2B
   514  0000BB                     	ds	1
   515  0000BC                     vscp_handleProtocolEvent@i_1020:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x2C
   519  0000BC                     	ds	1
   520  0000BD                     vscp_handleProtocolEvent@i:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x2D
   524  0000BD                     	ds	1
   525  0000BE                     vscp_handleProtocolEvent@j:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x2E
   529  0000BE                     	ds	1
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           prodh	equ	0xFF4
   535                           prodl	equ	0xFF3
   536                           intcon	equ	0xFF2
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           indf1	equ	0xFE7
   540                           fsr1h	equ	0xFE2
   541                           fsr1l	equ	0xFE1
   542                           indf2	equ	0xFDF
   543                           postinc2	equ	0xFDE
   544                           postdec2	equ	0xFDD
   545                           plusw2	equ	0xFDB
   546                           fsr2h	equ	0xFDA
   547                           fsr2l	equ	0xFD9
   548                           status	equ	0xFD8
   549                           
   550                           	psect	cstackCOMRAM
   551  000001                     __pcstackCOMRAM:
   552                           	opt stack 0
   553  000001                     ?i1_WriteTimer0:
   554                           	opt stack 0
   555  000001                     i1WriteTimer0@timer0:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x0
   559  000001                     	ds	2
   560  000003                     i1WriteTimer0@timer:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x2
   564  000003                     	ds	2
   565  000005                     ??_interrupt_at_low_vector:
   566                           
   567                           ; 0 bytes @ 0x4
   568  000005                     	ds	3
   569  000008                     ?_WriteTimer0:
   570                           	opt stack 0
   571  000008                     ?_writeEEPROM:
   572                           	opt stack 0
   573  000008                     ?__CANIDToRegs:
   574                           	opt stack 0
   575  000008                     ?__RegsToCANID:
   576                           	opt stack 0
   577  000008                     ??_vscp_getMDF_URL:
   578  000008                     ?_readEEPROM:
   579                           	opt stack 0
   580  000008                     ?___lbmod:
   581                           	opt stack 0
   582  000008                     ?__ECANPointBuffer:
   583                           	opt stack 0
   584  000008                     ?_vscp_getFamilyCode:
   585                           	opt stack 0
   586  000008                     ?_vscp_getFamilyType:
   587                           	opt stack 0
   588  000008                     vscp_getMatrixInfo@i:
   589                           	opt stack 0
   590  000008                     ECANSetOperationMode@mode:
   591                           	opt stack 0
   592  000008                     OpenTimer0@config:
   593                           	opt stack 0
   594  000008                     ___lbmod@divisor:
   595                           	opt stack 0
   596  000008                     __CANIDToRegs@ptr:
   597                           	opt stack 0
   598  000008                     __RegsToCANID@ptr:
   599                           	opt stack 0
   600  000008                     writeEEPROM@address:
   601                           	opt stack 0
   602  000008                     readEEPROM@address:
   603                           	opt stack 0
   604  000008                     WriteTimer0@timer0:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x7
   608  000008                     	ds	1
   609  000009                     vscp_getMDF_URL@idx:
   610                           	opt stack 0
   611  000009                     ___lbmod@dividend:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x8
   615  000009                     	ds	1
   616  00000A                     __RegsToCANID@val:
   617                           	opt stack 0
   618  00000A                     writeEEPROM@data:
   619                           	opt stack 0
   620  00000A                     readEEPROM@data:
   621                           	opt stack 0
   622  00000A                     ___lbmod@counter:
   623                           	opt stack 0
   624  00000A                     WriteTimer0@timer:
   625                           	opt stack 0
   626  00000A                     __CANIDToRegs@val:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x9
   630  00000A                     	ds	1
   631  00000B                     ??_init_app_eeprom:
   632  00000B                     ?_actionSet:
   633                           	opt stack 0
   634  00000B                     ?_actionClr:
   635                           	opt stack 0
   636  00000B                     ?_actionSetAll:
   637                           	opt stack 0
   638  00000B                     ?_actionClrAll:
   639                           	opt stack 0
   640  00000B                     ?_vscp_setGUID:
   641                           	opt stack 0
   642  00000B                     ?_vscp_setManufacturerId:
   643                           	opt stack 0
   644  00000B                     ?_vscp_setUserID:
   645                           	opt stack 0
   646  00000B                     vscp_setGUID@data:
   647                           	opt stack 0
   648  00000B                     vscp_setManufacturerId@data:
   649                           	opt stack 0
   650  00000B                     vscp_writeNicknamePermanent@nickname:
   651                           	opt stack 0
   652  00000B                     vscp_readAppReg@rv:
   653                           	opt stack 0
   654  00000B                     vscp_getGUID@idx:
   655                           	opt stack 0
   656  00000B                     vscp_getUserID@idx:
   657                           	opt stack 0
   658  00000B                     vscp_setUserID@data:
   659                           	opt stack 0
   660  00000B                     vscp_getManufacturerId@idx:
   661                           	opt stack 0
   662  00000B                     vscp_setSegmentCRC@crc:
   663                           	opt stack 0
   664  00000B                     vscp_setControlByte@ctrl:
   665                           	opt stack 0
   666  00000B                     vscp_goBootloaderMode@algorithm:
   667                           	opt stack 0
   668  00000B                     __RegsToCANID@type:
   669                           	opt stack 0
   670  00000B                     __ECANPointBuffer@b:
   671                           	opt stack 0
   672  00000B                     ___lbmod@rem:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0xA
   676  00000B                     	ds	1
   677  00000C                     ??_doDM:
   678  00000C                     ??__RegsToCANID:
   679  00000C                     ??_vscp_readStdReg:
   680  00000C                     vscp_setGUID@idx:
   681                           	opt stack 0
   682  00000C                     vscp_setManufacturerId@idx:
   683                           	opt stack 0
   684  00000C                     vscp_readAppReg@reg:
   685                           	opt stack 0
   686  00000C                     vscp_setUserID@idx:
   687                           	opt stack 0
   688  00000C                     vscp_handleDropNickname@bytes:
   689                           	opt stack 0
   690  00000C                     __ECANPointBuffer@pt:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0xB
   694  00000C                     	ds	1
   695  00000D                     ?_vscp_writeAppReg:
   696                           	opt stack 0
   697  00000D                     init_app_eeprom@j:
   698                           	opt stack 0
   699  00000D                     vscp_writeAppReg@val:
   700                           	opt stack 0
   701                           
   702                           ; 1 bytes @ 0xC
   703  00000D                     	ds	1
   704  00000E                     init_app_eeprom@i:
   705                           	opt stack 0
   706  00000E                     vscp_writeAppReg@rv:
   707                           	opt stack 0
   708  00000E                     __CANIDToRegs@type:
   709                           	opt stack 0
   710  00000E                     __RegsToCANID@Value:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0xD
   714  00000E                     	ds	1
   715  00000F                     ??__CANIDToRegs:
   716  00000F                     ?_ECANReceiveMessage:
   717                           	opt stack 0
   718  00000F                     ?_vscp_writeStdReg:
   719                           	opt stack 0
   720  00000F                     vscp_writeAppReg@reg:
   721                           	opt stack 0
   722  00000F                     ECANReceiveMessage@data:
   723                           	opt stack 0
   724  00000F                     vscp_writeStdReg@value:
   725                           	opt stack 0
   726  00000F                     doDM@class_filter:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0xE
   730  00000F                     	ds	1
   731  000010                     ??_vscp_writeStdReg:
   732  000010                     ECANReceiveMessage@dataLen:
   733                           	opt stack 0
   734                           
   735                           ; 1 bytes @ 0xF
   736  000010                     	ds	1
   737  000011                     ECANReceiveMessage@msgFlags:
   738                           	opt stack 0
   739  000011                     __CANIDToRegs@Value:
   740                           	opt stack 0
   741  000011                     doDM@class_mask:
   742                           	opt stack 0
   743  000011                     vscp_readStdReg@code:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x10
   747  000011                     	ds	1
   748  000012                     ?_ECANSendMessage:
   749                           	opt stack 0
   750  000012                     ECANReceiveMessage@savedPtr:
   751                           	opt stack 0
   752  000012                     ECANSendMessage@id:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x11
   756  000012                     	ds	1
   757  000013                     doDM@type_filter:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x12
   761  000013                     	ds	1
   762  000014                     doDM@type_mask:
   763                           	opt stack 0
   764  000014                     ECANReceiveMessage@id:
   765                           	opt stack 0
   766  000014                     vscp_writeStdReg@rv:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x13
   770  000014                     	ds	1
   771  000015                     doDM@dmflags:
   772                           	opt stack 0
   773  000015                     ECANReceiveMessage@i:
   774                           	opt stack 0
   775  000015                     vscp_writeStdReg@reg:
   776                           	opt stack 0
   777  000015                     vscp_readStdReg@code_1002:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0x14
   781  000015                     	ds	1
   782  000016                     ?_vscp_writeRegister:
   783                           	opt stack 0
   784  000016                     doDM@i:
   785                           	opt stack 0
   786  000016                     ECANReceiveMessage@mode:
   787                           	opt stack 0
   788  000016                     vscp_writeRegister@value:
   789                           	opt stack 0
   790  000016                     ECANSendMessage@data:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x15
   794  000016                     	ds	1
   795  000017                     ECANReceiveMessage@temp:
   796                           	opt stack 0
   797  000017                     vscp_writeRegister@reg:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x16
   801  000017                     	ds	1
   802  000018                     ECANSendMessage@dataLen:
   803                           	opt stack 0
   804  000018                     ECANReceiveMessage@ptr:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x17
   808  000018                     	ds	1
   809  000019                     ECANSendMessage@msgFlags:
   810                           	opt stack 0
   811  000019                     vscp_readStdReg@idx:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x18
   815  000019                     	ds	1
   816  00001A                     ??_ECANSendMessage:
   817  00001A                     ?_getCANFrame:
   818                           	opt stack 0
   819  00001A                     getCANFrame@pdlc:
   820                           	opt stack 0
   821  00001A                     vscp_readStdReg@idx_1003:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x19
   825  00001A                     	ds	1
   826  00001B                     getCANFrame@pdata:
   827                           	opt stack 0
   828  00001B                     vscp_readStdReg@rv:
   829                           	opt stack 0
   830  00001B                     ECANSendMessage@pb:
   831                           	opt stack 0
   832                           
   833                           ; 18 bytes @ 0x1A
   834  00001B                     	ds	1
   835  00001C                     getCANFrame@pid:
   836                           	opt stack 0
   837  00001C                     vscp_readStdReg@reg:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x1B
   841  00001C                     	ds	1
   842  00001D                     getCANFrame@flags:
   843                           	opt stack 0
   844  00001D                     vscp_readRegister@reg:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x1C
   848  00001D                     	ds	1
   849  00001E                     ?_getVSCPFrame:
   850                           	opt stack 0
   851  00001E                     getVSCPFrame@pvscptype:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x1D
   855  00001E                     	ds	1
   856  00001F                     getVSCPFrame@pNodeId:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0x1E
   860  00001F                     	ds	1
   861  000020                     getVSCPFrame@pPriority:
   862                           	opt stack 0
   863                           
   864                           ; 1 bytes @ 0x1F
   865  000020                     	ds	1
   866  000021                     getVSCPFrame@pSize:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x20
   870  000021                     	ds	1
   871  000022                     getVSCPFrame@pData:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x21
   875  000022                     	ds	1
   876  000023                     ??_getVSCPFrame:
   877                           
   878                           ; 0 bytes @ 0x22
   879  000023                     	ds	4
   880  000027                     getVSCPFrame@pvscpclass:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x26
   884  000027                     	ds	1
   885  000028                     getVSCPFrame@id:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x27
   889  000028                     	ds	4
   890  00002C                     vscp_getEvent@rv:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x2B
   894  00002C                     	ds	1
   895  00002D                     ECANSendMessage@mode:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x2C
   899  00002D                     	ds	1
   900  00002E                     ECANSendMessage@buffers:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x2D
   904  00002E                     	ds	1
   905  00002F                     ECANSendMessage@j:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x2E
   909  00002F                     	ds	1
   910  000030                     ECANSendMessage@tempBSEL0:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x2F
   914  000030                     	ds	1
   915  000031                     ECANSendMessage@tempPtr:
   916                           	opt stack 0
   917                           
   918                           ; 2 bytes @ 0x30
   919  000031                     	ds	2
   920  000033                     ECANSendMessage@temp:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x32
   924  000033                     	ds	1
   925  000034                     ECANSendMessage@i:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x33
   929  000034                     	ds	1
   930  000035                     ECANSendMessage@ptr:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x34
   934  000035                     	ds	2
   935  000037                     ?_sendCANFrame:
   936                           	opt stack 0
   937  000037                     sendCANFrame@id:
   938                           	opt stack 0
   939                           
   940                           ; 4 bytes @ 0x36
   941  000037                     	ds	4
   942  00003B                     sendCANFrame@dlc:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x3A
   946  00003B                     	ds	1
   947  00003C                     sendCANFrame@pdata:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x3B
   951  00003C                     	ds	2
   952  00003E                     sendCANFrame@rv:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x3D
   956  00003E                     	ds	1
   957  00003F                     ?_sendVSCPFrame:
   958                           	opt stack 0
   959  00003F                     sendVSCPFrame@vscpclass:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x3E
   963  00003F                     	ds	2
   964  000041                     sendVSCPFrame@vscptype:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x40
   968  000041                     	ds	1
   969  000042                     sendVSCPFrame@nodeid:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x41
   973  000042                     	ds	1
   974  000043                     sendVSCPFrame@priority:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x42
   978  000043                     	ds	1
   979  000044                     sendVSCPFrame@size:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x43
   983  000044                     	ds	1
   984  000045                     sendVSCPFrame@pData:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x44
   988  000045                     	ds	2
   989  000047                     sendVSCPFrame@id:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x46
   993  000047                     	ds	4
   994  00004B                     
   995                           ; 0 bytes @ 0x4A
   996  00004B                     	ds	1
   997  00004C                     ??_vscp_newNodeOnline:
   998  00004C                     vscp_sendHeartBeat@zone:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x4B
  1002  00004C                     	ds	1
  1003  00004D                     ??_vscp_doOneSecondWork:
  1004                           
  1005                           ; 0 bytes @ 0x4C
  1006  00004D                     	ds	1
  1007  00004E                     tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           prodh	equ	0xFF4
  1012                           prodl	equ	0xFF3
  1013                           intcon	equ	0xFF2
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           indf1	equ	0xFE7
  1017                           fsr1h	equ	0xFE2
  1018                           fsr1l	equ	0xFE1
  1019                           indf2	equ	0xFDF
  1020                           postinc2	equ	0xFDE
  1021                           postdec2	equ	0xFDD
  1022                           plusw2	equ	0xFDB
  1023                           fsr2h	equ	0xFDA
  1024                           fsr2l	equ	0xFD9
  1025                           status	equ	0xFD8
  1026                           
  1027                           ; 0 bytes @ 0x4D
  1028 ;;
  1029 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1030 ;;
  1031 ;; *************** function _main *****************
  1032 ;; Defined at:
  1033 ;;		line 200 in file "../main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;		None               void
  1040 ;; Registers used:
  1041 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : F/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1051 ;;Total ram usage:        0 bytes
  1052 ;; Hardware stack levels required when called:    9
  1053 ;; This function calls:
  1054 ;;		_init
  1055 ;;		_vscp_check_pstorage
  1056 ;;		_init_app_eeprom
  1057 ;;		_init_app_ram
  1058 ;;		_vscp_init
  1059 ;;		_writeEEPROM
  1060 ;;		_vscp_getEvent
  1061 ;;		_vscp_goActiveState
  1062 ;;		_vscp_handleProbeState
  1063 ;;		_vscp_handleProtocolEvent
  1064 ;;		_doDM
  1065 ;;		_vscp_error
  1066 ;;		_vscp_doOneSecondWork
  1067 ;;		_doApplicationOneSecondWork
  1068 ;;		_doWork
  1069 ;; This function is called by:
  1070 ;;		Startup code after reset
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text0
  1075  002022                     __ptext0:
  1076                           	opt stack 0
  1077  002022                     _main:
  1078                           	opt stack 22
  1079                           
  1080                           ;main.c: 201: init();
  1081                           
  1082                           ;incstack = 0
  1083                           ;incstack = 0
  1084  002022  EC46  F013         	call	_init	;wreg free
  1085                           
  1086                           ;main.c: 205: if ( !vscp_check_pstorage() ) {
  1087  002026  EC2B  F014         	call	_vscp_check_pstorage	;wreg free
  1088  00202A  0900               	iorlw	0
  1089  00202C  E104               	bnz	l5231
  1090                           
  1091                           ;main.c: 208: init_app_eeprom();
  1092  00202E  EC38  F011         	call	_init_app_eeprom	;wreg free
  1093                           
  1094                           ;main.c: 209: init_app_ram();
  1095  002032  ECF7  F014         	call	_init_app_ram	;wreg free
  1096  002036                     l5231:
  1097                           
  1098                           ;main.c: 212: }
  1099                           ;main.c: 214: vscp_init();
  1100  002036  ECCC  F012         	call	_vscp_init	;wreg free
  1101  00203A                     l133:
  1102                           
  1103                           ; BSR set to: 0
  1104  00203A  0004               	clrwdt		;# 
  1105                           
  1106                           ;main.c: 220: if ( ( vscp_initbtncnt > 250 ) &&
  1107                           ;main.c: 221: ( 0x01 != vscp_node_state ) ) {
  1108  00203C  0EFA               	movlw	250
  1109  00203E  0100               	movlb	0	; () banked
  1110  002040  656E               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1111  002042  D00C               	goto	l5243
  1112                           
  1113                           ; BSR set to: 0
  1114  002044  0571               	decf	_vscp_node_state& (0+255),w,b
  1115  002046  E00A               	bz	l5243
  1116                           
  1117                           ; BSR set to: 0
  1118                           ;main.c: 224: vscp_nickname = 0xff;
  1119  002048  6970               	setf	_vscp_nickname& (0+255),b
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 225: writeEEPROM( 0x01, 0xff );
  1123  00204A  6A09               	clrf	?_writeEEPROM+1,c
  1124  00204C  0E01               	movlw	1
  1125  00204E  6E08               	movwf	?_writeEEPROM,c
  1126  002050  0EFF               	movlw	255
  1127  002052  680A               	setf	?_writeEEPROM+2,c
  1128  002054  ECD6  F013         	call	_writeEEPROM	;wreg free
  1129                           
  1130                           ;main.c: 226: vscp_init();
  1131  002058  ECCC  F012         	call	_vscp_init	;wreg free
  1132  00205C                     l5243:
  1133                           
  1134                           ; BSR set to: 0
  1135                           ;main.c: 228: }
  1136                           ;main.c: 231: vscp_imsg.flags = 0;
  1137  00205C  6B75               	clrf	_vscp_imsg& (0+255),b
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;main.c: 232: vscp_getEvent();
  1141  00205E  EC5E  F013         	call	_vscp_getEvent	;wreg free
  1142                           
  1143                           ;main.c: 234: switch ( vscp_node_state ) {
  1144  002062  D01C               	goto	l5269
  1145  002064                     l5247:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;main.c: 239: if (0xff == vscp_nickname) {
  1149  002064  2970               	incf	_vscp_nickname& (0+255),w,b
  1150  002066  E103               	bnz	l5251
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 241: vscp_node_state = 0x01;
  1154  002068  0E01               	movlw	1
  1155  00206A  6F71               	movwf	_vscp_node_state& (0+255),b
  1156                           
  1157                           ;main.c: 242: } else {
  1158  00206C  D023               	goto	l5271
  1159  00206E                     l5251:
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;main.c: 244: vscp_node_state = 0x03;
  1163  00206E  0E03               	movlw	3
  1164  002070  6F71               	movwf	_vscp_node_state& (0+255),b
  1165  002072                     l5253:
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;main.c: 245: vscp_goActiveState();
  1169  002072  EC59  F014         	call	_vscp_goActiveState	;wreg free
  1170  002076  D01E               	goto	l5271
  1171  002078                     l5255:
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 250: vscp_handleProbeState();
  1175  002078  EC81  F010         	call	_vscp_handleProbeState	;wreg free
  1176                           
  1177                           ;main.c: 251: break;
  1178  00207C  D01B               	goto	l5271
  1179  00207E                     l142:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;main.c: 260: if (vscp_imsg.flags & 0x80) {
  1183  00207E  AF75               	btfss	_vscp_imsg& (0+255),7,b
  1184  002080  D019               	goto	l5271
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 262: if ( 0 == vscp_imsg.vscp_class ) {
  1188  002082  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1189  002084  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1190  002086  B4D8               	btfsc	status,2,c
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;main.c: 265: vscp_handleProtocolEvent();
  1194  002088  EC91  F007         	call	_vscp_handleProtocolEvent	;wreg free
  1195                           
  1196                           ;main.c: 267: }
  1197                           ;main.c: 269: doDM();
  1198  00208C  EC82  F00B         	call	_doDM	;wreg free
  1199  002090  D011               	goto	l5271
  1200  002092                     l5265:
  1201                           
  1202                           ; BSR set to: 0
  1203                           ;main.c: 275: vscp_error();
  1204  002092  EC34  F015         	call	_vscp_error	;wreg free
  1205                           
  1206                           ;main.c: 276: break;
  1207  002096  D00E               	goto	l5271
  1208  002098                     l146:
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 279: vscp_node_state = 0x00;
  1212  002098  6B71               	clrf	_vscp_node_state& (0+255),b
  1213                           
  1214                           ;main.c: 280: break;
  1215  00209A  D00C               	goto	l5271
  1216  00209C                     l5269:
  1217  00209C  0100               	movlb	0	; () banked
  1218  00209E  5171               	movf	_vscp_node_state& (0+255),w,b
  1219                           
  1220                           ; Switch size 1, requested type "space"
  1221                           ; Number of cases is 5, Range of values is 0 to 4
  1222                           ; switch strategies available:
  1223                           ; Name         Instructions Cycles
  1224                           ; simple_byte           16     9 (average)
  1225                           ;	Chosen strategy is simple_byte
  1226  0020A0  E0E1               	bz	l5247
  1227  0020A2  0A01               	xorlw	1	; case 1
  1228  0020A4  E0E9               	bz	l5255
  1229  0020A6  0A03               	xorlw	3	; case 2
  1230  0020A8  E0E4               	bz	l5253
  1231  0020AA  0A01               	xorlw	1	; case 3
  1232  0020AC  E0E8               	bz	l142
  1233  0020AE  0A07               	xorlw	7	; case 4
  1234  0020B0  E0F0               	bz	l5265
  1235  0020B2  D7F2               	goto	l146
  1236  0020B4                     l5271:
  1237                           
  1238                           ;main.c: 285: if ( measurement_clock > 1000 ) {
  1239  0020B4  0EE9               	movlw	233
  1240  0020B6  0100               	movlb	0	; () banked
  1241  0020B8  5D60               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1242  0020BA  0E03               	movlw	3
  1243  0020BC  5961               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1244  0020BE  0E00               	movlw	0
  1245  0020C0  5962               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1246  0020C2  0E00               	movlw	0
  1247  0020C4  5963               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1248  0020C6  E30C               	bnc	l5283
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 287: measurement_clock = 0;
  1252  0020C8  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
  1253  0020CA  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1254  0020CC  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1255  0020CE  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 289: sendTimer++;
  1259  0020D0  2A51               	incf	_sendTimer,f,c
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;main.c: 292: vscp_doOneSecondWork();
  1263  0020D2  ECA4  F012         	call	_vscp_doOneSecondWork	;wreg free
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 296: if ( 0x03 == vscp_node_state ) {
  1267  0020D6  5171               	movf	_vscp_node_state& (0+255),w,b
  1268  0020D8  0A03               	xorlw	3
  1269  0020DA  B4D8               	btfsc	status,2,c
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 299: doApplicationOneSecondWork();
  1273  0020DC  EC37  F015         	call	_doApplicationOneSecondWork	;wreg free
  1274  0020E0                     l5283:
  1275                           
  1276                           ; BSR set to: 0
  1277                           ;main.c: 301: }
  1278                           ;main.c: 303: }
  1279                           ;main.c: 306: if ( seconds > 59 ) {
  1280  0020E0  0E3B               	movlw	59
  1281  0020E2  656A               	cpfsgt	_seconds& (0+255),b
  1282  0020E4  D00B               	goto	l5299
  1283                           
  1284                           ; BSR set to: 0
  1285                           ;main.c: 308: seconds = 0;
  1286  0020E6  6B6A               	clrf	_seconds& (0+255),b
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 309: minutes++;
  1290  0020E8  2B69               	incf	_minutes& (0+255),f,b
  1291                           
  1292                           ; BSR set to: 0
  1293                           ;main.c: 311: if ( minutes > 59 ) {
  1294  0020EA  0E3B               	movlw	59
  1295  0020EC  6569               	cpfsgt	_minutes& (0+255),b
  1296  0020EE  D002               	goto	l5295
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;main.c: 312: minutes = 0;
  1300  0020F0  6B69               	clrf	_minutes& (0+255),b
  1301                           
  1302                           ; BSR set to: 0
  1303                           ;main.c: 313: hours++;
  1304  0020F2  2B68               	incf	_hours& (0+255),f,b
  1305  0020F4                     l5295:
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;main.c: 314: }
  1309                           ;main.c: 316: if ( hours > 23 ) hours = 0;
  1310  0020F4  0E17               	movlw	23
  1311  0020F6  6568               	cpfsgt	_hours& (0+255),b
  1312  0020F8  D001               	goto	l5299
  1313                           
  1314                           ; BSR set to: 0
  1315  0020FA  6B68               	clrf	_hours& (0+255),b
  1316  0020FC                     l5299:
  1317                           
  1318                           ; BSR set to: 0
  1319                           ;main.c: 318: }
  1320                           ;main.c: 320: doWork();
  1321  0020FC  EC36  F015         	call	_doWork	;wreg free
  1322  002100  D79C               	goto	l133
  1323  002102                     __end_of_main:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           prodh	equ	0xFF4
  1330                           prodl	equ	0xFF3
  1331                           intcon	equ	0xFF2
  1332                           postinc0	equ	0xFEE
  1333                           wreg	equ	0xFE8
  1334                           indf1	equ	0xFE7
  1335                           fsr1h	equ	0xFE2
  1336                           fsr1l	equ	0xFE1
  1337                           indf2	equ	0xFDF
  1338                           postinc2	equ	0xFDE
  1339                           postdec2	equ	0xFDD
  1340                           plusw2	equ	0xFDB
  1341                           fsr2h	equ	0xFDA
  1342                           fsr2l	equ	0xFD9
  1343                           status	equ	0xFD8
  1344                           
  1345 ;; *************** function _doWork *****************
  1346 ;; Defined at:
  1347 ;;		line 598 in file "../main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;		None               void
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : F/0
  1358 ;;		On exit  : F/0
  1359 ;;		Unchanged: F/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; Hardware stack levels required when called:    2
  1368 ;; This function calls:
  1369 ;;		Nothing
  1370 ;; This function is called by:
  1371 ;;		_main
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           	psect	text1
  1376  002A6C                     __ptext1:
  1377                           	opt stack 0
  1378  002A6C                     _doWork:
  1379                           	opt stack 28
  1380                           
  1381                           ; BSR set to: 0
  1382                           
  1383                           ; BSR set to: 0
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;incstack = 0
  1387                           ;incstack = 0
  1388  002A6C  0012               	return	
  1389  002A6E                     __end_of_doWork:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           prodh	equ	0xFF4
  1396                           prodl	equ	0xFF3
  1397                           intcon	equ	0xFF2
  1398                           postinc0	equ	0xFEE
  1399                           wreg	equ	0xFE8
  1400                           indf1	equ	0xFE7
  1401                           fsr1h	equ	0xFE2
  1402                           fsr1l	equ	0xFE1
  1403                           indf2	equ	0xFDF
  1404                           postinc2	equ	0xFDE
  1405                           postdec2	equ	0xFDD
  1406                           plusw2	equ	0xFDB
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function _doApplicationOneSecondWork *****************
  1412 ;; Defined at:
  1413 ;;		line 480 in file "../main.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;		None
  1418 ;; Return value:  Size  Location     Type
  1419 ;;		None               void
  1420 ;; Registers used:
  1421 ;;		None
  1422 ;; Tracked objects:
  1423 ;;		On entry : F/0
  1424 ;;		On exit  : F/0
  1425 ;;		Unchanged: F/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;Total ram usage:        0 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    2
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_main
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text2
  1442  002A6E                     __ptext2:
  1443                           	opt stack 0
  1444  002A6E                     _doApplicationOneSecondWork:
  1445                           	opt stack 28
  1446                           
  1447                           ; BSR set to: 0
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;incstack = 0
  1451                           ;incstack = 0
  1452  002A6E  0012               	return	
  1453  002A70                     __end_of_doApplicationOneSecondWork:
  1454                           	opt stack 0
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           prodh	equ	0xFF4
  1460                           prodl	equ	0xFF3
  1461                           intcon	equ	0xFF2
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           indf1	equ	0xFE7
  1465                           fsr1h	equ	0xFE2
  1466                           fsr1l	equ	0xFE1
  1467                           indf2	equ	0xFDF
  1468                           postinc2	equ	0xFDE
  1469                           postdec2	equ	0xFDD
  1470                           plusw2	equ	0xFDB
  1471                           fsr2h	equ	0xFDA
  1472                           fsr2l	equ	0xFD9
  1473                           status	equ	0xFD8
  1474                           
  1475 ;; *************** function _vscp_doOneSecondWork *****************
  1476 ;; Defined at:
  1477 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  1478 ;; Parameters:    Size  Location     Type
  1479 ;;		None
  1480 ;; Auto vars:     Size  Location     Type
  1481 ;;		None
  1482 ;; Return value:  Size  Location     Type
  1483 ;;		None               void
  1484 ;; Registers used:
  1485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1486 ;; Tracked objects:
  1487 ;;		On entry : F/0
  1488 ;;		On exit  : F/0
  1489 ;;		Unchanged: 0/0
  1490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1493 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1494 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1495 ;;Total ram usage:        1 bytes
  1496 ;; Hardware stack levels used:    1
  1497 ;; Hardware stack levels required when called:    8
  1498 ;; This function calls:
  1499 ;;		_vscp_getZone
  1500 ;;		_vscp_getSubzone
  1501 ;;		_vscp_sendHeartBeat
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text3
  1508  002548                     __ptext3:
  1509                           	opt stack 0
  1510  002548                     _vscp_doOneSecondWork:
  1511                           	opt stack 22
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;vscp_firmware.c: 518: ++vscp_second;
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;incstack = 0
  1518                           ;incstack = 0
  1519  002548  2B74               	incf	_vscp_second& (0+255),f,b
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  1523  00254A  0E3B               	movlw	59
  1524  00254C  6574               	cpfsgt	_vscp_second& (0+255),b
  1525  00254E  D00D               	goto	l5823
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;vscp_firmware.c: 521: vscp_second = 0;
  1529  002550  6B74               	clrf	_vscp_second& (0+255),b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;vscp_firmware.c: 522: vscp_minute++;
  1533  002552  2B6F               	incf	_vscp_minute& (0+255),f,b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  1537  002554  5171               	movf	_vscp_node_state& (0+255),w,b
  1538  002556  0A03               	xorlw	3
  1539  002558  E108               	bnz	l5823
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  1543                           ;vscp_firmware.c: 527: vscp_getSubzone());
  1544  00255A  EC12  F015         	call	_vscp_getSubzone	;wreg free
  1545  00255E  0100               	movlb	0	; () banked
  1546  002560  6FA4               	movwf	?_vscp_sendHeartBeat& (0+255),b
  1547  002562  EC17  F015         	call	_vscp_getZone	;wreg free
  1548  002566  EC9D  F013         	call	_vscp_sendHeartBeat
  1549  00256A                     l5823:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;vscp_firmware.c: 528: }
  1553                           ;vscp_firmware.c: 529: }
  1554                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  1555  00256A  0E3B               	movlw	59
  1556  00256C  656F               	cpfsgt	_vscp_minute& (0+255),b
  1557  00256E  D002               	goto	l5829
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;vscp_firmware.c: 532: vscp_minute = 0;
  1561  002570  6B6F               	clrf	_vscp_minute& (0+255),b
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;vscp_firmware.c: 533: vscp_hour++;
  1565  002572  2B6D               	incf	_vscp_hour& (0+255),f,b
  1566  002574                     l5829:
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;vscp_firmware.c: 534: }
  1570                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  1571  002574  0E17               	movlw	23
  1572  002576  656D               	cpfsgt	_vscp_hour& (0+255),b
  1573  002578  D001               	goto	l5833
  1574                           
  1575                           ; BSR set to: 0
  1576  00257A  6B6D               	clrf	_vscp_hour& (0+255),b
  1577  00257C                     l5833:
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  1581  00257C  5171               	movf	_vscp_node_state& (0+255),w,b
  1582  00257E  0A03               	xorlw	3
  1583  002580  A4D8               	btfss	status,2,c
  1584  002582  0012               	return	
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  1588  002584  2B6C               	incf	_vscp_guid_reset& (0+255),f,b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  1592  002586  C06C  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  1593  00258A  0E0F               	movlw	15
  1594  00258C  164D               	andwf	??_vscp_doOneSecondWork,f,c
  1595  00258E  0E02               	movlw	2
  1596  002590  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  1597  002592  B0D8               	btfsc	status,0,c
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  1601  002594  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  1602                           
  1603                           ; BSR set to: 0
  1604  002596  0012               	return	
  1605  002598                     __end_of_vscp_doOneSecondWork:
  1606                           	opt stack 0
  1607                           tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           prodh	equ	0xFF4
  1612                           prodl	equ	0xFF3
  1613                           intcon	equ	0xFF2
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           indf1	equ	0xFE7
  1617                           fsr1h	equ	0xFE2
  1618                           fsr1l	equ	0xFE1
  1619                           indf2	equ	0xFDF
  1620                           postinc2	equ	0xFDE
  1621                           postdec2	equ	0xFDD
  1622                           plusw2	equ	0xFDB
  1623                           fsr2h	equ	0xFDA
  1624                           fsr2l	equ	0xFD9
  1625                           status	equ	0xFD8
  1626                           
  1627 ;; *************** function _vscp_sendHeartBeat *****************
  1628 ;; Defined at:
  1629 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  1630 ;; Parameters:    Size  Location     Type
  1631 ;;  zone            1    wreg     unsigned char 
  1632 ;;  subzone         1   20[BANK0 ] unsigned char 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  zone            1   75[COMRAM] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;		None               void
  1637 ;; Registers used:
  1638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : F/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1644 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1647 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1648 ;;Total ram usage:        2 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    7
  1651 ;; This function calls:
  1652 ;;		_vscp_sendEvent
  1653 ;; This function is called by:
  1654 ;;		_vscp_doOneSecondWork
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text4
  1659  00273A                     __ptext4:
  1660                           	opt stack 0
  1661  00273A                     _vscp_sendHeartBeat:
  1662                           	opt stack 22
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;incstack = 0
  1666                           ;incstack = 0
  1667                           ;vscp_sendHeartBeat@zone stored from wreg
  1668  00273A  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  1669                           
  1670                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  1671  00273E  0E83               	movlw	131
  1672  002740  0100               	movlb	0	; () banked
  1673  002742  6F83               	movwf	_vscp_omsg& (0+255),b
  1674                           
  1675                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  1676  002744  0E07               	movlw	7
  1677  002746  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  1678                           
  1679                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  1680  002748  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  1681  00274A  0E14               	movlw	20
  1682  00274C  6F85               	movwf	(_vscp_omsg+2)& (0+255),b
  1683                           
  1684                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  1685  00274E  0E09               	movlw	9
  1686  002750  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  1690  002752  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  1694  002754  C04C  F089         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  1698  002758  C0A4  F08A         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;vscp_firmware.c: 380: vscp_sendEvent();
  1702  00275C  EFB0  F013         	goto	_vscp_sendEvent	;wreg free
  1703  002760                     __end_of_vscp_sendHeartBeat:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           prodh	equ	0xFF4
  1710                           prodl	equ	0xFF3
  1711                           intcon	equ	0xFF2
  1712                           postinc0	equ	0xFEE
  1713                           wreg	equ	0xFE8
  1714                           indf1	equ	0xFE7
  1715                           fsr1h	equ	0xFE2
  1716                           fsr1l	equ	0xFE1
  1717                           indf2	equ	0xFDF
  1718                           postinc2	equ	0xFDE
  1719                           postdec2	equ	0xFDD
  1720                           plusw2	equ	0xFDB
  1721                           fsr2h	equ	0xFDA
  1722                           fsr2l	equ	0xFD9
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _vscp_getSubzone *****************
  1726 ;; Defined at:
  1727 ;;		line 587 in file "../main.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;		None
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;		None
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      unsigned char 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : F/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1745 ;;Total ram usage:        0 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    3
  1748 ;; This function calls:
  1749 ;;		_readEEPROM
  1750 ;; This function is called by:
  1751 ;;		_vscp_doOneSecondWork
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text5
  1756  002A24                     __ptext5:
  1757                           	opt stack 0
  1758  002A24                     _vscp_getSubzone:
  1759                           	opt stack 26
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 588: return readEEPROM( 0x21 + 1 );
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;incstack = 0
  1766                           ;incstack = 0
  1767  002A24  6A09               	clrf	?_readEEPROM+1,c
  1768  002A26  0E22               	movlw	34
  1769  002A28  6E08               	movwf	?_readEEPROM,c
  1770  002A2A  EFD3  F014         	goto	_readEEPROM	;wreg free
  1771  002A2E                     __end_of_vscp_getSubzone:
  1772                           	opt stack 0
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           intcon	equ	0xFF2
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           indf1	equ	0xFE7
  1783                           fsr1h	equ	0xFE2
  1784                           fsr1l	equ	0xFE1
  1785                           indf2	equ	0xFDF
  1786                           postinc2	equ	0xFDE
  1787                           postdec2	equ	0xFDD
  1788                           plusw2	equ	0xFDB
  1789                           fsr2h	equ	0xFDA
  1790                           fsr2l	equ	0xFD9
  1791                           status	equ	0xFD8
  1792                           
  1793 ;; *************** function _vscp_getZone *****************
  1794 ;; Defined at:
  1795 ;;		line 578 in file "../main.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      unsigned char 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2, cstack
  1804 ;; Tracked objects:
  1805 ;;		On entry : F/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:    3
  1816 ;; This function calls:
  1817 ;;		_readEEPROM
  1818 ;; This function is called by:
  1819 ;;		_vscp_doOneSecondWork
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text6
  1824  002A2E                     __ptext6:
  1825                           	opt stack 0
  1826  002A2E                     _vscp_getZone:
  1827                           	opt stack 26
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 579: return readEEPROM( 0x21 + 0 );
  1831                           
  1832                           ;incstack = 0
  1833                           ;incstack = 0
  1834  002A2E  6A09               	clrf	?_readEEPROM+1,c
  1835  002A30  0E21               	movlw	33
  1836  002A32  6E08               	movwf	?_readEEPROM,c
  1837  002A34  EFD3  F014         	goto	_readEEPROM	;wreg free
  1838  002A38                     __end_of_vscp_getZone:
  1839                           	opt stack 0
  1840                           tblptru	equ	0xFF8
  1841                           tblptrh	equ	0xFF7
  1842                           tblptrl	equ	0xFF6
  1843                           tablat	equ	0xFF5
  1844                           prodh	equ	0xFF4
  1845                           prodl	equ	0xFF3
  1846                           intcon	equ	0xFF2
  1847                           postinc0	equ	0xFEE
  1848                           wreg	equ	0xFE8
  1849                           indf1	equ	0xFE7
  1850                           fsr1h	equ	0xFE2
  1851                           fsr1l	equ	0xFE1
  1852                           indf2	equ	0xFDF
  1853                           postinc2	equ	0xFDE
  1854                           postdec2	equ	0xFDD
  1855                           plusw2	equ	0xFDB
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _vscp_error *****************
  1861 ;; Defined at:
  1862 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;		None               void
  1869 ;; Registers used:
  1870 ;;		None
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1880 ;;Total ram usage:        0 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    2
  1883 ;; This function calls:
  1884 ;;		Nothing
  1885 ;; This function is called by:
  1886 ;;		_main
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text7
  1891  002A68                     __ptext7:
  1892                           	opt stack 0
  1893  002A68                     _vscp_error:
  1894                           	opt stack 28
  1895                           
  1896                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  1897                           
  1898                           ;incstack = 0
  1899                           ;incstack = 0
  1900  002A68  6A52               	clrf	_vscp_initledfunc,c
  1901  002A6A  0012               	return	
  1902  002A6C                     __end_of_vscp_error:
  1903                           	opt stack 0
  1904                           tblptru	equ	0xFF8
  1905                           tblptrh	equ	0xFF7
  1906                           tblptrl	equ	0xFF6
  1907                           tablat	equ	0xFF5
  1908                           prodh	equ	0xFF4
  1909                           prodl	equ	0xFF3
  1910                           intcon	equ	0xFF2
  1911                           postinc0	equ	0xFEE
  1912                           wreg	equ	0xFE8
  1913                           indf1	equ	0xFE7
  1914                           fsr1h	equ	0xFE2
  1915                           fsr1l	equ	0xFE1
  1916                           indf2	equ	0xFDF
  1917                           postinc2	equ	0xFDE
  1918                           postdec2	equ	0xFDD
  1919                           plusw2	equ	0xFDB
  1920                           fsr2h	equ	0xFDA
  1921                           fsr2l	equ	0xFD9
  1922                           status	equ	0xFD8
  1923                           
  1924 ;; *************** function _doDM *****************
  1925 ;; Defined at:
  1926 ;;		line 773 in file "../main.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  class_mask      2   16[COMRAM] unsigned short 
  1931 ;;  class_filter    2   14[COMRAM] unsigned short 
  1932 ;;  i               1   21[COMRAM] unsigned char 
  1933 ;;  dmflags         1   20[COMRAM] unsigned char 
  1934 ;;  type_mask       1   19[COMRAM] unsigned char 
  1935 ;;  type_filter     1   18[COMRAM] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;		None               void
  1938 ;; Registers used:
  1939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1946 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1947 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1948 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1949 ;;Total ram usage:       11 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    3
  1952 ;; This function calls:
  1953 ;;		_readEEPROM
  1954 ;;		_actionSet
  1955 ;;		_actionClr
  1956 ;;		_actionSetAll
  1957 ;;		_actionClrAll
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text8
  1964  001704                     __ptext8:
  1965                           	opt stack 0
  1966  001704                     _doDM:
  1967                           	opt stack 27
  1968                           
  1969                           ;main.c: 774: unsigned char i;
  1970                           ;main.c: 775: unsigned char dmflags;
  1971                           ;main.c: 776: unsigned short class_filter;
  1972                           ;main.c: 777: unsigned short class_mask;
  1973                           ;main.c: 778: unsigned char type_filter;
  1974                           ;main.c: 779: unsigned char type_mask;
  1975                           ;main.c: 782: if ( 0 == vscp_imsg.vscp_class ) return;
  1976                           
  1977                           ;incstack = 0
  1978                           ;incstack = 0
  1979  001704  0100               	movlb	0	; () banked
  1980  001706  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  1981  001708  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1982  00170A  B4D8               	btfsc	status,2,c
  1983  00170C  0012               	return	
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 784: for (i = 0; i < 8; i++) {
  1987  00170E  6A16               	clrf	doDM@i,c
  1988  001710                     l4151:
  1989                           
  1990                           ;main.c: 787: dmflags = readEEPROM( 0x21 + 0 + 1 + (8 * i) );
  1991  001710  5016               	movf	doDM@i,w,c
  1992  001712  D8CF               	call	PL2	;call to abstracted procedure
  1993  001714  0E22               	movlw	34
  1994  001716  240C               	addwf	??_doDM,w,c
  1995  001718  6E08               	movwf	?_readEEPROM,c
  1996  00171A  0E00               	movlw	0
  1997  00171C  200D               	addwfc	??_doDM+1,w,c
  1998  00171E  6E09               	movwf	?_readEEPROM+1,c
  1999  001720  ECD3  F014         	call	_readEEPROM	;wreg free
  2000  001724  6E15               	movwf	doDM@dmflags,c
  2001                           
  2002                           ;main.c: 790: if ( dmflags & 0x80 ) {
  2003  001726  AE15               	btfss	doDM@dmflags,7,c
  2004  001728  D0BF               	goto	l4197
  2005                           
  2006                           ;main.c: 793: if ( ( dmflags & 0x40 ) &&
  2007                           ;main.c: 794: ( vscp_imsg.oaddr != readEEPROM( 0x21 + 0 + (8 * i) ) ) ) {
  2008  00172A  AC15               	btfss	doDM@dmflags,6,c
  2009  00172C  D00E               	goto	l261
  2010  00172E  5016               	movf	doDM@i,w,c
  2011  001730  D8C0               	call	PL2	;call to abstracted procedure
  2012  001732  0E21               	movlw	33
  2013  001734  240C               	addwf	??_doDM,w,c
  2014  001736  6E08               	movwf	?_readEEPROM,c
  2015  001738  0E00               	movlw	0
  2016  00173A  200D               	addwfc	??_doDM+1,w,c
  2017  00173C  6E09               	movwf	?_readEEPROM+1,c
  2018  00173E  ECD3  F014         	call	_readEEPROM	;wreg free
  2019  001742  0100               	movlb	0	; () banked
  2020  001744  197A               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2021  001746  E001 D0AF          	bnz	l4197
  2022  00174A                     l261:
  2023                           
  2024                           ;main.c: 796: }
  2025                           ;main.c: 799: if ( dmflags & 0x10 ) {
  2026  00174A  A815               	btfss	doDM@dmflags,4,c
  2027  00174C  D00C               	goto	l263
  2028                           
  2029                           ;main.c: 800: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2030  00174E  0100               	movlb	0	; () banked
  2031  001750  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2032  001752  E009               	bz	l263
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;main.c: 801: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  2036  001754  6A09               	clrf	?_readEEPROM+1,c
  2037  001756  0E21               	movlw	33
  2038  001758  6E08               	movwf	?_readEEPROM,c
  2039  00175A  ECD3  F014         	call	_readEEPROM	;wreg free
  2040  00175E  0100               	movlb	0	; () banked
  2041  001760  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2042  001762  E001 D0A1          	bnz	l4197
  2043  001766                     l263:
  2044                           
  2045                           ;main.c: 803: }
  2046                           ;main.c: 804: }
  2047                           ;main.c: 805: }
  2048                           ;main.c: 808: if ( dmflags & 0x08 ) {
  2049  001766  A615               	btfss	doDM@dmflags,3,c
  2050  001768  D00C               	goto	l4173
  2051                           
  2052                           ;main.c: 809: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2053  00176A  0100               	movlb	0	; () banked
  2054  00176C  297C               	incf	(_vscp_imsg+7)& (0+255),w,b
  2055  00176E  E009               	bz	l4173
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;main.c: 810: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x21 + 0 ) ) {
  2059  001770  6A09               	clrf	?_readEEPROM+1,c
  2060  001772  0E21               	movlw	33
  2061  001774  6E08               	movwf	?_readEEPROM,c
  2062  001776  ECD3  F014         	call	_readEEPROM	;wreg free
  2063  00177A  0100               	movlb	0	; () banked
  2064  00177C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2065  00177E  E001 D093          	bnz	l4197
  2066  001782                     l4173:
  2067                           
  2068                           ;main.c: 812: }
  2069                           ;main.c: 813: }
  2070                           ;main.c: 814: }
  2071                           ;main.c: 816: class_filter = ( dmflags & 0x01)*256 +
  2072                           ;main.c: 817: readEEPROM( 0x21 +
  2073                           ;main.c: 818: 0 +
  2074                           ;main.c: 819: (8 * i) +
  2075                           ;main.c: 820: 3);
  2076  001782  5016               	movf	doDM@i,w,c
  2077  001784  0D08               	mullw	8
  2078  001786  0E24               	movlw	36
  2079  001788  24F3               	addwf	prodl,w,c
  2080  00178A  6E08               	movwf	?_readEEPROM,c
  2081  00178C  0E00               	movlw	0
  2082  00178E  20F4               	addwfc	prodh,w,c
  2083  001790  6E09               	movwf	?_readEEPROM+1,c
  2084  001792  ECD3  F014         	call	_readEEPROM	;wreg free
  2085  001796  6E0C               	movwf	??_doDM& (0+255),c
  2086  001798  5015               	movf	doDM@dmflags,w,c
  2087  00179A  0B01               	andlw	1
  2088  00179C  6E0E               	movwf	(??_doDM+2)& (0+255),c
  2089  00179E  6A0D               	clrf	(??_doDM+1)& (0+255),c
  2090  0017A0  500C               	movf	??_doDM,w,c
  2091  0017A2  240D               	addwf	??_doDM+1,w,c
  2092  0017A4  6E0F               	movwf	doDM@class_filter,c
  2093  0017A6  0E00               	movlw	0
  2094  0017A8  200E               	addwfc	??_doDM+2,w,c
  2095  0017AA  6E10               	movwf	doDM@class_filter+1,c
  2096                           
  2097                           ;main.c: 821: class_mask = ( dmflags & 0x02)*256 +
  2098                           ;main.c: 822: readEEPROM( 0x21 +
  2099                           ;main.c: 823: 0 +
  2100                           ;main.c: 824: (8 * i) +
  2101                           ;main.c: 825: 2);
  2102  0017AC  5016               	movf	doDM@i,w,c
  2103  0017AE  0D08               	mullw	8
  2104  0017B0  0E23               	movlw	35
  2105  0017B2  24F3               	addwf	prodl,w,c
  2106  0017B4  6E08               	movwf	?_readEEPROM,c
  2107  0017B6  0E00               	movlw	0
  2108  0017B8  20F4               	addwfc	prodh,w,c
  2109  0017BA  6E09               	movwf	?_readEEPROM+1,c
  2110  0017BC  ECD3  F014         	call	_readEEPROM	;wreg free
  2111  0017C0  6E0C               	movwf	??_doDM& (0+255),c
  2112  0017C2  5015               	movf	doDM@dmflags,w,c
  2113  0017C4  0B02               	andlw	2
  2114  0017C6  6E0E               	movwf	(??_doDM+2)& (0+255),c
  2115  0017C8  6A0D               	clrf	(??_doDM+1)& (0+255),c
  2116  0017CA  500C               	movf	??_doDM,w,c
  2117  0017CC  240D               	addwf	??_doDM+1,w,c
  2118  0017CE  6E11               	movwf	doDM@class_mask,c
  2119  0017D0  0E00               	movlw	0
  2120  0017D2  200E               	addwfc	??_doDM+2,w,c
  2121  0017D4  6E12               	movwf	doDM@class_mask+1,c
  2122                           
  2123                           ;main.c: 826: type_filter = readEEPROM( 0x21 +
  2124                           ;main.c: 827: 0 +
  2125                           ;main.c: 828: (8 * i) +
  2126                           ;main.c: 829: 5);
  2127  0017D6  5016               	movf	doDM@i,w,c
  2128  0017D8  D86C               	call	PL2	;call to abstracted procedure
  2129  0017DA  0E26               	movlw	38
  2130  0017DC  240C               	addwf	??_doDM,w,c
  2131  0017DE  6E08               	movwf	?_readEEPROM,c
  2132  0017E0  0E00               	movlw	0
  2133  0017E2  200D               	addwfc	??_doDM+1,w,c
  2134  0017E4  6E09               	movwf	?_readEEPROM+1,c
  2135  0017E6  ECD3  F014         	call	_readEEPROM	;wreg free
  2136  0017EA  6E13               	movwf	doDM@type_filter,c
  2137                           
  2138                           ;main.c: 830: type_mask = readEEPROM( 0x21 +
  2139                           ;main.c: 831: 0 +
  2140                           ;main.c: 832: (8 * i) +
  2141                           ;main.c: 833: 4);
  2142  0017EC  5016               	movf	doDM@i,w,c
  2143  0017EE  D861               	call	PL2	;call to abstracted procedure
  2144  0017F0  0E25               	movlw	37
  2145  0017F2  240C               	addwf	??_doDM,w,c
  2146  0017F4  6E08               	movwf	?_readEEPROM,c
  2147  0017F6  0E00               	movlw	0
  2148  0017F8  200D               	addwfc	??_doDM+1,w,c
  2149  0017FA  6E09               	movwf	?_readEEPROM+1,c
  2150  0017FC  ECD3  F014         	call	_readEEPROM	;wreg free
  2151  001800  6E14               	movwf	doDM@type_mask,c
  2152                           
  2153                           ;main.c: 835: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2154                           ;main.c: 836: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2155  001802  0100               	movlb	0	; () banked
  2156  001804  EE20  F077         	lfsr	2,_vscp_imsg+2
  2157  001808  CFDE F00C          	movff	postinc2,??_doDM
  2158  00180C  CFDD F00D          	movff	postdec2,??_doDM+1
  2159  001810  500F               	movf	doDM@class_filter,w,c
  2160  001812  1A0C               	xorwf	??_doDM,f,c
  2161  001814  5010               	movf	doDM@class_filter+1,w,c
  2162  001816  1A0D               	xorwf	??_doDM+1,f,c
  2163  001818  5011               	movf	doDM@class_mask,w,c
  2164  00181A  160C               	andwf	??_doDM,f,c
  2165  00181C  5012               	movf	doDM@class_mask+1,w,c
  2166  00181E  160D               	andwf	??_doDM+1,f,c
  2167  001820  500D               	movf	??_doDM+1,w,c
  2168  001822  100C               	iorwf	??_doDM,w,c
  2169  001824  E141               	bnz	l4197
  2170                           
  2171                           ; BSR set to: 0
  2172  001826  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  2173  001828  1813               	xorwf	doDM@type_filter,w,c
  2174  00182A  1414               	andwf	doDM@type_mask,w,c
  2175  00182C  E029               	bz	l4195
  2176  00182E  D03C               	goto	l4197
  2177  001830                     l4185:
  2178                           
  2179                           ;main.c: 845: actionSet( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2180  001830  5016               	movf	doDM@i,w,c
  2181  001832  D83F               	call	PL2	;call to abstracted procedure
  2182  001834  D84A               	call	PL6	;call to abstracted procedure
  2183  001836  ECD3  F014         	call	_readEEPROM	;wreg free
  2184  00183A  6E0B               	movwf	?_actionSet,c
  2185  00183C  5015               	movf	doDM@dmflags,w,c
  2186  00183E  EC3B  F015         	call	_actionSet
  2187                           
  2188                           ;main.c: 846: break;
  2189  001842  D032               	goto	l4197
  2190  001844                     l4187:
  2191                           
  2192                           ;main.c: 849: actionClr( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2193  001844  5016               	movf	doDM@i,w,c
  2194  001846  D835               	call	PL2	;call to abstracted procedure
  2195  001848  D840               	call	PL6	;call to abstracted procedure
  2196  00184A  ECD3  F014         	call	_readEEPROM	;wreg free
  2197  00184E  6E0B               	movwf	?_actionClr,c
  2198  001850  5015               	movf	doDM@dmflags,w,c
  2199  001852  EC3A  F015         	call	_actionClr
  2200                           
  2201                           ;main.c: 850: break;
  2202  001856  D028               	goto	l4197
  2203  001858                     l4189:
  2204                           
  2205                           ;main.c: 853: actionSetAll( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2206  001858  5016               	movf	doDM@i,w,c
  2207  00185A  D82B               	call	PL2	;call to abstracted procedure
  2208  00185C  D836               	call	PL6	;call to abstracted procedure
  2209  00185E  ECD3  F014         	call	_readEEPROM	;wreg free
  2210  001862  6E0B               	movwf	?_actionSetAll,c
  2211  001864  5015               	movf	doDM@dmflags,w,c
  2212  001866  EC39  F015         	call	_actionSetAll
  2213                           
  2214                           ;main.c: 854: break;
  2215  00186A  D01E               	goto	l4197
  2216  00186C                     l4191:
  2217                           
  2218                           ;main.c: 857: actionClrAll( dmflags, readEEPROM( 0x21 + 0 + (8 * i) + 7 ) );
  2219  00186C  5016               	movf	doDM@i,w,c
  2220  00186E  D821               	call	PL2	;call to abstracted procedure
  2221  001870  D82C               	call	PL6	;call to abstracted procedure
  2222  001872  ECD3  F014         	call	_readEEPROM	;wreg free
  2223  001876  6E0B               	movwf	?_actionClrAll,c
  2224  001878  5015               	movf	doDM@dmflags,w,c
  2225  00187A  EC38  F015         	call	_actionClrAll
  2226                           
  2227                           ;main.c: 858: break;
  2228  00187E  D014               	goto	l4197
  2229  001880                     l4195:
  2230                           
  2231                           ; BSR set to: 0
  2232  001880  5016               	movf	doDM@i,w,c
  2233  001882  D817               	call	PL2	;call to abstracted procedure
  2234  001884  0E27               	movlw	39
  2235  001886  240C               	addwf	??_doDM,w,c
  2236  001888  6E08               	movwf	?_readEEPROM,c
  2237  00188A  0E00               	movlw	0
  2238  00188C  200D               	addwfc	??_doDM+1,w,c
  2239  00188E  6E09               	movwf	?_readEEPROM+1,c
  2240  001890  ECD3  F014         	call	_readEEPROM	;wreg free
  2241                           
  2242                           ; Switch size 1, requested type "space"
  2243                           ; Number of cases is 5, Range of values is 0 to 4
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte           16     9 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248  001894  0A00               	xorlw	0	; case 0
  2249  001896  E008               	bz	l4197
  2250  001898  0A01               	xorlw	1	; case 1
  2251  00189A  E0CA               	bz	l4185
  2252  00189C  0A03               	xorlw	3	; case 2
  2253  00189E  E0D2               	bz	l4187
  2254  0018A0  0A01               	xorlw	1	; case 3
  2255  0018A2  E0DA               	bz	l4189
  2256  0018A4  0A07               	xorlw	7	; case 4
  2257  0018A6  E0E2               	bz	l4191
  2258  0018A8                     l4197:
  2259  0018A8  2A16               	incf	doDM@i,f,c
  2260  0018AA  0E07               	movlw	7
  2261  0018AC  6416               	cpfsgt	doDM@i,c
  2262  0018AE  D730               	goto	l4151
  2263  0018B0  0C07               	retlw	7
  2264  0018B2                     __end_of_doDM:
  2265                           	opt stack 0
  2266  0018B2                     PL2:
  2267                           	opt stack 27
  2268  0018B2  6E0C               	movwf	??_doDM& (0+255),c
  2269  0018B4  6A0D               	clrf	(??_doDM+1)& (0+255),c
  2270  0018B6  90D8               	bcf	status,0,c
  2271  0018B8  360C               	rlcf	??_doDM,f,c
  2272  0018BA  360D               	rlcf	??_doDM+1,f,c
  2273  0018BC  90D8               	bcf	status,0,c
  2274  0018BE  360C               	rlcf	??_doDM,f,c
  2275  0018C0  360D               	rlcf	??_doDM+1,f,c
  2276  0018C2  90D8               	bcf	status,0,c
  2277  0018C4  360C               	rlcf	??_doDM,f,c
  2278  0018C6  360D               	rlcf	??_doDM+1,f,c
  2279  0018C8  0012               	return	
  2280  0018CA                     __end_ofPL2:
  2281                           	opt stack 0
  2282  0018CA                     PL6:
  2283                           	opt stack 27
  2284  0018CA  0E28               	movlw	40
  2285  0018CC  240C               	addwf	??_doDM,w,c
  2286  0018CE  6E08               	movwf	?_readEEPROM,c
  2287  0018D0  0E00               	movlw	0
  2288  0018D2  200D               	addwfc	??_doDM+1,w,c
  2289  0018D4  6E09               	movwf	?_readEEPROM+1,c
  2290  0018D6  0012               	return	
  2291  0018D8                     __end_ofPL6:
  2292                           	opt stack 0
  2293                           tblptru	equ	0xFF8
  2294                           tblptrh	equ	0xFF7
  2295                           tblptrl	equ	0xFF6
  2296                           tablat	equ	0xFF5
  2297                           prodh	equ	0xFF4
  2298                           prodl	equ	0xFF3
  2299                           intcon	equ	0xFF2
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           indf1	equ	0xFE7
  2303                           fsr1h	equ	0xFE2
  2304                           fsr1l	equ	0xFE1
  2305                           indf2	equ	0xFDF
  2306                           postinc2	equ	0xFDE
  2307                           postdec2	equ	0xFDD
  2308                           plusw2	equ	0xFDB
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _actionClrAll *****************
  2314 ;; Defined at:
  2315 ;;		line 909 in file "../main.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  dmflags         1    wreg     unsigned char 
  2318 ;;  param           1   10[COMRAM] unsigned char 
  2319 ;; Auto vars:     Size  Location     Type
  2320 ;;  dmflags         1    0[COMRAM] unsigned char 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;		None               void
  2323 ;; Registers used:
  2324 ;;		wreg
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2330 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2334 ;;Total ram usage:        1 bytes
  2335 ;; Hardware stack levels used:    1
  2336 ;; Hardware stack levels required when called:    2
  2337 ;; This function calls:
  2338 ;;		Nothing
  2339 ;; This function is called by:
  2340 ;;		_doDM
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text9
  2345  002A70                     __ptext9:
  2346                           	opt stack 0
  2347  002A70                     _actionClrAll:
  2348                           	opt stack 27
  2349                           
  2350                           ;incstack = 0
  2351                           ;incstack = 0
  2352  002A70  0012               	return	
  2353  002A72                     __end_of_actionClrAll:
  2354                           	opt stack 0
  2355                           tblptru	equ	0xFF8
  2356                           tblptrh	equ	0xFF7
  2357                           tblptrl	equ	0xFF6
  2358                           tablat	equ	0xFF5
  2359                           prodh	equ	0xFF4
  2360                           prodl	equ	0xFF3
  2361                           intcon	equ	0xFF2
  2362                           postinc0	equ	0xFEE
  2363                           wreg	equ	0xFE8
  2364                           indf1	equ	0xFE7
  2365                           fsr1h	equ	0xFE2
  2366                           fsr1l	equ	0xFE1
  2367                           indf2	equ	0xFDF
  2368                           postinc2	equ	0xFDE
  2369                           postdec2	equ	0xFDD
  2370                           plusw2	equ	0xFDB
  2371                           fsr2h	equ	0xFDA
  2372                           fsr2l	equ	0xFD9
  2373                           status	equ	0xFD8
  2374                           
  2375 ;; *************** function _actionSetAll *****************
  2376 ;; Defined at:
  2377 ;;		line 898 in file "../main.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  dmflags         1    wreg     unsigned char 
  2380 ;;  param           1   10[COMRAM] unsigned char 
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;  dmflags         1    0[COMRAM] unsigned char 
  2383 ;; Return value:  Size  Location     Type
  2384 ;;		None               void
  2385 ;; Registers used:
  2386 ;;		wreg
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2392 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2395 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    2
  2399 ;; This function calls:
  2400 ;;		Nothing
  2401 ;; This function is called by:
  2402 ;;		_doDM
  2403 ;; This function uses a non-reentrant model
  2404 ;;
  2405                           
  2406                           	psect	text10
  2407  002A72                     __ptext10:
  2408                           	opt stack 0
  2409  002A72                     _actionSetAll:
  2410                           	opt stack 27
  2411                           
  2412                           ;incstack = 0
  2413                           ;incstack = 0
  2414  002A72  0012               	return	
  2415  002A74                     __end_of_actionSetAll:
  2416                           	opt stack 0
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           intcon	equ	0xFF2
  2424                           postinc0	equ	0xFEE
  2425                           wreg	equ	0xFE8
  2426                           indf1	equ	0xFE7
  2427                           fsr1h	equ	0xFE2
  2428                           fsr1l	equ	0xFE1
  2429                           indf2	equ	0xFDF
  2430                           postinc2	equ	0xFDE
  2431                           postdec2	equ	0xFDD
  2432                           plusw2	equ	0xFDB
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _actionClr *****************
  2438 ;; Defined at:
  2439 ;;		line 886 in file "../main.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  dmflags         1    wreg     unsigned char 
  2442 ;;  param           1   10[COMRAM] unsigned char 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;  dmflags         1    0[COMRAM] unsigned char 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;		None               void
  2447 ;; Registers used:
  2448 ;;		wreg
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2454 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2458 ;;Total ram usage:        1 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    2
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_doDM
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text11
  2469  002A74                     __ptext11:
  2470                           	opt stack 0
  2471  002A74                     _actionClr:
  2472                           	opt stack 27
  2473                           
  2474                           ;incstack = 0
  2475                           ;incstack = 0
  2476  002A74  0012               	return	
  2477  002A76                     __end_of_actionClr:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           tblptrh	equ	0xFF7
  2481                           tblptrl	equ	0xFF6
  2482                           tablat	equ	0xFF5
  2483                           prodh	equ	0xFF4
  2484                           prodl	equ	0xFF3
  2485                           intcon	equ	0xFF2
  2486                           postinc0	equ	0xFEE
  2487                           wreg	equ	0xFE8
  2488                           indf1	equ	0xFE7
  2489                           fsr1h	equ	0xFE2
  2490                           fsr1l	equ	0xFE1
  2491                           indf2	equ	0xFDF
  2492                           postinc2	equ	0xFDE
  2493                           postdec2	equ	0xFDD
  2494                           plusw2	equ	0xFDB
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _actionSet *****************
  2500 ;; Defined at:
  2501 ;;		line 875 in file "../main.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  dmflags         1    wreg     unsigned char 
  2504 ;;  param           1   10[COMRAM] unsigned char 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  dmflags         1    0[COMRAM] unsigned char 
  2507 ;; Return value:  Size  Location     Type
  2508 ;;		None               void
  2509 ;; Registers used:
  2510 ;;		wreg
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2516 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2520 ;;Total ram usage:        1 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    2
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_doDM
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text12
  2531  002A76                     __ptext12:
  2532                           	opt stack 0
  2533  002A76                     _actionSet:
  2534                           	opt stack 27
  2535                           
  2536                           ;incstack = 0
  2537                           ;incstack = 0
  2538  002A76  0012               	return	
  2539  002A78                     __end_of_actionSet:
  2540                           	opt stack 0
  2541                           tblptru	equ	0xFF8
  2542                           tblptrh	equ	0xFF7
  2543                           tblptrl	equ	0xFF6
  2544                           tablat	equ	0xFF5
  2545                           prodh	equ	0xFF4
  2546                           prodl	equ	0xFF3
  2547                           intcon	equ	0xFF2
  2548                           postinc0	equ	0xFEE
  2549                           wreg	equ	0xFE8
  2550                           indf1	equ	0xFE7
  2551                           fsr1h	equ	0xFE2
  2552                           fsr1l	equ	0xFE1
  2553                           indf2	equ	0xFDF
  2554                           postinc2	equ	0xFDE
  2555                           postdec2	equ	0xFDD
  2556                           plusw2	equ	0xFDB
  2557                           fsr2h	equ	0xFDA
  2558                           fsr2l	equ	0xFD9
  2559                           status	equ	0xFD8
  2560                           
  2561 ;; *************** function _vscp_handleProtocolEvent *****************
  2562 ;; Defined at:
  2563 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  2564 ;; Parameters:    Size  Location     Type
  2565 ;;		None
  2566 ;; Auto vars:     Size  Location     Type
  2567 ;;  bytes           1   33[BANK0 ] unsigned char 
  2568 ;;  page_save       2   29[BANK0 ] unsigned short 
  2569 ;;  i               1   39[BANK0 ] unsigned char 
  2570 ;;  page_save       2   27[BANK0 ] unsigned short 
  2571 ;;  byte            1   43[BANK0 ] unsigned char 
  2572 ;;  bytes           1   41[BANK0 ] unsigned char 
  2573 ;;  cb              1   38[BANK0 ] unsigned char 
  2574 ;;  bytes_this_t    1   37[BANK0 ] unsigned char 
  2575 ;;  j               1   46[BANK0 ] unsigned char 
  2576 ;;  i               1   44[BANK0 ] unsigned char 
  2577 ;;  k               1   40[BANK0 ] unsigned char 
  2578 ;;  i               1   42[BANK0 ] unsigned char 
  2579 ;;  len             1   36[BANK0 ] unsigned char 
  2580 ;;  pos             1   35[BANK0 ] unsigned char 
  2581 ;;  i               1   45[BANK0 ] unsigned char 
  2582 ;;  len             1   34[BANK0 ] unsigned char 
  2583 ;;  pos             1   32[BANK0 ] unsigned char 
  2584 ;;  offset          1   31[BANK0 ] unsigned char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;		None               void
  2587 ;; Registers used:
  2588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : F/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2595 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2596 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2597 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;Total ram usage:       27 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    8
  2601 ;; This function calls:
  2602 ;;		_vscp_init
  2603 ;;		_vscp_readAppReg
  2604 ;;		_vscp_writeAppReg
  2605 ;;		_vscp_sendEvent
  2606 ;;		_vscp_getGUID
  2607 ;;		_vscp_getMDF_URL
  2608 ;;		_vscp_goBootloaderMode
  2609 ;;		_vscp_getMatrixInfo
  2610 ;;		_vscp_handleHeartbeat
  2611 ;;		_vscp_handleSetNickname
  2612 ;;		_vscp_handleDropNickname
  2613 ;;		_vscp_newNodeOnline
  2614 ;;		_vscp_readRegister
  2615 ;;		_vscp_readStdReg
  2616 ;;		_vscp_writeRegister
  2617 ;;		_vscp_writeStdReg
  2618 ;;		___lbmod
  2619 ;; This function is called by:
  2620 ;;		_main
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           	psect	text13
  2625  000F22                     __ptext13:
  2626                           	opt stack 0
  2627  000F22                     _vscp_handleProtocolEvent:
  2628                           	opt stack 22
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  2632                           
  2633                           ;incstack = 0
  2634                           ;incstack = 0
  2635  000F22  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  2636  000F24  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2637  000F26  A4D8               	btfss	status,2,c
  2638  000F28  0012               	return	
  2639  000F2A  D29F               	goto	l5803
  2640  000F2C                     l5391:
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  2644  000F2C  EFEE  F012         	goto	_vscp_handleHeartbeat	;wreg free
  2645  000F30                     l5393:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  2649  000F30  EF74  F013         	goto	_vscp_newNodeOnline	;wreg free
  2650  000F34                     l5395:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  2654  000F34  EFE9  F013         	goto	_vscp_handleSetNickname	;wreg free
  2655  000F38                     l5397:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  2659  000F38  EF2E  F013         	goto	_vscp_handleDropNickname	;wreg free
  2660  000F3C                     l5399:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  2664                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  2665  000F3C  5175               	movf	_vscp_imsg& (0+255),w,b
  2666  000F3E  0B0F               	andlw	15
  2667  000F40  0A02               	xorlw	2
  2668  000F42  A4D8               	btfss	status,2,c
  2669  000F44  0012               	return	
  2670                           
  2671                           ; BSR set to: 0
  2672  000F46  5170               	movf	_vscp_nickname& (0+255),w,b
  2673  000F48  EE20  F07B         	lfsr	2,_vscp_imsg+6
  2674  000F4C  62DF               	cpfseq	indf2,c
  2675  000F4E  0012               	return	
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  2679  000F50  0E80               	movlw	128
  2680  000F52  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  2681  000F54  D011               	goto	l5419
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  2685  000F56  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  2686  000F58  EC8F  F011         	call	_vscp_readAppReg
  2687  000F5C                     L1:
  2688  000F5C  0100               	movlb	0	; () banked
  2689  000F5E  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  2693  000F60  C07C  F088         	movff	_vscp_imsg+7,_vscp_omsg+5
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  2697  000F64  0E03               	movlw	3
  2698  000F66  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  2702  000F68  0E82               	movlw	130
  2703  000F6A  6F83               	movwf	_vscp_omsg& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  2707  000F6C  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  2708  000F6E  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  2712  000F70  0E0A               	movlw	10
  2713  000F72  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;vscp_firmware.c: 832: vscp_sendEvent();
  2717  000F74  EFB0  F013         	goto	_vscp_sendEvent	;wreg free
  2718  000F78                     l5419:
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  2722                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  2723  000F78  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  2724  000F7A  EC6C  F00C         	call	_vscp_readStdReg
  2725  000F7E  D7EE               	goto	L1
  2726  000F80                     l5433:
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  2730                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  2731  000F80  5175               	movf	_vscp_imsg& (0+255),w,b
  2732  000F82  0B0F               	andlw	15
  2733  000F84  0A03               	xorlw	3
  2734  000F86  A4D8               	btfss	status,2,c
  2735  000F88  0012               	return	
  2736                           
  2737                           ; BSR set to: 0
  2738  000F8A  5170               	movf	_vscp_nickname& (0+255),w,b
  2739  000F8C  EE20  F07B         	lfsr	2,_vscp_imsg+6
  2740  000F90  62DF               	cpfseq	indf2,c
  2741  000F92  0012               	return	
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  2745  000F94  0E80               	movlw	128
  2746  000F96  617C               	cpfslt	(_vscp_imsg+7)& (0+255),b
  2747  000F98  D006               	goto	l5453
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  2751                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  2752  000F9A  C07D  F00D         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  2753  000F9E  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  2754  000FA0  EC06  F00F         	call	_vscp_writeAppReg
  2755  000FA4  D7DB               	goto	L1
  2756  000FA6                     l5453:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  2760                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  2761  000FA6  C07D  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  2762  000FAA  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  2763  000FAC  EC8E  F00F         	call	_vscp_writeStdReg
  2764  000FB0  D7D5               	goto	L1
  2765  000FB2                     l5467:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  2769                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  2770                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  2771                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  2772                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  2773                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  2774                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  2775  000FB2  5170               	movf	_vscp_nickname& (0+255),w,b
  2776  000FB4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  2777  000FB8  62DF               	cpfseq	indf2,c
  2778  000FBA  0012               	return	
  2779                           
  2780                           ; BSR set to: 0
  2781  000FBC  0E00               	movlw	0
  2782  000FBE  ECC9  F014         	call	_vscp_getGUID
  2783  000FC2  0100               	movlb	0	; () banked
  2784  000FC4  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2785  000FC6  A4D8               	btfss	status,2,c
  2786  000FC8  0012               	return	
  2787                           
  2788                           ; BSR set to: 0
  2789  000FCA  0E03               	movlw	3
  2790  000FCC  ECC9  F014         	call	_vscp_getGUID
  2791  000FD0  0100               	movlb	0	; () banked
  2792  000FD2  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  2793  000FD4  A4D8               	btfss	status,2,c
  2794  000FD6  0012               	return	
  2795                           
  2796                           ; BSR set to: 0
  2797  000FD8  0E05               	movlw	5
  2798  000FDA  ECC9  F014         	call	_vscp_getGUID
  2799  000FDE  0100               	movlb	0	; () banked
  2800  000FE0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  2801  000FE2  A4D8               	btfss	status,2,c
  2802  000FE4  0012               	return	
  2803                           
  2804                           ; BSR set to: 0
  2805  000FE6  0E07               	movlw	7
  2806  000FE8  ECC9  F014         	call	_vscp_getGUID
  2807  000FEC  0100               	movlb	0	; () banked
  2808  000FEE  1980               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  2809  000FF0  A4D8               	btfss	status,2,c
  2810  000FF2  0012               	return	
  2811                           
  2812                           ; BSR set to: 0
  2813  000FF4  504F               	movf	_vscp_page_select+1,w,c
  2814  000FF6  1981               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  2815  000FF8  A4D8               	btfss	status,2,c
  2816  000FFA  0012               	return	
  2817                           
  2818                           ; BSR set to: 0
  2819  000FFC  504E               	movf	_vscp_page_select,w,c
  2820  000FFE  EE20  F082         	lfsr	2,_vscp_imsg+13
  2821  001002  62DF               	cpfseq	indf2,c
  2822  001004  0012               	return	
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  2826  001006  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  2827  001008  EF85  F014         	goto	_vscp_goBootloaderMode
  2828  00100C                     l5483:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  2832                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  2833                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  2834                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  2835  00100C  0E00               	movlw	0
  2836  00100E  ECC9  F014         	call	_vscp_getGUID
  2837  001012  0100               	movlb	0	; () banked
  2838  001014  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2839  001016  E173               	bnz	l5527
  2840                           
  2841                           ; BSR set to: 0
  2842  001018  0E01               	movlw	1
  2843  00101A  ECC9  F014         	call	_vscp_getGUID
  2844  00101E  0100               	movlb	0	; () banked
  2845  001020  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2846  001022  E16D               	bnz	l5527
  2847                           
  2848                           ; BSR set to: 0
  2849  001024  0E02               	movlw	2
  2850  001026  ECC9  F014         	call	_vscp_getGUID
  2851  00102A  0100               	movlb	0	; () banked
  2852  00102C  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  2853  00102E  E167               	bnz	l5527
  2854                           
  2855                           ; BSR set to: 0
  2856  001030  0E03               	movlw	3
  2857  001032  ECC9  F014         	call	_vscp_getGUID
  2858  001036  0100               	movlb	0	; () banked
  2859  001038  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  2860  00103A  E161               	bnz	l5527
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  2864  00103C  896C               	bsf	_vscp_guid_reset& (0+255),4,b
  2865  00103E  D05F               	goto	l5527
  2866  001040                     l5493:
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  2870                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  2871                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  2872                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  2873  001040  0E04               	movlw	4
  2874  001042  ECC9  F014         	call	_vscp_getGUID
  2875  001046  0100               	movlb	0	; () banked
  2876  001048  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2877  00104A  E159               	bnz	l5527
  2878                           
  2879                           ; BSR set to: 0
  2880  00104C  0E05               	movlw	5
  2881  00104E  ECC9  F014         	call	_vscp_getGUID
  2882  001052  0100               	movlb	0	; () banked
  2883  001054  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2884  001056  E153               	bnz	l5527
  2885                           
  2886                           ; BSR set to: 0
  2887  001058  0E06               	movlw	6
  2888  00105A  ECC9  F014         	call	_vscp_getGUID
  2889  00105E  0100               	movlb	0	; () banked
  2890  001060  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  2891  001062  E14D               	bnz	l5527
  2892                           
  2893                           ; BSR set to: 0
  2894  001064  0E07               	movlw	7
  2895  001066  ECC9  F014         	call	_vscp_getGUID
  2896  00106A  0100               	movlb	0	; () banked
  2897  00106C  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  2898  00106E  E147               	bnz	l5527
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  2902  001070  8B6C               	bsf	_vscp_guid_reset& (0+255),5,b
  2903  001072  D045               	goto	l5527
  2904  001074                     l5503:
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  2908                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  2909                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  2910                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  2911  001074  0E08               	movlw	8
  2912  001076  ECC9  F014         	call	_vscp_getGUID
  2913  00107A  0100               	movlb	0	; () banked
  2914  00107C  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2915  00107E  E13F               	bnz	l5527
  2916                           
  2917                           ; BSR set to: 0
  2918  001080  0E09               	movlw	9
  2919  001082  ECC9  F014         	call	_vscp_getGUID
  2920  001086  0100               	movlb	0	; () banked
  2921  001088  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2922  00108A  E139               	bnz	l5527
  2923                           
  2924                           ; BSR set to: 0
  2925  00108C  0E0A               	movlw	10
  2926  00108E  ECC9  F014         	call	_vscp_getGUID
  2927  001092  0100               	movlb	0	; () banked
  2928  001094  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  2929  001096  E133               	bnz	l5527
  2930                           
  2931                           ; BSR set to: 0
  2932  001098  0E0B               	movlw	11
  2933  00109A  ECC9  F014         	call	_vscp_getGUID
  2934  00109E  0100               	movlb	0	; () banked
  2935  0010A0  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  2936  0010A2  E12D               	bnz	l5527
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  2940  0010A4  8D6C               	bsf	_vscp_guid_reset& (0+255),6,b
  2941  0010A6  D02B               	goto	l5527
  2942  0010A8                     l5513:
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  2946                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  2947                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  2948                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  2949  0010A8  0E0C               	movlw	12
  2950  0010AA  ECC9  F014         	call	_vscp_getGUID
  2951  0010AE  0100               	movlb	0	; () banked
  2952  0010B0  197C               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2953  0010B2  E125               	bnz	l5527
  2954                           
  2955                           ; BSR set to: 0
  2956  0010B4  0E0D               	movlw	13
  2957  0010B6  ECC9  F014         	call	_vscp_getGUID
  2958  0010BA  0100               	movlb	0	; () banked
  2959  0010BC  197D               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  2960  0010BE  E11F               	bnz	l5527
  2961                           
  2962                           ; BSR set to: 0
  2963  0010C0  0E0E               	movlw	14
  2964  0010C2  ECC9  F014         	call	_vscp_getGUID
  2965  0010C6  0100               	movlb	0	; () banked
  2966  0010C8  197E               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  2967  0010CA  E119               	bnz	l5527
  2968                           
  2969                           ; BSR set to: 0
  2970  0010CC  0E0F               	movlw	15
  2971  0010CE  ECC9  F014         	call	_vscp_getGUID
  2972  0010D2  0100               	movlb	0	; () banked
  2973  0010D4  197F               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  2974  0010D6  E113               	bnz	l5527
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  2978  0010D8  8F6C               	bsf	_vscp_guid_reset& (0+255),7,b
  2979  0010DA  D011               	goto	l5527
  2980  0010DC                     l934:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  2984  0010DC  6B6C               	clrf	_vscp_guid_reset& (0+255),b
  2985                           
  2986                           ;vscp_firmware.c: 952: break;
  2987  0010DE  D00F               	goto	l5527
  2988  0010E0                     l5525:
  2989                           
  2990                           ; BSR set to: 0
  2991  0010E0  397B               	swapf	(_vscp_imsg+6)& (0+255),w,b
  2992  0010E2  0B0F               	andlw	15
  2993  0010E4  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  2994  0010E6  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  2995                           
  2996                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2997                           ; Switch size 1, requested type "space"
  2998                           ; Number of cases is 1, Range of values is 0 to 0
  2999                           ; switch strategies available:
  3000                           ; Name         Instructions Cycles
  3001                           ; simple_byte            4     3 (average)
  3002                           ;	Chosen strategy is simple_byte
  3003  0010E8  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3004  0010EA  E1F8               	bnz	l934
  3005                           
  3006                           ; BSR set to: 0
  3007                           ; Switch size 1, requested type "space"
  3008                           ; Number of cases is 4, Range of values is 0 to 3
  3009                           ; switch strategies available:
  3010                           ; Name         Instructions Cycles
  3011                           ; simple_byte           13     7 (average)
  3012                           ;	Chosen strategy is simple_byte
  3013  0010EC  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3014  0010EE  E08E               	bz	l5483
  3015  0010F0  0A01               	xorlw	1	; case 1
  3016  0010F2  E0A6               	bz	l5493
  3017  0010F4  0A03               	xorlw	3	; case 2
  3018  0010F6  E0BE               	bz	l5503
  3019  0010F8  0A01               	xorlw	1	; case 3
  3020  0010FA  E0D6               	bz	l5513
  3021  0010FC  D7EF               	goto	l934
  3022  0010FE                     l5527:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  3026  0010FE  516C               	movf	_vscp_guid_reset& (0+255),w,b
  3027  001100  0BF0               	andlw	240
  3028  001102  0AF0               	xorlw	240
  3029  001104  B4D8               	btfsc	status,2,c
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;vscp_firmware.c: 957: vscp_init();
  3033  001106  ECCC  F012         	call	_vscp_init	;wreg free
  3034  00110A  0012               	return	
  3035  00110C                     l5531:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3039  00110C  5170               	movf	_vscp_nickname& (0+255),w,b
  3040  00110E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3041  001112  62DF               	cpfseq	indf2,c
  3042  001114  0012               	return	
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;vscp_firmware.c: 965: uint8_t i;
  3046                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  3047  001116  6BB0               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  3048                           
  3049                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  3050  001118  C07C  F0AF         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  3051                           
  3052                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  3053  00111C  C07D  F0B2         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  3054                           
  3055                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  3056  001120  6BBD               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  3057  001122  D042               	goto	l5563
  3058  001124                     l5535:
  3059                           
  3060                           ; BSR set to: 0
  3061                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  3062  001124  0E07               	movlw	7
  3063  001126  6E08               	movwf	?___lbmod,c
  3064  001128  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3065  00112A  EC89  F013         	call	___lbmod
  3066  00112E  0100               	movlb	0	; () banked
  3067  001130  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3068  001132  51A4               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  3069  001134  0F89               	addlw	low (_vscp_omsg+6)
  3070  001136  6ED9               	movwf	fsr2l,c
  3071  001138  6ADA               	clrf	fsr2h,c
  3072  00113A  51AF               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  3073  00113C  25BD               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3074  00113E  ECAA  F014         	call	_vscp_readRegister
  3075  001142  6EDF               	movwf	indf2,c
  3076                           
  3077                           ;vscp_firmware.c: 973: if ( (i % 7) == 6 || i == (len - 1) ) {
  3078  001144  0E07               	movlw	7
  3079  001146  6E08               	movwf	?___lbmod,c
  3080  001148  0100               	movlb	0	; () banked
  3081  00114A  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3082  00114C  EC89  F013         	call	___lbmod
  3083  001150  0A06               	xorlw	6
  3084  001152  E00B               	bz	l5541
  3085  001154  0EFF               	movlw	255
  3086  001156  0100               	movlb	0	; () banked
  3087  001158  25B2               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  3088  00115A  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3089  00115C  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3090  00115E  0EFF               	movlw	255
  3091  001160  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3092  001162  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3093  001164  19A4               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3094  001166  11A5               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3095  001168  E11E               	bnz	l5561
  3096  00116A                     l5541:
  3097                           
  3098                           ;vscp_firmware.c: 975: uint8_t bytes;
  3099                           ;vscp_firmware.c: 977: if ( ( i % 7 ) == 6 ) {
  3100  00116A  0E07               	movlw	7
  3101  00116C  6E08               	movwf	?___lbmod,c
  3102  00116E  0100               	movlb	0	; () banked
  3103  001170  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3104  001172  EC89  F013         	call	___lbmod
  3105  001176  0A06               	xorlw	6
  3106  001178  E103               	bnz	l5545
  3107                           
  3108                           ;vscp_firmware.c: 978: bytes = 7;
  3109  00117A  0E07               	movlw	7
  3110  00117C  0100               	movlb	0	; () banked
  3111  00117E  D009               	goto	L2
  3112  001180                     l5545:
  3113                           
  3114                           ;vscp_firmware.c: 980: else {
  3115                           ;vscp_firmware.c: 981: bytes = ( i % 7 ) + 1;
  3116  001180  0E07               	movlw	7
  3117  001182  6E08               	movwf	?___lbmod,c
  3118  001184  0100               	movlb	0	; () banked
  3119  001186  51BD               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  3120  001188  EC89  F013         	call	___lbmod
  3121  00118C  0100               	movlb	0	; () banked
  3122  00118E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3123  001190  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3124  001192                     L2:
  3125  001192  6FB1               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;vscp_firmware.c: 982: }
  3129                           ;vscp_firmware.c: 984: vscp_omsg.flags = 0x80 + bytes + 1;
  3130  001194  51B1               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  3131  001196  0F81               	addlw	129
  3132  001198  6F83               	movwf	_vscp_omsg& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;vscp_firmware.c: 985: vscp_omsg.priority = 0x03;
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;vscp_firmware.c: 986: vscp_omsg.vscp_class = 0;
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;vscp_firmware.c: 987: vscp_omsg.vscp_type = 26;
  3142  00119A  D9AF               	call	PL34	;call to abstracted procedure
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;vscp_firmware.c: 988: vscp_omsg.data[ 0 ] = pos;
  3146  00119C  C0B0  F088         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;vscp_firmware.c: 991: vscp_sendEvent();
  3150  0011A0  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;vscp_firmware.c: 992: pos++;
  3154  0011A4  2BB0               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  3155  0011A6                     l5561:
  3156                           
  3157                           ; BSR set to: 0
  3158  0011A6  2BBD               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  3159  0011A8                     l5563:
  3160                           
  3161                           ; BSR set to: 0
  3162  0011A8  51B2               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  3163  0011AA  5DBD               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  3164  0011AC  B0D8               	btfsc	status,0,c
  3165  0011AE  0012               	return	
  3166  0011B0  D7B9               	goto	l5535
  3167  0011B2                     l5565:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;vscp_firmware.c: 1000: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3171  0011B2  5170               	movf	_vscp_nickname& (0+255),w,b
  3172  0011B4  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3173  0011B8  62DF               	cpfseq	indf2,c
  3174  0011BA  0012               	return	
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;vscp_firmware.c: 1001: uint8_t i;
  3178                           ;vscp_firmware.c: 1002: uint8_t pos = vscp_imsg.data[ 1 ];
  3179  0011BC  C07C  F0B3         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1018
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;vscp_firmware.c: 1003: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  3183  0011C0  5175               	movf	_vscp_imsg& (0+255),w,b
  3184  0011C2  0FFE               	addlw	254
  3185  0011C4  0B07               	andlw	7
  3186  0011C6  6FB4               	movwf	vscp_handleProtocolEvent@len_1019& (0+255),b
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;vscp_firmware.c: 1005: for (i = 0; i < len; i++) {
  3190  0011C8  6BBA               	clrf	vscp_handleProtocolEvent@i_1017& (0+255),b
  3191  0011CA  D016               	goto	l5579
  3192  0011CC                     l5573:
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;vscp_firmware.c: 1007: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  3196  0011CC  51BA               	movf	vscp_handleProtocolEvent@i_1017& (0+255),w,b
  3197  0011CE  0F7D               	addlw	low (_vscp_imsg+8)
  3198  0011D0  6ED9               	movwf	fsr2l,c
  3199  0011D2  6ADA               	clrf	fsr2h,c
  3200  0011D4  50DF               	movf	indf2,w,c
  3201  0011D6  6E16               	movwf	?_vscp_writeRegister,c
  3202  0011D8  51B3               	movf	vscp_handleProtocolEvent@pos_1018& (0+255),w,b
  3203  0011DA  25BA               	addwf	vscp_handleProtocolEvent@i_1017& (0+255),w,b
  3204  0011DC  EC4A  F014         	call	_vscp_writeRegister
  3205                           
  3206                           ;vscp_firmware.c: 1008: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  3207  0011E0  0100               	movlb	0	; () banked
  3208  0011E2  51BA               	movf	vscp_handleProtocolEvent@i_1017& (0+255),w,b
  3209  0011E4  0F89               	addlw	low (_vscp_omsg+6)
  3210  0011E6  6ED9               	movwf	fsr2l,c
  3211  0011E8  6ADA               	clrf	fsr2h,c
  3212  0011EA  51B3               	movf	vscp_handleProtocolEvent@pos_1018& (0+255),w,b
  3213  0011EC  25BA               	addwf	vscp_handleProtocolEvent@i_1017& (0+255),w,b
  3214  0011EE  ECAA  F014         	call	_vscp_readRegister
  3215  0011F2  6EDF               	movwf	indf2,c
  3216  0011F4  0100               	movlb	0	; () banked
  3217  0011F6  2BBA               	incf	vscp_handleProtocolEvent@i_1017& (0+255),f,b
  3218  0011F8                     l5579:
  3219                           
  3220                           ; BSR set to: 0
  3221  0011F8  51B4               	movf	vscp_handleProtocolEvent@len_1019& (0+255),w,b
  3222  0011FA  5DBA               	subwf	vscp_handleProtocolEvent@i_1017& (0+255),w,b
  3223  0011FC  E3E7               	bnc	l5573
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;vscp_firmware.c: 1009: }
  3227                           ;vscp_firmware.c: 1011: vscp_omsg.priority = 0x03;
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;vscp_firmware.c: 1012: vscp_omsg.vscp_class = 0;
  3231                           
  3232                           ;vscp_firmware.c: 1013: vscp_omsg.vscp_type = 26;
  3233  0011FE  D97D               	call	PL34	;call to abstracted procedure
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;vscp_firmware.c: 1014: vscp_omsg.data[ 0 ] = 0;
  3237  001200  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;vscp_firmware.c: 1015: vscp_omsg.flags = 0x80 + len + 1;
  3241  001202  51B4               	movf	vscp_handleProtocolEvent@len_1019& (0+255),w,b
  3242  001204  0F81               	addlw	129
  3243  001206  6F83               	movwf	_vscp_omsg& (0+255),b
  3244  001208  EFB0  F013         	goto	_vscp_sendEvent
  3245  00120C                     l5591:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;vscp_firmware.c: 1025: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3249  00120C  5170               	movf	_vscp_nickname& (0+255),w,b
  3250  00120E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3251  001212  62DF               	cpfseq	indf2,c
  3252  001214  0012               	return	
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3256                           ;vscp_firmware.c: 1028: vscp_imsg.data[ 1 ],
  3257                           ;vscp_firmware.c: 1029: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  3258  001216  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3259  001218  EC8F  F011         	call	_vscp_readAppReg
  3260  00121C  0100               	movlb	0	; () banked
  3261  00121E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3262  001220  29A4               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  3263  001222  6E0D               	movwf	?_vscp_writeAppReg,c
  3264  001224  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3265  001226  EC06  F00F         	call	_vscp_writeAppReg
  3266  00122A  D698               	goto	L1
  3267  00122C                     l5607:
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;vscp_firmware.c: 1045: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3271  00122C  5170               	movf	_vscp_nickname& (0+255),w,b
  3272  00122E  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3273  001232  62DF               	cpfseq	indf2,c
  3274  001234  0012               	return	
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;vscp_firmware.c: 1047: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  3278                           ;vscp_firmware.c: 1048: vscp_imsg.data[ 1 ],
  3279                           ;vscp_firmware.c: 1049: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  3280  001236  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3281  001238  EC8F  F011         	call	_vscp_readAppReg
  3282  00123C  0100               	movlb	0	; () banked
  3283  00123E  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3284  001240  05A4               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  3285  001242  6E0D               	movwf	?_vscp_writeAppReg,c
  3286  001244  517C               	movf	(_vscp_imsg+7)& (0+255),w,b
  3287  001246  EC06  F00F         	call	_vscp_writeAppReg
  3288  00124A  D688               	goto	L1
  3289  00124C                     l5623:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;vscp_firmware.c: 1065: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  3293                           ;vscp_firmware.c: 1066: (0xff == vscp_imsg.data[ 0 ])) {
  3294  00124C  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  3295  00124E  1970               	xorwf	_vscp_nickname& (0+255),w,b
  3296  001250  E003               	bz	l958
  3297                           
  3298                           ; BSR set to: 0
  3299  001252  297B               	incf	(_vscp_imsg+6)& (0+255),w,b
  3300  001254  A4D8               	btfss	status,2,c
  3301  001256  0012               	return	
  3302  001258                     l958:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;vscp_firmware.c: 1068: uint8_t i, j, k = 0;
  3306  001258  6BB8               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;vscp_firmware.c: 1072: vscp_omsg.priority = 0x03;
  3310  00125A  0E03               	movlw	3
  3311  00125C  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3312                           
  3313                           ;vscp_firmware.c: 1073: vscp_omsg.flags = 0x80 + 8;
  3314  00125E  0E88               	movlw	136
  3315  001260  6F83               	movwf	_vscp_omsg& (0+255),b
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;vscp_firmware.c: 1074: vscp_omsg.vscp_class = 0;
  3319  001262  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3320  001264  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3321                           
  3322                           ;vscp_firmware.c: 1075: vscp_omsg.vscp_type = 32;
  3323  001266  0E20               	movlw	32
  3324  001268  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;vscp_firmware.c: 1077: for (i = 0; i < 3; i++)
  3328  00126A  6BBC               	clrf	vscp_handleProtocolEvent@i_1020& (0+255),b
  3329  00126C                     l959:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;vscp_firmware.c: 1078: {
  3333                           ;vscp_firmware.c: 1079: vscp_omsg.data[0] = i;
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;vscp_firmware.c: 1081: for (j = 1; j < 8; j++) {
  3337  00126C  D94D               	call	PL40	;call to abstracted procedure
  3338  00126E                     l5643:
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;vscp_firmware.c: 1082: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  3342  00126E  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3343  001270  0F88               	addlw	low (_vscp_omsg+5)
  3344  001272  6ED9               	movwf	fsr2l,c
  3345  001274  6ADA               	clrf	fsr2h,c
  3346  001276  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3347  001278  080F               	sublw	15
  3348  00127A  ECC9  F014         	call	_vscp_getGUID
  3349  00127E  6EDF               	movwf	indf2,c
  3350  001280  0100               	movlb	0	; () banked
  3351  001282  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;vscp_firmware.c: 1083: if (k > 16)
  3355  001284  0E10               	movlw	16
  3356  001286  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3357  001288  D001               	goto	l5651
  3358  00128A  D004               	goto	l5655
  3359  00128C                     l5651:
  3360                           
  3361                           ; BSR set to: 0
  3362  00128C  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3363                           
  3364                           ; BSR set to: 0
  3365  00128E  0E07               	movlw	7
  3366  001290  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3367  001292  D7ED               	goto	l5643
  3368  001294                     l5655:
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;vscp_firmware.c: 1085: }
  3372                           ;vscp_firmware.c: 1087: if (k > 16)
  3373  001294  0E10               	movlw	16
  3374  001296  65B8               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  3375  001298  D001               	goto	l5659
  3376  00129A  D006               	goto	l960
  3377  00129C                     l5659:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;vscp_firmware.c: 1090: vscp_sendEvent();
  3381  00129C  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  3382                           
  3383                           ; BSR set to: 0
  3384  0012A0  2BBC               	incf	vscp_handleProtocolEvent@i_1020& (0+255),f,b
  3385                           
  3386                           ; BSR set to: 0
  3387  0012A2  0E02               	movlw	2
  3388  0012A4  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1020& (0+255),b
  3389  0012A6  D7E2               	goto	l959
  3390  0012A8                     l960:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;vscp_firmware.c: 1091: }
  3394                           ;vscp_firmware.c: 1093: for (j = 0; j < 5; j++)
  3395  0012A8  6BBE               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  3396  0012AA                     l5669:
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;vscp_firmware.c: 1094: {
  3400                           ;vscp_firmware.c: 1095: if (vscp_getMDF_URL(j) > 0)
  3401  0012AA  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3402  0012AC  EC77  F014         	call	_vscp_getMDF_URL
  3403  0012B0  0900               	iorlw	0
  3404  0012B2  E008               	bz	l5673
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;vscp_firmware.c: 1096: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  3408  0012B4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3409  0012B6  0F8B               	addlw	low (_vscp_omsg+8)
  3410  0012B8  6ED9               	movwf	fsr2l,c
  3411  0012BA  6ADA               	clrf	fsr2h,c
  3412  0012BC  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3413  0012BE  EC77  F014         	call	_vscp_getMDF_URL
  3414  0012C2  D005               	goto	L3
  3415  0012C4                     l5673:
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;vscp_firmware.c: 1097: else
  3419                           ;vscp_firmware.c: 1098: vscp_omsg.data[3 + j] = 0;
  3420  0012C4  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3421  0012C6  0F8B               	addlw	low (_vscp_omsg+8)
  3422  0012C8  6ED9               	movwf	fsr2l,c
  3423  0012CA  6ADA               	clrf	fsr2h,c
  3424  0012CC  0E00               	movlw	0
  3425  0012CE                     L3:
  3426  0012CE  6EDF               	movwf	indf2,c
  3427                           
  3428                           ; BSR set to: 0
  3429  0012D0  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3430                           
  3431                           ; BSR set to: 0
  3432  0012D2  0E04               	movlw	4
  3433  0012D4  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3434  0012D6  D7E9               	goto	l5669
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;vscp_firmware.c: 1099: }
  3438                           ;vscp_firmware.c: 1101: vscp_sendEvent();
  3439  0012D8  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;vscp_firmware.c: 1103: k = 5;
  3443  0012DC  0E05               	movlw	5
  3444  0012DE  6FB8               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;vscp_firmware.c: 1104: for (i = 3; i < 7; i++)
  3448  0012E0  0E03               	movlw	3
  3449  0012E2  6FBC               	movwf	vscp_handleProtocolEvent@i_1020& (0+255),b
  3450  0012E4                     l969:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;vscp_firmware.c: 1105: {
  3454                           ;vscp_firmware.c: 1106: vscp_omsg.data[0] = i;
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;vscp_firmware.c: 1108: for (j = 1; j < 8; j++) {
  3458  0012E4  D911               	call	PL40	;call to abstracted procedure
  3459  0012E6                     l5695:
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;vscp_firmware.c: 1109: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  3463  0012E6  51BE               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  3464  0012E8  0F88               	addlw	low (_vscp_omsg+5)
  3465  0012EA  6ED9               	movwf	fsr2l,c
  3466  0012EC  6ADA               	clrf	fsr2h,c
  3467  0012EE  51B8               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  3468  0012F0  EC77  F014         	call	_vscp_getMDF_URL
  3469  0012F4  6EDF               	movwf	indf2,c
  3470                           
  3471                           ; BSR set to: 0
  3472  0012F6  2BB8               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  3473                           
  3474                           ; BSR set to: 0
  3475  0012F8  2BBE               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  3476                           
  3477                           ; BSR set to: 0
  3478  0012FA  0E07               	movlw	7
  3479  0012FC  65BE               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  3480  0012FE  D7F3               	goto	l5695
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;vscp_firmware.c: 1110: }
  3484                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  3485  001300  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  3486                           
  3487                           ; BSR set to: 0
  3488  001304  2BBC               	incf	vscp_handleProtocolEvent@i_1020& (0+255),f,b
  3489                           
  3490                           ; BSR set to: 0
  3491  001306  0E06               	movlw	6
  3492  001308  65BC               	cpfsgt	vscp_handleProtocolEvent@i_1020& (0+255),b
  3493  00130A  D7EC               	goto	l969
  3494  00130C  0C06               	retlw	6
  3495  00130E                     l5709:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;vscp_firmware.c: 1120: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  3499  00130E  5170               	movf	_vscp_nickname& (0+255),w,b
  3500  001310  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3501  001314  62DF               	cpfseq	indf2,c
  3502  001316  0012               	return	
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;vscp_firmware.c: 1122: vscp_omsg.priority = 0x03;
  3506  001318  0E03               	movlw	3
  3507  00131A  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3508                           
  3509                           ;vscp_firmware.c: 1123: vscp_omsg.flags = 0x80 + 7;
  3510  00131C  0E87               	movlw	135
  3511  00131E  6F83               	movwf	_vscp_omsg& (0+255),b
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;vscp_firmware.c: 1124: vscp_omsg.vscp_class = 0;
  3515  001320  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3516  001322  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3517                           
  3518                           ;vscp_firmware.c: 1125: vscp_omsg.vscp_type = 34;
  3519  001324  0E22               	movlw	34
  3520  001326  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;vscp_firmware.c: 1127: vscp_getMatrixInfo((char *) vscp_omsg.data);
  3524  001328  0E88               	movlw	(_vscp_omsg+5)& (0+255)
  3525  00132A  EC1B  F014         	call	_vscp_getMatrixInfo
  3526  00132E  EFB0  F013         	goto	_vscp_sendEvent
  3527  001332                     l5719:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;vscp_firmware.c: 1143: if ( vscp_nickname == vscp_imsg.data[0] ) {
  3531  001332  5170               	movf	_vscp_nickname& (0+255),w,b
  3532  001334  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3533  001338  62DF               	cpfseq	indf2,c
  3534  00133A  0012               	return	
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;vscp_firmware.c: 1145: uint16_t page_save;
  3538                           ;vscp_firmware.c: 1146: uint8_t byte = 0, bytes = 0;
  3539  00133C  6BBB               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;vscp_firmware.c: 1147: uint8_t bytes_this_time, cb;
  3543                           ;vscp_firmware.c: 1151: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  3544  00133E  C075  F0A4         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  3545  001342  0E0F               	movlw	15
  3546  001344  17A4               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  3547  001346  0E04               	movlw	4
  3548  001348  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3549  00134A  E304               	bnc	l5727
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;vscp_firmware.c: 1154: bytes = vscp_imsg.data[4];
  3553  00134C  C07F  F0B9         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1025
  3554                           
  3555                           ;vscp_firmware.c: 1156: if ( 0 == bytes ) {
  3556  001350  67B9               	tstfsz	vscp_handleProtocolEvent@bytes_1025& (0+255),b
  3557  001352  D002               	goto	l5731
  3558  001354                     l5727:
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;vscp_firmware.c: 1157: bytes = 1;
  3562  001354  0E01               	movlw	1
  3563  001356  6FB9               	movwf	vscp_handleProtocolEvent@bytes_1025& (0+255),b
  3564  001358                     l5731:
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;vscp_firmware.c: 1162: }
  3568                           ;vscp_firmware.c: 1165: page_save = vscp_page_select;
  3569  001358  C04E  F0AB         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  3570  00135C  C04F  F0AC         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;vscp_firmware.c: 1170: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  3574  001360  D8B6               	call	PL12	;call to abstracted procedure
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;vscp_firmware.c: 1173: vscp_omsg.priority = 0x03;
  3578  001362  0E03               	movlw	3
  3579  001364  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;vscp_firmware.c: 1174: vscp_omsg.vscp_class = 0;
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;vscp_firmware.c: 1175: vscp_omsg.vscp_type = 39;
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;vscp_firmware.c: 1176: vscp_omsg.data[0] = 0;
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;vscp_firmware.c: 1177: vscp_omsg.data[1] = vscp_imsg.data[1];
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;vscp_firmware.c: 1178: vscp_omsg.data[2] = vscp_imsg.data[2];
  3595  001366  D8BF               	call	PL18	;call to abstracted procedure
  3596  001368                     l5747:
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;vscp_firmware.c: 1182: if ( ( bytes - byte ) >= 4 ) {
  3600  001368  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  3601  00136A  C0B9  F0A4         	movff	vscp_handleProtocolEvent@bytes_1025,??_vscp_handleProtocolEvent
  3602  00136E  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3603  001370  5FA4               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  3604  001372  0E00               	movlw	0
  3605  001374  5BA5               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3606  001376  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3607  001378  0A80               	xorlw	128
  3608  00137A  0F80               	addlw	-128
  3609  00137C  0E04               	movlw	4
  3610  00137E  B4D8               	btfsc	status,2,c
  3611  001380  5DA4               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3612  001382  E302               	bnc	l5751
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;vscp_firmware.c: 1183: bytes_this_time = 4;
  3616  001384  0E04               	movlw	4
  3617  001386  D002               	goto	L4
  3618  001388                     l5751:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;vscp_firmware.c: 1185: else {
  3622                           ;vscp_firmware.c: 1186: bytes_this_time = (bytes - byte);
  3623  001388  51BB               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  3624  00138A  5DB9               	subwf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  3625  00138C                     L4:
  3626  00138C  6FB5               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  3627                           
  3628                           ; BSR set to: 0
  3629                           ;vscp_firmware.c: 1187: }
  3630                           ;vscp_firmware.c: 1190: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  3631  00138E  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  3632  001390  0F84               	addlw	132
  3633  001392  6F83               	movwf	_vscp_omsg& (0+255),b
  3634                           
  3635                           ;vscp_firmware.c: 1191: vscp_omsg.data[3] =
  3636                           ;vscp_firmware.c: 1192: vscp_imsg.data[3] + byte;
  3637  001394  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  3638  001396  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  3639  001398  6F8B               	movwf	(_vscp_omsg+8)& (0+255),b
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;vscp_firmware.c: 1195: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  3643  00139A  6BB6               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  3644  00139C  D00C               	goto	l5759
  3645  00139E                     l5755:
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;vscp_firmware.c: 1196: vscp_omsg.data[ (4 + cb) ] =
  3649                           ;vscp_firmware.c: 1197: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  3650  00139E  51B6               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  3651  0013A0  0F8C               	addlw	low (_vscp_omsg+9)
  3652  0013A2  6ED9               	movwf	fsr2l,c
  3653  0013A4  6ADA               	clrf	fsr2h,c
  3654  0013A6  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  3655  0013A8  25BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  3656  0013AA  25B6               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  3657  0013AC  ECAA  F014         	call	_vscp_readRegister
  3658  0013B0  6EDF               	movwf	indf2,c
  3659  0013B2  0100               	movlb	0	; () banked
  3660  0013B4  2BB6               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  3661  0013B6                     l5759:
  3662                           
  3663                           ; BSR set to: 0
  3664  0013B6  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  3665  0013B8  5DB6               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  3666  0013BA  E3F1               	bnc	l5755
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;vscp_firmware.c: 1198: }
  3670                           ;vscp_firmware.c: 1201: vscp_sendEvent();
  3671  0013BC  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;vscp_firmware.c: 1204: byte += bytes_this_time;
  3675  0013C0  51B5               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  3676  0013C2  27BB               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;vscp_firmware.c: 1207: vscp_omsg.data[0] += 1;
  3680  0013C4  2B88               	incf	(_vscp_omsg+5)& (0+255),f,b
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;vscp_firmware.c: 1209: } while (byte < bytes);
  3684  0013C6  51B9               	movf	vscp_handleProtocolEvent@bytes_1025& (0+255),w,b
  3685  0013C8  5DBB               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  3686  0013CA  E3CE               	bnc	l5747
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;vscp_firmware.c: 1212: vscp_page_select = page_save;
  3690  0013CC  C0AB  F04E         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  3691  0013D0  C0AC  F04F         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  3692  0013D4  0012               	return	
  3693  0013D6                     l5769:
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;vscp_firmware.c: 1219: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  3697  0013D6  5170               	movf	_vscp_nickname& (0+255),w,b
  3698  0013D8  EE20  F07B         	lfsr	2,_vscp_imsg+6
  3699  0013DC  62DF               	cpfseq	indf2,c
  3700  0013DE  0012               	return	
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;vscp_firmware.c: 1221: uint8_t i;
  3704                           ;vscp_firmware.c: 1222: uint16_t page_save;
  3705                           ;vscp_firmware.c: 1225: page_save = vscp_page_select;
  3706  0013E0  C04E  F0AD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1029
  3707  0013E4  C04F  F0AE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1029+1
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;vscp_firmware.c: 1229: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  3711  0013E8  D872               	call	PL12	;call to abstracted procedure
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;vscp_firmware.c: 1231: for (i = vscp_imsg.data[ 3 ];
  3715  0013EA  C07E  F0B7         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1028
  3716                           
  3717                           ;vscp_firmware.c: 1234: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  3718                           ;vscp_firmware.c: 1235: i++) {
  3719  0013EE  D014               	goto	l5781
  3720  0013F0                     l5777:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;vscp_firmware.c: 1236: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  3724                           ;vscp_firmware.c: 1237: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  3725  0013F0  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  3726  0013F2  087F               	sublw	low (_vscp_imsg+10)
  3727  0013F4  25B7               	addwf	vscp_handleProtocolEvent@i_1028& (0+255),w,b
  3728  0013F6  6ED9               	movwf	fsr2l,c
  3729  0013F8  6ADA               	clrf	fsr2h,c
  3730  0013FA  50DF               	movf	indf2,w,c
  3731  0013FC  6E16               	movwf	?_vscp_writeRegister,c
  3732  0013FE  51B7               	movf	vscp_handleProtocolEvent@i_1028& (0+255),w,b
  3733  001400  EC4A  F014         	call	_vscp_writeRegister
  3734  001404  0100               	movlb	0	; () banked
  3735  001406  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3736  001408  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  3737  00140A  088C               	sublw	low (_vscp_omsg+9)
  3738  00140C  25B7               	addwf	vscp_handleProtocolEvent@i_1028& (0+255),w,b
  3739  00140E  6ED9               	movwf	fsr2l,c
  3740  001410  6ADA               	clrf	fsr2h,c
  3741  001412  C0A4  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  3742                           
  3743                           ; BSR set to: 0
  3744  001416  2BB7               	incf	vscp_handleProtocolEvent@i_1028& (0+255),f,b
  3745  001418                     l5781:
  3746                           
  3747                           ; BSR set to: 0
  3748  001418  5175               	movf	_vscp_imsg& (0+255),w,b
  3749  00141A  0B0F               	andlw	15
  3750  00141C  6FA4               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  3751  00141E  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3752  001420  517E               	movf	(_vscp_imsg+9)& (0+255),w,b
  3753  001422  27A4               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  3754  001424  0E00               	movlw	0
  3755  001426  23A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  3756  001428  0EFC               	movlw	252
  3757  00142A  25A4               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3758  00142C  6FA6               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  3759  00142E  0EFF               	movlw	255
  3760  001430  21A5               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3761  001432  6FA7               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  3762  001434  51B7               	movf	vscp_handleProtocolEvent@i_1028& (0+255),w,b
  3763  001436  6FA8               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  3764  001438  6BA9               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  3765  00143A  51A9               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  3766  00143C  0A80               	xorlw	128
  3767  00143E  6FAA               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  3768  001440  51A6               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  3769  001442  5DA8               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  3770  001444  51A7               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  3771  001446  0A80               	xorlw	128
  3772  001448  59AA               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  3773  00144A  E3D2               	bnc	l5777
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;vscp_firmware.c: 1238: }
  3777                           ;vscp_firmware.c: 1241: vscp_page_select = page_save;
  3778  00144C  C0AD  F04E         	movff	vscp_handleProtocolEvent@page_save_1029,_vscp_page_select
  3779  001450  C0AE  F04F         	movff	vscp_handleProtocolEvent@page_save_1029+1,_vscp_page_select+1
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;vscp_firmware.c: 1243: vscp_omsg.priority = 0x03;
  3783  001454  0E03               	movlw	3
  3784  001456  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;vscp_firmware.c: 1244: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  3788  001458  5175               	movf	_vscp_imsg& (0+255),w,b
  3789  00145A  0B0F               	andlw	15
  3790  00145C  0F80               	addlw	128
  3791  00145E  6F83               	movwf	_vscp_omsg& (0+255),b
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;vscp_firmware.c: 1245: vscp_omsg.vscp_class = 0;
  3795                           
  3796                           ; BSR set to: 0
  3797                           ;vscp_firmware.c: 1246: vscp_omsg.vscp_type = 39;
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;vscp_firmware.c: 1247: vscp_omsg.data[0] = 0;
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;vscp_firmware.c: 1248: vscp_omsg.data[1] = vscp_imsg.data[1];
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;vscp_firmware.c: 1249: vscp_omsg.data[2] = vscp_imsg.data[2];
  3807  001460  D842               	call	PL18	;call to abstracted procedure
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;vscp_firmware.c: 1250: vscp_omsg.data[3] = vscp_imsg.data[3];
  3811  001462  C07E  F08B         	movff	_vscp_imsg+9,_vscp_omsg+8
  3812  001466  EFB0  F013         	goto	_vscp_sendEvent
  3813  00146A                     l5803:
  3814                           
  3815                           ; BSR set to: 0
  3816  00146A  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  3817                           
  3818                           ; Switch size 1, requested type "space"
  3819                           ; Number of cases is 16, Range of values is 1 to 38
  3820                           ; switch strategies available:
  3821                           ; Name         Instructions Cycles
  3822                           ; simple_byte           49    25 (average)
  3823                           ;	Chosen strategy is simple_byte
  3824  00146C  0A01               	xorlw	1	; case 1
  3825  00146E  E101 D55D          	bz	l5391
  3826  001472  0A03               	xorlw	3	; case 2
  3827  001474  E101 D55C          	bz	l5393
  3828  001478  0A04               	xorlw	4	; case 6
  3829  00147A  E101 D55B          	bz	l5395
  3830  00147E  0A0E               	xorlw	14	; case 8
  3831  001480  E101 D55A          	bz	l5397
  3832  001484  0A01               	xorlw	1	; case 9
  3833  001486  E101 D559          	bz	l5399
  3834  00148A  0A02               	xorlw	2	; case 11
  3835  00148C  E101 D578          	bz	l5433
  3836  001490  0A07               	xorlw	7	; case 12
  3837  001492  E101 D58E          	bz	l5467
  3838  001496  0A1B               	xorlw	27	; case 23
  3839  001498  E101 D622          	bz	l5525
  3840  00149C  0A0F               	xorlw	15	; case 24
  3841  00149E  E101 D635          	bz	l5531
  3842  0014A2  0A01               	xorlw	1	; case 25
  3843  0014A4  E101 D685          	bz	l5565
  3844  0014A8  0A04               	xorlw	4	; case 29
  3845  0014AA  E101 D6AF          	bz	l5591
  3846  0014AE  0A03               	xorlw	3	; case 30
  3847  0014B0  E101 D6BC          	bz	l5607
  3848  0014B4  0A01               	xorlw	1	; case 31
  3849  0014B6  E101 D6C9          	bz	l5623
  3850  0014BA  0A3E               	xorlw	62	; case 33
  3851  0014BC  E101 D727          	bz	l5709
  3852  0014C0  0A04               	xorlw	4	; case 37
  3853  0014C2  E101 D736          	bz	l5719
  3854  0014C6  0A03               	xorlw	3	; case 38
  3855  0014C8  A4D8               	btfss	status,2,c
  3856  0014CA  0012               	return	
  3857  0014CC  D784               	goto	l5769
  3858  0014CE                     __end_of_vscp_handleProtocolEvent:
  3859                           	opt stack 0
  3860  0014CE                     PL12:
  3861                           	opt stack 22
  3862  0014CE  517D               	movf	(_vscp_imsg+8)& (0+255),w,b
  3863  0014D0  C07C  F0A4         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  3864  0014D4  6BA5               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  3865  0014D6  C0A4  F0A5         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  3866  0014DA  6BA4               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  3867  0014DC  11A4               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  3868  0014DE  6E4E               	movwf	_vscp_page_select,c
  3869  0014E0  51A5               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  3870  0014E2  6E4F               	movwf	_vscp_page_select+1,c
  3871  0014E4  0012               	return	
  3872  0014E6                     __end_ofPL12:
  3873                           	opt stack 0
  3874  0014E6                     PL18:
  3875                           	opt stack 22
  3876  0014E6  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3877  0014E8  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3878  0014EA  0E27               	movlw	39
  3879  0014EC  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3880  0014EE  6B88               	clrf	(_vscp_omsg+5)& (0+255),b
  3881  0014F0  C07C  F089         	movff	_vscp_imsg+7,_vscp_omsg+6
  3882  0014F4  C07D  F08A         	movff	_vscp_imsg+8,_vscp_omsg+7
  3883  0014F8  0012               	return	
  3884  0014FA                     __end_ofPL18:
  3885                           	opt stack 0
  3886  0014FA                     PL34:
  3887                           	opt stack 22
  3888  0014FA  0E03               	movlw	3
  3889  0014FC  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  3890  0014FE  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  3891  001500  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  3892  001502  0E1A               	movlw	26
  3893  001504  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  3894  001506  0C1A               	retlw	26
  3895  001508                     __end_ofPL34:
  3896                           	opt stack 0
  3897  001508                     PL40:
  3898                           	opt stack 22
  3899  001508  C0BC  F088         	movff	vscp_handleProtocolEvent@i_1020,_vscp_omsg+5
  3900  00150C  0E01               	movlw	1
  3901  00150E  6FBE               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  3902  001510  0C01               	retlw	1
  3903  001512                     __end_ofPL40:
  3904                           	opt stack 0
  3905                           tblptru	equ	0xFF8
  3906                           tblptrh	equ	0xFF7
  3907                           tblptrl	equ	0xFF6
  3908                           tablat	equ	0xFF5
  3909                           prodh	equ	0xFF4
  3910                           prodl	equ	0xFF3
  3911                           intcon	equ	0xFF2
  3912                           postinc0	equ	0xFEE
  3913                           wreg	equ	0xFE8
  3914                           indf1	equ	0xFE7
  3915                           fsr1h	equ	0xFE2
  3916                           fsr1l	equ	0xFE1
  3917                           indf2	equ	0xFDF
  3918                           postinc2	equ	0xFDE
  3919                           postdec2	equ	0xFDD
  3920                           plusw2	equ	0xFDB
  3921                           fsr2h	equ	0xFDA
  3922                           fsr2l	equ	0xFD9
  3923                           status	equ	0xFD8
  3924                           
  3925 ;; *************** function ___lbmod *****************
  3926 ;; Defined at:
  3927 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  3928 ;; Parameters:    Size  Location     Type
  3929 ;;  dividend        1    wreg     unsigned char 
  3930 ;;  divisor         1    7[COMRAM] unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  dividend        1    8[COMRAM] unsigned char 
  3933 ;;  rem             1   10[COMRAM] unsigned char 
  3934 ;;  counter         1    9[COMRAM] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      unsigned char 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0
  3939 ;; Tracked objects:
  3940 ;;		On entry : F/0
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3944 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3945 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3947 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3948 ;;Total ram usage:        4 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    2
  3951 ;; This function calls:
  3952 ;;		Nothing
  3953 ;; This function is called by:
  3954 ;;		_vscp_handleProtocolEvent
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text14
  3959  002712                     __ptext14:
  3960                           	opt stack 0
  3961  002712                     ___lbmod:
  3962                           	opt stack 27
  3963                           
  3964                           ;incstack = 0
  3965                           ;incstack = 0
  3966                           ;___lbmod@dividend stored from wreg
  3967  002712  CFE8 F009          	movff	wreg,___lbmod@dividend
  3968                           
  3969                           ; BSR set to: 0
  3970  002716  0E08               	movlw	8
  3971  002718  6E0A               	movwf	___lbmod@counter,c
  3972                           
  3973                           ; BSR set to: 0
  3974  00271A  6A0B               	clrf	___lbmod@rem,c
  3975  00271C                     l5149:
  3976  00271C  90D8               	bcf	status,0,c
  3977  00271E  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  3978  002720  340B               	rlcf	___lbmod@rem& (0+255),w,c
  3979  002722  6E0B               	movwf	___lbmod@rem,c
  3980  002724  90D8               	bcf	status,0,c
  3981  002726  3609               	rlcf	___lbmod@dividend,f,c
  3982  002728  5008               	movf	___lbmod@divisor,w,c
  3983  00272A  5C0B               	subwf	___lbmod@rem,w,c
  3984  00272C  E302               	bnc	l5157
  3985  00272E  5008               	movf	___lbmod@divisor,w,c
  3986  002730  5E0B               	subwf	___lbmod@rem,f,c
  3987  002732                     l5157:
  3988  002732  2E0A               	decfsz	___lbmod@counter,f,c
  3989  002734  D7F3               	goto	l5149
  3990  002736  500B               	movf	___lbmod@rem,w,c
  3991  002738  0012               	return	
  3992  00273A                     __end_of___lbmod:
  3993                           	opt stack 0
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           indf1	equ	0xFE7
  4004                           fsr1h	equ	0xFE2
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           plusw2	equ	0xFDB
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _vscp_writeRegister *****************
  4015 ;; Defined at:
  4016 ;;		line 692 in file "../../vscp_firmware/common/vscp_firmware.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  reg             1    wreg     unsigned char 
  4019 ;;  value           1   21[COMRAM] unsigned char 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  reg             1   22[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      unsigned char 
  4024 ;; Registers used:
  4025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : F/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4031 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4035 ;;Total ram usage:        2 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    6
  4038 ;; This function calls:
  4039 ;;		_vscp_writeAppReg
  4040 ;;		_vscp_writeStdReg
  4041 ;; This function is called by:
  4042 ;;		_vscp_handleProtocolEvent
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text15
  4047  002894                     __ptext15:
  4048                           	opt stack 0
  4049  002894                     _vscp_writeRegister:
  4050                           	opt stack 23
  4051                           
  4052                           ;incstack = 0
  4053                           ;incstack = 0
  4054                           ;vscp_writeRegister@reg stored from wreg
  4055  002894  CFE8 F017          	movff	wreg,vscp_writeRegister@reg
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;vscp_firmware.c: 693: if (reg >= 0x80) {
  4059  002898  0E7F               	movlw	127
  4060  00289A  6417               	cpfsgt	vscp_writeRegister@reg,c
  4061  00289C  D005               	goto	l5075
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;vscp_firmware.c: 694: return vscp_writeStdReg(reg, value);
  4065  00289E  C016  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  4066  0028A2  5017               	movf	vscp_writeRegister@reg,w,c
  4067  0028A4  EF8E  F00F         	goto	_vscp_writeStdReg
  4068  0028A8                     l5075:
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;vscp_firmware.c: 696: return vscp_writeAppReg(reg, value);
  4072  0028A8  C016  F00D         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  4073  0028AC  5017               	movf	vscp_writeRegister@reg,w,c
  4074  0028AE  EF06  F00F         	goto	_vscp_writeAppReg
  4075  0028B2                     __end_of_vscp_writeRegister:
  4076                           	opt stack 0
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf1	equ	0xFE7
  4087                           fsr1h	equ	0xFE2
  4088                           fsr1l	equ	0xFE1
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           plusw2	equ	0xFDB
  4093                           fsr2h	equ	0xFDA
  4094                           fsr2l	equ	0xFD9
  4095                           status	equ	0xFD8
  4096                           
  4097 ;; *************** function _vscp_writeStdReg *****************
  4098 ;; Defined at:
  4099 ;;		line 705 in file "../../vscp_firmware/common/vscp_firmware.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  reg             1    wreg     unsigned char 
  4102 ;;  value           1   14[COMRAM] unsigned char 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  reg             1   20[COMRAM] unsigned char 
  4105 ;;  rv              1   19[COMRAM] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  1    wreg      unsigned char 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0, cstack
  4110 ;; Tracked objects:
  4111 ;;		On entry : F/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4115 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4117 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4118 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4119 ;;Total ram usage:        7 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    5
  4122 ;; This function calls:
  4123 ;;		_vscp_setGUID
  4124 ;;		_vscp_setManufacturerId
  4125 ;;		_vscp_getGUID
  4126 ;;		_vscp_getUserID
  4127 ;;		_vscp_setUserID
  4128 ;;		_vscp_getManufacturerId
  4129 ;;		_vscp_restoreDefaults
  4130 ;; This function is called by:
  4131 ;;		_vscp_writeRegister
  4132 ;;		_vscp_handleProtocolEvent
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136                           	psect	text16
  4137  001F1C                     __ptext16:
  4138                           	opt stack 0
  4139  001F1C                     _vscp_writeStdReg:
  4140                           	opt stack 24
  4141                           
  4142                           ;incstack = 0
  4143                           ;incstack = 0
  4144                           ;vscp_writeStdReg@reg stored from wreg
  4145  001F1C  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;vscp_firmware.c: 706: uint8_t rv = ~value;
  4149  001F20  1C0F               	comf	vscp_writeStdReg@value,w,c
  4150  001F22  6E14               	movwf	vscp_writeStdReg@rv,c
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;vscp_firmware.c: 708: if ((reg > (0x82 + 1)) &&
  4154                           ;vscp_firmware.c: 709: (reg < 0x89)) {
  4155  001F24  0E83               	movlw	131
  4156  001F26  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4157  001F28  D00E               	goto	l5087
  4158                           
  4159                           ; BSR set to: 0
  4160  001F2A  0E89               	movlw	137
  4161  001F2C  6015               	cpfslt	vscp_writeStdReg@reg,c
  4162  001F2E  D00B               	goto	l5087
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;vscp_firmware.c: 712: vscp_setUserID((reg - 0x84), value);
  4166  001F30  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  4167  001F34  5015               	movf	vscp_writeStdReg@reg,w,c
  4168  001F36  0F7C               	addlw	124
  4169  001F38  EC92  F014         	call	_vscp_setUserID
  4170                           
  4171                           ;vscp_firmware.c: 713: rv = vscp_getUserID((reg - 0x84));
  4172  001F3C  5015               	movf	vscp_writeStdReg@reg,w,c
  4173  001F3E  0F7C               	addlw	124
  4174  001F40  ECBF  F014         	call	_vscp_getUserID
  4175  001F44  D069               	goto	L10
  4176  001F46                     l5087:
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;vscp_firmware.c: 716: else if (0x92 == reg) {
  4180  001F46  5015               	movf	vscp_writeStdReg@reg,w,c
  4181  001F48  0A92               	xorlw	146
  4182  001F4A  E10D               	bnz	l5093
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;vscp_firmware.c: 719: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  4186  001F4C  500F               	movf	vscp_writeStdReg@value,w,c
  4187  001F4E  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4188  001F50  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  4189  001F52  504E               	movf	_vscp_page_select,w,c
  4190  001F54  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  4191  001F56  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  4192  001F58  1010               	iorwf	??_vscp_writeStdReg,w,c
  4193  001F5A  6E4E               	movwf	_vscp_page_select,c
  4194  001F5C  5011               	movf	??_vscp_writeStdReg+1,w,c
  4195  001F5E  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  4196  001F60  6E4F               	movwf	_vscp_page_select+1,c
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;vscp_firmware.c: 720: rv = (vscp_page_select >> 8) & 0xff;
  4200  001F62  504F               	movf	_vscp_page_select+1,w,c
  4201  001F64  D059               	goto	L10
  4202  001F66                     l5093:
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;vscp_firmware.c: 722: else if (0x93 == reg) {
  4206  001F66  5015               	movf	vscp_writeStdReg@reg,w,c
  4207  001F68  0A93               	xorlw	147
  4208  001F6A  E10B               	bnz	l5099
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;vscp_firmware.c: 725: vscp_page_select = (vscp_page_select & 0xff00) | value;
  4212  001F6C  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  4213  001F6E  504F               	movf	_vscp_page_select+1,w,c
  4214  001F70  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  4215  001F72  500F               	movf	vscp_writeStdReg@value,w,c
  4216  001F74  1010               	iorwf	??_vscp_writeStdReg,w,c
  4217  001F76  6E4E               	movwf	_vscp_page_select,c
  4218  001F78  5011               	movf	??_vscp_writeStdReg+1,w,c
  4219  001F7A  6E4F               	movwf	_vscp_page_select+1,c
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;vscp_firmware.c: 726: rv = (vscp_page_select & 0xff);
  4223  001F7C  C04E  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  4224                           
  4225                           ;vscp_firmware.c: 727: }
  4226  001F80  D04E               	goto	l5141
  4227  001F82                     l5099:
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;vscp_firmware.c: 732: else if ((reg > 0x88) && (reg < 0x91)) {
  4231  001F82  0E88               	movlw	136
  4232  001F84  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4233  001F86  D019               	goto	l5111
  4234                           
  4235                           ; BSR set to: 0
  4236  001F88  0E91               	movlw	145
  4237  001F8A  6015               	cpfslt	vscp_writeStdReg@reg,c
  4238  001F8C  D016               	goto	l5111
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;vscp_firmware.c: 734: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4242                           ;vscp_firmware.c: 735: (0xff != (vscp_page_select & 0xff))) {
  4243  001F8E  C04F  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4244  001F92  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4245  001F96  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4246  001F98  2811               	incf	??_vscp_writeStdReg+1,w,c
  4247  001F9A  E102               	bnz	l5107
  4248                           
  4249                           ; BSR set to: 0
  4250  001F9C  284E               	incf	_vscp_page_select,w,c
  4251  001F9E  E002               	bz	l5109
  4252  001FA0                     l5107:
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;vscp_firmware.c: 737: rv = ~value;
  4256  001FA0  1C0F               	comf	vscp_writeStdReg@value,w,c
  4257  001FA2  D03A               	goto	L10
  4258  001FA4                     l5109:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;vscp_firmware.c: 740: vscp_setManufacturerId(reg - 0x89, value);
  4262  001FA4  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  4263  001FA8  5015               	movf	vscp_writeStdReg@reg,w,c
  4264  001FAA  0F77               	addlw	119
  4265  001FAC  ECFB  F013         	call	_vscp_setManufacturerId
  4266                           
  4267                           ;vscp_firmware.c: 741: rv = vscp_getManufacturerId(reg - 0x89);
  4268  001FB0  5015               	movf	vscp_writeStdReg@reg,w,c
  4269  001FB2  0F77               	addlw	119
  4270  001FB4  ECB5  F014         	call	_vscp_getManufacturerId
  4271  001FB8  D02F               	goto	L10
  4272  001FBA                     l5111:
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;vscp_firmware.c: 744: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  4276  001FBA  0ECF               	movlw	207
  4277  001FBC  6415               	cpfsgt	vscp_writeStdReg@reg,c
  4278  001FBE  D017               	goto	l5123
  4279                           
  4280                           ; BSR set to: 0
  4281  001FC0  0EE0               	movlw	224
  4282  001FC2  6015               	cpfslt	vscp_writeStdReg@reg,c
  4283  001FC4  D014               	goto	l5123
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;vscp_firmware.c: 746: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  4287                           ;vscp_firmware.c: 747: (0xff != (vscp_page_select & 0xff))) {
  4288  001FC6  C04F  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  4289  001FCA  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  4290  001FCE  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  4291  001FD0  2811               	incf	??_vscp_writeStdReg+1,w,c
  4292  001FD2  E1E6               	bnz	l5107
  4293                           
  4294                           ; BSR set to: 0
  4295  001FD4  284E               	incf	_vscp_page_select,w,c
  4296  001FD6  E1E4               	bnz	l5107
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;vscp_firmware.c: 751: else {
  4300                           ;vscp_firmware.c: 752: vscp_setGUID(reg - 0xD0, value);
  4301  001FD8  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  4302  001FDC  5015               	movf	vscp_writeStdReg@reg,w,c
  4303  001FDE  0F30               	addlw	48
  4304  001FE0  EC0B  F014         	call	_vscp_setGUID
  4305                           
  4306                           ;vscp_firmware.c: 753: rv = vscp_getGUID(reg - 0xD0);
  4307  001FE4  5015               	movf	vscp_writeStdReg@reg,w,c
  4308  001FE6  0F30               	addlw	48
  4309  001FE8  ECC9  F014         	call	_vscp_getGUID
  4310  001FEC  D015               	goto	L10
  4311  001FEE                     l5123:
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  4315  001FEE  5015               	movf	vscp_writeStdReg@reg,w,c
  4316  001FF0  0AA2               	xorlw	162
  4317  001FF2  E1D6               	bnz	l5107
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  4321  001FF4  500F               	movf	vscp_writeStdReg@value,w,c
  4322  001FF6  0A55               	xorlw	85
  4323  001FF8  E104               	bnz	l5131
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  4327  001FFA  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  4328  001FFC  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;vscp_firmware.c: 760: rv = 0x55;
  4332  001FFE  0E55               	movlw	85
  4333  002000  D00B               	goto	L10
  4334  002002                     l5131:
  4335                           
  4336                           ; BSR set to: 0
  4337                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  4338  002002  500F               	movf	vscp_writeStdReg@value,w,c
  4339  002004  0AAA               	xorlw	170
  4340  002006  E10B               	bnz	l5141
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  4344  002008  0EE8               	movlw	232
  4345  00200A  5D64               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  4346  00200C  0E03               	movlw	3
  4347  00200E  5965               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  4348  002010  E205               	bc	l900
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  4352  002012  EC30  F015         	call	_vscp_restoreDefaults	;wreg free
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;vscp_firmware.c: 765: rv = 0xaa;
  4356  002016  0EAA               	movlw	170
  4357  002018                     L10:
  4358  002018  6E14               	movwf	vscp_writeStdReg@rv,c
  4359                           
  4360                           ;vscp_firmware.c: 766: }
  4361  00201A  D001               	goto	l5141
  4362  00201C                     l900:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;vscp_firmware.c: 767: else {
  4366                           ;vscp_firmware.c: 768: rv = 0;
  4367  00201C  6A14               	clrf	vscp_writeStdReg@rv,c
  4368  00201E                     l5141:
  4369                           
  4370                           ;vscp_firmware.c: 776: }
  4371                           ;vscp_firmware.c: 778: return rv;
  4372  00201E  5014               	movf	vscp_writeStdReg@rv,w,c
  4373  002020  0012               	return	
  4374  002022                     __end_of_vscp_writeStdReg:
  4375                           	opt stack 0
  4376                           tblptru	equ	0xFF8
  4377                           tblptrh	equ	0xFF7
  4378                           tblptrl	equ	0xFF6
  4379                           tablat	equ	0xFF5
  4380                           prodh	equ	0xFF4
  4381                           prodl	equ	0xFF3
  4382                           intcon	equ	0xFF2
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           fsr1h	equ	0xFE2
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           plusw2	equ	0xFDB
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _vscp_restoreDefaults *****************
  4397 ;; Defined at:
  4398 ;;		line 1150 in file "../main.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;		None
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;		None
  4403 ;; Return value:  Size  Location     Type
  4404 ;;		None               void
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : F/0
  4409 ;;		On exit  : F/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4416 ;;Total ram usage:        0 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    4
  4419 ;; This function calls:
  4420 ;;		_init_app_eeprom
  4421 ;;		_init_app_ram
  4422 ;; This function is called by:
  4423 ;;		_vscp_writeStdReg
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text17
  4428  002A60                     __ptext17:
  4429                           	opt stack 0
  4430  002A60                     _vscp_restoreDefaults:
  4431                           	opt stack 24
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;main.c: 1151: init_app_eeprom();
  4435                           
  4436                           ;incstack = 0
  4437                           ;incstack = 0
  4438  002A60  EC38  F011         	call	_init_app_eeprom	;wreg free
  4439                           
  4440                           ;main.c: 1152: init_app_ram();
  4441  002A64  EFF7  F014         	goto	_init_app_ram	;wreg free
  4442  002A68                     __end_of_vscp_restoreDefaults:
  4443                           	opt stack 0
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           postinc0	equ	0xFEE
  4452                           wreg	equ	0xFE8
  4453                           indf1	equ	0xFE7
  4454                           fsr1h	equ	0xFE2
  4455                           fsr1l	equ	0xFE1
  4456                           indf2	equ	0xFDF
  4457                           postinc2	equ	0xFDE
  4458                           postdec2	equ	0xFDD
  4459                           plusw2	equ	0xFDB
  4460                           fsr2h	equ	0xFDA
  4461                           fsr2l	equ	0xFD9
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _init_app_eeprom *****************
  4465 ;; Defined at:
  4466 ;;		line 451 in file "../main.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;  i               1   13[COMRAM] unsigned char 
  4471 ;;  j               1   12[COMRAM] unsigned char 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;		None               void
  4474 ;; Registers used:
  4475 ;;		wreg, status,2, status,0, cstack
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4482 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4483 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4484 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4485 ;;Total ram usage:        4 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:    3
  4488 ;; This function calls:
  4489 ;;		_writeEEPROM
  4490 ;; This function is called by:
  4491 ;;		_main
  4492 ;;		_vscp_restoreDefaults
  4493 ;; This function uses a non-reentrant model
  4494 ;;
  4495                           
  4496                           	psect	text18
  4497  002270                     __ptext18:
  4498                           	opt stack 0
  4499  002270                     _init_app_eeprom:
  4500                           	opt stack 24
  4501                           
  4502                           ;main.c: 452: unsigned char i, j;
  4503                           ;main.c: 454: writeEEPROM( 0x21 + 0, 0 );
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;incstack = 0
  4507                           ;incstack = 0
  4508  002270  6A09               	clrf	?_writeEEPROM+1,c
  4509  002272  0E21               	movlw	33
  4510  002274  6E08               	movwf	?_writeEEPROM,c
  4511  002276  0E00               	movlw	0
  4512  002278  6A0A               	clrf	?_writeEEPROM+2,c
  4513  00227A  ECD6  F013         	call	_writeEEPROM	;wreg free
  4514                           
  4515                           ;main.c: 455: writeEEPROM( 0x21 + 1, 0 );
  4516  00227E  6A09               	clrf	?_writeEEPROM+1,c
  4517  002280  0E22               	movlw	34
  4518  002282  6E08               	movwf	?_writeEEPROM,c
  4519  002284  0E00               	movlw	0
  4520  002286  6A0A               	clrf	?_writeEEPROM+2,c
  4521  002288  ECD6  F013         	call	_writeEEPROM	;wreg free
  4522                           
  4523                           ;main.c: 457: for ( i=3; i<21; i++ ) {
  4524  00228C  0E03               	movlw	3
  4525  00228E  6E0E               	movwf	init_app_eeprom@i,c
  4526  002290                     l3579:
  4527                           
  4528                           ;main.c: 458: writeEEPROM( 0x21 + 2 + (i-3), i );
  4529  002290  0E20               	movlw	32
  4530  002292  240E               	addwf	init_app_eeprom@i,w,c
  4531  002294  6E08               	movwf	?_writeEEPROM,c
  4532  002296  6A09               	clrf	?_writeEEPROM+1,c
  4533  002298  0E00               	movlw	0
  4534  00229A  2209               	addwfc	?_writeEEPROM+1,f,c
  4535  00229C  C00E  F00A         	movff	init_app_eeprom@i,?_writeEEPROM+2
  4536  0022A0  ECD6  F013         	call	_writeEEPROM	;wreg free
  4537  0022A4  2A0E               	incf	init_app_eeprom@i,f,c
  4538  0022A6  0E14               	movlw	20
  4539  0022A8  640E               	cpfsgt	init_app_eeprom@i,c
  4540  0022AA  D7F2               	goto	l3579
  4541                           
  4542                           ;main.c: 459: }
  4543                           ;main.c: 461: writeEEPROM( 0x21 + 20, 0 );
  4544  0022AC  6A09               	clrf	?_writeEEPROM+1,c
  4545  0022AE  0E35               	movlw	53
  4546  0022B0  6E08               	movwf	?_writeEEPROM,c
  4547  0022B2  0E00               	movlw	0
  4548  0022B4  6A0A               	clrf	?_writeEEPROM+2,c
  4549  0022B6  ECD6  F013         	call	_writeEEPROM	;wreg free
  4550                           
  4551                           ;main.c: 462: writeEEPROM( 0x21 + 21, 0 );
  4552  0022BA  6A09               	clrf	?_writeEEPROM+1,c
  4553  0022BC  0E36               	movlw	54
  4554  0022BE  6E08               	movwf	?_writeEEPROM,c
  4555  0022C0  0E00               	movlw	0
  4556  0022C2  6A0A               	clrf	?_writeEEPROM+2,c
  4557  0022C4  ECD6  F013         	call	_writeEEPROM	;wreg free
  4558                           
  4559                           ;main.c: 463: writeEEPROM( 0x21 + 22, 0 );
  4560  0022C8  6A09               	clrf	?_writeEEPROM+1,c
  4561  0022CA  0E37               	movlw	55
  4562  0022CC  6E08               	movwf	?_writeEEPROM,c
  4563  0022CE  0E00               	movlw	0
  4564  0022D0  6A0A               	clrf	?_writeEEPROM+2,c
  4565  0022D2  ECD6  F013         	call	_writeEEPROM	;wreg free
  4566                           
  4567                           ;main.c: 467: for ( i = 0; i < 8; i++ ) {
  4568  0022D6  6A0E               	clrf	init_app_eeprom@i,c
  4569  0022D8                     l165:
  4570                           
  4571                           ;main.c: 468: for ( j = 0; j < 8; j++ ) {
  4572  0022D8  6A0D               	clrf	init_app_eeprom@j,c
  4573  0022DA                     l3597:
  4574                           
  4575                           ;main.c: 469: writeEEPROM( 0x21 + 23 + 0 + i * 8 + j, 0 );
  4576  0022DA  500D               	movf	init_app_eeprom@j,w,c
  4577  0022DC  C00E  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  4578  0022E0  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  4579  0022E2  90D8               	bcf	status,0,c
  4580  0022E4  360B               	rlcf	??_init_app_eeprom,f,c
  4581  0022E6  360C               	rlcf	??_init_app_eeprom+1,f,c
  4582  0022E8  90D8               	bcf	status,0,c
  4583  0022EA  360B               	rlcf	??_init_app_eeprom,f,c
  4584  0022EC  360C               	rlcf	??_init_app_eeprom+1,f,c
  4585  0022EE  90D8               	bcf	status,0,c
  4586  0022F0  360B               	rlcf	??_init_app_eeprom,f,c
  4587  0022F2  360C               	rlcf	??_init_app_eeprom+1,f,c
  4588  0022F4  260B               	addwf	??_init_app_eeprom,f,c
  4589  0022F6  0E00               	movlw	0
  4590  0022F8  220C               	addwfc	??_init_app_eeprom+1,f,c
  4591  0022FA  0E38               	movlw	56
  4592  0022FC  240B               	addwf	??_init_app_eeprom,w,c
  4593  0022FE  6E08               	movwf	?_writeEEPROM,c
  4594  002300  0E00               	movlw	0
  4595  002302  200C               	addwfc	??_init_app_eeprom+1,w,c
  4596  002304  6E09               	movwf	?_writeEEPROM+1,c
  4597  002306  0E00               	movlw	0
  4598  002308  6A0A               	clrf	?_writeEEPROM+2,c
  4599  00230A  ECD6  F013         	call	_writeEEPROM	;wreg free
  4600  00230E  2A0D               	incf	init_app_eeprom@j,f,c
  4601  002310  0E07               	movlw	7
  4602  002312  640D               	cpfsgt	init_app_eeprom@j,c
  4603  002314  D7E2               	goto	l3597
  4604  002316  2A0E               	incf	init_app_eeprom@i,f,c
  4605  002318  640E               	cpfsgt	init_app_eeprom@i,c
  4606  00231A  D7DE               	goto	l165
  4607  00231C  0C07               	retlw	7
  4608  00231E                     __end_of_init_app_eeprom:
  4609                           	opt stack 0
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           intcon	equ	0xFF2
  4617                           postinc0	equ	0xFEE
  4618                           wreg	equ	0xFE8
  4619                           indf1	equ	0xFE7
  4620                           fsr1h	equ	0xFE2
  4621                           fsr1l	equ	0xFE1
  4622                           indf2	equ	0xFDF
  4623                           postinc2	equ	0xFDE
  4624                           postdec2	equ	0xFDD
  4625                           plusw2	equ	0xFDB
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function _vscp_setUserID *****************
  4631 ;; Defined at:
  4632 ;;		line 984 in file "../main.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  idx             1    wreg     unsigned char 
  4635 ;;  data            1   10[COMRAM] unsigned char 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  idx             1   11[COMRAM] unsigned char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;		None               void
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : F/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4647 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4651 ;;Total ram usage:        2 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    3
  4654 ;; This function calls:
  4655 ;;		_writeEEPROM
  4656 ;; This function is called by:
  4657 ;;		_vscp_writeStdReg
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text19
  4662  002924                     __ptext19:
  4663                           	opt stack 0
  4664  002924                     _vscp_setUserID:
  4665                           	opt stack 25
  4666                           
  4667                           ;incstack = 0
  4668                           ;incstack = 0
  4669                           ;vscp_setUserID@idx stored from wreg
  4670  002924  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 985: writeEEPROM( idx + 0x04, data );
  4674  002928  0E04               	movlw	4
  4675  00292A  240C               	addwf	vscp_setUserID@idx,w,c
  4676  00292C  6E08               	movwf	?_writeEEPROM,c
  4677  00292E  6A09               	clrf	?_writeEEPROM+1,c
  4678  002930  0E00               	movlw	0
  4679  002932  2209               	addwfc	?_writeEEPROM+1,f,c
  4680  002934  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  4681  002938  EFD6  F013         	goto	_writeEEPROM	;wreg free
  4682  00293C                     __end_of_vscp_setUserID:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           intcon	equ	0xFF2
  4691                           postinc0	equ	0xFEE
  4692                           wreg	equ	0xFE8
  4693                           indf1	equ	0xFE7
  4694                           fsr1h	equ	0xFE2
  4695                           fsr1l	equ	0xFE1
  4696                           indf2	equ	0xFDF
  4697                           postinc2	equ	0xFDE
  4698                           postdec2	equ	0xFDD
  4699                           plusw2	equ	0xFDB
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _vscp_setManufacturerId *****************
  4705 ;; Defined at:
  4706 ;;		line 531 in file "../main.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  idx             1    wreg     unsigned char 
  4709 ;;  data            1   10[COMRAM] unsigned char 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  idx             1   11[COMRAM] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;		None               void
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0, cstack
  4716 ;; Tracked objects:
  4717 ;;		On entry : F/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4721 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4725 ;;Total ram usage:        2 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    3
  4728 ;; This function calls:
  4729 ;;		_writeEEPROM
  4730 ;; This function is called by:
  4731 ;;		_vscp_writeStdReg
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text20
  4736  0027F6                     __ptext20:
  4737                           	opt stack 0
  4738  0027F6                     _vscp_setManufacturerId:
  4739                           	opt stack 25
  4740                           
  4741                           ;incstack = 0
  4742                           ;incstack = 0
  4743                           ;vscp_setManufacturerId@idx stored from wreg
  4744  0027F6  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  4745                           
  4746                           ; BSR set to: 0
  4747                           ;main.c: 532: if ( idx>7 ) return;
  4748  0027FA  0E07               	movlw	7
  4749  0027FC  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  4750  0027FE  D001               	goto	l4355
  4751  002800  0C07               	retlw	7
  4752  002802                     l4355:
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;main.c: 533: writeEEPROM(0x09 + idx, data);
  4756  002802  0E09               	movlw	9
  4757  002804  240C               	addwf	vscp_setManufacturerId@idx,w,c
  4758  002806  6E08               	movwf	?_writeEEPROM,c
  4759  002808  6A09               	clrf	?_writeEEPROM+1,c
  4760  00280A  0E00               	movlw	0
  4761  00280C  2209               	addwfc	?_writeEEPROM+1,f,c
  4762  00280E  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  4763  002812  EFD6  F013         	goto	_writeEEPROM	;wreg free
  4764  002816                     __end_of_vscp_setManufacturerId:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           intcon	equ	0xFF2
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           indf1	equ	0xFE7
  4776                           fsr1h	equ	0xFE2
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           plusw2	equ	0xFDB
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _vscp_setGUID *****************
  4787 ;; Defined at:
  4788 ;;		line 519 in file "../main.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  idx             1    wreg     unsigned char 
  4791 ;;  data            1   10[COMRAM] unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  idx             1   11[COMRAM] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;		None               void
  4796 ;; Registers used:
  4797 ;;		wreg, status,2, status,0, cstack
  4798 ;; Tracked objects:
  4799 ;;		On entry : F/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4803 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4806 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4807 ;;Total ram usage:        2 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; Hardware stack levels required when called:    3
  4810 ;; This function calls:
  4811 ;;		_writeEEPROM
  4812 ;; This function is called by:
  4813 ;;		_vscp_writeStdReg
  4814 ;; This function uses a non-reentrant model
  4815 ;;
  4816                           
  4817                           	psect	text21
  4818  002816                     __ptext21:
  4819                           	opt stack 0
  4820  002816                     _vscp_setGUID:
  4821                           	opt stack 25
  4822                           
  4823                           ;incstack = 0
  4824                           ;incstack = 0
  4825                           ;vscp_setGUID@idx stored from wreg
  4826  002816  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;main.c: 520: if ( idx>15 ) return;
  4830  00281A  0E0F               	movlw	15
  4831  00281C  640C               	cpfsgt	vscp_setGUID@idx,c
  4832  00281E  D001               	goto	l4349
  4833  002820  0C0F               	retlw	15
  4834  002822                     l4349:
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;main.c: 521: writeEEPROM(0x11 + idx, data);
  4838  002822  0E11               	movlw	17
  4839  002824  240C               	addwf	vscp_setGUID@idx,w,c
  4840  002826  6E08               	movwf	?_writeEEPROM,c
  4841  002828  6A09               	clrf	?_writeEEPROM+1,c
  4842  00282A  0E00               	movlw	0
  4843  00282C  2209               	addwfc	?_writeEEPROM+1,f,c
  4844  00282E  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  4845  002832  EFD6  F013         	goto	_writeEEPROM	;wreg free
  4846  002836                     __end_of_vscp_setGUID:
  4847                           	opt stack 0
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           wreg	equ	0xFE8
  4857                           indf1	equ	0xFE7
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           indf2	equ	0xFDF
  4861                           postinc2	equ	0xFDE
  4862                           postdec2	equ	0xFDD
  4863                           plusw2	equ	0xFDB
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _vscp_writeAppReg *****************
  4869 ;; Defined at:
  4870 ;;		line 665 in file "../main.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  reg             1    wreg     unsigned char 
  4873 ;;  val             1   12[COMRAM] unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  reg             1   14[COMRAM] unsigned char 
  4876 ;;  rv              1   13[COMRAM] unsigned char 
  4877 ;;  bOn             1    0        enum E18242
  4878 ;;  bInfoEvent      1    0        enum E18242
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      unsigned char 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : F/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4888 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4889 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4891 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4892 ;;Total ram usage:        3 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    3
  4895 ;; This function calls:
  4896 ;;		_writeEEPROM
  4897 ;;		_readEEPROM
  4898 ;; This function is called by:
  4899 ;;		_vscp_writeRegister
  4900 ;;		_vscp_handleProtocolEvent
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text22
  4905  001E0C                     __ptext22:
  4906                           	opt stack 0
  4907  001E0C                     _vscp_writeAppReg:
  4908                           	opt stack 25
  4909                           
  4910                           ;incstack = 0
  4911                           ;incstack = 0
  4912                           ;vscp_writeAppReg@reg stored from wreg
  4913  001E0C  CFE8 F00F          	movff	wreg,vscp_writeAppReg@reg
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;main.c: 670: rv = ~val;
  4917  001E10  1C0D               	comf	vscp_writeAppReg@val,w,c
  4918  001E12  6E0E               	movwf	vscp_writeAppReg@rv,c
  4919                           
  4920                           ;main.c: 673: if ( 0 == vscp_page_select ) {
  4921  001E14  504F               	movf	_vscp_page_select+1,w,c
  4922  001E16  104E               	iorwf	_vscp_page_select,w,c
  4923  001E18  E164               	bnz	l4449
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;main.c: 676: if ( reg == 0 ) {
  4927  001E1A  660F               	tstfsz	vscp_writeAppReg@reg,c
  4928  001E1C  D00D               	goto	l4425
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;main.c: 677: writeEEPROM(0x21 + 0, val);
  4932  001E1E  6A09               	clrf	?_writeEEPROM+1,c
  4933  001E20  0E21               	movlw	33
  4934  001E22  6E08               	movwf	?_writeEEPROM,c
  4935  001E24  C00D  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  4936  001E28  ECD6  F013         	call	_writeEEPROM	;wreg free
  4937                           
  4938                           ;main.c: 678: rv = readEEPROM(0x21 + 0);
  4939  001E2C  6A09               	clrf	?_readEEPROM+1,c
  4940  001E2E  0E21               	movlw	33
  4941  001E30  6E08               	movwf	?_readEEPROM,c
  4942  001E32  ECD3  F014         	call	_readEEPROM	;wreg free
  4943  001E36  D067               	goto	L11
  4944  001E38                     l4425:
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;main.c: 680: else if ( reg == 1 ) {
  4948  001E38  040F               	decf	vscp_writeAppReg@reg,w,c
  4949  001E3A  E10D               	bnz	l4429
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;main.c: 682: writeEEPROM(0x21 + 1, val);
  4953  001E3C  6A09               	clrf	?_writeEEPROM+1,c
  4954  001E3E  0E22               	movlw	34
  4955  001E40  6E08               	movwf	?_writeEEPROM,c
  4956  001E42  C00D  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  4957  001E46  ECD6  F013         	call	_writeEEPROM	;wreg free
  4958                           
  4959                           ;main.c: 683: rv = readEEPROM(0x21 + 1);
  4960  001E4A  6A09               	clrf	?_readEEPROM+1,c
  4961  001E4C  0E22               	movlw	34
  4962  001E4E  6E08               	movwf	?_readEEPROM,c
  4963  001E50  ECD3  F014         	call	_readEEPROM	;wreg free
  4964  001E54  D058               	goto	L11
  4965  001E56                     l4429:
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;main.c: 686: else if ( ( reg >= 2 ) && ( reg <= 19 ) ) {
  4969  001E56  0E01               	movlw	1
  4970  001E58  640F               	cpfsgt	vscp_writeAppReg@reg,c
  4971  001E5A  D010               	goto	l4435
  4972                           
  4973                           ; BSR set to: 0
  4974  001E5C  0E14               	movlw	20
  4975  001E5E  600F               	cpfslt	vscp_writeAppReg@reg,c
  4976  001E60  D00D               	goto	l4435
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;main.c: 687: writeEEPROM(0x21 + 2 +
  4980                           ;main.c: 688: ( reg - 2 ), val);
  4981  001E62  0E21               	movlw	33
  4982  001E64  D853               	call	PL30	;call to abstracted procedure
  4983  001E66  ECD6  F013         	call	_writeEEPROM	;wreg free
  4984                           
  4985                           ;main.c: 689: rv = readEEPROM( 0x21 + 2 +
  4986                           ;main.c: 690: ( reg - 2 ) );
  4987  001E6A  0E21               	movlw	33
  4988  001E6C  240F               	addwf	vscp_writeAppReg@reg,w,c
  4989  001E6E  6E08               	movwf	?_readEEPROM,c
  4990  001E70  6A09               	clrf	?_readEEPROM+1,c
  4991  001E72  0E00               	movlw	0
  4992  001E74  2209               	addwfc	?_readEEPROM+1,f,c
  4993  001E76  ECD3  F014         	call	_readEEPROM	;wreg free
  4994  001E7A  D045               	goto	L11
  4995  001E7C                     l4435:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;main.c: 693: else if ( reg == 20 ) {
  4999  001E7C  500F               	movf	vscp_writeAppReg@reg,w,c
  5000  001E7E  0A14               	xorlw	20
  5001  001E80  E10D               	bnz	l4439
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 694: writeEEPROM(0x21 + 20, val);
  5005  001E82  6A09               	clrf	?_writeEEPROM+1,c
  5006  001E84  0E35               	movlw	53
  5007  001E86  6E08               	movwf	?_writeEEPROM,c
  5008  001E88  C00D  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5009  001E8C  ECD6  F013         	call	_writeEEPROM	;wreg free
  5010                           
  5011                           ;main.c: 695: rv = readEEPROM(0x21 + 20);
  5012  001E90  6A09               	clrf	?_readEEPROM+1,c
  5013  001E92  0E35               	movlw	53
  5014  001E94  6E08               	movwf	?_readEEPROM,c
  5015  001E96  ECD3  F014         	call	_readEEPROM	;wreg free
  5016  001E9A  D035               	goto	L11
  5017  001E9C                     l4439:
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;main.c: 698: else if ( reg == 21 ) {
  5021  001E9C  500F               	movf	vscp_writeAppReg@reg,w,c
  5022  001E9E  0A15               	xorlw	21
  5023  001EA0  E10D               	bnz	l4443
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;main.c: 699: writeEEPROM(0x21 + 21, val);
  5027  001EA2  6A09               	clrf	?_writeEEPROM+1,c
  5028  001EA4  0E36               	movlw	54
  5029  001EA6  6E08               	movwf	?_writeEEPROM,c
  5030  001EA8  C00D  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5031  001EAC  ECD6  F013         	call	_writeEEPROM	;wreg free
  5032                           
  5033                           ;main.c: 700: rv = readEEPROM(0x21 + 21);
  5034  001EB0  6A09               	clrf	?_readEEPROM+1,c
  5035  001EB2  0E36               	movlw	54
  5036  001EB4  6E08               	movwf	?_readEEPROM,c
  5037  001EB6  ECD3  F014         	call	_readEEPROM	;wreg free
  5038  001EBA  D025               	goto	L11
  5039  001EBC                     l4443:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;main.c: 703: else if ( reg == 22 ) {
  5043  001EBC  500F               	movf	vscp_writeAppReg@reg,w,c
  5044  001EBE  0A16               	xorlw	22
  5045  001EC0  E123               	bnz	l4455
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;main.c: 704: writeEEPROM(0x21 + 22, val);
  5049  001EC2  6A09               	clrf	?_writeEEPROM+1,c
  5050  001EC4  0E37               	movlw	55
  5051  001EC6  6E08               	movwf	?_writeEEPROM,c
  5052  001EC8  C00D  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5053  001ECC  ECD6  F013         	call	_writeEEPROM	;wreg free
  5054                           
  5055                           ;main.c: 705: rv = readEEPROM(0x21 + 22);
  5056  001ED0  6A09               	clrf	?_readEEPROM+1,c
  5057  001ED2  0E37               	movlw	55
  5058  001ED4  6E08               	movwf	?_readEEPROM,c
  5059  001ED6  ECD3  F014         	call	_readEEPROM	;wreg free
  5060  001EDA  6E0E               	movwf	vscp_writeAppReg@rv,c
  5061                           
  5062                           ;main.c: 706: rv &= 0x03;
  5063  001EDC  0E03               	movlw	3
  5064  001EDE  160E               	andwf	vscp_writeAppReg@rv,f,c
  5065  001EE0  D013               	goto	l4455
  5066  001EE2                     l4449:
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;main.c: 711: else if ( 1 == vscp_page_select ) {
  5070  001EE2  044E               	decf	_vscp_page_select,w,c
  5071  001EE4  104F               	iorwf	_vscp_page_select+1,w,c
  5072  001EE6  E110               	bnz	l4455
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;main.c: 714: if ( ( reg >= 0 ) && ( reg <= ( 0 +
  5076                           ;main.c: 715: ( 8 * 8 ) ) ) ) {
  5077  001EE8  0E41               	movlw	65
  5078  001EEA  600F               	cpfslt	vscp_writeAppReg@reg,c
  5079  001EEC  D00D               	goto	l4455
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;main.c: 716: writeEEPROM(0x21 + 0x21 +
  5083                           ;main.c: 717: 23 + ( reg - 0 ), val);
  5084  001EEE  0E59               	movlw	89
  5085  001EF0  D80D               	call	PL30	;call to abstracted procedure
  5086  001EF2  ECD6  F013         	call	_writeEEPROM	;wreg free
  5087                           
  5088                           ;main.c: 718: rv = readEEPROM(0x21 + 0x21 +
  5089                           ;main.c: 719: 23 + ( reg - 0 ) );
  5090  001EF6  0E59               	movlw	89
  5091  001EF8  240F               	addwf	vscp_writeAppReg@reg,w,c
  5092  001EFA  6E08               	movwf	?_readEEPROM,c
  5093  001EFC  6A09               	clrf	?_readEEPROM+1,c
  5094  001EFE  0E00               	movlw	0
  5095  001F00  2209               	addwfc	?_readEEPROM+1,f,c
  5096  001F02  ECD3  F014         	call	_readEEPROM	;wreg free
  5097  001F06                     L11:
  5098  001F06  6E0E               	movwf	vscp_writeAppReg@rv,c
  5099  001F08                     l4455:
  5100                           
  5101                           ;main.c: 720: }
  5102                           ;main.c: 722: }
  5103                           ;main.c: 724: return rv;
  5104  001F08  500E               	movf	vscp_writeAppReg@rv,w,c
  5105  001F0A  0012               	return	
  5106  001F0C                     __end_of_vscp_writeAppReg:
  5107                           	opt stack 0
  5108  001F0C                     PL30:
  5109                           	opt stack 25
  5110  001F0C  240F               	addwf	vscp_writeAppReg@reg,w,c
  5111  001F0E  6E08               	movwf	?_writeEEPROM,c
  5112  001F10  6A09               	clrf	?_writeEEPROM+1,c
  5113  001F12  0E00               	movlw	0
  5114  001F14  2209               	addwfc	?_writeEEPROM+1,f,c
  5115  001F16  C00D  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  5116  001F1A  0C00               	retlw	0
  5117  001F1C                     __end_ofPL30:
  5118                           	opt stack 0
  5119                           tblptru	equ	0xFF8
  5120                           tblptrh	equ	0xFF7
  5121                           tblptrl	equ	0xFF6
  5122                           tablat	equ	0xFF5
  5123                           prodh	equ	0xFF4
  5124                           prodl	equ	0xFF3
  5125                           intcon	equ	0xFF2
  5126                           postinc0	equ	0xFEE
  5127                           wreg	equ	0xFE8
  5128                           indf1	equ	0xFE7
  5129                           fsr1h	equ	0xFE2
  5130                           fsr1l	equ	0xFE1
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           plusw2	equ	0xFDB
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139 ;; *************** function _vscp_readRegister *****************
  5140 ;; Defined at:
  5141 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
  5142 ;; Parameters:    Size  Location     Type
  5143 ;;  reg             1    wreg     unsigned char 
  5144 ;; Auto vars:     Size  Location     Type
  5145 ;;  reg             1   28[COMRAM] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      unsigned char 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : F/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5156 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5159 ;;Total ram usage:        1 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    5
  5162 ;; This function calls:
  5163 ;;		_vscp_readAppReg
  5164 ;;		_vscp_readStdReg
  5165 ;; This function is called by:
  5166 ;;		_vscp_handleProtocolEvent
  5167 ;; This function uses a non-reentrant model
  5168 ;;
  5169                           
  5170                           	psect	text23
  5171  002954                     __ptext23:
  5172                           	opt stack 0
  5173  002954                     _vscp_readRegister:
  5174                           	opt stack 24
  5175                           
  5176                           ;incstack = 0
  5177                           ;incstack = 0
  5178                           ;vscp_readRegister@reg stored from wreg
  5179  002954  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
  5183  002958  0E7F               	movlw	127
  5184  00295A  641D               	cpfsgt	vscp_readRegister@reg,c
  5185  00295C  D003               	goto	l4965
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
  5189  00295E  501D               	movf	vscp_readRegister@reg,w,c
  5190  002960  EF6C  F00C         	goto	_vscp_readStdReg
  5191  002964                     l4965:
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
  5195  002964  501D               	movf	vscp_readRegister@reg,w,c
  5196  002966  EF8F  F011         	goto	_vscp_readAppReg
  5197  00296A                     __end_of_vscp_readRegister:
  5198                           	opt stack 0
  5199                           tblptru	equ	0xFF8
  5200                           tblptrh	equ	0xFF7
  5201                           tblptrl	equ	0xFF6
  5202                           tablat	equ	0xFF5
  5203                           prodh	equ	0xFF4
  5204                           prodl	equ	0xFF3
  5205                           intcon	equ	0xFF2
  5206                           postinc0	equ	0xFEE
  5207                           wreg	equ	0xFE8
  5208                           indf1	equ	0xFE7
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           plusw2	equ	0xFDB
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function _vscp_readStdReg *****************
  5220 ;; Defined at:
  5221 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  reg             1    wreg     unsigned char 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  reg             1   27[COMRAM] unsigned char 
  5226 ;;  code            4   20[COMRAM] unsigned long 
  5227 ;;  idx             1   25[COMRAM] unsigned char 
  5228 ;;  code            4   16[COMRAM] unsigned long 
  5229 ;;  idx             1   24[COMRAM] unsigned char 
  5230 ;;  rv              1   26[COMRAM] unsigned char 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      unsigned char 
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : F/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5241 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5242 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5243 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5244 ;;Total ram usage:       17 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    4
  5247 ;; This function calls:
  5248 ;;		_vscp_getMajorVersion
  5249 ;;		_vscp_getMinorVersion
  5250 ;;		_vscp_getSubMinorVersion
  5251 ;;		_vscp_getGUID
  5252 ;;		_vscp_getMDF_URL
  5253 ;;		_vscp_getUserID
  5254 ;;		_vscp_getManufacturerId
  5255 ;;		_vscp_getBootLoaderAlgorithm
  5256 ;;		_vscp_getBufferSize
  5257 ;;		_vscp_getFamilyCode
  5258 ;;		_vscp_getFamilyType
  5259 ;;		_vscp_getRegisterPagesUsed
  5260 ;; This function is called by:
  5261 ;;		_vscp_readRegister
  5262 ;;		_vscp_handleProtocolEvent
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	text24
  5267  0018D8                     __ptext24:
  5268                           	opt stack 0
  5269  0018D8                     _vscp_readStdReg:
  5270                           	opt stack 25
  5271                           
  5272                           ;incstack = 0
  5273                           ;incstack = 0
  5274                           ;vscp_readStdReg@reg stored from wreg
  5275  0018D8  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;vscp_firmware.c: 567: uint8_t rv = 0;
  5279  0018DC  6A1B               	clrf	vscp_readStdReg@rv,c
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;vscp_firmware.c: 569: if (0x80 == reg) {
  5283  0018DE  501C               	movf	vscp_readStdReg@reg,w,c
  5284  0018E0  0A80               	xorlw	128
  5285  0018E2  E104               	bnz	l4975
  5286                           
  5287                           ; BSR set to: 0
  5288                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
  5289  0018E4  C06B  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
  5290                           
  5291                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
  5292  0018E8  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  5293                           
  5294                           ;vscp_firmware.c: 575: }
  5295  0018EA  D0B3               	goto	l5063
  5296  0018EC                     l4975:
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
  5300  0018EC  501C               	movf	vscp_readStdReg@reg,w,c
  5301  0018EE  0A81               	xorlw	129
  5302  0018F0  E102               	bnz	l4979
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;vscp_firmware.c: 579: rv = 1;
  5306  0018F2  0E01               	movlw	1
  5307  0018F4  D075               	goto	L22
  5308  0018F6                     l4979:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
  5312  0018F6  501C               	movf	vscp_readStdReg@reg,w,c
  5313  0018F8  0A82               	xorlw	130
  5314  0018FA  E102               	bnz	l4983
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;vscp_firmware.c: 585: rv = 5;
  5318  0018FC  0E05               	movlw	5
  5319  0018FE  D070               	goto	L22
  5320  001900                     l4983:
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
  5324  001900  501C               	movf	vscp_readStdReg@reg,w,c
  5325  001902  0A83               	xorlw	131
  5326  001904  E102               	bnz	l4987
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;vscp_firmware.c: 591: rv = 0;
  5330  001906  6A1B               	clrf	vscp_readStdReg@rv,c
  5331                           
  5332                           ;vscp_firmware.c: 593: }
  5333  001908  D0A4               	goto	l5063
  5334  00190A                     l4987:
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
  5338  00190A  501C               	movf	vscp_readStdReg@reg,w,c
  5339  00190C  0A94               	xorlw	148
  5340  00190E  E103               	bnz	l4991
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
  5344  001910  EC41  F015         	call	_vscp_getMajorVersion	;wreg free
  5345  001914  D065               	goto	L22
  5346  001916                     l4991:
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
  5350  001916  501C               	movf	vscp_readStdReg@reg,w,c
  5351  001918  0A95               	xorlw	149
  5352  00191A  E103               	bnz	l4995
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
  5356  00191C  EC40  F015         	call	_vscp_getMinorVersion	;wreg free
  5357  001920  D05F               	goto	L22
  5358  001922                     l4995:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
  5362  001922  501C               	movf	vscp_readStdReg@reg,w,c
  5363  001924  0A96               	xorlw	150
  5364  001926  E103               	bnz	l4999
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
  5368  001928  EC3F  F015         	call	_vscp_getSubMinorVersion	;wreg free
  5369  00192C  D059               	goto	L22
  5370  00192E                     l4999:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
  5374  00192E  0E89               	movlw	137
  5375  001930  601C               	cpfslt	vscp_readStdReg@reg,c
  5376  001932  D005               	goto	l5003
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
  5380  001934  501C               	movf	vscp_readStdReg@reg,w,c
  5381  001936  0F7C               	addlw	124
  5382  001938  ECBF  F014         	call	_vscp_getUserID
  5383  00193C  D051               	goto	L22
  5384  00193E                     l5003:
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
  5388                           ;vscp_firmware.c: 619: (reg < 0x91)) {
  5389  00193E  0E88               	movlw	136
  5390  001940  641C               	cpfsgt	vscp_readStdReg@reg,c
  5391  001942  D008               	goto	l5009
  5392                           
  5393                           ; BSR set to: 0
  5394  001944  0E91               	movlw	145
  5395  001946  601C               	cpfslt	vscp_readStdReg@reg,c
  5396  001948  D005               	goto	l5009
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
  5400  00194A  501C               	movf	vscp_readStdReg@reg,w,c
  5401  00194C  0F77               	addlw	119
  5402  00194E  ECB5  F014         	call	_vscp_getManufacturerId
  5403  001952  D046               	goto	L22
  5404  001954                     l5009:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
  5408  001954  501C               	movf	vscp_readStdReg@reg,w,c
  5409  001956  0A91               	xorlw	145
  5410  001958  E103               	bnz	l5013
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;vscp_firmware.c: 628: rv = vscp_nickname;
  5414  00195A  C070  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
  5415                           
  5416                           ;vscp_firmware.c: 630: }
  5417  00195E  D079               	goto	l5063
  5418  001960                     l5013:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
  5422  001960  501C               	movf	vscp_readStdReg@reg,w,c
  5423  001962  0A93               	xorlw	147
  5424  001964  E103               	bnz	l5017
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
  5428  001966  C04E  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
  5429                           
  5430                           ;vscp_firmware.c: 636: }
  5431  00196A  D073               	goto	l5063
  5432  00196C                     l5017:
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
  5436  00196C  501C               	movf	vscp_readStdReg@reg,w,c
  5437  00196E  0A92               	xorlw	146
  5438  001970  E102               	bnz	l5021
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
  5442  001972  504F               	movf	_vscp_page_select+1,w,c
  5443  001974  D035               	goto	L22
  5444  001976                     l5021:
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
  5448  001976  501C               	movf	vscp_readStdReg@reg,w,c
  5449  001978  0A97               	xorlw	151
  5450  00197A  E103               	bnz	l5025
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
  5454  00197C  EC3E  F015         	call	_vscp_getBootLoaderAlgorithm	;wreg free
  5455  001980  D02F               	goto	L22
  5456  001982                     l5025:
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
  5460  001982  501C               	movf	vscp_readStdReg@reg,w,c
  5461  001984  0A98               	xorlw	152
  5462  001986  E103               	bnz	l5029
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
  5466  001988  EC3D  F015         	call	_vscp_getBufferSize	;wreg free
  5467  00198C  D029               	goto	L22
  5468  00198E                     l5029:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
  5472  00198E  501C               	movf	vscp_readStdReg@reg,w,c
  5473  001990  0A99               	xorlw	153
  5474  001992  E103               	bnz	l5033
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
  5478  001994  EC3C  F015         	call	_vscp_getRegisterPagesUsed	;wreg free
  5479  001998  D023               	goto	L22
  5480  00199A                     l5033:
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;vscp_firmware.c: 656: else if ( ( reg >= 0x9A ) &&
  5484                           ;vscp_firmware.c: 657: ( reg < ( 0x9A + 4 ) ) ) {
  5485  00199A  0E99               	movlw	153
  5486  00199C  641C               	cpfsgt	vscp_readStdReg@reg,c
  5487  00199E  D022               	goto	l5043
  5488                           
  5489                           ; BSR set to: 0
  5490  0019A0  0E9E               	movlw	158
  5491  0019A2  601C               	cpfslt	vscp_readStdReg@reg,c
  5492  0019A4  D01F               	goto	l5043
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;vscp_firmware.c: 659: uint32_t code = vscp_getFamilyCode();
  5496  0019A6  EC21  F015         	call	_vscp_getFamilyCode	;wreg free
  5497  0019AA  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
  5498  0019AE  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
  5499  0019B2  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
  5500  0019B6  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;vscp_firmware.c: 660: uint8_t idx = reg - 0x9A;
  5504  0019BA  501C               	movf	vscp_readStdReg@reg,w,c
  5505  0019BC  0F66               	addlw	102
  5506  0019BE  6E19               	movwf	vscp_readStdReg@idx,c
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;vscp_firmware.c: 661: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  5510  0019C0  5019               	movf	vscp_readStdReg@idx,w,c
  5511  0019C2  D849               	call	PL26	;call to abstracted procedure
  5512  0019C4  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
  5513  0019C8  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
  5514  0019CC  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
  5515  0019D0  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
  5516  0019D4  2AE8               	incf	wreg,f,c
  5517  0019D6  D001               	goto	u4690
  5518  0019D8                     u4695:
  5519  0019D8  D848               	call	PL38	;call to abstracted procedure
  5520  0019DA                     u4690:
  5521  0019DA  2EE8               	decfsz	wreg,f,c
  5522  0019DC  D7FD               	goto	u4695
  5523  0019DE  D024               	goto	L23
  5524  0019E0                     L22:
  5525  0019E0  6E1B               	movwf	vscp_readStdReg@rv,c
  5526                           
  5527                           ;vscp_firmware.c: 662: }
  5528  0019E2  D037               	goto	l5063
  5529  0019E4                     l5043:
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;vscp_firmware.c: 663: else if ( ( reg >= 0x9E ) &&
  5533                           ;vscp_firmware.c: 664: ( reg < ( 0x9E + 4 ) ) ) {
  5534  0019E4  0E9D               	movlw	157
  5535  0019E6  641C               	cpfsgt	vscp_readStdReg@reg,c
  5536  0019E8  D021               	goto	l5053
  5537                           
  5538                           ; BSR set to: 0
  5539  0019EA  0EA2               	movlw	162
  5540  0019EC  601C               	cpfslt	vscp_readStdReg@reg,c
  5541  0019EE  D01E               	goto	l5053
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;vscp_firmware.c: 666: uint32_t code = vscp_getFamilyType();
  5545  0019F0  EC1C  F015         	call	_vscp_getFamilyType	;wreg free
  5546  0019F4  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1002+3
  5547  0019F8  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1002+2
  5548  0019FC  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1002+1
  5549  001A00  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1002
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;vscp_firmware.c: 667: uint8_t idx = reg - 0x9E;
  5553  001A04  501C               	movf	vscp_readStdReg@reg,w,c
  5554  001A06  0F62               	addlw	98
  5555  001A08  6E1A               	movwf	vscp_readStdReg@idx_1003,c
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;vscp_firmware.c: 668: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
  5559  001A0A  501A               	movf	vscp_readStdReg@idx_1003,w,c
  5560  001A0C  D824               	call	PL26	;call to abstracted procedure
  5561  001A0E  C015  F00D         	movff	vscp_readStdReg@code_1002,??_vscp_readStdReg+1
  5562  001A12  C016  F00E         	movff	vscp_readStdReg@code_1002+1,??_vscp_readStdReg+2
  5563  001A16  C017  F00F         	movff	vscp_readStdReg@code_1002+2,??_vscp_readStdReg+3
  5564  001A1A  C018  F010         	movff	vscp_readStdReg@code_1002+3,??_vscp_readStdReg+4
  5565  001A1E  2AE8               	incf	wreg,f,c
  5566  001A20  D001               	goto	u4720
  5567  001A22                     u4725:
  5568  001A22  D823               	call	PL38	;call to abstracted procedure
  5569  001A24                     u4720:
  5570  001A24  2EE8               	decfsz	wreg,f,c
  5571  001A26  D7FD               	goto	u4725
  5572  001A28                     L23:
  5573  001A28  500D               	movf	??_vscp_readStdReg+1,w,c
  5574  001A2A  D7DA               	goto	L22
  5575  001A2C                     l5053:
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;vscp_firmware.c: 670: else if ((reg > (0xD0 - 1)) &&
  5579                           ;vscp_firmware.c: 671: (reg < 0xE0)) {
  5580  001A2C  0ECF               	movlw	207
  5581  001A2E  641C               	cpfsgt	vscp_readStdReg@reg,c
  5582  001A30  D008               	goto	l5059
  5583                           
  5584                           ; BSR set to: 0
  5585  001A32  0EE0               	movlw	224
  5586  001A34  601C               	cpfslt	vscp_readStdReg@reg,c
  5587  001A36  D005               	goto	l5059
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;vscp_firmware.c: 674: rv = vscp_getGUID(reg - 0xD0);
  5591  001A38  501C               	movf	vscp_readStdReg@reg,w,c
  5592  001A3A  0F30               	addlw	48
  5593  001A3C  ECC9  F014         	call	_vscp_getGUID
  5594  001A40  D7CF               	goto	L22
  5595  001A42                     l5059:
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;vscp_firmware.c: 677: else if ( reg >= 0xE0 ) {
  5599  001A42  0EDF               	movlw	223
  5600  001A44  641C               	cpfsgt	vscp_readStdReg@reg,c
  5601  001A46  D005               	goto	l5063
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;vscp_firmware.c: 680: rv = vscp_getMDF_URL(reg - 0xE0);
  5605  001A48  501C               	movf	vscp_readStdReg@reg,w,c
  5606  001A4A  0F20               	addlw	32
  5607  001A4C  EC77  F014         	call	_vscp_getMDF_URL
  5608  001A50  D7C7               	goto	L22
  5609  001A52                     l5063:
  5610                           
  5611                           ;vscp_firmware.c: 682: }
  5612                           ;vscp_firmware.c: 684: return rv;
  5613  001A52  501B               	movf	vscp_readStdReg@rv,w,c
  5614  001A54  0012               	return	
  5615  001A56                     __end_of_vscp_readStdReg:
  5616                           	opt stack 0
  5617  001A56                     PL26:
  5618                           	opt stack 25
  5619  001A56  0803               	sublw	3
  5620  001A58  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
  5621  001A5A  90D8               	bcf	status,0,c
  5622  001A5C  360C               	rlcf	??_vscp_readStdReg,f,c
  5623  001A5E  90D8               	bcf	status,0,c
  5624  001A60  360C               	rlcf	??_vscp_readStdReg,f,c
  5625  001A62  90D8               	bcf	status,0,c
  5626  001A64  360C               	rlcf	??_vscp_readStdReg,f,c
  5627  001A66  500C               	movf	??_vscp_readStdReg,w,c
  5628  001A68  0012               	return	
  5629  001A6A                     __end_ofPL26:
  5630                           	opt stack 0
  5631  001A6A                     PL38:
  5632                           	opt stack 25
  5633  001A6A  90D8               	bcf	status,0,c
  5634  001A6C  3210               	rrcf	??_vscp_readStdReg+4,f,c
  5635  001A6E  320F               	rrcf	??_vscp_readStdReg+3,f,c
  5636  001A70  320E               	rrcf	??_vscp_readStdReg+2,f,c
  5637  001A72  320D               	rrcf	??_vscp_readStdReg+1,f,c
  5638  001A74  0012               	return	
  5639  001A76                     __end_ofPL38:
  5640                           	opt stack 0
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           indf1	equ	0xFE7
  5651                           fsr1h	equ	0xFE2
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           plusw2	equ	0xFDB
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function _vscp_getRegisterPagesUsed *****************
  5662 ;; Defined at:
  5663 ;;		line 1161 in file "../main.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;		None
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      unsigned char 
  5670 ;; Registers used:
  5671 ;;		wreg
  5672 ;; Tracked objects:
  5673 ;;		On entry : F/0
  5674 ;;		On exit  : F/0
  5675 ;;		Unchanged: F/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5681 ;;Total ram usage:        0 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    2
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_vscp_readStdReg
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text25
  5692  002A78                     __ptext25:
  5693                           	opt stack 0
  5694  002A78                     _vscp_getRegisterPagesUsed:
  5695                           	opt stack 26
  5696                           
  5697                           ; BSR set to: 0
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;main.c: 1162: return 1;
  5701                           
  5702                           ;incstack = 0
  5703                           ;incstack = 0
  5704  002A78  0C01               	retlw	1
  5705  002A7A                     __end_of_vscp_getRegisterPagesUsed:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           postinc0	equ	0xFEE
  5715                           wreg	equ	0xFE8
  5716                           indf1	equ	0xFE7
  5717                           fsr1h	equ	0xFE2
  5718                           fsr1l	equ	0xFE1
  5719                           indf2	equ	0xFDF
  5720                           postinc2	equ	0xFDE
  5721                           postdec2	equ	0xFDD
  5722                           plusw2	equ	0xFDB
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _vscp_getFamilyType *****************
  5728 ;; Defined at:
  5729 ;;		line 1142 in file "../main.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;		None
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  4    7[COMRAM] unsigned long 
  5736 ;; Registers used:
  5737 ;;		None
  5738 ;; Tracked objects:
  5739 ;;		On entry : F/0
  5740 ;;		On exit  : F/0
  5741 ;;		Unchanged: F/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5746 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5747 ;;Total ram usage:        4 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    2
  5750 ;; This function calls:
  5751 ;;		Nothing
  5752 ;; This function is called by:
  5753 ;;		_vscp_readStdReg
  5754 ;; This function uses a non-reentrant model
  5755 ;;
  5756                           
  5757                           	psect	text26
  5758  002A38                     __ptext26:
  5759                           	opt stack 0
  5760  002A38                     _vscp_getFamilyType:
  5761                           	opt stack 26
  5762                           
  5763                           ; BSR set to: 0
  5764                           ;main.c: 1143: return 0;
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;incstack = 0
  5768                           ;incstack = 0
  5769  002A38  6A08               	clrf	?_vscp_getFamilyType,c
  5770  002A3A  6A09               	clrf	?_vscp_getFamilyType+1,c
  5771  002A3C  6A0A               	clrf	?_vscp_getFamilyType+2,c
  5772  002A3E  6A0B               	clrf	?_vscp_getFamilyType+3,c
  5773                           
  5774                           ; BSR set to: 0
  5775  002A40  0012               	return	
  5776  002A42                     __end_of_vscp_getFamilyType:
  5777                           	opt stack 0
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           intcon	equ	0xFF2
  5785                           postinc0	equ	0xFEE
  5786                           wreg	equ	0xFE8
  5787                           indf1	equ	0xFE7
  5788                           fsr1h	equ	0xFE2
  5789                           fsr1l	equ	0xFE1
  5790                           indf2	equ	0xFDF
  5791                           postinc2	equ	0xFDE
  5792                           postdec2	equ	0xFDD
  5793                           plusw2	equ	0xFDB
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _vscp_getFamilyCode *****************
  5799 ;; Defined at:
  5800 ;;		line 1133 in file "../main.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;                  4    7[COMRAM] unsigned long 
  5807 ;; Registers used:
  5808 ;;		None
  5809 ;; Tracked objects:
  5810 ;;		On entry : F/0
  5811 ;;		On exit  : F/0
  5812 ;;		Unchanged: F/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5814 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5817 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5818 ;;Total ram usage:        4 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    2
  5821 ;; This function calls:
  5822 ;;		Nothing
  5823 ;; This function is called by:
  5824 ;;		_vscp_readStdReg
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text27
  5829  002A42                     __ptext27:
  5830                           	opt stack 0
  5831  002A42                     _vscp_getFamilyCode:
  5832                           	opt stack 26
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;main.c: 1134: return 0L;
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;incstack = 0
  5839                           ;incstack = 0
  5840  002A42  6A08               	clrf	?_vscp_getFamilyCode,c
  5841  002A44  6A09               	clrf	?_vscp_getFamilyCode+1,c
  5842  002A46  6A0A               	clrf	?_vscp_getFamilyCode+2,c
  5843  002A48  6A0B               	clrf	?_vscp_getFamilyCode+3,c
  5844                           
  5845                           ; BSR set to: 0
  5846  002A4A  0012               	return	
  5847  002A4C                     __end_of_vscp_getFamilyCode:
  5848                           	opt stack 0
  5849                           tblptru	equ	0xFF8
  5850                           tblptrh	equ	0xFF7
  5851                           tblptrl	equ	0xFF6
  5852                           tablat	equ	0xFF5
  5853                           prodh	equ	0xFF4
  5854                           prodl	equ	0xFF3
  5855                           intcon	equ	0xFF2
  5856                           postinc0	equ	0xFEE
  5857                           wreg	equ	0xFE8
  5858                           indf1	equ	0xFE7
  5859                           fsr1h	equ	0xFE2
  5860                           fsr1l	equ	0xFE1
  5861                           indf2	equ	0xFDF
  5862                           postinc2	equ	0xFDE
  5863                           postdec2	equ	0xFDD
  5864                           plusw2	equ	0xFDB
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _vscp_getBufferSize *****************
  5870 ;; Defined at:
  5871 ;;		line 1013 in file "../main.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;		None
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;		None
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      unsigned char 
  5878 ;; Registers used:
  5879 ;;		wreg
  5880 ;; Tracked objects:
  5881 ;;		On entry : F/0
  5882 ;;		On exit  : F/0
  5883 ;;		Unchanged: F/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5889 ;;Total ram usage:        0 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    2
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_vscp_readStdReg
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text28
  5900  002A7A                     __ptext28:
  5901                           	opt stack 0
  5902  002A7A                     _vscp_getBufferSize:
  5903                           	opt stack 26
  5904                           
  5905                           ; BSR set to: 0
  5906                           
  5907                           ; BSR set to: 0
  5908                           ;main.c: 1014: return 8;
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;incstack = 0
  5912                           ;incstack = 0
  5913  002A7A  0C08               	retlw	8
  5914  002A7C                     __end_of_vscp_getBufferSize:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           intcon	equ	0xFF2
  5923                           postinc0	equ	0xFEE
  5924                           wreg	equ	0xFE8
  5925                           indf1	equ	0xFE7
  5926                           fsr1h	equ	0xFE2
  5927                           fsr1l	equ	0xFE1
  5928                           indf2	equ	0xFDF
  5929                           postinc2	equ	0xFDE
  5930                           postdec2	equ	0xFDD
  5931                           plusw2	equ	0xFDB
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
  5937 ;; Defined at:
  5938 ;;		line 1004 in file "../main.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;		None
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  1    wreg      unsigned char 
  5945 ;; Registers used:
  5946 ;;		wreg
  5947 ;; Tracked objects:
  5948 ;;		On entry : F/0
  5949 ;;		On exit  : F/0
  5950 ;;		Unchanged: F/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5956 ;;Total ram usage:        0 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    2
  5959 ;; This function calls:
  5960 ;;		Nothing
  5961 ;; This function is called by:
  5962 ;;		_vscp_readStdReg
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text29
  5967  002A7C                     __ptext29:
  5968                           	opt stack 0
  5969  002A7C                     _vscp_getBootLoaderAlgorithm:
  5970                           	opt stack 26
  5971                           
  5972                           ; BSR set to: 0
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;main.c: 1005: return 0x01;
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;incstack = 0
  5979                           ;incstack = 0
  5980  002A7C  0C01               	retlw	1
  5981  002A7E                     __end_of_vscp_getBootLoaderAlgorithm:
  5982                           	opt stack 0
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           indf1	equ	0xFE7
  5993                           fsr1h	equ	0xFE2
  5994                           fsr1l	equ	0xFE1
  5995                           indf2	equ	0xFDF
  5996                           postinc2	equ	0xFDE
  5997                           postdec2	equ	0xFDD
  5998                           plusw2	equ	0xFDB
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function _vscp_getManufacturerId *****************
  6004 ;; Defined at:
  6005 ;;		line 995 in file "../main.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  idx             1    wreg     unsigned char 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  idx             1   10[COMRAM] unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      unsigned char 
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0, cstack
  6014 ;; Tracked objects:
  6015 ;;		On entry : 0/0
  6016 ;;		On exit  : 0/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6022 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6023 ;;Total ram usage:        1 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    3
  6026 ;; This function calls:
  6027 ;;		_readEEPROM
  6028 ;; This function is called by:
  6029 ;;		_vscp_readStdReg
  6030 ;;		_vscp_writeStdReg
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text30
  6035  00296A                     __ptext30:
  6036                           	opt stack 0
  6037  00296A                     _vscp_getManufacturerId:
  6038                           	opt stack 25
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;incstack = 0
  6042                           ;incstack = 0
  6043                           ;vscp_getManufacturerId@idx stored from wreg
  6044  00296A  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
  6045                           
  6046                           ;main.c: 996: return readEEPROM( 0x09 + idx );
  6047  00296E  0E09               	movlw	9
  6048  002970  240B               	addwf	vscp_getManufacturerId@idx,w,c
  6049  002972  6E08               	movwf	?_readEEPROM,c
  6050  002974  6A09               	clrf	?_readEEPROM+1,c
  6051  002976  0E00               	movlw	0
  6052  002978  2209               	addwfc	?_readEEPROM+1,f,c
  6053  00297A  EFD3  F014         	goto	_readEEPROM	;wreg free
  6054  00297E                     __end_of_vscp_getManufacturerId:
  6055                           	opt stack 0
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           intcon	equ	0xFF2
  6063                           postinc0	equ	0xFEE
  6064                           wreg	equ	0xFE8
  6065                           indf1	equ	0xFE7
  6066                           fsr1h	equ	0xFE2
  6067                           fsr1l	equ	0xFE1
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           plusw2	equ	0xFDB
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function _vscp_getUserID *****************
  6077 ;; Defined at:
  6078 ;;		line 975 in file "../main.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  idx             1    wreg     unsigned char 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  idx             1   10[COMRAM] unsigned char 
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      unsigned char 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0, cstack
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6093 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6095 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6096 ;;Total ram usage:        1 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; Hardware stack levels required when called:    3
  6099 ;; This function calls:
  6100 ;;		_readEEPROM
  6101 ;; This function is called by:
  6102 ;;		_vscp_readStdReg
  6103 ;;		_vscp_writeStdReg
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text31
  6108  00297E                     __ptext31:
  6109                           	opt stack 0
  6110  00297E                     _vscp_getUserID:
  6111                           	opt stack 25
  6112                           
  6113                           ;incstack = 0
  6114                           ;incstack = 0
  6115                           ;vscp_getUserID@idx stored from wreg
  6116  00297E  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
  6117                           
  6118                           ;main.c: 976: return readEEPROM( 0x04 + idx );
  6119  002982  0E04               	movlw	4
  6120  002984  240B               	addwf	vscp_getUserID@idx,w,c
  6121  002986  6E08               	movwf	?_readEEPROM,c
  6122  002988  6A09               	clrf	?_readEEPROM+1,c
  6123  00298A  0E00               	movlw	0
  6124  00298C  2209               	addwfc	?_readEEPROM+1,f,c
  6125  00298E  EFD3  F014         	goto	_readEEPROM	;wreg free
  6126  002992                     __end_of_vscp_getUserID:
  6127                           	opt stack 0
  6128                           tblptru	equ	0xFF8
  6129                           tblptrh	equ	0xFF7
  6130                           tblptrl	equ	0xFF6
  6131                           tablat	equ	0xFF5
  6132                           prodh	equ	0xFF4
  6133                           prodl	equ	0xFF3
  6134                           intcon	equ	0xFF2
  6135                           postinc0	equ	0xFEE
  6136                           wreg	equ	0xFE8
  6137                           indf1	equ	0xFE7
  6138                           fsr1h	equ	0xFE2
  6139                           fsr1l	equ	0xFE1
  6140                           indf2	equ	0xFDF
  6141                           postinc2	equ	0xFDE
  6142                           postdec2	equ	0xFDD
  6143                           plusw2	equ	0xFDB
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _readEEPROM *****************
  6149 ;; Defined at:
  6150 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  address         2    7[COMRAM] unsigned short 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  data            1    9[COMRAM] unsigned char 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      unsigned char 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6164 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6167 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6168 ;;Total ram usage:        3 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    2
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_vscp_readNicknamePermanent
  6175 ;;		_vscp_getZone
  6176 ;;		_vscp_getSubzone
  6177 ;;		_vscp_readAppReg
  6178 ;;		_vscp_writeAppReg
  6179 ;;		_doDM
  6180 ;;		_vscp_getGUID
  6181 ;;		_vscp_getUserID
  6182 ;;		_vscp_getManufacturerId
  6183 ;;		_vscp_getSegmentCRC
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           	psect	text32
  6188  0029A6                     __ptext32:
  6189                           	opt stack 0
  6190  0029A6                     _readEEPROM:
  6191                           	opt stack 26
  6192                           
  6193                           ;eeprom.c: 93: uint8_t data;
  6194                           ;eeprom.c: 98: EEADR = address & 0xff;
  6195                           
  6196                           ;incstack = 0
  6197                           ;incstack = 0
  6198  0029A6  C008  FF74         	movff	readEEPROM@address,3956	;volatile
  6199                           
  6200                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
  6201  0029AA  9E7F               	bcf	3967,7,c	;volatile
  6202                           
  6203                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
  6204  0029AC  9C7F               	bcf	3967,6,c	;volatile
  6205                           
  6206                           ;eeprom.c: 101: EECON1bits.RD = 1;
  6207  0029AE  807F               	bsf	3967,0,c	;volatile
  6208                           
  6209                           ;eeprom.c: 102: data = EEDATA;
  6210  0029B0  CF73 F00A          	movff	3955,readEEPROM@data	;volatile
  6211                           
  6212                           ;eeprom.c: 104: return data;
  6213  0029B4  500A               	movf	readEEPROM@data,w,c
  6214  0029B6  0012               	return	
  6215  0029B8                     __end_of_readEEPROM:
  6216                           	opt stack 0
  6217                           tblptru	equ	0xFF8
  6218                           tblptrh	equ	0xFF7
  6219                           tblptrl	equ	0xFF6
  6220                           tablat	equ	0xFF5
  6221                           prodh	equ	0xFF4
  6222                           prodl	equ	0xFF3
  6223                           intcon	equ	0xFF2
  6224                           postinc0	equ	0xFEE
  6225                           wreg	equ	0xFE8
  6226                           indf1	equ	0xFE7
  6227                           fsr1h	equ	0xFE2
  6228                           fsr1l	equ	0xFE1
  6229                           indf2	equ	0xFDF
  6230                           postinc2	equ	0xFDE
  6231                           postdec2	equ	0xFDD
  6232                           plusw2	equ	0xFDB
  6233                           fsr2h	equ	0xFDA
  6234                           fsr2l	equ	0xFD9
  6235                           status	equ	0xFD8
  6236                           
  6237 ;; *************** function _vscp_getMDF_URL *****************
  6238 ;; Defined at:
  6239 ;;		line 966 in file "../main.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  idx             1    wreg     unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  idx             1    8[COMRAM] unsigned char 
  6244 ;; Return value:  Size  Location     Type
  6245 ;;                  1    wreg      unsigned char 
  6246 ;; Registers used:
  6247 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  6248 ;; Tracked objects:
  6249 ;;		On entry : F/0
  6250 ;;		On exit  : F/0
  6251 ;;		Unchanged: F/0
  6252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6255 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6257 ;;Total ram usage:        2 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    2
  6260 ;; This function calls:
  6261 ;;		Nothing
  6262 ;; This function is called by:
  6263 ;;		_vscp_readStdReg
  6264 ;;		_vscp_handleProtocolEvent
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text33
  6269  0028EE                     __ptext33:
  6270                           	opt stack 0
  6271  0028EE                     _vscp_getMDF_URL:
  6272                           	opt stack 26
  6273                           
  6274                           ;incstack = 0
  6275                           ;incstack = 0
  6276                           ;vscp_getMDF_URL@idx stored from wreg
  6277  0028EE  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
  6278                           
  6279                           ; BSR set to: 0
  6280                           ;main.c: 967: return vscp_deviceURL[ idx ];
  6281  0028F2  5009               	movf	vscp_getMDF_URL@idx,w,c
  6282  0028F4  0F00               	addlw	low _vscp_deviceURL
  6283  0028F6  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
  6284  0028F8  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
  6285  0028FC  0E0F               	movlw	high __smallconst
  6286  0028FE  6EF7               	movwf	tblptrh,c
  6287  002900  0E00               	movlw	low (__smallconst shr (0+16))
  6288  002902  6EF8               	movwf	tblptru,c
  6289  002904  0008               	tblrd		*
  6290  002906  50F5               	movf	tablat,w,c
  6291                           
  6292                           ; BSR set to: 0
  6293  002908  0012               	return	
  6294  00290A                     __end_of_vscp_getMDF_URL:
  6295                           	opt stack 0
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           postinc0	equ	0xFEE
  6304                           wreg	equ	0xFE8
  6305                           indf1	equ	0xFE7
  6306                           fsr1h	equ	0xFE2
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           plusw2	equ	0xFDB
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function _vscp_getGUID *****************
  6317 ;; Defined at:
  6318 ;;		line 954 in file "../main.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  idx             1    wreg     unsigned char 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  idx             1   10[COMRAM] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      unsigned char 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6335 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;Total ram usage:        1 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    3
  6339 ;; This function calls:
  6340 ;;		_readEEPROM
  6341 ;; This function is called by:
  6342 ;;		_vscp_readStdReg
  6343 ;;		_vscp_writeStdReg
  6344 ;;		_vscp_handleProtocolEvent
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text34
  6349  002992                     __ptext34:
  6350                           	opt stack 0
  6351  002992                     _vscp_getGUID:
  6352                           	opt stack 25
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;incstack = 0
  6356                           ;incstack = 0
  6357                           ;vscp_getGUID@idx stored from wreg
  6358  002992  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
  6359                           
  6360                           ;main.c: 955: return readEEPROM( 0x11 + idx );
  6361  002996  0E11               	movlw	17
  6362  002998  240B               	addwf	vscp_getGUID@idx,w,c
  6363  00299A  6E08               	movwf	?_readEEPROM,c
  6364  00299C  6A09               	clrf	?_readEEPROM+1,c
  6365  00299E  0E00               	movlw	0
  6366  0029A0  2209               	addwfc	?_readEEPROM+1,f,c
  6367  0029A2  EFD3  F014         	goto	_readEEPROM	;wreg free
  6368  0029A6                     __end_of_vscp_getGUID:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           postinc0	equ	0xFEE
  6378                           wreg	equ	0xFE8
  6379                           indf1	equ	0xFE7
  6380                           fsr1h	equ	0xFE2
  6381                           fsr1l	equ	0xFE1
  6382                           indf2	equ	0xFDF
  6383                           postinc2	equ	0xFDE
  6384                           postdec2	equ	0xFDD
  6385                           plusw2	equ	0xFDB
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _vscp_getSubMinorVersion *****************
  6391 ;; Defined at:
  6392 ;;		line 943 in file "../main.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;		None
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      unsigned char 
  6399 ;; Registers used:
  6400 ;;		wreg
  6401 ;; Tracked objects:
  6402 ;;		On entry : F/0
  6403 ;;		On exit  : F/0
  6404 ;;		Unchanged: F/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6410 ;;Total ram usage:        0 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    2
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_vscp_readStdReg
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text35
  6421  002A7E                     __ptext35:
  6422                           	opt stack 0
  6423  002A7E                     _vscp_getSubMinorVersion:
  6424                           	opt stack 26
  6425                           
  6426                           ; BSR set to: 0
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;main.c: 944: return 0;
  6430                           
  6431                           ;incstack = 0
  6432                           ;incstack = 0
  6433  002A7E  0C00               	retlw	0
  6434  002A80                     __end_of_vscp_getSubMinorVersion:
  6435                           	opt stack 0
  6436                           tblptru	equ	0xFF8
  6437                           tblptrh	equ	0xFF7
  6438                           tblptrl	equ	0xFF6
  6439                           tablat	equ	0xFF5
  6440                           prodh	equ	0xFF4
  6441                           prodl	equ	0xFF3
  6442                           intcon	equ	0xFF2
  6443                           postinc0	equ	0xFEE
  6444                           wreg	equ	0xFE8
  6445                           indf1	equ	0xFE7
  6446                           fsr1h	equ	0xFE2
  6447                           fsr1l	equ	0xFE1
  6448                           indf2	equ	0xFDF
  6449                           postinc2	equ	0xFDE
  6450                           postdec2	equ	0xFDD
  6451                           plusw2	equ	0xFDB
  6452                           fsr2h	equ	0xFDA
  6453                           fsr2l	equ	0xFD9
  6454                           status	equ	0xFD8
  6455                           
  6456 ;; *************** function _vscp_getMinorVersion *****************
  6457 ;; Defined at:
  6458 ;;		line 934 in file "../main.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;                  1    wreg      unsigned char 
  6465 ;; Registers used:
  6466 ;;		wreg
  6467 ;; Tracked objects:
  6468 ;;		On entry : F/0
  6469 ;;		On exit  : F/0
  6470 ;;		Unchanged: F/0
  6471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6476 ;;Total ram usage:        0 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    2
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_vscp_readStdReg
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text36
  6487  002A80                     __ptext36:
  6488                           	opt stack 0
  6489  002A80                     _vscp_getMinorVersion:
  6490                           	opt stack 26
  6491                           
  6492                           ; BSR set to: 0
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;main.c: 935: return 1;
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;incstack = 0
  6499                           ;incstack = 0
  6500  002A80  0C01               	retlw	1
  6501  002A82                     __end_of_vscp_getMinorVersion:
  6502                           	opt stack 0
  6503                           tblptru	equ	0xFF8
  6504                           tblptrh	equ	0xFF7
  6505                           tblptrl	equ	0xFF6
  6506                           tablat	equ	0xFF5
  6507                           prodh	equ	0xFF4
  6508                           prodl	equ	0xFF3
  6509                           intcon	equ	0xFF2
  6510                           postinc0	equ	0xFEE
  6511                           wreg	equ	0xFE8
  6512                           indf1	equ	0xFE7
  6513                           fsr1h	equ	0xFE2
  6514                           fsr1l	equ	0xFE1
  6515                           indf2	equ	0xFDF
  6516                           postinc2	equ	0xFDE
  6517                           postdec2	equ	0xFDD
  6518                           plusw2	equ	0xFDB
  6519                           fsr2h	equ	0xFDA
  6520                           fsr2l	equ	0xFD9
  6521                           status	equ	0xFD8
  6522                           
  6523 ;; *************** function _vscp_getMajorVersion *****************
  6524 ;; Defined at:
  6525 ;;		line 925 in file "../main.c"
  6526 ;; Parameters:    Size  Location     Type
  6527 ;;		None
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;		None
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      unsigned char 
  6532 ;; Registers used:
  6533 ;;		wreg
  6534 ;; Tracked objects:
  6535 ;;		On entry : F/0
  6536 ;;		On exit  : F/0
  6537 ;;		Unchanged: F/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;Total ram usage:        0 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    2
  6546 ;; This function calls:
  6547 ;;		Nothing
  6548 ;; This function is called by:
  6549 ;;		_vscp_readStdReg
  6550 ;; This function uses a non-reentrant model
  6551 ;;
  6552                           
  6553                           	psect	text37
  6554  002A82                     __ptext37:
  6555                           	opt stack 0
  6556  002A82                     _vscp_getMajorVersion:
  6557                           	opt stack 26
  6558                           
  6559                           ; BSR set to: 0
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 926: return 1;
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;incstack = 0
  6566                           ;incstack = 0
  6567  002A82  0C01               	retlw	1
  6568  002A84                     __end_of_vscp_getMajorVersion:
  6569                           	opt stack 0
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           postinc0	equ	0xFEE
  6578                           wreg	equ	0xFE8
  6579                           indf1	equ	0xFE7
  6580                           fsr1h	equ	0xFE2
  6581                           fsr1l	equ	0xFE1
  6582                           indf2	equ	0xFDF
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           plusw2	equ	0xFDB
  6586                           fsr2h	equ	0xFDA
  6587                           fsr2l	equ	0xFD9
  6588                           status	equ	0xFD8
  6589                           
  6590 ;; *************** function _vscp_newNodeOnline *****************
  6591 ;; Defined at:
  6592 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;		None
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;		None
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : F/0
  6603 ;;		On exit  : F/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6610 ;;Total ram usage:        1 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:    7
  6613 ;; This function calls:
  6614 ;;		_vscp_sendEvent
  6615 ;; This function is called by:
  6616 ;;		_vscp_handleProtocolEvent
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           	psect	text38
  6621  0026E8                     __ptext38:
  6622                           	opt stack 0
  6623  0026E8                     _vscp_newNodeOnline:
  6624                           	opt stack 22
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
  6628                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;incstack = 0
  6632                           ;incstack = 0
  6633  0026E8  C075  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
  6634  0026EC  0E0F               	movlw	15
  6635  0026EE  164C               	andwf	??_vscp_newNodeOnline,f,c
  6636  0026F0  044C               	decf	??_vscp_newNodeOnline,w,c
  6637  0026F2  A4D8               	btfss	status,2,c
  6638  0026F4  0012               	return	
  6639                           
  6640                           ; BSR set to: 0
  6641  0026F6  5170               	movf	_vscp_nickname& (0+255),w,b
  6642  0026F8  EE20  F07B         	lfsr	2,_vscp_imsg+6
  6643  0026FC  62DF               	cpfseq	indf2,c
  6644  0026FE  0012               	return	
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
  6648  002700  0E80               	movlw	128
  6649  002702  6F83               	movwf	_vscp_omsg& (0+255),b
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
  6653  002704  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
  6657  002706  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  6658  002708  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  6659                           
  6660                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
  6661  00270A  0E03               	movlw	3
  6662  00270C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;vscp_firmware.c: 506: vscp_sendEvent();
  6666  00270E  EFB0  F013         	goto	_vscp_sendEvent	;wreg free
  6667  002712                     __end_of_vscp_newNodeOnline:
  6668                           	opt stack 0
  6669                           tblptru	equ	0xFF8
  6670                           tblptrh	equ	0xFF7
  6671                           tblptrl	equ	0xFF6
  6672                           tablat	equ	0xFF5
  6673                           prodh	equ	0xFF4
  6674                           prodl	equ	0xFF3
  6675                           intcon	equ	0xFF2
  6676                           postinc0	equ	0xFEE
  6677                           wreg	equ	0xFE8
  6678                           indf1	equ	0xFE7
  6679                           fsr1h	equ	0xFE2
  6680                           fsr1l	equ	0xFE1
  6681                           indf2	equ	0xFDF
  6682                           postinc2	equ	0xFDE
  6683                           postdec2	equ	0xFDD
  6684                           plusw2	equ	0xFDB
  6685                           fsr2h	equ	0xFDA
  6686                           fsr2l	equ	0xFD9
  6687                           status	equ	0xFD8
  6688                           
  6689 ;; *************** function _vscp_handleDropNickname *****************
  6690 ;; Defined at:
  6691 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
  6692 ;; Parameters:    Size  Location     Type
  6693 ;;		None
  6694 ;; Auto vars:     Size  Location     Type
  6695 ;;  bytes           1   11[COMRAM] unsigned char 
  6696 ;; Return value:  Size  Location     Type
  6697 ;;		None               void
  6698 ;; Registers used:
  6699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6700 ;; Tracked objects:
  6701 ;;		On entry : F/0
  6702 ;;		On exit  : F/0
  6703 ;;		Unchanged: 0/0
  6704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6709 ;;Total ram usage:        1 bytes
  6710 ;; Hardware stack levels used:    1
  6711 ;; Hardware stack levels required when called:    5
  6712 ;; This function calls:
  6713 ;;		_vscp_init
  6714 ;;		_vscp_writeNicknamePermanent
  6715 ;; This function is called by:
  6716 ;;		_vscp_handleProtocolEvent
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720                           	psect	text39
  6721  00265C                     __ptext39:
  6722                           	opt stack 0
  6723  00265C                     _vscp_handleDropNickname:
  6724                           	opt stack 24
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;incstack = 0
  6731                           ;incstack = 0
  6732  00265C  5175               	movf	_vscp_imsg& (0+255),w,b
  6733  00265E  0B0F               	andlw	15
  6734  002660  6E0C               	movwf	vscp_handleDropNickname@bytes,c
  6735                           
  6736                           ; BSR set to: 0
  6737                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
  6738  002662  500C               	movf	vscp_handleDropNickname@bytes,w,c
  6739  002664  B4D8               	btfsc	status,2,c
  6740  002666  0012               	return	
  6741                           
  6742                           ; BSR set to: 0
  6743  002668  5170               	movf	_vscp_nickname& (0+255),w,b
  6744  00266A  EE20  F07B         	lfsr	2,_vscp_imsg+6
  6745  00266E  62DF               	cpfseq	indf2,c
  6746  002670  0012               	return	
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
  6750  002672  040C               	decf	vscp_handleDropNickname@bytes,w,c
  6751  002674  E005               	bz	l811
  6752                           
  6753                           ; BSR set to: 0
  6754  002676  0E01               	movlw	1
  6755  002678  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
  6756  00267A  0C01               	retlw	1
  6757                           
  6758                           ; BSR set to: 0
  6759  00267C  677C               	tstfsz	(_vscp_imsg+7)& (0+255),b
  6760  00267E  0C01               	retlw	1
  6761  002680                     l811:
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
  6765  002680  6970               	setf	_vscp_nickname& (0+255),b
  6766                           
  6767                           ; BSR set to: 0
  6768                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
  6769  002682  0EFF               	movlw	255
  6770  002684  ECEE  F014         	call	_vscp_writeNicknamePermanent
  6771                           
  6772                           ;vscp_firmware.c: 473: vscp_init();
  6773  002688  EFCC  F012         	goto	_vscp_init	;wreg free
  6774  00268C                     __end_of_vscp_handleDropNickname:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           indf1	equ	0xFE7
  6786                           fsr1h	equ	0xFE2
  6787                           fsr1l	equ	0xFE1
  6788                           indf2	equ	0xFDF
  6789                           postinc2	equ	0xFDE
  6790                           postdec2	equ	0xFDD
  6791                           plusw2	equ	0xFDB
  6792                           fsr2h	equ	0xFDA
  6793                           fsr2l	equ	0xFD9
  6794                           status	equ	0xFD8
  6795                           
  6796 ;; *************** function _vscp_init *****************
  6797 ;; Defined at:
  6798 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;		None               void
  6805 ;; Registers used:
  6806 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : F/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6816 ;;Total ram usage:        0 bytes
  6817 ;; Hardware stack levels used:    1
  6818 ;; Hardware stack levels required when called:    4
  6819 ;; This function calls:
  6820 ;;		_vscp_readNicknamePermanent
  6821 ;; This function is called by:
  6822 ;;		_main
  6823 ;;		_vscp_handleDropNickname
  6824 ;;		_vscp_handleProtocolEvent
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text40
  6829  002598                     __ptext40:
  6830                           	opt stack 0
  6831  002598                     _vscp_init:
  6832                           	opt stack 24
  6833                           
  6834                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;incstack = 0
  6838                           ;incstack = 0
  6839  002598  0E02               	movlw	2
  6840  00259A  6E52               	movwf	_vscp_initledfunc,c
  6841                           
  6842                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
  6843  00259C  EC26  F015         	call	_vscp_readNicknamePermanent	;wreg free
  6844  0025A0  0100               	movlb	0	; () banked
  6845  0025A2  6F70               	movwf	_vscp_nickname& (0+255),b
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
  6849  0025A4  6770               	tstfsz	_vscp_nickname& (0+255),b
  6850  0025A6  D001               	goto	l753
  6851                           
  6852                           ; BSR set to: 0
  6853  0025A8  6970               	setf	_vscp_nickname& (0+255),b
  6854  0025AA                     l753:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
  6858  0025AA  6B75               	clrf	_vscp_imsg& (0+255),b
  6859                           
  6860                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
  6861  0025AC  6B76               	clrf	(_vscp_imsg+1)& (0+255),b
  6862                           
  6863                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
  6864  0025AE  6B77               	clrf	(_vscp_imsg+2)& (0+255),b
  6865  0025B0  6B78               	clrf	(_vscp_imsg+3)& (0+255),b
  6866                           
  6867                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
  6868  0025B2  6B79               	clrf	(_vscp_imsg+4)& (0+255),b
  6869                           
  6870                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
  6871  0025B4  6B83               	clrf	_vscp_omsg& (0+255),b
  6872                           
  6873                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
  6874  0025B6  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  6875                           
  6876                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
  6877  0025B8  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  6878  0025BA  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  6879                           
  6880                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
  6881  0025BC  6B87               	clrf	(_vscp_omsg+4)& (0+255),b
  6882                           
  6883                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
  6884  0025BE  6B6B               	clrf	_vscp_alarmstatus& (0+255),b
  6885                           
  6886                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
  6887  0025C0  6A53               	clrf	_vscp_probe_address,c
  6888                           
  6889                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
  6890  0025C2  6B71               	clrf	_vscp_node_state& (0+255),b
  6891                           
  6892                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
  6893  0025C4  6B72               	clrf	_vscp_node_substate& (0+255),b
  6894                           
  6895                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
  6896  0025C6  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  6897                           
  6898                           ;vscp_firmware.c: 148: vscp_page_select = 0;
  6899  0025C8  6A4E               	clrf	_vscp_page_select,c
  6900  0025CA  6A4F               	clrf	_vscp_page_select+1,c
  6901                           
  6902                           ;vscp_firmware.c: 151: vscp_timer = 0;
  6903  0025CC  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  6904  0025CE  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  6905                           
  6906                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
  6907  0025D0  6B64               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6908  0025D2  6B65               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6909                           
  6910                           ;vscp_firmware.c: 153: vscp_second = 0;
  6911  0025D4  6B74               	clrf	_vscp_second& (0+255),b
  6912                           
  6913                           ;vscp_firmware.c: 154: vscp_minute = 0;
  6914  0025D6  6B6F               	clrf	_vscp_minute& (0+255),b
  6915                           
  6916                           ;vscp_firmware.c: 155: vscp_hour = 0;
  6917  0025D8  6B6D               	clrf	_vscp_hour& (0+255),b
  6918                           
  6919                           ; BSR set to: 0
  6920  0025DA  0012               	return	
  6921  0025DC                     __end_of_vscp_init:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           indf1	equ	0xFE7
  6933                           fsr1h	equ	0xFE2
  6934                           fsr1l	equ	0xFE1
  6935                           indf2	equ	0xFDF
  6936                           postinc2	equ	0xFDE
  6937                           postdec2	equ	0xFDD
  6938                           plusw2	equ	0xFDB
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _vscp_readNicknamePermanent *****************
  6944 ;; Defined at:
  6945 ;;		line 560 in file "../main.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      unsigned char 
  6952 ;; Registers used:
  6953 ;;		wreg, status,2, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    3
  6966 ;; This function calls:
  6967 ;;		_readEEPROM
  6968 ;; This function is called by:
  6969 ;;		_vscp_init
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           	psect	text41
  6974  002A4C                     __ptext41:
  6975                           	opt stack 0
  6976  002A4C                     _vscp_readNicknamePermanent:
  6977                           	opt stack 24
  6978                           
  6979                           ;main.c: 561: return readEEPROM( 0x01 );
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;incstack = 0
  6983                           ;incstack = 0
  6984  002A4C  6A09               	clrf	?_readEEPROM+1,c
  6985  002A4E  0E01               	movlw	1
  6986  002A50  6E08               	movwf	?_readEEPROM,c
  6987  002A52  EFD3  F014         	goto	_readEEPROM	;wreg free
  6988  002A56                     __end_of_vscp_readNicknamePermanent:
  6989                           	opt stack 0
  6990                           tblptru	equ	0xFF8
  6991                           tblptrh	equ	0xFF7
  6992                           tblptrl	equ	0xFF6
  6993                           tablat	equ	0xFF5
  6994                           prodh	equ	0xFF4
  6995                           prodl	equ	0xFF3
  6996                           intcon	equ	0xFF2
  6997                           postinc0	equ	0xFEE
  6998                           wreg	equ	0xFE8
  6999                           indf1	equ	0xFE7
  7000                           fsr1h	equ	0xFE2
  7001                           fsr1l	equ	0xFE1
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           plusw2	equ	0xFDB
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _vscp_handleSetNickname *****************
  7011 ;; Defined at:
  7012 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;		None
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;		None
  7017 ;; Return value:  Size  Location     Type
  7018 ;;		None               void
  7019 ;; Registers used:
  7020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : F/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7030 ;;Total ram usage:        0 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:    4
  7033 ;; This function calls:
  7034 ;;		_vscp_writeNicknamePermanent
  7035 ;;		_vscp_setSegmentCRC
  7036 ;; This function is called by:
  7037 ;;		_vscp_handleProtocolEvent
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           	psect	text42
  7042  0027D2                     __ptext42:
  7043                           	opt stack 0
  7044  0027D2                     _vscp_handleSetNickname:
  7045                           	opt stack 25
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  7049                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  7050                           
  7051                           ;incstack = 0
  7052                           ;incstack = 0
  7053  0027D2  5175               	movf	_vscp_imsg& (0+255),w,b
  7054  0027D4  0B0F               	andlw	15
  7055  0027D6  0A02               	xorlw	2
  7056  0027D8  A4D8               	btfss	status,2,c
  7057  0027DA  0012               	return	
  7058                           
  7059                           ; BSR set to: 0
  7060  0027DC  5170               	movf	_vscp_nickname& (0+255),w,b
  7061  0027DE  EE20  F07B         	lfsr	2,_vscp_imsg+6
  7062  0027E2  62DF               	cpfseq	indf2,c
  7063  0027E4  0012               	return	
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
  7067  0027E6  C07C  F070         	movff	_vscp_imsg+7,_vscp_nickname
  7068                           
  7069                           ; BSR set to: 0
  7070                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
  7071  0027EA  5170               	movf	_vscp_nickname& (0+255),w,b
  7072  0027EC  ECEE  F014         	call	_vscp_writeNicknamePermanent
  7073                           
  7074                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
  7075  0027F0  0E40               	movlw	64
  7076  0027F2  EFE5  F014         	goto	_vscp_setSegmentCRC
  7077  0027F6                     __end_of_vscp_handleSetNickname:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           postinc0	equ	0xFEE
  7087                           wreg	equ	0xFE8
  7088                           indf1	equ	0xFE7
  7089                           fsr1h	equ	0xFE2
  7090                           fsr1l	equ	0xFE1
  7091                           indf2	equ	0xFDF
  7092                           postinc2	equ	0xFDE
  7093                           postdec2	equ	0xFDD
  7094                           plusw2	equ	0xFDB
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function _vscp_handleHeartbeat *****************
  7100 ;; Defined at:
  7101 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;		None
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;		None               void
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : F/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7119 ;;Total ram usage:        0 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    4
  7122 ;; This function calls:
  7123 ;;		_vscp_writeNicknamePermanent
  7124 ;;		_vscp_getSegmentCRC
  7125 ;;		_vscp_setSegmentCRC
  7126 ;; This function is called by:
  7127 ;;		_vscp_handleProtocolEvent
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text43
  7132  0025DC                     __ptext43:
  7133                           	opt stack 0
  7134  0025DC                     _vscp_handleHeartbeat:
  7135                           	opt stack 25
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
  7139                           
  7140                           ;incstack = 0
  7141                           ;incstack = 0
  7142  0025DC  EC2B  F015         	call	_vscp_getSegmentCRC	;wreg free
  7143  0025E0  0900               	iorlw	0
  7144  0025E2  E118               	bnz	l4919
  7145                           
  7146                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
  7147                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
  7148  0025E4  0100               	movlb	0	; () banked
  7149  0025E6  5175               	movf	_vscp_imsg& (0+255),w,b
  7150  0025E8  0B0F               	andlw	15
  7151  0025EA  0A05               	xorlw	5
  7152  0025EC  A4D8               	btfss	status,2,c
  7153  0025EE  0012               	return	
  7154                           
  7155                           ; BSR set to: 0
  7156  0025F0  EC2B  F015         	call	_vscp_getSegmentCRC	;wreg free
  7157  0025F4  0100               	movlb	0	; () banked
  7158  0025F6  197B               	xorwf	(_vscp_imsg+6)& (0+255),w,b
  7159  0025F8  B4D8               	btfsc	status,2,c
  7160  0025FA  0012               	return	
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7164  0025FC  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7165  0025FE  ECE5  F014         	call	_vscp_setSegmentCRC
  7166                           
  7167                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
  7168  002602  0100               	movlb	0	; () banked
  7169  002604  6970               	setf	_vscp_nickname& (0+255),b
  7170                           
  7171                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
  7172  002606  0EFF               	movlw	255
  7173  002608  ECEE  F014         	call	_vscp_writeNicknamePermanent
  7174                           
  7175                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
  7176  00260C  0E01               	movlw	1
  7177  00260E  0100               	movlb	0	; () banked
  7178  002610  6F71               	movwf	_vscp_node_state& (0+255),b
  7179  002612  0C01               	retlw	1
  7180  002614                     l4919:
  7181                           
  7182                           ;vscp_firmware.c: 403: else {
  7183                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
  7184  002614  0100               	movlb	0	; () banked
  7185  002616  517B               	movf	(_vscp_imsg+6)& (0+255),w,b
  7186  002618  EFE5  F014         	goto	_vscp_setSegmentCRC
  7187  00261C                     __end_of_vscp_handleHeartbeat:
  7188                           	opt stack 0
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           indf1	equ	0xFE7
  7199                           fsr1h	equ	0xFE2
  7200                           fsr1l	equ	0xFE1
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           plusw2	equ	0xFDB
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _vscp_getMatrixInfo *****************
  7210 ;; Defined at:
  7211 ;;		line 1116 in file "../main.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  pData           1    wreg     PTR unsigned char 
  7214 ;;		 -> vscp_omsg(13), 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  pData           1    0[COMRAM] PTR unsigned char 
  7217 ;;		 -> vscp_omsg(13), 
  7218 ;;  i               1    7[COMRAM] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;		None               void
  7221 ;; Registers used:
  7222 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7223 ;; Tracked objects:
  7224 ;;		On entry : F/0
  7225 ;;		On exit  : F/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7232 ;;Total ram usage:        1 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    2
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		_vscp_handleProtocolEvent
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text44
  7243  002836                     __ptext44:
  7244                           	opt stack 0
  7245  002836                     _vscp_getMatrixInfo:
  7246                           	opt stack 27
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;main.c: 1117: uint8_t i;
  7250                           ;main.c: 1119: vscp_omsg.data[ 0 ] = 7;
  7251                           
  7252                           ;incstack = 0
  7253                           ;incstack = 0
  7254  002836  0E07               	movlw	7
  7255  002838  6F88               	movwf	(_vscp_omsg+5)& (0+255),b
  7256                           
  7257                           ;main.c: 1120: vscp_omsg.data[ 1 ] = 72;
  7258  00283A  0E48               	movlw	72
  7259  00283C  6F89               	movwf	(_vscp_omsg+6)& (0+255),b
  7260                           
  7261                           ;main.c: 1123: for ( i = 2; i < 8; i++ ) {
  7262  00283E  0E02               	movlw	2
  7263  002840  6E08               	movwf	vscp_getMatrixInfo@i,c
  7264  002842                     l4531:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;main.c: 1124: vscp_omsg.data[ i ] = 0;
  7268  002842  5008               	movf	vscp_getMatrixInfo@i,w,c
  7269  002844  0F88               	addlw	low (_vscp_omsg+5)
  7270  002846  6ED9               	movwf	fsr2l,c
  7271  002848  6ADA               	clrf	fsr2h,c
  7272  00284A  6ADF               	clrf	indf2,c
  7273                           
  7274                           ; BSR set to: 0
  7275  00284C  2A08               	incf	vscp_getMatrixInfo@i,f,c
  7276                           
  7277                           ; BSR set to: 0
  7278  00284E  0E07               	movlw	7
  7279  002850  6408               	cpfsgt	vscp_getMatrixInfo@i,c
  7280  002852  D7F7               	goto	l4531
  7281  002854  0C07               	retlw	7
  7282  002856                     __end_of_vscp_getMatrixInfo:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           intcon	equ	0xFF2
  7291                           postinc0	equ	0xFEE
  7292                           wreg	equ	0xFE8
  7293                           indf1	equ	0xFE7
  7294                           fsr1h	equ	0xFE2
  7295                           fsr1l	equ	0xFE1
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           plusw2	equ	0xFDB
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _vscp_goBootloaderMode *****************
  7305 ;; Defined at:
  7306 ;;		line 1100 in file "../main.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  algorithm       1    wreg     unsigned char 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  algorithm       1   10[COMRAM] unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;		None               void
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0, cstack
  7315 ;; Tracked objects:
  7316 ;;		On entry : F/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7324 ;;Total ram usage:        1 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; Hardware stack levels required when called:    3
  7327 ;; This function calls:
  7328 ;;		_writeEEPROM
  7329 ;; This function is called by:
  7330 ;;		_vscp_handleProtocolEvent
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text45
  7335  00290A                     __ptext45:
  7336                           	opt stack 0
  7337  00290A                     _vscp_goBootloaderMode:
  7338                           	opt stack 26
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;incstack = 0
  7342                           ;incstack = 0
  7343                           ;vscp_goBootloaderMode@algorithm stored from wreg
  7344  00290A  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;main.c: 1101: if ( 0x01 != algorithm ) return;
  7348  00290E  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
  7349  002910  A4D8               	btfss	status,2,c
  7350  002912  0012               	return	
  7351                           
  7352                           ; BSR set to: 0
  7353                           ;main.c: 1105: writeEEPROM(0x00, 0xff);
  7354  002914  6A09               	clrf	?_writeEEPROM+1,c
  7355  002916  6A08               	clrf	?_writeEEPROM,c
  7356  002918  0EFF               	movlw	255
  7357  00291A  680A               	setf	?_writeEEPROM+2,c
  7358  00291C  ECD6  F013         	call	_writeEEPROM	;wreg free
  7359  002920  00FF               	reset		;# 
  7360  002922  0012               	return	
  7361  002924                     __end_of_vscp_goBootloaderMode:
  7362                           	opt stack 0
  7363                           tblptru	equ	0xFF8
  7364                           tblptrh	equ	0xFF7
  7365                           tblptrl	equ	0xFF6
  7366                           tablat	equ	0xFF5
  7367                           prodh	equ	0xFF4
  7368                           prodl	equ	0xFF3
  7369                           intcon	equ	0xFF2
  7370                           postinc0	equ	0xFEE
  7371                           wreg	equ	0xFE8
  7372                           indf1	equ	0xFE7
  7373                           fsr1h	equ	0xFE2
  7374                           fsr1l	equ	0xFE1
  7375                           indf2	equ	0xFDF
  7376                           postinc2	equ	0xFDE
  7377                           postdec2	equ	0xFDD
  7378                           plusw2	equ	0xFDB
  7379                           fsr2h	equ	0xFDA
  7380                           fsr2l	equ	0xFD9
  7381                           status	equ	0xFD8
  7382                           
  7383 ;; *************** function _vscp_handleProbeState *****************
  7384 ;; Defined at:
  7385 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
  7386 ;; Parameters:    Size  Location     Type
  7387 ;;		None
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;		None               void
  7392 ;; Registers used:
  7393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : F/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7403 ;;Total ram usage:        0 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    8
  7406 ;; This function calls:
  7407 ;;		_vscp_goActiveState
  7408 ;;		_vscp_writeNicknamePermanent
  7409 ;;		_vscp_sendEvent
  7410 ;;		_vscp_setSegmentCRC
  7411 ;; This function is called by:
  7412 ;;		_main
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text46
  7417  002102                     __ptext46:
  7418                           	opt stack 0
  7419  002102                     _vscp_handleProbeState:
  7420                           	opt stack 22
  7421                           
  7422                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
  7423                           
  7424                           ;incstack = 0
  7425                           ;incstack = 0
  7426  002102  D053               	goto	l5385
  7427  002104                     l5315:
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
  7431  002104  2853               	incf	_vscp_probe_address,w,c
  7432  002106  E010               	bz	l5331
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
  7436  002108  0E81               	movlw	129
  7437  00210A  6F83               	movwf	_vscp_omsg& (0+255),b
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
  7441  00210C  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7442                           
  7443                           ; BSR set to: 0
  7444                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
  7445  00210E  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7446  002110  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7447                           
  7448                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
  7449  002112  0E02               	movlw	2
  7450  002114  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
  7454  002116  C053  F088         	movff	_vscp_probe_address,_vscp_omsg+5
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;vscp_firmware.c: 214: vscp_sendEvent();
  7458  00211A  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
  7462  00211E  0E01               	movlw	1
  7463  002120  6F72               	movwf	_vscp_node_substate& (0+255),b
  7464  002122                     l5329:
  7465                           
  7466                           ; BSR set to: 0
  7467                           ;vscp_firmware.c: 217: vscp_timer = 0;
  7468  002122  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7469  002124  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7470                           
  7471                           ;vscp_firmware.c: 219: } else {
  7472  002126  D048               	goto	l768
  7473  002128                     l5331:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
  7477  002128  0E04               	movlw	4
  7478  00212A  6F71               	movwf	_vscp_node_state& (0+255),b
  7479                           
  7480                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
  7481  00212C  0E81               	movlw	129
  7482  00212E  6F83               	movwf	_vscp_omsg& (0+255),b
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
  7486  002130  6988               	setf	(_vscp_omsg+5)& (0+255),b
  7487                           
  7488                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
  7489  002132  0E07               	movlw	7
  7490  002134  6F84               	movwf	(_vscp_omsg+1)& (0+255),b
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
  7494  002136  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7495  002138  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7496                           
  7497                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
  7498  00213A  0E03               	movlw	3
  7499  00213C  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;vscp_firmware.c: 232: vscp_sendEvent();
  7503  00213E  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  7504  002142  D03A               	goto	l768
  7505  002144                     l769:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
  7509  002144  AF75               	btfss	_vscp_imsg& (0+255),7,b
  7510  002146  D00F               	goto	l5355
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
  7514                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
  7515  002148  5178               	movf	(_vscp_imsg+3)& (0+255),w,b
  7516  00214A  1177               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  7517  00214C  E135               	bnz	l768
  7518                           
  7519                           ; BSR set to: 0
  7520  00214E  5179               	movf	(_vscp_imsg+4)& (0+255),w,b
  7521  002150  0A03               	xorlw	3
  7522  002152  E132               	bnz	l768
  7523                           
  7524                           ; BSR set to: 0
  7525                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
  7526  002154  6653               	tstfsz	_vscp_probe_address,c
  7527  002156  D003               	goto	l5349
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
  7531  002158  0E02               	movlw	2
  7532  00215A  6F71               	movwf	_vscp_node_state& (0+255),b
  7533  00215C  D7E2               	goto	l5329
  7534  00215E                     l5349:
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;vscp_firmware.c: 256: vscp_probe_address++;
  7538  00215E  2A53               	incf	_vscp_probe_address,f,c
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
  7542  002160  6B72               	clrf	_vscp_node_substate& (0+255),b
  7543  002162                     l5353:
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
  7547  002162  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7548  002164  D029               	goto	l768
  7549  002166                     l5355:
  7550                           
  7551                           ; BSR set to: 0
  7552                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
  7553  002166  0EE9               	movlw	233
  7554  002168  5D66               	subwf	_vscp_timer& (0+255),w,b	;volatile
  7555  00216A  0E03               	movlw	3
  7556  00216C  5967               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
  7557  00216E  E324               	bnc	l768
  7558                           
  7559                           ; BSR set to: 0
  7560                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
  7561  002170  2B73               	incf	_vscp_probe_cnt& (0+255),f,b
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
  7565  002172  0E02               	movlw	2
  7566  002174  6573               	cpfsgt	_vscp_probe_cnt& (0+255),b
  7567  002176  D017               	goto	l776
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
  7571  002178  6653               	tstfsz	_vscp_probe_address,c
  7572  00217A  D005               	goto	l777
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;vscp_firmware.c: 274: vscp_probe_address++;
  7576  00217C  2A53               	incf	_vscp_probe_address,f,c
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
  7580  00217E  6B72               	clrf	_vscp_node_substate& (0+255),b
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;vscp_firmware.c: 276: vscp_timer = 0;
  7584  002180  6B66               	clrf	_vscp_timer& (0+255),b	;volatile
  7585  002182  6B67               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
  7586  002184  D7EE               	goto	l5353
  7587  002186                     l777:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
  7591  002186  C053  F070         	movff	_vscp_probe_address,_vscp_nickname
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
  7595  00218A  0E03               	movlw	3
  7596  00218C  6F71               	movwf	_vscp_node_state& (0+255),b
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
  7600  00218E  6B72               	clrf	_vscp_node_substate& (0+255),b
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
  7604  002190  5170               	movf	_vscp_nickname& (0+255),w,b
  7605  002192  ECEE  F014         	call	_vscp_writeNicknamePermanent
  7606                           
  7607                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
  7608  002196  0E40               	movlw	64
  7609  002198  ECE5  F014         	call	_vscp_setSegmentCRC
  7610                           
  7611                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
  7612  00219C  0100               	movlb	0	; () banked
  7613  00219E  6B73               	clrf	_vscp_probe_cnt& (0+255),b
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;vscp_firmware.c: 290: vscp_goActiveState();
  7617  0021A0  EC59  F014         	call	_vscp_goActiveState	;wreg free
  7618  0021A4  D009               	goto	l768
  7619  0021A6                     l776:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
  7623  0021A6  6B72               	clrf	_vscp_node_substate& (0+255),b
  7624  0021A8  D007               	goto	l768
  7625  0021AA                     l5385:
  7626  0021AA  0100               	movlb	0	; () banked
  7627  0021AC  5172               	movf	_vscp_node_substate& (0+255),w,b
  7628                           
  7629                           ; Switch size 1, requested type "space"
  7630                           ; Number of cases is 3, Range of values is 0 to 2
  7631                           ; switch strategies available:
  7632                           ; Name         Instructions Cycles
  7633                           ; simple_byte           10     6 (average)
  7634                           ;	Chosen strategy is simple_byte
  7635  0021AE  E0AA               	bz	l5315
  7636  0021B0  0A01               	xorlw	1	; case 1
  7637  0021B2  E0C8               	bz	l769
  7638  0021B4  0A03               	xorlw	3	; case 2
  7639  0021B6  E1F7               	bnz	l776
  7640  0021B8                     l768:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
  7644  0021B8  6B75               	clrf	_vscp_imsg& (0+255),b
  7645                           
  7646                           ; BSR set to: 0
  7647  0021BA  0012               	return	
  7648  0021BC                     __end_of_vscp_handleProbeState:
  7649                           	opt stack 0
  7650                           tblptru	equ	0xFF8
  7651                           tblptrh	equ	0xFF7
  7652                           tblptrl	equ	0xFF6
  7653                           tablat	equ	0xFF5
  7654                           prodh	equ	0xFF4
  7655                           prodl	equ	0xFF3
  7656                           intcon	equ	0xFF2
  7657                           postinc0	equ	0xFEE
  7658                           wreg	equ	0xFE8
  7659                           indf1	equ	0xFE7
  7660                           fsr1h	equ	0xFE2
  7661                           fsr1l	equ	0xFE1
  7662                           indf2	equ	0xFDF
  7663                           postinc2	equ	0xFDE
  7664                           postdec2	equ	0xFDD
  7665                           plusw2	equ	0xFDB
  7666                           fsr2h	equ	0xFDA
  7667                           fsr2l	equ	0xFD9
  7668                           status	equ	0xFD8
  7669                           
  7670 ;; *************** function _vscp_goActiveState *****************
  7671 ;; Defined at:
  7672 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;		None
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;		None
  7677 ;; Return value:  Size  Location     Type
  7678 ;;		None               void
  7679 ;; Registers used:
  7680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : F/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7690 ;;Total ram usage:        0 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    7
  7693 ;; This function calls:
  7694 ;;		_vscp_sendEvent
  7695 ;; This function is called by:
  7696 ;;		_main
  7697 ;;		_vscp_handleProbeState
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           	psect	text47
  7702  0028B2                     __ptext47:
  7703                           	opt stack 0
  7704  0028B2                     _vscp_goActiveState:
  7705                           	opt stack 22
  7706                           
  7707                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
  7708                           
  7709                           ; BSR set to: 0
  7710                           ;incstack = 0
  7711                           ;incstack = 0
  7712  0028B2  0E81               	movlw	129
  7713  0028B4  0100               	movlb	0	; () banked
  7714  0028B6  6F83               	movwf	_vscp_omsg& (0+255),b
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
  7718  0028B8  6B84               	clrf	(_vscp_omsg+1)& (0+255),b
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
  7722  0028BA  6B85               	clrf	(_vscp_omsg+2)& (0+255),b
  7723  0028BC  6B86               	clrf	(_vscp_omsg+3)& (0+255),b
  7724                           
  7725                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
  7726  0028BE  0E02               	movlw	2
  7727  0028C0  6F87               	movwf	(_vscp_omsg+4)& (0+255),b
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
  7731  0028C2  C070  F088         	movff	_vscp_nickname,_vscp_omsg+5
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;vscp_firmware.c: 358: vscp_sendEvent();
  7735  0028C6  ECB0  F013         	call	_vscp_sendEvent	;wreg free
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
  7739  0028CA  0E01               	movlw	1
  7740  0028CC  6E52               	movwf	_vscp_initledfunc,c
  7741                           
  7742                           ; BSR set to: 0
  7743  0028CE  0C01               	retlw	1
  7744  0028D0                     __end_of_vscp_goActiveState:
  7745                           	opt stack 0
  7746                           tblptru	equ	0xFF8
  7747                           tblptrh	equ	0xFF7
  7748                           tblptrl	equ	0xFF6
  7749                           tablat	equ	0xFF5
  7750                           prodh	equ	0xFF4
  7751                           prodl	equ	0xFF3
  7752                           intcon	equ	0xFF2
  7753                           postinc0	equ	0xFEE
  7754                           wreg	equ	0xFE8
  7755                           indf1	equ	0xFE7
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           plusw2	equ	0xFDB
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _vscp_sendEvent *****************
  7767 ;; Defined at:
  7768 ;;		line 1275 in file "../../vscp_firmware/common/vscp_firmware.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;  rv              1    0        unsigned char 
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      unsigned char 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : F/0
  7779 ;;		On exit  : F/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7786 ;;Total ram usage:        1 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    6
  7789 ;; This function calls:
  7790 ;;		_sendVSCPFrame
  7791 ;; This function is called by:
  7792 ;;		_vscp_handleProbeState
  7793 ;;		_vscp_goActiveState
  7794 ;;		_vscp_sendHeartBeat
  7795 ;;		_vscp_newNodeOnline
  7796 ;;		_vscp_handleProtocolEvent
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text48
  7801  002760                     __ptext48:
  7802                           	opt stack 0
  7803  002760                     _vscp_sendEvent:
  7804                           	opt stack 22
  7805                           
  7806                           ; BSR set to: 0
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;incstack = 0
  7810                           ;incstack = 0
  7811  002760  C085  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
  7812  002764  C086  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
  7813  002768  C087  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
  7814  00276C  C070  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
  7815  002770  C084  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
  7816  002774  5183               	movf	_vscp_omsg& (0+255),w,b
  7817  002776  0B0F               	andlw	15
  7818  002778  6E44               	movwf	?_sendVSCPFrame+5,c
  7819  00277A  0E00               	movlw	high (_vscp_omsg+5)
  7820  00277C  6E46               	movwf	?_sendVSCPFrame+7,c
  7821  00277E  0E88               	movlw	low (_vscp_omsg+5)
  7822  002780  6E45               	movwf	?_sendVSCPFrame+6,c
  7823  002782  EFDE  F010         	goto	_sendVSCPFrame	;wreg free
  7824  002786                     __end_of_vscp_sendEvent:
  7825                           	opt stack 0
  7826                           tblptru	equ	0xFF8
  7827                           tblptrh	equ	0xFF7
  7828                           tblptrl	equ	0xFF6
  7829                           tablat	equ	0xFF5
  7830                           prodh	equ	0xFF4
  7831                           prodl	equ	0xFF3
  7832                           intcon	equ	0xFF2
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           indf1	equ	0xFE7
  7836                           fsr1h	equ	0xFE2
  7837                           fsr1l	equ	0xFE1
  7838                           indf2	equ	0xFDF
  7839                           postinc2	equ	0xFDE
  7840                           postdec2	equ	0xFDD
  7841                           plusw2	equ	0xFDB
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846 ;; *************** function _sendVSCPFrame *****************
  7847 ;; Defined at:
  7848 ;;		line 1175 in file "../main.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  vscpclass       2   62[COMRAM] unsigned short 
  7851 ;;  vscptype        1   64[COMRAM] unsigned char 
  7852 ;;  nodeid          1   65[COMRAM] unsigned char 
  7853 ;;  priority        1   66[COMRAM] unsigned char 
  7854 ;;  size            1   67[COMRAM] unsigned char 
  7855 ;;  pData           2   68[COMRAM] PTR unsigned char 
  7856 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  7857 ;; Auto vars:     Size  Location     Type
  7858 ;;  id              4   70[COMRAM] unsigned long 
  7859 ;; Return value:  Size  Location     Type
  7860 ;;                  1    wreg      unsigned char 
  7861 ;; Registers used:
  7862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7863 ;; Tracked objects:
  7864 ;;		On entry : F/0
  7865 ;;		On exit  : F/0
  7866 ;;		Unchanged: 0/0
  7867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7868 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7869 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7870 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7871 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7872 ;;Total ram usage:       32 bytes
  7873 ;; Hardware stack levels used:    1
  7874 ;; Hardware stack levels required when called:    5
  7875 ;; This function calls:
  7876 ;;		_sendCANFrame
  7877 ;; This function is called by:
  7878 ;;		_vscp_sendEvent
  7879 ;; This function uses a non-reentrant model
  7880 ;;
  7881                           
  7882                           	psect	text49
  7883  0021BC                     __ptext49:
  7884                           	opt stack 0
  7885  0021BC                     _sendVSCPFrame:
  7886                           	opt stack 22
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;main.c: 1176: uint32_t id = ( (uint32_t)priority << 26 ) |
  7890                           ;main.c: 1177: ( (uint32_t)vscpclass << 16 ) |
  7891                           ;main.c: 1178: ( (uint32_t)vscptype << 8 ) |
  7892                           ;main.c: 1179: nodeid;
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;incstack = 0
  7896                           ;incstack = 0
  7897  0021BC  C041  F090         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
  7898  0021C0  6B91               	clrf	(??_sendVSCPFrame+1)& (0+255),b
  7899  0021C2  6B92               	clrf	(??_sendVSCPFrame+2)& (0+255),b
  7900  0021C4  6B93               	clrf	(??_sendVSCPFrame+3)& (0+255),b
  7901  0021C6  C092  F093         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
  7902  0021CA  C091  F092         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
  7903  0021CE  C090  F091         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
  7904  0021D2  6B90               	clrf	??_sendVSCPFrame& (0+255),b
  7905  0021D4  503F               	movf	sendVSCPFrame@vscpclass,w,c
  7906  0021D6  6F94               	movwf	(??_sendVSCPFrame+4)& (0+255),b
  7907  0021D8  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
  7908  0021DA  6F95               	movwf	(??_sendVSCPFrame+5)& (0+255),b
  7909  0021DC  6B96               	clrf	(??_sendVSCPFrame+6)& (0+255),b
  7910  0021DE  6B97               	clrf	(??_sendVSCPFrame+7)& (0+255),b
  7911  0021E0  C095  F097         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
  7912  0021E4  C094  F096         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
  7913  0021E8  6B95               	clrf	(??_sendVSCPFrame+5)& (0+255),b
  7914  0021EA  6B94               	clrf	(??_sendVSCPFrame+4)& (0+255),b
  7915  0021EC  C043  F098         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
  7916  0021F0  6B99               	clrf	(??_sendVSCPFrame+9)& (0+255),b
  7917  0021F2  6B9A               	clrf	(??_sendVSCPFrame+10)& (0+255),b
  7918  0021F4  6B9B               	clrf	(??_sendVSCPFrame+11)& (0+255),b
  7919  0021F6  0E1A               	movlw	26
  7920  0021F8                     u5855:
  7921  0021F8  90D8               	bcf	status,0,c
  7922  0021FA  3798               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
  7923  0021FC  3799               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
  7924  0021FE  379A               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
  7925  002200  379B               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
  7926  002202  2EE8               	decfsz	wreg,f,c
  7927  002204  D7F9               	goto	u5855
  7928  002206  5194               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
  7929  002208  1198               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
  7930  00220A  6F9C               	movwf	(??_sendVSCPFrame+12)& (0+255),b
  7931  00220C  5195               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
  7932  00220E  1199               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
  7933  002210  6F9D               	movwf	(??_sendVSCPFrame+13)& (0+255),b
  7934  002212  5196               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
  7935  002214  119A               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
  7936  002216  6F9E               	movwf	(??_sendVSCPFrame+14)& (0+255),b
  7937  002218  5197               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
  7938  00221A  119B               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
  7939  00221C  6F9F               	movwf	(??_sendVSCPFrame+15)& (0+255),b
  7940  00221E  5190               	movf	??_sendVSCPFrame& (0+255),w,b
  7941  002220  119C               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
  7942  002222  6FA0               	movwf	(??_sendVSCPFrame+16)& (0+255),b
  7943  002224  5191               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
  7944  002226  119D               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
  7945  002228  6FA1               	movwf	(??_sendVSCPFrame+17)& (0+255),b
  7946  00222A  5192               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
  7947  00222C  119E               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
  7948  00222E  6FA2               	movwf	(??_sendVSCPFrame+18)& (0+255),b
  7949  002230  5193               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
  7950  002232  119F               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
  7951  002234  6FA3               	movwf	(??_sendVSCPFrame+19)& (0+255),b
  7952  002236  5042               	movf	sendVSCPFrame@nodeid,w,c
  7953  002238  11A0               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
  7954  00223A  6E47               	movwf	sendVSCPFrame@id,c
  7955  00223C  51A1               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
  7956  00223E  6E48               	movwf	sendVSCPFrame@id+1,c
  7957  002240  51A2               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
  7958  002242  6E49               	movwf	sendVSCPFrame@id+2,c
  7959  002244  51A3               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
  7960  002246  6E4A               	movwf	sendVSCPFrame@id+3,c
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;main.c: 1181: if ( !sendCANFrame( id, size, pData ) ) {
  7964  002248  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
  7965  00224C  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
  7966  002250  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
  7967  002254  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
  7968  002258  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
  7969  00225C  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
  7970  002260  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
  7971  002264  EC0E  F013         	call	_sendCANFrame	;wreg free
  7972  002268  0900               	iorlw	0
  7973  00226A  E101               	bnz	l5851
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;main.c: 1182: return 0;
  7977  00226C  0C00               	retlw	0
  7978  00226E                     l5851:
  7979                           
  7980                           ; BSR set to: 0
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;main.c: 1183: }
  7984                           ;main.c: 1185: return 1;
  7985  00226E  0C01               	retlw	1
  7986  002270                     __end_of_sendVSCPFrame:
  7987                           	opt stack 0
  7988                           tblptru	equ	0xFF8
  7989                           tblptrh	equ	0xFF7
  7990                           tblptrl	equ	0xFF6
  7991                           tablat	equ	0xFF5
  7992                           prodh	equ	0xFF4
  7993                           prodl	equ	0xFF3
  7994                           intcon	equ	0xFF2
  7995                           postinc0	equ	0xFEE
  7996                           wreg	equ	0xFE8
  7997                           indf1	equ	0xFE7
  7998                           fsr1h	equ	0xFE2
  7999                           fsr1l	equ	0xFE1
  8000                           indf2	equ	0xFDF
  8001                           postinc2	equ	0xFDE
  8002                           postdec2	equ	0xFDD
  8003                           plusw2	equ	0xFDB
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8
  8007                           
  8008 ;; *************** function _sendCANFrame *****************
  8009 ;; Defined at:
  8010 ;;		line 1220 in file "../main.c"
  8011 ;; Parameters:    Size  Location     Type
  8012 ;;  id              4   54[COMRAM] unsigned long 
  8013 ;;  dlc             1   58[COMRAM] unsigned char 
  8014 ;;  pdata           2   59[COMRAM] PTR unsigned char 
  8015 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;  rv              1   61[COMRAM] unsigned char 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  1    wreg      unsigned char 
  8020 ;; Registers used:
  8021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : F/0
  8024 ;;		On exit  : F/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8027 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8030 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8031 ;;Total ram usage:        8 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    4
  8034 ;; This function calls:
  8035 ;;		_ECANSendMessage
  8036 ;; This function is called by:
  8037 ;;		_sendVSCPFrame
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text50
  8042  00261C                     __ptext50:
  8043                           	opt stack 0
  8044  00261C                     _sendCANFrame:
  8045                           	opt stack 22
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;main.c: 1221: uint8_t rv = 0;
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;incstack = 0
  8052                           ;incstack = 0
  8053  00261C  6A3E               	clrf	sendCANFrame@rv,c
  8054                           
  8055                           ;main.c: 1222: sendTimer = 0;
  8056  00261E  6A51               	clrf	_sendTimer,c
  8057                           
  8058                           ;main.c: 1224: while ( sendTimer < 1 ) {
  8059  002620  D017               	goto	l5861
  8060  002622                     l5857:
  8061                           
  8062                           ;main.c: 1225: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
  8063  002622  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
  8064  002626  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
  8065  00262A  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
  8066  00262E  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
  8067  002632  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
  8068  002636  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
  8069  00263A  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
  8070  00263E  0E20               	movlw	32
  8071  002640  6E19               	movwf	?_ECANSendMessage+7,c
  8072  002642  EC3B  F00D         	call	_ECANSendMessage	;wreg free
  8073  002646  0900               	iorlw	0
  8074  002648  E003               	bz	l5861
  8075                           
  8076                           ;main.c: 1226: rv = 1;
  8077  00264A  0E01               	movlw	1
  8078  00264C  6E3E               	movwf	sendCANFrame@rv,c
  8079                           
  8080                           ;main.c: 1227: break;
  8081  00264E  D002               	goto	l374
  8082  002650                     l5861:
  8083  002650  5051               	movf	_sendTimer,w,c
  8084  002652  E0E7               	bz	l5857
  8085  002654                     l374:
  8086                           
  8087                           ;main.c: 1228: }
  8088                           ;main.c: 1229: }
  8089                           ;main.c: 1231: vscp_omsg.flags = 0;
  8090  002654  0100               	movlb	0	; () banked
  8091  002656  6B83               	clrf	_vscp_omsg& (0+255),b
  8092                           
  8093                           ; BSR set to: 0
  8094                           ;main.c: 1233: return rv;
  8095  002658  503E               	movf	sendCANFrame@rv,w,c
  8096                           
  8097                           ; BSR set to: 0
  8098  00265A  0012               	return	
  8099  00265C                     __end_of_sendCANFrame:
  8100                           	opt stack 0
  8101                           tblptru	equ	0xFF8
  8102                           tblptrh	equ	0xFF7
  8103                           tblptrl	equ	0xFF6
  8104                           tablat	equ	0xFF5
  8105                           prodh	equ	0xFF4
  8106                           prodl	equ	0xFF3
  8107                           intcon	equ	0xFF2
  8108                           postinc0	equ	0xFEE
  8109                           wreg	equ	0xFE8
  8110                           indf1	equ	0xFE7
  8111                           fsr1h	equ	0xFE2
  8112                           fsr1l	equ	0xFE1
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           plusw2	equ	0xFDB
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _ECANSendMessage *****************
  8122 ;; Defined at:
  8123 ;;		line 617 in file "../ECAN.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  id              4   17[COMRAM] unsigned long 
  8126 ;;  data            2   21[COMRAM] PTR unsigned char 
  8127 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
  8128 ;;  dataLen         1   23[COMRAM] unsigned char 
  8129 ;;  msgFlags        1   24[COMRAM] enum E18958
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
  8132 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8133 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8134 ;;		 -> B0CON(1), 
  8135 ;;  ptr             2   52[COMRAM] PTR unsigned char 
  8136 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8137 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8138 ;;		 -> B0CON(1), 
  8139 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
  8140 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8141 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8142 ;;		 -> B0CON(1), 
  8143 ;;  i               1   51[COMRAM] unsigned char 
  8144 ;;  temp            1   50[COMRAM] unsigned char 
  8145 ;;  tempBSEL0       1   47[COMRAM] struct .
  8146 ;;  j               1   46[COMRAM] unsigned char 
  8147 ;;  buffers         1   45[COMRAM] unsigned char 
  8148 ;;  mode            1   44[COMRAM] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;                  1    wreg      enum E18242
  8151 ;; Registers used:
  8152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8158 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8159 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8161 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8162 ;;Total ram usage:       37 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    3
  8165 ;; This function calls:
  8166 ;;		__CANIDToRegs
  8167 ;; This function is called by:
  8168 ;;		_sendCANFrame
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text51
  8173  001A76                     __ptext51:
  8174                           	opt stack 0
  8175  001A76                     _ECANSendMessage:
  8176                           	opt stack 22
  8177                           
  8178                           ;ECAN.c: 619: BYTE mode;
  8179                           ;ECAN.c: 620: BYTE buffers;
  8180                           ;ECAN.c: 628: BYTE i,j;
  8181                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
  8182                           ;ECAN.c: 630: BYTE* pb[9];
  8183                           ;ECAN.c: 631: BYTE temp;
  8184                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
  8185                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;incstack = 0
  8189                           ;incstack = 0
  8190  001A76  0E0F               	movlw	15	;volatile
  8191  001A78  6E1C               	movwf	ECANSendMessage@pb+1,c
  8192  001A7A  0E20               	movlw	32	;volatile
  8193  001A7C  6E1B               	movwf	ECANSendMessage@pb,c
  8194                           
  8195                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
  8196  001A7E  0E0F               	movlw	15	;volatile
  8197  001A80  6E1E               	movwf	ECANSendMessage@pb+3,c
  8198  001A82  0E10               	movlw	16	;volatile
  8199  001A84  6E1D               	movwf	ECANSendMessage@pb+2,c
  8200                           
  8201                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
  8202  001A86  0E0F               	movlw	15	;volatile
  8203  001A88  6E20               	movwf	ECANSendMessage@pb+5,c
  8204  001A8A  6A1F               	clrf	ECANSendMessage@pb+4,c
  8205                           
  8206                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
  8207  001A8C  010E               	movlb	14	; () banked
  8208  001A8E  0E0E               	movlw	14	;volatile
  8209  001A90  6E22               	movwf	ECANSendMessage@pb+7,c
  8210  001A92  0E80               	movlw	128	;volatile
  8211  001A94  6E21               	movwf	ECANSendMessage@pb+6,c
  8212                           
  8213                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
  8214  001A96  0E0E               	movlw	14	;volatile
  8215  001A98  6E24               	movwf	ECANSendMessage@pb+9,c
  8216  001A9A  0E90               	movlw	144	;volatile
  8217  001A9C  6E23               	movwf	ECANSendMessage@pb+8,c
  8218                           
  8219                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
  8220  001A9E  0E0E               	movlw	14	;volatile
  8221  001AA0  6E26               	movwf	ECANSendMessage@pb+11,c
  8222  001AA2  0EA0               	movlw	160	;volatile
  8223  001AA4  6E25               	movwf	ECANSendMessage@pb+10,c
  8224                           
  8225                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
  8226  001AA6  0E0E               	movlw	14	;volatile
  8227  001AA8  6E28               	movwf	ECANSendMessage@pb+13,c
  8228  001AAA  0EB0               	movlw	176	;volatile
  8229  001AAC  6E27               	movwf	ECANSendMessage@pb+12,c
  8230                           
  8231                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
  8232  001AAE  0E0E               	movlw	14	;volatile
  8233  001AB0  6E2A               	movwf	ECANSendMessage@pb+15,c
  8234  001AB2  0EC0               	movlw	192	;volatile
  8235  001AB4  6E29               	movwf	ECANSendMessage@pb+14,c
  8236                           
  8237                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
  8238  001AB6  0E0E               	movlw	14	;volatile
  8239  001AB8  6E2C               	movwf	ECANSendMessage@pb+17,c
  8240  001ABA  0ED0               	movlw	208	;volatile
  8241  001ABC  6E2B               	movwf	ECANSendMessage@pb+16,c
  8242                           
  8243                           ; BSR set to: 14
  8244                           ;ECAN.c: 659: mode = ECANCON&0xC0;
  8245  001ABE  5072               	movf	3954,w,c	;volatile
  8246  001AC0  0BC0               	andlw	192
  8247  001AC2  6E2D               	movwf	ECANSendMessage@mode,c
  8248                           
  8249                           ; BSR set to: 14
  8250                           ;ECAN.c: 660: if ( mode == 0x00 )
  8251  001AC4  662D               	tstfsz	ECANSendMessage@mode,c
  8252  001AC6  D002               	goto	l5875
  8253                           
  8254                           ; BSR set to: 14
  8255                           ;ECAN.c: 661: buffers = 2;
  8256  001AC8  0E02               	movlw	2
  8257  001ACA  D001               	goto	L24
  8258  001ACC                     l5875:
  8259                           
  8260                           ; BSR set to: 14
  8261                           ;ECAN.c: 662: else
  8262                           ;ECAN.c: 663: buffers = 8;
  8263  001ACC  0E08               	movlw	8
  8264  001ACE                     L24:
  8265  001ACE  6E2E               	movwf	ECANSendMessage@buffers,c
  8266                           
  8267                           ; BSR set to: 14
  8268                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
  8269  001AD0  90D8               	bcf	status,0,c
  8270  001AD2  317D               	rrcf	125,w,b	;volatile
  8271  001AD4  6E30               	movwf	ECANSendMessage@tempBSEL0,c
  8272                           
  8273                           ; BSR set to: 14
  8274                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
  8275  001AD6  6A34               	clrf	ECANSendMessage@i,c
  8276  001AD8  D07C               	goto	l5935
  8277  001ADA                     l5881:
  8278                           
  8279                           ;ECAN.c: 688: {
  8280                           ;ECAN.c: 693: ptr = pb[i];
  8281  001ADA  5034               	movf	ECANSendMessage@i,w,c
  8282  001ADC  0D02               	mullw	2
  8283  001ADE  50F3               	movf	prodl,w,c
  8284  001AE0  0F1B               	addlw	low ECANSendMessage@pb
  8285  001AE2  6ED9               	movwf	fsr2l,c
  8286  001AE4  6ADA               	clrf	fsr2h,c
  8287  001AE6  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
  8288  001AEA  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
  8289                           
  8290                           ;ECAN.c: 694: tempPtr = ptr;
  8291  001AEE  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
  8292  001AF2  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
  8293                           
  8294                           ;ECAN.c: 702: if ( i > 2 )
  8295  001AF6  0E02               	movlw	2
  8296  001AF8  6434               	cpfsgt	ECANSendMessage@i,c
  8297  001AFA  D004               	goto	l5893
  8298                           
  8299                           ;ECAN.c: 703: {
  8300                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
  8301  001AFC  90D8               	bcf	status,0,c
  8302  001AFE  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
  8303                           
  8304                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
  8305  001B00  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
  8306  001B02  D066               	goto	l5933
  8307  001B04                     l5893:
  8308                           
  8309                           ;ECAN.c: 714: }
  8310                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
  8311  001B04  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8312  001B08  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8313  001B0C  50DF               	movf	indf2,w,c
  8314  001B0E  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  8315  001B10  B61A               	btfsc	??_ECANSendMessage,3,c
  8316  001B12  D05E               	goto	l5933
  8317                           
  8318                           ;ECAN.c: 721: {
  8319                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
  8320  001B14  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8321  001B18  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8322  001B1C  0EFC               	movlw	252
  8323  001B1E  16DF               	andwf	indf2,f,c
  8324                           
  8325                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
  8326  001B20  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
  8327  001B24  0E03               	movlw	3
  8328  001B26  161A               	andwf	??_ECANSendMessage,f,c
  8329  001B28  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
  8330  001B2C  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
  8331  001B30  501A               	movf	??_ECANSendMessage,w,c
  8332  001B32  12DF               	iorwf	indf2,f,c
  8333                           
  8334                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
  8335  001B34  AC19               	btfss	ECANSendMessage@msgFlags,6,c
  8336  001B36  D004               	goto	l566
  8337                           
  8338                           ;ECAN.c: 728: temp = 0x40 | dataLen;
  8339  001B38  5018               	movf	ECANSendMessage@dataLen,w,c
  8340  001B3A  0940               	iorlw	64
  8341  001B3C  6E33               	movwf	ECANSendMessage@temp,c
  8342  001B3E  D002               	goto	l5903
  8343  001B40                     l566:
  8344                           
  8345                           ;ECAN.c: 729: else
  8346                           ;ECAN.c: 730: temp = dataLen;
  8347  001B40  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
  8348  001B44                     l5903:
  8349                           
  8350                           ;ECAN.c: 732: *(ptr+5) = temp;
  8351  001B44  EE20 F005          	lfsr	2,5
  8352  001B48  5035               	movf	ECANSendMessage@ptr,w,c
  8353  001B4A  26D9               	addwf	fsr2l,f,c
  8354  001B4C  5036               	movf	ECANSendMessage@ptr+1,w,c
  8355  001B4E  22DA               	addwfc	fsr2h,f,c
  8356  001B50  C033  FFDF         	movff	ECANSendMessage@temp,indf2
  8357                           
  8358                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
  8359  001B54  AA19               	btfss	ECANSendMessage@msgFlags,5,c
  8360  001B56  D003               	goto	l568
  8361                           
  8362                           ;ECAN.c: 736: temp = 1;
  8363  001B58  0E01               	movlw	1
  8364  001B5A  6E33               	movwf	ECANSendMessage@temp,c
  8365  001B5C  D001               	goto	l5909
  8366  001B5E                     l568:
  8367                           
  8368                           ;ECAN.c: 738: else
  8369                           ;ECAN.c: 739: temp = 0;
  8370  001B5E  6A33               	clrf	ECANSendMessage@temp,c
  8371  001B60                     l5909:
  8372                           
  8373                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
  8374  001B60  2835               	incf	ECANSendMessage@ptr,w,c
  8375  001B62  6E08               	movwf	?__CANIDToRegs,c
  8376  001B64  0E00               	movlw	0
  8377  001B66  2036               	addwfc	ECANSendMessage@ptr+1,w,c
  8378  001B68  6E09               	movwf	?__CANIDToRegs+1,c
  8379  001B6A  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
  8380  001B6E  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
  8381  001B72  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
  8382  001B76  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
  8383  001B7A  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
  8384  001B7E  EC7C  F00E         	call	__CANIDToRegs	;wreg free
  8385                           
  8386                           ;ECAN.c: 745: ptr += 6;
  8387  001B82  0E06               	movlw	6
  8388  001B84  2635               	addwf	ECANSendMessage@ptr,f,c
  8389  001B86  0E00               	movlw	0
  8390  001B88  2236               	addwfc	ECANSendMessage@ptr+1,f,c
  8391                           
  8392                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
  8393  001B8A  6A2F               	clrf	ECANSendMessage@j,c
  8394  001B8C  D00F               	goto	l5923
  8395  001B8E                     l5915:
  8396                           
  8397                           ;ECAN.c: 748: *ptr++ = *data++;
  8398  001B8E  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
  8399  001B92  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
  8400  001B96  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
  8401  001B9A  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
  8402  001B9E  CFDF FFE7          	movff	indf2,indf1
  8403  001BA2  4A16               	infsnz	ECANSendMessage@data,f,c
  8404  001BA4  2A17               	incf	ECANSendMessage@data+1,f,c
  8405  001BA6  4A35               	infsnz	ECANSendMessage@ptr,f,c
  8406  001BA8  2A36               	incf	ECANSendMessage@ptr+1,f,c
  8407  001BAA  2A2F               	incf	ECANSendMessage@j,f,c
  8408  001BAC                     l5923:
  8409  001BAC  5018               	movf	ECANSendMessage@dataLen,w,c
  8410  001BAE  5C2F               	subwf	ECANSendMessage@j,w,c
  8411  001BB0  E3EE               	bnc	l5915
  8412                           
  8413                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
  8414  001BB2  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  8415  001BB6  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  8416  001BBA  50DF               	movf	indf2,w,c
  8417  001BBC  6E1A               	movwf	??_ECANSendMessage& (0+255),c
  8418  001BBE  B41A               	btfsc	??_ECANSendMessage,2,c
  8419  001BC0  0C01               	retlw	1
  8420                           
  8421                           ;ECAN.c: 753: *tempPtr |= 0x08;
  8422  001BC2  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
  8423  001BC6  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
  8424  001BCA  0E00               	movlw	0
  8425  001BCC  86DB               	bsf	plusw2,3,c
  8426                           
  8427                           ;ECAN.c: 755: return TRUE;
  8428  001BCE  0C01               	retlw	1
  8429  001BD0                     l5933:
  8430  001BD0  2A34               	incf	ECANSendMessage@i,f,c
  8431  001BD2                     l5935:
  8432  001BD2  502E               	movf	ECANSendMessage@buffers,w,c
  8433  001BD4  5C34               	subwf	ECANSendMessage@i,w,c
  8434  001BD6  E381               	bnc	l5881
  8435                           
  8436                           ;ECAN.c: 756: }
  8437                           ;ECAN.c: 757: }
  8438                           ;ECAN.c: 760: return FALSE;
  8439  001BD8  0C00               	retlw	0
  8440  001BDA                     __end_of_ECANSendMessage:
  8441                           	opt stack 0
  8442                           tblptru	equ	0xFF8
  8443                           tblptrh	equ	0xFF7
  8444                           tblptrl	equ	0xFF6
  8445                           tablat	equ	0xFF5
  8446                           prodh	equ	0xFF4
  8447                           prodl	equ	0xFF3
  8448                           intcon	equ	0xFF2
  8449                           postinc0	equ	0xFEE
  8450                           wreg	equ	0xFE8
  8451                           indf1	equ	0xFE7
  8452                           fsr1h	equ	0xFE2
  8453                           fsr1l	equ	0xFE1
  8454                           indf2	equ	0xFDF
  8455                           postinc2	equ	0xFDE
  8456                           postdec2	equ	0xFDD
  8457                           plusw2	equ	0xFDB
  8458                           fsr2h	equ	0xFDA
  8459                           fsr2l	equ	0xFD9
  8460                           status	equ	0xFD8
  8461                           
  8462 ;; *************** function __CANIDToRegs *****************
  8463 ;; Defined at:
  8464 ;;		line 1099 in file "../ECAN.c"
  8465 ;; Parameters:    Size  Location     Type
  8466 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  8467 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
  8468 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
  8469 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
  8470 ;;  val             4    9[COMRAM] unsigned long 
  8471 ;;  type            1   13[COMRAM] unsigned char 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
  8474 ;;		 -> _CANIDToRegs@val(4), 
  8475 ;; Return value:  Size  Location     Type
  8476 ;;		None               void
  8477 ;; Registers used:
  8478 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8479 ;; Tracked objects:
  8480 ;;		On entry : 0/E
  8481 ;;		On exit  : 0/0
  8482 ;;		Unchanged: 0/0
  8483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8484 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8486 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8487 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8488 ;;Total ram usage:       10 bytes
  8489 ;; Hardware stack levels used:    1
  8490 ;; Hardware stack levels required when called:    2
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		_ECANSendMessage
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           	psect	text52
  8499  001CF8                     __ptext52:
  8500                           	opt stack 0
  8501  001CF8                     __CANIDToRegs:
  8502                           	opt stack 22
  8503                           
  8504                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
  8505                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
  8506                           
  8507                           ;incstack = 0
  8508                           ;incstack = 0
  8509  001CF8  0E0A               	movlw	low __CANIDToRegs@val
  8510  001CFA  6E11               	movwf	__CANIDToRegs@Value,c
  8511                           
  8512                           ;ECAN.c: 1104: if ( type == 0 )
  8513  001CFC  660E               	tstfsz	__CANIDToRegs@type,c
  8514  001CFE  D022               	goto	l5951
  8515                           
  8516                           ;ECAN.c: 1105: {
  8517                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
  8518  001D00  5011               	movf	__CANIDToRegs@Value,w,c
  8519  001D02  6ED9               	movwf	fsr2l,c
  8520  001D04  6ADA               	clrf	fsr2h,c
  8521  001D06  50DF               	movf	indf2,w,c
  8522  001D08  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  8523  001D0A  90D8               	bcf	status,0,c
  8524  001D0C  320F               	rrcf	??__CANIDToRegs,f,c
  8525  001D0E  90D8               	bcf	status,0,c
  8526  001D10  320F               	rrcf	??__CANIDToRegs,f,c
  8527  001D12  90D8               	bcf	status,0,c
  8528  001D14  300F               	rrcf	??__CANIDToRegs,w,c
  8529                           
  8530                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
  8531  001D16  D862               	call	PL14	;call to abstracted procedure
  8532  001D18  2AD9               	incf	fsr2l,f,c
  8533  001D1A  6ADA               	clrf	fsr2h,c
  8534  001D1C  D872               	call	PL36	;call to abstracted procedure
  8535  001D1E                     u5995:
  8536  001D1E  90D8               	bcf	status,0,c
  8537  001D20  360F               	rlcf	??__CANIDToRegs,f,c
  8538  001D22  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  8539  001D24  D7FC               	goto	u5995
  8540  001D26  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8541                           
  8542                           ;ECAN.c: 1109: ptr++;
  8543                           
  8544                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
  8545  001D2A  D846               	call	PL4	;call to abstracted procedure
  8546  001D2C  D86A               	call	PL36	;call to abstracted procedure
  8547  001D2E                     u6005:
  8548  001D2E  90D8               	bcf	status,0,c
  8549  001D30  360F               	rlcf	??__CANIDToRegs,f,c
  8550  001D32  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  8551  001D34  D7FC               	goto	u6005
  8552  001D36  500F               	movf	??__CANIDToRegs,w,c
  8553  001D38  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8554  001D3C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  8555  001D40  6EDF               	movwf	indf2,c
  8556                           
  8557                           ;ECAN.c: 1111: }
  8558  001D42  0012               	return	
  8559  001D44                     l5951:
  8560                           
  8561                           ;ECAN.c: 1112: else
  8562                           ;ECAN.c: 1113: {
  8563                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
  8564  001D44  5011               	movf	__CANIDToRegs@Value,w,c
  8565  001D46  D842               	call	PL10	;call to abstracted procedure
  8566  001D48  0E05               	movlw	5
  8567  001D4A  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  8568  001D4C                     u6015:
  8569  001D4C  90D8               	bcf	status,0,c
  8570  001D4E  320F               	rrcf	??__CANIDToRegs,f,c
  8571  001D50  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
  8572  001D52  D7FC               	goto	u6015
  8573  001D54  500F               	movf	??__CANIDToRegs,w,c
  8574                           
  8575                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
  8576  001D56  D842               	call	PL14	;call to abstracted procedure
  8577  001D58  0E03               	movlw	3
  8578  001D5A  D849               	call	PL24	;call to abstracted procedure
  8579  001D5C  360F               	rlcf	??__CANIDToRegs,f,c
  8580  001D5E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8581                           
  8582                           ;ECAN.c: 1117: ptr++;
  8583                           
  8584                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
  8585  001D62  D82A               	call	PL4	;call to abstracted procedure
  8586  001D64  0E02               	movlw	2
  8587  001D66  D843               	call	PL24	;call to abstracted procedure
  8588  001D68  340F               	rlcf	??__CANIDToRegs,w,c
  8589  001D6A  0BE0               	andlw	224
  8590  001D6C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8591  001D70  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  8592  001D74  6EDF               	movwf	indf2,c
  8593                           
  8594                           ;ECAN.c: 1120: *ptr |= 0b00001000;
  8595  001D76  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8596  001D7A  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  8597  001D7E  0E00               	movlw	0
  8598  001D80  86DB               	bsf	plusw2,3,c
  8599                           
  8600                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
  8601  001D82  5011               	movf	__CANIDToRegs@Value,w,c
  8602  001D84  D823               	call	PL10	;call to abstracted procedure
  8603  001D86  0E03               	movlw	3
  8604  001D88  160F               	andwf	??__CANIDToRegs,f,c
  8605  001D8A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8606                           
  8607                           ;ECAN.c: 1122: ptr++;
  8608                           
  8609                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
  8610  001D8E  D814               	call	PL4	;call to abstracted procedure
  8611  001D90  2AD9               	incf	fsr2l,f,c
  8612  001D92  6ADA               	clrf	fsr2h,c
  8613  001D94  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  8614  001D98  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  8615  001D9C  CFDF FFE7          	movff	indf2,indf1
  8616                           
  8617                           ;ECAN.c: 1124: ptr++;
  8618  001DA0  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  8619  001DA2  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  8620                           
  8621                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
  8622  001DA4  5011               	movf	__CANIDToRegs@Value,w,c
  8623  001DA6  6ED9               	movwf	fsr2l,c
  8624  001DA8  6ADA               	clrf	fsr2h,c
  8625  001DAA  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
  8626  001DAE  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
  8627  001DB2  CFDF FFE7          	movff	indf2,indf1
  8628  001DB6  0012               	return	
  8629  001DB8                     __end_of__CANIDToRegs:
  8630                           	opt stack 0
  8631  001DB8                     PL4:
  8632                           	opt stack 22
  8633  001DB8  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  8634  001DBC  500F               	movf	??__CANIDToRegs,w,c
  8635  001DBE  12DF               	iorwf	indf2,f,c
  8636  001DC0  4A08               	infsnz	__CANIDToRegs@ptr,f,c
  8637  001DC2  2A09               	incf	__CANIDToRegs@ptr+1,f,c
  8638  001DC4  5011               	movf	__CANIDToRegs@Value,w,c
  8639  001DC6  6ED9               	movwf	fsr2l,c
  8640  001DC8  6ADA               	clrf	fsr2h,c
  8641  001DCA  0012               	return	
  8642  001DCC                     __end_ofPL4:
  8643                           	opt stack 0
  8644  001DCC                     PL10:
  8645                           	opt stack 22
  8646  001DCC  6ED9               	movwf	fsr2l,c
  8647  001DCE  6ADA               	clrf	fsr2h,c
  8648  001DD0  0E02               	movlw	2
  8649  001DD2  26D9               	addwf	fsr2l,f,c
  8650  001DD4  6ADA               	clrf	fsr2h,c
  8651  001DD6  50DF               	movf	indf2,w,c
  8652  001DD8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  8653  001DDA  0012               	return	
  8654  001DDC                     __end_ofPL10:
  8655                           	opt stack 0
  8656  001DDC                     PL14:
  8657                           	opt stack 22
  8658  001DDC  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
  8659  001DE0  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
  8660  001DE4  6EDF               	movwf	indf2,c
  8661  001DE6  5011               	movf	__CANIDToRegs@Value,w,c
  8662  001DE8  6ED9               	movwf	fsr2l,c
  8663  001DEA  6ADA               	clrf	fsr2h,c
  8664  001DEC  0012               	return	
  8665  001DEE                     __end_ofPL14:
  8666                           	opt stack 0
  8667  001DEE                     PL24:
  8668                           	opt stack 22
  8669  001DEE  26D9               	addwf	fsr2l,f,c
  8670  001DF0  6ADA               	clrf	fsr2h,c
  8671  001DF2  50DF               	movf	indf2,w,c
  8672  001DF4  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  8673  001DF6  90D8               	bcf	status,0,c
  8674  001DF8  360F               	rlcf	??__CANIDToRegs,f,c
  8675  001DFA  90D8               	bcf	status,0,c
  8676  001DFC  360F               	rlcf	??__CANIDToRegs,f,c
  8677  001DFE  90D8               	bcf	status,0,c
  8678  001E00  0012               	return	
  8679  001E02                     __end_ofPL24:
  8680                           	opt stack 0
  8681  001E02                     PL36:
  8682                           	opt stack 22
  8683  001E02  50DF               	movf	indf2,w,c
  8684  001E04  6E0F               	movwf	??__CANIDToRegs& (0+255),c
  8685  001E06  0E05               	movlw	5
  8686  001E08  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
  8687  001E0A  0C05               	retlw	5
  8688  001E0C                     __end_ofPL36:
  8689                           	opt stack 0
  8690                           tblptru	equ	0xFF8
  8691                           tblptrh	equ	0xFF7
  8692                           tblptrl	equ	0xFF6
  8693                           tablat	equ	0xFF5
  8694                           prodh	equ	0xFF4
  8695                           prodl	equ	0xFF3
  8696                           intcon	equ	0xFF2
  8697                           postinc0	equ	0xFEE
  8698                           wreg	equ	0xFE8
  8699                           indf1	equ	0xFE7
  8700                           fsr1h	equ	0xFE2
  8701                           fsr1l	equ	0xFE1
  8702                           indf2	equ	0xFDF
  8703                           postinc2	equ	0xFDE
  8704                           postdec2	equ	0xFDD
  8705                           plusw2	equ	0xFDB
  8706                           fsr2h	equ	0xFDA
  8707                           fsr2l	equ	0xFD9
  8708                           status	equ	0xFD8
  8709                           
  8710 ;; *************** function _vscp_getEvent *****************
  8711 ;; Defined at:
  8712 ;;		line 1295 in file "../../vscp_firmware/common/vscp_firmware.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;		None
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  rv              1   43[COMRAM] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      unsigned char 
  8719 ;; Registers used:
  8720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : F/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8730 ;;Total ram usage:        1 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    6
  8733 ;; This function calls:
  8734 ;;		_getVSCPFrame
  8735 ;; This function is called by:
  8736 ;;		_main
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           	psect	text53
  8741  0026BC                     __ptext53:
  8742                           	opt stack 0
  8743  0026BC                     _vscp_getEvent:
  8744                           	opt stack 24
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;vscp_firmware.c: 1296: int8_t rv;
  8748                           ;vscp_firmware.c: 1302: if (vscp_imsg.flags & 0x80) return !0;
  8749                           
  8750                           ;incstack = 0
  8751                           ;incstack = 0
  8752  0026BC  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  8753  0026BE  0012               	return	
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;vscp_firmware.c: 1305: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
  8757                           ;vscp_firmware.c: 1306: &vscp_imsg.vscp_type,
  8758                           ;vscp_firmware.c: 1307: &vscp_imsg.oaddr,
  8759                           ;vscp_firmware.c: 1308: &vscp_imsg.priority,
  8760                           ;vscp_firmware.c: 1309: &vscp_imsg.flags,
  8761                           ;vscp_firmware.c: 1310: vscp_imsg.data))) {
  8762  0026C0  0E79               	movlw	low (_vscp_imsg+4)
  8763  0026C2  6E1E               	movwf	?_getVSCPFrame,c
  8764  0026C4  0E7A               	movlw	low (_vscp_imsg+5)
  8765  0026C6  6E1F               	movwf	?_getVSCPFrame+1,c
  8766  0026C8  0E76               	movlw	low (_vscp_imsg+1)
  8767  0026CA  6E20               	movwf	?_getVSCPFrame+2,c
  8768  0026CC  0E75               	movlw	low _vscp_imsg
  8769  0026CE  6E21               	movwf	?_getVSCPFrame+3,c
  8770  0026D0  0E7B               	movlw	low (_vscp_imsg+6)
  8771  0026D2  6E22               	movwf	?_getVSCPFrame+4,c
  8772  0026D4  0E77               	movlw	(_vscp_imsg+2)& (0+255)
  8773  0026D6  EC6A  F012         	call	_getVSCPFrame
  8774  0026DA  6E2C               	movwf	vscp_getEvent@rv,c
  8775  0026DC  502C               	movf	vscp_getEvent@rv& (0+255),w,c
  8776  0026DE  B4D8               	btfsc	status,2,c
  8777  0026E0  0012               	return	
  8778                           
  8779                           ;vscp_firmware.c: 1312: vscp_imsg.flags |= 0x80;
  8780  0026E2  0100               	movlb	0	; () banked
  8781  0026E4  8F75               	bsf	_vscp_imsg& (0+255),7,b
  8782  0026E6  0012               	return	
  8783  0026E8                     __end_of_vscp_getEvent:
  8784                           	opt stack 0
  8785                           tblptru	equ	0xFF8
  8786                           tblptrh	equ	0xFF7
  8787                           tblptrl	equ	0xFF6
  8788                           tablat	equ	0xFF5
  8789                           prodh	equ	0xFF4
  8790                           prodl	equ	0xFF3
  8791                           intcon	equ	0xFF2
  8792                           postinc0	equ	0xFEE
  8793                           wreg	equ	0xFE8
  8794                           indf1	equ	0xFE7
  8795                           fsr1h	equ	0xFE2
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           plusw2	equ	0xFDB
  8801                           fsr2h	equ	0xFDA
  8802                           fsr2l	equ	0xFD9
  8803                           status	equ	0xFD8
  8804                           
  8805 ;; *************** function _getVSCPFrame *****************
  8806 ;; Defined at:
  8807 ;;		line 1199 in file "../main.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;  pvscpclass      1    wreg     PTR unsigned short 
  8810 ;;		 -> vscp_imsg(14), 
  8811 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
  8812 ;;		 -> vscp_imsg(14), 
  8813 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
  8814 ;;		 -> vscp_imsg(14), 
  8815 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
  8816 ;;		 -> vscp_imsg(14), 
  8817 ;;  pSize           1   32[COMRAM] PTR unsigned char 
  8818 ;;		 -> vscp_imsg(14), 
  8819 ;;  pData           1   33[COMRAM] PTR unsigned char 
  8820 ;;		 -> vscp_imsg(14), 
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
  8823 ;;		 -> vscp_imsg(14), 
  8824 ;;  id              4   39[COMRAM] unsigned long 
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  1    wreg      unsigned char 
  8827 ;; Registers used:
  8828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8829 ;; Tracked objects:
  8830 ;;		On entry : F/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8834 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8835 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8836 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8837 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8838 ;;Total ram usage:       14 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    5
  8841 ;; This function calls:
  8842 ;;		_getCANFrame
  8843 ;; This function is called by:
  8844 ;;		_vscp_getEvent
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text54
  8849  0024D4                     __ptext54:
  8850                           	opt stack 0
  8851  0024D4                     _getVSCPFrame:
  8852                           	opt stack 24
  8853                           
  8854                           ;incstack = 0
  8855                           ;incstack = 0
  8856                           ;getVSCPFrame@pvscpclass stored from wreg
  8857  0024D4  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;main.c: 1200: uint32_t id;
  8861                           ;main.c: 1202: if ( !getCANFrame(&id, pSize, pData) ) {
  8862  0024D8  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
  8863  0024DC  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
  8864  0024E0  0E28               	movlw	getVSCPFrame@id& (0+255)
  8865  0024E2  ECC3  F013         	call	_getCANFrame
  8866  0024E6  0900               	iorlw	0
  8867  0024E8  E101               	bnz	l4567
  8868                           
  8869                           ;main.c: 1203: return 0;
  8870  0024EA  0C00               	retlw	0
  8871  0024EC                     l4567:
  8872                           
  8873                           ;main.c: 1204: }
  8874                           ;main.c: 1206: *pNodeId = id & 0x0ff;
  8875  0024EC  501F               	movf	getVSCPFrame@pNodeId,w,c
  8876  0024EE  6ED9               	movwf	fsr2l,c
  8877  0024F0  6ADA               	clrf	fsr2h,c
  8878  0024F2  C028  FFDF         	movff	getVSCPFrame@id,indf2
  8879                           
  8880                           ;main.c: 1207: *pvscptype = (id >> 8) & 0xff;
  8881  0024F6  501E               	movf	getVSCPFrame@pvscptype,w,c
  8882  0024F8  6ED9               	movwf	fsr2l,c
  8883  0024FA  6ADA               	clrf	fsr2h,c
  8884  0024FC  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
  8885                           
  8886                           ;main.c: 1208: *pvscpclass = (id >> 16) & 0x1ff;
  8887  002500  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
  8888  002502  6E23               	movwf	??_getVSCPFrame& (0+255),c
  8889  002504  0E01               	movlw	1
  8890  002506  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
  8891  002508  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
  8892  00250A  5027               	movf	getVSCPFrame@pvscpclass,w,c
  8893  00250C  6ED9               	movwf	fsr2l,c
  8894  00250E  6ADA               	clrf	fsr2h,c
  8895  002510  C023  FFDE         	movff	??_getVSCPFrame,postinc2
  8896  002514  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
  8897                           
  8898                           ;main.c: 1209: *pPriority = (uint16_t) (0x07 & (id >> 26));
  8899  002518  5020               	movf	getVSCPFrame@pPriority,w,c
  8900  00251A  6ED9               	movwf	fsr2l,c
  8901  00251C  6ADA               	clrf	fsr2h,c
  8902  00251E  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
  8903  002522  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
  8904  002526  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
  8905  00252A  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
  8906  00252E  0E1B               	movlw	27
  8907  002530  D005               	goto	u3860
  8908  002532                     u3865:
  8909  002532  90D8               	bcf	status,0,c
  8910  002534  3226               	rrcf	??_getVSCPFrame+3,f,c
  8911  002536  3225               	rrcf	??_getVSCPFrame+2,f,c
  8912  002538  3224               	rrcf	??_getVSCPFrame+1,f,c
  8913  00253A  3223               	rrcf	??_getVSCPFrame,f,c
  8914  00253C                     u3860:
  8915  00253C  2EE8               	decfsz	wreg,f,c
  8916  00253E  D7F9               	goto	u3865
  8917  002540  5023               	movf	??_getVSCPFrame,w,c
  8918  002542  0B07               	andlw	7
  8919  002544  6EDF               	movwf	indf2,c
  8920                           
  8921                           ;main.c: 1211: return 1;
  8922  002546  0C01               	retlw	1
  8923  002548                     __end_of_getVSCPFrame:
  8924                           	opt stack 0
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           intcon	equ	0xFF2
  8932                           postinc0	equ	0xFEE
  8933                           wreg	equ	0xFE8
  8934                           indf1	equ	0xFE7
  8935                           fsr1h	equ	0xFE2
  8936                           fsr1l	equ	0xFE1
  8937                           indf2	equ	0xFDF
  8938                           postinc2	equ	0xFDE
  8939                           postdec2	equ	0xFDD
  8940                           plusw2	equ	0xFDB
  8941                           fsr2h	equ	0xFDA
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945 ;; *************** function _getCANFrame *****************
  8946 ;; Defined at:
  8947 ;;		line 1241 in file "../main.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;  pid             1    wreg     PTR unsigned long 
  8950 ;;		 -> getVSCPFrame@id(4), 
  8951 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
  8952 ;;		 -> vscp_imsg(14), 
  8953 ;;  pdata           1   26[COMRAM] PTR unsigned char 
  8954 ;;		 -> vscp_imsg(14), 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;  pid             1   27[COMRAM] PTR unsigned long 
  8957 ;;		 -> getVSCPFrame@id(4), 
  8958 ;;  flags           1   28[COMRAM] enum E19001
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  1    wreg      unsigned char 
  8961 ;; Registers used:
  8962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8963 ;; Tracked objects:
  8964 ;;		On entry : F/0
  8965 ;;		On exit  : 0/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8971 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8972 ;;Total ram usage:        4 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    4
  8975 ;; This function calls:
  8976 ;;		_ECANReceiveMessage
  8977 ;; This function is called by:
  8978 ;;		_getVSCPFrame
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           	psect	text55
  8983  002786                     __ptext55:
  8984                           	opt stack 0
  8985  002786                     _getCANFrame:
  8986                           	opt stack 24
  8987                           
  8988                           ;incstack = 0
  8989                           ;incstack = 0
  8990                           ;getCANFrame@pid stored from wreg
  8991  002786  CFE8 F01C          	movff	wreg,getCANFrame@pid
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;main.c: 1242: ECAN_RX_MSG_FLAGS flags;
  8995                           ;main.c: 1246: if (vscp_imsg.flags & 0x80) return 0;
  8996  00278A  BF75               	btfsc	_vscp_imsg& (0+255),7,b
  8997  00278C                     l4579:
  8998  00278C  0C00               	retlw	0
  8999                           
  9000                           ; BSR set to: 0
  9001                           ;main.c: 1248: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
  9002  00278E  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
  9003  002792  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
  9004  002796  0E1D               	movlw	low getCANFrame@flags
  9005  002798  6E11               	movwf	?_ECANReceiveMessage+2,c
  9006  00279A  501C               	movf	getCANFrame@pid,w,c
  9007  00279C  EC89  F00A         	call	_ECANReceiveMessage
  9008  0027A0  0900               	iorlw	0
  9009  0027A2  E0F4               	bz	l4579
  9010                           
  9011                           ;main.c: 1251: if (flags & ECAN_RX_RTR_FRAME) return 0;
  9012  0027A4  AC1D               	btfss	getCANFrame@flags,6,c
  9013                           
  9014                           ;main.c: 1254: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
  9015  0027A6  AA1D               	btfss	getCANFrame@flags,5,c
  9016  0027A8  0C00               	retlw	0
  9017                           
  9018                           ;main.c: 1256: return 1;
  9019  0027AA  0C01               	retlw	1
  9020  0027AC                     __end_of_getCANFrame:
  9021                           	opt stack 0
  9022                           tblptru	equ	0xFF8
  9023                           tblptrh	equ	0xFF7
  9024                           tblptrl	equ	0xFF6
  9025                           tablat	equ	0xFF5
  9026                           prodh	equ	0xFF4
  9027                           prodl	equ	0xFF3
  9028                           intcon	equ	0xFF2
  9029                           postinc0	equ	0xFEE
  9030                           wreg	equ	0xFE8
  9031                           indf1	equ	0xFE7
  9032                           fsr1h	equ	0xFE2
  9033                           fsr1l	equ	0xFE1
  9034                           indf2	equ	0xFDF
  9035                           postinc2	equ	0xFDE
  9036                           postdec2	equ	0xFDD
  9037                           plusw2	equ	0xFDB
  9038                           fsr2h	equ	0xFDA
  9039                           fsr2l	equ	0xFD9
  9040                           status	equ	0xFD8
  9041                           
  9042 ;; *************** function _ECANReceiveMessage *****************
  9043 ;; Defined at:
  9044 ;;		line 803 in file "../ECAN.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;  id              1    wreg     PTR unsigned long 
  9047 ;;		 -> getVSCPFrame@id(4), 
  9048 ;;  data            1   14[COMRAM] PTR unsigned char 
  9049 ;;		 -> vscp_imsg(14), 
  9050 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
  9051 ;;		 -> vscp_imsg(14), 
  9052 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
  9053 ;;		 -> getCANFrame@flags(1), 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  id              1   19[COMRAM] PTR unsigned long 
  9056 ;;		 -> getVSCPFrame@id(4), 
  9057 ;;  ptr             2   23[COMRAM] PTR unsigned char 
  9058 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9059 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9060 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
  9061 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9062 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9063 ;;  temp            1   22[COMRAM] struct .
  9064 ;;  mode            1   21[COMRAM] unsigned char 
  9065 ;;  i               1   20[COMRAM] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  1    wreg      enum E18242
  9068 ;; Registers used:
  9069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9070 ;; Tracked objects:
  9071 ;;		On entry : F/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9075 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9076 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9078 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9079 ;;Total ram usage:       11 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    3
  9082 ;; This function calls:
  9083 ;;		__ECANPointBuffer
  9084 ;;		__RegsToCANID
  9085 ;; This function is called by:
  9086 ;;		_getCANFrame
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           	psect	text56
  9091  001512                     __ptext56:
  9092                           	opt stack 0
  9093  001512                     _ECANReceiveMessage:
  9094                           	opt stack 24
  9095                           
  9096                           ;incstack = 0
  9097                           ;incstack = 0
  9098                           ;ECANReceiveMessage@id stored from wreg
  9099  001512  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;ECAN.c: 805: BYTE mode;
  9103                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
  9104                           ;ECAN.c: 809: char i;
  9105                           ;ECAN.c: 810: BYTE_VAL temp;
  9106                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
  9107  001516  6A50               	clrf	__ECANRxFilterHitInfo,c
  9108                           
  9109                           ; BSR set to: 0
  9110                           ;ECAN.c: 815: mode = ECANCON&0xC0;
  9111  001518  5072               	movf	3954,w,c	;volatile
  9112  00151A  0BC0               	andlw	192
  9113  00151C  6E16               	movwf	ECANReceiveMessage@mode,c
  9114                           
  9115                           ; BSR set to: 0
  9116                           ;ECAN.c: 816: if ( mode == 0x00 )
  9117  00151E  6616               	tstfsz	ECANReceiveMessage@mode,c
  9118  001520  D030               	goto	l4715
  9119                           
  9120                           ; BSR set to: 0
  9121                           ;ECAN.c: 822: {
  9122                           ;ECAN.c: 824: if ( RXB0FUL )
  9123  001522  AE60               	btfss	3936,7,c	;volatile
  9124  001524  D012               	goto	l579
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;ECAN.c: 825: {
  9128                           ;ECAN.c: 827: RXB0IF = 0;
  9129  001526  9077               	bcf	3959,0,c	;volatile
  9130                           
  9131                           ;ECAN.c: 830: if ( RXB0OVFL )
  9132  001528  AE71               	btfss	3953,7,c	;volatile
  9133  00152A  D006               	goto	l4691
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;ECAN.c: 831: {
  9137                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
  9138  00152C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9139  00152E  6ED9               	movwf	fsr2l,c
  9140  001530  6ADA               	clrf	fsr2h,c
  9141  001532  0E00               	movlw	0
  9142  001534  86DB               	bsf	plusw2,3,c
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;ECAN.c: 833: RXB0OVFL = 0;
  9146  001536  9E71               	bcf	3953,7,c	;volatile
  9147  001538                     l4691:
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;ECAN.c: 834: }
  9151                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
  9152  001538  A060               	btfss	3936,0,c	;volatile
  9153  00153A  D002               	bra	u4035
  9154  00153C  8050               	bsf	__ECANRxFilterHitInfo,0,c
  9155  00153E  D001               	bra	u4037
  9156  001540                     u4035:
  9157  001540  9050               	bcf	__ECANRxFilterHitInfo,0,c
  9158  001542                     u4037:
  9159                           
  9160                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
  9161  001542  0E0F               	movlw	15	;volatile
  9162  001544  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9163  001546  0E60               	movlw	96	;volatile
  9164  001548  D01A               	goto	L25
  9165  00154A                     l579:
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
  9169  00154A  010F               	movlb	15	; () banked
  9170  00154C  AF30               	btfss	48,7,b	;volatile
  9171  00154E  0C00               	retlw	0
  9172                           
  9173                           ; BSR set to: 15
  9174                           ;ECAN.c: 842: {
  9175                           ;ECAN.c: 844: RXB1IF = 0;
  9176  001550  9277               	bcf	3959,1,c	;volatile
  9177                           
  9178                           ;ECAN.c: 847: if ( RXB1OVFL )
  9179  001552  AC71               	btfss	3953,6,c	;volatile
  9180  001554  D006               	goto	l4701
  9181                           
  9182                           ; BSR set to: 15
  9183                           ;ECAN.c: 848: {
  9184                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
  9185  001556  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9186  001558  6ED9               	movwf	fsr2l,c
  9187  00155A  6ADA               	clrf	fsr2h,c
  9188  00155C  0E00               	movlw	0
  9189  00155E  86DB               	bsf	plusw2,3,c
  9190                           
  9191                           ; BSR set to: 15
  9192                           ;ECAN.c: 850: RXB1OVFL = 0;
  9193  001560  9C71               	bcf	3953,6,c	;volatile
  9194  001562                     l4701:
  9195                           
  9196                           ; BSR set to: 15
  9197                           ;ECAN.c: 851: }
  9198                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
  9199  001562  5130               	movf	48,w,b	;volatile
  9200  001564  0B07               	andlw	7
  9201  001566  6E50               	movwf	__ECANRxFilterHitInfo,c
  9202                           
  9203                           ; BSR set to: 15
  9204                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
  9205  001568  0E02               	movlw	2
  9206  00156A  6050               	cpfslt	__ECANRxFilterHitInfo,c
  9207  00156C  D005               	goto	l4707
  9208                           
  9209                           ; BSR set to: 15
  9210                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
  9211  00156E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9212  001570  6ED9               	movwf	fsr2l,c
  9213  001572  6ADA               	clrf	fsr2h,c
  9214  001574  0E00               	movlw	0
  9215  001576  8EDB               	bsf	plusw2,7,c
  9216  001578                     l4707:
  9217                           
  9218                           ; BSR set to: 15
  9219                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
  9220  001578  0E0F               	movlw	15	;volatile
  9221  00157A  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9222  00157C  0E30               	movlw	48	;volatile
  9223  00157E                     L25:
  9224  00157E  6E18               	movwf	ECANReceiveMessage@ptr,c
  9225                           
  9226                           ;ECAN.c: 860: }
  9227  001580  D05B               	goto	l4769
  9228  001582                     l4715:
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;ECAN.c: 869: else if ( mode == 0x40 )
  9232  001582  5016               	movf	ECANReceiveMessage@mode,w,c
  9233  001584  0A40               	xorlw	64
  9234  001586  E13E               	bnz	l589
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;ECAN.c: 875: {
  9238                           ;ECAN.c: 876: if ( RXB0FUL )
  9239  001588  AE60               	btfss	3936,7,c	;volatile
  9240  00158A  D004               	goto	l590
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
  9244  00158C  0E0F               	movlw	15	;volatile
  9245  00158E  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9246  001590  0E60               	movlw	96	;volatile
  9247  001592  D036               	goto	L32
  9248  001594                     l590:
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
  9252  001594  010F               	movlb	15	; () banked
  9253  001596  AF30               	btfss	48,7,b	;volatile
  9254  001598  D004               	goto	l592
  9255                           
  9256                           ; BSR set to: 15
  9257                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
  9258  00159A  0E0F               	movlw	15	;volatile
  9259  00159C  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9260  00159E  0E30               	movlw	48	;volatile
  9261  0015A0  D02F               	goto	L32
  9262  0015A2                     l592:
  9263                           
  9264                           ; BSR set to: 15
  9265                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
  9266  0015A2  010E               	movlb	14
  9267  0015A4  A57D               	btfss	125,2,b	;volatile
  9268  0015A6  AF80               	btfss	128,7,b	;volatile
  9269  0015A8  D004               	goto	l594
  9270                           
  9271                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
  9272  0015AA  0E0E               	movlw	14	;volatile
  9273  0015AC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9274  0015AE  0E80               	movlw	128	;volatile
  9275  0015B0  D027               	goto	L32
  9276  0015B2                     l594:
  9277                           
  9278                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
  9279  0015B2  010E               	movlb	14
  9280  0015B4  A77D               	btfss	125,3,b	;volatile
  9281  0015B6  AF90               	btfss	144,7,b	;volatile
  9282  0015B8  D004               	goto	l596
  9283                           
  9284                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
  9285  0015BA  0E0E               	movlw	14	;volatile
  9286  0015BC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9287  0015BE  0E90               	movlw	144	;volatile
  9288  0015C0  D01F               	goto	L32
  9289  0015C2                     l596:
  9290                           
  9291                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
  9292  0015C2  010E               	movlb	14
  9293  0015C4  A97D               	btfss	125,4,b	;volatile
  9294  0015C6  AFA0               	btfss	160,7,b	;volatile
  9295  0015C8  D004               	goto	l598
  9296                           
  9297                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
  9298  0015CA  0E0E               	movlw	14	;volatile
  9299  0015CC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9300  0015CE  0EA0               	movlw	160	;volatile
  9301  0015D0  D017               	goto	L32
  9302  0015D2                     l598:
  9303                           
  9304                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
  9305  0015D2  010E               	movlb	14
  9306  0015D4  AB7D               	btfss	125,5,b	;volatile
  9307  0015D6  AFB0               	btfss	176,7,b	;volatile
  9308  0015D8  D004               	goto	l600
  9309                           
  9310                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
  9311  0015DA  0E0E               	movlw	14	;volatile
  9312  0015DC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9313  0015DE  0EB0               	movlw	176	;volatile
  9314  0015E0  D00F               	goto	L32
  9315  0015E2                     l600:
  9316                           
  9317                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
  9318  0015E2  010E               	movlb	14
  9319  0015E4  AD7D               	btfss	125,6,b	;volatile
  9320  0015E6  AFC0               	btfss	192,7,b	;volatile
  9321  0015E8  D004               	goto	l602
  9322                           
  9323                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
  9324  0015EA  0E0E               	movlw	14	;volatile
  9325  0015EC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9326  0015EE  0EC0               	movlw	192	;volatile
  9327  0015F0  D007               	goto	L32
  9328  0015F2                     l602:
  9329                           
  9330                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
  9331  0015F2  010E               	movlb	14
  9332  0015F4  AF7D               	btfss	125,7,b	;volatile
  9333  0015F6  AFD0               	btfss	208,7,b	;volatile
  9334  0015F8  0C00               	retlw	0
  9335                           
  9336                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
  9337  0015FA  0E0E               	movlw	14	;volatile
  9338  0015FC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
  9339  0015FE  0ED0               	movlw	208	;volatile
  9340  001600                     L32:
  9341  001600  6E18               	movwf	ECANReceiveMessage@ptr,c
  9342  001602  D00A               	goto	l4759
  9343  001604                     l589:
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;ECAN.c: 910: else
  9347                           ;ECAN.c: 915: {
  9348                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
  9349  001604  AE71               	btfss	3953,7,c	;volatile
  9350  001606  0C00               	retlw	0
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;ECAN.c: 917: {
  9354                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
  9355  001608  506F               	movf	3951,w,c	;volatile
  9356  00160A  0B07               	andlw	7
  9357  00160C  EC2B  F012         	call	__ECANPointBuffer
  9358  001610  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
  9359  001614  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
  9360  001618                     l4759:
  9361                           
  9362                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
  9363  001618  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
  9364  00161C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
  9365  001620  50DF               	movf	indf2,w,c
  9366  001622  0B1F               	andlw	31
  9367  001624  6E50               	movwf	__ECANRxFilterHitInfo,c
  9368                           
  9369                           ;ECAN.c: 932: RXB1IF = 0;
  9370  001626  9277               	bcf	3959,1,c	;volatile
  9371                           
  9372                           ;ECAN.c: 934: if ( RXB1OVFL )
  9373  001628  AC71               	btfss	3953,6,c	;volatile
  9374  00162A  D006               	goto	l4769
  9375                           
  9376                           ;ECAN.c: 935: {
  9377                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
  9378  00162C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9379  00162E  6ED9               	movwf	fsr2l,c
  9380  001630  6ADA               	clrf	fsr2h,c
  9381  001632  0E00               	movlw	0
  9382  001634  86DB               	bsf	plusw2,3,c
  9383                           
  9384                           ;ECAN.c: 937: RXB1OVFL = 0;
  9385  001636  9C71               	bcf	3953,6,c	;volatile
  9386  001638                     l4769:
  9387                           
  9388                           ;ECAN.c: 942: savedPtr = ptr;
  9389  001638  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
  9390  00163C  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
  9391                           
  9392                           ;ECAN.c: 943: *msgFlags = 0;
  9393  001640  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9394  001642  6ED9               	movwf	fsr2l,c
  9395  001644  6ADA               	clrf	fsr2h,c
  9396  001646  6ADF               	clrf	indf2,c
  9397                           
  9398                           ;ECAN.c: 946: temp.Val = *(ptr+5);
  9399  001648  EE20 F005          	lfsr	2,5
  9400  00164C  D854               	call	PL32	;call to abstracted procedure
  9401                           
  9402                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
  9403  00164E  5010               	movf	ECANReceiveMessage@dataLen,w,c
  9404  001650  6ED9               	movwf	fsr2l,c
  9405  001652  6ADA               	clrf	fsr2h,c
  9406  001654  5017               	movf	ECANReceiveMessage@temp,w,c
  9407  001656  0B0F               	andlw	15
  9408  001658  6EDF               	movwf	indf2,c
  9409                           
  9410                           ;ECAN.c: 950: if ( temp.bits.b6 )
  9411  00165A  AC17               	btfss	ECANReceiveMessage@temp,6,c
  9412  00165C  D005               	goto	l610
  9413                           
  9414                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
  9415  00165E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9416  001660  6ED9               	movwf	fsr2l,c
  9417  001662  6ADA               	clrf	fsr2h,c
  9418  001664  0E00               	movlw	0
  9419  001666  8CDB               	bsf	plusw2,6,c
  9420  001668                     l610:
  9421                           
  9422                           ;ECAN.c: 954: temp.Val = *(ptr+2);
  9423  001668  EE20 F002          	lfsr	2,2
  9424  00166C  D844               	call	PL32	;call to abstracted procedure
  9425                           
  9426                           ;ECAN.c: 955: if ( temp.bits.b3 )
  9427  00166E  A617               	btfss	ECANReceiveMessage@temp,3,c
  9428  001670  D008               	goto	l611
  9429                           
  9430                           ;ECAN.c: 956: {
  9431                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
  9432  001672  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9433  001674  6ED9               	movwf	fsr2l,c
  9434  001676  6ADA               	clrf	fsr2h,c
  9435  001678  0E00               	movlw	0
  9436  00167A  8ADB               	bsf	plusw2,5,c
  9437                           
  9438                           ;ECAN.c: 958: temp.Val = 1;
  9439  00167C  0E01               	movlw	1
  9440  00167E  6E17               	movwf	ECANReceiveMessage@temp,c
  9441                           
  9442                           ;ECAN.c: 959: }
  9443  001680  D001               	goto	l4787
  9444  001682                     l611:
  9445                           
  9446                           ;ECAN.c: 960: else
  9447                           ;ECAN.c: 961: temp.Val = 0;
  9448  001682  6A17               	clrf	ECANReceiveMessage@temp,c
  9449  001684                     l4787:
  9450                           
  9451                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
  9452  001684  2818               	incf	ECANReceiveMessage@ptr,w,c
  9453  001686  6E08               	movwf	?__RegsToCANID,c
  9454  001688  0E00               	movlw	0
  9455  00168A  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
  9456  00168C  6E09               	movwf	?__RegsToCANID+1,c
  9457  00168E  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
  9458  001692  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
  9459  001696  ECED  F00D         	call	__RegsToCANID	;wreg free
  9460                           
  9461                           ;ECAN.c: 966: ptr += 6;
  9462  00169A  0E06               	movlw	6
  9463  00169C  2618               	addwf	ECANReceiveMessage@ptr,f,c
  9464  00169E  0E00               	movlw	0
  9465  0016A0  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
  9466                           
  9467                           ;ECAN.c: 967: temp.Val = *dataLen;
  9468  0016A2  5010               	movf	ECANReceiveMessage@dataLen,w,c
  9469  0016A4  6ED9               	movwf	fsr2l,c
  9470  0016A6  6ADA               	clrf	fsr2h,c
  9471  0016A8  50DF               	movf	indf2,w,c
  9472  0016AA  6E17               	movwf	ECANReceiveMessage@temp,c
  9473                           
  9474                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
  9475  0016AC  6A15               	clrf	ECANReceiveMessage@i,c
  9476  0016AE  D00D               	goto	l4803
  9477  0016B0                     l4795:
  9478                           
  9479                           ;ECAN.c: 969: *data++ = *ptr++;
  9480  0016B0  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
  9481  0016B4  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
  9482  0016B8  500F               	movf	ECANReceiveMessage@data,w,c
  9483  0016BA  6EE1               	movwf	fsr1l,c
  9484  0016BC  6AE2               	clrf	fsr1h,c
  9485  0016BE  CFDF FFE7          	movff	indf2,indf1
  9486  0016C2  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
  9487  0016C4  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
  9488  0016C6  2A0F               	incf	ECANReceiveMessage@data,f,c
  9489  0016C8  2A15               	incf	ECANReceiveMessage@i,f,c
  9490  0016CA                     l4803:
  9491  0016CA  5017               	movf	ECANReceiveMessage@temp,w,c
  9492  0016CC  5C15               	subwf	ECANReceiveMessage@i,w,c
  9493  0016CE  E3F0               	bnc	l4795
  9494                           
  9495                           ;ECAN.c: 972: if ( IRXIF )
  9496  0016D0  AE77               	btfss	3959,7,c	;volatile
  9497  0016D2  D006               	goto	l4809
  9498                           
  9499                           ;ECAN.c: 973: {
  9500                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
  9501  0016D4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
  9502  0016D6  6ED9               	movwf	fsr2l,c
  9503  0016D8  6ADA               	clrf	fsr2h,c
  9504  0016DA  0E00               	movlw	0
  9505  0016DC  88DB               	bsf	plusw2,4,c
  9506                           
  9507                           ;ECAN.c: 975: IRXIF = 0;
  9508  0016DE  9E77               	bcf	3959,7,c	;volatile
  9509  0016E0                     l4809:
  9510                           
  9511                           ;ECAN.c: 976: }
  9512                           ;ECAN.c: 979: *savedPtr &= 0x7f;
  9513  0016E0  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
  9514  0016E4  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
  9515  0016E8  0E7F               	movlw	127
  9516  0016EA  16DF               	andwf	indf2,f,c
  9517                           
  9518                           ;ECAN.c: 983: if ( mode == 0x80 )
  9519  0016EC  5016               	movf	ECANReceiveMessage@mode,w,c
  9520  0016EE  0A80               	xorlw	128
  9521  0016F0  B4D8               	btfsc	status,2,c
  9522                           
  9523                           ;ECAN.c: 984: FIFOEMPTY = 0;
  9524  0016F2  9E71               	bcf	3953,7,c	;volatile
  9525                           
  9526                           ;ECAN.c: 990: return TRUE;
  9527  0016F4  0C01               	retlw	1
  9528  0016F6                     __end_of_ECANReceiveMessage:
  9529                           	opt stack 0
  9530  0016F6                     PL32:
  9531                           	opt stack 24
  9532  0016F6  5018               	movf	ECANReceiveMessage@ptr,w,c
  9533  0016F8  26D9               	addwf	fsr2l,f,c
  9534  0016FA  5019               	movf	ECANReceiveMessage@ptr+1,w,c
  9535  0016FC  22DA               	addwfc	fsr2h,f,c
  9536  0016FE  50DF               	movf	indf2,w,c
  9537  001700  6E17               	movwf	ECANReceiveMessage@temp,c
  9538  001702  0012               	return	
  9539  001704                     __end_ofPL32:
  9540                           	opt stack 0
  9541                           tblptru	equ	0xFF8
  9542                           tblptrh	equ	0xFF7
  9543                           tblptrl	equ	0xFF6
  9544                           tablat	equ	0xFF5
  9545                           prodh	equ	0xFF4
  9546                           prodl	equ	0xFF3
  9547                           intcon	equ	0xFF2
  9548                           postinc0	equ	0xFEE
  9549                           wreg	equ	0xFE8
  9550                           indf1	equ	0xFE7
  9551                           fsr1h	equ	0xFE2
  9552                           fsr1l	equ	0xFE1
  9553                           indf2	equ	0xFDF
  9554                           postinc2	equ	0xFDE
  9555                           postdec2	equ	0xFDD
  9556                           plusw2	equ	0xFDB
  9557                           fsr2h	equ	0xFDA
  9558                           fsr2l	equ	0xFD9
  9559                           status	equ	0xFD8
  9560                           
  9561 ;; *************** function __RegsToCANID *****************
  9562 ;; Defined at:
  9563 ;;		line 1156 in file "../ECAN.c"
  9564 ;; Parameters:    Size  Location     Type
  9565 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  9566 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9567 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9568 ;;  val             1    9[COMRAM] PTR unsigned long 
  9569 ;;		 -> getVSCPFrame@id(4), 
  9570 ;;  type            1   10[COMRAM] unsigned char 
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
  9573 ;;		 -> getVSCPFrame@id(4), 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;		None               void
  9576 ;; Registers used:
  9577 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9583 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9584 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9585 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9586 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9587 ;;Total ram usage:        7 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    2
  9590 ;; This function calls:
  9591 ;;		Nothing
  9592 ;; This function is called by:
  9593 ;;		_ECANReceiveMessage
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text57
  9598  001BDA                     __ptext57:
  9599                           	opt stack 0
  9600  001BDA                     __RegsToCANID:
  9601                           	opt stack 24
  9602                           
  9603                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
  9604                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
  9605                           
  9606                           ;incstack = 0
  9607                           ;incstack = 0
  9608  001BDA  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
  9609                           
  9610                           ;ECAN.c: 1161: if ( type == 0 )
  9611  001BDE  660B               	tstfsz	__RegsToCANID@type,c
  9612  001BE0  D02B               	goto	l4883
  9613                           
  9614                           ;ECAN.c: 1162: {
  9615                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
  9616  001BE2  500E               	movf	__RegsToCANID@Value,w,c
  9617  001BE4  6ED9               	movwf	fsr2l,c
  9618  001BE6  D86C               	call	PL20	;call to abstracted procedure
  9619  001BE8  360C               	rlcf	??__RegsToCANID,f,c
  9620  001BEA  90D8               	bcf	status,0,c
  9621  001BEC  360C               	rlcf	??__RegsToCANID,f,c
  9622  001BEE  90D8               	bcf	status,0,c
  9623  001BF0  340C               	rlcf	??__RegsToCANID,w,c
  9624  001BF2  6EDF               	movwf	indf2,c
  9625                           
  9626                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
  9627  001BF4  500E               	movf	__RegsToCANID@Value,w,c
  9628  001BF6  6ED9               	movwf	fsr2l,c
  9629  001BF8  6ADA               	clrf	fsr2h,c
  9630  001BFA  2AD9               	incf	fsr2l,f,c
  9631  001BFC  6ADA               	clrf	fsr2h,c
  9632  001BFE  D873               	call	PL28	;call to abstracted procedure
  9633  001C00                     u4355:
  9634  001C00  90D8               	bcf	status,0,c
  9635  001C02  320C               	rrcf	??__RegsToCANID,f,c
  9636  001C04  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  9637  001C06  D7FC               	goto	u4355
  9638  001C08  500C               	movf	??__RegsToCANID,w,c
  9639                           
  9640                           ;ECAN.c: 1166: ptr++;
  9641                           
  9642                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
  9643  001C0A  D863               	call	PL22	;call to abstracted procedure
  9644  001C0C  0E05               	movlw	5
  9645  001C0E  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
  9646  001C10                     u4365:
  9647  001C10  90D8               	bcf	status,0,c
  9648  001C12  320C               	rrcf	??__RegsToCANID,f,c
  9649  001C14  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  9650  001C16  D7FC               	goto	u4365
  9651  001C18  500E               	movf	__RegsToCANID@Value,w,c
  9652  001C1A  6ED9               	movwf	fsr2l,c
  9653  001C1C  6ADA               	clrf	fsr2h,c
  9654  001C1E  500C               	movf	??__RegsToCANID,w,c
  9655  001C20  12DF               	iorwf	indf2,f,c
  9656                           
  9657                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
  9658  001C22  D83D               	call	PL8	;call to abstracted procedure
  9659  001C24  6ADF               	clrf	indf2,c
  9660                           
  9661                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
  9662  001C26  500E               	movf	__RegsToCANID@Value,w,c
  9663  001C28  6ED9               	movwf	fsr2l,c
  9664  001C2A  6ADA               	clrf	fsr2h,c
  9665  001C2C  0E03               	movlw	3
  9666  001C2E  26D9               	addwf	fsr2l,f,c
  9667  001C30  6ADA               	clrf	fsr2h,c
  9668  001C32  0E00               	movlw	0
  9669  001C34  6EDF               	movwf	indf2,c
  9670                           
  9671                           ;ECAN.c: 1170: }
  9672  001C36  0C00               	retlw	0
  9673  001C38                     l4883:
  9674                           
  9675                           ;ECAN.c: 1171: else
  9676                           ;ECAN.c: 1172: {
  9677                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
  9678  001C38  D832               	call	PL8	;call to abstracted procedure
  9679  001C3A  D855               	call	PL28	;call to abstracted procedure
  9680  001C3C                     u4375:
  9681  001C3C  90D8               	bcf	status,0,c
  9682  001C3E  360C               	rlcf	??__RegsToCANID,f,c
  9683  001C40  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
  9684  001C42  D7FC               	goto	u4375
  9685  001C44  500C               	movf	??__RegsToCANID,w,c
  9686  001C46  6EDF               	movwf	indf2,c
  9687                           
  9688                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
  9689  001C48  500E               	movf	__RegsToCANID@Value,w,c
  9690  001C4A  6ED9               	movwf	fsr2l,c
  9691  001C4C  6ADA               	clrf	fsr2h,c
  9692  001C4E  0E03               	movlw	3
  9693  001C50  26D9               	addwf	fsr2l,f,c
  9694  001C52  D836               	call	PL20	;call to abstracted procedure
  9695  001C54  320C               	rrcf	??__RegsToCANID,f,c
  9696  001C56  90D8               	bcf	status,0,c
  9697  001C58  320C               	rrcf	??__RegsToCANID,f,c
  9698  001C5A  90D8               	bcf	status,0,c
  9699  001C5C  300C               	rrcf	??__RegsToCANID,w,c
  9700                           
  9701                           ;ECAN.c: 1176: ptr++;
  9702                           
  9703                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
  9704  001C5E  D839               	call	PL22	;call to abstracted procedure
  9705  001C60  0E03               	movlw	3
  9706  001C62  160C               	andwf	??__RegsToCANID,f,c
  9707  001C64  D81C               	call	PL8	;call to abstracted procedure
  9708  001C66  500C               	movf	??__RegsToCANID,w,c
  9709  001C68  12DF               	iorwf	indf2,f,c
  9710                           
  9711                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
  9712  001C6A  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  9713  001C6E  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  9714  001C72  50DF               	movf	indf2,w,c
  9715  001C74  6E0C               	movwf	??__RegsToCANID& (0+255),c
  9716  001C76  90D8               	bcf	status,0,c
  9717  001C78  320C               	rrcf	??__RegsToCANID,f,c
  9718  001C7A  90D8               	bcf	status,0,c
  9719  001C7C  320C               	rrcf	??__RegsToCANID,f,c
  9720  001C7E  90D8               	bcf	status,0,c
  9721  001C80  320C               	rrcf	??__RegsToCANID,f,c
  9722  001C82  0E1C               	movlw	28
  9723  001C84  160C               	andwf	??__RegsToCANID,f,c
  9724  001C86  D80B               	call	PL8	;call to abstracted procedure
  9725  001C88  500C               	movf	??__RegsToCANID,w,c
  9726  001C8A  12DF               	iorwf	indf2,f,c
  9727                           
  9728                           ;ECAN.c: 1180: ptr++;
  9729                           
  9730                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
  9731  001C8C  D80F               	call	PL16	;call to abstracted procedure
  9732  001C8E  2AE1               	incf	fsr1l,f,c
  9733  001C90  6AE2               	clrf	fsr1h,c
  9734  001C92  CFDF FFE7          	movff	indf2,indf1
  9735                           
  9736                           ;ECAN.c: 1182: ptr++;
  9737                           
  9738                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
  9739  001C96  D80A               	call	PL16	;call to abstracted procedure
  9740  001C98  CFDF FFE7          	movff	indf2,indf1
  9741  001C9C  0012               	return	
  9742  001C9E                     __end_of__RegsToCANID:
  9743                           	opt stack 0
  9744  001C9E                     PL8:
  9745                           	opt stack 24
  9746  001C9E  500E               	movf	__RegsToCANID@Value,w,c
  9747  001CA0  6ED9               	movwf	fsr2l,c
  9748  001CA2  6ADA               	clrf	fsr2h,c
  9749  001CA4  0E02               	movlw	2
  9750  001CA6  26D9               	addwf	fsr2l,f,c
  9751  001CA8  6ADA               	clrf	fsr2h,c
  9752  001CAA  0012               	return	
  9753  001CAC                     __end_ofPL8:
  9754                           	opt stack 0
  9755  001CAC                     PL16:
  9756                           	opt stack 24
  9757  001CAC  4A08               	infsnz	__RegsToCANID@ptr,f,c
  9758  001CAE  2A09               	incf	__RegsToCANID@ptr+1,f,c
  9759  001CB0  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  9760  001CB4  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  9761  001CB8  500E               	movf	__RegsToCANID@Value,w,c
  9762  001CBA  6EE1               	movwf	fsr1l,c
  9763  001CBC  6AE2               	clrf	fsr1h,c
  9764  001CBE  0012               	return	
  9765  001CC0                     __end_ofPL16:
  9766                           	opt stack 0
  9767  001CC0                     PL20:
  9768                           	opt stack 24
  9769  001CC0  6ADA               	clrf	fsr2h,c
  9770  001CC2  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  9771  001CC6  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  9772  001CCA  50E7               	movf	indf1,w,c
  9773  001CCC  6E0C               	movwf	??__RegsToCANID& (0+255),c
  9774  001CCE  90D8               	bcf	status,0,c
  9775  001CD0  0012               	return	
  9776  001CD2                     __end_ofPL20:
  9777                           	opt stack 0
  9778  001CD2                     PL22:
  9779                           	opt stack 24
  9780  001CD2  6EDF               	movwf	indf2,c
  9781  001CD4  4A08               	infsnz	__RegsToCANID@ptr,f,c
  9782  001CD6  2A09               	incf	__RegsToCANID@ptr+1,f,c
  9783  001CD8  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
  9784  001CDC  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
  9785  001CE0  50DF               	movf	indf2,w,c
  9786  001CE2  6E0C               	movwf	??__RegsToCANID& (0+255),c
  9787  001CE4  0012               	return	
  9788  001CE6                     __end_ofPL22:
  9789                           	opt stack 0
  9790  001CE6                     PL28:
  9791                           	opt stack 24
  9792  001CE6  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
  9793  001CEA  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
  9794  001CEE  50E7               	movf	indf1,w,c
  9795  001CF0  6E0C               	movwf	??__RegsToCANID& (0+255),c
  9796  001CF2  0E05               	movlw	5
  9797  001CF4  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
  9798  001CF6  0C05               	retlw	5
  9799  001CF8                     __end_ofPL28:
  9800                           	opt stack 0
  9801                           tblptru	equ	0xFF8
  9802                           tblptrh	equ	0xFF7
  9803                           tblptrl	equ	0xFF6
  9804                           tablat	equ	0xFF5
  9805                           prodh	equ	0xFF4
  9806                           prodl	equ	0xFF3
  9807                           intcon	equ	0xFF2
  9808                           postinc0	equ	0xFEE
  9809                           wreg	equ	0xFE8
  9810                           indf1	equ	0xFE7
  9811                           fsr1h	equ	0xFE2
  9812                           fsr1l	equ	0xFE1
  9813                           indf2	equ	0xFDF
  9814                           postinc2	equ	0xFDE
  9815                           postdec2	equ	0xFDD
  9816                           plusw2	equ	0xFDB
  9817                           fsr2h	equ	0xFDA
  9818                           fsr2l	equ	0xFD9
  9819                           status	equ	0xFD8
  9820                           
  9821 ;; *************** function __ECANPointBuffer *****************
  9822 ;; Defined at:
  9823 ;;		line 1207 in file "../ECAN.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  b               1    wreg     unsigned char 
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;  b               1   10[COMRAM] unsigned char 
  9828 ;;  pt              2   11[COMRAM] PTR unsigned char 
  9829 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
  9830 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
  9831 ;; Return value:  Size  Location     Type
  9832 ;;                  2    7[COMRAM] PTR unsigned char 
  9833 ;; Registers used:
  9834 ;;		wreg, status,2, status,0
  9835 ;; Tracked objects:
  9836 ;;		On entry : F/0
  9837 ;;		On exit  : 0/0
  9838 ;;		Unchanged: 0/0
  9839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9840 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9841 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9843 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9844 ;;Total ram usage:        6 bytes
  9845 ;; Hardware stack levels used:    1
  9846 ;; Hardware stack levels required when called:    2
  9847 ;; This function calls:
  9848 ;;		Nothing
  9849 ;; This function is called by:
  9850 ;;		_ECANReceiveMessage
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           	psect	text58
  9855  002456                     __ptext58:
  9856                           	opt stack 0
  9857  002456                     __ECANPointBuffer:
  9858                           	opt stack 24
  9859                           
  9860                           ;incstack = 0
  9861                           ;incstack = 0
  9862                           ;__ECANPointBuffer@b stored from wreg
  9863  002456  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
  9864                           
  9865                           ; BSR set to: 0
  9866                           ;ECAN.c: 1208: BYTE* pt;
  9867                           ;ECAN.c: 1210: switch(b)
  9868  00245A  D028               	goto	l4869
  9869  00245C                     l4851:
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
  9873  00245C  0E0F               	movlw	15	;volatile
  9874  00245E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9875  002460  0E60               	movlw	96	;volatile
  9876  002462  D022               	goto	L39
  9877  002464                     l4853:
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
  9881  002464  010F               	movlb	15	; () banked
  9882  002466  0E0F               	movlw	15	;volatile
  9883  002468  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9884  00246A  0E30               	movlw	48	;volatile
  9885  00246C  D01D               	goto	L39
  9886  00246E                     l4855:
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
  9890  00246E  010E               	movlb	14	; () banked
  9891  002470  0E0E               	movlw	14	;volatile
  9892  002472  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9893  002474  0E80               	movlw	128	;volatile
  9894  002476  D018               	goto	L39
  9895  002478                     l4857:
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
  9899  002478  010E               	movlb	14	; () banked
  9900  00247A  0E0E               	movlw	14	;volatile
  9901  00247C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9902  00247E  0E90               	movlw	144	;volatile
  9903  002480  D013               	goto	L39
  9904  002482                     l4859:
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
  9908  002482  010E               	movlb	14	; () banked
  9909  002484  0E0E               	movlw	14	;volatile
  9910  002486  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9911  002488  0EA0               	movlw	160	;volatile
  9912  00248A  D00E               	goto	L39
  9913  00248C                     l4861:
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
  9917  00248C  010E               	movlb	14	; () banked
  9918  00248E  0E0E               	movlw	14	;volatile
  9919  002490  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9920  002492  0EB0               	movlw	176	;volatile
  9921  002494  D009               	goto	L39
  9922  002496                     l4863:
  9923                           
  9924                           ; BSR set to: 0
  9925                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
  9926  002496  010E               	movlb	14	; () banked
  9927  002498  0E0E               	movlw	14	;volatile
  9928  00249A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9929  00249C  0EC0               	movlw	192	;volatile
  9930  00249E  D004               	goto	L39
  9931  0024A0                     l4865:
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
  9935  0024A0  010E               	movlb	14	; () banked
  9936  0024A2  0E0E               	movlw	14	;volatile
  9937  0024A4  6E0D               	movwf	__ECANPointBuffer@pt+1,c
  9938  0024A6  0ED0               	movlw	208	;volatile
  9939  0024A8                     L39:
  9940  0024A8  6E0C               	movwf	__ECANPointBuffer@pt,c
  9941                           
  9942                           ;ECAN.c: 1235: break;
  9943  0024AA  D00F               	goto	l638
  9944  0024AC                     l4869:
  9945                           
  9946                           ; BSR set to: 0
  9947  0024AC  500B               	movf	__ECANPointBuffer@b,w,c
  9948                           
  9949                           ; Switch size 1, requested type "space"
  9950                           ; Number of cases is 7, Range of values is 0 to 6
  9951                           ; switch strategies available:
  9952                           ; Name         Instructions Cycles
  9953                           ; simple_byte           22    12 (average)
  9954                           ;	Chosen strategy is simple_byte
  9955  0024AE  E0D6               	bz	l4851
  9956  0024B0  0A01               	xorlw	1	; case 1
  9957  0024B2  E0D8               	bz	l4853
  9958  0024B4  0A03               	xorlw	3	; case 2
  9959  0024B6  E0DB               	bz	l4855
  9960  0024B8  0A01               	xorlw	1	; case 3
  9961  0024BA  E0DE               	bz	l4857
  9962  0024BC  0A07               	xorlw	7	; case 4
  9963  0024BE  E0E1               	bz	l4859
  9964  0024C0  0A01               	xorlw	1	; case 5
  9965  0024C2  E0E4               	bz	l4861
  9966  0024C4  0A03               	xorlw	3	; case 6
  9967  0024C6  E0E7               	bz	l4863
  9968  0024C8  D7EB               	goto	l4865
  9969  0024CA                     l638:
  9970                           
  9971                           ;ECAN.c: 1237: return (pt);
  9972  0024CA  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
  9973  0024CE  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
  9974  0024D2  0012               	return	
  9975  0024D4                     __end_of__ECANPointBuffer:
  9976                           	opt stack 0
  9977                           tblptru	equ	0xFF8
  9978                           tblptrh	equ	0xFF7
  9979                           tblptrl	equ	0xFF6
  9980                           tablat	equ	0xFF5
  9981                           prodh	equ	0xFF4
  9982                           prodl	equ	0xFF3
  9983                           intcon	equ	0xFF2
  9984                           postinc0	equ	0xFEE
  9985                           wreg	equ	0xFE8
  9986                           indf1	equ	0xFE7
  9987                           fsr1h	equ	0xFE2
  9988                           fsr1l	equ	0xFE1
  9989                           indf2	equ	0xFDF
  9990                           postinc2	equ	0xFDE
  9991                           postdec2	equ	0xFDD
  9992                           plusw2	equ	0xFDB
  9993                           fsr2h	equ	0xFDA
  9994                           fsr2l	equ	0xFD9
  9995                           status	equ	0xFD8
  9996                           
  9997 ;; *************** function _vscp_check_pstorage *****************
  9998 ;; Defined at:
  9999 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 10000 ;; Parameters:    Size  Location     Type
 10001 ;;		None
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;		None
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  1    wreg      unsigned char 
 10006 ;; Registers used:
 10007 ;;		wreg, status,2, status,0, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 1/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10017 ;;Total ram usage:        0 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    4
 10020 ;; This function calls:
 10021 ;;		_vscp_writeNicknamePermanent
 10022 ;;		_vscp_getSegmentCRC
 10023 ;;		_vscp_setSegmentCRC
 10024 ;;		_vscp_setControlByte
 10025 ;; This function is called by:
 10026 ;;		_main
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text59
 10031  002856                     __ptext59:
 10032                           	opt stack 0
 10033  002856                     _vscp_check_pstorage:
 10034                           	opt stack 26
 10035                           
 10036                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 10037                           
 10038                           ;incstack = 0
 10039                           ;incstack = 0
 10040  002856  EC2B  F015         	call	_vscp_getSegmentCRC	;wreg free
 10041  00285A  0BC0               	andlw	192
 10042  00285C  0A40               	xorlw	64
 10043  00285E  E101               	bnz	l3565
 10044                           
 10045                           ;vscp_firmware.c: 170: return !0;
 10046  002860  0C01               	retlw	1
 10047  002862                     l3565:
 10048                           
 10049                           ;vscp_firmware.c: 171: }
 10050                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 10051  002862  0EFF               	movlw	255
 10052  002864  ECEE  F014         	call	_vscp_writeNicknamePermanent
 10053                           
 10054                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 10055  002868  0E00               	movlw	0
 10056  00286A  ECE5  F014         	call	_vscp_setSegmentCRC
 10057                           
 10058                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 10059  00286E  0EA0               	movlw	160
 10060  002870  ECDC  F014         	call	_vscp_setControlByte
 10061                           
 10062                           ;vscp_firmware.c: 183: return 0;
 10063  002874  0C00               	retlw	0
 10064  002876                     __end_of_vscp_check_pstorage:
 10065                           	opt stack 0
 10066                           tblptru	equ	0xFF8
 10067                           tblptrh	equ	0xFF7
 10068                           tblptrl	equ	0xFF6
 10069                           tablat	equ	0xFF5
 10070                           prodh	equ	0xFF4
 10071                           prodl	equ	0xFF3
 10072                           intcon	equ	0xFF2
 10073                           postinc0	equ	0xFEE
 10074                           wreg	equ	0xFE8
 10075                           indf1	equ	0xFE7
 10076                           fsr1h	equ	0xFE2
 10077                           fsr1l	equ	0xFE1
 10078                           indf2	equ	0xFDF
 10079                           postinc2	equ	0xFDE
 10080                           postdec2	equ	0xFDD
 10081                           plusw2	equ	0xFDB
 10082                           fsr2h	equ	0xFDA
 10083                           fsr2l	equ	0xFD9
 10084                           status	equ	0xFD8
 10085                           
 10086 ;; *************** function _vscp_setControlByte *****************
 10087 ;; Defined at:
 10088 ;;		line 1059 in file "../main.c"
 10089 ;; Parameters:    Size  Location     Type
 10090 ;;  ctrl            1    wreg     unsigned char 
 10091 ;; Auto vars:     Size  Location     Type
 10092 ;;  ctrl            1   10[COMRAM] unsigned char 
 10093 ;; Return value:  Size  Location     Type
 10094 ;;		None               void
 10095 ;; Registers used:
 10096 ;;		wreg, status,2, cstack
 10097 ;; Tracked objects:
 10098 ;;		On entry : 0/0
 10099 ;;		On exit  : 0/0
 10100 ;;		Unchanged: 0/0
 10101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10105 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10106 ;;Total ram usage:        1 bytes
 10107 ;; Hardware stack levels used:    1
 10108 ;; Hardware stack levels required when called:    3
 10109 ;; This function calls:
 10110 ;;		_writeEEPROM
 10111 ;; This function is called by:
 10112 ;;		_vscp_check_pstorage
 10113 ;; This function uses a non-reentrant model
 10114 ;;
 10115                           
 10116                           	psect	text60
 10117  0029B8                     __ptext60:
 10118                           	opt stack 0
 10119  0029B8                     _vscp_setControlByte:
 10120                           	opt stack 26
 10121                           
 10122                           ;incstack = 0
 10123                           ;incstack = 0
 10124                           ;vscp_setControlByte@ctrl stored from wreg
 10125  0029B8  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 10126                           
 10127                           ;main.c: 1060: writeEEPROM(0x03, ctrl);
 10128  0029BC  6A09               	clrf	?_writeEEPROM+1,c
 10129  0029BE  0E03               	movlw	3
 10130  0029C0  6E08               	movwf	?_writeEEPROM,c
 10131  0029C2  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 10132  0029C6  EFD6  F013         	goto	_writeEEPROM	;wreg free
 10133  0029CA                     __end_of_vscp_setControlByte:
 10134                           	opt stack 0
 10135                           tblptru	equ	0xFF8
 10136                           tblptrh	equ	0xFF7
 10137                           tblptrl	equ	0xFF6
 10138                           tablat	equ	0xFF5
 10139                           prodh	equ	0xFF4
 10140                           prodl	equ	0xFF3
 10141                           intcon	equ	0xFF2
 10142                           postinc0	equ	0xFEE
 10143                           wreg	equ	0xFE8
 10144                           indf1	equ	0xFE7
 10145                           fsr1h	equ	0xFE2
 10146                           fsr1l	equ	0xFE1
 10147                           indf2	equ	0xFDF
 10148                           postinc2	equ	0xFDE
 10149                           postdec2	equ	0xFDD
 10150                           plusw2	equ	0xFDB
 10151                           fsr2h	equ	0xFDA
 10152                           fsr2l	equ	0xFD9
 10153                           status	equ	0xFD8
 10154                           
 10155 ;; *************** function _vscp_setSegmentCRC *****************
 10156 ;; Defined at:
 10157 ;;		line 1050 in file "../main.c"
 10158 ;; Parameters:    Size  Location     Type
 10159 ;;  crc             1    wreg     unsigned char 
 10160 ;; Auto vars:     Size  Location     Type
 10161 ;;  crc             1   10[COMRAM] unsigned char 
 10162 ;; Return value:  Size  Location     Type
 10163 ;;		None               void
 10164 ;; Registers used:
 10165 ;;		wreg, status,2, cstack
 10166 ;; Tracked objects:
 10167 ;;		On entry : 0/0
 10168 ;;		On exit  : 0/0
 10169 ;;		Unchanged: 0/0
 10170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10174 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10175 ;;Total ram usage:        1 bytes
 10176 ;; Hardware stack levels used:    1
 10177 ;; Hardware stack levels required when called:    3
 10178 ;; This function calls:
 10179 ;;		_writeEEPROM
 10180 ;; This function is called by:
 10181 ;;		_vscp_check_pstorage
 10182 ;;		_vscp_handleProbeState
 10183 ;;		_vscp_handleHeartbeat
 10184 ;;		_vscp_handleSetNickname
 10185 ;; This function uses a non-reentrant model
 10186 ;;
 10187                           
 10188                           	psect	text61
 10189  0029CA                     __ptext61:
 10190                           	opt stack 0
 10191  0029CA                     _vscp_setSegmentCRC:
 10192                           	opt stack 25
 10193                           
 10194                           ;incstack = 0
 10195                           ;incstack = 0
 10196                           ;vscp_setSegmentCRC@crc stored from wreg
 10197  0029CA  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 10198                           
 10199                           ;main.c: 1051: writeEEPROM( 0x02, crc );
 10200  0029CE  6A09               	clrf	?_writeEEPROM+1,c
 10201  0029D0  0E02               	movlw	2
 10202  0029D2  6E08               	movwf	?_writeEEPROM,c
 10203  0029D4  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 10204  0029D8  EFD6  F013         	goto	_writeEEPROM	;wreg free
 10205  0029DC                     __end_of_vscp_setSegmentCRC:
 10206                           	opt stack 0
 10207                           tblptru	equ	0xFF8
 10208                           tblptrh	equ	0xFF7
 10209                           tblptrl	equ	0xFF6
 10210                           tablat	equ	0xFF5
 10211                           prodh	equ	0xFF4
 10212                           prodl	equ	0xFF3
 10213                           intcon	equ	0xFF2
 10214                           postinc0	equ	0xFEE
 10215                           wreg	equ	0xFE8
 10216                           indf1	equ	0xFE7
 10217                           fsr1h	equ	0xFE2
 10218                           fsr1l	equ	0xFE1
 10219                           indf2	equ	0xFDF
 10220                           postinc2	equ	0xFDE
 10221                           postdec2	equ	0xFDD
 10222                           plusw2	equ	0xFDB
 10223                           fsr2h	equ	0xFDA
 10224                           fsr2l	equ	0xFD9
 10225                           status	equ	0xFD8
 10226                           
 10227 ;; *************** function _vscp_getSegmentCRC *****************
 10228 ;; Defined at:
 10229 ;;		line 1041 in file "../main.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;		None
 10232 ;; Auto vars:     Size  Location     Type
 10233 ;;		None
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  1    wreg      unsigned char 
 10236 ;; Registers used:
 10237 ;;		wreg, status,2, cstack
 10238 ;; Tracked objects:
 10239 ;;		On entry : 1/0
 10240 ;;		On exit  : 0/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10247 ;;Total ram usage:        0 bytes
 10248 ;; Hardware stack levels used:    1
 10249 ;; Hardware stack levels required when called:    3
 10250 ;; This function calls:
 10251 ;;		_readEEPROM
 10252 ;; This function is called by:
 10253 ;;		_vscp_check_pstorage
 10254 ;;		_vscp_handleHeartbeat
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           	psect	text62
 10259  002A56                     __ptext62:
 10260                           	opt stack 0
 10261  002A56                     _vscp_getSegmentCRC:
 10262                           	opt stack 25
 10263                           
 10264                           ;main.c: 1042: return readEEPROM( 0x02 );
 10265                           
 10266                           ;incstack = 0
 10267                           ;incstack = 0
 10268  002A56  6A09               	clrf	?_readEEPROM+1,c
 10269  002A58  0E02               	movlw	2
 10270  002A5A  6E08               	movwf	?_readEEPROM,c
 10271  002A5C  EFD3  F014         	goto	_readEEPROM	;wreg free
 10272  002A60                     __end_of_vscp_getSegmentCRC:
 10273                           	opt stack 0
 10274                           tblptru	equ	0xFF8
 10275                           tblptrh	equ	0xFF7
 10276                           tblptrl	equ	0xFF6
 10277                           tablat	equ	0xFF5
 10278                           prodh	equ	0xFF4
 10279                           prodl	equ	0xFF3
 10280                           intcon	equ	0xFF2
 10281                           postinc0	equ	0xFEE
 10282                           wreg	equ	0xFE8
 10283                           indf1	equ	0xFE7
 10284                           fsr1h	equ	0xFE2
 10285                           fsr1l	equ	0xFE1
 10286                           indf2	equ	0xFDF
 10287                           postinc2	equ	0xFDE
 10288                           postdec2	equ	0xFDD
 10289                           plusw2	equ	0xFDB
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8
 10293                           
 10294 ;; *************** function _vscp_writeNicknamePermanent *****************
 10295 ;; Defined at:
 10296 ;;		line 569 in file "../main.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;  nickname        1    wreg     unsigned char 
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;  nickname        1   10[COMRAM] unsigned char 
 10301 ;; Return value:  Size  Location     Type
 10302 ;;		None               void
 10303 ;; Registers used:
 10304 ;;		wreg, status,2, cstack
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10313 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10314 ;;Total ram usage:        1 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    3
 10317 ;; This function calls:
 10318 ;;		_writeEEPROM
 10319 ;; This function is called by:
 10320 ;;		_vscp_check_pstorage
 10321 ;;		_vscp_handleProbeState
 10322 ;;		_vscp_handleHeartbeat
 10323 ;;		_vscp_handleSetNickname
 10324 ;;		_vscp_handleDropNickname
 10325 ;; This function uses a non-reentrant model
 10326 ;;
 10327                           
 10328                           	psect	text63
 10329  0029DC                     __ptext63:
 10330                           	opt stack 0
 10331  0029DC                     _vscp_writeNicknamePermanent:
 10332                           	opt stack 25
 10333                           
 10334                           ;incstack = 0
 10335                           ;incstack = 0
 10336                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 10337  0029DC  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 10338                           
 10339                           ;main.c: 570: writeEEPROM( 0x01, nickname );
 10340  0029E0  6A09               	clrf	?_writeEEPROM+1,c
 10341  0029E2  0E01               	movlw	1
 10342  0029E4  6E08               	movwf	?_writeEEPROM,c
 10343  0029E6  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 10344  0029EA  EFD6  F013         	goto	_writeEEPROM	;wreg free
 10345  0029EE                     __end_of_vscp_writeNicknamePermanent:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           postinc0	equ	0xFEE
 10355                           wreg	equ	0xFE8
 10356                           indf1	equ	0xFE7
 10357                           fsr1h	equ	0xFE2
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           plusw2	equ	0xFDB
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367 ;; *************** function _writeEEPROM *****************
 10368 ;; Defined at:
 10369 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  address         2    7[COMRAM] unsigned short 
 10372 ;;  data            1    9[COMRAM] unsigned char 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;		None
 10375 ;; Return value:  Size  Location     Type
 10376 ;;		None               void
 10377 ;; Registers used:
 10378 ;;		wreg, status,2
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10384 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10387 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10388 ;;Total ram usage:        3 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; Hardware stack levels required when called:    2
 10391 ;; This function calls:
 10392 ;;		Nothing
 10393 ;; This function is called by:
 10394 ;;		_main
 10395 ;;		_init_app_eeprom
 10396 ;;		_vscp_setGUID
 10397 ;;		_vscp_setManufacturerId
 10398 ;;		_vscp_writeNicknamePermanent
 10399 ;;		_vscp_writeAppReg
 10400 ;;		_vscp_setUserID
 10401 ;;		_vscp_setSegmentCRC
 10402 ;;		_vscp_setControlByte
 10403 ;;		_vscp_goBootloaderMode
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           	psect	text64
 10408  0027AC                     __ptext64:
 10409                           	opt stack 0
 10410  0027AC                     _writeEEPROM:
 10411                           	opt stack 24
 10412                           
 10413                           ;eeprom.c: 29: EEADR = address & 0xff;
 10414                           
 10415                           ;incstack = 0
 10416                           ;incstack = 0
 10417  0027AC  C008  FF74         	movff	writeEEPROM@address,3956	;volatile
 10418                           
 10419                           ;eeprom.c: 30: EEDATA = data;
 10420  0027B0  C00A  FF73         	movff	writeEEPROM@data,3955	;volatile
 10421                           
 10422                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 10423  0027B4  9E7F               	bcf	3967,7,c	;volatile
 10424                           
 10425                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 10426  0027B6  9C7F               	bcf	3967,6,c	;volatile
 10427                           
 10428                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 10429  0027B8  847F               	bsf	3967,2,c	;volatile
 10430                           
 10431                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 10432  0027BA  9EF2               	bcf	intcon,7,c	;volatile
 10433                           
 10434                           ;eeprom.c: 37: EECON2 = 0x55;
 10435  0027BC  0E55               	movlw	85
 10436  0027BE  6E7E               	movwf	3966,c	;volatile
 10437                           
 10438                           ;eeprom.c: 38: EECON2 = 0xaa;
 10439  0027C0  0EAA               	movlw	170
 10440  0027C2  6E7E               	movwf	3966,c	;volatile
 10441                           
 10442                           ;eeprom.c: 39: EECON1bits.WR = 1;
 10443  0027C4  827F               	bsf	3967,1,c	;volatile
 10444                           
 10445                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 10446  0027C6  8EF2               	bsf	intcon,7,c	;volatile
 10447  0027C8                     l1017:
 10448  0027C8  ACB7               	btfss	4023,6,c	;volatile
 10449  0027CA  D7FE               	goto	l1017
 10450                           
 10451                           ;eeprom.c: 44: PIR4bits.EEIF = 0;
 10452  0027CC  9CB7               	bcf	4023,6,c	;volatile
 10453                           
 10454                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 10455  0027CE  947F               	bcf	3967,2,c	;volatile
 10456  0027D0  0012               	return	
 10457  0027D2                     __end_of_writeEEPROM:
 10458                           	opt stack 0
 10459                           tblptru	equ	0xFF8
 10460                           tblptrh	equ	0xFF7
 10461                           tblptrl	equ	0xFF6
 10462                           tablat	equ	0xFF5
 10463                           prodh	equ	0xFF4
 10464                           prodl	equ	0xFF3
 10465                           intcon	equ	0xFF2
 10466                           postinc0	equ	0xFEE
 10467                           wreg	equ	0xFE8
 10468                           indf1	equ	0xFE7
 10469                           fsr1h	equ	0xFE2
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           postdec2	equ	0xFDD
 10474                           plusw2	equ	0xFDB
 10475                           fsr2h	equ	0xFDA
 10476                           fsr2l	equ	0xFD9
 10477                           status	equ	0xFD8
 10478                           
 10479 ;; *************** function _init *****************
 10480 ;; Defined at:
 10481 ;;		line 330 in file "../main.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;		None               void
 10488 ;; Registers used:
 10489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 1/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10499 ;;Total ram usage:        0 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    4
 10502 ;; This function calls:
 10503 ;;		_WriteTimer0
 10504 ;;		_init_app_ram
 10505 ;;		_OpenTimer0
 10506 ;;		_ECANInitialize
 10507 ;; This function is called by:
 10508 ;;		_main
 10509 ;; This function uses a non-reentrant model
 10510 ;;
 10511                           
 10512                           	psect	text65
 10513  00268C                     __ptext65:
 10514                           	opt stack 0
 10515  00268C                     _init:
 10516                           	opt stack 26
 10517                           
 10518                           ;main.c: 334: init_app_ram();
 10519                           
 10520                           ;incstack = 0
 10521                           ;incstack = 0
 10522  00268C  ECF7  F014         	call	_init_app_ram	;wreg free
 10523                           
 10524                           ; BSR set to: 0
 10525                           ;main.c: 345: TRISA = 0x00;
 10526  002690  6A92               	clrf	3986,c	;volatile
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;main.c: 346: PORTA = 0x00;
 10530  002692  6A80               	clrf	3968,c	;volatile
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;main.c: 358: TRISB = 0b00001100;
 10534  002694  0E0C               	movlw	12
 10535  002696  6E93               	movwf	3987,c	;volatile
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;main.c: 359: PORTB = 0x00;
 10539  002698  6A81               	clrf	3969,c	;volatile
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;main.c: 369: TRISC = 0b00000001;
 10543  00269A  0E01               	movlw	1
 10544  00269C  6E94               	movwf	3988,c	;volatile
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;main.c: 370: PORTC = 0x00;
 10548  00269E  6A82               	clrf	3970,c	;volatile
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;main.c: 396: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 10552  0026A0  0E92               	movlw	146
 10553  0026A2  EC68  F014         	call	_OpenTimer0
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;main.c: 397: WriteTimer0( 0xfb1d );
 10557  0026A6  0EFB               	movlw	251
 10558  0026A8  6E09               	movwf	?_WriteTimer0+1,c
 10559  0026AA  0E1D               	movlw	29
 10560  0026AC  6E08               	movwf	?_WriteTimer0,c
 10561  0026AE  EC00  F015         	call	_WriteTimer0	;wreg free
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;main.c: 400: ECANInitialize();
 10565  0026B2  ECE3  F011         	call	_ECANInitialize	;wreg free
 10566                           
 10567                           ;main.c: 421: INTCONbits.PEIE = 1;
 10568  0026B6  8CF2               	bsf	intcon,6,c	;volatile
 10569                           
 10570                           ;main.c: 424: INTCONbits.GIE = 1;
 10571  0026B8  8EF2               	bsf	intcon,7,c	;volatile
 10572  0026BA  0012               	return	
 10573  0026BC                     __end_of_init:
 10574                           	opt stack 0
 10575                           tblptru	equ	0xFF8
 10576                           tblptrh	equ	0xFF7
 10577                           tblptrl	equ	0xFF6
 10578                           tablat	equ	0xFF5
 10579                           prodh	equ	0xFF4
 10580                           prodl	equ	0xFF3
 10581                           intcon	equ	0xFF2
 10582                           postinc0	equ	0xFEE
 10583                           wreg	equ	0xFE8
 10584                           indf1	equ	0xFE7
 10585                           fsr1h	equ	0xFE2
 10586                           fsr1l	equ	0xFE1
 10587                           indf2	equ	0xFDF
 10588                           postinc2	equ	0xFDE
 10589                           postdec2	equ	0xFDD
 10590                           plusw2	equ	0xFDB
 10591                           fsr2h	equ	0xFDA
 10592                           fsr2l	equ	0xFD9
 10593                           status	equ	0xFD8
 10594                           
 10595 ;; *************** function _ECANInitialize *****************
 10596 ;; Defined at:
 10597 ;;		line 168 in file "../ECAN.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;		None
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;		None
 10602 ;; Return value:  Size  Location     Type
 10603 ;;		None               void
 10604 ;; Registers used:
 10605 ;;		wreg, status,2, status,0, cstack
 10606 ;; Tracked objects:
 10607 ;;		On entry : F/0
 10608 ;;		On exit  : 1/0
 10609 ;;		Unchanged: 0/0
 10610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10615 ;;Total ram usage:        0 bytes
 10616 ;; Hardware stack levels used:    1
 10617 ;; Hardware stack levels required when called:    3
 10618 ;; This function calls:
 10619 ;;		_ECANSetOperationMode
 10620 ;; This function is called by:
 10621 ;;		_init
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           	psect	text66
 10626  0023C6                     __ptext66:
 10627                           	opt stack 0
 10628  0023C6                     _ECANInitialize:
 10629                           	opt stack 26
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 10633                           
 10634                           ;incstack = 0
 10635                           ;incstack = 0
 10636  0023C6  0E80               	movlw	128
 10637  0023C8  EC9E  F014         	call	_ECANSetOperationMode
 10638                           
 10639                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 10640  0023CC  0E09               	movlw	9
 10641  0023CE  010E               	movlb	14	; () banked
 10642  0023D0  6F43               	movwf	67,b	;volatile
 10643                           
 10644                           ; BSR set to: 14
 10645                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 10646  0023D2  0EFC               	movlw	252
 10647  0023D4  6F44               	movwf	68,b	;volatile
 10648                           
 10649                           ; BSR set to: 14
 10650                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 10651                           ;ECAN.c: 181: (0 << 6) |
 10652                           ;ECAN.c: 182: (2-1);
 10653  0023D6  0E01               	movlw	1
 10654  0023D8  6F45               	movwf	69,b	;volatile
 10655                           
 10656                           ; BSR set to: 14
 10657                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 10658  0023DA  0E20               	movlw	32
 10659  0023DC  6E70               	movwf	3952,c	;volatile
 10660                           
 10661                           ; BSR set to: 14
 10662                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 10663  0023DE  8E72               	bsf	3954,7,c	;volatile
 10664                           
 10665                           ; BSR set to: 14
 10666                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 10667  0023E0  9C72               	bcf	3954,6,c	;volatile
 10668                           
 10669                           ; BSR set to: 14
 10670                           ;ECAN.c: 205: RXB0CON = 0;
 10671  0023E2  6A60               	clrf	3936,c	;volatile
 10672                           
 10673                           ; BSR set to: 14
 10674                           ;ECAN.c: 211: RXB1CON = 0;
 10675  0023E4  010F               	movlb	15	; () banked
 10676  0023E6  6B30               	clrf	48,b	;volatile
 10677                           
 10678                           ; BSR set to: 15
 10679                           ;ECAN.c: 221: B0CON = 0;
 10680  0023E8  010E               	movlb	14	; () banked
 10681  0023EA  6B80               	clrf	128,b	;volatile
 10682                           
 10683                           ; BSR set to: 14
 10684                           ;ECAN.c: 231: B1CON = 0;
 10685  0023EC  6B90               	clrf	144,b	;volatile
 10686                           
 10687                           ; BSR set to: 14
 10688                           ;ECAN.c: 241: B2CON = 0;
 10689  0023EE  6BA0               	clrf	160,b	;volatile
 10690                           
 10691                           ; BSR set to: 14
 10692                           ;ECAN.c: 254: B3CON = 0 << 2;
 10693  0023F0  6BB0               	clrf	176,b	;volatile
 10694                           
 10695                           ; BSR set to: 14
 10696                           ;ECAN.c: 264: B4CON = 0 << 2;
 10697  0023F2  6BC0               	clrf	192,b	;volatile
 10698                           
 10699                           ; BSR set to: 14
 10700                           ;ECAN.c: 274: B5CON = 0 << 2;
 10701  0023F4  6BD0               	clrf	208,b	;volatile
 10702                           
 10703                           ; BSR set to: 14
 10704                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 10705  0023F6  0EE0               	movlw	224
 10706  0023F8  6F7D               	movwf	125,b	;volatile
 10707                           
 10708                           ; BSR set to: 14
 10709                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 10710  0023FA  6BE0               	clrf	224,b	;volatile
 10711                           
 10712                           ; BSR set to: 14
 10713  0023FC  0E08               	movlw	8
 10714  0023FE  6FE1               	movwf	225,b	;volatile
 10715                           
 10716                           ; BSR set to: 14
 10717  002400  6BE2               	clrf	226,b	;volatile
 10718                           
 10719                           ; BSR set to: 14
 10720  002402  6BE3               	clrf	227,b	;volatile
 10721                           
 10722                           ; BSR set to: 14
 10723                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 10724  002404  6BE4               	clrf	228,b	;volatile
 10725                           
 10726                           ; BSR set to: 14
 10727  002406  0EE8               	movlw	232
 10728  002408  6FE5               	movwf	229,b	;volatile
 10729                           
 10730                           ; BSR set to: 14
 10731  00240A  0E1A               	movlw	26
 10732  00240C  6FE6               	movwf	230,b	;volatile
 10733                           
 10734                           ; BSR set to: 14
 10735  00240E  6BE7               	clrf	231,b	;volatile
 10736                           
 10737                           ; BSR set to: 14
 10738                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 10739  002410  0E03               	movlw	3
 10740  002412  6F46               	movwf	70,b	;volatile
 10741                           
 10742                           ; BSR set to: 14
 10743                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 10744  002414  6B47               	clrf	71,b	;volatile
 10745                           
 10746                           ; BSR set to: 14
 10747                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 10748  002416  6B71               	clrf	113,b	;volatile
 10749                           
 10750                           ; BSR set to: 14
 10751                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 10752  002418  0E11               	movlw	17
 10753  00241A  6F72               	movwf	114,b	;volatile
 10754                           
 10755                           ; BSR set to: 14
 10756                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 10757  00241C  6F73               	movwf	115,b	;volatile
 10758                           
 10759                           ; BSR set to: 14
 10760                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 10761  00241E  6B74               	clrf	116,b	;volatile
 10762                           
 10763                           ; BSR set to: 14
 10764                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 10765  002420  6B75               	clrf	117,b	;volatile
 10766                           
 10767                           ; BSR set to: 14
 10768                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 10769  002422  6B76               	clrf	118,b	;volatile
 10770                           
 10771                           ; BSR set to: 14
 10772                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 10773  002424  6B77               	clrf	119,b	;volatile
 10774                           
 10775                           ; BSR set to: 14
 10776                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 10777  002426  6B78               	clrf	120,b	;volatile
 10778                           
 10779                           ; BSR set to: 14
 10780                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 10781  002428  0E54               	movlw	84
 10782  00242A  6F79               	movwf	121,b	;volatile
 10783                           
 10784                           ; BSR set to: 14
 10785                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 10786  00242C  0E05               	movlw	5
 10787  00242E  6F7A               	movwf	122,b	;volatile
 10788                           
 10789                           ; BSR set to: 14
 10790                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 10791  002430  6B7B               	clrf	123,b	;volatile
 10792                           
 10793                           ; BSR set to: 14
 10794                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 10795  002432  6B7B               	clrf	123,b	;volatile
 10796                           
 10797                           ; BSR set to: 14
 10798                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 10799  002434  0E0F               	movlw	15
 10800  002436  6FF8               	movwf	248,b	;volatile
 10801                           
 10802                           ; BSR set to: 14
 10803  002438  0EE0               	movlw	224
 10804  00243A  6FF9               	movwf	249,b	;volatile
 10805                           
 10806                           ; BSR set to: 14
 10807  00243C  6BFA               	clrf	250,b	;volatile
 10808                           
 10809                           ; BSR set to: 14
 10810  00243E  6BFB               	clrf	251,b	;volatile
 10811                           
 10812                           ; BSR set to: 14
 10813                           ;ECAN.c: 482: RXM0EXIDM = 1;
 10814  002440  87F9               	bsf	249,3,b	;volatile
 10815                           
 10816                           ; BSR set to: 14
 10817                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 10818  002442  0E0F               	movlw	15
 10819  002444  6FFC               	movwf	252,b	;volatile
 10820                           
 10821                           ; BSR set to: 14
 10822  002446  0EE0               	movlw	224
 10823  002448  6FFD               	movwf	253,b	;volatile
 10824                           
 10825                           ; BSR set to: 14
 10826  00244A  69FE               	setf	254,b	;volatile
 10827                           
 10828                           ; BSR set to: 14
 10829  00244C  6BFF               	clrf	255,b	;volatile
 10830                           
 10831                           ; BSR set to: 14
 10832                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 10833  00244E  87FD               	bsf	253,3,b	;volatile
 10834                           
 10835                           ; BSR set to: 14
 10836                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 10837  002450  0E00               	movlw	0
 10838  002452  EF9E  F014         	goto	_ECANSetOperationMode
 10839  002456                     __end_of_ECANInitialize:
 10840                           	opt stack 0
 10841                           tblptru	equ	0xFF8
 10842                           tblptrh	equ	0xFF7
 10843                           tblptrl	equ	0xFF6
 10844                           tablat	equ	0xFF5
 10845                           prodh	equ	0xFF4
 10846                           prodl	equ	0xFF3
 10847                           intcon	equ	0xFF2
 10848                           postinc0	equ	0xFEE
 10849                           wreg	equ	0xFE8
 10850                           indf1	equ	0xFE7
 10851                           fsr1h	equ	0xFE2
 10852                           fsr1l	equ	0xFE1
 10853                           indf2	equ	0xFDF
 10854                           postinc2	equ	0xFDE
 10855                           postdec2	equ	0xFDD
 10856                           plusw2	equ	0xFDB
 10857                           fsr2h	equ	0xFDA
 10858                           fsr2l	equ	0xFD9
 10859                           status	equ	0xFD8
 10860                           
 10861 ;; *************** function _ECANSetOperationMode *****************
 10862 ;; Defined at:
 10863 ;;		line 1012 in file "../ECAN.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;  mode            1    wreg     enum E18989
 10866 ;; Auto vars:     Size  Location     Type
 10867 ;;  mode            1    7[COMRAM] enum E18989
 10868 ;; Return value:  Size  Location     Type
 10869 ;;		None               void
 10870 ;; Registers used:
 10871 ;;		wreg, status,2, status,0
 10872 ;; Tracked objects:
 10873 ;;		On entry : 1/0
 10874 ;;		On exit  : 1/0
 10875 ;;		Unchanged: 1/0
 10876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10881 ;;Total ram usage:        1 bytes
 10882 ;; Hardware stack levels used:    1
 10883 ;; Hardware stack levels required when called:    2
 10884 ;; This function calls:
 10885 ;;		Nothing
 10886 ;; This function is called by:
 10887 ;;		_ECANInitialize
 10888 ;; This function uses a non-reentrant model
 10889 ;;
 10890                           
 10891                           	psect	text67
 10892  00293C                     __ptext67:
 10893                           	opt stack 0
 10894  00293C                     _ECANSetOperationMode:
 10895                           	opt stack 26
 10896                           
 10897                           ;incstack = 0
 10898                           ;incstack = 0
 10899                           ;ECANSetOperationMode@mode stored from wreg
 10900  00293C  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 10901                           
 10902                           ;ECAN.c: 1013: CANCON &= 0x1F;
 10903  002940  0E1F               	movlw	31
 10904  002942  166F               	andwf	3951,f,c	;volatile
 10905                           
 10906                           ;ECAN.c: 1014: CANCON |= mode;
 10907  002944  5008               	movf	ECANSetOperationMode@mode,w,c
 10908  002946  126F               	iorwf	3951,f,c	;volatile
 10909  002948                     l4821:
 10910  002948  506F               	movf	3951,w,c	;volatile
 10911  00294A  0BE0               	andlw	224
 10912  00294C  1808               	xorwf	ECANSetOperationMode@mode,w,c
 10913  00294E  B4D8               	btfsc	status,2,c
 10914  002950  0012               	return	
 10915  002952  D7FA               	goto	l4821
 10916  002954                     __end_of_ECANSetOperationMode:
 10917                           	opt stack 0
 10918                           tblptru	equ	0xFF8
 10919                           tblptrh	equ	0xFF7
 10920                           tblptrl	equ	0xFF6
 10921                           tablat	equ	0xFF5
 10922                           prodh	equ	0xFF4
 10923                           prodl	equ	0xFF3
 10924                           intcon	equ	0xFF2
 10925                           postinc0	equ	0xFEE
 10926                           wreg	equ	0xFE8
 10927                           indf1	equ	0xFE7
 10928                           fsr1h	equ	0xFE2
 10929                           fsr1l	equ	0xFE1
 10930                           indf2	equ	0xFDF
 10931                           postinc2	equ	0xFDE
 10932                           postdec2	equ	0xFDD
 10933                           plusw2	equ	0xFDB
 10934                           fsr2h	equ	0xFDA
 10935                           fsr2l	equ	0xFD9
 10936                           status	equ	0xFD8
 10937                           
 10938 ;; *************** function _OpenTimer0 *****************
 10939 ;; Defined at:
 10940 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;  config          1    wreg     unsigned char 
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;  config          1    7[COMRAM] unsigned char 
 10945 ;; Return value:  Size  Location     Type
 10946 ;;		None               void
 10947 ;; Registers used:
 10948 ;;		wreg, status,2, status,0
 10949 ;; Tracked objects:
 10950 ;;		On entry : F/0
 10951 ;;		On exit  : F/0
 10952 ;;		Unchanged: F/0
 10953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10958 ;;Total ram usage:        1 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; Hardware stack levels required when called:    2
 10961 ;; This function calls:
 10962 ;;		Nothing
 10963 ;; This function is called by:
 10964 ;;		_init
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           	psect	text68
 10969  0028D0                     __ptext68:
 10970                           	opt stack 0
 10971  0028D0                     _OpenTimer0:
 10972                           	opt stack 27
 10973                           
 10974                           ;incstack = 0
 10975                           ;incstack = 0
 10976                           ;OpenTimer0@config stored from wreg
 10977  0028D0  CFE8 F008          	movff	wreg,OpenTimer0@config
 10978                           
 10979                           ; BSR set to: 0
 10980  0028D4  5008               	movf	OpenTimer0@config,w,c
 10981  0028D6  0B7F               	andlw	127
 10982  0028D8  6ED5               	movwf	4053,c	;volatile
 10983                           
 10984                           ; BSR set to: 0
 10985  0028DA  6AD7               	clrf	4055,c	;volatile
 10986                           
 10987                           ; BSR set to: 0
 10988  0028DC  6AD6               	clrf	4054,c	;volatile
 10989                           
 10990                           ; BSR set to: 0
 10991  0028DE  94F2               	bcf	intcon,2,c	;volatile
 10992                           
 10993                           ; BSR set to: 0
 10994  0028E0  AE08               	btfss	OpenTimer0@config,7,c
 10995  0028E2  D002               	goto	l1036
 10996                           
 10997                           ; BSR set to: 0
 10998  0028E4  8AF2               	bsf	intcon,5,c	;volatile
 10999  0028E6  D001               	goto	l1037
 11000  0028E8                     l1036:
 11001                           
 11002                           ; BSR set to: 0
 11003  0028E8  9AF2               	bcf	intcon,5,c	;volatile
 11004  0028EA                     l1037:
 11005                           
 11006                           ; BSR set to: 0
 11007  0028EA  8ED5               	bsf	4053,7,c	;volatile
 11008                           
 11009                           ; BSR set to: 0
 11010  0028EC  0012               	return	
 11011  0028EE                     __end_of_OpenTimer0:
 11012                           	opt stack 0
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           prodh	equ	0xFF4
 11018                           prodl	equ	0xFF3
 11019                           intcon	equ	0xFF2
 11020                           postinc0	equ	0xFEE
 11021                           wreg	equ	0xFE8
 11022                           indf1	equ	0xFE7
 11023                           fsr1h	equ	0xFE2
 11024                           fsr1l	equ	0xFE1
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           plusw2	equ	0xFDB
 11029                           fsr2h	equ	0xFDA
 11030                           fsr2l	equ	0xFD9
 11031                           status	equ	0xFD8
 11032                           
 11033 ;; *************** function _init_app_ram *****************
 11034 ;; Defined at:
 11035 ;;		line 434 in file "../main.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;		None
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  i               1    0        unsigned char 
 11040 ;; Return value:  Size  Location     Type
 11041 ;;		None               void
 11042 ;; Registers used:
 11043 ;;		None
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : F/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11053 ;;Total ram usage:        0 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    2
 11056 ;; This function calls:
 11057 ;;		Nothing
 11058 ;; This function is called by:
 11059 ;;		_main
 11060 ;;		_init
 11061 ;;		_vscp_restoreDefaults
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           	psect	text69
 11066  0029EE                     __ptext69:
 11067                           	opt stack 0
 11068  0029EE                     _init_app_ram:
 11069                           	opt stack 25
 11070                           
 11071                           ;main.c: 435: uint8_t i;
 11072                           ;main.c: 437: measurement_clock = 0;
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;incstack = 0
 11076                           ;incstack = 0
 11077  0029EE  0100               	movlb	0	; () banked
 11078  0029F0  6B60               	clrf	_measurement_clock& (0+255),b	;volatile
 11079  0029F2  6B61               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 11080  0029F4  6B62               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 11081  0029F6  6B63               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 11082                           
 11083                           ;main.c: 439: seconds = 0;
 11084  0029F8  6B6A               	clrf	_seconds& (0+255),b
 11085                           
 11086                           ;main.c: 440: minutes = 0;
 11087  0029FA  6B69               	clrf	_minutes& (0+255),b
 11088                           
 11089                           ;main.c: 441: hours = 0;
 11090  0029FC  6B68               	clrf	_hours& (0+255),b
 11091                           
 11092                           ; BSR set to: 0
 11093  0029FE  0012               	return	
 11094  002A00                     __end_of_init_app_ram:
 11095                           	opt stack 0
 11096                           tblptru	equ	0xFF8
 11097                           tblptrh	equ	0xFF7
 11098                           tblptrl	equ	0xFF6
 11099                           tablat	equ	0xFF5
 11100                           prodh	equ	0xFF4
 11101                           prodl	equ	0xFF3
 11102                           intcon	equ	0xFF2
 11103                           postinc0	equ	0xFEE
 11104                           wreg	equ	0xFE8
 11105                           indf1	equ	0xFE7
 11106                           fsr1h	equ	0xFE2
 11107                           fsr1l	equ	0xFE1
 11108                           indf2	equ	0xFDF
 11109                           postinc2	equ	0xFDE
 11110                           postdec2	equ	0xFDD
 11111                           plusw2	equ	0xFDB
 11112                           fsr2h	equ	0xFDA
 11113                           fsr2l	equ	0xFD9
 11114                           status	equ	0xFD8
 11115                           
 11116 ;; *************** function _WriteTimer0 *****************
 11117 ;; Defined at:
 11118 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11119 ;; Parameters:    Size  Location     Type
 11120 ;;  timer0          2    7[COMRAM] unsigned int 
 11121 ;; Auto vars:     Size  Location     Type
 11122 ;;  timer           2    9[COMRAM] struct Timers
 11123 ;; Return value:  Size  Location     Type
 11124 ;;		None               void
 11125 ;; Registers used:
 11126 ;;		None
 11127 ;; Tracked objects:
 11128 ;;		On entry : F/0
 11129 ;;		On exit  : F/0
 11130 ;;		Unchanged: F/0
 11131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11135 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11136 ;;Total ram usage:        4 bytes
 11137 ;; Hardware stack levels used:    1
 11138 ;; Hardware stack levels required when called:    2
 11139 ;; This function calls:
 11140 ;;		Nothing
 11141 ;; This function is called by:
 11142 ;;		_init
 11143 ;; This function uses a non-reentrant model
 11144 ;;
 11145                           
 11146                           	psect	text70
 11147  002A00                     __ptext70:
 11148                           	opt stack 0
 11149  002A00                     _WriteTimer0:
 11150                           	opt stack 27
 11151                           
 11152                           ; BSR set to: 0
 11153                           
 11154                           ; BSR set to: 0
 11155                           ;incstack = 0
 11156                           ;incstack = 0
 11157  002A00  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 11158  002A04  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 11159  002A08  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 11160  002A0C  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 11161                           
 11162                           ; BSR set to: 0
 11163  002A10  0012               	return	
 11164  002A12                     __end_of_WriteTimer0:
 11165                           	opt stack 0
 11166                           tblptru	equ	0xFF8
 11167                           tblptrh	equ	0xFF7
 11168                           tblptrl	equ	0xFF6
 11169                           tablat	equ	0xFF5
 11170                           prodh	equ	0xFF4
 11171                           prodl	equ	0xFF3
 11172                           intcon	equ	0xFF2
 11173                           postinc0	equ	0xFEE
 11174                           wreg	equ	0xFE8
 11175                           indf1	equ	0xFE7
 11176                           fsr1h	equ	0xFE2
 11177                           fsr1l	equ	0xFE1
 11178                           indf2	equ	0xFDF
 11179                           postinc2	equ	0xFDE
 11180                           postdec2	equ	0xFDD
 11181                           plusw2	equ	0xFDB
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function _vscp_readAppReg *****************
 11187 ;; Defined at:
 11188 ;;		line 610 in file "../main.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  reg             1    wreg     unsigned char 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  reg             1   11[COMRAM] unsigned char 
 11193 ;;  rv              1   10[COMRAM] unsigned char 
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      unsigned char 
 11196 ;; Registers used:
 11197 ;;		wreg, status,2, status,0, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : F/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11207 ;;Total ram usage:        2 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    3
 11210 ;; This function calls:
 11211 ;;		_readEEPROM
 11212 ;; This function is called by:
 11213 ;;		_vscp_readRegister
 11214 ;;		_vscp_handleProtocolEvent
 11215 ;; This function uses a non-reentrant model
 11216 ;;
 11217                           
 11218                           	psect	text71
 11219  00231E                     __ptext71:
 11220                           	opt stack 0
 11221  00231E                     _vscp_readAppReg:
 11222                           	opt stack 25
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;incstack = 0
 11226                           ;incstack = 0
 11227                           ;vscp_readAppReg@reg stored from wreg
 11228  00231E  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;main.c: 611: uint8_t rv;
 11232                           ;main.c: 613: rv = 0x00;
 11233  002322  6A0B               	clrf	vscp_readAppReg@rv,c
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;main.c: 616: if ( 0 == vscp_page_select ) {
 11237  002324  504F               	movf	_vscp_page_select+1,w,c
 11238  002326  104E               	iorwf	_vscp_page_select,w,c
 11239  002328  E13D               	bnz	l4409
 11240                           
 11241                           ; BSR set to: 0
 11242                           ;main.c: 618: if ( reg == 0x00 ) {
 11243  00232A  660C               	tstfsz	vscp_readAppReg@reg,c
 11244  00232C  D006               	goto	l4385
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;main.c: 619: rv = readEEPROM(0x21 + 0);
 11248  00232E  6A09               	clrf	?_readEEPROM+1,c
 11249  002330  0E21               	movlw	33
 11250  002332  6E08               	movwf	?_readEEPROM,c
 11251  002334  ECD3  F014         	call	_readEEPROM	;wreg free
 11252  002338  D043               	goto	L40
 11253  00233A                     l4385:
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;main.c: 622: else if ( reg == 0x01 ) {
 11257  00233A  040C               	decf	vscp_readAppReg@reg,w,c
 11258  00233C  E106               	bnz	l4389
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;main.c: 623: rv = readEEPROM(0x21 + 1);
 11262  00233E  6A09               	clrf	?_readEEPROM+1,c
 11263  002340  0E22               	movlw	34
 11264  002342  6E08               	movwf	?_readEEPROM,c
 11265  002344  ECD3  F014         	call	_readEEPROM	;wreg free
 11266  002348  D03B               	goto	L40
 11267  00234A                     l4389:
 11268                           
 11269                           ; BSR set to: 0
 11270                           ;main.c: 626: else if ( ( reg >= 2 ) && ( reg <= 19 ) ) {
 11271  00234A  0E01               	movlw	1
 11272  00234C  640C               	cpfsgt	vscp_readAppReg@reg,c
 11273  00234E  D00C               	goto	l4395
 11274                           
 11275                           ; BSR set to: 0
 11276  002350  0E14               	movlw	20
 11277  002352  600C               	cpfslt	vscp_readAppReg@reg,c
 11278  002354  D009               	goto	l4395
 11279                           
 11280                           ; BSR set to: 0
 11281                           ;main.c: 627: rv = readEEPROM( 0x21 + 2 +
 11282                           ;main.c: 628: ( reg - 2 ) );
 11283  002356  0E21               	movlw	33
 11284  002358  240C               	addwf	vscp_readAppReg@reg,w,c
 11285  00235A  6E08               	movwf	?_readEEPROM,c
 11286  00235C  6A09               	clrf	?_readEEPROM+1,c
 11287  00235E  0E00               	movlw	0
 11288  002360  2209               	addwfc	?_readEEPROM+1,f,c
 11289  002362  ECD3  F014         	call	_readEEPROM	;wreg free
 11290  002366  D02C               	goto	L40
 11291  002368                     l4395:
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;main.c: 631: else if ( reg == 20 ) {
 11295  002368  500C               	movf	vscp_readAppReg@reg,w,c
 11296  00236A  0A14               	xorlw	20
 11297  00236C  E106               	bnz	l4399
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;main.c: 632: rv = readEEPROM(0x21 + 20);
 11301  00236E  6A09               	clrf	?_readEEPROM+1,c
 11302  002370  0E35               	movlw	53
 11303  002372  6E08               	movwf	?_readEEPROM,c
 11304  002374  ECD3  F014         	call	_readEEPROM	;wreg free
 11305  002378  D023               	goto	L40
 11306  00237A                     l4399:
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;main.c: 635: else if ( reg == 21 ) {
 11310  00237A  500C               	movf	vscp_readAppReg@reg,w,c
 11311  00237C  0A15               	xorlw	21
 11312  00237E  E106               	bnz	l4403
 11313                           
 11314                           ; BSR set to: 0
 11315                           ;main.c: 636: rv = readEEPROM(0x21 + 21);
 11316  002380  6A09               	clrf	?_readEEPROM+1,c
 11317  002382  0E36               	movlw	54
 11318  002384  6E08               	movwf	?_readEEPROM,c
 11319  002386  ECD3  F014         	call	_readEEPROM	;wreg free
 11320  00238A  D01A               	goto	L40
 11321  00238C                     l4403:
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;main.c: 639: else if ( reg == 22 ) {
 11325  00238C  500C               	movf	vscp_readAppReg@reg,w,c
 11326  00238E  0A16               	xorlw	22
 11327  002390  E118               	bnz	l4415
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;main.c: 640: rv = readEEPROM(0x21 + 22);
 11331  002392  6A09               	clrf	?_readEEPROM+1,c
 11332  002394  0E37               	movlw	55
 11333  002396  6E08               	movwf	?_readEEPROM,c
 11334  002398  ECD3  F014         	call	_readEEPROM	;wreg free
 11335  00239C  6E0B               	movwf	vscp_readAppReg@rv,c
 11336                           
 11337                           ;main.c: 641: rv &= 0x03;
 11338  00239E  0E03               	movlw	3
 11339  0023A0  160B               	andwf	vscp_readAppReg@rv,f,c
 11340  0023A2  D00F               	goto	l4415
 11341  0023A4                     l4409:
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;main.c: 645: else if ( 1 == vscp_page_select ) {
 11345  0023A4  044E               	decf	_vscp_page_select,w,c
 11346  0023A6  104F               	iorwf	_vscp_page_select+1,w,c
 11347  0023A8  E10C               	bnz	l4415
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;main.c: 648: if ( ( reg >= 0 ) && ( reg <= ( 0 +
 11351                           ;main.c: 649: ( 8 * 8 ) ) ) ) {
 11352  0023AA  0E41               	movlw	65
 11353  0023AC  600C               	cpfslt	vscp_readAppReg@reg,c
 11354  0023AE  D009               	goto	l4415
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;main.c: 650: rv = readEEPROM(0x21 + 0x21 +
 11358                           ;main.c: 651: 23 + ( reg - 0 ) );
 11359  0023B0  0E59               	movlw	89
 11360  0023B2  240C               	addwf	vscp_readAppReg@reg,w,c
 11361  0023B4  6E08               	movwf	?_readEEPROM,c
 11362  0023B6  6A09               	clrf	?_readEEPROM+1,c
 11363  0023B8  0E00               	movlw	0
 11364  0023BA  2209               	addwfc	?_readEEPROM+1,f,c
 11365  0023BC  ECD3  F014         	call	_readEEPROM	;wreg free
 11366  0023C0                     L40:
 11367  0023C0  6E0B               	movwf	vscp_readAppReg@rv,c
 11368  0023C2                     l4415:
 11369                           
 11370                           ;main.c: 652: }
 11371                           ;main.c: 654: }
 11372                           ;main.c: 656: return rv;
 11373  0023C2  500B               	movf	vscp_readAppReg@rv,w,c
 11374  0023C4  0012               	return	
 11375  0023C6                     __end_of_vscp_readAppReg:
 11376                           	opt stack 0
 11377                           tblptru	equ	0xFF8
 11378                           tblptrh	equ	0xFF7
 11379                           tblptrl	equ	0xFF6
 11380                           tablat	equ	0xFF5
 11381                           prodh	equ	0xFF4
 11382                           prodl	equ	0xFF3
 11383                           intcon	equ	0xFF2
 11384                           postinc0	equ	0xFEE
 11385                           wreg	equ	0xFE8
 11386                           indf1	equ	0xFE7
 11387                           fsr1h	equ	0xFE2
 11388                           fsr1l	equ	0xFE1
 11389                           indf2	equ	0xFDF
 11390                           postinc2	equ	0xFDE
 11391                           postdec2	equ	0xFDD
 11392                           plusw2	equ	0xFDB
 11393                           fsr2h	equ	0xFDA
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _interrupt_at_low_vector *****************
 11398 ;; Defined at:
 11399 ;;		line 144 in file "../main.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;		None
 11404 ;; Return value:  Size  Location     Type
 11405 ;;		None               void
 11406 ;; Registers used:
 11407 ;;		wreg, status,2, status,0, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11415 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11417 ;;Total ram usage:        3 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:    1
 11420 ;; This function calls:
 11421 ;;		i1_WriteTimer0
 11422 ;; This function is called by:
 11423 ;;		Interrupt level 1
 11424 ;; This function uses a non-reentrant model
 11425 ;;
 11426                           
 11427                           	psect	intcodelo
 11428  000018                     __pintcodelo:
 11429                           	opt stack 0
 11430  000018                     _interrupt_at_low_vector:
 11431                           	opt stack 22
 11432                           
 11433                           ;incstack = 0
 11434  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 11435  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 11436  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 11437  000024                     
 11438                           ;main.c: 146: if ( INTCONbits.TMR0IF ) {
 11439  000024  A4F2               	btfss	intcon,2,c	;volatile
 11440  000026  D001               	goto	i1u494_21
 11441  000028  D001               	goto	i1u494_20
 11442  00002A                     i1u494_21:
 11443  00002A  D03E               	goto	i1l129
 11444  00002C                     i1u494_20:
 11445  00002C                     
 11446                           ;main.c: 149: WriteTimer0(0xfb1d);
 11447  00002C  0EFB               	movlw	251
 11448  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 11449  000030  0E1D               	movlw	29
 11450  000032  6E01               	movwf	?i1_WriteTimer0,c
 11451  000034  EC09  F015         	call	i1_WriteTimer0	;wreg free
 11452  000038                     
 11453                           ;main.c: 151: vscp_timer++;
 11454  000038  0100               	movlb	0	; () banked
 11455  00003A  4B66               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 11456  00003C  2B67               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 11457  00003E                     
 11458                           ; BSR set to: 0
 11459                           ;main.c: 152: vscp_configtimer++;
 11460  00003E  4B64               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 11461  000040  2B65               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 11462  000042                     
 11463                           ; BSR set to: 0
 11464                           ;main.c: 153: measurement_clock++;
 11465  000042  0E01               	movlw	1
 11466  000044  2760               	addwf	_measurement_clock& (0+255),f,b	;volatile
 11467  000046  0E00               	movlw	0
 11468  000048  2361               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 11469  00004A  0E00               	movlw	0
 11470  00004C  2362               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 11471  00004E  0E00               	movlw	0
 11472  000050  2363               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 11473  000052                     
 11474                           ; BSR set to: 0
 11475                           ;main.c: 156: if ( PORTCbits.RC0 ) {
 11476  000052  A082               	btfss	3970,0,c	;volatile
 11477  000054  D001               	goto	i1u495_21
 11478  000056  D001               	goto	i1u495_20
 11479  000058                     i1u495_21:
 11480  000058  D002               	goto	i1l5179
 11481  00005A                     i1u495_20:
 11482  00005A                     
 11483                           ; BSR set to: 0
 11484                           ;main.c: 157: vscp_initbtncnt = 0;
 11485  00005A  6B6E               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 11486                           
 11487                           ;main.c: 158: } else {
 11488  00005C  D001               	goto	i1l121
 11489  00005E                     i1l5179:
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;main.c: 160: vscp_initbtncnt++;
 11493  00005E  2B6E               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 11494  000060                     i1l121:
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;main.c: 161: }
 11498                           ;main.c: 164: vscp_statuscnt++;
 11499  000060  2A54               	incf	_vscp_statuscnt,f,c	;volatile
 11500  000062                     
 11501                           ; BSR set to: 0
 11502                           ;main.c: 165: if ( ( 0x02 == vscp_initledfunc ) &&
 11503                           ;main.c: 166: ( vscp_statuscnt > 100 ) ) {
 11504  000062  5052               	movf	_vscp_initledfunc,w,c
 11505  000064  0A02               	xorlw	2
 11506  000066  A4D8               	btfss	status,2,c
 11507  000068  D001               	goto	i1u496_21
 11508  00006A  D001               	goto	i1u496_20
 11509  00006C                     i1u496_21:
 11510  00006C  D00E               	goto	i1l5189
 11511  00006E                     i1u496_20:
 11512  00006E                     
 11513                           ; BSR set to: 0
 11514  00006E  0E64               	movlw	100
 11515  000070  6454               	cpfsgt	_vscp_statuscnt,c	;volatile
 11516  000072  D001               	goto	i1u497_21
 11517  000074  D001               	goto	i1u497_20
 11518  000076                     i1u497_21:
 11519  000076  D009               	goto	i1l5189
 11520  000078                     i1u497_20:
 11521  000078                     
 11522                           ; BSR set to: 0
 11523                           ;main.c: 168: if ( PORTCbits.RC1 ) {
 11524  000078  A282               	btfss	3970,1,c	;volatile
 11525  00007A  D001               	goto	i1u498_21
 11526  00007C  D001               	goto	i1u498_20
 11527  00007E                     i1u498_21:
 11528  00007E  D002               	goto	i1l123
 11529  000080                     i1u498_20:
 11530  000080                     
 11531                           ; BSR set to: 0
 11532                           ;main.c: 169: PORTCbits.RC1 = 0;
 11533  000080  9282               	bcf	3970,1,c	;volatile
 11534                           
 11535                           ;main.c: 170: }
 11536  000082  D001               	goto	i1l124
 11537  000084                     i1l123:
 11538                           
 11539                           ; BSR set to: 0
 11540                           ;main.c: 171: else {
 11541                           ;main.c: 172: PORTCbits.RC1 = 1;
 11542  000084  8282               	bsf	3970,1,c	;volatile
 11543  000086                     i1l124:
 11544                           
 11545                           ; BSR set to: 0
 11546                           ;main.c: 173: }
 11547                           ;main.c: 175: vscp_statuscnt = 0;
 11548  000086  6A54               	clrf	_vscp_statuscnt,c	;volatile
 11549                           
 11550                           ;main.c: 177: }
 11551  000088  D00E               	goto	i1l125
 11552  00008A                     i1l5189:
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;main.c: 178: else if (0x01 == vscp_initledfunc) {
 11556  00008A  0452               	decf	_vscp_initledfunc,w,c
 11557  00008C  A4D8               	btfss	status,2,c
 11558  00008E  D001               	goto	i1u499_21
 11559  000090  D001               	goto	i1u499_20
 11560  000092                     i1u499_21:
 11561  000092  D003               	goto	i1l126
 11562  000094                     i1u499_20:
 11563  000094                     
 11564                           ; BSR set to: 0
 11565                           ;main.c: 179: PORTCbits.RC1 = 1;
 11566  000094  8282               	bsf	3970,1,c	;volatile
 11567                           
 11568                           ;main.c: 180: vscp_statuscnt = 0;
 11569  000096  6A54               	clrf	_vscp_statuscnt,c	;volatile
 11570                           
 11571                           ;main.c: 181: }
 11572  000098  D006               	goto	i1l125
 11573  00009A                     i1l126:
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;main.c: 182: else if (0x00 == vscp_initledfunc) {
 11577  00009A  6652               	tstfsz	_vscp_initledfunc,c
 11578  00009C  D001               	goto	i1u500_21
 11579  00009E  D001               	goto	i1u500_20
 11580  0000A0                     i1u500_21:
 11581  0000A0  D002               	goto	i1l125
 11582  0000A2                     i1u500_20:
 11583  0000A2                     
 11584                           ; BSR set to: 0
 11585                           ;main.c: 183: PORTCbits.RC1 = 0;
 11586  0000A2  9282               	bcf	3970,1,c	;volatile
 11587                           
 11588                           ;main.c: 184: vscp_statuscnt = 0;
 11589  0000A4  6A54               	clrf	_vscp_statuscnt,c	;volatile
 11590  0000A6                     i1l125:
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;main.c: 185: }
 11594                           ;main.c: 187: INTCONbits.TMR0IF = 0;
 11595  0000A6  94F2               	bcf	intcon,2,c	;volatile
 11596  0000A8                     i1l129:
 11597  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 11598  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 11599  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 11600  0000B4  0010               	retfie	
 11601  0000B6                     __end_of_interrupt_at_low_vector:
 11602                           	opt stack 0
 11603                           tblptru	equ	0xFF8
 11604                           tblptrh	equ	0xFF7
 11605                           tblptrl	equ	0xFF6
 11606                           tablat	equ	0xFF5
 11607                           prodh	equ	0xFF4
 11608                           prodl	equ	0xFF3
 11609                           intcon	equ	0xFF2
 11610                           postinc0	equ	0xFEE
 11611                           wreg	equ	0xFE8
 11612                           indf1	equ	0xFE7
 11613                           fsr1h	equ	0xFE2
 11614                           fsr1l	equ	0xFE1
 11615                           bsr	equ	0xFE0
 11616                           indf2	equ	0xFDF
 11617                           postinc2	equ	0xFDE
 11618                           postdec2	equ	0xFDD
 11619                           plusw2	equ	0xFDB
 11620                           fsr2h	equ	0xFDA
 11621                           fsr2l	equ	0xFD9
 11622                           status	equ	0xFD8
 11623                           
 11624 ;; *************** function i1_WriteTimer0 *****************
 11625 ;; Defined at:
 11626 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;  timer0          2    0[COMRAM] unsigned int 
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 11631 ;; Return value:  Size  Location     Type
 11632 ;;		None               void
 11633 ;; Registers used:
 11634 ;;		None
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11640 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11641 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11643 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11644 ;;Total ram usage:        4 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; This function calls:
 11647 ;;		Nothing
 11648 ;; This function is called by:
 11649 ;;		_interrupt_at_low_vector
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           	psect	text73
 11654  002A12                     __ptext73:
 11655                           	opt stack 0
 11656  002A12                     i1_WriteTimer0:
 11657                           	opt stack 22
 11658                           
 11659                           ;incstack = 0
 11660                           ;incstack = 0
 11661  002A12  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 11662  002A16  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 11663  002A1A  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 11664  002A1E  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 11665  002A22  0012               	return	
 11666  002A24                     __end_ofi1_WriteTimer0:
 11667                           	opt stack 0
 11668                           tblptru	equ	0xFF8
 11669                           tblptrh	equ	0xFF7
 11670                           tblptrl	equ	0xFF6
 11671                           tablat	equ	0xFF5
 11672                           prodh	equ	0xFF4
 11673                           prodl	equ	0xFF3
 11674                           intcon	equ	0xFF2
 11675                           postinc0	equ	0xFEE
 11676                           wreg	equ	0xFE8
 11677                           indf1	equ	0xFE7
 11678                           fsr1h	equ	0xFE2
 11679                           fsr1l	equ	0xFE1
 11680                           bsr	equ	0xFE0
 11681                           indf2	equ	0xFDF
 11682                           postinc2	equ	0xFDE
 11683                           postdec2	equ	0xFDD
 11684                           plusw2	equ	0xFDB
 11685                           fsr2h	equ	0xFDA
 11686                           fsr2l	equ	0xFD9
 11687                           status	equ	0xFD8
 11688                           tblptru	equ	0xFF8
 11689                           tblptrh	equ	0xFF7
 11690                           tblptrl	equ	0xFF6
 11691                           tablat	equ	0xFF5
 11692                           prodh	equ	0xFF4
 11693                           prodl	equ	0xFF3
 11694                           intcon	equ	0xFF2
 11695                           postinc0	equ	0xFEE
 11696                           wreg	equ	0xFE8
 11697                           indf1	equ	0xFE7
 11698                           fsr1h	equ	0xFE2
 11699                           fsr1l	equ	0xFE1
 11700                           bsr	equ	0xFE0
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709                           	psect	rparam
 11710  0000                     tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           postinc0	equ	0xFEE
 11718                           wreg	equ	0xFE8
 11719                           indf1	equ	0xFE7
 11720                           fsr1h	equ	0xFE2
 11721                           fsr1l	equ	0xFE1
 11722                           bsr	equ	0xFE0
 11723                           indf2	equ	0xFDF
 11724                           postinc2	equ	0xFDE
 11725                           postdec2	equ	0xFDD
 11726                           plusw2	equ	0xFDB
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           tblptru	equ	0xFF8
 11731                           tblptrh	equ	0xFF7
 11732                           tblptrl	equ	0xFF6
 11733                           tablat	equ	0xFF5
 11734                           prodh	equ	0xFF4
 11735                           prodl	equ	0xFF3
 11736                           intcon	equ	0xFF2
 11737                           postinc0	equ	0xFEE
 11738                           wreg	equ	0xFE8
 11739                           indf1	equ	0xFE7
 11740                           fsr1h	equ	0xFE2
 11741                           fsr1l	equ	0xFE1
 11742                           bsr	equ	0xFE0
 11743                           indf2	equ	0xFDF
 11744                           postinc2	equ	0xFDE
 11745                           postdec2	equ	0xFDD
 11746                           plusw2	equ	0xFDB
 11747                           fsr2h	equ	0xFDA
 11748                           fsr2l	equ	0xFD9
 11749                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     77      84
    BANK0           160     47      95
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _main->_vscp_doOneSecondWork
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_actionSet
    _doDM->_actionClr
    _doDM->_actionSetAll
    _doDM->_actionClrAll
    _actionClrAll->_readEEPROM
    _actionSetAll->_readEEPROM
    _actionClr->_readEEPROM
    _actionSet->_readEEPROM
    _vscp_handleProtocolEvent->_vscp_newNodeOnline
    _vscp_writeRegister->_vscp_writeStdReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_vscp_readAppReg
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26431
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2398
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                11    11      0     646
                                             11 COMRAM    11    11      0
                         _readEEPROM
                          _actionSet
                          _actionClr
                       _actionSetAll
                       _actionClrAll
 ---------------------------------------------------------------------------------
 (2) _actionClrAll                                         2     1      1       0
                                             10 COMRAM     1     0      1
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _actionSetAll                                         2     1      1       0
                                             10 COMRAM     1     0      1
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _actionClr                                            2     1      1       0
                                             10 COMRAM     1     0      1
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (2) _actionSet                                            2     1      1       0
                                             10 COMRAM     1     0      1
                         _readEEPROM (ARG)
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   14158
                                             20 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1    2055
                                             21 COMRAM     2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    1385
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     270
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     270
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     5     4      1     560
                                             12 COMRAM     3     2      1
                        _writeEEPROM
                         _readEEPROM
                    _vscp_readAppReg (ARG)
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1357
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0     995
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      67
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      67
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      45
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      67
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     178
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      45
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     177
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (5) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (6) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (7) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     243
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      45
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     158
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (3) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     296
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (9) i1_WriteTimer0                                        4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _vscp_readAppReg (ARG)
         _readEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _vscp_readAppReg (ARG)
           _readEEPROM
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
     ___lbmod
   _doDM
     _readEEPROM
     _actionSet
       _readEEPROM (ARG)
     _actionClr
       _readEEPROM (ARG)
     _actionSetAll
       _readEEPROM (ARG)
     _actionClrAll
       _readEEPROM (ARG)
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2F      5F       5       59.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4D      54       1       88.4%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       B       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B3       6        0.0%
DATA                 0      0      BE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Wed Apr 22 10:35:25 2015

                __end_of_vscp_readAppReg 23C6                    __end_of_sendVSCPFrame 2270  
                                     PL2 18B2                                       PL4 1DB8  
                                     PL6 18CA                                       PL8 1C9E  
           ?_vscp_writeNicknamePermanent 0001              ??_vscp_getRegisterPagesUsed 0008  
                                     bsr 000FE0      vscp_writeNicknamePermanent@nickname 000B  
                __end_of_vscp_readStdReg 1A56                                      PL10 1DCC  
                                    PL20 1CC0                                      PL12 14CE  
                                    PL30 1F0C                                      PL22 1CD2  
                                    PL14 1DDC                                      PL40 1508  
                                    PL32 16F6                                      PL24 1DEE  
                                    PL16 1CAC                                      PL34 14FA  
                                    PL26 1A56                                      PL18 14E6  
                                    PL36 1E02                                      PL28 1CE6  
                                    PL38 1A6A                                      l133 203A  
                                    l142 207E                                      l146 2098  
                                    l165 22D8                                      l261 174A  
                                    l263 1766                                      l600 15E2  
                     vscp_readStdReg@idx 0019                                      l610 1668  
                                    l602 15F2                                      l611 1682  
                                    l374 2654                                      l811 2680  
                                    l900 201C                                      l638 24CA  
                                    l590 1594                                      l566 1B40  
                                    l592 15A2                                      l568 1B5E  
                                    l753 25AA                                      l594 15B2  
                                    l579 154A                                      l596 15C2  
                                    l589 1604                                      l598 15D2  
                                    l934 10DC                       vscp_readStdReg@reg 001C  
                                    l776 21A6                                      l768 21B8  
                                    l960 12A8                                      l777 2186  
                                    l769 2144                                      l958 1258  
                                    l959 126C                                      l969 12E4  
         __size_of_vscp_handleProbeState 00BA                           getVSCPFrame@id 0028  
                   __end_of_actionClrAll 2A72            __end_of_vscp_handleProbeState 21BC  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                                    wreg 000FE8                     __end_of_actionSetAll 2A74  
            ?_doApplicationOneSecondWork 0001                                     l1017 27C8  
                                   l1036 28E8                                     l1037 28EA  
                                   l5003 193E                                     l5021 1976  
                                   l5013 1960                                     l5111 1FBA  
                                   l4151 1710                                     l5033 199A  
                                   l5025 1982                                     l5017 196C  
                                   l5009 1954                                     l4403 238C  
                                   l5043 19E4                                     l5131 2002  
                                   l5123 1FEE                                     l5107 1FA0  
                                   l5053 1A2C                                     l5029 198E  
                                   l5109 1FA4                                     l5141 201E  
                                   l4173 1782                                     l4415 23C2  
                                   l5063 1A52                                     l4191 186C  
                                   l5231 2036                                     l4409 23A4  
                                   l4425 1E38                                     l4185 1830  
                                   l5331 2128                                     l5315 2104  
                                   l4531 2842                                     l5059 1A42  
                                   l4443 1EBC                                     l4435 1E7C  
                                   l4355 2802                                     l5075 28A8  
                                   l4187 1844                                     l4195 1880  
                                   l5251 206E                                     l5243 205C  
                    vscp_readStdReg@code 0011                                     l3565 2862  
                                   l4701 1562                                     l4429 1E56  
                                   l4349 2822                                     l5093 1F66  
                                   l5157 2732                                     l5149 271C  
                                   l4189 1858                                     l4197 18A8  
                                   l5253 2072                                     l4439 1E9C  
                                   l4455 1F08                                     l5087 1F46  
                                   l5503 1074                                     l5255 2078  
                                   l5271 20B4                                     l5247 2064  
                                   l4385 233A                                     l5353 2162  
                                   l5329 2122                                     l4449 1EE2  
                                   l5513 10A8                                     l5433 0F80  
                                   l5265 2092                                     l4395 2368  
                                   l4803 16CA                                     l4707 1578  
                                   l4715 1582                                     l5355 2166  
                                   l3579 2290                                     l5099 1F82  
                                   l5531 110C                                     l5419 0F78  
                                   l5283 20E0                                     l4389 234A  
                                   l4821 2948                                     l5349 215E  
                                   l3597 22DA                                     l5541 116A  
                                   l5525 10E0                                     l5453 0FA6  
                                   l5269 209C                                     l4399 237A  
                                   l4567 24EC                                     l5623 124C  
                                   l5607 122C                                     l5535 1124  
                                   l5527 10FE                                     l5391 0F2C  
                                   l5295 20F4                vscp_getManufacturerId@idx 000B  
                                   l4809 16E0                                     l5385 21AA  
                                   l5545 1180                                     l5561 11A6  
                                   l5393 0F30                                     l4851 245C  
                                   l4691 1538                                     l4579 278C  
                                   l5731 1358                                     l5651 128C  
                                   l5643 126E                                     l5563 11A8  
                                   l5483 100C                                     l5467 0FB2  
                                   l5395 0F34                                     l5803 146A  
                                   l5299 20FC                                     l4861 248C  
                                   l4853 2464                                     l5709 130E  
                                   l5573 11CC                                     l5565 11B2  
                                   l5493 1040                                     l5397 0F38  
                                   l4863 2496                                     l4855 246E  
                                   l4759 1618                                     l5903 1B44  
                                   l4919 2614                                     l5751 1388  
                                   l5727 1354                                     l5719 1332  
                                   l5655 1294                                     l5591 120C  
                                   l5399 0F3C                                     l5823 256A  
                                   l4865 24A0                                     l4857 2478  
                                   l4769 1638                                     l5673 12C4  
                                   l5833 257C                                     l4859 2482  
                                   l4883 1C38                                     l4795 16B0  
                                   l4787 1684                                     l5915 1B8E  
                                   l5923 1BAC                                     l5851 226E  
                                   l5755 139E                                     l5747 1368  
                                   l5659 129C                                     l5579 11F8  
                                   l4869 24AC                                     l5909 1B60  
                                   l5933 1BD0                                     l5861 2650  
                                   l4965 2964                                     l5781 1418  
                                   l5669 12AA                                     l5829 2574  
                                   l5951 1D44                                     l5935 1BD2  
                                   l4991 1916                                     l4983 1900  
                                   l4975 18EC                                     l5759 13B6  
                                   l5695 12E6                                     l5881 1ADA  
                                   l5857 2622                                     l5777 13F0  
                                   l5769 13D6                                     l5875 1ACC  
                                   l4995 1922                                     l4987 190A  
                                   l4979 18F6                                     l5893 1B04  
                                   l4999 192E                                     u4035 1540  
                                   u4037 1542              __size_of_vscp_getMatrixInfo 0020  
                                   u6005 1D2E                                     u6015 1D4C  
                                   u4355 1C00                           sendCANFrame@id 0037  
                                   u4365 1C10                                     u4375 1C3C  
                                   u4720 1A24                                     u3860 253C  
                                   u4725 1A22                                     u3865 2532  
                                   u4690 19DA                                     u4695 19D8  
                                   u5855 21F8                           sendCANFrame@rv 003E  
                                   u5995 1D1E                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000C                                     _doDM 1704  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 2022                                     _init 268C  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 1E0C                              _vscp_minute 006F  
                            _vscp_second 0074                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B6  
          __size_of_vscp_doOneSecondWork 0050                            __CFG_FOSC$HS2 000000  
                      vscp_getUserID@idx 000B                    __size_of_vscp_setGUID 0020  
                          __CFG_MCLRE$ON 000000                         _vscp_writeStdReg 1F1C  
                            _writeEEPROM 27AC                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 2548  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 0026  
                                  _B0CON 000E80                                    _B1CON 000E90  
                                  ?_doDM 0001                                    _B2CON 000EA0  
                                  _B3CON 000EB0                                    _B4CON 000EC0  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 28D0            ??_vscp_writeNicknamePermanent 000B  
                     writeEEPROM@address 0008                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 2A12                                    _EEADR 000F74  
                        __end_of___lbmod 273A                  _vscp_handleDropNickname 265C  
                                  _BSEL0 000E7D                                    _T0CON 000FD5  
                                  i1l121 0060                                    i1l123 0084  
                                  i1l124 0086                                    i1l125 00A6  
                                  i1l126 009A                                    i1l129 00A8  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 2A56  
             _vscp_readNicknamePermanent 2A4C                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                           _vscp_getGUID 2992                                    doDM@i 0016  
                           _vscp_getZone 2A2E                       vscp_writeAppReg@rv 000E  
                                  _hours 0068                _vscp_getRegisterPagesUsed 2A78  
                 __size_of_vscp_getEvent 002C                             _vscp_setGUID 2816  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 2A7E  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 2760                     _ECANSetOperationMode 293C  
                        __initialization 2876                             __end_of_doDM 18B2  
                           __end_of_main 2102                             __end_of_init 26BC  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                         doDM@class_mask 0011                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 000C  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 004E  
                                 ??_init 000C            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 0F22                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000F73  
                                 _EECON2 000F7E                                   _CIOCON 000F70  
                          doDM@type_mask 0014                       vscp_writeStdReg@rv 0014  
                          ?_init_app_ram 0001                                   _MDSEL0 007B96  
                                 _MDSEL1 007B97                          __CFG_BBSIZ$BB2K 000000  
                                 i1l5171 003E                                   i1l5181 0062  
                                 i1l5173 0042                                   i1l5165 0024  
                                 i1l5191 0094                                   i1l5183 006E  
                                 i1l5175 0052                                   i1l5167 002C  
                                 i1l5193 00A2                                   i1l5185 0078  
                                 i1l5177 005A                                   i1l5169 0038  
                                 i1l5187 0080                                   i1l5179 005E  
                                 i1l5189 008A                               _OpenTimer0 28D0  
                         __CFG_WDTEN$OFF 000000                          _init_app_eeprom 2270  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 26E8                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011                           __CFG_XINST$OFF 000000  
 vscp_handleProtocolEvent@page_save_1029 00AD                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 26BC                                   _doWork 2A6C  
                       OpenTimer0@config 0008                    __size_of_actionClrAll 0002  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@reg 000F               __end_of_vscp_setSegmentCRC 29DC  
                    vscp_writeAppReg@val 000D                                   clear_0 287C  
                                 clear_1 2888                    __size_of_actionSetAll 0002  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00BB  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0070  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 0008  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                             __accesstop 0060                  __end_of__initialization 288E  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                           _actionClrAll 2A70                          writeEEPROM@data 000A  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 2894  
              ??_interrupt_at_low_vector 0005                             _actionSetAll 2A72  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001              __end_of_vscp_check_pstorage 2876  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                     __size_of_actionClr 0002                       __size_of_actionSet 0002  
                    ?_vscp_writeRegister 0016                               __end_ofPL2 18CA  
                             __end_ofPL4 1DCC                               __end_ofPL6 18D8  
                             __end_ofPL8 1CAC                           ??_sendCANFrame 003E  
             __end_of_vscp_getFamilyCode 2A4C                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01E4                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 2A42          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 0016          __size_of_vscp_setManufacturerId 0020  
               __end_of_vscp_writeAppReg 1F0C                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 231E              __end_of_vscp_setControlByte 29CA  
               __end_of_vscp_writeStdReg 2022                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0017          __end_of_vscp_handleDropNickname 268C  
                           _getVSCPFrame 24D4                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 2A7C  
                  vscp_writeRegister@reg 0017                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 0008  
        __end_of_vscp_getSubMinorVersion 2A80                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0050                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000B  
                                _B5RXFUL 007687                         WriteTimer0@timer 000A  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000E43                                  _BRGCON2 000E44  
                                _BRGCON3 000E45                      vscp_writeStdReg@reg 0015  
           __end_of_vscp_doOneSecondWork 2598                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
        __end_of_interrupt_at_low_vector 00B6                 vscp_readStdReg@code_1002 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 2102  
                                _RXB0CON 000F60                                  _RXB1CON 000F30  
                                _RXB0FUL 007B07                         __ECANPointBuffer 2456  
             __end_of_vscp_getMatrixInfo 2856                                  _TXB0CON 000F20  
                                _TXB1CON 000F10                                  _TXB2CON 000F00  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                     _vscp_goActiveState 28B2                        __end_of_actionClr 2A76  
                      __end_of_actionSet 2A78                   __size_of_sendVSCPFrame 00B4  
           __end_of_vscp_getMajorVersion 2A84                       __size_of_vscp_init 0044  
                             _readEEPROM 29A6                   _vscp_getManufacturerId 296A  
                 _vscp_setManufacturerId 27F6                        actionSetAll@param 000B  
                        _ECANSendMessage 1A76                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0072  
             __end_of_vscp_getSegmentCRC 2A60               ??_vscp_handleProtocolEvent 00A4  
                          ??_getCANFrame 001C        __end_of_vscp_getRegisterPagesUsed 2A7A  
               __size_of_vscp_getMDF_URL 001C                                  ___lbmod 2712  
                        getCANFrame@pdlc 001A                                _FIFOEMPTY 007B8F  
                        __size_of_doWork 0002                             __psmallconst 0F00  
                   __end_of_init_app_ram 2A00                       _vscp_sendHeartBeat 273A  
                                __pcinit 2876                           _vscp_deviceURL 0F00  
                                __ramtop 0F00                      __size_of_OpenTimer0 001E  
                                __ptext0 2022                                  __ptext1 2A6C  
                                __ptext2 2A6E                                  __ptext3 2548  
                                __ptext4 273A                                  __ptext5 2A24  
                                __ptext6 2A2E                                  __ptext7 2A68  
                                __ptext8 1704                                  __ptext9 2A70  
                         _vscp_getUserID 297E                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                    vscp_writeStdReg@value 000F  
                    ?_vscp_sendHeartBeat 00A4                 ??_vscp_handleSetNickname 000C  
                                _minutes 0069                                  _seconds 006A  
                      __CFG_MSSPMSK$MSK7 000000                      __end_of_WriteTimer0 2A12  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 000B  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00B1  
                   end_of_initialization 288E             __end_of_vscp_handleHeartbeat 261C  
               __size_of_vscp_getSubzone 000A                     __end_of_sendCANFrame 265C  
              vscp_handleProtocolEvent@i 00BD                vscp_handleProtocolEvent@j 00BE  
              vscp_handleProtocolEvent@k 00B8                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 2760                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0090                           _vscp_setUserID 2924  
                                postinc0 000FEE                                  postinc2 000FDE  
                       actionClr@dmflags 0001                   __end_of_vscp_deviceURL 0F20  
    __end_of_vscp_writeNicknamePermanent 29EE              _vscp_writeNicknamePermanent 29DC  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 21BC  
                 __end_of_vscp_getUserID 2992             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0077CB                        __end_of_vscp_init 25DC  
                         _vscp_probe_cnt 0073                                _PORTCbits 000F82  
                    __end_of_getCANFrame 27AC            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00A8  
                       ___lbmod@dividend 0009                           _vscp_statuscnt 0054  
               __size_of_vscp_readStdReg 017E                       _vscp_setSegmentCRC 29CA  
                      readEEPROM@address 0008               vscp_handleProtocolEvent@cb 00B6  
                __end_of_ECANSendMessage 1BDA                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 0015                     __end_of__RegsToCANID 1C9E  
                            ?_readEEPROM 0008                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 2786                               _vscp_error 2A68  
                   _vscp_doOneSecondWork 2548                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0066                   __end_of_vscp_setUserID 293C  
                 vscp_sendHeartBeat@zone 004C                           ?_sendVSCPFrame 003F  
                   __size_of_writeEEPROM 0026                          ?_vscp_getUserID 0001  
                    actionSetAll@dmflags 0001                           __end_of_doWork 2A6E  
           __end_of_vscp_getMinorVersion 2A82                              _WriteTimer0 2A00  
                   _vscp_getMajorVersion 2A82                     ??_vscp_setSegmentCRC 000B  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                            __end_ofPL10 1DDC                              __end_ofPL20 1CD2  
                            __end_ofPL12 14E6                        ?_vscp_writeAppReg 000D  
                            __end_ofPL30 1F1C                              __end_ofPL22 1CE6  
                            __end_ofPL14 1DEE                              __end_ofPL40 1512  
                            __end_ofPL32 1704                              __end_ofPL24 1E02  
                            __end_ofPL16 1CC0                              __end_ofPL34 1508  
                            __end_ofPL26 1A6A                              __end_ofPL18 14FA  
                            __end_ofPL36 1E0C                              __end_ofPL28 1CF8  
                            __end_ofPL38 1A76                      start_initialization 2876  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 000E  
                      ?_vscp_writeStdReg 000F              __size_of_vscp_newNodeOnline 002A  
                           ??_OpenTimer0 0008                       ??_vscp_writeStdReg 0010  
                     _vscp_getFamilyCode 2A42                           ??__CANIDToRegs 000F  
                     _vscp_getFamilyType 2A38                         doDM@class_filter 000F  
                    sendVSCPFrame@nodeid 0042                        _vscp_readRegister 2954  
                        ?_vscp_sendEvent 0001  vscp_handleProtocolEvent@bytes_this_time 00B5  
                  ?_vscp_doOneSecondWork 0001                    ECANReceiveMessage@ptr 0018  
                    ?_vscp_getFamilyCode 0008                       ?_vscp_readRegister 0001  
       __end_of_vscp_handleProtocolEvent 14CE                          ?_vscp_setUserID 000B  
                    ?_vscp_getFamilyType 0008                    __size_of_init_app_ram 0012  
               ?_vscp_handleDropNickname 0001                        ??_vscp_getSubzone 000B  
               __end_of__ECANPointBuffer 24D4                        __CANIDToRegs@type 000E  
                            _getCANFrame 2786                                 ??_doWork 0008  
                     _vscp_getBufferSize 2A7A              vscp_handleProtocolEvent@len 00B2  
            vscp_handleProtocolEvent@pos 00B0               __end_of_ECANReceiveMessage 16F6  
                    ??_vscp_readRegister 001D           __size_of_vscp_goBootloaderMode 001A  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 2A24  
          __end_of_vscp_goBootloaderMode 2924                           actionClr@param 000B  
                   _vscp_handleHeartbeat 25DC                       __end_of_OpenTimer0 28EE  
    __size_of_doApplicationOneSecondWork 0002                      ?_vscp_getBufferSize 0001  
                    __size_of_readEEPROM 0012             __size_of_vscp_check_pstorage 0020  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 004E                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 0090  
                       _vscp_alarmstatus 006B                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 001E                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000B                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 296A                             _init_app_ram 29EE  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                              _actionClr 2A74                                _actionSet 2A76  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 2836  
                 _vscp_handleSetNickname 27D2            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 0090                           _ECANInitialize 23C6  
                               ?___lbmod 0008                           actionSet@param 000B  
                    ?_vscp_getMatrixInfo 0001                          vscp_getGUID@idx 000B  
                            __pintcodelo 0018         vscp_handleProtocolEvent@len_1019 00B4  
                  ?_vscp_handleHeartbeat 0001                  vscp_readStdReg@idx_1003 001A  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 261C  
                            __smallconst 0F00                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 2A56                         actionSet@dmflags 0001  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
         __end_of_vscp_getManufacturerId 297E           __end_of_vscp_setManufacturerId 2816  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1018 00B3  
                        doDM@type_filter 0013                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0064                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                     _vscp_getMinorVersion 2A80  
                              _sendTimer 0051                               ?_actionClr 000B  
                             ?_actionSet 000B                   __end_of_ECANInitialize 2456  
                               i1u500_20 00A2                                 i1u500_21 00A0  
                               i1u494_20 002C                                 i1u494_21 002A  
                               i1u495_20 005A                                 i1u495_21 0058  
                               i1u496_20 006E                                 i1u496_21 006C  
                               i1u497_20 0078                                 i1u497_21 0076  
                               i1u498_20 0080                                 i1u498_21 007E  
                               i1u499_20 0094                                 i1u499_21 0092  
                               _PIR4bits 000FB7                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 26E8  
                               _RXF0EIDH 000EE2                                 _RXF0EIDL 000EE3  
                               _RXB0OVFL 007B8F                                 _RXF1EIDH 000EE6  
                               _RXF1EIDL 000EE7                                 _RXB1OVFL 007B8E  
                               _RXF0SIDH 000EE0                                 _RXF0SIDL 000EE1  
                               _RXF1SIDH 000EE4                                 _RXF1SIDL 000EE5  
                               _RXM0EIDH 000EFA                                 _RXM0EIDL 000EFB  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000EFE  
                               _RXM1EIDL 000EFF                     ??_vscp_getSegmentCRC 000B  
                               _RXFBCON0 000E71                                 _RXFBCON1 000E72  
                               _RXFBCON2 000E73                                 _RXFBCON3 000E74  
                               _RXFBCON4 000E75                                 _RXFBCON5 000E76  
                               _RXFBCON6 000E77                                 _RXFBCON7 000E78  
                               _RXM0SIDH 000EF8                                 _RXM0SIDL 000EF9  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 1DB8                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 1BDA                       _vscp_probe_address 0053  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 2598                                _vscp_imsg 0075  
                              _vscp_hour 006D                                _vscp_omsg 0083  
                       vscp_setGUID@data 000B        __size_of_vscp_handleProtocolEvent 05AC  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 2A70  
             _doApplicationOneSecondWork 2A6E                         _vscp_page_select 004E  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0060  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 00AE                      actionClrAll@dmflags 0001  
           __end_of_vscp_restoreDefaults 2A68                               _EECON1bits 000F7F  
                          ?_actionClrAll 000B                          ?_ECANInitialize 0001  
                               __Hrparam 0000                     ECANReceiveMessage@id 0014  
            __size_of_vscp_sendHeartBeat 0026                            ?_actionSetAll 000B  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 28EE  
                               __Lrparam 0000                         __CANIDToRegs@val 000A  
                       __CANIDToRegs@ptr 0008                         _vscp_initledfunc 0052  
                       __size_of___lbmod 0028                   ??_vscp_handleHeartbeat 000C  
                       getCANFrame@flags 001D                             ?_WriteTimer0 0008  
                       getCANFrame@pdata 001B                       __end_of_readEEPROM 29B8  
                             ?_vscp_init 0001                                 __ptext10 2A72  
                               __ptext11 2A74                                 __ptext20 27F6  
                               __ptext12 2A76                                 __ptext21 2816  
                               __ptext13 0F22                                 __ptext30 296A  
                               __ptext22 1E0C                                 __ptext14 2712  
                               __ptext31 297E                                 __ptext23 2954  
                               __ptext15 2894                                 __ptext40 2598  
                               __ptext32 29A6                                 __ptext24 18D8  
                               __ptext16 1F1C                                 __ptext41 2A4C  
                               __ptext33 28EE                                 __ptext25 2A78  
                               __ptext17 2A60                                 __ptext50 261C  
                               __ptext42 27D2                                 __ptext34 2992  
                               __ptext26 2A38                                 __ptext18 2270  
                               __ptext51 1A76                                 __ptext43 25DC  
                               __ptext35 2A7E                                 __ptext27 2A42  
                               __ptext19 2924                                 __ptext60 29B8  
                               __ptext52 1CF8                                 __ptext44 2836  
                               __ptext36 2A80                                 __ptext28 2A7A  
                               __ptext61 29CA                                 __ptext53 26BC  
                               __ptext45 290A                                 __ptext37 2A82  
                               __ptext29 2A7C                                 __ptext70 2A00  
                               __ptext62 2A56                                 __ptext54 24D4  
                               __ptext46 2102                                 __ptext38 26E8  
                               __ptext71 231E                                 __ptext63 29DC  
                               __ptext55 2786                                 __ptext47 28B2  
                               __ptext39 265C                                 __ptext64 27AC  
                               __ptext56 1512                                 __ptext48 2760  
                               __ptext73 2A12                                 __ptext65 268C  
                               __ptext57 1BDA                                 __ptext49 21BC  
                               __ptext66 23C6                                 __ptext58 2456  
                               __ptext67 293C                                 __ptext59 2856  
                               __ptext68 28D0                                 __ptext69 29EE  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00A4  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 2A24                         ??_vscp_setUserID 000C  
                          __size_of_doDM 01AE                            __size_of_main 00E0  
                          __size_of_init 0030                           ??_actionClrAll 000C  
                            ??_actionClr 000C                              ??_actionSet 000C  
              __size_of_vscp_writeAppReg 0100                      _vscp_check_pstorage 2856  
                         ??_actionSetAll 000C           vscp_handleProtocolEvent@i_1020 00BC  
         vscp_handleProtocolEvent@i_1017 00BA           vscp_handleProtocolEvent@i_1028 00B7  
                   __end_of_vscp_getGUID 29A6                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 2A38  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      vscp_setUserID@idx 000C                     __end_of_vscp_setGUID 2836  
                     vscp_readAppReg@reg 000C                       ??__ECANPointBuffer 000B  
         vscp_handleProtocolEvent@offset 00AF                              _RXB0FILHIT0 007B00  
                        vscp_setGUID@idx 000C                      __CFG_INTOSCSEL$HIGH 000000  
                       init_app_eeprom@i 000E                         init_app_eeprom@j 000D  
                    _vscp_setControlByte 29B8              __size_of_vscp_setSegmentCRC 0012  
                        _vscp_readAppReg 231E                     ?_vscp_check_pstorage 0001  
                            _RXB1CONbits 000F30         __size_of_vscp_handleDropNickname 0030  
                             _INTCONbits 000FF2             ??_vscp_readNicknamePermanent 000B  
                    ECANReceiveMessage@i 0015                          _vscp_guid_reset 006C  
                        _vscp_readStdReg 18D8             vscp_handleDropNickname@bytes 000C  
             __end_of_vscp_newNodeOnline 2712                       _ECANReceiveMessage 1512  
                         ??_getVSCPFrame 0023                          _vscp_initbtncnt 006E  
                        sendVSCPFrame@id 0047                                 intlevel1 0000  
                 ??_vscp_getMinorVersion 0008                  vscp_getMatrixInfo@pData 0001  
                __end_of_vscp_getMDF_URL 290A                     ?_vscp_setControlByte 0001  
                    ?_ECANReceiveMessage 000F                  ?_vscp_handleSetNickname 0001  
       __size_of_vscp_getSubMinorVersion 0002                          _vscp_node_state 0071  
                           ??_vscp_error 0008                  ECANSendMessage@msgFlags 0019  
                    vscp_getMatrixInfo@i 0008                  vscp_setControlByte@ctrl 000B  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000B  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 000A  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 2A7E              _vscp_getBootLoaderAlgorithm 2A7C  
       __size_of_interrupt_at_low_vector 009E                        actionClrAll@param 000B  
                 ECANSendMessage@dataLen 0018                      __end_of_writeEEPROM 27D2  
                    __ECANPointBuffer@pt 000C                     ??_ECANReceiveMessage 0012  
                  ??_vscp_check_pstorage 000C                   ECANSendMessage@buffers 002E  
                  _vscp_goBootloaderMode 290A             __end_of_ECANSetOperationMode 2954  
                   _vscp_restoreDefaults 2A60              __size_of_vscp_getFamilyCode 000A  
                            ??_vscp_init 000B                  __end_of_vscp_getSubzone 2A2E  
            __size_of_vscp_getFamilyType 000A                               _RXM1EXIDEN 0077EB  
             __end_of_vscp_writeRegister 28B2                       __end_of_vscp_error 2A6C  
                 ECANSendMessage@tempPtr 0031           __end_of_vscp_handleSetNickname 27F6  
     vscp_handleProtocolEvent@bytes_1025 00B9                    ??_vscp_setControlByte 000B  
                   vscp_readRegister@reg 001D             ??_doApplicationOneSecondWork 0008  
                           __CANIDToRegs 1CF8                   __size_ofi1_WriteTimer0 0012  
      vscp_handleProtocolEvent@page_save 00AB              __size_of_vscp_getBufferSize 0002  
               __size_of_ECANSendMessage 0164  
