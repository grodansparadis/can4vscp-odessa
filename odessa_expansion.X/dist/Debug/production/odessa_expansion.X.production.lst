

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Apr 19 18:10:19 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	text51,global,reloc=2,class=CODE,delta=1
    63                           	psect	text52,global,reloc=2,class=CODE,delta=1
    64                           	psect	text53,global,reloc=2,class=CODE,delta=1
    65                           	psect	text54,global,reloc=2,class=CODE,delta=1
    66                           	psect	text55,global,reloc=2,class=CODE,delta=1
    67                           	psect	text56,global,reloc=2,class=CODE,delta=1
    68                           	psect	text57,global,reloc=2,class=CODE,delta=1
    69                           	psect	text58,global,reloc=2,class=CODE,delta=1
    70                           	psect	text59,global,reloc=2,class=CODE,delta=1
    71                           	psect	text60,global,reloc=2,class=CODE,delta=1
    72                           	psect	text61,global,reloc=2,class=CODE,delta=1
    73                           	psect	text62,global,reloc=2,class=CODE,delta=1
    74                           	psect	text63,global,reloc=2,class=CODE,delta=1
    75                           	psect	text64,global,reloc=2,class=CODE,delta=1
    76                           	psect	text65,global,reloc=2,class=CODE,delta=1
    77                           	psect	text66,global,reloc=2,class=CODE,delta=1
    78                           	psect	text67,global,reloc=2,class=CODE,delta=1
    79                           	psect	text68,global,reloc=2,class=CODE,delta=1
    80                           	psect	text69,global,reloc=2,class=CODE,delta=1
    81                           	psect	text70,global,reloc=2,class=CODE,delta=1
    82                           	psect	text71,global,reloc=2,class=CODE,delta=1
    83                           	psect	text72,global,reloc=2,class=CODE,delta=1
    84                           	psect	text73,global,reloc=2,class=CODE,delta=1
    85                           	psect	text74,global,reloc=2,class=CODE,delta=1
    86                           	psect	text75,global,reloc=2,class=CODE,delta=1
    87                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    88                           	psect	text77,global,reloc=2,class=CODE,delta=1
    89                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    90                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    91                           	psect	pa_nodes,global,class=CODE,delta=1
    92  0000                     tblptru	equ	0xFF8
    93                           tblptrh	equ	0xFF7
    94                           tblptrl	equ	0xFF6
    95                           tablat	equ	0xFF5
    96                           prodh	equ	0xFF4
    97                           prodl	equ	0xFF3
    98                           intcon	equ	0xFF2
    99                           wreg	equ	0xFE8
   100                           indf1	equ	0xFE7
   101                           fsr1h	equ	0xFE2
   102                           fsr1l	equ	0xFE1
   103                           indf2	equ	0xFDF
   104                           postinc2	equ	0xFDE
   105                           postdec2	equ	0xFDD
   106                           plusw2	equ	0xFDB
   107                           fsr2h	equ	0xFDA
   108                           fsr2l	equ	0xFD9
   109                           status	equ	0xFD8
   110                           
   111                           	psect	smallconst
   112  000F00                     __psmallconst:
   113                           	opt stack 0
   114  000F00                     _vscp_deviceURL:
   115                           	opt stack 0
   116  000F00  77                 	db	119
   117  000F01  77                 	db	119
   118  000F02  77                 	db	119
   119  000F03  2E                 	db	46
   120  000F04  65                 	db	101
   121  000F05  75                 	db	117
   122  000F06  72                 	db	114
   123  000F07  6F                 	db	111
   124  000F08  73                 	db	115
   125  000F09  6F                 	db	111
   126  000F0A  75                 	db	117
   127  000F0B  72                 	db	114
   128  000F0C  63                 	db	99
   129  000F0D  65                 	db	101
   130  000F0E  2E                 	db	46
   131  000F0F  73                 	db	115
   132  000F10  65                 	db	101
   133  000F11  2F                 	db	47
   134  000F12  6F                 	db	111
   135  000F13  64                 	db	100
   136  000F14  65                 	db	101
   137  000F15  73                 	db	115
   138  000F16  73                 	db	115
   139  000F17  61                 	db	97
   140  000F18  5F                 	db	95
   141  000F19  30                 	db	48
   142  000F1A  31                 	db	49
   143  000F1B  30                 	db	48
   144  000F1C  2E                 	db	46
   145  000F1D  78                 	db	120
   146  000F1E  6D                 	db	109
   147  000F1F  6C                 	db	108
   148  000F20  00                 	db	0
   149  000F21                     __end_of_vscp_deviceURL:
   150                           	opt stack 0
   151  0000                     _BRGCON1	set	3651
   152  0000                     _BRGCON2	set	3652
   153  0000                     _BRGCON3	set	3653
   154  0000                     _BSEL0	set	3709
   155  0000                     _CANCON	set	3951
   156  0000                     _CIOCON	set	3952
   157  0000                     _ECANCON	set	3954
   158  0000                     _EEADR	set	3956
   159  0000                     _EECON1bits	set	3967
   160  0000                     _EECON2	set	3966
   161  0000                     _EEDATA	set	3955
   162  0000                     _INTCONbits	set	4082
   163  0000                     _LATBbits	set	3978
   164  0000                     _LATCbits	set	3979
   165  0000                     _MSEL0	set	3705
   166  0000                     _MSEL1	set	3706
   167  0000                     _MSEL2	set	3707
   168  0000                     _PIR4bits	set	4023
   169  0000                     _PORTA	set	3968
   170  0000                     _PORTB	set	3969
   171  0000                     _PORTC	set	3970
   172  0000                     _PORTCbits	set	3970
   173  0000                     _RXB1CONbits	set	3888
   174  0000                     _RXF0EIDH	set	3810
   175  0000                     _RXF0EIDL	set	3811
   176  0000                     _RXF0SIDH	set	3808
   177  0000                     _RXF0SIDL	set	3809
   178  0000                     _RXF1EIDH	set	3814
   179  0000                     _RXF1EIDL	set	3815
   180  0000                     _RXF1SIDL	set	3813
   181  0000                     _RXFBCON0	set	3697
   182  0000                     _RXFBCON1	set	3698
   183  0000                     _RXFBCON2	set	3699
   184  0000                     _RXFBCON3	set	3700
   185  0000                     _RXFBCON4	set	3701
   186  0000                     _RXFBCON5	set	3702
   187  0000                     _RXFBCON6	set	3703
   188  0000                     _RXFBCON7	set	3704
   189  0000                     _RXFCON0	set	3654
   190  0000                     _RXFCON1	set	3655
   191  0000                     _RXM0EIDH	set	3834
   192  0000                     _RXM0EIDL	set	3835
   193  0000                     _RXM0SIDH	set	3832
   194  0000                     _RXM0SIDL	set	3833
   195  0000                     _RXM1EIDH	set	3838
   196  0000                     _RXM1EIDL	set	3839
   197  0000                     _RXM1SIDL	set	3837
   198  0000                     _T0CON	set	4053
   199  0000                     _T0CONbits	set	4053
   200  0000                     _TMR0H	set	4055
   201  0000                     _TMR0L	set	4054
   202  0000                     _TRISA	set	3986
   203  0000                     _TRISB	set	3987
   204  0000                     _TRISC	set	3988
   205  0000                     _B0RXFUL	set	29703
   206  0000                     _B0TXEN	set	29674
   207  0000                     _B1RXFUL	set	29831
   208  0000                     _B1TXEN	set	29675
   209  0000                     _B2RXFUL	set	29959
   210  0000                     _B2TXEN	set	29676
   211  0000                     _B3RXFUL	set	30087
   212  0000                     _B3TXEN	set	29677
   213  0000                     _B4RXFUL	set	30215
   214  0000                     _B4TXEN	set	29678
   215  0000                     _B5RXFUL	set	30343
   216  0000                     _B5TXEN	set	29679
   217  0000                     _FIFOEMPTY	set	31631
   218  0000                     _IRXIF	set	31679
   219  0000                     _MDSEL0	set	31638
   220  0000                     _MDSEL1	set	31639
   221  0000                     _RXB0FILHIT0	set	31488
   222  0000                     _RXB0FUL	set	31495
   223  0000                     _RXB0IF	set	31672
   224  0000                     _RXB0OVFL	set	31631
   225  0000                     _RXB1IF	set	31673
   226  0000                     _RXB1OVFL	set	31630
   227  0000                     _RXF1EN	set	29233
   228  0000                     _RXM0EXIDM	set	30667
   229  0000                     _RXM1EXIDEN	set	30699
   230  0000                     _B0CON	set	3712
   231  0000                     _B1CON	set	3728
   232  0000                     _B2CON	set	3744
   233  0000                     _B3CON	set	3760
   234  0000                     _B4CON	set	3776
   235  0000                     _B5CON	set	3792
   236  0000                     _RXB0CON	set	3936
   237  0000                     _RXB1CON	set	3888
   238  0000                     _RXF1SIDH	set	3812
   239  0000                     _RXM1SIDH	set	3836
   240  0000                     _TXB0CON	set	3872
   241  0000                     _TXB1CON	set	3856
   242  0000                     _TXB2CON	set	3840
   243                           
   244                           ; #config settings
   245  000F21  00                 	db	0	; dummy byte at the end
   246  0000                     tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           prodh	equ	0xFF4
   251                           prodl	equ	0xFF3
   252                           intcon	equ	0xFF2
   253                           wreg	equ	0xFE8
   254                           indf1	equ	0xFE7
   255                           fsr1h	equ	0xFE2
   256                           fsr1l	equ	0xFE1
   257                           indf2	equ	0xFDF
   258                           postinc2	equ	0xFDE
   259                           postdec2	equ	0xFDD
   260                           plusw2	equ	0xFDB
   261                           fsr2h	equ	0xFDA
   262                           fsr2l	equ	0xFD9
   263                           status	equ	0xFD8
   264                           
   265                           	psect	cinit
   266  00423C                     __pcinit:
   267                           	opt stack 0
   268  00423C                     start_initialization:
   269                           	opt stack 0
   270  00423C                     __initialization:
   271                           	opt stack 0
   272                           
   273                           ; Clear objects allocated to BANK0 (81 bytes)
   274  00423C  EE00  F060         	lfsr	0,__pbssBANK0
   275  004240  0E51               	movlw	81
   276  004242                     clear_0:
   277  004242  6AEE               	clrf	postinc0,c
   278  004244  06E8               	decf	wreg,f,c
   279  004246  E1FD               	bnz	clear_0
   280                           
   281                           ; Clear objects allocated to COMRAM (7 bytes)
   282  004248  EE00  F052         	lfsr	0,__pbssCOMRAM
   283  00424C  0E07               	movlw	7
   284  00424E                     clear_1:
   285  00424E  6AEE               	clrf	postinc0,c
   286  004250  06E8               	decf	wreg,f,c
   287  004252  E1FD               	bnz	clear_1
   288  004254                     end_of_initialization:
   289                           	opt stack 0
   290  004254                     __end_of__initialization:
   291                           	opt stack 0
   292  004254  0100               	movlb	0
   293  004256  EF7C  F01C         	goto	_main	;jump to C main() function
   294                           tblptru	equ	0xFF8
   295                           tblptrh	equ	0xFF7
   296                           tblptrl	equ	0xFF6
   297                           tablat	equ	0xFF5
   298                           prodh	equ	0xFF4
   299                           prodl	equ	0xFF3
   300                           intcon	equ	0xFF2
   301                           postinc0	equ	0xFEE
   302                           wreg	equ	0xFE8
   303                           indf1	equ	0xFE7
   304                           fsr1h	equ	0xFE2
   305                           fsr1l	equ	0xFE1
   306                           indf2	equ	0xFDF
   307                           postinc2	equ	0xFDE
   308                           postdec2	equ	0xFDD
   309                           plusw2	equ	0xFDB
   310                           fsr2h	equ	0xFDA
   311                           fsr2l	equ	0xFD9
   312                           status	equ	0xFD8
   313                           
   314                           	psect	bssCOMRAM
   315  000052                     __pbssCOMRAM:
   316                           	opt stack 0
   317  000052                     _vscp_page_select:
   318                           	opt stack 0
   319  000052                     	ds	2
   320  000054                     __ECANRxFilterHitInfo:
   321                           	opt stack 0
   322  000054                     	ds	1
   323  000055                     _sendTimer:
   324                           	opt stack 0
   325  000055                     	ds	1
   326  000056                     _vscp_initledfunc:
   327                           	opt stack 0
   328  000056                     	ds	1
   329  000057                     _vscp_probe_address:
   330                           	opt stack 0
   331  000057                     	ds	1
   332  000058                     _vscp_statuscnt:
   333                           	opt stack 0
   334  000058                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           prodh	equ	0xFF4
   340                           prodl	equ	0xFF3
   341                           intcon	equ	0xFF2
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           indf1	equ	0xFE7
   345                           fsr1h	equ	0xFE2
   346                           fsr1l	equ	0xFE1
   347                           indf2	equ	0xFDF
   348                           postinc2	equ	0xFDE
   349                           postdec2	equ	0xFDD
   350                           plusw2	equ	0xFDB
   351                           fsr2h	equ	0xFDA
   352                           fsr2l	equ	0xFD9
   353                           status	equ	0xFD8
   354                           
   355                           	psect	bssBANK0
   356  000060                     __pbssBANK0:
   357                           	opt stack 0
   358  000060                     _relay_protection_timer:
   359                           	opt stack 0
   360  000060                     	ds	16
   361  000070                     _relay_pulse_timer:
   362                           	opt stack 0
   363  000070                     	ds	16
   364  000080                     _measurement_clock:
   365                           	opt stack 0
   366  000080                     	ds	4
   367  000084                     _vscp_configtimer:
   368                           	opt stack 0
   369  000084                     	ds	2
   370  000086                     _vscp_timer:
   371                           	opt stack 0
   372  000086                     	ds	2
   373  000088                     _hours:
   374                           	opt stack 0
   375  000088                     	ds	1
   376  000089                     _minutes:
   377                           	opt stack 0
   378  000089                     	ds	1
   379  00008A                     _relay_pulse_flags:
   380                           	opt stack 0
   381  00008A                     	ds	1
   382  00008B                     _seconds:
   383                           	opt stack 0
   384  00008B                     	ds	1
   385  00008C                     _vscp_alarmstatus:
   386                           	opt stack 0
   387  00008C                     	ds	1
   388  00008D                     _vscp_guid_reset:
   389                           	opt stack 0
   390  00008D                     	ds	1
   391  00008E                     _vscp_hour:
   392                           	opt stack 0
   393  00008E                     	ds	1
   394  00008F                     _vscp_initbtncnt:
   395                           	opt stack 0
   396  00008F                     	ds	1
   397  000090                     _vscp_minute:
   398                           	opt stack 0
   399  000090                     	ds	1
   400  000091                     _vscp_nickname:
   401                           	opt stack 0
   402  000091                     	ds	1
   403  000092                     _vscp_node_state:
   404                           	opt stack 0
   405  000092                     	ds	1
   406  000093                     _vscp_node_substate:
   407                           	opt stack 0
   408  000093                     	ds	1
   409  000094                     _vscp_probe_cnt:
   410                           	opt stack 0
   411  000094                     	ds	1
   412  000095                     _vscp_second:
   413                           	opt stack 0
   414  000095                     	ds	1
   415  000096                     _vscp_imsg:
   416                           	opt stack 0
   417  000096                     	ds	14
   418  0000A4                     _vscp_omsg:
   419                           	opt stack 0
   420  0000A4                     	ds	13
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           prodh	equ	0xFF4
   426                           prodl	equ	0xFF3
   427                           intcon	equ	0xFF2
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           indf1	equ	0xFE7
   431                           fsr1h	equ	0xFE2
   432                           fsr1l	equ	0xFE1
   433                           indf2	equ	0xFDF
   434                           postinc2	equ	0xFDE
   435                           postdec2	equ	0xFDD
   436                           plusw2	equ	0xFDB
   437                           fsr2h	equ	0xFDA
   438                           fsr2l	equ	0xFD9
   439                           status	equ	0xFD8
   440                           
   441                           	psect	cstackBANK0
   442  0000B1                     __pcstackBANK0:
   443                           	opt stack 0
   444  0000B1                     ??_sendVSCPFrame:
   445                           
   446                           ; 0 bytes @ 0x0
   447  0000B1                     	ds	20
   448  0000C5                     ?_SendInformationEvent:
   449                           	opt stack 0
   450  0000C5                     ?_vscp_sendHeartBeat:
   451                           	opt stack 0
   452  0000C5                     SendInformationEvent@eventClass:
   453                           	opt stack 0
   454  0000C5                     vscp_sendHeartBeat@subzone:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x14
   458  0000C5                     	ds	1
   459  0000C6                     SendInformationEvent@eventTypeId:
   460                           	opt stack 0
   461                           
   462                           ; 1 bytes @ 0x15
   463  0000C6                     	ds	1
   464  0000C7                     ??_doActionOff:
   465  0000C7                     ??_doActionOn:
   466  0000C7                     ??_doActionStatus:
   467  0000C7                     ??_doActionToggle:
   468  0000C7                     ??_vscp_writeAppReg:
   469                           
   470                           ; 0 bytes @ 0x16
   471  0000C7                     	ds	2
   472  0000C9                     doActionOff@dmflags:
   473                           	opt stack 0
   474  0000C9                     doActionStatus@dmflags:
   475                           	opt stack 0
   476  0000C9                     doActionToggle@dmflags:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x18
   480  0000C9                     	ds	1
   481  0000CA                     vscp_writeAppReg@bInfoEvent:
   482                           	opt stack 0
   483  0000CA                     doActionOn@dmflags:
   484                           	opt stack 0
   485  0000CA                     doActionOff@val:
   486                           	opt stack 0
   487  0000CA                     doActionStatus@bOn:
   488                           	opt stack 0
   489  0000CA                     doActionToggle@val:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0x19
   493  0000CA                     	ds	1
   494  0000CB                     vscp_writeAppReg@val_632:
   495                           	opt stack 0
   496  0000CB                     doActionOn@val:
   497                           	opt stack 0
   498  0000CB                     doActionOff@i:
   499                           	opt stack 0
   500  0000CB                     doActionStatus@val:
   501                           	opt stack 0
   502  0000CB                     doActionToggle@bOn:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x1A
   506  0000CB                     	ds	1
   507  0000CC                     ??_doApplicationOneSecondWork:
   508  0000CC                     vscp_writeAppReg@bOn:
   509                           	opt stack 0
   510  0000CC                     doActionOn@i:
   511                           	opt stack 0
   512  0000CC                     doActionStatus@i:
   513                           	opt stack 0
   514  0000CC                     doActionToggle@i:
   515                           	opt stack 0
   516                           
   517                           ; 1 bytes @ 0x1B
   518  0000CC                     	ds	1
   519  0000CD                     ??_doDM:
   520  0000CD                     vscp_writeAppReg@rv:
   521                           	opt stack 0
   522                           
   523                           ; 1 bytes @ 0x1C
   524  0000CD                     	ds	1
   525  0000CE                     vscp_writeAppReg@reg:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x1D
   529  0000CE                     	ds	1
   530  0000CF                     ?_vscp_writeRegister:
   531                           	opt stack 0
   532  0000CF                     doApplicationOneSecondWork@bOn:
   533                           	opt stack 0
   534  0000CF                     vscp_writeRegister@value:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1E
   538  0000CF                     	ds	1
   539  0000D0                     doApplicationOneSecondWork@ctrlreg:
   540                           	opt stack 0
   541  0000D0                     vscp_writeRegister@reg:
   542                           	opt stack 0
   543  0000D0                     doDM@class_filter:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x1F
   547  0000D0                     	ds	1
   548  0000D1                     ??_vscp_handleProtocolEvent:
   549  0000D1                     doApplicationOneSecondWork@i:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x20
   553  0000D1                     	ds	1
   554  0000D2                     doDM@class_mask:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x21
   558  0000D2                     	ds	2
   559  0000D4                     doDM@type_filter:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x23
   563  0000D4                     	ds	1
   564  0000D5                     doDM@type_mask:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x24
   568  0000D5                     	ds	1
   569  0000D6                     _doDM$2084:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x25
   573  0000D6                     	ds	1
   574  0000D7                     _doDM$2085:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x26
   578  0000D7                     	ds	1
   579  0000D8                     _doDM$2086:
   580                           	opt stack 0
   581  0000D8                     vscp_handleProtocolEvent@page_save:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x27
   585  0000D8                     	ds	1
   586  0000D9                     _doDM$2087:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x28
   590  0000D9                     	ds	1
   591  0000DA                     _doDM$2088:
   592                           	opt stack 0
   593  0000DA                     vscp_handleProtocolEvent@page_save_1244:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x29
   597  0000DA                     	ds	1
   598  0000DB                     _doDM$2089:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x2A
   602  0000DB                     	ds	1
   603  0000DC                     doDM@dmflags:
   604                           	opt stack 0
   605  0000DC                     vscp_handleProtocolEvent@offset:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x2B
   609  0000DC                     	ds	1
   610  0000DD                     doDM@i:
   611                           	opt stack 0
   612  0000DD                     vscp_handleProtocolEvent@pos:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x2C
   616  0000DD                     	ds	1
   617  0000DE                     vscp_handleProtocolEvent@bytes:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x2D
   621  0000DE                     	ds	1
   622  0000DF                     vscp_handleProtocolEvent@len:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x2E
   626  0000DF                     	ds	1
   627  0000E0                     vscp_handleProtocolEvent@pos_1233:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x2F
   631  0000E0                     	ds	1
   632  0000E1                     vscp_handleProtocolEvent@len_1234:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x30
   636  0000E1                     	ds	1
   637  0000E2                     vscp_handleProtocolEvent@bytes_this_time:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0x31
   641  0000E2                     	ds	1
   642  0000E3                     vscp_handleProtocolEvent@cb:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x32
   646  0000E3                     	ds	1
   647  0000E4                     vscp_handleProtocolEvent@i_1243:
   648                           	opt stack 0
   649                           
   650                           ; 1 bytes @ 0x33
   651  0000E4                     	ds	1
   652  0000E5                     vscp_handleProtocolEvent@k:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x34
   656  0000E5                     	ds	1
   657  0000E6                     vscp_handleProtocolEvent@bytes_1240:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x35
   661  0000E6                     	ds	1
   662  0000E7                     vscp_handleProtocolEvent@i_1232:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x36
   666  0000E7                     	ds	1
   667  0000E8                     vscp_handleProtocolEvent@byte:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x37
   671  0000E8                     	ds	1
   672  0000E9                     vscp_handleProtocolEvent@i_1235:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x38
   676  0000E9                     	ds	1
   677  0000EA                     vscp_handleProtocolEvent@i:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x39
   681  0000EA                     	ds	1
   682  0000EB                     vscp_handleProtocolEvent@j:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x3A
   686  0000EB                     	ds	1
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           prodh	equ	0xFF4
   692                           prodl	equ	0xFF3
   693                           intcon	equ	0xFF2
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           indf1	equ	0xFE7
   697                           fsr1h	equ	0xFE2
   698                           fsr1l	equ	0xFE1
   699                           indf2	equ	0xFDF
   700                           postinc2	equ	0xFDE
   701                           postdec2	equ	0xFDD
   702                           plusw2	equ	0xFDB
   703                           fsr2h	equ	0xFDA
   704                           fsr2l	equ	0xFD9
   705                           status	equ	0xFD8
   706                           
   707                           	psect	cstackCOMRAM
   708  000001                     __pcstackCOMRAM:
   709                           	opt stack 0
   710  000001                     ?i1_WriteTimer0:
   711                           	opt stack 0
   712  000001                     i1WriteTimer0@timer0:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x0
   716  000001                     	ds	2
   717  000003                     i1WriteTimer0@timer:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x2
   721  000003                     	ds	2
   722  000005                     ??_interrupt_at_low_vector:
   723                           
   724                           ; 0 bytes @ 0x4
   725  000005                     	ds	3
   726  000008                     ?_WriteTimer0:
   727                           	opt stack 0
   728  000008                     ?_writeEEPROM:
   729                           	opt stack 0
   730  000008                     ?__CANIDToRegs:
   731                           	opt stack 0
   732  000008                     ?__RegsToCANID:
   733                           	opt stack 0
   734  000008                     ??_vscp_getMDF_URL:
   735  000008                     ?_readEEPROM:
   736                           	opt stack 0
   737  000008                     ?___lbmod:
   738                           	opt stack 0
   739  000008                     ?__ECANPointBuffer:
   740                           	opt stack 0
   741  000008                     ?_vscp_getFamilyCode:
   742                           	opt stack 0
   743  000008                     ?_vscp_getFamilyType:
   744                           	opt stack 0
   745  000008                     vscp_getMatrixInfo@i:
   746                           	opt stack 0
   747  000008                     ECANSetOperationMode@mode:
   748                           	opt stack 0
   749  000008                     OpenTimer0@config:
   750                           	opt stack 0
   751  000008                     ___lbmod@divisor:
   752                           	opt stack 0
   753  000008                     __CANIDToRegs@ptr:
   754                           	opt stack 0
   755  000008                     __RegsToCANID@ptr:
   756                           	opt stack 0
   757  000008                     writeEEPROM@address:
   758                           	opt stack 0
   759  000008                     readEEPROM@address:
   760                           	opt stack 0
   761  000008                     WriteTimer0@timer0:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x7
   765  000008                     	ds	1
   766  000009                     vscp_getMDF_URL@idx:
   767                           	opt stack 0
   768  000009                     ___lbmod@dividend:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x8
   772  000009                     	ds	1
   773  00000A                     __RegsToCANID@val:
   774                           	opt stack 0
   775  00000A                     writeEEPROM@data:
   776                           	opt stack 0
   777  00000A                     readEEPROM@data:
   778                           	opt stack 0
   779  00000A                     ___lbmod@counter:
   780                           	opt stack 0
   781  00000A                     WriteTimer0@timer:
   782                           	opt stack 0
   783  00000A                     __CANIDToRegs@val:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x9
   787  00000A                     	ds	1
   788  00000B                     ??_init_app_eeprom:
   789  00000B                     ??_init_app_ram:
   790  00000B                     ?_doActionPulse:
   791                           	opt stack 0
   792  00000B                     ?_doActionDisable:
   793                           	opt stack 0
   794  00000B                     ?_vscp_setGUID:
   795                           	opt stack 0
   796  00000B                     ?_vscp_setManufacturerId:
   797                           	opt stack 0
   798  00000B                     ?_vscp_setUserID:
   799                           	opt stack 0
   800  00000B                     vscp_setGUID@data:
   801                           	opt stack 0
   802  00000B                     vscp_setManufacturerId@data:
   803                           	opt stack 0
   804  00000B                     vscp_writeNicknamePermanent@nickname:
   805                           	opt stack 0
   806  00000B                     vscp_readAppReg@rv:
   807                           	opt stack 0
   808  00000B                     doActionPulse@arg:
   809                           	opt stack 0
   810  00000B                     doActionDisable@arg:
   811                           	opt stack 0
   812  00000B                     vscp_getGUID@idx:
   813                           	opt stack 0
   814  00000B                     vscp_getUserID@idx:
   815                           	opt stack 0
   816  00000B                     vscp_setUserID@data:
   817                           	opt stack 0
   818  00000B                     vscp_getManufacturerId@idx:
   819                           	opt stack 0
   820  00000B                     vscp_setSegmentCRC@crc:
   821                           	opt stack 0
   822  00000B                     vscp_setControlByte@ctrl:
   823                           	opt stack 0
   824  00000B                     vscp_goBootloaderMode@algorithm:
   825                           	opt stack 0
   826  00000B                     __RegsToCANID@type:
   827                           	opt stack 0
   828  00000B                     __ECANPointBuffer@b:
   829                           	opt stack 0
   830  00000B                     ___lbmod@rem:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0xA
   834  00000B                     	ds	1
   835  00000C                     ??_doActionPulse:
   836  00000C                     ??_doActionDisable:
   837  00000C                     ??__RegsToCANID:
   838  00000C                     ??_vscp_readStdReg:
   839  00000C                     vscp_setGUID@idx:
   840                           	opt stack 0
   841  00000C                     vscp_setManufacturerId@idx:
   842                           	opt stack 0
   843  00000C                     vscp_readAppReg@reg:
   844                           	opt stack 0
   845  00000C                     vscp_setUserID@idx:
   846                           	opt stack 0
   847  00000C                     vscp_handleDropNickname@bytes:
   848                           	opt stack 0
   849  00000C                     __ECANPointBuffer@pt:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0xB
   853  00000C                     	ds	1
   854  00000D                     init_app_ram@i:
   855                           	opt stack 0
   856  00000D                     init_app_eeprom@i:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0xC
   860  00000D                     	ds	1
   861  00000E                     init_app_eeprom@j:
   862                           	opt stack 0
   863  00000E                     doActionDisable@dmflags:
   864                           	opt stack 0
   865  00000E                     __CANIDToRegs@type:
   866                           	opt stack 0
   867  00000E                     __RegsToCANID@Value:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0xD
   871  00000E                     	ds	1
   872  00000F                     ??__CANIDToRegs:
   873  00000F                     ?_ECANReceiveMessage:
   874                           	opt stack 0
   875  00000F                     ?_vscp_writeStdReg:
   876                           	opt stack 0
   877  00000F                     doActionPulse@dmflags:
   878                           	opt stack 0
   879  00000F                     doActionDisable@val:
   880                           	opt stack 0
   881  00000F                     ECANReceiveMessage@data:
   882                           	opt stack 0
   883  00000F                     vscp_writeStdReg@value:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0xE
   887  00000F                     	ds	1
   888  000010                     ??_vscp_writeStdReg:
   889  000010                     doActionPulse@val:
   890                           	opt stack 0
   891  000010                     doActionDisable@i:
   892                           	opt stack 0
   893  000010                     ECANReceiveMessage@dataLen:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0xF
   897  000010                     	ds	1
   898  000011                     doActionPulse@i:
   899                           	opt stack 0
   900  000011                     ECANReceiveMessage@msgFlags:
   901                           	opt stack 0
   902  000011                     __CANIDToRegs@Value:
   903                           	opt stack 0
   904  000011                     vscp_readStdReg@code:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x10
   908  000011                     	ds	1
   909  000012                     ??_calculateSetFilterMask:
   910  000012                     ?_ECANSendMessage:
   911                           	opt stack 0
   912  000012                     ECANReceiveMessage@savedPtr:
   913                           	opt stack 0
   914  000012                     ECANSendMessage@id:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x11
   918  000012                     	ds	2
   919  000014                     ECANReceiveMessage@id:
   920                           	opt stack 0
   921  000014                     vscp_writeStdReg@rv:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x13
   925  000014                     	ds	1
   926  000015                     ECANReceiveMessage@i:
   927                           	opt stack 0
   928  000015                     vscp_writeStdReg@reg:
   929                           	opt stack 0
   930  000015                     vscp_readStdReg@code_1217:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x14
   934  000015                     	ds	1
   935  000016                     ECANReceiveMessage@mode:
   936                           	opt stack 0
   937  000016                     ECANSendMessage@data:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x15
   941  000016                     	ds	1
   942  000017                     ECANReceiveMessage@temp:
   943                           	opt stack 0
   944                           
   945                           ; 1 bytes @ 0x16
   946  000017                     	ds	1
   947  000018                     ECANSendMessage@dataLen:
   948                           	opt stack 0
   949  000018                     ECANReceiveMessage@ptr:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x17
   953  000018                     	ds	1
   954  000019                     ECANSendMessage@msgFlags:
   955                           	opt stack 0
   956  000019                     vscp_readStdReg@idx:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x18
   960  000019                     	ds	1
   961  00001A                     ??_ECANSendMessage:
   962  00001A                     ?_getCANFrame:
   963                           	opt stack 0
   964  00001A                     getCANFrame@pdlc:
   965                           	opt stack 0
   966  00001A                     vscp_readStdReg@idx_1218:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x19
   970  00001A                     	ds	1
   971  00001B                     getCANFrame@pdata:
   972                           	opt stack 0
   973  00001B                     vscp_readStdReg@rv:
   974                           	opt stack 0
   975  00001B                     ECANSendMessage@pb:
   976                           	opt stack 0
   977                           
   978                           ; 18 bytes @ 0x1A
   979  00001B                     	ds	1
   980  00001C                     getCANFrame@pid:
   981                           	opt stack 0
   982  00001C                     vscp_readStdReg@reg:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x1B
   986  00001C                     	ds	1
   987  00001D                     getCANFrame@flags:
   988                           	opt stack 0
   989  00001D                     vscp_readRegister@reg:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x1C
   993  00001D                     	ds	1
   994  00001E                     ?_getVSCPFrame:
   995                           	opt stack 0
   996  00001E                     getVSCPFrame@pvscptype:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x1D
  1000  00001E                     	ds	1
  1001  00001F                     getVSCPFrame@pNodeId:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x1E
  1005  00001F                     	ds	1
  1006  000020                     getVSCPFrame@pPriority:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x1F
  1010  000020                     	ds	1
  1011  000021                     getVSCPFrame@pSize:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0x20
  1015  000021                     	ds	1
  1016  000022                     getVSCPFrame@pData:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x21
  1020  000022                     	ds	1
  1021  000023                     ??_getVSCPFrame:
  1022                           
  1023                           ; 0 bytes @ 0x22
  1024  000023                     	ds	4
  1025  000027                     getVSCPFrame@pvscpclass:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x26
  1029  000027                     	ds	1
  1030  000028                     getVSCPFrame@id:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x27
  1034  000028                     	ds	4
  1035  00002C                     vscp_getEvent@rv:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x2B
  1039  00002C                     	ds	1
  1040  00002D                     ECANSendMessage@mode:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x2C
  1044  00002D                     	ds	1
  1045  00002E                     ECANSendMessage@buffers:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x2D
  1049  00002E                     	ds	1
  1050  00002F                     ECANSendMessage@j:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x2E
  1054  00002F                     	ds	1
  1055  000030                     ECANSendMessage@tempBSEL0:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x2F
  1059  000030                     	ds	1
  1060  000031                     ECANSendMessage@tempPtr:
  1061                           	opt stack 0
  1062  000031                     calculateSetFilterMask@rowmask:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x30
  1066  000031                     	ds	2
  1067  000033                     ECANSendMessage@temp:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x32
  1071  000033                     	ds	1
  1072  000034                     ECANSendMessage@i:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x33
  1076  000034                     	ds	1
  1077  000035                     calculateSetFilterMask@lastOID:
  1078                           	opt stack 0
  1079  000035                     ECANSendMessage@ptr:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x34
  1083  000035                     	ds	1
  1084  000036                     calculateSetFilterMask@mask:
  1085                           	opt stack 0
  1086                           
  1087                           ; 4 bytes @ 0x35
  1088  000036                     	ds	1
  1089  000037                     ?_sendCANFrame:
  1090                           	opt stack 0
  1091  000037                     sendCANFrame@id:
  1092                           	opt stack 0
  1093                           
  1094                           ; 4 bytes @ 0x36
  1095  000037                     	ds	3
  1096  00003A                     calculateSetFilterMask@filter:
  1097                           	opt stack 0
  1098                           
  1099                           ; 4 bytes @ 0x39
  1100  00003A                     	ds	1
  1101  00003B                     sendCANFrame@dlc:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x3A
  1105  00003B                     	ds	1
  1106  00003C                     sendCANFrame@pdata:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x3B
  1110  00003C                     	ds	2
  1111  00003E                     sendCANFrame@rv:
  1112                           	opt stack 0
  1113  00003E                     calculateSetFilterMask@rowfilter:
  1114                           	opt stack 0
  1115                           
  1116                           ; 4 bytes @ 0x3D
  1117  00003E                     	ds	1
  1118  00003F                     ?_sendVSCPFrame:
  1119                           	opt stack 0
  1120  00003F                     sendVSCPFrame@vscpclass:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x3E
  1124  00003F                     	ds	2
  1125  000041                     sendVSCPFrame@vscptype:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x40
  1129  000041                     	ds	1
  1130  000042                     sendVSCPFrame@nodeid:
  1131                           	opt stack 0
  1132  000042                     calculateSetFilterMask@j:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x41
  1136  000042                     	ds	1
  1137  000043                     sendVSCPFrame@priority:
  1138                           	opt stack 0
  1139  000043                     calculateSetFilterMask@i:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x42
  1143  000043                     	ds	1
  1144  000044                     sendVSCPFrame@size:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x43
  1148  000044                     	ds	1
  1149  000045                     sendVSCPFrame@pData:
  1150                           	opt stack 0
  1151                           
  1152                           ; 2 bytes @ 0x44
  1153  000045                     	ds	2
  1154  000047                     sendVSCPFrame@id:
  1155                           	opt stack 0
  1156                           
  1157                           ; 4 bytes @ 0x46
  1158  000047                     	ds	4
  1159  00004B                     ??_SendInformationEvent:
  1160  00004B                     
  1161                           ; 0 bytes @ 0x4A
  1162  00004B                     	ds	1
  1163  00004C                     ??_vscp_newNodeOnline:
  1164  00004C                     vscp_sendHeartBeat@zone:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x4B
  1168  00004C                     	ds	1
  1169  00004D                     ??_vscp_doOneSecondWork:
  1170  00004D                     SendInformationEvent@data:
  1171                           	opt stack 0
  1172                           
  1173                           ; 3 bytes @ 0x4C
  1174  00004D                     	ds	3
  1175  000050                     SendInformationEvent@idx:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x4F
  1179  000050                     	ds	1
  1180  000051                     ?_doActionOff:
  1181                           	opt stack 0
  1182  000051                     ?_doActionOn:
  1183                           	opt stack 0
  1184  000051                     ?_doActionStatus:
  1185                           	opt stack 0
  1186  000051                     ?_doActionToggle:
  1187                           	opt stack 0
  1188  000051                     ?_vscp_writeAppReg:
  1189                           	opt stack 0
  1190  000051                     vscp_writeAppReg@val:
  1191                           	opt stack 0
  1192  000051                     doActionOn@arg:
  1193                           	opt stack 0
  1194  000051                     doActionOff@arg:
  1195                           	opt stack 0
  1196  000051                     doActionStatus@arg:
  1197                           	opt stack 0
  1198  000051                     doActionToggle@arg:
  1199                           	opt stack 0
  1200                           
  1201                           ; 1 bytes @ 0x50
  1202  000051                     	ds	1
  1203  000052                     tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           prodh	equ	0xFF4
  1208                           prodl	equ	0xFF3
  1209                           intcon	equ	0xFF2
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           indf1	equ	0xFE7
  1213                           fsr1h	equ	0xFE2
  1214                           fsr1l	equ	0xFE1
  1215                           indf2	equ	0xFDF
  1216                           postinc2	equ	0xFDE
  1217                           postdec2	equ	0xFDD
  1218                           plusw2	equ	0xFDB
  1219                           fsr2h	equ	0xFDA
  1220                           fsr2l	equ	0xFD9
  1221                           status	equ	0xFD8
  1222                           
  1223                           ; 0 bytes @ 0x51
  1224 ;;
  1225 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1226 ;;
  1227 ;; *************** function _main *****************
  1228 ;; Defined at:
  1229 ;;		line 211 in file "../main.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;		None
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;		None               void
  1236 ;; Registers used:
  1237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1238 ;; Tracked objects:
  1239 ;;		On entry : 0/0
  1240 ;;		On exit  : F/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1247 ;;Total ram usage:        0 bytes
  1248 ;; Hardware stack levels required when called:   10
  1249 ;; This function calls:
  1250 ;;		_init
  1251 ;;		_vscp_check_pstorage
  1252 ;;		_init_app_eeprom
  1253 ;;		_init_app_ram
  1254 ;;		_vscp_init
  1255 ;;		_writeEEPROM
  1256 ;;		_vscp_getEvent
  1257 ;;		_vscp_goActiveState
  1258 ;;		_vscp_handleProbeState
  1259 ;;		_vscp_handleProtocolEvent
  1260 ;;		_doDM
  1261 ;;		_vscp_error
  1262 ;;		_vscp_doOneSecondWork
  1263 ;;		_doApplicationOneSecondWork
  1264 ;;		_doWork
  1265 ;; This function is called by:
  1266 ;;		Startup code after reset
  1267 ;; This function uses a non-reentrant model
  1268 ;;
  1269                           
  1270                           	psect	text0
  1271  0038F8                     __ptext0:
  1272                           	opt stack 0
  1273  0038F8                     _main:
  1274                           	opt stack 21
  1275                           
  1276                           ;main.c: 212: init();
  1277                           
  1278                           ;incstack = 0
  1279                           ;incstack = 0
  1280  0038F8  EC2A  F020         	call	_init	;wreg free
  1281                           
  1282                           ;main.c: 216: if ( !vscp_check_pstorage() ) {
  1283  0038FC  EC0E  F021         	call	_vscp_check_pstorage	;wreg free
  1284  003900  0900               	iorlw	0
  1285  003902  E104               	bnz	l9183
  1286                           
  1287                           ;main.c: 219: init_app_eeprom();
  1288  003904  EC8D  F010         	call	_init_app_eeprom	;wreg free
  1289                           
  1290                           ;main.c: 220: init_app_ram();
  1291  003908  ECF9  F01B         	call	_init_app_ram	;wreg free
  1292  00390C                     l9183:
  1293                           
  1294                           ;main.c: 223: }
  1295                           ;main.c: 225: vscp_init();
  1296  00390C  ECB0  F01F         	call	_vscp_init	;wreg free
  1297  003910                     l149:
  1298                           
  1299                           ; BSR set to: 0
  1300  003910  0004               	clrwdt		;# 
  1301                           
  1302                           ;main.c: 231: if ( ( vscp_initbtncnt > 250 ) &&
  1303                           ;main.c: 232: ( 0x01 != vscp_node_state ) ) {
  1304  003912  0EFA               	movlw	250
  1305  003914  0100               	movlb	0	; () banked
  1306  003916  658F               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1307  003918  D00C               	goto	l9193
  1308                           
  1309                           ; BSR set to: 0
  1310  00391A  0592               	decf	_vscp_node_state& (0+255),w,b
  1311  00391C  E00A               	bz	l9193
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;main.c: 235: vscp_nickname = 0xff;
  1315  00391E  6991               	setf	_vscp_nickname& (0+255),b
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 236: writeEEPROM( 0x01, 0xff );
  1319  003920  6A09               	clrf	?_writeEEPROM+1,c
  1320  003922  0E01               	movlw	1
  1321  003924  6E08               	movwf	?_writeEEPROM,c
  1322  003926  0EFF               	movlw	255
  1323  003928  680A               	setf	?_writeEEPROM+2,c
  1324  00392A  ECB9  F020         	call	_writeEEPROM	;wreg free
  1325                           
  1326                           ;main.c: 237: vscp_init();
  1327  00392E  ECB0  F01F         	call	_vscp_init	;wreg free
  1328  003932                     l9193:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 239: }
  1332                           ;main.c: 242: vscp_imsg.flags = 0;
  1333  003932  6B96               	clrf	_vscp_imsg& (0+255),b
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 243: vscp_getEvent();
  1337  003934  EC41  F020         	call	_vscp_getEvent	;wreg free
  1338                           
  1339                           ;main.c: 245: switch ( vscp_node_state ) {
  1340  003938  D01C               	goto	l9217
  1341  00393A                     l9197:
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;main.c: 250: if (0xff == vscp_nickname) {
  1345  00393A  2991               	incf	_vscp_nickname& (0+255),w,b
  1346  00393C  E103               	bnz	l9201
  1347                           
  1348                           ; BSR set to: 0
  1349                           ;main.c: 252: vscp_node_state = 0x01;
  1350  00393E  0E01               	movlw	1
  1351  003940  6F92               	movwf	_vscp_node_state& (0+255),b
  1352                           
  1353                           ;main.c: 253: } else {
  1354  003942  D023               	goto	l9219
  1355  003944                     l9201:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;main.c: 255: vscp_node_state = 0x03;
  1359  003944  0E03               	movlw	3
  1360  003946  6F92               	movwf	_vscp_node_state& (0+255),b
  1361  003948                     l9203:
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;main.c: 256: vscp_goActiveState();
  1365  003948  EC3C  F021         	call	_vscp_goActiveState	;wreg free
  1366  00394C  D01E               	goto	l9219
  1367  00394E                     l9205:
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;main.c: 261: vscp_handleProbeState();
  1371  00394E  EC49  F01D         	call	_vscp_handleProbeState	;wreg free
  1372                           
  1373                           ;main.c: 262: break;
  1374  003952  D01B               	goto	l9219
  1375  003954                     l158:
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 271: if (vscp_imsg.flags & 0x80) {
  1379  003954  AF96               	btfss	_vscp_imsg& (0+255),7,b
  1380  003956  D019               	goto	l9219
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;main.c: 273: if ( 0 == vscp_imsg.vscp_class ) {
  1384  003958  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  1385  00395A  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1386  00395C  B4D8               	btfsc	status,2,c
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 276: vscp_handleProtocolEvent();
  1390  00395E  ECC8  F00B         	call	_vscp_handleProtocolEvent	;wreg free
  1391                           
  1392                           ;main.c: 278: }
  1393                           ;main.c: 280: doDM();
  1394  003962  ECC9  F014         	call	_doDM	;wreg free
  1395  003966  D011               	goto	l9219
  1396  003968                     l9213:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 286: vscp_error();
  1400  003968  EC0E  F022         	call	_vscp_error	;wreg free
  1401                           
  1402                           ;main.c: 287: break;
  1403  00396C  D00E               	goto	l9219
  1404  00396E                     l162:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 290: vscp_node_state = 0x00;
  1408  00396E  6B92               	clrf	_vscp_node_state& (0+255),b
  1409                           
  1410                           ;main.c: 291: break;
  1411  003970  D00C               	goto	l9219
  1412  003972                     l9217:
  1413  003972  0100               	movlb	0	; () banked
  1414  003974  5192               	movf	_vscp_node_state& (0+255),w,b
  1415                           
  1416                           ; Switch size 1, requested type "space"
  1417                           ; Number of cases is 5, Range of values is 0 to 4
  1418                           ; switch strategies available:
  1419                           ; Name         Instructions Cycles
  1420                           ; simple_byte           16     9 (average)
  1421                           ;	Chosen strategy is simple_byte
  1422  003976  E0E1               	bz	l9197
  1423  003978  0A01               	xorlw	1	; case 1
  1424  00397A  E0E9               	bz	l9205
  1425  00397C  0A03               	xorlw	3	; case 2
  1426  00397E  E0E4               	bz	l9203
  1427  003980  0A01               	xorlw	1	; case 3
  1428  003982  E0E8               	bz	l158
  1429  003984  0A07               	xorlw	7	; case 4
  1430  003986  E0F0               	bz	l9213
  1431  003988  D7F2               	goto	l162
  1432  00398A                     l9219:
  1433                           
  1434                           ;main.c: 296: if ( measurement_clock > 1000 ) {
  1435  00398A  0EE9               	movlw	233
  1436  00398C  0100               	movlb	0	; () banked
  1437  00398E  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1438  003990  0E03               	movlw	3
  1439  003992  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1440  003994  0E00               	movlw	0
  1441  003996  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1442  003998  0E00               	movlw	0
  1443  00399A  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1444  00399C  E30C               	bnc	l9231
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 298: measurement_clock = 0;
  1448  00399E  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1449  0039A0  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1450  0039A2  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1451  0039A4  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 300: sendTimer++;
  1455  0039A6  2A55               	incf	_sendTimer,f,c
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 303: vscp_doOneSecondWork();
  1459  0039A8  EC88  F01F         	call	_vscp_doOneSecondWork	;wreg free
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;main.c: 307: if ( 0x03 == vscp_node_state ) {
  1463  0039AC  5192               	movf	_vscp_node_state& (0+255),w,b
  1464  0039AE  0A03               	xorlw	3
  1465  0039B0  B4D8               	btfsc	status,2,c
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 310: doApplicationOneSecondWork();
  1469  0039B2  EC48  F012         	call	_doApplicationOneSecondWork	;wreg free
  1470  0039B6                     l9231:
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 312: }
  1474                           ;main.c: 314: }
  1475                           ;main.c: 317: if ( seconds > 59 ) {
  1476  0039B6  0E3B               	movlw	59
  1477  0039B8  658B               	cpfsgt	_seconds& (0+255),b
  1478  0039BA  D00B               	goto	l9247
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;main.c: 319: seconds = 0;
  1482  0039BC  6B8B               	clrf	_seconds& (0+255),b
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;main.c: 320: minutes++;
  1486  0039BE  2B89               	incf	_minutes& (0+255),f,b
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;main.c: 322: if ( minutes > 59 ) {
  1490  0039C0  0E3B               	movlw	59
  1491  0039C2  6589               	cpfsgt	_minutes& (0+255),b
  1492  0039C4  D002               	goto	l9243
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;main.c: 323: minutes = 0;
  1496  0039C6  6B89               	clrf	_minutes& (0+255),b
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 324: hours++;
  1500  0039C8  2B88               	incf	_hours& (0+255),f,b
  1501  0039CA                     l9243:
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 325: }
  1505                           ;main.c: 327: if ( hours > 23 ) hours = 0;
  1506  0039CA  0E17               	movlw	23
  1507  0039CC  6588               	cpfsgt	_hours& (0+255),b
  1508  0039CE  D001               	goto	l9247
  1509                           
  1510                           ; BSR set to: 0
  1511  0039D0  6B88               	clrf	_hours& (0+255),b
  1512  0039D2                     l9247:
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;main.c: 329: }
  1516                           ;main.c: 331: doWork();
  1517  0039D2  EC10  F022         	call	_doWork	;wreg free
  1518  0039D6  D79C               	goto	l149
  1519  0039D8                     __end_of_main:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           prodh	equ	0xFF4
  1526                           prodl	equ	0xFF3
  1527                           intcon	equ	0xFF2
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           indf1	equ	0xFE7
  1531                           fsr1h	equ	0xFE2
  1532                           fsr1l	equ	0xFE1
  1533                           indf2	equ	0xFDF
  1534                           postinc2	equ	0xFDE
  1535                           postdec2	equ	0xFDD
  1536                           plusw2	equ	0xFDB
  1537                           fsr2h	equ	0xFDA
  1538                           fsr2l	equ	0xFD9
  1539                           status	equ	0xFD8
  1540                           
  1541 ;; *************** function _doWork *****************
  1542 ;; Defined at:
  1543 ;;		line 899 in file "../main.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;		None               void
  1550 ;; Registers used:
  1551 ;;		wreg, status,2, status,0
  1552 ;; Tracked objects:
  1553 ;;		On entry : F/0
  1554 ;;		On exit  : F/0
  1555 ;;		Unchanged: F/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    2
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text1
  1572  004420                     __ptext1:
  1573                           	opt stack 0
  1574  004420                     _doWork:
  1575                           	opt stack 28
  1576                           
  1577                           ; BSR set to: 0
  1578                           
  1579                           ; BSR set to: 0
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;incstack = 0
  1583                           ;incstack = 0
  1584  004420  0012               	return	
  1585  004422                     __end_of_doWork:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           indf1	equ	0xFE7
  1597                           fsr1h	equ	0xFE2
  1598                           fsr1l	equ	0xFE1
  1599                           indf2	equ	0xFDF
  1600                           postinc2	equ	0xFDE
  1601                           postdec2	equ	0xFDD
  1602                           plusw2	equ	0xFDB
  1603                           fsr2h	equ	0xFDA
  1604                           fsr2l	equ	0xFD9
  1605                           status	equ	0xFD8
  1606                           
  1607 ;; *************** function _doApplicationOneSecondWork *****************
  1608 ;; Defined at:
  1609 ;;		line 604 in file "../main.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  i               1   32[BANK0 ] unsigned char 
  1614 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1615 ;;  bOn             1   30[BANK0 ] enum E18242
  1616 ;; Return value:  Size  Location     Type
  1617 ;;		None               void
  1618 ;; Registers used:
  1619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1620 ;; Tracked objects:
  1621 ;;		On entry : F/0
  1622 ;;		On exit  : F/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1626 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1627 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1628 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1629 ;;Total ram usage:        6 bytes
  1630 ;; Hardware stack levels used:    1
  1631 ;; Hardware stack levels required when called:    8
  1632 ;; This function calls:
  1633 ;;		_readEEPROM
  1634 ;;		_doActionOff
  1635 ;;		_SendInformationEvent
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text2
  1642  002490                     __ptext2:
  1643                           	opt stack 0
  1644  002490                     _doApplicationOneSecondWork:
  1645                           	opt stack 22
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 606: uint8_t i;
  1649                           ;main.c: 607: uint8_t ctrlreg;
  1650                           ;main.c: 608: BOOL bOn = 0;
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;incstack = 0
  1654                           ;incstack = 0
  1655  002490  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1656                           
  1657                           ;main.c: 610: for ( i = 0; i < 8; i++ ) {
  1658  002492  6BD1               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1659  002494                     l9745:
  1660                           
  1661                           ; BSR set to: 0
  1662  002494  0E07               	movlw	7
  1663  002496  65D1               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1664  002498  D001               	goto	l9749
  1665  00249A  0C07               	retlw	7
  1666  00249C                     l9749:
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 613: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1670  00249C  D92C               	call	PL32	;call to abstracted procedure
  1671  00249E  ECDA  F021         	call	_readEEPROM	;wreg free
  1672  0024A2  0100               	movlb	0	; () banked
  1673  0024A4  6FD0               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 616: if ( !( ctrlreg & 0x80 ) ) continue;
  1677  0024A6  AFD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1678  0024A8  D116               	goto	l9833
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 620: if ( relay_protection_timer[ i ] ) {
  1682                           
  1683                           ; BSR set to: 0
  1684  0024AA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1685  0024AC  0D02               	mullw	2
  1686  0024AE  50F3               	movf	prodl,w,c
  1687  0024B0  0F60               	addlw	low _relay_protection_timer
  1688  0024B2  6ED9               	movwf	fsr2l,c
  1689  0024B4  6ADA               	clrf	fsr2h,c
  1690  0024B6  50DE               	movf	postinc2,w,c
  1691  0024B8  10DD               	iorwf	postdec2,w,c
  1692  0024BA  E028               	bz	l9767
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;main.c: 622: relay_protection_timer[ i ]--;
  1696  0024BC  D915               	call	PL22	;call to abstracted procedure
  1697  0024BE  06DE               	decf	postinc2,f,c
  1698  0024C0  0E00               	movlw	0
  1699  0024C2  5ADD               	subwfb	postdec2,f,c
  1700                           
  1701                           ;main.c: 625: if ( !relay_protection_timer[ i ] &&
  1702                           ;main.c: 626: ( readEEPROM( 0x43 + 10 + i ) &
  1703                           ;main.c: 627: 0x04 ) ) {
  1704  0024C4  D911               	call	PL22	;call to abstracted procedure
  1705  0024C6  50DE               	movf	postinc2,w,c
  1706  0024C8  10DD               	iorwf	postdec2,w,c
  1707  0024CA  E13C               	bnz	l9769
  1708                           
  1709                           ; BSR set to: 0
  1710  0024CC  D914               	call	PL32	;call to abstracted procedure
  1711  0024CE  ECDA  F021         	call	_readEEPROM	;wreg free
  1712  0024D2  0100               	movlb	0	; () banked
  1713  0024D4  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1714  0024D6  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1715  0024D8  D035               	goto	l9769
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;main.c: 630: doActionOff( 0, (1 << i) );
  1719  0024DA  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1720  0024DE  0E01               	movlw	1
  1721  0024E0  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1722  0024E2  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1723  0024E4  D002               	goto	u12174
  1724  0024E6                     u12175:
  1725  0024E6  90D8               	bcf	status,0,c
  1726  0024E8  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1727  0024EA                     u12174:
  1728  0024EA  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1729  0024EC  D7FC               	goto	u12175
  1730  0024EE  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1731  0024F0  6E51               	movwf	?_doActionOff,c
  1732  0024F2  0E00               	movlw	0
  1733  0024F4  ECEC  F01C         	call	_doActionOff
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 633: if ( ctrlreg & 0x02 ) {
  1737  0024F8  A3D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1738  0024FA  D024               	goto	l9769
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;main.c: 634: SendInformationEvent( i, 1,
  1742                           ;main.c: 635: 2 );
  1743  0024FC  0E01               	movlw	1
  1744  0024FE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  1745  002500  0E02               	movlw	2
  1746  002502  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1747  002504  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1748  002506  EC52  F01F         	call	_SendInformationEvent
  1749  00250A  D01C               	goto	l9769
  1750  00250C                     l9767:
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 640: else {
  1754                           ;main.c: 642: relay_protection_timer[ i ] =
  1755                           ;main.c: 643: readEEPROM(0x43 + 34 + i ) * 256 +
  1756                           ;main.c: 644: readEEPROM(0x43 + 35 + i );
  1757  00250C  0E65               	movlw	101
  1758  00250E  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1759  002510  6E08               	movwf	?_readEEPROM,c
  1760  002512  6A09               	clrf	?_readEEPROM+1,c
  1761  002514  0E00               	movlw	0
  1762  002516  2209               	addwfc	?_readEEPROM+1,f,c
  1763  002518  ECDA  F021         	call	_readEEPROM	;wreg free
  1764  00251C  0100               	movlb	0	; () banked
  1765  00251E  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1766  002520  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1767  002522  0E66               	movlw	102
  1768  002524  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1769  002526  6E08               	movwf	?_readEEPROM,c
  1770  002528  6A09               	clrf	?_readEEPROM+1,c
  1771  00252A  0E00               	movlw	0
  1772  00252C  2209               	addwfc	?_readEEPROM+1,f,c
  1773  00252E  ECDA  F021         	call	_readEEPROM	;wreg free
  1774  002532  0100               	movlb	0	; () banked
  1775  002534  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1776  002536  0E00               	movlw	0
  1777  002538  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1778  00253A  D8D6               	call	PL22	;call to abstracted procedure
  1779  00253C  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1780  002540  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1781  002544                     l9769:
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;main.c: 645: }
  1785                           ;main.c: 648: if ( relay_pulse_flags & (1 << i) ) {
  1786  002544  C0D1  F0CC         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1787  002548  0E01               	movlw	1
  1788  00254A  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1789  00254C  2BCC               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1790  00254E  D002               	goto	u12194
  1791  002550                     u12195:
  1792  002550  90D8               	bcf	status,0,c
  1793  002552  37CD               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1794  002554                     u12194:
  1795  002554  2FCC               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1796  002556  D7FC               	goto	u12195
  1797  002558  51CD               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1798  00255A  158A               	andwf	_relay_pulse_flags& (0+255),w,b
  1799  00255C  E101 D0BB          	bz	l9833
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 650: if ( relay_pulse_timer[ i ] ) {
  1803  002560  D8BC               	call	PL20	;call to abstracted procedure
  1804  002562  50DE               	movf	postinc2,w,c
  1805  002564  10DD               	iorwf	postdec2,w,c
  1806  002566  E101 D0A5          	bz	l9831
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 652: relay_pulse_timer[ i ]--;
  1810  00256A  D8B7               	call	PL20	;call to abstracted procedure
  1811  00256C  06DE               	decf	postinc2,f,c
  1812  00256E  0E00               	movlw	0
  1813  002570  5ADD               	subwfb	postdec2,f,c
  1814                           
  1815                           ;main.c: 655: if ( !relay_pulse_timer[ i ] ) {
  1816  002572  D8B3               	call	PL20	;call to abstracted procedure
  1817  002574  50DE               	movf	postinc2,w,c
  1818  002576  10DD               	iorwf	postdec2,w,c
  1819  002578  E02E               	bz	l9807
  1820  00257A  D0AD               	goto	l9833
  1821  00257C                     l204:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;main.c: 660: if ( LATBbits.LATB4 ) {
  1825  00257C  A88A               	btfss	3978,4,c	;volatile
  1826  00257E  D002               	goto	l205
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;main.c: 661: LATBbits.LATB4 = 0;
  1830  002580  988A               	bcf	3978,4,c	;volatile
  1831  002582  D025               	goto	L6
  1832  002584                     l205:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 664: LATBbits.LATB4 = 1;
  1836  002584  888A               	bsf	3978,4,c	;volatile
  1837  002586                     l9779:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 665: bOn = 1;
  1841  002586  0E01               	movlw	1
  1842  002588  6FCF               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1843  00258A  D033               	goto	l9809
  1844  00258C                     l208:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 670: if ( LATBbits.LATB1 ) {
  1848  00258C  A28A               	btfss	3978,1,c	;volatile
  1849  00258E  D002               	goto	l209
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;main.c: 671: LATBbits.LATB1 = 0;
  1853  002590  928A               	bcf	3978,1,c	;volatile
  1854  002592  D01D               	goto	L6
  1855  002594                     l209:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 674: LATBbits.LATB1 = 1;
  1859  002594  828A               	bsf	3978,1,c	;volatile
  1860  002596  D7F7               	goto	l9779
  1861  002598                     l211:
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 680: if ( LATBbits.LATB0 ) {
  1865  002598  A08A               	btfss	3978,0,c	;volatile
  1866  00259A  D002               	goto	l212
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;main.c: 681: LATBbits.LATB0 = 0;
  1870  00259C  908A               	bcf	3978,0,c	;volatile
  1871  00259E  D017               	goto	L6
  1872  0025A0                     l212:
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;main.c: 684: LATBbits.LATB0 = 1;
  1876  0025A0  808A               	bsf	3978,0,c	;volatile
  1877  0025A2  D7F1               	goto	l9779
  1878  0025A4                     l214:
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;main.c: 690: if ( LATCbits.LATC7 ) {
  1882  0025A4  AE8B               	btfss	3979,7,c	;volatile
  1883  0025A6  D002               	goto	l215
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 691: LATCbits.LATC7 = 0;
  1887  0025A8  9E8B               	bcf	3979,7,c	;volatile
  1888  0025AA  D011               	goto	L6
  1889  0025AC                     l215:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 694: LATCbits.LATC7 = 1;
  1893  0025AC  8E8B               	bsf	3979,7,c	;volatile
  1894  0025AE  D7EB               	goto	l9779
  1895  0025B0                     l217:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 700: if ( LATCbits.LATC6 ) {
  1899  0025B0  AC8B               	btfss	3979,6,c	;volatile
  1900  0025B2  D002               	goto	l218
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;main.c: 701: LATCbits.LATC6 = 0;
  1904  0025B4  9C8B               	bcf	3979,6,c	;volatile
  1905  0025B6  D00B               	goto	L6
  1906  0025B8                     l218:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;main.c: 704: LATCbits.LATC6 = 1;
  1910  0025B8  8C8B               	bsf	3979,6,c	;volatile
  1911  0025BA  D7E5               	goto	l9779
  1912  0025BC                     l220:
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;main.c: 710: if ( LATCbits.LATC5 ) {
  1916  0025BC  AA8B               	btfss	3979,5,c	;volatile
  1917  0025BE  D002               	goto	l221
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 711: LATCbits.LATC5 = 0;
  1921  0025C0  9A8B               	bcf	3979,5,c	;volatile
  1922  0025C2  D005               	goto	L6
  1923  0025C4                     l221:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 714: LATCbits.LATC5 = 1;
  1927  0025C4  8A8B               	bsf	3979,5,c	;volatile
  1928  0025C6  D7DF               	goto	l9779
  1929  0025C8                     l223:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;main.c: 720: if ( LATCbits.LATC4 ) {
  1933  0025C8  A88B               	btfss	3979,4,c	;volatile
  1934  0025CA  D003               	goto	l224
  1935                           
  1936                           ; BSR set to: 0
  1937                           ;main.c: 721: LATCbits.LATC4 = 0;
  1938  0025CC  988B               	bcf	3979,4,c	;volatile
  1939  0025CE                     L6:
  1940                           
  1941                           ;main.c: 722: bOn = 0;
  1942  0025CE  6BCF               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1943                           
  1944                           ;main.c: 723: } else {
  1945  0025D0  D010               	goto	l9809
  1946  0025D2                     l224:
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;main.c: 724: LATCbits.LATC4 = 1;
  1950  0025D2  888B               	bsf	3979,4,c	;volatile
  1951  0025D4  D7D8               	goto	l9779
  1952  0025D6                     l9807:
  1953                           
  1954                           ; BSR set to: 0
  1955  0025D6  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1956                           
  1957                           ; Switch size 1, requested type "space"
  1958                           ; Number of cases is 7, Range of values is 0 to 6
  1959                           ; switch strategies available:
  1960                           ; Name         Instructions Cycles
  1961                           ; simple_byte           22    12 (average)
  1962                           ;	Chosen strategy is simple_byte
  1963  0025D8  E0D1               	bz	l204
  1964  0025DA  0A01               	xorlw	1	; case 1
  1965  0025DC  E0D7               	bz	l208
  1966  0025DE  0A03               	xorlw	3	; case 2
  1967  0025E0  E0DB               	bz	l211
  1968  0025E2  0A01               	xorlw	1	; case 3
  1969  0025E4  E0DF               	bz	l214
  1970  0025E6  0A07               	xorlw	7	; case 4
  1971  0025E8  E0E3               	bz	l217
  1972  0025EA  0A01               	xorlw	1	; case 5
  1973  0025EC  E0E7               	bz	l220
  1974  0025EE  0A03               	xorlw	3	; case 6
  1975  0025F0  E0EB               	bz	l223
  1976  0025F2                     l9809:
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;main.c: 732: relay_pulse_timer[ i ] =
  1980                           ;main.c: 733: readEEPROM( 0x43 +
  1981                           ;main.c: 734: 18 + 2*i ) * 256 +
  1982                           ;main.c: 735: readEEPROM( 0x43 +
  1983                           ;main.c: 736: 19 + 2*i );
  1984  0025F2  D888               	call	PL54	;call to abstracted procedure
  1985  0025F4  ECDA  F021         	call	_readEEPROM	;wreg free
  1986  0025F8  0100               	movlb	0	; () banked
  1987  0025FA  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1988  0025FC  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1989  0025FE  D88B               	call	PL56	;call to abstracted procedure
  1990  002600  ECDA  F021         	call	_readEEPROM	;wreg free
  1991  002604  0100               	movlb	0	; () banked
  1992  002606  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1993  002608  0E00               	movlw	0
  1994  00260A  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1995  00260C  D866               	call	PL20	;call to abstracted procedure
  1996  00260E  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1997  002612  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;main.c: 738: if ( bOn ) {
  2001  002616  51CF               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  2002  002618  E03A               	bz	l226
  2003                           
  2004                           ; BSR set to: 0
  2005                           ;main.c: 741: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  2006  00261A  D86D               	call	PL32	;call to abstracted procedure
  2007  00261C  ECDA  F021         	call	_readEEPROM	;wreg free
  2008  002620  0100               	movlb	0	; () banked
  2009  002622  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2010  002624  A5CC               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2011  002626  D020               	goto	l9817
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;main.c: 742: relay_protection_timer[ i ] =
  2015                           ;main.c: 743: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  2016                           ;main.c: 744: readEEPROM( 0x43 + 35 + 2*i );
  2017  002628  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2018  00262A  0D02               	mullw	2
  2019  00262C  0E65               	movlw	101
  2020  00262E  24F3               	addwf	prodl,w,c
  2021  002630  6E08               	movwf	?_readEEPROM,c
  2022  002632  0E00               	movlw	0
  2023  002634  20F4               	addwfc	prodh,w,c
  2024  002636  6E09               	movwf	?_readEEPROM+1,c
  2025  002638  ECDA  F021         	call	_readEEPROM	;wreg free
  2026  00263C  0100               	movlb	0	; () banked
  2027  00263E  6FCD               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2028  002640  6BCC               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2029  002642  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2030  002644  0D02               	mullw	2
  2031  002646  0E66               	movlw	102
  2032  002648  24F3               	addwf	prodl,w,c
  2033  00264A  6E08               	movwf	?_readEEPROM,c
  2034  00264C  0E00               	movlw	0
  2035  00264E  20F4               	addwfc	prodh,w,c
  2036  002650  6E09               	movwf	?_readEEPROM+1,c
  2037  002652  ECDA  F021         	call	_readEEPROM	;wreg free
  2038  002656  0100               	movlb	0	; () banked
  2039  002658  27CC               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2040  00265A  0E00               	movlw	0
  2041  00265C  23CD               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2042  00265E  D844               	call	PL22	;call to abstracted procedure
  2043  002660  C0CC  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2044  002664  C0CD  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2045  002668                     l9817:
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;main.c: 745: }
  2049                           ;main.c: 747: if ( ctrlreg & 0x08 ) {
  2050  002668  A7D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2051  00266A  D007               	goto	l9821
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;main.c: 748: SendInformationEvent( i, 20,
  2055                           ;main.c: 749: 3 );
  2056  00266C  0E14               	movlw	20
  2057  00266E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2058  002670  0E03               	movlw	3
  2059  002672  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2060  002674  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2061  002676  EC52  F01F         	call	_SendInformationEvent
  2062  00267A                     l9821:
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;main.c: 750: }
  2066                           ;main.c: 752: if ( ctrlreg & 0x20 ) {
  2067  00267A  ABD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2068  00267C  D02C               	goto	l9833
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;main.c: 753: SendInformationEvent( i, 20,
  2072                           ;main.c: 754: 25 );
  2073  00267E  0E14               	movlw	20
  2074  002680  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2075  002682  0E19               	movlw	25
  2076  002684  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2077  002686  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2078  002688  EC52  F01F         	call	_SendInformationEvent
  2079  00268C  D024               	goto	l9833
  2080  00268E                     l226:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;main.c: 759: if ( ctrlreg & 0x10 ) {
  2084  00268E  A9D0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2085  002690  D007               	goto	l9827
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;main.c: 760: SendInformationEvent( i, 20,
  2089                           ;main.c: 761: 4 );
  2090  002692  0E14               	movlw	20
  2091  002694  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2092  002696  0E04               	movlw	4
  2093  002698  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2094  00269A  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2095  00269C  EC52  F01F         	call	_SendInformationEvent
  2096  0026A0                     l9827:
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;main.c: 762: }
  2100                           ;main.c: 764: if (ctrlreg & 0x40) {
  2101  0026A0  ADD0               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2102  0026A2  D019               	goto	l9833
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 765: SendInformationEvent( i, 20,
  2106                           ;main.c: 766: 24 );
  2107  0026A4  0E14               	movlw	20
  2108  0026A6  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  2109  0026A8  0E18               	movlw	24
  2110  0026AA  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2111  0026AC  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2112  0026AE  EC52  F01F         	call	_SendInformationEvent
  2113  0026B2  D011               	goto	l9833
  2114  0026B4                     l9831:
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;main.c: 773: else {
  2118                           ;main.c: 775: relay_pulse_timer[ 0 ] =
  2119                           ;main.c: 776: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2120                           ;main.c: 777: readEEPROM( 0x43 + 19 + 2*i );
  2121  0026B4  D830               	call	PL56	;call to abstracted procedure
  2122  0026B6  ECDA  F021         	call	_readEEPROM	;wreg free
  2123  0026BA  0100               	movlb	0	; () banked
  2124  0026BC  6FCC               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2125  0026BE  D822               	call	PL54	;call to abstracted procedure
  2126  0026C0  ECDA  F021         	call	_readEEPROM	;wreg free
  2127  0026C4  0100               	movlb	0	; () banked
  2128  0026C6  6FCE               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2129  0026C8  6BCD               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2130  0026CA  51CC               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2131  0026CC  25CD               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2132  0026CE  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2133  0026D0  0E00               	movlw	0
  2134  0026D2  21CE               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2135  0026D4  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2136  0026D6                     l9833:
  2137                           
  2138                           ; BSR set to: 0
  2139  0026D6  2BD1               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2140  0026D8  D6DD               	goto	l9745
  2141  0026DA                     __end_of_doApplicationOneSecondWork:
  2142                           	opt stack 0
  2143  0026DA                     PL20:
  2144                           	opt stack 22
  2145  0026DA  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2146  0026DC  0D02               	mullw	2
  2147  0026DE  50F3               	movf	prodl,w,c
  2148  0026E0  0F70               	addlw	low _relay_pulse_timer
  2149  0026E2  6ED9               	movwf	fsr2l,c
  2150  0026E4  6ADA               	clrf	fsr2h,c
  2151  0026E6  0012               	return	
  2152  0026E8                     __end_ofPL20:
  2153                           	opt stack 0
  2154  0026E8                     PL22:
  2155                           	opt stack 22
  2156  0026E8  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2157  0026EA  0D02               	mullw	2
  2158  0026EC  50F3               	movf	prodl,w,c
  2159  0026EE  0F60               	addlw	low _relay_protection_timer
  2160  0026F0  6ED9               	movwf	fsr2l,c
  2161  0026F2  6ADA               	clrf	fsr2h,c
  2162  0026F4  0012               	return	
  2163  0026F6                     __end_ofPL22:
  2164                           	opt stack 0
  2165  0026F6                     PL32:
  2166                           	opt stack 22
  2167  0026F6  0E4D               	movlw	77
  2168  0026F8  25D1               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2169  0026FA  6E08               	movwf	?_readEEPROM,c
  2170  0026FC  6A09               	clrf	?_readEEPROM+1,c
  2171  0026FE  0E00               	movlw	0
  2172  002700  2209               	addwfc	?_readEEPROM+1,f,c
  2173  002702  0C00               	retlw	0
  2174  002704                     __end_ofPL32:
  2175                           	opt stack 0
  2176  002704                     PL54:
  2177                           	opt stack 22
  2178  002704  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2179  002706  0D02               	mullw	2
  2180  002708  0E55               	movlw	85
  2181  00270A  24F3               	addwf	prodl,w,c
  2182  00270C  6E08               	movwf	?_readEEPROM,c
  2183  00270E  0E00               	movlw	0
  2184  002710  20F4               	addwfc	prodh,w,c
  2185  002712  6E09               	movwf	?_readEEPROM+1,c
  2186  002714  0012               	return	
  2187  002716                     __end_ofPL54:
  2188                           	opt stack 0
  2189  002716                     PL56:
  2190                           	opt stack 22
  2191  002716  51D1               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2192  002718  0D02               	mullw	2
  2193  00271A  0E56               	movlw	86
  2194  00271C  24F3               	addwf	prodl,w,c
  2195  00271E  6E08               	movwf	?_readEEPROM,c
  2196  002720  0E00               	movlw	0
  2197  002722  20F4               	addwfc	prodh,w,c
  2198  002724  6E09               	movwf	?_readEEPROM+1,c
  2199  002726  0012               	return	
  2200  002728                     __end_ofPL56:
  2201                           	opt stack 0
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           prodh	equ	0xFF4
  2207                           prodl	equ	0xFF3
  2208                           intcon	equ	0xFF2
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           indf1	equ	0xFE7
  2212                           fsr1h	equ	0xFE2
  2213                           fsr1l	equ	0xFE1
  2214                           indf2	equ	0xFDF
  2215                           postinc2	equ	0xFDE
  2216                           postdec2	equ	0xFDD
  2217                           plusw2	equ	0xFDB
  2218                           fsr2h	equ	0xFDA
  2219                           fsr2l	equ	0xFD9
  2220                           status	equ	0xFD8
  2221                           
  2222 ;; *************** function _vscp_doOneSecondWork *****************
  2223 ;; Defined at:
  2224 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;		None
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;		None
  2229 ;; Return value:  Size  Location     Type
  2230 ;;		None               void
  2231 ;; Registers used:
  2232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2233 ;; Tracked objects:
  2234 ;;		On entry : F/0
  2235 ;;		On exit  : F/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2240 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2242 ;;Total ram usage:        1 bytes
  2243 ;; Hardware stack levels used:    1
  2244 ;; Hardware stack levels required when called:    8
  2245 ;; This function calls:
  2246 ;;		_vscp_getZone
  2247 ;;		_vscp_getSubzone
  2248 ;;		_vscp_sendHeartBeat
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text3
  2255  003F10                     __ptext3:
  2256                           	opt stack 0
  2257  003F10                     _vscp_doOneSecondWork:
  2258                           	opt stack 22
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;vscp_firmware.c: 518: ++vscp_second;
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;incstack = 0
  2265                           ;incstack = 0
  2266  003F10  2B95               	incf	_vscp_second& (0+255),f,b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  2270  003F12  0E3B               	movlw	59
  2271  003F14  6595               	cpfsgt	_vscp_second& (0+255),b
  2272  003F16  D00D               	goto	l7861
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;vscp_firmware.c: 521: vscp_second = 0;
  2276  003F18  6B95               	clrf	_vscp_second& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;vscp_firmware.c: 522: vscp_minute++;
  2280  003F1A  2B90               	incf	_vscp_minute& (0+255),f,b
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  2284  003F1C  5192               	movf	_vscp_node_state& (0+255),w,b
  2285  003F1E  0A03               	xorlw	3
  2286  003F20  E108               	bnz	l7861
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  2290                           ;vscp_firmware.c: 527: vscp_getSubzone());
  2291  003F22  ECEC  F021         	call	_vscp_getSubzone	;wreg free
  2292  003F26  0100               	movlb	0	; () banked
  2293  003F28  6FC5               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2294  003F2A  ECF1  F021         	call	_vscp_getZone	;wreg free
  2295  003F2E  EC80  F020         	call	_vscp_sendHeartBeat
  2296  003F32                     l7861:
  2297                           
  2298                           ; BSR set to: 0
  2299                           ;vscp_firmware.c: 528: }
  2300                           ;vscp_firmware.c: 529: }
  2301                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  2302  003F32  0E3B               	movlw	59
  2303  003F34  6590               	cpfsgt	_vscp_minute& (0+255),b
  2304  003F36  D002               	goto	l7867
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;vscp_firmware.c: 532: vscp_minute = 0;
  2308  003F38  6B90               	clrf	_vscp_minute& (0+255),b
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;vscp_firmware.c: 533: vscp_hour++;
  2312  003F3A  2B8E               	incf	_vscp_hour& (0+255),f,b
  2313  003F3C                     l7867:
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;vscp_firmware.c: 534: }
  2317                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  2318  003F3C  0E17               	movlw	23
  2319  003F3E  658E               	cpfsgt	_vscp_hour& (0+255),b
  2320  003F40  D001               	goto	l7871
  2321                           
  2322                           ; BSR set to: 0
  2323  003F42  6B8E               	clrf	_vscp_hour& (0+255),b
  2324  003F44                     l7871:
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  2328  003F44  5192               	movf	_vscp_node_state& (0+255),w,b
  2329  003F46  0A03               	xorlw	3
  2330  003F48  A4D8               	btfss	status,2,c
  2331  003F4A  0012               	return	
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  2335  003F4C  2B8D               	incf	_vscp_guid_reset& (0+255),f,b
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  2339  003F4E  C08D  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2340  003F52  0E0F               	movlw	15
  2341  003F54  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2342  003F56  0E02               	movlw	2
  2343  003F58  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2344  003F5A  B0D8               	btfsc	status,0,c
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  2348  003F5C  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  2349                           
  2350                           ; BSR set to: 0
  2351  003F5E  0012               	return	
  2352  003F60                     __end_of_vscp_doOneSecondWork:
  2353                           	opt stack 0
  2354                           tblptru	equ	0xFF8
  2355                           tblptrh	equ	0xFF7
  2356                           tblptrl	equ	0xFF6
  2357                           tablat	equ	0xFF5
  2358                           prodh	equ	0xFF4
  2359                           prodl	equ	0xFF3
  2360                           intcon	equ	0xFF2
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           indf1	equ	0xFE7
  2364                           fsr1h	equ	0xFE2
  2365                           fsr1l	equ	0xFE1
  2366                           indf2	equ	0xFDF
  2367                           postinc2	equ	0xFDE
  2368                           postdec2	equ	0xFDD
  2369                           plusw2	equ	0xFDB
  2370                           fsr2h	equ	0xFDA
  2371                           fsr2l	equ	0xFD9
  2372                           status	equ	0xFD8
  2373                           
  2374 ;; *************** function _vscp_sendHeartBeat *****************
  2375 ;; Defined at:
  2376 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;  zone            1    wreg     unsigned char 
  2379 ;;  subzone         1   20[BANK0 ] unsigned char 
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;  zone            1   75[COMRAM] unsigned char 
  2382 ;; Return value:  Size  Location     Type
  2383 ;;		None               void
  2384 ;; Registers used:
  2385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : F/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2391 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2394 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2395 ;;Total ram usage:        2 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    7
  2398 ;; This function calls:
  2399 ;;		_vscp_sendEvent
  2400 ;; This function is called by:
  2401 ;;		_vscp_doOneSecondWork
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text4
  2406  004100                     __ptext4:
  2407                           	opt stack 0
  2408  004100                     _vscp_sendHeartBeat:
  2409                           	opt stack 22
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;incstack = 0
  2413                           ;incstack = 0
  2414                           ;vscp_sendHeartBeat@zone stored from wreg
  2415  004100  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2416                           
  2417                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  2418  004104  0E83               	movlw	131
  2419  004106  0100               	movlb	0	; () banked
  2420  004108  6FA4               	movwf	_vscp_omsg& (0+255),b
  2421                           
  2422                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  2423  00410A  0E07               	movlw	7
  2424  00410C  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  2425                           
  2426                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  2427  00410E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  2428  004110  0E14               	movlw	20
  2429  004112  6FA6               	movwf	(_vscp_omsg+2)& (0+255),b
  2430                           
  2431                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  2432  004114  0E09               	movlw	9
  2433  004116  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  2437  004118  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  2441  00411A  C04C  F0AA         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  2445  00411E  C0C5  F0AB         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;vscp_firmware.c: 380: vscp_sendEvent();
  2449  004122  EF93  F020         	goto	_vscp_sendEvent	;wreg free
  2450  004126                     __end_of_vscp_sendHeartBeat:
  2451                           	opt stack 0
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           prodh	equ	0xFF4
  2457                           prodl	equ	0xFF3
  2458                           intcon	equ	0xFF2
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           indf1	equ	0xFE7
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           postinc2	equ	0xFDE
  2466                           postdec2	equ	0xFDD
  2467                           plusw2	equ	0xFDB
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _vscp_getSubzone *****************
  2473 ;; Defined at:
  2474 ;;		line 888 in file "../main.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      unsigned char 
  2481 ;; Registers used:
  2482 ;;		wreg, status,2, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : F/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2492 ;;Total ram usage:        0 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    3
  2495 ;; This function calls:
  2496 ;;		_readEEPROM
  2497 ;; This function is called by:
  2498 ;;		_vscp_doOneSecondWork
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text5
  2503  0043D8                     __ptext5:
  2504                           	opt stack 0
  2505  0043D8                     _vscp_getSubzone:
  2506                           	opt stack 26
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;main.c: 889: return readEEPROM( 0x43 + 1 );
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;incstack = 0
  2513                           ;incstack = 0
  2514  0043D8  6A09               	clrf	?_readEEPROM+1,c
  2515  0043DA  0E44               	movlw	68
  2516  0043DC  6E08               	movwf	?_readEEPROM,c
  2517  0043DE  EFDA  F021         	goto	_readEEPROM	;wreg free
  2518  0043E2                     __end_of_vscp_getSubzone:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           prodh	equ	0xFF4
  2525                           prodl	equ	0xFF3
  2526                           intcon	equ	0xFF2
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           indf1	equ	0xFE7
  2530                           fsr1h	equ	0xFE2
  2531                           fsr1l	equ	0xFE1
  2532                           indf2	equ	0xFDF
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           plusw2	equ	0xFDB
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _vscp_getZone *****************
  2541 ;; Defined at:
  2542 ;;		line 879 in file "../main.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      unsigned char 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : F/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2560 ;;Total ram usage:        0 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    3
  2563 ;; This function calls:
  2564 ;;		_readEEPROM
  2565 ;; This function is called by:
  2566 ;;		_vscp_doOneSecondWork
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text6
  2571  0043E2                     __ptext6:
  2572                           	opt stack 0
  2573  0043E2                     _vscp_getZone:
  2574                           	opt stack 26
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 880: return readEEPROM( 0x43 + 0 );
  2578                           
  2579                           ;incstack = 0
  2580                           ;incstack = 0
  2581  0043E2  6A09               	clrf	?_readEEPROM+1,c
  2582  0043E4  0E43               	movlw	67
  2583  0043E6  6E08               	movwf	?_readEEPROM,c
  2584  0043E8  EFDA  F021         	goto	_readEEPROM	;wreg free
  2585  0043EC                     __end_of_vscp_getZone:
  2586                           	opt stack 0
  2587                           tblptru	equ	0xFF8
  2588                           tblptrh	equ	0xFF7
  2589                           tblptrl	equ	0xFF6
  2590                           tablat	equ	0xFF5
  2591                           prodh	equ	0xFF4
  2592                           prodl	equ	0xFF3
  2593                           intcon	equ	0xFF2
  2594                           postinc0	equ	0xFEE
  2595                           wreg	equ	0xFE8
  2596                           indf1	equ	0xFE7
  2597                           fsr1h	equ	0xFE2
  2598                           fsr1l	equ	0xFE1
  2599                           indf2	equ	0xFDF
  2600                           postinc2	equ	0xFDE
  2601                           postdec2	equ	0xFDD
  2602                           plusw2	equ	0xFDB
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _vscp_error *****************
  2608 ;; Defined at:
  2609 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		None
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2627 ;;Total ram usage:        0 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    2
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text7
  2638  00441C                     __ptext7:
  2639                           	opt stack 0
  2640  00441C                     _vscp_error:
  2641                           	opt stack 28
  2642                           
  2643                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  2644                           
  2645                           ;incstack = 0
  2646                           ;incstack = 0
  2647  00441C  6A56               	clrf	_vscp_initledfunc,c
  2648  00441E  0012               	return	
  2649  004420                     __end_of_vscp_error:
  2650                           	opt stack 0
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           prodh	equ	0xFF4
  2656                           prodl	equ	0xFF3
  2657                           intcon	equ	0xFF2
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           indf1	equ	0xFE7
  2661                           fsr1h	equ	0xFE2
  2662                           fsr1l	equ	0xFE1
  2663                           indf2	equ	0xFDF
  2664                           postinc2	equ	0xFDE
  2665                           postdec2	equ	0xFDD
  2666                           plusw2	equ	0xFDB
  2667                           fsr2h	equ	0xFDA
  2668                           fsr2l	equ	0xFD9
  2669                           status	equ	0xFD8
  2670                           
  2671 ;; *************** function _doDM *****************
  2672 ;; Defined at:
  2673 ;;		line 1608 in file "../main.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;		None
  2676 ;; Auto vars:     Size  Location     Type
  2677 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2678 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2679 ;;  i               1   44[BANK0 ] unsigned char 
  2680 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2681 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2682 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2683 ;; Return value:  Size  Location     Type
  2684 ;;		None               void
  2685 ;; Registers used:
  2686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : F/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2693 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2694 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2695 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;Total ram usage:       17 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    8
  2699 ;; This function calls:
  2700 ;;		_readEEPROM
  2701 ;;		_doActionOff
  2702 ;;		_doActionOn
  2703 ;;		_doActionPulse
  2704 ;;		_doActionStatus
  2705 ;;		_doActionDisable
  2706 ;;		_doActionToggle
  2707 ;; This function is called by:
  2708 ;;		_main
  2709 ;; This function uses a non-reentrant model
  2710 ;;
  2711                           
  2712                           	psect	text8
  2713  002992                     __ptext8:
  2714                           	opt stack 0
  2715  002992                     _doDM:
  2716                           	opt stack 22
  2717                           
  2718                           ;main.c: 1609: unsigned char i;
  2719                           ;main.c: 1610: unsigned char dmflags;
  2720                           ;main.c: 1611: unsigned short class_filter;
  2721                           ;main.c: 1612: unsigned short class_mask;
  2722                           ;main.c: 1613: unsigned char type_filter;
  2723                           ;main.c: 1614: unsigned char type_mask;
  2724                           ;main.c: 1617: if ( 0 == vscp_imsg.vscp_class ) return;
  2725                           
  2726                           ;incstack = 0
  2727                           ;incstack = 0
  2728  002992  0100               	movlb	0	; () banked
  2729  002994  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  2730  002996  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2731  002998  B4D8               	btfsc	status,2,c
  2732  00299A  0012               	return	
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 1619: for (i = 0; i < 7; i++) {
  2736  00299C  6BDD               	clrf	doDM@i& (0+255),b
  2737  00299E                     l9681:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 1622: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2741  00299E  D901               	call	PL2	;call to abstracted procedure
  2742  0029A0  0E8C               	movlw	140
  2743  0029A2  25CD               	addwf	??_doDM& (0+255),w,b
  2744  0029A4  6E08               	movwf	?_readEEPROM,c
  2745  0029A6  0E00               	movlw	0
  2746  0029A8  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2747  0029AA  6E09               	movwf	?_readEEPROM+1,c
  2748  0029AC  ECDA  F021         	call	_readEEPROM	;wreg free
  2749  0029B0  0100               	movlb	0	; () banked
  2750  0029B2  6FDC               	movwf	doDM@dmflags& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;main.c: 1625: if ( dmflags & 0x80 ) {
  2754  0029B4  AFDC               	btfss	doDM@dmflags& (0+255),7,b
  2755  0029B6  D0EF               	goto	l9739
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;main.c: 1628: if ( ( dmflags & 0x40 ) &&
  2759                           ;main.c: 1629: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2760  0029B8  ADDC               	btfss	doDM@dmflags& (0+255),6,b
  2761  0029BA  D018               	goto	l415
  2762                           
  2763                           ; BSR set to: 0
  2764  0029BC  51DD               	movf	doDM@i& (0+255),w,b
  2765  0029BE  6FCD               	movwf	??_doDM& (0+255),b
  2766  0029C0  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2767  0029C2  90D8               	bcf	status,0,c
  2768  0029C4  37CD               	rlcf	??_doDM& (0+255),f,b
  2769  0029C6  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2770  0029C8  90D8               	bcf	status,0,c
  2771  0029CA  37CD               	rlcf	??_doDM& (0+255),f,b
  2772  0029CC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2773  0029CE  90D8               	bcf	status,0,c
  2774  0029D0  37CD               	rlcf	??_doDM& (0+255),f,b
  2775  0029D2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  2776  0029D4  0E8B               	movlw	139
  2777  0029D6  25CD               	addwf	??_doDM& (0+255),w,b
  2778  0029D8  6E08               	movwf	?_readEEPROM,c
  2779  0029DA  0E00               	movlw	0
  2780  0029DC  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2781  0029DE  6E09               	movwf	?_readEEPROM+1,c
  2782  0029E0  ECDA  F021         	call	_readEEPROM	;wreg free
  2783  0029E4  0100               	movlb	0	; () banked
  2784  0029E6  199B               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2785  0029E8  E001 D0D5          	bnz	l9739
  2786  0029EC                     l415:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;main.c: 1631: }
  2790                           ;main.c: 1634: if ( dmflags & 0x10 ) {
  2791  0029EC  A9DC               	btfss	doDM@dmflags& (0+255),4,b
  2792  0029EE  D00B               	goto	l417
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;main.c: 1635: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2796  0029F0  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2797  0029F2  E009               	bz	l417
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;main.c: 1636: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2801  0029F4  6A09               	clrf	?_readEEPROM+1,c
  2802  0029F6  0E43               	movlw	67
  2803  0029F8  6E08               	movwf	?_readEEPROM,c
  2804  0029FA  ECDA  F021         	call	_readEEPROM	;wreg free
  2805  0029FE  0100               	movlb	0	; () banked
  2806  002A00  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2807  002A02  E001 D0C8          	bnz	l9739
  2808  002A06                     l417:
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;main.c: 1638: }
  2812                           ;main.c: 1639: }
  2813                           ;main.c: 1640: }
  2814                           ;main.c: 1643: if ( dmflags & 0x08 ) {
  2815  002A06  A7DC               	btfss	doDM@dmflags& (0+255),3,b
  2816  002A08  D00B               	goto	l9703
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 1644: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2820  002A0A  299D               	incf	(_vscp_imsg+7)& (0+255),w,b
  2821  002A0C  E009               	bz	l9703
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;main.c: 1645: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2825  002A0E  6A09               	clrf	?_readEEPROM+1,c
  2826  002A10  0E43               	movlw	67
  2827  002A12  6E08               	movwf	?_readEEPROM,c
  2828  002A14  ECDA  F021         	call	_readEEPROM	;wreg free
  2829  002A18  0100               	movlb	0	; () banked
  2830  002A1A  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2831  002A1C  E001 D0BB          	bnz	l9739
  2832  002A20                     l9703:
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 1647: }
  2836                           ;main.c: 1648: }
  2837                           ;main.c: 1649: }
  2838                           ;main.c: 1651: class_filter = ( dmflags & 0x01)*256 +
  2839                           ;main.c: 1652: readEEPROM( 0x43 +
  2840                           ;main.c: 1653: 72 +
  2841                           ;main.c: 1654: (8 * i) +
  2842                           ;main.c: 1655: 3);
  2843  002A20  51DD               	movf	doDM@i& (0+255),w,b
  2844  002A22  0D08               	mullw	8
  2845  002A24  0E8E               	movlw	142
  2846  002A26  24F3               	addwf	prodl,w,c
  2847  002A28  6E08               	movwf	?_readEEPROM,c
  2848  002A2A  0E00               	movlw	0
  2849  002A2C  20F4               	addwfc	prodh,w,c
  2850  002A2E  6E09               	movwf	?_readEEPROM+1,c
  2851  002A30  ECDA  F021         	call	_readEEPROM	;wreg free
  2852  002A34  0100               	movlb	0	; () banked
  2853  002A36  6FCD               	movwf	??_doDM& (0+255),b
  2854  002A38  51DC               	movf	doDM@dmflags& (0+255),w,b
  2855  002A3A  0B01               	andlw	1
  2856  002A3C  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2857  002A3E  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2858  002A40  51CD               	movf	??_doDM& (0+255),w,b
  2859  002A42  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2860  002A44  6FD0               	movwf	doDM@class_filter& (0+255),b
  2861  002A46  0E00               	movlw	0
  2862  002A48  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2863  002A4A  6FD1               	movwf	(doDM@class_filter+1)& (0+255),b
  2864                           
  2865                           ;main.c: 1656: class_mask = ( dmflags & 0x02)*256 +
  2866                           ;main.c: 1657: readEEPROM( 0x43 +
  2867                           ;main.c: 1658: 72 +
  2868                           ;main.c: 1659: (8 * i) +
  2869                           ;main.c: 1660: 2);
  2870  002A4C  51DD               	movf	doDM@i& (0+255),w,b
  2871  002A4E  0D08               	mullw	8
  2872  002A50  0E8D               	movlw	141
  2873  002A52  24F3               	addwf	prodl,w,c
  2874  002A54  6E08               	movwf	?_readEEPROM,c
  2875  002A56  0E00               	movlw	0
  2876  002A58  20F4               	addwfc	prodh,w,c
  2877  002A5A  6E09               	movwf	?_readEEPROM+1,c
  2878  002A5C  ECDA  F021         	call	_readEEPROM	;wreg free
  2879  002A60  0100               	movlb	0	; () banked
  2880  002A62  6FCD               	movwf	??_doDM& (0+255),b
  2881  002A64  51DC               	movf	doDM@dmflags& (0+255),w,b
  2882  002A66  0B02               	andlw	2
  2883  002A68  6FCF               	movwf	(??_doDM+2)& (0+255),b
  2884  002A6A  6BCE               	clrf	(??_doDM+1)& (0+255),b
  2885  002A6C  51CD               	movf	??_doDM& (0+255),w,b
  2886  002A6E  25CE               	addwf	(??_doDM+1)& (0+255),w,b
  2887  002A70  6FD2               	movwf	doDM@class_mask& (0+255),b
  2888  002A72  0E00               	movlw	0
  2889  002A74  21CF               	addwfc	(??_doDM+2)& (0+255),w,b
  2890  002A76  6FD3               	movwf	(doDM@class_mask+1)& (0+255),b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;main.c: 1661: type_filter = readEEPROM( 0x43 +
  2894                           ;main.c: 1662: 72 +
  2895                           ;main.c: 1663: (8 * i) +
  2896                           ;main.c: 1664: 5);
  2897  002A78  D894               	call	PL2	;call to abstracted procedure
  2898  002A7A  0E90               	movlw	144
  2899  002A7C  25CD               	addwf	??_doDM& (0+255),w,b
  2900  002A7E  6E08               	movwf	?_readEEPROM,c
  2901  002A80  0E00               	movlw	0
  2902  002A82  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2903  002A84  6E09               	movwf	?_readEEPROM+1,c
  2904  002A86  ECDA  F021         	call	_readEEPROM	;wreg free
  2905  002A8A  0100               	movlb	0	; () banked
  2906  002A8C  6FD4               	movwf	doDM@type_filter& (0+255),b
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;main.c: 1665: type_mask = readEEPROM( 0x43 +
  2910                           ;main.c: 1666: 72 +
  2911                           ;main.c: 1667: (8 * i) +
  2912                           ;main.c: 1668: 4);
  2913  002A8E  D889               	call	PL2	;call to abstracted procedure
  2914  002A90  0E8F               	movlw	143
  2915  002A92  25CD               	addwf	??_doDM& (0+255),w,b
  2916  002A94  6E08               	movwf	?_readEEPROM,c
  2917  002A96  0E00               	movlw	0
  2918  002A98  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  2919  002A9A  6E09               	movwf	?_readEEPROM+1,c
  2920  002A9C  ECDA  F021         	call	_readEEPROM	;wreg free
  2921  002AA0  0100               	movlb	0	; () banked
  2922  002AA2  6FD5               	movwf	doDM@type_mask& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;main.c: 1670: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2926                           ;main.c: 1671: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2927  002AA4  EE20  F098         	lfsr	2,_vscp_imsg+2
  2928  002AA8  CFDE F0CD          	movff	postinc2,??_doDM
  2929  002AAC  CFDD F0CE          	movff	postdec2,??_doDM+1
  2930  002AB0  51D0               	movf	doDM@class_filter& (0+255),w,b
  2931  002AB2  1BCD               	xorwf	??_doDM& (0+255),f,b
  2932  002AB4  51D1               	movf	(doDM@class_filter+1)& (0+255),w,b
  2933  002AB6  1BCE               	xorwf	(??_doDM+1)& (0+255),f,b
  2934  002AB8  51D2               	movf	doDM@class_mask& (0+255),w,b
  2935  002ABA  17CD               	andwf	??_doDM& (0+255),f,b
  2936  002ABC  51D3               	movf	(doDM@class_mask+1)& (0+255),w,b
  2937  002ABE  17CE               	andwf	(??_doDM+1)& (0+255),f,b
  2938  002AC0  51CE               	movf	(??_doDM+1)& (0+255),w,b
  2939  002AC2  11CD               	iorwf	??_doDM& (0+255),w,b
  2940  002AC4  E168               	bnz	l9739
  2941                           
  2942                           ; BSR set to: 0
  2943  002AC6  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  2944  002AC8  19D4               	xorwf	doDM@type_filter& (0+255),w,b
  2945  002ACA  15D5               	andwf	doDM@type_mask& (0+255),w,b
  2946  002ACC  E04F               	bz	l9737
  2947  002ACE  D063               	goto	l9739
  2948  002AD0                     l9715:
  2949                           
  2950                           ;main.c: 1677: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2951  002AD0  0100               	movlb	0	; () banked
  2952  002AD2  D867               	call	PL2	;call to abstracted procedure
  2953  002AD4  D873               	call	PL16	;call to abstracted procedure
  2954  002AD6  ECDA  F021         	call	_readEEPROM	;wreg free
  2955  002ADA  0100               	movlb	0	; () banked
  2956  002ADC  6FD6               	movwf	_doDM$2084& (0+255),b
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;main.c: 1677: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2960  002ADE  C0D6  F051         	movff	_doDM$2084,?_doActionOn
  2961  002AE2  51DC               	movf	doDM@dmflags& (0+255),w,b
  2962  002AE4  EC94  F013         	call	_doActionOn
  2963                           
  2964                           ;main.c: 1678: break;
  2965  002AE8  D056               	goto	l9739
  2966  002AEA                     l9719:
  2967                           
  2968                           ;main.c: 1681: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2969  002AEA  0100               	movlb	0	; () banked
  2970  002AEC  D85A               	call	PL2	;call to abstracted procedure
  2971  002AEE  D866               	call	PL16	;call to abstracted procedure
  2972  002AF0  ECDA  F021         	call	_readEEPROM	;wreg free
  2973  002AF4  0100               	movlb	0	; () banked
  2974  002AF6  6FD7               	movwf	_doDM$2085& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;main.c: 1681: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2978  002AF8  C0D7  F051         	movff	_doDM$2085,?_doActionOff
  2979  002AFC  51DC               	movf	doDM@dmflags& (0+255),w,b
  2980  002AFE  ECEC  F01C         	call	_doActionOff
  2981                           
  2982                           ;main.c: 1682: break;
  2983  002B02  D049               	goto	l9739
  2984  002B04                     l9723:
  2985                           
  2986                           ;main.c: 1685: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2987  002B04  0100               	movlb	0	; () banked
  2988  002B06  D84D               	call	PL2	;call to abstracted procedure
  2989  002B08  D859               	call	PL16	;call to abstracted procedure
  2990  002B0A  ECDA  F021         	call	_readEEPROM	;wreg free
  2991  002B0E  0100               	movlb	0	; () banked
  2992  002B10  6FD8               	movwf	_doDM$2086& (0+255),b
  2993                           
  2994                           ;main.c: 1685: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2995  002B12  C0D8  F00B         	movff	_doDM$2086,?_doActionPulse
  2996  002B16  51DC               	movf	doDM@dmflags& (0+255),w,b
  2997  002B18  ECDE  F016         	call	_doActionPulse
  2998                           
  2999                           ;main.c: 1686: break;
  3000  002B1C  D03C               	goto	l9739
  3001  002B1E                     l9725:
  3002                           
  3003                           ;main.c: 1689: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3004  002B1E  0100               	movlb	0	; () banked
  3005  002B20  D840               	call	PL2	;call to abstracted procedure
  3006  002B22  D84C               	call	PL16	;call to abstracted procedure
  3007  002B24  ECDA  F021         	call	_readEEPROM	;wreg free
  3008  002B28  0100               	movlb	0	; () banked
  3009  002B2A  6FD9               	movwf	_doDM$2087& (0+255),b
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;main.c: 1689: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3013  002B2C  C0D9  F051         	movff	_doDM$2087,?_doActionStatus
  3014  002B30  51DC               	movf	doDM@dmflags& (0+255),w,b
  3015  002B32  ECF0  F01A         	call	_doActionStatus
  3016                           
  3017                           ;main.c: 1690: break;
  3018  002B36  D02F               	goto	l9739
  3019  002B38                     l9729:
  3020                           
  3021                           ;main.c: 1693: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3022  002B38  0100               	movlb	0	; () banked
  3023  002B3A  D833               	call	PL2	;call to abstracted procedure
  3024  002B3C  D83F               	call	PL16	;call to abstracted procedure
  3025  002B3E  ECDA  F021         	call	_readEEPROM	;wreg free
  3026  002B42  0100               	movlb	0	; () banked
  3027  002B44  6FDA               	movwf	_doDM$2088& (0+255),b
  3028                           
  3029                           ;main.c: 1693: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3030  002B46  C0DA  F00B         	movff	_doDM$2088,?_doActionDisable
  3031  002B4A  51DC               	movf	doDM@dmflags& (0+255),w,b
  3032  002B4C  EC1C  F01F         	call	_doActionDisable
  3033                           
  3034                           ;main.c: 1694: break;
  3035  002B50  D022               	goto	l9739
  3036  002B52                     l9731:
  3037                           
  3038                           ;main.c: 1697: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3039  002B52  0100               	movlb	0	; () banked
  3040  002B54  D826               	call	PL2	;call to abstracted procedure
  3041  002B56  D832               	call	PL16	;call to abstracted procedure
  3042  002B58  ECDA  F021         	call	_readEEPROM	;wreg free
  3043  002B5C  0100               	movlb	0	; () banked
  3044  002B5E  6FDB               	movwf	_doDM$2089& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;main.c: 1697: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3048  002B60  C0DB  F051         	movff	_doDM$2089,?_doActionToggle
  3049  002B64  51DC               	movf	doDM@dmflags& (0+255),w,b
  3050  002B66  EC47  F019         	call	_doActionToggle
  3051                           
  3052                           ;main.c: 1698: break;
  3053  002B6A  D015               	goto	l9739
  3054  002B6C                     l9737:
  3055                           
  3056                           ; BSR set to: 0
  3057  002B6C  D81A               	call	PL2	;call to abstracted procedure
  3058  002B6E  0E91               	movlw	145
  3059  002B70  25CD               	addwf	??_doDM& (0+255),w,b
  3060  002B72  6E08               	movwf	?_readEEPROM,c
  3061  002B74  0E00               	movlw	0
  3062  002B76  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3063  002B78  6E09               	movwf	?_readEEPROM+1,c
  3064  002B7A  ECDA  F021         	call	_readEEPROM	;wreg free
  3065                           
  3066                           ; Switch size 1, requested type "space"
  3067                           ; Number of cases is 6, Range of values is 1 to 16
  3068                           ; switch strategies available:
  3069                           ; Name         Instructions Cycles
  3070                           ; simple_byte           19    10 (average)
  3071                           ;	Chosen strategy is simple_byte
  3072  002B7E  0A01               	xorlw	1	; case 1
  3073  002B80  E0A7               	bz	l9715
  3074  002B82  0A03               	xorlw	3	; case 2
  3075  002B84  E0B2               	bz	l9719
  3076  002B86  0A01               	xorlw	1	; case 3
  3077  002B88  E0BD               	bz	l9723
  3078  002B8A  0A07               	xorlw	7	; case 4
  3079  002B8C  E0E2               	bz	l9731
  3080  002B8E  0A0E               	xorlw	14	; case 10
  3081  002B90  E0C6               	bz	l9725
  3082  002B92  0A1A               	xorlw	26	; case 16
  3083  002B94  E0D1               	bz	l9729
  3084  002B96                     l9739:
  3085  002B96  0100               	movlb	0	; () banked
  3086  002B98  2BDD               	incf	doDM@i& (0+255),f,b
  3087                           
  3088                           ; BSR set to: 0
  3089  002B9A  0E06               	movlw	6
  3090  002B9C  65DD               	cpfsgt	doDM@i& (0+255),b
  3091  002B9E  D6FF               	goto	l9681
  3092  002BA0  0C06               	retlw	6
  3093  002BA2                     __end_of_doDM:
  3094                           	opt stack 0
  3095  002BA2                     PL2:
  3096                           	opt stack 22
  3097  002BA2  51DD               	movf	doDM@i& (0+255),w,b
  3098  002BA4  6FCD               	movwf	??_doDM& (0+255),b
  3099  002BA6  6BCE               	clrf	(??_doDM+1)& (0+255),b
  3100  002BA8  90D8               	bcf	status,0,c
  3101  002BAA  37CD               	rlcf	??_doDM& (0+255),f,b
  3102  002BAC  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3103  002BAE  90D8               	bcf	status,0,c
  3104  002BB0  37CD               	rlcf	??_doDM& (0+255),f,b
  3105  002BB2  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3106  002BB4  90D8               	bcf	status,0,c
  3107  002BB6  37CD               	rlcf	??_doDM& (0+255),f,b
  3108  002BB8  37CE               	rlcf	(??_doDM+1)& (0+255),f,b
  3109  002BBA  0012               	return	
  3110  002BBC                     __end_ofPL2:
  3111                           	opt stack 0
  3112  002BBC                     PL16:
  3113                           	opt stack 22
  3114  002BBC  0E92               	movlw	146
  3115  002BBE  25CD               	addwf	??_doDM& (0+255),w,b
  3116  002BC0  6E08               	movwf	?_readEEPROM,c
  3117  002BC2  0E00               	movlw	0
  3118  002BC4  21CE               	addwfc	(??_doDM+1)& (0+255),w,b
  3119  002BC6  6E09               	movwf	?_readEEPROM+1,c
  3120  002BC8  0012               	return	
  3121  002BCA                     __end_ofPL16:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           intcon	equ	0xFF2
  3130                           postinc0	equ	0xFEE
  3131                           wreg	equ	0xFE8
  3132                           indf1	equ	0xFE7
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           plusw2	equ	0xFDB
  3139                           fsr2h	equ	0xFDA
  3140                           fsr2l	equ	0xFD9
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function _doActionToggle *****************
  3144 ;; Defined at:
  3145 ;;		line 2109 in file "../main.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  dmflags         1    wreg     unsigned char 
  3148 ;;  arg             1   80[COMRAM] unsigned char 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3151 ;;  i               1   27[BANK0 ] unsigned char 
  3152 ;;  bOn             1   26[BANK0 ] enum E18242
  3153 ;;  val             1   25[BANK0 ] unsigned char 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : F/0
  3160 ;;		On exit  : F/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3163 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3164 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3166 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3167 ;;Total ram usage:        7 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    7
  3170 ;; This function calls:
  3171 ;;		_readEEPROM
  3172 ;;		_SendInformationEvent
  3173 ;; This function is called by:
  3174 ;;		_doDM
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text9
  3179  00328E                     __ptext9:
  3180                           	opt stack 0
  3181  00328E                     _doActionToggle:
  3182                           	opt stack 22
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;incstack = 0
  3186                           ;incstack = 0
  3187                           ;doActionToggle@dmflags stored from wreg
  3188  00328E  CFE8 F0C9          	movff	wreg,doActionToggle@dmflags
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;main.c: 2111: unsigned char i;
  3192                           ;main.c: 2112: unsigned char val;
  3193                           ;main.c: 2113: BOOL bOn = 0;
  3194  003292  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3195                           
  3196                           ;main.c: 2115: for ( i = 0; i < 8; i++ ) {
  3197  003294  6BCC               	clrf	doActionToggle@i& (0+255),b
  3198  003296                     l10357:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;main.c: 2118: if ( !( arg & (1 << i) ) ) continue;
  3202  003296  C0CC  F0C7         	movff	doActionToggle@i,??_doActionToggle
  3203  00329A  0E01               	movlw	1
  3204  00329C  6FC8               	movwf	(??_doActionToggle+1)& (0+255),b
  3205  00329E  2BC7               	incf	??_doActionToggle& (0+255),f,b
  3206  0032A0  D002               	goto	u13254
  3207  0032A2                     u13255:
  3208  0032A2  90D8               	bcf	status,0,c
  3209  0032A4  37C8               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3210  0032A6                     u13254:
  3211  0032A6  2FC7               	decfsz	??_doActionToggle& (0+255),f,b
  3212  0032A8  D7FC               	goto	u13255
  3213  0032AA  51C8               	movf	(??_doActionToggle+1)& (0+255),w,b
  3214  0032AC  1451               	andwf	doActionToggle@arg,w,c
  3215  0032AE  E07A               	bz	l10415
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 2121: if ( dmflags & 0x08 ) {
  3219  0032B0  A7C9               	btfss	doActionToggle@dmflags& (0+255),3,b
  3220  0032B2  D00B               	goto	l10365
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;main.c: 2122: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3224                           ;main.c: 2123: 53 +
  3225                           ;main.c: 2124: i ) ) {
  3226  0032B4  0E78               	movlw	120
  3227  0032B6  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3228  0032B8  6E08               	movwf	?_readEEPROM,c
  3229  0032BA  6A09               	clrf	?_readEEPROM+1,c
  3230  0032BC  0E00               	movlw	0
  3231  0032BE  2209               	addwfc	?_readEEPROM+1,f,c
  3232  0032C0  ECDA  F021         	call	_readEEPROM	;wreg free
  3233  0032C4  0100               	movlb	0	; () banked
  3234  0032C6  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3235  0032C8  E16D               	bnz	l10415
  3236  0032CA                     l10365:
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;main.c: 2126: }
  3240                           ;main.c: 2127: }
  3241                           ;main.c: 2129: val = readEEPROM(0x43 + 10 + i);
  3242  0032CA  0E4D               	movlw	77
  3243  0032CC  25CC               	addwf	doActionToggle@i& (0+255),w,b
  3244  0032CE  6E08               	movwf	?_readEEPROM,c
  3245  0032D0  6A09               	clrf	?_readEEPROM+1,c
  3246  0032D2  0E00               	movlw	0
  3247  0032D4  2209               	addwfc	?_readEEPROM+1,f,c
  3248  0032D6  ECDA  F021         	call	_readEEPROM	;wreg free
  3249  0032DA  0100               	movlb	0	; () banked
  3250  0032DC  6FCA               	movwf	doActionToggle@val& (0+255),b
  3251                           
  3252                           ;main.c: 2131: switch ( i ) {
  3253  0032DE  D02D               	goto	l10397
  3254  0032E0                     l542:
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;main.c: 2134: if ( LATBbits.LATB4 ) {
  3258  0032E0  A88A               	btfss	3978,4,c	;volatile
  3259  0032E2  D002               	goto	l543
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 2135: LATBbits.LATB4 = 0;
  3263  0032E4  988A               	bcf	3978,4,c	;volatile
  3264  0032E6  D025               	goto	L12
  3265  0032E8                     l543:
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;main.c: 2138: LATBbits.LATB4 = 1;
  3269  0032E8  888A               	bsf	3978,4,c	;volatile
  3270  0032EA                     l10369:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 2139: bOn = 1;
  3274  0032EA  0E01               	movlw	1
  3275  0032EC  6FCB               	movwf	doActionToggle@bOn& (0+255),b
  3276  0032EE  D033               	goto	l10399
  3277  0032F0                     l546:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 2144: if ( LATBbits.LATB1 ) {
  3281  0032F0  A28A               	btfss	3978,1,c	;volatile
  3282  0032F2  D002               	goto	l547
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;main.c: 2145: LATBbits.LATB1 = 0;
  3286  0032F4  928A               	bcf	3978,1,c	;volatile
  3287  0032F6  D01D               	goto	L12
  3288  0032F8                     l547:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;main.c: 2148: LATBbits.LATB1 = 1;
  3292  0032F8  828A               	bsf	3978,1,c	;volatile
  3293  0032FA  D7F7               	goto	l10369
  3294  0032FC                     l549:
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;main.c: 2154: if ( LATBbits.LATB0 ) {
  3298  0032FC  A08A               	btfss	3978,0,c	;volatile
  3299  0032FE  D002               	goto	l550
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;main.c: 2155: LATBbits.LATB0 = 0;
  3303  003300  908A               	bcf	3978,0,c	;volatile
  3304  003302  D017               	goto	L12
  3305  003304                     l550:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;main.c: 2158: LATBbits.LATB0 = 1;
  3309  003304  808A               	bsf	3978,0,c	;volatile
  3310  003306  D7F1               	goto	l10369
  3311  003308                     l552:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 2164: if ( LATCbits.LATC7 ) {
  3315  003308  AE8B               	btfss	3979,7,c	;volatile
  3316  00330A  D002               	goto	l553
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 2165: LATCbits.LATC7 = 0;
  3320  00330C  9E8B               	bcf	3979,7,c	;volatile
  3321  00330E  D011               	goto	L12
  3322  003310                     l553:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;main.c: 2168: LATCbits.LATC7 = 1;
  3326  003310  8E8B               	bsf	3979,7,c	;volatile
  3327  003312  D7EB               	goto	l10369
  3328  003314                     l555:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;main.c: 2174: if ( LATCbits.LATC6 ) {
  3332  003314  AC8B               	btfss	3979,6,c	;volatile
  3333  003316  D002               	goto	l556
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 2175: LATCbits.LATC6 = 0;
  3337  003318  9C8B               	bcf	3979,6,c	;volatile
  3338  00331A  D00B               	goto	L12
  3339  00331C                     l556:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;main.c: 2178: LATCbits.LATC6 = 1;
  3343  00331C  8C8B               	bsf	3979,6,c	;volatile
  3344  00331E  D7E5               	goto	l10369
  3345  003320                     l558:
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;main.c: 2184: if ( LATCbits.LATC5 ) {
  3349  003320  AA8B               	btfss	3979,5,c	;volatile
  3350  003322  D002               	goto	l559
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;main.c: 2185: LATCbits.LATC5 = 0;
  3354  003324  9A8B               	bcf	3979,5,c	;volatile
  3355  003326  D005               	goto	L12
  3356  003328                     l559:
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;main.c: 2188: LATCbits.LATC5 = 1;
  3360  003328  8A8B               	bsf	3979,5,c	;volatile
  3361  00332A  D7DF               	goto	l10369
  3362  00332C                     l561:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;main.c: 2194: if ( LATCbits.LATC4 ) {
  3366  00332C  A88B               	btfss	3979,4,c	;volatile
  3367  00332E  D003               	goto	l562
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;main.c: 2195: LATCbits.LATC4 = 0;
  3371  003330  988B               	bcf	3979,4,c	;volatile
  3372  003332                     L12:
  3373                           
  3374                           ;main.c: 2196: bOn = 0;
  3375  003332  6BCB               	clrf	doActionToggle@bOn& (0+255),b
  3376                           
  3377                           ;main.c: 2197: } else {
  3378  003334  D010               	goto	l10399
  3379  003336                     l562:
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;main.c: 2198: LATCbits.LATC4 = 1;
  3383  003336  888B               	bsf	3979,4,c	;volatile
  3384  003338  D7D8               	goto	l10369
  3385  00333A                     l10397:
  3386                           
  3387                           ; BSR set to: 0
  3388  00333A  51CC               	movf	doActionToggle@i& (0+255),w,b
  3389                           
  3390                           ; Switch size 1, requested type "space"
  3391                           ; Number of cases is 7, Range of values is 0 to 6
  3392                           ; switch strategies available:
  3393                           ; Name         Instructions Cycles
  3394                           ; simple_byte           22    12 (average)
  3395                           ;	Chosen strategy is simple_byte
  3396  00333C  E0D1               	bz	l542
  3397  00333E  0A01               	xorlw	1	; case 1
  3398  003340  E0D7               	bz	l546
  3399  003342  0A03               	xorlw	3	; case 2
  3400  003344  E0DB               	bz	l549
  3401  003346  0A01               	xorlw	1	; case 3
  3402  003348  E0DF               	bz	l552
  3403  00334A  0A07               	xorlw	7	; case 4
  3404  00334C  E0E3               	bz	l555
  3405  00334E  0A01               	xorlw	1	; case 5
  3406  003350  E0E7               	bz	l558
  3407  003352  0A03               	xorlw	3	; case 6
  3408  003354  E0EB               	bz	l561
  3409  003356                     l10399:
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;main.c: 2205: if ( bOn ) {
  3413  003356  51CB               	movf	doActionToggle@bOn& (0+255),w,b
  3414  003358  E013               	bz	l564
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 2208: if ( val & 0x08 ) {
  3418  00335A  A7CA               	btfss	doActionToggle@val& (0+255),3,b
  3419  00335C  D007               	goto	l10405
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;main.c: 2209: SendInformationEvent( i, 20, 3 );
  3423  00335E  0E14               	movlw	20
  3424  003360  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3425  003362  0E03               	movlw	3
  3426  003364  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3427  003366  51CC               	movf	doActionToggle@i& (0+255),w,b
  3428  003368  EC52  F01F         	call	_SendInformationEvent
  3429  00336C                     l10405:
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;main.c: 2210: }
  3433                           ;main.c: 2213: if ( val & 0x20 ) {
  3434  00336C  ABCA               	btfss	doActionToggle@val& (0+255),5,b
  3435  00336E  D01A               	goto	l10415
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;main.c: 2214: SendInformationEvent( i, 20, 25 );
  3439  003370  0E14               	movlw	20
  3440  003372  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3441  003374  0E19               	movlw	25
  3442  003376  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3443  003378  51CC               	movf	doActionToggle@i& (0+255),w,b
  3444  00337A  EC52  F01F         	call	_SendInformationEvent
  3445  00337E  D012               	goto	l10415
  3446  003380                     l564:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;main.c: 2218: else {
  3450                           ;main.c: 2221: if ( val & 0x10 ) {
  3451  003380  A9CA               	btfss	doActionToggle@val& (0+255),4,b
  3452  003382  D007               	goto	l10411
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;main.c: 2222: SendInformationEvent( i, 20, 4 );
  3456  003384  0E14               	movlw	20
  3457  003386  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3458  003388  0E04               	movlw	4
  3459  00338A  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3460  00338C  51CC               	movf	doActionToggle@i& (0+255),w,b
  3461  00338E  EC52  F01F         	call	_SendInformationEvent
  3462  003392                     l10411:
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;main.c: 2223: }
  3466                           ;main.c: 2226: if (val & 0x40 ) {
  3467  003392  ADCA               	btfss	doActionToggle@val& (0+255),6,b
  3468  003394  D007               	goto	l10415
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;main.c: 2227: SendInformationEvent( i, 20, 24 );
  3472  003396  0E14               	movlw	20
  3473  003398  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3474  00339A  0E18               	movlw	24
  3475  00339C  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3476  00339E  51CC               	movf	doActionToggle@i& (0+255),w,b
  3477  0033A0  EC52  F01F         	call	_SendInformationEvent
  3478  0033A4                     l10415:
  3479                           
  3480                           ; BSR set to: 0
  3481  0033A4  2BCC               	incf	doActionToggle@i& (0+255),f,b
  3482                           
  3483                           ; BSR set to: 0
  3484  0033A6  0E07               	movlw	7
  3485  0033A8  65CC               	cpfsgt	doActionToggle@i& (0+255),b
  3486  0033AA  D775               	goto	l10357
  3487  0033AC  0C07               	retlw	7
  3488  0033AE                     __end_of_doActionToggle:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           indf1	equ	0xFE7
  3500                           fsr1h	equ	0xFE2
  3501                           fsr1l	equ	0xFE1
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           postdec2	equ	0xFDD
  3505                           plusw2	equ	0xFDB
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _doActionDisable *****************
  3511 ;; Defined at:
  3512 ;;		line 2079 in file "../main.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  dmflags         1    wreg     unsigned char 
  3515 ;;  arg             1   10[COMRAM] unsigned char 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  dmflags         1   13[COMRAM] unsigned char 
  3518 ;;  i               1   15[COMRAM] unsigned char 
  3519 ;;  val             1   14[COMRAM] unsigned char 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;		None               void
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : F/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3529 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3530 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3532 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3533 ;;Total ram usage:        6 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    3
  3536 ;; This function calls:
  3537 ;;		_writeEEPROM
  3538 ;;		_readEEPROM
  3539 ;; This function is called by:
  3540 ;;		_doDM
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text10
  3545  003E38                     __ptext10:
  3546                           	opt stack 0
  3547  003E38                     _doActionDisable:
  3548                           	opt stack 26
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;incstack = 0
  3552                           ;incstack = 0
  3553                           ;doActionDisable@dmflags stored from wreg
  3554  003E38  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;main.c: 2081: unsigned char i;
  3558                           ;main.c: 2082: unsigned char val;
  3559                           ;main.c: 2084: for ( i = 0; i < 8; i++ ) {
  3560  003E3C  6A10               	clrf	doActionDisable@i,c
  3561  003E3E                     l8695:
  3562                           
  3563                           ;main.c: 2087: if ( !( arg & (1 << i) ) ) continue;
  3564  003E3E  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3565  003E42  0E01               	movlw	1
  3566  003E44  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3567  003E46  2A0C               	incf	??_doActionDisable,f,c
  3568  003E48  D002               	goto	u10394
  3569  003E4A                     u10395:
  3570  003E4A  90D8               	bcf	status,0,c
  3571  003E4C  360D               	rlcf	??_doActionDisable+1,f,c
  3572  003E4E                     u10394:
  3573  003E4E  2E0C               	decfsz	??_doActionDisable,f,c
  3574  003E50  D7FC               	goto	u10395
  3575  003E52  500D               	movf	??_doActionDisable+1,w,c
  3576  003E54  140B               	andwf	doActionDisable@arg,w,c
  3577  003E56  E021               	bz	l8705
  3578                           
  3579                           ;main.c: 2090: if ( dmflags & 0x08) {
  3580  003E58  A60E               	btfss	doActionDisable@dmflags,3,c
  3581  003E5A  D00B               	goto	l8703
  3582                           
  3583                           ;main.c: 2091: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3584                           ;main.c: 2092: 53 +
  3585                           ;main.c: 2093: i ) ) {
  3586  003E5C  0E78               	movlw	120
  3587  003E5E  2410               	addwf	doActionDisable@i,w,c
  3588  003E60  6E08               	movwf	?_readEEPROM,c
  3589  003E62  6A09               	clrf	?_readEEPROM+1,c
  3590  003E64  0E00               	movlw	0
  3591  003E66  2209               	addwfc	?_readEEPROM+1,f,c
  3592  003E68  ECDA  F021         	call	_readEEPROM	;wreg free
  3593  003E6C  0100               	movlb	0	; () banked
  3594  003E6E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3595  003E70  E114               	bnz	l8705
  3596  003E72                     l8703:
  3597                           
  3598                           ;main.c: 2095: }
  3599                           ;main.c: 2096: }
  3600                           ;main.c: 2098: val = readEEPROM( 0x43 + 10 + i );
  3601  003E72  0E4D               	movlw	77
  3602  003E74  2410               	addwf	doActionDisable@i,w,c
  3603  003E76  6E08               	movwf	?_readEEPROM,c
  3604  003E78  6A09               	clrf	?_readEEPROM+1,c
  3605  003E7A  0E00               	movlw	0
  3606  003E7C  2209               	addwfc	?_readEEPROM+1,f,c
  3607  003E7E  ECDA  F021         	call	_readEEPROM	;wreg free
  3608  003E82  6E0F               	movwf	doActionDisable@val,c
  3609                           
  3610                           ;main.c: 2099: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3611  003E84  0E4D               	movlw	77
  3612  003E86  2410               	addwf	doActionDisable@i,w,c
  3613  003E88  6E08               	movwf	?_writeEEPROM,c
  3614  003E8A  6A09               	clrf	?_writeEEPROM+1,c
  3615  003E8C  0E00               	movlw	0
  3616  003E8E  2209               	addwfc	?_writeEEPROM+1,f,c
  3617  003E90  500F               	movf	doActionDisable@val,w,c
  3618  003E92  0B7F               	andlw	127
  3619  003E94  6E0A               	movwf	?_writeEEPROM+2,c
  3620  003E96  ECB9  F020         	call	_writeEEPROM	;wreg free
  3621  003E9A                     l8705:
  3622  003E9A  2A10               	incf	doActionDisable@i,f,c
  3623  003E9C  0E07               	movlw	7
  3624  003E9E  6410               	cpfsgt	doActionDisable@i,c
  3625  003EA0  D7CE               	goto	l8695
  3626  003EA2  0C07               	retlw	7
  3627  003EA4                     __end_of_doActionDisable:
  3628                           	opt stack 0
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           intcon	equ	0xFF2
  3636                           postinc0	equ	0xFEE
  3637                           wreg	equ	0xFE8
  3638                           indf1	equ	0xFE7
  3639                           fsr1h	equ	0xFE2
  3640                           fsr1l	equ	0xFE1
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           plusw2	equ	0xFDB
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _doActionStatus *****************
  3650 ;; Defined at:
  3651 ;;		line 1990 in file "../main.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  dmflags         1    wreg     unsigned char 
  3654 ;;  arg             1   80[COMRAM] unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3657 ;;  i               1   27[BANK0 ] unsigned char 
  3658 ;;  val             1   26[BANK0 ] unsigned char 
  3659 ;;  bOn             1   25[BANK0 ] enum E18242
  3660 ;; Return value:  Size  Location     Type
  3661 ;;		None               void
  3662 ;; Registers used:
  3663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3664 ;; Tracked objects:
  3665 ;;		On entry : F/0
  3666 ;;		On exit  : F/0
  3667 ;;		Unchanged: 0/0
  3668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3669 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3670 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3671 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3672 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3673 ;;Total ram usage:        7 bytes
  3674 ;; Hardware stack levels used:    1
  3675 ;; Hardware stack levels required when called:    7
  3676 ;; This function calls:
  3677 ;;		_readEEPROM
  3678 ;;		_SendInformationEvent
  3679 ;; This function is called by:
  3680 ;;		_doDM
  3681 ;; This function uses a non-reentrant model
  3682 ;;
  3683                           
  3684                           	psect	text11
  3685  0035E0                     __ptext11:
  3686                           	opt stack 0
  3687  0035E0                     _doActionStatus:
  3688                           	opt stack 22
  3689                           
  3690                           ;incstack = 0
  3691                           ;incstack = 0
  3692                           ;doActionStatus@dmflags stored from wreg
  3693  0035E0  CFE8 F0C9          	movff	wreg,doActionStatus@dmflags
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;main.c: 1992: unsigned char i;
  3697                           ;main.c: 1993: unsigned char val;
  3698                           ;main.c: 1994: BOOL bOn = 0;
  3699  0035E4  6BCA               	clrf	doActionStatus@bOn& (0+255),b
  3700                           
  3701                           ;main.c: 1996: for (i = 0; i < 8; i++) {
  3702  0035E6  6BCC               	clrf	doActionStatus@i& (0+255),b
  3703  0035E8                     l10303:
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;main.c: 1999: if (!(arg & (1 << i))) continue;
  3707  0035E8  C0CC  F0C7         	movff	doActionStatus@i,??_doActionStatus
  3708  0035EC  0E01               	movlw	1
  3709  0035EE  6FC8               	movwf	(??_doActionStatus+1)& (0+255),b
  3710  0035F0  2BC7               	incf	??_doActionStatus& (0+255),f,b
  3711  0035F2  D002               	goto	u13154
  3712  0035F4                     u13155:
  3713  0035F4  90D8               	bcf	status,0,c
  3714  0035F6  37C8               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3715  0035F8                     u13154:
  3716  0035F8  2FC7               	decfsz	??_doActionStatus& (0+255),f,b
  3717  0035FA  D7FC               	goto	u13155
  3718  0035FC  51C8               	movf	(??_doActionStatus+1)& (0+255),w,b
  3719  0035FE  1451               	andwf	doActionStatus@arg,w,c
  3720  003600  E070               	bz	l10347
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;main.c: 2002: if (dmflags & 0x08) {
  3724  003602  A7C9               	btfss	doActionStatus@dmflags& (0+255),3,b
  3725  003604  D00B               	goto	l10311
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;main.c: 2003: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3729                           ;main.c: 2004: 53 +
  3730                           ;main.c: 2005: i ) ) {
  3731  003606  0E78               	movlw	120
  3732  003608  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3733  00360A  6E08               	movwf	?_readEEPROM,c
  3734  00360C  6A09               	clrf	?_readEEPROM+1,c
  3735  00360E  0E00               	movlw	0
  3736  003610  2209               	addwfc	?_readEEPROM+1,f,c
  3737  003612  ECDA  F021         	call	_readEEPROM	;wreg free
  3738  003616  0100               	movlb	0	; () banked
  3739  003618  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3740  00361A  E163               	bnz	l10347
  3741  00361C                     l10311:
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;main.c: 2007: }
  3745                           ;main.c: 2008: }
  3746                           ;main.c: 2010: val = readEEPROM( 0x43 + 10 + i );
  3747  00361C  0E4D               	movlw	77
  3748  00361E  25CC               	addwf	doActionStatus@i& (0+255),w,b
  3749  003620  6E08               	movwf	?_readEEPROM,c
  3750  003622  6A09               	clrf	?_readEEPROM+1,c
  3751  003624  0E00               	movlw	0
  3752  003626  2209               	addwfc	?_readEEPROM+1,f,c
  3753  003628  ECDA  F021         	call	_readEEPROM	;wreg free
  3754  00362C  0100               	movlb	0	; () banked
  3755  00362E  6FCB               	movwf	doActionStatus@val& (0+255),b
  3756                           
  3757                           ;main.c: 2012: switch (i) {
  3758  003630  D023               	goto	l10329
  3759  003632                     l10313:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;main.c: 2015: bOn = LATBbits.LATB4;
  3763  003632  0E00               	movlw	0
  3764  003634  B88A               	btfsc	3978,4,c	;volatile
  3765  003636  0E01               	movlw	1
  3766  003638  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3767                           
  3768                           ;main.c: 2016: break;
  3769  00363A  D02C               	goto	l10331
  3770  00363C                     l10315:
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;main.c: 2019: bOn = LATBbits.LATB1;
  3774  00363C  0E00               	movlw	0
  3775  00363E  B28A               	btfsc	3978,1,c	;volatile
  3776  003640  0E01               	movlw	1
  3777  003642  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3778                           
  3779                           ;main.c: 2020: break;
  3780  003644  D027               	goto	l10331
  3781  003646                     l10317:
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;main.c: 2023: bOn = LATBbits.LATB0;
  3785  003646  0E00               	movlw	0
  3786  003648  B08A               	btfsc	3978,0,c	;volatile
  3787  00364A  0E01               	movlw	1
  3788  00364C  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3789                           
  3790                           ;main.c: 2024: break;
  3791  00364E  D022               	goto	l10331
  3792  003650                     l10319:
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;main.c: 2027: bOn = LATCbits.LATC7;
  3796  003650  0E00               	movlw	0
  3797  003652  BE8B               	btfsc	3979,7,c	;volatile
  3798  003654  0E01               	movlw	1
  3799  003656  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3800                           
  3801                           ;main.c: 2028: break;
  3802  003658  D01D               	goto	l10331
  3803  00365A                     l10321:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;main.c: 2031: bOn = LATCbits.LATC6;
  3807  00365A  0E00               	movlw	0
  3808  00365C  BC8B               	btfsc	3979,6,c	;volatile
  3809  00365E  0E01               	movlw	1
  3810  003660  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3811                           
  3812                           ;main.c: 2032: break;
  3813  003662  D018               	goto	l10331
  3814  003664                     l10323:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main.c: 2035: bOn = LATCbits.LATC5;
  3818  003664  0E00               	movlw	0
  3819  003666  BA8B               	btfsc	3979,5,c	;volatile
  3820  003668  0E01               	movlw	1
  3821  00366A  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3822                           
  3823                           ;main.c: 2036: break;
  3824  00366C  D013               	goto	l10331
  3825  00366E                     l10325:
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;main.c: 2039: bOn = LATCbits.LATC4;
  3829  00366E  0E00               	movlw	0
  3830  003670  B88B               	btfsc	3979,4,c	;volatile
  3831  003672  0E01               	movlw	1
  3832  003674  6FCA               	movwf	doActionStatus@bOn& (0+255),b
  3833                           
  3834                           ;main.c: 2040: break;
  3835  003676  D00E               	goto	l10331
  3836  003678                     l10329:
  3837                           
  3838                           ; BSR set to: 0
  3839  003678  51CC               	movf	doActionStatus@i& (0+255),w,b
  3840                           
  3841                           ; Switch size 1, requested type "space"
  3842                           ; Number of cases is 7, Range of values is 0 to 6
  3843                           ; switch strategies available:
  3844                           ; Name         Instructions Cycles
  3845                           ; simple_byte           22    12 (average)
  3846                           ;	Chosen strategy is simple_byte
  3847  00367A  E0DB               	bz	l10313
  3848  00367C  0A01               	xorlw	1	; case 1
  3849  00367E  E0DE               	bz	l10315
  3850  003680  0A03               	xorlw	3	; case 2
  3851  003682  E0E1               	bz	l10317
  3852  003684  0A01               	xorlw	1	; case 3
  3853  003686  E0E4               	bz	l10319
  3854  003688  0A07               	xorlw	7	; case 4
  3855  00368A  E0E7               	bz	l10321
  3856  00368C  0A01               	xorlw	1	; case 5
  3857  00368E  E0EA               	bz	l10323
  3858  003690  0A03               	xorlw	3	; case 6
  3859  003692  E0ED               	bz	l10325
  3860  003694                     l10331:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;main.c: 2044: if (bOn) {
  3864  003694  51CA               	movf	doActionStatus@bOn& (0+255),w,b
  3865  003696  E013               	bz	l517
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;main.c: 2047: if ( val & 0x10 ) {
  3869  003698  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3870  00369A  D007               	goto	l10337
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;main.c: 2048: SendInformationEvent( i, 20, 4 );
  3874  00369C  0E14               	movlw	20
  3875  00369E  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3876  0036A0  0E04               	movlw	4
  3877  0036A2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3878  0036A4  51CC               	movf	doActionStatus@i& (0+255),w,b
  3879  0036A6  EC52  F01F         	call	_SendInformationEvent
  3880  0036AA                     l10337:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;main.c: 2049: }
  3884                           ;main.c: 2052: if ( val & 0x40 ) {
  3885  0036AA  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3886  0036AC  D01A               	goto	l10347
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;main.c: 2053: SendInformationEvent( i, 20, 24 );
  3890  0036AE  0E14               	movlw	20
  3891  0036B0  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3892  0036B2  0E18               	movlw	24
  3893  0036B4  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3894  0036B6  51CC               	movf	doActionStatus@i& (0+255),w,b
  3895  0036B8  EC52  F01F         	call	_SendInformationEvent
  3896  0036BC  D012               	goto	l10347
  3897  0036BE                     l517:
  3898                           
  3899                           ; BSR set to: 0
  3900                           ;main.c: 2057: else {
  3901                           ;main.c: 2060: if ( val & 0x10 ) {
  3902  0036BE  A9CB               	btfss	doActionStatus@val& (0+255),4,b
  3903  0036C0  D007               	goto	l10343
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;main.c: 2061: SendInformationEvent( i, 20, 4 );
  3907  0036C2  0E14               	movlw	20
  3908  0036C4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3909  0036C6  0E04               	movlw	4
  3910  0036C8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3911  0036CA  51CC               	movf	doActionStatus@i& (0+255),w,b
  3912  0036CC  EC52  F01F         	call	_SendInformationEvent
  3913  0036D0                     l10343:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;main.c: 2062: }
  3917                           ;main.c: 2065: if ( val & 0x40 ) {
  3918  0036D0  ADCB               	btfss	doActionStatus@val& (0+255),6,b
  3919  0036D2  D007               	goto	l10347
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;main.c: 2066: SendInformationEvent( i, 20, 24 );
  3923  0036D4  0E14               	movlw	20
  3924  0036D6  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  3925  0036D8  0E18               	movlw	24
  3926  0036DA  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3927  0036DC  51CC               	movf	doActionStatus@i& (0+255),w,b
  3928  0036DE  EC52  F01F         	call	_SendInformationEvent
  3929  0036E2                     l10347:
  3930                           
  3931                           ; BSR set to: 0
  3932  0036E2  2BCC               	incf	doActionStatus@i& (0+255),f,b
  3933                           
  3934                           ; BSR set to: 0
  3935  0036E4  0E07               	movlw	7
  3936  0036E6  65CC               	cpfsgt	doActionStatus@i& (0+255),b
  3937  0036E8  D77F               	goto	l10303
  3938  0036EA  0C07               	retlw	7
  3939  0036EC                     __end_of_doActionStatus:
  3940                           	opt stack 0
  3941                           tblptru	equ	0xFF8
  3942                           tblptrh	equ	0xFF7
  3943                           tblptrl	equ	0xFF6
  3944                           tablat	equ	0xFF5
  3945                           prodh	equ	0xFF4
  3946                           prodl	equ	0xFF3
  3947                           intcon	equ	0xFF2
  3948                           postinc0	equ	0xFEE
  3949                           wreg	equ	0xFE8
  3950                           indf1	equ	0xFE7
  3951                           fsr1h	equ	0xFE2
  3952                           fsr1l	equ	0xFE1
  3953                           indf2	equ	0xFDF
  3954                           postinc2	equ	0xFDE
  3955                           postdec2	equ	0xFDD
  3956                           plusw2	equ	0xFDB
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _doActionPulse *****************
  3962 ;; Defined at:
  3963 ;;		line 1899 in file "../main.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  dmflags         1    wreg     unsigned char 
  3966 ;;  arg             1   10[COMRAM] unsigned char 
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  dmflags         1   14[COMRAM] unsigned char 
  3969 ;;  i               1   16[COMRAM] unsigned char 
  3970 ;;  val             1   15[COMRAM] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;		None               void
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : F/0
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3980 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3981 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3982 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3983 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3984 ;;Total ram usage:        7 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    3
  3987 ;; This function calls:
  3988 ;;		_readEEPROM
  3989 ;; This function is called by:
  3990 ;;		_doDM
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text12
  3995  002DBC                     __ptext12:
  3996                           	opt stack 0
  3997  002DBC                     _doActionPulse:
  3998                           	opt stack 26
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;incstack = 0
  4002                           ;incstack = 0
  4003                           ;doActionPulse@dmflags stored from wreg
  4004  002DBC  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;main.c: 1901: unsigned char i;
  4008                           ;main.c: 1902: unsigned char val;
  4009                           ;main.c: 1904: for ( i = 0; i < 8; i++ ) {
  4010  002DC0  6A11               	clrf	doActionPulse@i,c
  4011  002DC2                     l8585:
  4012                           
  4013                           ;main.c: 1907: if ( !( arg & ( 1 << i ) ) ) continue;
  4014  002DC2  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  4015  002DC6  0E01               	movlw	1
  4016  002DC8  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  4017  002DCA  2A0C               	incf	??_doActionPulse,f,c
  4018  002DCC  D002               	goto	u10234
  4019  002DCE                     u10235:
  4020  002DCE  90D8               	bcf	status,0,c
  4021  002DD0  360D               	rlcf	??_doActionPulse+1,f,c
  4022  002DD2                     u10234:
  4023  002DD2  2E0C               	decfsz	??_doActionPulse,f,c
  4024  002DD4  D7FC               	goto	u10235
  4025  002DD6  500D               	movf	??_doActionPulse+1,w,c
  4026  002DD8  140B               	andwf	doActionPulse@arg,w,c
  4027  002DDA  E101 D0D2          	bz	l8631
  4028                           
  4029                           ;main.c: 1910: if (dmflags & 0x08) {
  4030  002DDE  A60F               	btfss	doActionPulse@dmflags,3,c
  4031  002DE0  D00C               	goto	l8593
  4032                           
  4033                           ;main.c: 1911: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4034                           ;main.c: 1912: 53 +
  4035                           ;main.c: 1913: i ) ) {
  4036  002DE2  0E78               	movlw	120
  4037  002DE4  2411               	addwf	doActionPulse@i,w,c
  4038  002DE6  6E08               	movwf	?_readEEPROM,c
  4039  002DE8  6A09               	clrf	?_readEEPROM+1,c
  4040  002DEA  0E00               	movlw	0
  4041  002DEC  2209               	addwfc	?_readEEPROM+1,f,c
  4042  002DEE  ECDA  F021         	call	_readEEPROM	;wreg free
  4043  002DF2  0100               	movlb	0	; () banked
  4044  002DF4  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4045  002DF6  E001 D0C4          	bnz	l8631
  4046  002DFA                     l8593:
  4047                           
  4048                           ;main.c: 1915: }
  4049                           ;main.c: 1916: }
  4050                           ;main.c: 1918: val = readEEPROM( 0x43 + 10 + i );
  4051  002DFA  0E4D               	movlw	77
  4052  002DFC  2411               	addwf	doActionPulse@i,w,c
  4053  002DFE  6E08               	movwf	?_readEEPROM,c
  4054  002E00  6A09               	clrf	?_readEEPROM+1,c
  4055  002E02  0E00               	movlw	0
  4056  002E04  2209               	addwfc	?_readEEPROM+1,f,c
  4057  002E06  ECDA  F021         	call	_readEEPROM	;wreg free
  4058  002E0A  6E10               	movwf	doActionPulse@val,c
  4059                           
  4060                           ;main.c: 1921: if ( !( val & 0x80 ) ) continue;
  4061  002E0C  AE10               	btfss	doActionPulse@val,7,c
  4062  002E0E  D0B9               	goto	l8631
  4063  002E10  D0A8               	goto	l8629
  4064  002E12                     l491:
  4065                           
  4066                           ;main.c: 1926: LATBbits.LATB4 = 0;
  4067  002E12  988A               	bcf	3978,4,c	;volatile
  4068                           
  4069                           ;main.c: 1927: relay_pulse_flags |= 0x01;
  4070  002E14  0100               	movlb	0	; () banked
  4071  002E16  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;main.c: 1928: relay_pulse_timer[ 0 ] =
  4075                           ;main.c: 1929: readEEPROM( 0x43 + 18 ) * 256 +
  4076                           ;main.c: 1930: readEEPROM( 0x43 + 19 );
  4077  002E18  6A09               	clrf	?_readEEPROM+1,c
  4078  002E1A  0E56               	movlw	86
  4079  002E1C  6E08               	movwf	?_readEEPROM,c
  4080  002E1E  ECDA  F021         	call	_readEEPROM	;wreg free
  4081  002E22  6E0C               	movwf	??_doActionPulse& (0+255),c
  4082  002E24  6A09               	clrf	?_readEEPROM+1,c
  4083  002E26  0E55               	movlw	85
  4084  002E28  6E08               	movwf	?_readEEPROM,c
  4085  002E2A  ECDA  F021         	call	_readEEPROM	;wreg free
  4086  002E2E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4087  002E30  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4088  002E32  500C               	movf	??_doActionPulse,w,c
  4089  002E34  240D               	addwf	??_doActionPulse+1,w,c
  4090  002E36  0100               	movlb	0	; () banked
  4091  002E38  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4092  002E3A  0E00               	movlw	0
  4093  002E3C  200E               	addwfc	??_doActionPulse+2,w,c
  4094  002E3E  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4095                           
  4096                           ;main.c: 1931: break;
  4097  002E40  D0A0               	goto	l8631
  4098  002E42                     l493:
  4099                           
  4100                           ;main.c: 1934: LATBbits.LATB1 = 0;
  4101  002E42  928A               	bcf	3978,1,c	;volatile
  4102                           
  4103                           ;main.c: 1935: relay_pulse_flags |= 0x02;
  4104  002E44  0100               	movlb	0	; () banked
  4105  002E46  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;main.c: 1936: relay_pulse_timer[ 1 ] =
  4109                           ;main.c: 1937: readEEPROM( 0x43 + 20 ) * 256 +
  4110                           ;main.c: 1938: readEEPROM( 0x43 + 21 );
  4111  002E48  6A09               	clrf	?_readEEPROM+1,c
  4112  002E4A  0E58               	movlw	88
  4113  002E4C  6E08               	movwf	?_readEEPROM,c
  4114  002E4E  ECDA  F021         	call	_readEEPROM	;wreg free
  4115  002E52  6E0C               	movwf	??_doActionPulse& (0+255),c
  4116  002E54  6A09               	clrf	?_readEEPROM+1,c
  4117  002E56  0E57               	movlw	87
  4118  002E58  6E08               	movwf	?_readEEPROM,c
  4119  002E5A  ECDA  F021         	call	_readEEPROM	;wreg free
  4120  002E5E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4121  002E60  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4122  002E62  500C               	movf	??_doActionPulse,w,c
  4123  002E64  240D               	addwf	??_doActionPulse+1,w,c
  4124  002E66  0100               	movlb	0	; () banked
  4125  002E68  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4126  002E6A  0E00               	movlw	0
  4127  002E6C  200E               	addwfc	??_doActionPulse+2,w,c
  4128  002E6E  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4129                           
  4130                           ;main.c: 1939: break;
  4131  002E70  D088               	goto	l8631
  4132  002E72                     l494:
  4133                           
  4134                           ;main.c: 1942: LATBbits.LATB0 = 0;
  4135  002E72  908A               	bcf	3978,0,c	;volatile
  4136                           
  4137                           ;main.c: 1943: relay_pulse_flags |= 0x04;
  4138  002E74  0100               	movlb	0	; () banked
  4139  002E76  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;main.c: 1944: relay_pulse_timer[ 2 ] =
  4143                           ;main.c: 1945: readEEPROM( 0x43 + 22 ) * 256 +
  4144                           ;main.c: 1946: readEEPROM( 0x43 + 23 );
  4145  002E78  6A09               	clrf	?_readEEPROM+1,c
  4146  002E7A  0E5A               	movlw	90
  4147  002E7C  6E08               	movwf	?_readEEPROM,c
  4148  002E7E  ECDA  F021         	call	_readEEPROM	;wreg free
  4149  002E82  6E0C               	movwf	??_doActionPulse& (0+255),c
  4150  002E84  6A09               	clrf	?_readEEPROM+1,c
  4151  002E86  0E59               	movlw	89
  4152  002E88  6E08               	movwf	?_readEEPROM,c
  4153  002E8A  ECDA  F021         	call	_readEEPROM	;wreg free
  4154  002E8E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4155  002E90  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4156  002E92  500C               	movf	??_doActionPulse,w,c
  4157  002E94  240D               	addwf	??_doActionPulse+1,w,c
  4158  002E96  0100               	movlb	0	; () banked
  4159  002E98  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4160  002E9A  0E00               	movlw	0
  4161  002E9C  200E               	addwfc	??_doActionPulse+2,w,c
  4162  002E9E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4163                           
  4164                           ;main.c: 1947: break;
  4165  002EA0  D070               	goto	l8631
  4166  002EA2                     l495:
  4167                           
  4168                           ;main.c: 1950: LATCbits.LATC7 = 0;
  4169  002EA2  9E8B               	bcf	3979,7,c	;volatile
  4170                           
  4171                           ;main.c: 1951: relay_pulse_flags |= 0x08;
  4172  002EA4  0100               	movlb	0	; () banked
  4173  002EA6  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;main.c: 1952: relay_pulse_timer[ 3 ] =
  4177                           ;main.c: 1953: readEEPROM( 0x43 + 24 ) * 256 +
  4178                           ;main.c: 1954: readEEPROM( 0x43 + 25 );
  4179  002EA8  6A09               	clrf	?_readEEPROM+1,c
  4180  002EAA  0E5C               	movlw	92
  4181  002EAC  6E08               	movwf	?_readEEPROM,c
  4182  002EAE  ECDA  F021         	call	_readEEPROM	;wreg free
  4183  002EB2  6E0C               	movwf	??_doActionPulse& (0+255),c
  4184  002EB4  6A09               	clrf	?_readEEPROM+1,c
  4185  002EB6  0E5B               	movlw	91
  4186  002EB8  6E08               	movwf	?_readEEPROM,c
  4187  002EBA  ECDA  F021         	call	_readEEPROM	;wreg free
  4188  002EBE  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4189  002EC0  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4190  002EC2  500C               	movf	??_doActionPulse,w,c
  4191  002EC4  240D               	addwf	??_doActionPulse+1,w,c
  4192  002EC6  0100               	movlb	0	; () banked
  4193  002EC8  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4194  002ECA  0E00               	movlw	0
  4195  002ECC  200E               	addwfc	??_doActionPulse+2,w,c
  4196  002ECE  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4197                           
  4198                           ;main.c: 1955: break;
  4199  002ED0  D058               	goto	l8631
  4200  002ED2                     l496:
  4201                           
  4202                           ;main.c: 1958: LATCbits.LATC6 = 0;
  4203  002ED2  9C8B               	bcf	3979,6,c	;volatile
  4204                           
  4205                           ;main.c: 1959: relay_pulse_flags |= 0x10;
  4206  002ED4  0100               	movlb	0	; () banked
  4207  002ED6  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;main.c: 1960: relay_pulse_timer[ 4 ] =
  4211                           ;main.c: 1961: readEEPROM( 0x43 + 26 ) * 256 +
  4212                           ;main.c: 1962: readEEPROM( 0x43 + 27 );
  4213  002ED8  6A09               	clrf	?_readEEPROM+1,c
  4214  002EDA  0E5E               	movlw	94
  4215  002EDC  6E08               	movwf	?_readEEPROM,c
  4216  002EDE  ECDA  F021         	call	_readEEPROM	;wreg free
  4217  002EE2  6E0C               	movwf	??_doActionPulse& (0+255),c
  4218  002EE4  6A09               	clrf	?_readEEPROM+1,c
  4219  002EE6  0E5D               	movlw	93
  4220  002EE8  6E08               	movwf	?_readEEPROM,c
  4221  002EEA  ECDA  F021         	call	_readEEPROM	;wreg free
  4222  002EEE  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4223  002EF0  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4224  002EF2  500C               	movf	??_doActionPulse,w,c
  4225  002EF4  240D               	addwf	??_doActionPulse+1,w,c
  4226  002EF6  0100               	movlb	0	; () banked
  4227  002EF8  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4228  002EFA  0E00               	movlw	0
  4229  002EFC  200E               	addwfc	??_doActionPulse+2,w,c
  4230  002EFE  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4231                           
  4232                           ;main.c: 1963: break;
  4233  002F00  D040               	goto	l8631
  4234  002F02                     l497:
  4235                           
  4236                           ;main.c: 1966: LATCbits.LATC5 = 0;
  4237  002F02  9A8B               	bcf	3979,5,c	;volatile
  4238                           
  4239                           ;main.c: 1967: relay_pulse_flags |= 0x20;
  4240  002F04  0100               	movlb	0	; () banked
  4241  002F06  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;main.c: 1968: relay_pulse_timer[ 5 ] =
  4245                           ;main.c: 1969: readEEPROM( 0x43 + 28 ) * 256 +
  4246                           ;main.c: 1970: readEEPROM( 0x43 + 29 );
  4247  002F08  6A09               	clrf	?_readEEPROM+1,c
  4248  002F0A  0E60               	movlw	96
  4249  002F0C  6E08               	movwf	?_readEEPROM,c
  4250  002F0E  ECDA  F021         	call	_readEEPROM	;wreg free
  4251  002F12  6E0C               	movwf	??_doActionPulse& (0+255),c
  4252  002F14  6A09               	clrf	?_readEEPROM+1,c
  4253  002F16  0E5F               	movlw	95
  4254  002F18  6E08               	movwf	?_readEEPROM,c
  4255  002F1A  ECDA  F021         	call	_readEEPROM	;wreg free
  4256  002F1E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4257  002F20  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4258  002F22  500C               	movf	??_doActionPulse,w,c
  4259  002F24  240D               	addwf	??_doActionPulse+1,w,c
  4260  002F26  0100               	movlb	0	; () banked
  4261  002F28  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4262  002F2A  0E00               	movlw	0
  4263  002F2C  200E               	addwfc	??_doActionPulse+2,w,c
  4264  002F2E  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4265                           
  4266                           ;main.c: 1971: break;
  4267  002F30  D028               	goto	l8631
  4268  002F32                     l498:
  4269                           
  4270                           ;main.c: 1974: LATCbits.LATC4 = 0;
  4271  002F32  988B               	bcf	3979,4,c	;volatile
  4272                           
  4273                           ;main.c: 1975: relay_pulse_flags |= 0x40;
  4274  002F34  0100               	movlb	0	; () banked
  4275  002F36  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;main.c: 1976: relay_pulse_timer[ 6 ] =
  4279                           ;main.c: 1977: readEEPROM( 0x43 + 30 ) * 256 +
  4280                           ;main.c: 1978: readEEPROM( 0x43 + 31 );
  4281  002F38  6A09               	clrf	?_readEEPROM+1,c
  4282  002F3A  0E62               	movlw	98
  4283  002F3C  6E08               	movwf	?_readEEPROM,c
  4284  002F3E  ECDA  F021         	call	_readEEPROM	;wreg free
  4285  002F42  6E0C               	movwf	??_doActionPulse& (0+255),c
  4286  002F44  6A09               	clrf	?_readEEPROM+1,c
  4287  002F46  0E61               	movlw	97
  4288  002F48  6E08               	movwf	?_readEEPROM,c
  4289  002F4A  ECDA  F021         	call	_readEEPROM	;wreg free
  4290  002F4E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4291  002F50  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4292  002F52  500C               	movf	??_doActionPulse,w,c
  4293  002F54  240D               	addwf	??_doActionPulse+1,w,c
  4294  002F56  0100               	movlb	0	; () banked
  4295  002F58  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4296  002F5A  0E00               	movlw	0
  4297  002F5C  200E               	addwfc	??_doActionPulse+2,w,c
  4298  002F5E  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4299                           
  4300                           ;main.c: 1979: break;
  4301  002F60  D010               	goto	l8631
  4302  002F62                     l8629:
  4303  002F62  5011               	movf	doActionPulse@i,w,c
  4304                           
  4305                           ; Switch size 1, requested type "space"
  4306                           ; Number of cases is 7, Range of values is 0 to 6
  4307                           ; switch strategies available:
  4308                           ; Name         Instructions Cycles
  4309                           ; simple_byte           22    12 (average)
  4310                           ;	Chosen strategy is simple_byte
  4311  002F64  E101 D755          	bz	l491
  4312  002F68  0A01               	xorlw	1	; case 1
  4313  002F6A  E101 D76A          	bz	l493
  4314  002F6E  0A03               	xorlw	3	; case 2
  4315  002F70  E080               	bz	l494
  4316  002F72  0A01               	xorlw	1	; case 3
  4317  002F74  E096               	bz	l495
  4318  002F76  0A07               	xorlw	7	; case 4
  4319  002F78  E0AC               	bz	l496
  4320  002F7A  0A01               	xorlw	1	; case 5
  4321  002F7C  E0C2               	bz	l497
  4322  002F7E  0A03               	xorlw	3	; case 6
  4323  002F80  E0D8               	bz	l498
  4324  002F82                     l8631:
  4325  002F82  2A11               	incf	doActionPulse@i,f,c
  4326  002F84  0E07               	movlw	7
  4327  002F86  6411               	cpfsgt	doActionPulse@i,c
  4328  002F88  D71C               	goto	l8585
  4329  002F8A  0C07               	retlw	7
  4330  002F8C                     __end_of_doActionPulse:
  4331                           	opt stack 0
  4332                           tblptru	equ	0xFF8
  4333                           tblptrh	equ	0xFF7
  4334                           tblptrl	equ	0xFF6
  4335                           tablat	equ	0xFF5
  4336                           prodh	equ	0xFF4
  4337                           prodl	equ	0xFF3
  4338                           intcon	equ	0xFF2
  4339                           postinc0	equ	0xFEE
  4340                           wreg	equ	0xFE8
  4341                           indf1	equ	0xFE7
  4342                           fsr1h	equ	0xFE2
  4343                           fsr1l	equ	0xFE1
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           plusw2	equ	0xFDB
  4348                           fsr2h	equ	0xFDA
  4349                           fsr2l	equ	0xFD9
  4350                           status	equ	0xFD8
  4351                           
  4352 ;; *************** function _doActionOn *****************
  4353 ;; Defined at:
  4354 ;;		line 1711 in file "../main.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;  dmflags         1    wreg     unsigned char 
  4357 ;;  arg             1   80[COMRAM] unsigned char 
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4360 ;;  i               1   27[BANK0 ] unsigned char 
  4361 ;;  val             1   26[BANK0 ] unsigned char 
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : F/0
  4368 ;;		On exit  : F/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4371 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4372 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4373 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4374 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4375 ;;Total ram usage:        7 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    7
  4378 ;; This function calls:
  4379 ;;		_readEEPROM
  4380 ;;		_SendInformationEvent
  4381 ;; This function is called by:
  4382 ;;		_doDM
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text13
  4387  002728                     __ptext13:
  4388                           	opt stack 0
  4389  002728                     _doActionOn:
  4390                           	opt stack 22
  4391                           
  4392                           ;incstack = 0
  4393                           ;incstack = 0
  4394                           ;doActionOn@dmflags stored from wreg
  4395  002728  CFE8 F0CA          	movff	wreg,doActionOn@dmflags
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;main.c: 1713: unsigned char i;
  4399                           ;main.c: 1714: unsigned char val;
  4400                           ;main.c: 1716: for (i = 0; i < 8; i++) {
  4401  00272C  6BCC               	clrf	doActionOn@i& (0+255),b
  4402  00272E                     l10241:
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;main.c: 1719: if ( !( arg & ( 1 << i ) ) ) continue;
  4406  00272E  C0CC  F0C7         	movff	doActionOn@i,??_doActionOn
  4407  002732  0E01               	movlw	1
  4408  002734  6FC8               	movwf	(??_doActionOn+1)& (0+255),b
  4409  002736  2BC7               	incf	??_doActionOn& (0+255),f,b
  4410  002738  D002               	goto	u13004
  4411  00273A                     u13005:
  4412  00273A  90D8               	bcf	status,0,c
  4413  00273C  37C8               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4414  00273E                     u13004:
  4415  00273E  2FC7               	decfsz	??_doActionOn& (0+255),f,b
  4416  002740  D7FC               	goto	u13005
  4417  002742  51C8               	movf	(??_doActionOn+1)& (0+255),w,b
  4418  002744  1451               	andwf	doActionOn@arg,w,c
  4419  002746  E101 D11F          	bz	l10293
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;main.c: 1722: if ( dmflags & 0x08 ) {
  4423  00274A  A7CA               	btfss	doActionOn@dmflags& (0+255),3,b
  4424  00274C  D00C               	goto	l10249
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 1723: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4428                           ;main.c: 1724: 53 +
  4429                           ;main.c: 1725: i ) ) {
  4430  00274E  0E78               	movlw	120
  4431  002750  25CC               	addwf	doActionOn@i& (0+255),w,b
  4432  002752  6E08               	movwf	?_readEEPROM,c
  4433  002754  6A09               	clrf	?_readEEPROM+1,c
  4434  002756  0E00               	movlw	0
  4435  002758  2209               	addwfc	?_readEEPROM+1,f,c
  4436  00275A  ECDA  F021         	call	_readEEPROM	;wreg free
  4437  00275E  0100               	movlb	0	; () banked
  4438  002760  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4439  002762  E001 D111          	bnz	l10293
  4440  002766                     l10249:
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;main.c: 1727: }
  4444                           ;main.c: 1728: }
  4445                           ;main.c: 1730: val = readEEPROM( 0x43 + 10 + i );
  4446  002766  0E4D               	movlw	77
  4447  002768  25CC               	addwf	doActionOn@i& (0+255),w,b
  4448  00276A  6E08               	movwf	?_readEEPROM,c
  4449  00276C  6A09               	clrf	?_readEEPROM+1,c
  4450  00276E  0E00               	movlw	0
  4451  002770  2209               	addwfc	?_readEEPROM+1,f,c
  4452  002772  ECDA  F021         	call	_readEEPROM	;wreg free
  4453  002776  0100               	movlb	0	; () banked
  4454  002778  6FCB               	movwf	doActionOn@val& (0+255),b
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;main.c: 1733: if ( !( val & 0x80 ) ) continue;
  4458  00277A  AFCB               	btfss	doActionOn@val& (0+255),7,b
  4459  00277C  D105               	goto	l10293
  4460  00277E  D0E0               	goto	l10285
  4461  002780                     l442:
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 1738: LATBbits.LATB4 = 1;
  4465  002780  888A               	bsf	3978,4,c	;volatile
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;main.c: 1740: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4469  002782  6A09               	clrf	?_readEEPROM+1,c
  4470  002784  0E4D               	movlw	77
  4471  002786  6E08               	movwf	?_readEEPROM,c
  4472  002788  ECDA  F021         	call	_readEEPROM	;wreg free
  4473  00278C  0100               	movlb	0	; () banked
  4474  00278E  6FC7               	movwf	??_doActionOn& (0+255),b
  4475  002790  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4476  002792  D0E8               	goto	l444
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;main.c: 1741: relay_protection_timer[ 0 ] =
  4480                           ;main.c: 1742: readEEPROM( 0x43 + 34 ) * 256 +
  4481                           ;main.c: 1743: readEEPROM( 0x43 + 35 );
  4482  002794  6A09               	clrf	?_readEEPROM+1,c
  4483  002796  0E66               	movlw	102
  4484  002798  6E08               	movwf	?_readEEPROM,c
  4485  00279A  ECDA  F021         	call	_readEEPROM	;wreg free
  4486  00279E  0100               	movlb	0	; () banked
  4487  0027A0  6FC7               	movwf	??_doActionOn& (0+255),b
  4488  0027A2  6A09               	clrf	?_readEEPROM+1,c
  4489  0027A4  0E65               	movlw	101
  4490  0027A6  6E08               	movwf	?_readEEPROM,c
  4491  0027A8  ECDA  F021         	call	_readEEPROM	;wreg free
  4492  0027AC  0100               	movlb	0	; () banked
  4493  0027AE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4494  0027B0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4495  0027B2  51C7               	movf	??_doActionOn& (0+255),w,b
  4496  0027B4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4497  0027B6  6F60               	movwf	_relay_protection_timer& (0+255),b
  4498  0027B8  0E00               	movlw	0
  4499  0027BA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4500  0027BC  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4501  0027BE  D0D2               	goto	l444
  4502  0027C0                     l445:
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;main.c: 1748: LATBbits.LATB1 = 1;
  4506  0027C0  828A               	bsf	3978,1,c	;volatile
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;main.c: 1750: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4510  0027C2  6A09               	clrf	?_readEEPROM+1,c
  4511  0027C4  0E4E               	movlw	78
  4512  0027C6  6E08               	movwf	?_readEEPROM,c
  4513  0027C8  ECDA  F021         	call	_readEEPROM	;wreg free
  4514  0027CC  0100               	movlb	0	; () banked
  4515  0027CE  6FC7               	movwf	??_doActionOn& (0+255),b
  4516  0027D0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4517  0027D2  D0C8               	goto	l444
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;main.c: 1751: relay_protection_timer[ 1 ] =
  4521                           ;main.c: 1752: readEEPROM( 0x43 + 36 ) * 256 +
  4522                           ;main.c: 1753: readEEPROM( 0x43 + 37 );
  4523  0027D4  6A09               	clrf	?_readEEPROM+1,c
  4524  0027D6  0E68               	movlw	104
  4525  0027D8  6E08               	movwf	?_readEEPROM,c
  4526  0027DA  ECDA  F021         	call	_readEEPROM	;wreg free
  4527  0027DE  0100               	movlb	0	; () banked
  4528  0027E0  6FC7               	movwf	??_doActionOn& (0+255),b
  4529  0027E2  6A09               	clrf	?_readEEPROM+1,c
  4530  0027E4  0E67               	movlw	103
  4531  0027E6  6E08               	movwf	?_readEEPROM,c
  4532  0027E8  ECDA  F021         	call	_readEEPROM	;wreg free
  4533  0027EC  0100               	movlb	0	; () banked
  4534  0027EE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4535  0027F0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4536  0027F2  51C7               	movf	??_doActionOn& (0+255),w,b
  4537  0027F4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4538  0027F6  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4539  0027F8  0E00               	movlw	0
  4540  0027FA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4541  0027FC  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4542  0027FE  D0B2               	goto	l444
  4543  002800                     l447:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;main.c: 1758: LATBbits.LATB0 = 1;
  4547  002800  808A               	bsf	3978,0,c	;volatile
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;main.c: 1760: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4551  002802  6A09               	clrf	?_readEEPROM+1,c
  4552  002804  0E4F               	movlw	79
  4553  002806  6E08               	movwf	?_readEEPROM,c
  4554  002808  ECDA  F021         	call	_readEEPROM	;wreg free
  4555  00280C  0100               	movlb	0	; () banked
  4556  00280E  6FC7               	movwf	??_doActionOn& (0+255),b
  4557  002810  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4558  002812  D0A8               	goto	l444
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;main.c: 1761: relay_protection_timer[ 2 ] =
  4562                           ;main.c: 1762: readEEPROM( 0x43 + 38 ) * 256 +
  4563                           ;main.c: 1763: readEEPROM( 0x43 + 39 );
  4564  002814  6A09               	clrf	?_readEEPROM+1,c
  4565  002816  0E6A               	movlw	106
  4566  002818  6E08               	movwf	?_readEEPROM,c
  4567  00281A  ECDA  F021         	call	_readEEPROM	;wreg free
  4568  00281E  0100               	movlb	0	; () banked
  4569  002820  6FC7               	movwf	??_doActionOn& (0+255),b
  4570  002822  6A09               	clrf	?_readEEPROM+1,c
  4571  002824  0E69               	movlw	105
  4572  002826  6E08               	movwf	?_readEEPROM,c
  4573  002828  ECDA  F021         	call	_readEEPROM	;wreg free
  4574  00282C  0100               	movlb	0	; () banked
  4575  00282E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4576  002830  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4577  002832  51C7               	movf	??_doActionOn& (0+255),w,b
  4578  002834  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4579  002836  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4580  002838  0E00               	movlw	0
  4581  00283A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4582  00283C  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4583  00283E  D092               	goto	l444
  4584  002840                     l449:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;main.c: 1768: LATCbits.LATC7 = 1;
  4588  002840  8E8B               	bsf	3979,7,c	;volatile
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;main.c: 1770: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4592  002842  6A09               	clrf	?_readEEPROM+1,c
  4593  002844  0E50               	movlw	80
  4594  002846  6E08               	movwf	?_readEEPROM,c
  4595  002848  ECDA  F021         	call	_readEEPROM	;wreg free
  4596  00284C  0100               	movlb	0	; () banked
  4597  00284E  6FC7               	movwf	??_doActionOn& (0+255),b
  4598  002850  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4599  002852  D088               	goto	l444
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;main.c: 1771: relay_protection_timer[ 3 ] =
  4603                           ;main.c: 1772: readEEPROM( 0x43 + 40 ) * 256 +
  4604                           ;main.c: 1773: readEEPROM( 0x43 + 41 );
  4605  002854  6A09               	clrf	?_readEEPROM+1,c
  4606  002856  0E6C               	movlw	108
  4607  002858  6E08               	movwf	?_readEEPROM,c
  4608  00285A  ECDA  F021         	call	_readEEPROM	;wreg free
  4609  00285E  0100               	movlb	0	; () banked
  4610  002860  6FC7               	movwf	??_doActionOn& (0+255),b
  4611  002862  6A09               	clrf	?_readEEPROM+1,c
  4612  002864  0E6B               	movlw	107
  4613  002866  6E08               	movwf	?_readEEPROM,c
  4614  002868  ECDA  F021         	call	_readEEPROM	;wreg free
  4615  00286C  0100               	movlb	0	; () banked
  4616  00286E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4617  002870  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4618  002872  51C7               	movf	??_doActionOn& (0+255),w,b
  4619  002874  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4620  002876  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4621  002878  0E00               	movlw	0
  4622  00287A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4623  00287C  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4624  00287E  D072               	goto	l444
  4625  002880                     l451:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;main.c: 1778: LATCbits.LATC6 = 1;
  4629  002880  8C8B               	bsf	3979,6,c	;volatile
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 1780: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4633  002882  6A09               	clrf	?_readEEPROM+1,c
  4634  002884  0E51               	movlw	81
  4635  002886  6E08               	movwf	?_readEEPROM,c
  4636  002888  ECDA  F021         	call	_readEEPROM	;wreg free
  4637  00288C  0100               	movlb	0	; () banked
  4638  00288E  6FC7               	movwf	??_doActionOn& (0+255),b
  4639  002890  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4640  002892  D068               	goto	l444
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;main.c: 1781: relay_protection_timer[ 4 ] =
  4644                           ;main.c: 1782: readEEPROM( 0x43 + 42 ) * 256 +
  4645                           ;main.c: 1783: readEEPROM( 0x43 + 43 );
  4646  002894  6A09               	clrf	?_readEEPROM+1,c
  4647  002896  0E6E               	movlw	110
  4648  002898  6E08               	movwf	?_readEEPROM,c
  4649  00289A  ECDA  F021         	call	_readEEPROM	;wreg free
  4650  00289E  0100               	movlb	0	; () banked
  4651  0028A0  6FC7               	movwf	??_doActionOn& (0+255),b
  4652  0028A2  6A09               	clrf	?_readEEPROM+1,c
  4653  0028A4  0E6D               	movlw	109
  4654  0028A6  6E08               	movwf	?_readEEPROM,c
  4655  0028A8  ECDA  F021         	call	_readEEPROM	;wreg free
  4656  0028AC  0100               	movlb	0	; () banked
  4657  0028AE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4658  0028B0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4659  0028B2  51C7               	movf	??_doActionOn& (0+255),w,b
  4660  0028B4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4661  0028B6  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4662  0028B8  0E00               	movlw	0
  4663  0028BA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4664  0028BC  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4665  0028BE  D052               	goto	l444
  4666  0028C0                     l453:
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;main.c: 1788: LATCbits.LATC5 = 1;
  4670  0028C0  8A8B               	bsf	3979,5,c	;volatile
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 1790: if (readEEPROM( 0x43 + 15) & 0x04) {
  4674  0028C2  6A09               	clrf	?_readEEPROM+1,c
  4675  0028C4  0E52               	movlw	82
  4676  0028C6  6E08               	movwf	?_readEEPROM,c
  4677  0028C8  ECDA  F021         	call	_readEEPROM	;wreg free
  4678  0028CC  0100               	movlb	0	; () banked
  4679  0028CE  6FC7               	movwf	??_doActionOn& (0+255),b
  4680  0028D0  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4681  0028D2  D048               	goto	l444
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;main.c: 1791: relay_protection_timer[ 5 ] =
  4685                           ;main.c: 1792: readEEPROM( 0x43 + 44 ) * 256 +
  4686                           ;main.c: 1793: readEEPROM( 0x43 + 45 );
  4687  0028D4  6A09               	clrf	?_readEEPROM+1,c
  4688  0028D6  0E70               	movlw	112
  4689  0028D8  6E08               	movwf	?_readEEPROM,c
  4690  0028DA  ECDA  F021         	call	_readEEPROM	;wreg free
  4691  0028DE  0100               	movlb	0	; () banked
  4692  0028E0  6FC7               	movwf	??_doActionOn& (0+255),b
  4693  0028E2  6A09               	clrf	?_readEEPROM+1,c
  4694  0028E4  0E6F               	movlw	111
  4695  0028E6  6E08               	movwf	?_readEEPROM,c
  4696  0028E8  ECDA  F021         	call	_readEEPROM	;wreg free
  4697  0028EC  0100               	movlb	0	; () banked
  4698  0028EE  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4699  0028F0  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4700  0028F2  51C7               	movf	??_doActionOn& (0+255),w,b
  4701  0028F4  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4702  0028F6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4703  0028F8  0E00               	movlw	0
  4704  0028FA  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4705  0028FC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4706  0028FE  D032               	goto	l444
  4707  002900                     l455:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;main.c: 1798: LATCbits.LATC4 = 1;
  4711  002900  888B               	bsf	3979,4,c	;volatile
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;main.c: 1800: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4715  002902  6A09               	clrf	?_readEEPROM+1,c
  4716  002904  0E53               	movlw	83
  4717  002906  6E08               	movwf	?_readEEPROM,c
  4718  002908  ECDA  F021         	call	_readEEPROM	;wreg free
  4719  00290C  0100               	movlb	0	; () banked
  4720  00290E  6FC7               	movwf	??_doActionOn& (0+255),b
  4721  002910  A5C7               	btfss	??_doActionOn& (0+255),2,b
  4722  002912  D028               	goto	l444
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;main.c: 1801: relay_protection_timer[ 6 ] =
  4726                           ;main.c: 1802: readEEPROM( 0x43 + 46 ) * 256 +
  4727                           ;main.c: 1803: readEEPROM( 0x43 + 47 );
  4728  002914  6A09               	clrf	?_readEEPROM+1,c
  4729  002916  0E72               	movlw	114
  4730  002918  6E08               	movwf	?_readEEPROM,c
  4731  00291A  ECDA  F021         	call	_readEEPROM	;wreg free
  4732  00291E  0100               	movlb	0	; () banked
  4733  002920  6FC7               	movwf	??_doActionOn& (0+255),b
  4734  002922  6A09               	clrf	?_readEEPROM+1,c
  4735  002924  0E71               	movlw	113
  4736  002926  6E08               	movwf	?_readEEPROM,c
  4737  002928  ECDA  F021         	call	_readEEPROM	;wreg free
  4738  00292C  0100               	movlb	0	; () banked
  4739  00292E  6FC9               	movwf	(??_doActionOn+2)& (0+255),b
  4740  002930  6BC8               	clrf	(??_doActionOn+1)& (0+255),b
  4741  002932  51C7               	movf	??_doActionOn& (0+255),w,b
  4742  002934  25C8               	addwf	(??_doActionOn+1)& (0+255),w,b
  4743  002936  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4744  002938  0E00               	movlw	0
  4745  00293A  21C9               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4746  00293C  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4747  00293E  D012               	goto	l444
  4748  002940                     l10285:
  4749                           
  4750                           ; BSR set to: 0
  4751  002940  51CC               	movf	doActionOn@i& (0+255),w,b
  4752                           
  4753                           ; Switch size 1, requested type "space"
  4754                           ; Number of cases is 7, Range of values is 0 to 6
  4755                           ; switch strategies available:
  4756                           ; Name         Instructions Cycles
  4757                           ; simple_byte           22    12 (average)
  4758                           ;	Chosen strategy is simple_byte
  4759  002942  E101 D71D          	bz	l442
  4760  002946  0A01               	xorlw	1	; case 1
  4761  002948  E101 D73A          	bz	l445
  4762  00294C  0A03               	xorlw	3	; case 2
  4763  00294E  E101 D757          	bz	l447
  4764  002952  0A01               	xorlw	1	; case 3
  4765  002954  E101 D774          	bz	l449
  4766  002958  0A07               	xorlw	7	; case 4
  4767  00295A  E092               	bz	l451
  4768  00295C  0A01               	xorlw	1	; case 5
  4769  00295E  E0B0               	bz	l453
  4770  002960  0A03               	xorlw	3	; case 6
  4771  002962  E0CE               	bz	l455
  4772  002964                     l444:
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;main.c: 1810: if ( val & 0x08 ) {
  4776  002964  A7CB               	btfss	doActionOn@val& (0+255),3,b
  4777  002966  D007               	goto	l10289
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;main.c: 1811: SendInformationEvent( i, 20, 3 );
  4781  002968  0E14               	movlw	20
  4782  00296A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4783  00296C  0E03               	movlw	3
  4784  00296E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4785  002970  51CC               	movf	doActionOn@i& (0+255),w,b
  4786  002972  EC52  F01F         	call	_SendInformationEvent
  4787  002976                     l10289:
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;main.c: 1812: }
  4791                           ;main.c: 1815: if ( val & 0x20 ) {
  4792  002976  ABCB               	btfss	doActionOn@val& (0+255),5,b
  4793  002978  D007               	goto	l10293
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;main.c: 1816: SendInformationEvent( i, 20, 25 );
  4797  00297A  0E14               	movlw	20
  4798  00297C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  4799  00297E  0E19               	movlw	25
  4800  002980  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4801  002982  51CC               	movf	doActionOn@i& (0+255),w,b
  4802  002984  EC52  F01F         	call	_SendInformationEvent
  4803  002988                     l10293:
  4804                           
  4805                           ; BSR set to: 0
  4806  002988  2BCC               	incf	doActionOn@i& (0+255),f,b
  4807                           
  4808                           ; BSR set to: 0
  4809  00298A  0E07               	movlw	7
  4810  00298C  65CC               	cpfsgt	doActionOn@i& (0+255),b
  4811  00298E  D6CF               	goto	l10241
  4812  002990  0C07               	retlw	7
  4813  002992                     __end_of_doActionOn:
  4814                           	opt stack 0
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           indf1	equ	0xFE7
  4825                           fsr1h	equ	0xFE2
  4826                           fsr1l	equ	0xFE1
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           plusw2	equ	0xFDB
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _doActionOff *****************
  4836 ;; Defined at:
  4837 ;;		line 1826 in file "../main.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  dmflags         1    wreg     unsigned char 
  4840 ;;  arg             1   80[COMRAM] unsigned char 
  4841 ;; Auto vars:     Size  Location     Type
  4842 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4843 ;;  i               1   26[BANK0 ] unsigned char 
  4844 ;;  val             1   25[BANK0 ] unsigned char 
  4845 ;; Return value:  Size  Location     Type
  4846 ;;		None               void
  4847 ;; Registers used:
  4848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4849 ;; Tracked objects:
  4850 ;;		On entry : F/0
  4851 ;;		On exit  : F/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4854 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4855 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4856 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4857 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4858 ;;Total ram usage:        6 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; Hardware stack levels required when called:    7
  4861 ;; This function calls:
  4862 ;;		_readEEPROM
  4863 ;;		_SendInformationEvent
  4864 ;; This function is called by:
  4865 ;;		_doApplicationOneSecondWork
  4866 ;;		_doDM
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text14
  4871  0039D8                     __ptext14:
  4872                           	opt stack 0
  4873  0039D8                     _doActionOff:
  4874                           	opt stack 22
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;incstack = 0
  4878                           ;incstack = 0
  4879                           ;doActionOff@dmflags stored from wreg
  4880  0039D8  CFE8 F0C9          	movff	wreg,doActionOff@dmflags
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;main.c: 1828: unsigned char i;
  4884                           ;main.c: 1829: unsigned char val;
  4885                           ;main.c: 1831: for ( i = 0; i < 8; i++ ) {
  4886  0039DC  6BCB               	clrf	doActionOff@i& (0+255),b
  4887  0039DE                     l9843:
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;main.c: 1834: if ( !( arg & ( 1 << i ) ) ) continue;
  4891  0039DE  C0CB  F0C7         	movff	doActionOff@i,??_doActionOff
  4892  0039E2  0E01               	movlw	1
  4893  0039E4  6FC8               	movwf	(??_doActionOff+1)& (0+255),b
  4894  0039E6  2BC7               	incf	??_doActionOff& (0+255),f,b
  4895  0039E8  D002               	goto	u12364
  4896  0039EA                     u12365:
  4897  0039EA  90D8               	bcf	status,0,c
  4898  0039EC  37C8               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4899  0039EE                     u12364:
  4900  0039EE  2FC7               	decfsz	??_doActionOff& (0+255),f,b
  4901  0039F0  D7FC               	goto	u12365
  4902  0039F2  51C8               	movf	(??_doActionOff+1)& (0+255),w,b
  4903  0039F4  1451               	andwf	doActionOff@arg,w,c
  4904  0039F6  E048               	bz	l9867
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;main.c: 1837: if ( dmflags & 0x08 ) {
  4908  0039F8  A7C9               	btfss	doActionOff@dmflags& (0+255),3,b
  4909  0039FA  D00B               	goto	l9851
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;main.c: 1838: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4913                           ;main.c: 1839: 53 +
  4914                           ;main.c: 1840: i ) ) {
  4915  0039FC  0E78               	movlw	120
  4916  0039FE  25CB               	addwf	doActionOff@i& (0+255),w,b
  4917  003A00  6E08               	movwf	?_readEEPROM,c
  4918  003A02  6A09               	clrf	?_readEEPROM+1,c
  4919  003A04  0E00               	movlw	0
  4920  003A06  2209               	addwfc	?_readEEPROM+1,f,c
  4921  003A08  ECDA  F021         	call	_readEEPROM	;wreg free
  4922  003A0C  0100               	movlb	0	; () banked
  4923  003A0E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4924  003A10  E13B               	bnz	l9867
  4925  003A12                     l9851:
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;main.c: 1842: }
  4929                           ;main.c: 1843: }
  4930                           ;main.c: 1845: val = readEEPROM( 0x43 + 10 + i );
  4931  003A12  0E4D               	movlw	77
  4932  003A14  25CB               	addwf	doActionOff@i& (0+255),w,b
  4933  003A16  6E08               	movwf	?_readEEPROM,c
  4934  003A18  6A09               	clrf	?_readEEPROM+1,c
  4935  003A1A  0E00               	movlw	0
  4936  003A1C  2209               	addwfc	?_readEEPROM+1,f,c
  4937  003A1E  ECDA  F021         	call	_readEEPROM	;wreg free
  4938  003A22  0100               	movlb	0	; () banked
  4939  003A24  6FCA               	movwf	doActionOff@val& (0+255),b
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;main.c: 1848: if ( !( val & 0x80 ) ) continue;
  4943  003A26  AFCA               	btfss	doActionOff@val& (0+255),7,b
  4944  003A28  D02F               	goto	l9867
  4945  003A2A  D00E               	goto	l9859
  4946  003A2C                     l470:
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;main.c: 1853: LATBbits.LATB4 = 0;
  4950  003A2C  988A               	bcf	3978,4,c	;volatile
  4951                           
  4952                           ;main.c: 1854: break;
  4953  003A2E  D01A               	goto	l471
  4954  003A30                     l472:
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;main.c: 1857: LATBbits.LATB1 = 0;
  4958  003A30  928A               	bcf	3978,1,c	;volatile
  4959                           
  4960                           ;main.c: 1858: break;
  4961  003A32  D018               	goto	l471
  4962  003A34                     l473:
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;main.c: 1861: LATBbits.LATB0 = 0;
  4966  003A34  908A               	bcf	3978,0,c	;volatile
  4967                           
  4968                           ;main.c: 1862: break;
  4969  003A36  D016               	goto	l471
  4970  003A38                     l474:
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;main.c: 1865: LATCbits.LATC7 = 0;
  4974  003A38  9E8B               	bcf	3979,7,c	;volatile
  4975                           
  4976                           ;main.c: 1866: break;
  4977  003A3A  D014               	goto	l471
  4978  003A3C                     l475:
  4979                           
  4980                           ; BSR set to: 0
  4981                           ;main.c: 1869: LATCbits.LATC6 = 0;
  4982  003A3C  9C8B               	bcf	3979,6,c	;volatile
  4983                           
  4984                           ;main.c: 1870: break;
  4985  003A3E  D012               	goto	l471
  4986  003A40                     l476:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;main.c: 1873: LATCbits.LATC5 = 0;
  4990  003A40  9A8B               	bcf	3979,5,c	;volatile
  4991                           
  4992                           ;main.c: 1874: break;
  4993  003A42  D010               	goto	l471
  4994  003A44                     l477:
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;main.c: 1877: LATCbits.LATC4 = 0;
  4998  003A44  988B               	bcf	3979,4,c	;volatile
  4999                           
  5000                           ;main.c: 1878: break;
  5001  003A46  D00E               	goto	l471
  5002  003A48                     l9859:
  5003                           
  5004                           ; BSR set to: 0
  5005  003A48  51CB               	movf	doActionOff@i& (0+255),w,b
  5006                           
  5007                           ; Switch size 1, requested type "space"
  5008                           ; Number of cases is 7, Range of values is 0 to 6
  5009                           ; switch strategies available:
  5010                           ; Name         Instructions Cycles
  5011                           ; simple_byte           22    12 (average)
  5012                           ;	Chosen strategy is simple_byte
  5013  003A4A  E0F0               	bz	l470
  5014  003A4C  0A01               	xorlw	1	; case 1
  5015  003A4E  E0F0               	bz	l472
  5016  003A50  0A03               	xorlw	3	; case 2
  5017  003A52  E0F0               	bz	l473
  5018  003A54  0A01               	xorlw	1	; case 3
  5019  003A56  E0F0               	bz	l474
  5020  003A58  0A07               	xorlw	7	; case 4
  5021  003A5A  E0F0               	bz	l475
  5022  003A5C  0A01               	xorlw	1	; case 5
  5023  003A5E  E0F0               	bz	l476
  5024  003A60  0A03               	xorlw	3	; case 6
  5025  003A62  E0F0               	bz	l477
  5026  003A64                     l471:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;main.c: 1883: if ( val & 0x10 ) {
  5030  003A64  A9CA               	btfss	doActionOff@val& (0+255),4,b
  5031  003A66  D007               	goto	l9863
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;main.c: 1884: SendInformationEvent( i, 20, 4 );
  5035  003A68  0E14               	movlw	20
  5036  003A6A  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5037  003A6C  0E04               	movlw	4
  5038  003A6E  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5039  003A70  51CB               	movf	doActionOff@i& (0+255),w,b
  5040  003A72  EC52  F01F         	call	_SendInformationEvent
  5041  003A76                     l9863:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;main.c: 1885: }
  5045                           ;main.c: 1888: if ( val & 0x40 ) {
  5046  003A76  ADCA               	btfss	doActionOff@val& (0+255),6,b
  5047  003A78  D007               	goto	l9867
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 1889: SendInformationEvent( i, 20, 24 );
  5051  003A7A  0E14               	movlw	20
  5052  003A7C  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  5053  003A7E  0E18               	movlw	24
  5054  003A80  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5055  003A82  51CB               	movf	doActionOff@i& (0+255),w,b
  5056  003A84  EC52  F01F         	call	_SendInformationEvent
  5057  003A88                     l9867:
  5058                           
  5059                           ; BSR set to: 0
  5060  003A88  2BCB               	incf	doActionOff@i& (0+255),f,b
  5061                           
  5062                           ; BSR set to: 0
  5063  003A8A  0E07               	movlw	7
  5064  003A8C  65CB               	cpfsgt	doActionOff@i& (0+255),b
  5065  003A8E  D7A7               	goto	l9843
  5066  003A90  0C07               	retlw	7
  5067  003A92                     __end_of_doActionOff:
  5068                           	opt stack 0
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           indf1	equ	0xFE7
  5079                           fsr1h	equ	0xFE2
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           plusw2	equ	0xFDB
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _vscp_handleProtocolEvent *****************
  5090 ;; Defined at:
  5091 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;		None
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  bytes           1   45[BANK0 ] unsigned char 
  5096 ;;  page_save       2   41[BANK0 ] unsigned short 
  5097 ;;  i               1   51[BANK0 ] unsigned char 
  5098 ;;  page_save       2   39[BANK0 ] unsigned short 
  5099 ;;  byte            1   55[BANK0 ] unsigned char 
  5100 ;;  bytes           1   53[BANK0 ] unsigned char 
  5101 ;;  cb              1   50[BANK0 ] unsigned char 
  5102 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5103 ;;  j               1   58[BANK0 ] unsigned char 
  5104 ;;  i               1   56[BANK0 ] unsigned char 
  5105 ;;  k               1   52[BANK0 ] unsigned char 
  5106 ;;  i               1   54[BANK0 ] unsigned char 
  5107 ;;  len             1   48[BANK0 ] unsigned char 
  5108 ;;  pos             1   47[BANK0 ] unsigned char 
  5109 ;;  i               1   57[BANK0 ] unsigned char 
  5110 ;;  len             1   46[BANK0 ] unsigned char 
  5111 ;;  pos             1   44[BANK0 ] unsigned char 
  5112 ;;  offset          1   43[BANK0 ] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;		None               void
  5115 ;; Registers used:
  5116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : F/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5123 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5124 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5125 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5126 ;;Total ram usage:       27 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    9
  5129 ;; This function calls:
  5130 ;;		_vscp_init
  5131 ;;		_vscp_readAppReg
  5132 ;;		_vscp_writeAppReg
  5133 ;;		_vscp_sendEvent
  5134 ;;		_vscp_getGUID
  5135 ;;		_vscp_getMDF_URL
  5136 ;;		_vscp_goBootloaderMode
  5137 ;;		_vscp_getMatrixInfo
  5138 ;;		_vscp_handleHeartbeat
  5139 ;;		_vscp_handleSetNickname
  5140 ;;		_vscp_handleDropNickname
  5141 ;;		_vscp_newNodeOnline
  5142 ;;		_vscp_readRegister
  5143 ;;		_vscp_readStdReg
  5144 ;;		_vscp_writeRegister
  5145 ;;		_vscp_writeStdReg
  5146 ;;		___lbmod
  5147 ;; This function is called by:
  5148 ;;		_main
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text15
  5153  001790                     __ptext15:
  5154                           	opt stack 0
  5155  001790                     _vscp_handleProtocolEvent:
  5156                           	opt stack 21
  5157                           
  5158                           ; BSR set to: 0
  5159                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  5160                           
  5161                           ; BSR set to: 0
  5162                           ;incstack = 0
  5163                           ;incstack = 0
  5164  001790  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
  5165  001792  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5166  001794  A4D8               	btfss	status,2,c
  5167  001796  0012               	return	
  5168  001798  D29F               	goto	l9665
  5169  00179A                     l9253:
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  5173  00179A  EFD2  F01F         	goto	_vscp_handleHeartbeat	;wreg free
  5174  00179E                     l9255:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  5178  00179E  EF57  F020         	goto	_vscp_newNodeOnline	;wreg free
  5179  0017A2                     l9257:
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  5183  0017A2  EFCC  F020         	goto	_vscp_handleSetNickname	;wreg free
  5184  0017A6                     l9259:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  5188  0017A6  EF12  F020         	goto	_vscp_handleDropNickname	;wreg free
  5189  0017AA                     l9261:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5193                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5194  0017AA  5196               	movf	_vscp_imsg& (0+255),w,b
  5195  0017AC  0B0F               	andlw	15
  5196  0017AE  0A02               	xorlw	2
  5197  0017B0  A4D8               	btfss	status,2,c
  5198  0017B2  0012               	return	
  5199                           
  5200                           ; BSR set to: 0
  5201  0017B4  5191               	movf	_vscp_nickname& (0+255),w,b
  5202  0017B6  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5203  0017BA  62DF               	cpfseq	indf2,c
  5204  0017BC  0012               	return	
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  5208  0017BE  0E80               	movlw	128
  5209  0017C0  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5210  0017C2  D011               	goto	l9281
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5214  0017C4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5215  0017C6  ECA6  F01D         	call	_vscp_readAppReg
  5216  0017CA                     L13:
  5217  0017CA  0100               	movlb	0	; () banked
  5218  0017CC                     L14:
  5219  0017CC  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5223  0017CE  C09D  F0A9         	movff	_vscp_imsg+7,_vscp_omsg+5
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  5227  0017D2  0E03               	movlw	3
  5228  0017D4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  5232  0017D6  0E82               	movlw	130
  5233  0017D8  6FA4               	movwf	_vscp_omsg& (0+255),b
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  5237  0017DA  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5238  0017DC  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  5242  0017DE  0E0A               	movlw	10
  5243  0017E0  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;vscp_firmware.c: 832: vscp_sendEvent();
  5247  0017E2  EF93  F020         	goto	_vscp_sendEvent	;wreg free
  5248  0017E6                     l9281:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  5252                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5253  0017E6  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5254  0017E8  ECC6  F017         	call	_vscp_readStdReg
  5255  0017EC  D7EE               	goto	L13
  5256  0017EE                     l9295:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5260                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5261  0017EE  5196               	movf	_vscp_imsg& (0+255),w,b
  5262  0017F0  0B0F               	andlw	15
  5263  0017F2  0A03               	xorlw	3
  5264  0017F4  A4D8               	btfss	status,2,c
  5265  0017F6  0012               	return	
  5266                           
  5267                           ; BSR set to: 0
  5268  0017F8  5191               	movf	_vscp_nickname& (0+255),w,b
  5269  0017FA  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5270  0017FE  62DF               	cpfseq	indf2,c
  5271  001800  0012               	return	
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  5275  001802  0E80               	movlw	128
  5276  001804  619D               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5277  001806  D006               	goto	l9315
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  5281                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5282  001808  C09E  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5283  00180C  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5284  00180E  EC91  F007         	call	_vscp_writeAppReg
  5285  001812  D7DC               	goto	L14
  5286  001814                     l9315:
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  5290                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5291  001814  C09E  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5292  001818  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5293  00181A  EC76  F01B         	call	_vscp_writeStdReg
  5294  00181E  D7D5               	goto	L13
  5295  001820                     l9329:
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5299                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5300                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5301                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5302                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5303                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5304                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5305  001820  5191               	movf	_vscp_nickname& (0+255),w,b
  5306  001822  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5307  001826  62DF               	cpfseq	indf2,c
  5308  001828  0012               	return	
  5309                           
  5310                           ; BSR set to: 0
  5311  00182A  0E00               	movlw	0
  5312  00182C  ECAC  F021         	call	_vscp_getGUID
  5313  001830  0100               	movlb	0	; () banked
  5314  001832  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5315  001834  A4D8               	btfss	status,2,c
  5316  001836  0012               	return	
  5317                           
  5318                           ; BSR set to: 0
  5319  001838  0E03               	movlw	3
  5320  00183A  ECAC  F021         	call	_vscp_getGUID
  5321  00183E  0100               	movlb	0	; () banked
  5322  001840  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5323  001842  A4D8               	btfss	status,2,c
  5324  001844  0012               	return	
  5325                           
  5326                           ; BSR set to: 0
  5327  001846  0E05               	movlw	5
  5328  001848  ECAC  F021         	call	_vscp_getGUID
  5329  00184C  0100               	movlb	0	; () banked
  5330  00184E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5331  001850  A4D8               	btfss	status,2,c
  5332  001852  0012               	return	
  5333                           
  5334                           ; BSR set to: 0
  5335  001854  0E07               	movlw	7
  5336  001856  ECAC  F021         	call	_vscp_getGUID
  5337  00185A  0100               	movlb	0	; () banked
  5338  00185C  19A1               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5339  00185E  A4D8               	btfss	status,2,c
  5340  001860  0012               	return	
  5341                           
  5342                           ; BSR set to: 0
  5343  001862  5053               	movf	_vscp_page_select+1,w,c
  5344  001864  19A2               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5345  001866  A4D8               	btfss	status,2,c
  5346  001868  0012               	return	
  5347                           
  5348                           ; BSR set to: 0
  5349  00186A  5052               	movf	_vscp_page_select,w,c
  5350  00186C  EE20  F0A3         	lfsr	2,_vscp_imsg+13
  5351  001870  62DF               	cpfseq	indf2,c
  5352  001872  0012               	return	
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5356  001874  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5357  001876  EF68  F021         	goto	_vscp_goBootloaderMode
  5358  00187A                     l9345:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5362                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5363                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5364                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5365  00187A  0E00               	movlw	0
  5366  00187C  ECAC  F021         	call	_vscp_getGUID
  5367  001880  0100               	movlb	0	; () banked
  5368  001882  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5369  001884  E173               	bnz	l9389
  5370                           
  5371                           ; BSR set to: 0
  5372  001886  0E01               	movlw	1
  5373  001888  ECAC  F021         	call	_vscp_getGUID
  5374  00188C  0100               	movlb	0	; () banked
  5375  00188E  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5376  001890  E16D               	bnz	l9389
  5377                           
  5378                           ; BSR set to: 0
  5379  001892  0E02               	movlw	2
  5380  001894  ECAC  F021         	call	_vscp_getGUID
  5381  001898  0100               	movlb	0	; () banked
  5382  00189A  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5383  00189C  E167               	bnz	l9389
  5384                           
  5385                           ; BSR set to: 0
  5386  00189E  0E03               	movlw	3
  5387  0018A0  ECAC  F021         	call	_vscp_getGUID
  5388  0018A4  0100               	movlb	0	; () banked
  5389  0018A6  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5390  0018A8  E161               	bnz	l9389
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  5394  0018AA  898D               	bsf	_vscp_guid_reset& (0+255),4,b
  5395  0018AC  D05F               	goto	l9389
  5396  0018AE                     l9355:
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5400                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5401                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5402                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5403  0018AE  0E04               	movlw	4
  5404  0018B0  ECAC  F021         	call	_vscp_getGUID
  5405  0018B4  0100               	movlb	0	; () banked
  5406  0018B6  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5407  0018B8  E159               	bnz	l9389
  5408                           
  5409                           ; BSR set to: 0
  5410  0018BA  0E05               	movlw	5
  5411  0018BC  ECAC  F021         	call	_vscp_getGUID
  5412  0018C0  0100               	movlb	0	; () banked
  5413  0018C2  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5414  0018C4  E153               	bnz	l9389
  5415                           
  5416                           ; BSR set to: 0
  5417  0018C6  0E06               	movlw	6
  5418  0018C8  ECAC  F021         	call	_vscp_getGUID
  5419  0018CC  0100               	movlb	0	; () banked
  5420  0018CE  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5421  0018D0  E14D               	bnz	l9389
  5422                           
  5423                           ; BSR set to: 0
  5424  0018D2  0E07               	movlw	7
  5425  0018D4  ECAC  F021         	call	_vscp_getGUID
  5426  0018D8  0100               	movlb	0	; () banked
  5427  0018DA  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5428  0018DC  E147               	bnz	l9389
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  5432  0018DE  8B8D               	bsf	_vscp_guid_reset& (0+255),5,b
  5433  0018E0  D045               	goto	l9389
  5434  0018E2                     l9365:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5438                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5439                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5440                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5441  0018E2  0E08               	movlw	8
  5442  0018E4  ECAC  F021         	call	_vscp_getGUID
  5443  0018E8  0100               	movlb	0	; () banked
  5444  0018EA  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5445  0018EC  E13F               	bnz	l9389
  5446                           
  5447                           ; BSR set to: 0
  5448  0018EE  0E09               	movlw	9
  5449  0018F0  ECAC  F021         	call	_vscp_getGUID
  5450  0018F4  0100               	movlb	0	; () banked
  5451  0018F6  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5452  0018F8  E139               	bnz	l9389
  5453                           
  5454                           ; BSR set to: 0
  5455  0018FA  0E0A               	movlw	10
  5456  0018FC  ECAC  F021         	call	_vscp_getGUID
  5457  001900  0100               	movlb	0	; () banked
  5458  001902  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5459  001904  E133               	bnz	l9389
  5460                           
  5461                           ; BSR set to: 0
  5462  001906  0E0B               	movlw	11
  5463  001908  ECAC  F021         	call	_vscp_getGUID
  5464  00190C  0100               	movlb	0	; () banked
  5465  00190E  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5466  001910  E12D               	bnz	l9389
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  5470  001912  8D8D               	bsf	_vscp_guid_reset& (0+255),6,b
  5471  001914  D02B               	goto	l9389
  5472  001916                     l9375:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5476                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5477                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5478                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5479  001916  0E0C               	movlw	12
  5480  001918  ECAC  F021         	call	_vscp_getGUID
  5481  00191C  0100               	movlb	0	; () banked
  5482  00191E  199D               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5483  001920  E125               	bnz	l9389
  5484                           
  5485                           ; BSR set to: 0
  5486  001922  0E0D               	movlw	13
  5487  001924  ECAC  F021         	call	_vscp_getGUID
  5488  001928  0100               	movlb	0	; () banked
  5489  00192A  199E               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5490  00192C  E11F               	bnz	l9389
  5491                           
  5492                           ; BSR set to: 0
  5493  00192E  0E0E               	movlw	14
  5494  001930  ECAC  F021         	call	_vscp_getGUID
  5495  001934  0100               	movlb	0	; () banked
  5496  001936  199F               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5497  001938  E119               	bnz	l9389
  5498                           
  5499                           ; BSR set to: 0
  5500  00193A  0E0F               	movlw	15
  5501  00193C  ECAC  F021         	call	_vscp_getGUID
  5502  001940  0100               	movlb	0	; () banked
  5503  001942  19A0               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5504  001944  E113               	bnz	l9389
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  5508  001946  8F8D               	bsf	_vscp_guid_reset& (0+255),7,b
  5509  001948  D011               	goto	l9389
  5510  00194A                     l1216:
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  5514  00194A  6B8D               	clrf	_vscp_guid_reset& (0+255),b
  5515                           
  5516                           ;vscp_firmware.c: 952: break;
  5517  00194C  D00F               	goto	l9389
  5518  00194E                     l9387:
  5519                           
  5520                           ; BSR set to: 0
  5521  00194E  399C               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5522  001950  0B0F               	andlw	15
  5523  001952  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5524  001954  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5525                           
  5526                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5527                           ; Switch size 1, requested type "space"
  5528                           ; Number of cases is 1, Range of values is 0 to 0
  5529                           ; switch strategies available:
  5530                           ; Name         Instructions Cycles
  5531                           ; simple_byte            4     3 (average)
  5532                           ;	Chosen strategy is simple_byte
  5533  001956  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5534  001958  E1F8               	bnz	l1216
  5535                           
  5536                           ; BSR set to: 0
  5537                           ; Switch size 1, requested type "space"
  5538                           ; Number of cases is 4, Range of values is 0 to 3
  5539                           ; switch strategies available:
  5540                           ; Name         Instructions Cycles
  5541                           ; simple_byte           13     7 (average)
  5542                           ;	Chosen strategy is simple_byte
  5543  00195A  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5544  00195C  E08E               	bz	l9345
  5545  00195E  0A01               	xorlw	1	; case 1
  5546  001960  E0A6               	bz	l9355
  5547  001962  0A03               	xorlw	3	; case 2
  5548  001964  E0BE               	bz	l9365
  5549  001966  0A01               	xorlw	1	; case 3
  5550  001968  E0D6               	bz	l9375
  5551  00196A  D7EF               	goto	l1216
  5552  00196C                     l9389:
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5556  00196C  518D               	movf	_vscp_guid_reset& (0+255),w,b
  5557  00196E  0BF0               	andlw	240
  5558  001970  0AF0               	xorlw	240
  5559  001972  B4D8               	btfsc	status,2,c
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;vscp_firmware.c: 957: vscp_init();
  5563  001974  ECB0  F01F         	call	_vscp_init	;wreg free
  5564  001978  0012               	return	
  5565  00197A                     l9393:
  5566                           
  5567                           ; BSR set to: 0
  5568                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5569  00197A  5191               	movf	_vscp_nickname& (0+255),w,b
  5570  00197C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5571  001980  62DF               	cpfseq	indf2,c
  5572  001982  0012               	return	
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;vscp_firmware.c: 965: uint8_t i;
  5576                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  5577  001984  6BDD               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5578                           
  5579                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  5580  001986  C09D  F0DC         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5581                           
  5582                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  5583  00198A  C09E  F0DF         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5584                           
  5585                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  5586  00198E  6BEA               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5587  001990  D042               	goto	l9425
  5588  001992                     l9397:
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5592  001992  0E07               	movlw	7
  5593  001994  6E08               	movwf	?___lbmod,c
  5594  001996  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5595  001998  EC6C  F020         	call	___lbmod
  5596  00199C  0100               	movlb	0	; () banked
  5597  00199E  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5598  0019A0  51D1               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5599  0019A2  0FAA               	addlw	low (_vscp_omsg+6)
  5600  0019A4  6ED9               	movwf	fsr2l,c
  5601  0019A6  6ADA               	clrf	fsr2h,c
  5602  0019A8  51DC               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5603  0019AA  25EA               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5604  0019AC  EC8D  F021         	call	_vscp_readRegister
  5605  0019B0  6EDF               	movwf	indf2,c
  5606                           
  5607                           ;vscp_firmware.c: 973: if ( (i % 7) == 6 || i == (len - 1) ) {
  5608  0019B2  0E07               	movlw	7
  5609  0019B4  6E08               	movwf	?___lbmod,c
  5610  0019B6  0100               	movlb	0	; () banked
  5611  0019B8  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5612  0019BA  EC6C  F020         	call	___lbmod
  5613  0019BE  0A06               	xorlw	6
  5614  0019C0  E00B               	bz	l9403
  5615  0019C2  0EFF               	movlw	255
  5616  0019C4  0100               	movlb	0	; () banked
  5617  0019C6  25DF               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5618  0019C8  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5619  0019CA  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5620  0019CC  0EFF               	movlw	255
  5621  0019CE  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5622  0019D0  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5623  0019D2  19D1               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5624  0019D4  11D2               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5625  0019D6  E11E               	bnz	l9423
  5626  0019D8                     l9403:
  5627                           
  5628                           ;vscp_firmware.c: 975: uint8_t bytes;
  5629                           ;vscp_firmware.c: 977: if ( ( i % 7 ) == 6 ) {
  5630  0019D8  0E07               	movlw	7
  5631  0019DA  6E08               	movwf	?___lbmod,c
  5632  0019DC  0100               	movlb	0	; () banked
  5633  0019DE  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5634  0019E0  EC6C  F020         	call	___lbmod
  5635  0019E4  0A06               	xorlw	6
  5636  0019E6  E103               	bnz	l9407
  5637                           
  5638                           ;vscp_firmware.c: 978: bytes = 7;
  5639  0019E8  0E07               	movlw	7
  5640  0019EA  0100               	movlb	0	; () banked
  5641  0019EC  D009               	goto	L15
  5642  0019EE                     l9407:
  5643                           
  5644                           ;vscp_firmware.c: 980: else {
  5645                           ;vscp_firmware.c: 981: bytes = ( i % 7 ) + 1;
  5646  0019EE  0E07               	movlw	7
  5647  0019F0  6E08               	movwf	?___lbmod,c
  5648  0019F2  0100               	movlb	0	; () banked
  5649  0019F4  51EA               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5650  0019F6  EC6C  F020         	call	___lbmod
  5651  0019FA  0100               	movlb	0	; () banked
  5652  0019FC  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5653  0019FE  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5654  001A00                     L15:
  5655  001A00  6FDE               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;vscp_firmware.c: 982: }
  5659                           ;vscp_firmware.c: 984: vscp_omsg.flags = 0x80 + bytes + 1;
  5660  001A02  51DE               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5661  001A04  0F81               	addlw	129
  5662  001A06  6FA4               	movwf	_vscp_omsg& (0+255),b
  5663                           
  5664                           ; BSR set to: 0
  5665                           ;vscp_firmware.c: 985: vscp_omsg.priority = 0x03;
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;vscp_firmware.c: 986: vscp_omsg.vscp_class = 0;
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;vscp_firmware.c: 987: vscp_omsg.vscp_type = 26;
  5672  001A08  D9AF               	call	PL72	;call to abstracted procedure
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;vscp_firmware.c: 988: vscp_omsg.data[ 0 ] = pos;
  5676  001A0A  C0DD  F0A9         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5677                           
  5678                           ; BSR set to: 0
  5679                           ;vscp_firmware.c: 991: vscp_sendEvent();
  5680  001A0E  EC93  F020         	call	_vscp_sendEvent	;wreg free
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;vscp_firmware.c: 992: pos++;
  5684  001A12  2BDD               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5685  001A14                     l9423:
  5686                           
  5687                           ; BSR set to: 0
  5688  001A14  2BEA               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5689  001A16                     l9425:
  5690                           
  5691                           ; BSR set to: 0
  5692  001A16  51DF               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5693  001A18  5DEA               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5694  001A1A  B0D8               	btfsc	status,0,c
  5695  001A1C  0012               	return	
  5696  001A1E  D7B9               	goto	l9397
  5697  001A20                     l9427:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;vscp_firmware.c: 1000: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5701  001A20  5191               	movf	_vscp_nickname& (0+255),w,b
  5702  001A22  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5703  001A26  62DF               	cpfseq	indf2,c
  5704  001A28  0012               	return	
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;vscp_firmware.c: 1001: uint8_t i;
  5708                           ;vscp_firmware.c: 1002: uint8_t pos = vscp_imsg.data[ 1 ];
  5709  001A2A  C09D  F0E0         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1233
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;vscp_firmware.c: 1003: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5713  001A2E  5196               	movf	_vscp_imsg& (0+255),w,b
  5714  001A30  0FFE               	addlw	254
  5715  001A32  0B07               	andlw	7
  5716  001A34  6FE1               	movwf	vscp_handleProtocolEvent@len_1234& (0+255),b
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;vscp_firmware.c: 1005: for (i = 0; i < len; i++) {
  5720  001A36  6BE7               	clrf	vscp_handleProtocolEvent@i_1232& (0+255),b
  5721  001A38  D016               	goto	l9441
  5722  001A3A                     l9435:
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;vscp_firmware.c: 1007: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5726  001A3A  51E7               	movf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5727  001A3C  0F9E               	addlw	low (_vscp_imsg+8)
  5728  001A3E  6ED9               	movwf	fsr2l,c
  5729  001A40  6ADA               	clrf	fsr2h,c
  5730  001A42  50DF               	movf	indf2,w,c
  5731  001A44  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  5732  001A46  51E0               	movf	vscp_handleProtocolEvent@pos_1233& (0+255),w,b
  5733  001A48  25E7               	addwf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5734  001A4A  EC2D  F021         	call	_vscp_writeRegister
  5735                           
  5736                           ;vscp_firmware.c: 1008: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5737  001A4E  0100               	movlb	0	; () banked
  5738  001A50  51E7               	movf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5739  001A52  0FAA               	addlw	low (_vscp_omsg+6)
  5740  001A54  6ED9               	movwf	fsr2l,c
  5741  001A56  6ADA               	clrf	fsr2h,c
  5742  001A58  51E0               	movf	vscp_handleProtocolEvent@pos_1233& (0+255),w,b
  5743  001A5A  25E7               	addwf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5744  001A5C  EC8D  F021         	call	_vscp_readRegister
  5745  001A60  6EDF               	movwf	indf2,c
  5746  001A62  0100               	movlb	0	; () banked
  5747  001A64  2BE7               	incf	vscp_handleProtocolEvent@i_1232& (0+255),f,b
  5748  001A66                     l9441:
  5749                           
  5750                           ; BSR set to: 0
  5751  001A66  51E1               	movf	vscp_handleProtocolEvent@len_1234& (0+255),w,b
  5752  001A68  5DE7               	subwf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5753  001A6A  E3E7               	bnc	l9435
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;vscp_firmware.c: 1009: }
  5757                           ;vscp_firmware.c: 1011: vscp_omsg.priority = 0x03;
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;vscp_firmware.c: 1012: vscp_omsg.vscp_class = 0;
  5761                           
  5762                           ;vscp_firmware.c: 1013: vscp_omsg.vscp_type = 26;
  5763  001A6C  D97D               	call	PL72	;call to abstracted procedure
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;vscp_firmware.c: 1014: vscp_omsg.data[ 0 ] = 0;
  5767  001A6E  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;vscp_firmware.c: 1015: vscp_omsg.flags = 0x80 + len + 1;
  5771  001A70  51E1               	movf	vscp_handleProtocolEvent@len_1234& (0+255),w,b
  5772  001A72  0F81               	addlw	129
  5773  001A74  6FA4               	movwf	_vscp_omsg& (0+255),b
  5774  001A76  EF93  F020         	goto	_vscp_sendEvent
  5775  001A7A                     l9453:
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;vscp_firmware.c: 1025: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5779  001A7A  5191               	movf	_vscp_nickname& (0+255),w,b
  5780  001A7C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5781  001A80  62DF               	cpfseq	indf2,c
  5782  001A82  0012               	return	
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5786                           ;vscp_firmware.c: 1028: vscp_imsg.data[ 1 ],
  5787                           ;vscp_firmware.c: 1029: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5788  001A84  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5789  001A86  ECA6  F01D         	call	_vscp_readAppReg
  5790  001A8A  0100               	movlb	0	; () banked
  5791  001A8C  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5792  001A8E  29D1               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5793  001A90  6E51               	movwf	?_vscp_writeAppReg,c
  5794  001A92  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5795  001A94  EC91  F007         	call	_vscp_writeAppReg
  5796  001A98  D699               	goto	L14
  5797  001A9A                     l9469:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;vscp_firmware.c: 1045: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5801  001A9A  5191               	movf	_vscp_nickname& (0+255),w,b
  5802  001A9C  EE20  F09C         	lfsr	2,_vscp_imsg+6
  5803  001AA0  62DF               	cpfseq	indf2,c
  5804  001AA2  0012               	return	
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;vscp_firmware.c: 1047: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5808                           ;vscp_firmware.c: 1048: vscp_imsg.data[ 1 ],
  5809                           ;vscp_firmware.c: 1049: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5810  001AA4  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5811  001AA6  ECA6  F01D         	call	_vscp_readAppReg
  5812  001AAA  0100               	movlb	0	; () banked
  5813  001AAC  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5814  001AAE  05D1               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5815  001AB0  6E51               	movwf	?_vscp_writeAppReg,c
  5816  001AB2  519D               	movf	(_vscp_imsg+7)& (0+255),w,b
  5817  001AB4  EC91  F007         	call	_vscp_writeAppReg
  5818  001AB8  D689               	goto	L14
  5819  001ABA                     l9485:
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;vscp_firmware.c: 1065: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5823                           ;vscp_firmware.c: 1066: (0xff == vscp_imsg.data[ 0 ])) {
  5824  001ABA  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
  5825  001ABC  1991               	xorwf	_vscp_nickname& (0+255),w,b
  5826  001ABE  E003               	bz	l1240
  5827                           
  5828                           ; BSR set to: 0
  5829  001AC0  299C               	incf	(_vscp_imsg+6)& (0+255),w,b
  5830  001AC2  A4D8               	btfss	status,2,c
  5831  001AC4  0012               	return	
  5832  001AC6                     l1240:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;vscp_firmware.c: 1068: uint8_t i, j, k = 0;
  5836  001AC6  6BE5               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;vscp_firmware.c: 1072: vscp_omsg.priority = 0x03;
  5840  001AC8  0E03               	movlw	3
  5841  001ACA  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  5842                           
  5843                           ;vscp_firmware.c: 1073: vscp_omsg.flags = 0x80 + 8;
  5844  001ACC  0E88               	movlw	136
  5845  001ACE  6FA4               	movwf	_vscp_omsg& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1074: vscp_omsg.vscp_class = 0;
  5849  001AD0  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  5850  001AD2  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  5851                           
  5852                           ;vscp_firmware.c: 1075: vscp_omsg.vscp_type = 32;
  5853  001AD4  0E20               	movlw	32
  5854  001AD6  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;vscp_firmware.c: 1077: for (i = 0; i < 3; i++)
  5858  001AD8  6BE9               	clrf	vscp_handleProtocolEvent@i_1235& (0+255),b
  5859  001ADA                     l1241:
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;vscp_firmware.c: 1078: {
  5863                           ;vscp_firmware.c: 1079: vscp_omsg.data[0] = i;
  5864                           
  5865                           ; BSR set to: 0
  5866                           ;vscp_firmware.c: 1081: for (j = 1; j < 8; j++) {
  5867  001ADA  D94D               	call	PL78	;call to abstracted procedure
  5868  001ADC                     l9505:
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;vscp_firmware.c: 1082: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5872  001ADC  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5873  001ADE  0FA9               	addlw	low (_vscp_omsg+5)
  5874  001AE0  6ED9               	movwf	fsr2l,c
  5875  001AE2  6ADA               	clrf	fsr2h,c
  5876  001AE4  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5877  001AE6  080F               	sublw	15
  5878  001AE8  ECAC  F021         	call	_vscp_getGUID
  5879  001AEC  6EDF               	movwf	indf2,c
  5880  001AEE  0100               	movlb	0	; () banked
  5881  001AF0  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;vscp_firmware.c: 1083: if (k > 16)
  5885  001AF2  0E10               	movlw	16
  5886  001AF4  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5887  001AF6  D001               	goto	l9513
  5888  001AF8  D004               	goto	l9517
  5889  001AFA                     l9513:
  5890                           
  5891                           ; BSR set to: 0
  5892  001AFA  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5893                           
  5894                           ; BSR set to: 0
  5895  001AFC  0E07               	movlw	7
  5896  001AFE  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5897  001B00  D7ED               	goto	l9505
  5898  001B02                     l9517:
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;vscp_firmware.c: 1085: }
  5902                           ;vscp_firmware.c: 1087: if (k > 16)
  5903  001B02  0E10               	movlw	16
  5904  001B04  65E5               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5905  001B06  D001               	goto	l9521
  5906  001B08  D006               	goto	l1242
  5907  001B0A                     l9521:
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;vscp_firmware.c: 1090: vscp_sendEvent();
  5911  001B0A  EC93  F020         	call	_vscp_sendEvent	;wreg free
  5912                           
  5913                           ; BSR set to: 0
  5914  001B0E  2BE9               	incf	vscp_handleProtocolEvent@i_1235& (0+255),f,b
  5915                           
  5916                           ; BSR set to: 0
  5917  001B10  0E02               	movlw	2
  5918  001B12  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1235& (0+255),b
  5919  001B14  D7E2               	goto	l1241
  5920  001B16                     l1242:
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;vscp_firmware.c: 1091: }
  5924                           ;vscp_firmware.c: 1093: for (j = 0; j < 5; j++)
  5925  001B16  6BEB               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5926  001B18                     l9531:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;vscp_firmware.c: 1094: {
  5930                           ;vscp_firmware.c: 1095: if (vscp_getMDF_URL(j) > 0)
  5931  001B18  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5932  001B1A  EC5A  F021         	call	_vscp_getMDF_URL
  5933  001B1E  0900               	iorlw	0
  5934  001B20  E008               	bz	l9535
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;vscp_firmware.c: 1096: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5938  001B22  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5939  001B24  0FAC               	addlw	low (_vscp_omsg+8)
  5940  001B26  6ED9               	movwf	fsr2l,c
  5941  001B28  6ADA               	clrf	fsr2h,c
  5942  001B2A  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5943  001B2C  EC5A  F021         	call	_vscp_getMDF_URL
  5944  001B30  D005               	goto	L16
  5945  001B32                     l9535:
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;vscp_firmware.c: 1097: else
  5949                           ;vscp_firmware.c: 1098: vscp_omsg.data[3 + j] = 0;
  5950  001B32  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5951  001B34  0FAC               	addlw	low (_vscp_omsg+8)
  5952  001B36  6ED9               	movwf	fsr2l,c
  5953  001B38  6ADA               	clrf	fsr2h,c
  5954  001B3A  0E00               	movlw	0
  5955  001B3C                     L16:
  5956  001B3C  6EDF               	movwf	indf2,c
  5957                           
  5958                           ; BSR set to: 0
  5959  001B3E  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5960                           
  5961                           ; BSR set to: 0
  5962  001B40  0E04               	movlw	4
  5963  001B42  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5964  001B44  D7E9               	goto	l9531
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;vscp_firmware.c: 1099: }
  5968                           ;vscp_firmware.c: 1101: vscp_sendEvent();
  5969  001B46  EC93  F020         	call	_vscp_sendEvent	;wreg free
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;vscp_firmware.c: 1103: k = 5;
  5973  001B4A  0E05               	movlw	5
  5974  001B4C  6FE5               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;vscp_firmware.c: 1104: for (i = 3; i < 7; i++)
  5978  001B4E  0E03               	movlw	3
  5979  001B50  6FE9               	movwf	vscp_handleProtocolEvent@i_1235& (0+255),b
  5980  001B52                     l1251:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;vscp_firmware.c: 1105: {
  5984                           ;vscp_firmware.c: 1106: vscp_omsg.data[0] = i;
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;vscp_firmware.c: 1108: for (j = 1; j < 8; j++) {
  5988  001B52  D911               	call	PL78	;call to abstracted procedure
  5989  001B54                     l9557:
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;vscp_firmware.c: 1109: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  5993  001B54  51EB               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5994  001B56  0FA9               	addlw	low (_vscp_omsg+5)
  5995  001B58  6ED9               	movwf	fsr2l,c
  5996  001B5A  6ADA               	clrf	fsr2h,c
  5997  001B5C  51E5               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5998  001B5E  EC5A  F021         	call	_vscp_getMDF_URL
  5999  001B62  6EDF               	movwf	indf2,c
  6000                           
  6001                           ; BSR set to: 0
  6002  001B64  2BE5               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6003                           
  6004                           ; BSR set to: 0
  6005  001B66  2BEB               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6006                           
  6007                           ; BSR set to: 0
  6008  001B68  0E07               	movlw	7
  6009  001B6A  65EB               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6010  001B6C  D7F3               	goto	l9557
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1110: }
  6014                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  6015  001B6E  EC93  F020         	call	_vscp_sendEvent	;wreg free
  6016                           
  6017                           ; BSR set to: 0
  6018  001B72  2BE9               	incf	vscp_handleProtocolEvent@i_1235& (0+255),f,b
  6019                           
  6020                           ; BSR set to: 0
  6021  001B74  0E06               	movlw	6
  6022  001B76  65E9               	cpfsgt	vscp_handleProtocolEvent@i_1235& (0+255),b
  6023  001B78  D7EC               	goto	l1251
  6024  001B7A  0C06               	retlw	6
  6025  001B7C                     l9571:
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;vscp_firmware.c: 1120: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6029  001B7C  5191               	movf	_vscp_nickname& (0+255),w,b
  6030  001B7E  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6031  001B82  62DF               	cpfseq	indf2,c
  6032  001B84  0012               	return	
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;vscp_firmware.c: 1122: vscp_omsg.priority = 0x03;
  6036  001B86  0E03               	movlw	3
  6037  001B88  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6038                           
  6039                           ;vscp_firmware.c: 1123: vscp_omsg.flags = 0x80 + 7;
  6040  001B8A  0E87               	movlw	135
  6041  001B8C  6FA4               	movwf	_vscp_omsg& (0+255),b
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;vscp_firmware.c: 1124: vscp_omsg.vscp_class = 0;
  6045  001B8E  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6046  001B90  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6047                           
  6048                           ;vscp_firmware.c: 1125: vscp_omsg.vscp_type = 34;
  6049  001B92  0E22               	movlw	34
  6050  001B94  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;vscp_firmware.c: 1127: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6054  001B96  0EA9               	movlw	(_vscp_omsg+5)& (0+255)
  6055  001B98  ECFE  F020         	call	_vscp_getMatrixInfo
  6056  001B9C  EF93  F020         	goto	_vscp_sendEvent
  6057  001BA0                     l9581:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;vscp_firmware.c: 1143: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6061  001BA0  5191               	movf	_vscp_nickname& (0+255),w,b
  6062  001BA2  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6063  001BA6  62DF               	cpfseq	indf2,c
  6064  001BA8  0012               	return	
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;vscp_firmware.c: 1145: uint16_t page_save;
  6068                           ;vscp_firmware.c: 1146: uint8_t byte = 0, bytes = 0;
  6069  001BAA  6BE8               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;vscp_firmware.c: 1147: uint8_t bytes_this_time, cb;
  6073                           ;vscp_firmware.c: 1151: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6074  001BAC  C096  F0D1         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6075  001BB0  0E0F               	movlw	15
  6076  001BB2  17D1               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6077  001BB4  0E04               	movlw	4
  6078  001BB6  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6079  001BB8  E304               	bnc	l9589
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;vscp_firmware.c: 1154: bytes = vscp_imsg.data[4];
  6083  001BBA  C0A0  F0E6         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1240
  6084                           
  6085                           ;vscp_firmware.c: 1156: if ( 0 == bytes ) {
  6086  001BBE  67E6               	tstfsz	vscp_handleProtocolEvent@bytes_1240& (0+255),b
  6087  001BC0  D002               	goto	l9593
  6088  001BC2                     l9589:
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;vscp_firmware.c: 1157: bytes = 1;
  6092  001BC2  0E01               	movlw	1
  6093  001BC4  6FE6               	movwf	vscp_handleProtocolEvent@bytes_1240& (0+255),b
  6094  001BC6                     l9593:
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;vscp_firmware.c: 1162: }
  6098                           ;vscp_firmware.c: 1165: page_save = vscp_page_select;
  6099  001BC6  C052  F0D8         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6100  001BCA  C053  F0D9         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;vscp_firmware.c: 1170: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6104  001BCE  D8B6               	call	PL28	;call to abstracted procedure
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;vscp_firmware.c: 1173: vscp_omsg.priority = 0x03;
  6108  001BD0  0E03               	movlw	3
  6109  001BD2  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;vscp_firmware.c: 1174: vscp_omsg.vscp_class = 0;
  6113                           
  6114                           ; BSR set to: 0
  6115                           ;vscp_firmware.c: 1175: vscp_omsg.vscp_type = 39;
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;vscp_firmware.c: 1176: vscp_omsg.data[0] = 0;
  6119                           
  6120                           ; BSR set to: 0
  6121                           ;vscp_firmware.c: 1177: vscp_omsg.data[1] = vscp_imsg.data[1];
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;vscp_firmware.c: 1178: vscp_omsg.data[2] = vscp_imsg.data[2];
  6125  001BD4  D8BF               	call	PL38	;call to abstracted procedure
  6126  001BD6                     l9609:
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;vscp_firmware.c: 1182: if ( ( bytes - byte ) >= 4 ) {
  6130  001BD6  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6131  001BD8  C0E6  F0D1         	movff	vscp_handleProtocolEvent@bytes_1240,??_vscp_handleProtocolEvent
  6132  001BDC  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6133  001BDE  5FD1               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6134  001BE0  0E00               	movlw	0
  6135  001BE2  5BD2               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6136  001BE4  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6137  001BE6  0A80               	xorlw	128
  6138  001BE8  0F80               	addlw	-128
  6139  001BEA  0E04               	movlw	4
  6140  001BEC  B4D8               	btfsc	status,2,c
  6141  001BEE  5DD1               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6142  001BF0  E302               	bnc	l9613
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;vscp_firmware.c: 1183: bytes_this_time = 4;
  6146  001BF2  0E04               	movlw	4
  6147  001BF4  D002               	goto	L17
  6148  001BF6                     l9613:
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;vscp_firmware.c: 1185: else {
  6152                           ;vscp_firmware.c: 1186: bytes_this_time = (bytes - byte);
  6153  001BF6  51E8               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6154  001BF8  5DE6               	subwf	vscp_handleProtocolEvent@bytes_1240& (0+255),w,b
  6155  001BFA                     L17:
  6156  001BFA  6FE2               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;vscp_firmware.c: 1187: }
  6160                           ;vscp_firmware.c: 1190: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6161  001BFC  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6162  001BFE  0F84               	addlw	132
  6163  001C00  6FA4               	movwf	_vscp_omsg& (0+255),b
  6164                           
  6165                           ;vscp_firmware.c: 1191: vscp_omsg.data[3] =
  6166                           ;vscp_firmware.c: 1192: vscp_imsg.data[3] + byte;
  6167  001C02  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6168  001C04  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6169  001C06  6FAC               	movwf	(_vscp_omsg+8)& (0+255),b
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;vscp_firmware.c: 1195: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6173  001C08  6BE3               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6174  001C0A  D00C               	goto	l9621
  6175  001C0C                     l9617:
  6176                           
  6177                           ; BSR set to: 0
  6178                           ;vscp_firmware.c: 1196: vscp_omsg.data[ (4 + cb) ] =
  6179                           ;vscp_firmware.c: 1197: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6180  001C0C  51E3               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6181  001C0E  0FAD               	addlw	low (_vscp_omsg+9)
  6182  001C10  6ED9               	movwf	fsr2l,c
  6183  001C12  6ADA               	clrf	fsr2h,c
  6184  001C14  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6185  001C16  25E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6186  001C18  25E3               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6187  001C1A  EC8D  F021         	call	_vscp_readRegister
  6188  001C1E  6EDF               	movwf	indf2,c
  6189  001C20  0100               	movlb	0	; () banked
  6190  001C22  2BE3               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6191  001C24                     l9621:
  6192                           
  6193                           ; BSR set to: 0
  6194  001C24  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6195  001C26  5DE3               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6196  001C28  E3F1               	bnc	l9617
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;vscp_firmware.c: 1198: }
  6200                           ;vscp_firmware.c: 1201: vscp_sendEvent();
  6201  001C2A  EC93  F020         	call	_vscp_sendEvent	;wreg free
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;vscp_firmware.c: 1204: byte += bytes_this_time;
  6205  001C2E  51E2               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6206  001C30  27E8               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;vscp_firmware.c: 1207: vscp_omsg.data[0] += 1;
  6210  001C32  2BA9               	incf	(_vscp_omsg+5)& (0+255),f,b
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;vscp_firmware.c: 1209: } while (byte < bytes);
  6214  001C34  51E6               	movf	vscp_handleProtocolEvent@bytes_1240& (0+255),w,b
  6215  001C36  5DE8               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6216  001C38  E3CE               	bnc	l9609
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;vscp_firmware.c: 1212: vscp_page_select = page_save;
  6220  001C3A  C0D8  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6221  001C3E  C0D9  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6222  001C42  0012               	return	
  6223  001C44                     l9631:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;vscp_firmware.c: 1219: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6227  001C44  5191               	movf	_vscp_nickname& (0+255),w,b
  6228  001C46  EE20  F09C         	lfsr	2,_vscp_imsg+6
  6229  001C4A  62DF               	cpfseq	indf2,c
  6230  001C4C  0012               	return	
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;vscp_firmware.c: 1221: uint8_t i;
  6234                           ;vscp_firmware.c: 1222: uint16_t page_save;
  6235                           ;vscp_firmware.c: 1225: page_save = vscp_page_select;
  6236  001C4E  C052  F0DA         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1244
  6237  001C52  C053  F0DB         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1244+1
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;vscp_firmware.c: 1229: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6241  001C56  D872               	call	PL28	;call to abstracted procedure
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;vscp_firmware.c: 1231: for (i = vscp_imsg.data[ 3 ];
  6245  001C58  C09F  F0E4         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1243
  6246                           
  6247                           ;vscp_firmware.c: 1234: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6248                           ;vscp_firmware.c: 1235: i++) {
  6249  001C5C  D014               	goto	l9643
  6250  001C5E                     l9639:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;vscp_firmware.c: 1236: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6254                           ;vscp_firmware.c: 1237: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6255  001C5E  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6256  001C60  08A0               	sublw	low (_vscp_imsg+10)
  6257  001C62  25E4               	addwf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6258  001C64  6ED9               	movwf	fsr2l,c
  6259  001C66  6ADA               	clrf	fsr2h,c
  6260  001C68  50DF               	movf	indf2,w,c
  6261  001C6A  6FCF               	movwf	?_vscp_writeRegister& (0+255),b
  6262  001C6C  51E4               	movf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6263  001C6E  EC2D  F021         	call	_vscp_writeRegister
  6264  001C72  0100               	movlb	0	; () banked
  6265  001C74  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6266  001C76  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6267  001C78  08AD               	sublw	low (_vscp_omsg+9)
  6268  001C7A  25E4               	addwf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6269  001C7C  6ED9               	movwf	fsr2l,c
  6270  001C7E  6ADA               	clrf	fsr2h,c
  6271  001C80  C0D1  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6272                           
  6273                           ; BSR set to: 0
  6274  001C84  2BE4               	incf	vscp_handleProtocolEvent@i_1243& (0+255),f,b
  6275  001C86                     l9643:
  6276                           
  6277                           ; BSR set to: 0
  6278  001C86  5196               	movf	_vscp_imsg& (0+255),w,b
  6279  001C88  0B0F               	andlw	15
  6280  001C8A  6FD1               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6281  001C8C  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6282  001C8E  519F               	movf	(_vscp_imsg+9)& (0+255),w,b
  6283  001C90  27D1               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6284  001C92  0E00               	movlw	0
  6285  001C94  23D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6286  001C96  0EFC               	movlw	252
  6287  001C98  25D1               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6288  001C9A  6FD3               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6289  001C9C  0EFF               	movlw	255
  6290  001C9E  21D2               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6291  001CA0  6FD4               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6292  001CA2  51E4               	movf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6293  001CA4  6FD5               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6294  001CA6  6BD6               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6295  001CA8  51D6               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6296  001CAA  0A80               	xorlw	128
  6297  001CAC  6FD7               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6298  001CAE  51D3               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6299  001CB0  5DD5               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6300  001CB2  51D4               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6301  001CB4  0A80               	xorlw	128
  6302  001CB6  59D7               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6303  001CB8  E3D2               	bnc	l9639
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;vscp_firmware.c: 1238: }
  6307                           ;vscp_firmware.c: 1241: vscp_page_select = page_save;
  6308  001CBA  C0DA  F052         	movff	vscp_handleProtocolEvent@page_save_1244,_vscp_page_select
  6309  001CBE  C0DB  F053         	movff	vscp_handleProtocolEvent@page_save_1244+1,_vscp_page_select+1
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;vscp_firmware.c: 1243: vscp_omsg.priority = 0x03;
  6313  001CC2  0E03               	movlw	3
  6314  001CC4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;vscp_firmware.c: 1244: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6318  001CC6  5196               	movf	_vscp_imsg& (0+255),w,b
  6319  001CC8  0B0F               	andlw	15
  6320  001CCA  0F80               	addlw	128
  6321  001CCC  6FA4               	movwf	_vscp_omsg& (0+255),b
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;vscp_firmware.c: 1245: vscp_omsg.vscp_class = 0;
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;vscp_firmware.c: 1246: vscp_omsg.vscp_type = 39;
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;vscp_firmware.c: 1247: vscp_omsg.data[0] = 0;
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;vscp_firmware.c: 1248: vscp_omsg.data[1] = vscp_imsg.data[1];
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;vscp_firmware.c: 1249: vscp_omsg.data[2] = vscp_imsg.data[2];
  6337  001CCE  D842               	call	PL38	;call to abstracted procedure
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;vscp_firmware.c: 1250: vscp_omsg.data[3] = vscp_imsg.data[3];
  6341  001CD0  C09F  F0AC         	movff	_vscp_imsg+9,_vscp_omsg+8
  6342  001CD4  EF93  F020         	goto	_vscp_sendEvent
  6343  001CD8                     l9665:
  6344                           
  6345                           ; BSR set to: 0
  6346  001CD8  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
  6347                           
  6348                           ; Switch size 1, requested type "space"
  6349                           ; Number of cases is 16, Range of values is 1 to 38
  6350                           ; switch strategies available:
  6351                           ; Name         Instructions Cycles
  6352                           ; simple_byte           49    25 (average)
  6353                           ;	Chosen strategy is simple_byte
  6354  001CDA  0A01               	xorlw	1	; case 1
  6355  001CDC  E101 D55D          	bz	l9253
  6356  001CE0  0A03               	xorlw	3	; case 2
  6357  001CE2  E101 D55C          	bz	l9255
  6358  001CE6  0A04               	xorlw	4	; case 6
  6359  001CE8  E101 D55B          	bz	l9257
  6360  001CEC  0A0E               	xorlw	14	; case 8
  6361  001CEE  E101 D55A          	bz	l9259
  6362  001CF2  0A01               	xorlw	1	; case 9
  6363  001CF4  E101 D559          	bz	l9261
  6364  001CF8  0A02               	xorlw	2	; case 11
  6365  001CFA  E101 D578          	bz	l9295
  6366  001CFE  0A07               	xorlw	7	; case 12
  6367  001D00  E101 D58E          	bz	l9329
  6368  001D04  0A1B               	xorlw	27	; case 23
  6369  001D06  E101 D622          	bz	l9387
  6370  001D0A  0A0F               	xorlw	15	; case 24
  6371  001D0C  E101 D635          	bz	l9393
  6372  001D10  0A01               	xorlw	1	; case 25
  6373  001D12  E101 D685          	bz	l9427
  6374  001D16  0A04               	xorlw	4	; case 29
  6375  001D18  E101 D6AF          	bz	l9453
  6376  001D1C  0A03               	xorlw	3	; case 30
  6377  001D1E  E101 D6BC          	bz	l9469
  6378  001D22  0A01               	xorlw	1	; case 31
  6379  001D24  E101 D6C9          	bz	l9485
  6380  001D28  0A3E               	xorlw	62	; case 33
  6381  001D2A  E101 D727          	bz	l9571
  6382  001D2E  0A04               	xorlw	4	; case 37
  6383  001D30  E101 D736          	bz	l9581
  6384  001D34  0A03               	xorlw	3	; case 38
  6385  001D36  A4D8               	btfss	status,2,c
  6386  001D38  0012               	return	
  6387  001D3A  D784               	goto	l9631
  6388  001D3C                     __end_of_vscp_handleProtocolEvent:
  6389                           	opt stack 0
  6390  001D3C                     PL28:
  6391                           	opt stack 21
  6392  001D3C  519E               	movf	(_vscp_imsg+8)& (0+255),w,b
  6393  001D3E  C09D  F0D1         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6394  001D42  6BD2               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6395  001D44  C0D1  F0D2         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6396  001D48  6BD1               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6397  001D4A  11D1               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6398  001D4C  6E52               	movwf	_vscp_page_select,c
  6399  001D4E  51D2               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6400  001D50  6E53               	movwf	_vscp_page_select+1,c
  6401  001D52  0012               	return	
  6402  001D54                     __end_ofPL28:
  6403                           	opt stack 0
  6404  001D54                     PL38:
  6405                           	opt stack 21
  6406  001D54  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6407  001D56  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6408  001D58  0E27               	movlw	39
  6409  001D5A  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6410  001D5C  6BA9               	clrf	(_vscp_omsg+5)& (0+255),b
  6411  001D5E  C09D  F0AA         	movff	_vscp_imsg+7,_vscp_omsg+6
  6412  001D62  C09E  F0AB         	movff	_vscp_imsg+8,_vscp_omsg+7
  6413  001D66  0012               	return	
  6414  001D68                     __end_ofPL38:
  6415                           	opt stack 0
  6416  001D68                     PL72:
  6417                           	opt stack 21
  6418  001D68  0E03               	movlw	3
  6419  001D6A  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
  6420  001D6C  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
  6421  001D6E  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
  6422  001D70  0E1A               	movlw	26
  6423  001D72  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
  6424  001D74  0C1A               	retlw	26
  6425  001D76                     __end_ofPL72:
  6426                           	opt stack 0
  6427  001D76                     PL78:
  6428                           	opt stack 21
  6429  001D76  C0E9  F0A9         	movff	vscp_handleProtocolEvent@i_1235,_vscp_omsg+5
  6430  001D7A  0E01               	movlw	1
  6431  001D7C  6FEB               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6432  001D7E  0C01               	retlw	1
  6433  001D80                     __end_ofPL78:
  6434                           	opt stack 0
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           postinc0	equ	0xFEE
  6443                           wreg	equ	0xFE8
  6444                           indf1	equ	0xFE7
  6445                           fsr1h	equ	0xFE2
  6446                           fsr1l	equ	0xFE1
  6447                           indf2	equ	0xFDF
  6448                           postinc2	equ	0xFDE
  6449                           postdec2	equ	0xFDD
  6450                           plusw2	equ	0xFDB
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function ___lbmod *****************
  6456 ;; Defined at:
  6457 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  dividend        1    wreg     unsigned char 
  6460 ;;  divisor         1    7[COMRAM] unsigned char 
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;  dividend        1    8[COMRAM] unsigned char 
  6463 ;;  rem             1   10[COMRAM] unsigned char 
  6464 ;;  counter         1    9[COMRAM] unsigned char 
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      unsigned char 
  6467 ;; Registers used:
  6468 ;;		wreg, status,2, status,0
  6469 ;; Tracked objects:
  6470 ;;		On entry : F/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6474 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6475 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6477 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6478 ;;Total ram usage:        4 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    2
  6481 ;; This function calls:
  6482 ;;		Nothing
  6483 ;; This function is called by:
  6484 ;;		_vscp_handleProtocolEvent
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           	psect	text16
  6489  0040D8                     __ptext16:
  6490                           	opt stack 0
  6491  0040D8                     ___lbmod:
  6492                           	opt stack 27
  6493                           
  6494                           ;incstack = 0
  6495                           ;incstack = 0
  6496                           ;___lbmod@dividend stored from wreg
  6497  0040D8  CFE8 F009          	movff	wreg,___lbmod@dividend
  6498                           
  6499                           ; BSR set to: 0
  6500  0040DC  0E08               	movlw	8
  6501  0040DE  6E0A               	movwf	___lbmod@counter,c
  6502                           
  6503                           ; BSR set to: 0
  6504  0040E0  6A0B               	clrf	___lbmod@rem,c
  6505  0040E2                     l7045:
  6506  0040E2  90D8               	bcf	status,0,c
  6507  0040E4  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6508  0040E6  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6509  0040E8  6E0B               	movwf	___lbmod@rem,c
  6510  0040EA  90D8               	bcf	status,0,c
  6511  0040EC  3609               	rlcf	___lbmod@dividend,f,c
  6512  0040EE  5008               	movf	___lbmod@divisor,w,c
  6513  0040F0  5C0B               	subwf	___lbmod@rem,w,c
  6514  0040F2  E302               	bnc	l7053
  6515  0040F4  5008               	movf	___lbmod@divisor,w,c
  6516  0040F6  5E0B               	subwf	___lbmod@rem,f,c
  6517  0040F8                     l7053:
  6518  0040F8  2E0A               	decfsz	___lbmod@counter,f,c
  6519  0040FA  D7F3               	goto	l7045
  6520  0040FC  500B               	movf	___lbmod@rem,w,c
  6521  0040FE  0012               	return	
  6522  004100                     __end_of___lbmod:
  6523                           	opt stack 0
  6524                           tblptru	equ	0xFF8
  6525                           tblptrh	equ	0xFF7
  6526                           tblptrl	equ	0xFF6
  6527                           tablat	equ	0xFF5
  6528                           prodh	equ	0xFF4
  6529                           prodl	equ	0xFF3
  6530                           intcon	equ	0xFF2
  6531                           postinc0	equ	0xFEE
  6532                           wreg	equ	0xFE8
  6533                           indf1	equ	0xFE7
  6534                           fsr1h	equ	0xFE2
  6535                           fsr1l	equ	0xFE1
  6536                           indf2	equ	0xFDF
  6537                           postinc2	equ	0xFDE
  6538                           postdec2	equ	0xFDD
  6539                           plusw2	equ	0xFDB
  6540                           fsr2h	equ	0xFDA
  6541                           fsr2l	equ	0xFD9
  6542                           status	equ	0xFD8
  6543                           
  6544 ;; *************** function _vscp_writeRegister *****************
  6545 ;; Defined at:
  6546 ;;		line 692 in file "../../vscp_firmware/common/vscp_firmware.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  reg             1    wreg     unsigned char 
  6549 ;;  value           1   30[BANK0 ] unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  reg             1   31[BANK0 ] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      unsigned char 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : F/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6561 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6564 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6565 ;;Total ram usage:        2 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    8
  6568 ;; This function calls:
  6569 ;;		_vscp_writeAppReg
  6570 ;;		_vscp_writeStdReg
  6571 ;; This function is called by:
  6572 ;;		_vscp_handleProtocolEvent
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text17
  6577  00425A                     __ptext17:
  6578                           	opt stack 0
  6579  00425A                     _vscp_writeRegister:
  6580                           	opt stack 21
  6581                           
  6582                           ;incstack = 0
  6583                           ;incstack = 0
  6584                           ;vscp_writeRegister@reg stored from wreg
  6585  00425A  CFE8 F0D0          	movff	wreg,vscp_writeRegister@reg
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;vscp_firmware.c: 693: if (reg >= 0x80) {
  6589  00425E  0E7F               	movlw	127
  6590  004260  65D0               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6591  004262  D005               	goto	l10427
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;vscp_firmware.c: 694: return vscp_writeStdReg(reg, value);
  6595  004264  C0CF  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6596  004268  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6597  00426A  EF76  F01B         	goto	_vscp_writeStdReg
  6598  00426E                     l10427:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;vscp_firmware.c: 696: return vscp_writeAppReg(reg, value);
  6602  00426E  C0CF  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6603  004272  51D0               	movf	vscp_writeRegister@reg& (0+255),w,b
  6604  004274  EF91  F007         	goto	_vscp_writeAppReg
  6605  004278                     __end_of_vscp_writeRegister:
  6606                           	opt stack 0
  6607                           tblptru	equ	0xFF8
  6608                           tblptrh	equ	0xFF7
  6609                           tblptrl	equ	0xFF6
  6610                           tablat	equ	0xFF5
  6611                           prodh	equ	0xFF4
  6612                           prodl	equ	0xFF3
  6613                           intcon	equ	0xFF2
  6614                           postinc0	equ	0xFEE
  6615                           wreg	equ	0xFE8
  6616                           indf1	equ	0xFE7
  6617                           fsr1h	equ	0xFE2
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           plusw2	equ	0xFDB
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _vscp_writeStdReg *****************
  6628 ;; Defined at:
  6629 ;;		line 705 in file "../../vscp_firmware/common/vscp_firmware.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  reg             1    wreg     unsigned char 
  6632 ;;  value           1   14[COMRAM] unsigned char 
  6633 ;; Auto vars:     Size  Location     Type
  6634 ;;  reg             1   20[COMRAM] unsigned char 
  6635 ;;  rv              1   19[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      unsigned char 
  6638 ;; Registers used:
  6639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : F/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6645 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6647 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6648 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6649 ;;Total ram usage:        7 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    5
  6652 ;; This function calls:
  6653 ;;		_vscp_setGUID
  6654 ;;		_vscp_setManufacturerId
  6655 ;;		_vscp_getGUID
  6656 ;;		_vscp_getUserID
  6657 ;;		_vscp_setUserID
  6658 ;;		_vscp_getManufacturerId
  6659 ;;		_vscp_restoreDefaults
  6660 ;; This function is called by:
  6661 ;;		_vscp_writeRegister
  6662 ;;		_vscp_handleProtocolEvent
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text18
  6667  0036EC                     __ptext18:
  6668                           	opt stack 0
  6669  0036EC                     _vscp_writeStdReg:
  6670                           	opt stack 24
  6671                           
  6672                           ;incstack = 0
  6673                           ;incstack = 0
  6674                           ;vscp_writeStdReg@reg stored from wreg
  6675  0036EC  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;vscp_firmware.c: 706: uint8_t rv = ~value;
  6679  0036F0  1C0F               	comf	vscp_writeStdReg@value,w,c
  6680  0036F2  6E14               	movwf	vscp_writeStdReg@rv,c
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;vscp_firmware.c: 708: if ((reg > (0x82 + 1)) &&
  6684                           ;vscp_firmware.c: 709: (reg < 0x89)) {
  6685  0036F4  0E83               	movlw	131
  6686  0036F6  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6687  0036F8  D00E               	goto	l9089
  6688                           
  6689                           ; BSR set to: 0
  6690  0036FA  0E89               	movlw	137
  6691  0036FC  6015               	cpfslt	vscp_writeStdReg@reg,c
  6692  0036FE  D00B               	goto	l9089
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;vscp_firmware.c: 712: vscp_setUserID((reg - 0x84), value);
  6696  003700  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6697  003704  5015               	movf	vscp_writeStdReg@reg,w,c
  6698  003706  0F7C               	addlw	124
  6699  003708  EC75  F021         	call	_vscp_setUserID
  6700                           
  6701                           ;vscp_firmware.c: 713: rv = vscp_getUserID((reg - 0x84));
  6702  00370C  5015               	movf	vscp_writeStdReg@reg,w,c
  6703  00370E  0F7C               	addlw	124
  6704  003710  ECA2  F021         	call	_vscp_getUserID
  6705  003714  D069               	goto	L23
  6706  003716                     l9089:
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;vscp_firmware.c: 716: else if (0x92 == reg) {
  6710  003716  5015               	movf	vscp_writeStdReg@reg,w,c
  6711  003718  0A92               	xorlw	146
  6712  00371A  E10D               	bnz	l9095
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;vscp_firmware.c: 719: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6716  00371C  500F               	movf	vscp_writeStdReg@value,w,c
  6717  00371E  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6718  003720  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6719  003722  5052               	movf	_vscp_page_select,w,c
  6720  003724  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6721  003726  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6722  003728  1010               	iorwf	??_vscp_writeStdReg,w,c
  6723  00372A  6E52               	movwf	_vscp_page_select,c
  6724  00372C  5011               	movf	??_vscp_writeStdReg+1,w,c
  6725  00372E  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6726  003730  6E53               	movwf	_vscp_page_select+1,c
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;vscp_firmware.c: 720: rv = (vscp_page_select >> 8) & 0xff;
  6730  003732  5053               	movf	_vscp_page_select+1,w,c
  6731  003734  D059               	goto	L23
  6732  003736                     l9095:
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;vscp_firmware.c: 722: else if (0x93 == reg) {
  6736  003736  5015               	movf	vscp_writeStdReg@reg,w,c
  6737  003738  0A93               	xorlw	147
  6738  00373A  E10B               	bnz	l9101
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;vscp_firmware.c: 725: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6742  00373C  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6743  00373E  5053               	movf	_vscp_page_select+1,w,c
  6744  003740  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6745  003742  500F               	movf	vscp_writeStdReg@value,w,c
  6746  003744  1010               	iorwf	??_vscp_writeStdReg,w,c
  6747  003746  6E52               	movwf	_vscp_page_select,c
  6748  003748  5011               	movf	??_vscp_writeStdReg+1,w,c
  6749  00374A  6E53               	movwf	_vscp_page_select+1,c
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;vscp_firmware.c: 726: rv = (vscp_page_select & 0xff);
  6753  00374C  C052  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6754                           
  6755                           ;vscp_firmware.c: 727: }
  6756  003750  D04E               	goto	l9143
  6757  003752                     l9101:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;vscp_firmware.c: 732: else if ((reg > 0x88) && (reg < 0x91)) {
  6761  003752  0E88               	movlw	136
  6762  003754  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6763  003756  D019               	goto	l9113
  6764                           
  6765                           ; BSR set to: 0
  6766  003758  0E91               	movlw	145
  6767  00375A  6015               	cpfslt	vscp_writeStdReg@reg,c
  6768  00375C  D016               	goto	l9113
  6769                           
  6770                           ; BSR set to: 0
  6771                           ;vscp_firmware.c: 734: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6772                           ;vscp_firmware.c: 735: (0xff != (vscp_page_select & 0xff))) {
  6773  00375E  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6774  003762  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6775  003766  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6776  003768  2811               	incf	??_vscp_writeStdReg+1,w,c
  6777  00376A  E102               	bnz	l9109
  6778                           
  6779                           ; BSR set to: 0
  6780  00376C  2852               	incf	_vscp_page_select,w,c
  6781  00376E  E002               	bz	l9111
  6782  003770                     l9109:
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;vscp_firmware.c: 737: rv = ~value;
  6786  003770  1C0F               	comf	vscp_writeStdReg@value,w,c
  6787  003772  D03A               	goto	L23
  6788  003774                     l9111:
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;vscp_firmware.c: 740: vscp_setManufacturerId(reg - 0x89, value);
  6792  003774  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6793  003778  5015               	movf	vscp_writeStdReg@reg,w,c
  6794  00377A  0F77               	addlw	119
  6795  00377C  ECDE  F020         	call	_vscp_setManufacturerId
  6796                           
  6797                           ;vscp_firmware.c: 741: rv = vscp_getManufacturerId(reg - 0x89);
  6798  003780  5015               	movf	vscp_writeStdReg@reg,w,c
  6799  003782  0F77               	addlw	119
  6800  003784  EC98  F021         	call	_vscp_getManufacturerId
  6801  003788  D02F               	goto	L23
  6802  00378A                     l9113:
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;vscp_firmware.c: 744: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6806  00378A  0ECF               	movlw	207
  6807  00378C  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6808  00378E  D017               	goto	l9125
  6809                           
  6810                           ; BSR set to: 0
  6811  003790  0EE0               	movlw	224
  6812  003792  6015               	cpfslt	vscp_writeStdReg@reg,c
  6813  003794  D014               	goto	l9125
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;vscp_firmware.c: 746: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6817                           ;vscp_firmware.c: 747: (0xff != (vscp_page_select & 0xff))) {
  6818  003796  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6819  00379A  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6820  00379E  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6821  0037A0  2811               	incf	??_vscp_writeStdReg+1,w,c
  6822  0037A2  E1E6               	bnz	l9109
  6823                           
  6824                           ; BSR set to: 0
  6825  0037A4  2852               	incf	_vscp_page_select,w,c
  6826  0037A6  E1E4               	bnz	l9109
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;vscp_firmware.c: 751: else {
  6830                           ;vscp_firmware.c: 752: vscp_setGUID(reg - 0xD0, value);
  6831  0037A8  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6832  0037AC  5015               	movf	vscp_writeStdReg@reg,w,c
  6833  0037AE  0F30               	addlw	48
  6834  0037B0  ECEE  F020         	call	_vscp_setGUID
  6835                           
  6836                           ;vscp_firmware.c: 753: rv = vscp_getGUID(reg - 0xD0);
  6837  0037B4  5015               	movf	vscp_writeStdReg@reg,w,c
  6838  0037B6  0F30               	addlw	48
  6839  0037B8  ECAC  F021         	call	_vscp_getGUID
  6840  0037BC  D015               	goto	L23
  6841  0037BE                     l9125:
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  6845  0037BE  5015               	movf	vscp_writeStdReg@reg,w,c
  6846  0037C0  0AA2               	xorlw	162
  6847  0037C2  E1D6               	bnz	l9109
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  6851  0037C4  500F               	movf	vscp_writeStdReg@value,w,c
  6852  0037C6  0A55               	xorlw	85
  6853  0037C8  E104               	bnz	l9133
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  6857  0037CA  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6858  0037CC  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;vscp_firmware.c: 760: rv = 0x55;
  6862  0037CE  0E55               	movlw	85
  6863  0037D0  D00B               	goto	L23
  6864  0037D2                     l9133:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  6868  0037D2  500F               	movf	vscp_writeStdReg@value,w,c
  6869  0037D4  0AAA               	xorlw	170
  6870  0037D6  E10B               	bnz	l9143
  6871                           
  6872                           ; BSR set to: 0
  6873                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  6874  0037D8  0EE8               	movlw	232
  6875  0037DA  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6876  0037DC  0E03               	movlw	3
  6877  0037DE  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6878  0037E0  E205               	bc	l1182
  6879                           
  6880                           ; BSR set to: 0
  6881                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  6882  0037E2  EC0A  F022         	call	_vscp_restoreDefaults	;wreg free
  6883                           
  6884                           ;vscp_firmware.c: 765: rv = 0xaa;
  6885  0037E6  0EAA               	movlw	170
  6886  0037E8                     L23:
  6887  0037E8  6E14               	movwf	vscp_writeStdReg@rv,c
  6888                           
  6889                           ;vscp_firmware.c: 766: }
  6890  0037EA  D001               	goto	l9143
  6891  0037EC                     l1182:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;vscp_firmware.c: 767: else {
  6895                           ;vscp_firmware.c: 768: rv = 0;
  6896  0037EC  6A14               	clrf	vscp_writeStdReg@rv,c
  6897  0037EE                     l9143:
  6898                           
  6899                           ;vscp_firmware.c: 776: }
  6900                           ;vscp_firmware.c: 778: return rv;
  6901  0037EE  5014               	movf	vscp_writeStdReg@rv,w,c
  6902  0037F0  0012               	return	
  6903  0037F2                     __end_of_vscp_writeStdReg:
  6904                           	opt stack 0
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           postinc0	equ	0xFEE
  6913                           wreg	equ	0xFE8
  6914                           indf1	equ	0xFE7
  6915                           fsr1h	equ	0xFE2
  6916                           fsr1l	equ	0xFE1
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           postdec2	equ	0xFDD
  6920                           plusw2	equ	0xFDB
  6921                           fsr2h	equ	0xFDA
  6922                           fsr2l	equ	0xFD9
  6923                           status	equ	0xFD8
  6924                           
  6925 ;; *************** function _vscp_restoreDefaults *****************
  6926 ;; Defined at:
  6927 ;;		line 2492 in file "../main.c"
  6928 ;; Parameters:    Size  Location     Type
  6929 ;;		None
  6930 ;; Auto vars:     Size  Location     Type
  6931 ;;		None
  6932 ;; Return value:  Size  Location     Type
  6933 ;;		None               void
  6934 ;; Registers used:
  6935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6936 ;; Tracked objects:
  6937 ;;		On entry : F/0
  6938 ;;		On exit  : 0/0
  6939 ;;		Unchanged: 0/0
  6940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6945 ;;Total ram usage:        0 bytes
  6946 ;; Hardware stack levels used:    1
  6947 ;; Hardware stack levels required when called:    4
  6948 ;; This function calls:
  6949 ;;		_init_app_eeprom
  6950 ;;		_init_app_ram
  6951 ;; This function is called by:
  6952 ;;		_vscp_writeStdReg
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           	psect	text19
  6957  004414                     __ptext19:
  6958                           	opt stack 0
  6959  004414                     _vscp_restoreDefaults:
  6960                           	opt stack 24
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;main.c: 2493: init_app_eeprom();
  6964                           
  6965                           ;incstack = 0
  6966                           ;incstack = 0
  6967  004414  EC8D  F010         	call	_init_app_eeprom	;wreg free
  6968                           
  6969                           ;main.c: 2494: init_app_ram();
  6970  004418  EFF9  F01B         	goto	_init_app_ram	;wreg free
  6971  00441C                     __end_of_vscp_restoreDefaults:
  6972                           	opt stack 0
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           intcon	equ	0xFF2
  6980                           postinc0	equ	0xFEE
  6981                           wreg	equ	0xFE8
  6982                           indf1	equ	0xFE7
  6983                           fsr1h	equ	0xFE2
  6984                           fsr1l	equ	0xFE1
  6985                           indf2	equ	0xFDF
  6986                           postinc2	equ	0xFDE
  6987                           postdec2	equ	0xFDD
  6988                           plusw2	equ	0xFDB
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function _init_app_eeprom *****************
  6994 ;; Defined at:
  6995 ;;		line 492 in file "../main.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;		None
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  j               1   13[COMRAM] unsigned char 
  7000 ;;  i               1   12[COMRAM] unsigned char 
  7001 ;; Return value:  Size  Location     Type
  7002 ;;		None               void
  7003 ;; Registers used:
  7004 ;;		wreg, status,2, status,0, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7011 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7014 ;;Total ram usage:        4 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    3
  7017 ;; This function calls:
  7018 ;;		_writeEEPROM
  7019 ;; This function is called by:
  7020 ;;		_main
  7021 ;;		_vscp_restoreDefaults
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text20
  7026  00211A                     __ptext20:
  7027                           	opt stack 0
  7028  00211A                     _init_app_eeprom:
  7029                           	opt stack 24
  7030                           
  7031                           ;main.c: 493: unsigned char i, j;
  7032                           ;main.c: 495: writeEEPROM( 0x43 + 0, 0 );
  7033                           
  7034                           ;incstack = 0
  7035                           ;incstack = 0
  7036  00211A  6A09               	clrf	?_writeEEPROM+1,c
  7037  00211C  0E43               	movlw	67
  7038  00211E  6E08               	movwf	?_writeEEPROM,c
  7039  002120  0E00               	movlw	0
  7040  002122  6A0A               	clrf	?_writeEEPROM+2,c
  7041  002124  ECB9  F020         	call	_writeEEPROM	;wreg free
  7042                           
  7043                           ;main.c: 496: writeEEPROM( 0x43 + 1, 0 );
  7044  002128  6A09               	clrf	?_writeEEPROM+1,c
  7045  00212A  0E44               	movlw	68
  7046  00212C  6E08               	movwf	?_writeEEPROM,c
  7047  00212E  0E00               	movlw	0
  7048  002130  6A0A               	clrf	?_writeEEPROM+2,c
  7049  002132  ECB9  F020         	call	_writeEEPROM	;wreg free
  7050                           
  7051                           ;main.c: 498: writeEEPROM( 0x43 + 10,
  7052                           ;main.c: 499: 0x08 |
  7053                           ;main.c: 500: 0x10 |
  7054                           ;main.c: 501: 0x80 );
  7055  002136  6A09               	clrf	?_writeEEPROM+1,c
  7056  002138  0E4D               	movlw	77
  7057  00213A  6E08               	movwf	?_writeEEPROM,c
  7058  00213C  0E98               	movlw	152
  7059  00213E  6E0A               	movwf	?_writeEEPROM+2,c
  7060  002140  ECB9  F020         	call	_writeEEPROM	;wreg free
  7061                           
  7062                           ;main.c: 503: writeEEPROM( 0x43 + 11,
  7063                           ;main.c: 504: 0x08 |
  7064                           ;main.c: 505: 0x10 |
  7065                           ;main.c: 506: 0x80 );
  7066  002144  6A09               	clrf	?_writeEEPROM+1,c
  7067  002146  0E4E               	movlw	78
  7068  002148  6E08               	movwf	?_writeEEPROM,c
  7069  00214A  0E98               	movlw	152
  7070  00214C  6E0A               	movwf	?_writeEEPROM+2,c
  7071  00214E  ECB9  F020         	call	_writeEEPROM	;wreg free
  7072                           
  7073                           ;main.c: 508: writeEEPROM( 0x43 + 12,
  7074                           ;main.c: 509: 0x08 |
  7075                           ;main.c: 510: 0x10 |
  7076                           ;main.c: 511: 0x80 );
  7077  002152  6A09               	clrf	?_writeEEPROM+1,c
  7078  002154  0E4F               	movlw	79
  7079  002156  6E08               	movwf	?_writeEEPROM,c
  7080  002158  0E98               	movlw	152
  7081  00215A  6E0A               	movwf	?_writeEEPROM+2,c
  7082  00215C  ECB9  F020         	call	_writeEEPROM	;wreg free
  7083                           
  7084                           ;main.c: 513: writeEEPROM( 0x43 + 13,
  7085                           ;main.c: 514: 0x08 |
  7086                           ;main.c: 515: 0x10 |
  7087                           ;main.c: 516: 0x80 );
  7088  002160  6A09               	clrf	?_writeEEPROM+1,c
  7089  002162  0E50               	movlw	80
  7090  002164  6E08               	movwf	?_writeEEPROM,c
  7091  002166  0E98               	movlw	152
  7092  002168  6E0A               	movwf	?_writeEEPROM+2,c
  7093  00216A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7094                           
  7095                           ;main.c: 518: writeEEPROM( 0x43 + 14,
  7096                           ;main.c: 519: 0x08 |
  7097                           ;main.c: 520: 0x10 |
  7098                           ;main.c: 521: 0x80 );
  7099  00216E  6A09               	clrf	?_writeEEPROM+1,c
  7100  002170  0E51               	movlw	81
  7101  002172  6E08               	movwf	?_writeEEPROM,c
  7102  002174  0E98               	movlw	152
  7103  002176  6E0A               	movwf	?_writeEEPROM+2,c
  7104  002178  ECB9  F020         	call	_writeEEPROM	;wreg free
  7105                           
  7106                           ;main.c: 523: writeEEPROM( 0x43 + 15,
  7107                           ;main.c: 524: 0x08 |
  7108                           ;main.c: 525: 0x10 |
  7109                           ;main.c: 526: 0x80 );
  7110  00217C  6A09               	clrf	?_writeEEPROM+1,c
  7111  00217E  0E52               	movlw	82
  7112  002180  6E08               	movwf	?_writeEEPROM,c
  7113  002182  0E98               	movlw	152
  7114  002184  6E0A               	movwf	?_writeEEPROM+2,c
  7115  002186  ECB9  F020         	call	_writeEEPROM	;wreg free
  7116                           
  7117                           ;main.c: 528: writeEEPROM( 0x43 + 16,
  7118                           ;main.c: 529: 0x08 |
  7119                           ;main.c: 530: 0x10 |
  7120                           ;main.c: 531: 0x80 );
  7121  00218A  6A09               	clrf	?_writeEEPROM+1,c
  7122  00218C  0E53               	movlw	83
  7123  00218E  6E08               	movwf	?_writeEEPROM,c
  7124  002190  0E98               	movlw	152
  7125  002192  6E0A               	movwf	?_writeEEPROM+2,c
  7126  002194  ECB9  F020         	call	_writeEEPROM	;wreg free
  7127                           
  7128                           ;main.c: 533: writeEEPROM( 0x43 + 17,
  7129                           ;main.c: 534: 0x08 |
  7130                           ;main.c: 535: 0x10 |
  7131                           ;main.c: 536: 0x80 );
  7132  002198  6A09               	clrf	?_writeEEPROM+1,c
  7133  00219A  0E54               	movlw	84
  7134  00219C  6E08               	movwf	?_writeEEPROM,c
  7135  00219E  0E98               	movlw	152
  7136  0021A0  6E0A               	movwf	?_writeEEPROM+2,c
  7137  0021A2  ECB9  F020         	call	_writeEEPROM	;wreg free
  7138                           
  7139                           ;main.c: 538: writeEEPROM( 0x43 + 18, 0 );
  7140  0021A6  6A09               	clrf	?_writeEEPROM+1,c
  7141  0021A8  0E55               	movlw	85
  7142  0021AA  6E08               	movwf	?_writeEEPROM,c
  7143  0021AC  0E00               	movlw	0
  7144  0021AE  6A0A               	clrf	?_writeEEPROM+2,c
  7145  0021B0  ECB9  F020         	call	_writeEEPROM	;wreg free
  7146                           
  7147                           ;main.c: 539: writeEEPROM( 0x43 + 19, 0 );
  7148  0021B4  6A09               	clrf	?_writeEEPROM+1,c
  7149  0021B6  0E56               	movlw	86
  7150  0021B8  6E08               	movwf	?_writeEEPROM,c
  7151  0021BA  0E00               	movlw	0
  7152  0021BC  6A0A               	clrf	?_writeEEPROM+2,c
  7153  0021BE  ECB9  F020         	call	_writeEEPROM	;wreg free
  7154                           
  7155                           ;main.c: 540: writeEEPROM( 0x43 + 20, 0 );
  7156  0021C2  6A09               	clrf	?_writeEEPROM+1,c
  7157  0021C4  0E57               	movlw	87
  7158  0021C6  6E08               	movwf	?_writeEEPROM,c
  7159  0021C8  0E00               	movlw	0
  7160  0021CA  6A0A               	clrf	?_writeEEPROM+2,c
  7161  0021CC  ECB9  F020         	call	_writeEEPROM	;wreg free
  7162                           
  7163                           ;main.c: 541: writeEEPROM( 0x43 + 21, 0 );
  7164  0021D0  6A09               	clrf	?_writeEEPROM+1,c
  7165  0021D2  0E58               	movlw	88
  7166  0021D4  6E08               	movwf	?_writeEEPROM,c
  7167  0021D6  0E00               	movlw	0
  7168  0021D8  6A0A               	clrf	?_writeEEPROM+2,c
  7169  0021DA  ECB9  F020         	call	_writeEEPROM	;wreg free
  7170                           
  7171                           ;main.c: 542: writeEEPROM( 0x43 + 22, 0 );
  7172  0021DE  6A09               	clrf	?_writeEEPROM+1,c
  7173  0021E0  0E59               	movlw	89
  7174  0021E2  6E08               	movwf	?_writeEEPROM,c
  7175  0021E4  0E00               	movlw	0
  7176  0021E6  6A0A               	clrf	?_writeEEPROM+2,c
  7177  0021E8  ECB9  F020         	call	_writeEEPROM	;wreg free
  7178                           
  7179                           ;main.c: 543: writeEEPROM( 0x43 + 23, 0 );
  7180  0021EC  6A09               	clrf	?_writeEEPROM+1,c
  7181  0021EE  0E5A               	movlw	90
  7182  0021F0  6E08               	movwf	?_writeEEPROM,c
  7183  0021F2  0E00               	movlw	0
  7184  0021F4  6A0A               	clrf	?_writeEEPROM+2,c
  7185  0021F6  ECB9  F020         	call	_writeEEPROM	;wreg free
  7186                           
  7187                           ;main.c: 544: writeEEPROM( 0x43 + 24, 0 );
  7188  0021FA  6A09               	clrf	?_writeEEPROM+1,c
  7189  0021FC  0E5B               	movlw	91
  7190  0021FE  6E08               	movwf	?_writeEEPROM,c
  7191  002200  0E00               	movlw	0
  7192  002202  6A0A               	clrf	?_writeEEPROM+2,c
  7193  002204  ECB9  F020         	call	_writeEEPROM	;wreg free
  7194                           
  7195                           ;main.c: 545: writeEEPROM( 0x43 + 25, 0 );
  7196  002208  6A09               	clrf	?_writeEEPROM+1,c
  7197  00220A  0E5C               	movlw	92
  7198  00220C  6E08               	movwf	?_writeEEPROM,c
  7199  00220E  0E00               	movlw	0
  7200  002210  6A0A               	clrf	?_writeEEPROM+2,c
  7201  002212  ECB9  F020         	call	_writeEEPROM	;wreg free
  7202                           
  7203                           ;main.c: 546: writeEEPROM( 0x43 + 26, 0 );
  7204  002216  6A09               	clrf	?_writeEEPROM+1,c
  7205  002218  0E5D               	movlw	93
  7206  00221A  6E08               	movwf	?_writeEEPROM,c
  7207  00221C  0E00               	movlw	0
  7208  00221E  6A0A               	clrf	?_writeEEPROM+2,c
  7209  002220  ECB9  F020         	call	_writeEEPROM	;wreg free
  7210                           
  7211                           ;main.c: 547: writeEEPROM( 0x43 + 27, 0 );
  7212  002224  6A09               	clrf	?_writeEEPROM+1,c
  7213  002226  0E5E               	movlw	94
  7214  002228  6E08               	movwf	?_writeEEPROM,c
  7215  00222A  0E00               	movlw	0
  7216  00222C  6A0A               	clrf	?_writeEEPROM+2,c
  7217  00222E  ECB9  F020         	call	_writeEEPROM	;wreg free
  7218                           
  7219                           ;main.c: 548: writeEEPROM( 0x43 + 28, 0 );
  7220  002232  6A09               	clrf	?_writeEEPROM+1,c
  7221  002234  0E5F               	movlw	95
  7222  002236  6E08               	movwf	?_writeEEPROM,c
  7223  002238  0E00               	movlw	0
  7224  00223A  6A0A               	clrf	?_writeEEPROM+2,c
  7225  00223C  ECB9  F020         	call	_writeEEPROM	;wreg free
  7226                           
  7227                           ;main.c: 549: writeEEPROM( 0x43 + 29, 0 );
  7228  002240  6A09               	clrf	?_writeEEPROM+1,c
  7229  002242  0E60               	movlw	96
  7230  002244  6E08               	movwf	?_writeEEPROM,c
  7231  002246  0E00               	movlw	0
  7232  002248  6A0A               	clrf	?_writeEEPROM+2,c
  7233  00224A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7234                           
  7235                           ;main.c: 550: writeEEPROM( 0x43 + 30, 0 );
  7236  00224E  6A09               	clrf	?_writeEEPROM+1,c
  7237  002250  0E61               	movlw	97
  7238  002252  6E08               	movwf	?_writeEEPROM,c
  7239  002254  0E00               	movlw	0
  7240  002256  6A0A               	clrf	?_writeEEPROM+2,c
  7241  002258  ECB9  F020         	call	_writeEEPROM	;wreg free
  7242                           
  7243                           ;main.c: 551: writeEEPROM( 0x43 + 31, 0 );
  7244  00225C  6A09               	clrf	?_writeEEPROM+1,c
  7245  00225E  0E62               	movlw	98
  7246  002260  6E08               	movwf	?_writeEEPROM,c
  7247  002262  0E00               	movlw	0
  7248  002264  6A0A               	clrf	?_writeEEPROM+2,c
  7249  002266  ECB9  F020         	call	_writeEEPROM	;wreg free
  7250                           
  7251                           ;main.c: 552: writeEEPROM( 0x43 + 32, 0 );
  7252  00226A  6A09               	clrf	?_writeEEPROM+1,c
  7253  00226C  0E63               	movlw	99
  7254  00226E  6E08               	movwf	?_writeEEPROM,c
  7255  002270  0E00               	movlw	0
  7256  002272  6A0A               	clrf	?_writeEEPROM+2,c
  7257  002274  ECB9  F020         	call	_writeEEPROM	;wreg free
  7258                           
  7259                           ;main.c: 553: writeEEPROM( 0x43 + 33, 0 );
  7260  002278  6A09               	clrf	?_writeEEPROM+1,c
  7261  00227A  0E64               	movlw	100
  7262  00227C  6E08               	movwf	?_writeEEPROM,c
  7263  00227E  0E00               	movlw	0
  7264  002280  6A0A               	clrf	?_writeEEPROM+2,c
  7265  002282  ECB9  F020         	call	_writeEEPROM	;wreg free
  7266                           
  7267                           ;main.c: 555: writeEEPROM( 0x43 + 34, 0 );
  7268  002286  6A09               	clrf	?_writeEEPROM+1,c
  7269  002288  0E65               	movlw	101
  7270  00228A  6E08               	movwf	?_writeEEPROM,c
  7271  00228C  0E00               	movlw	0
  7272  00228E  6A0A               	clrf	?_writeEEPROM+2,c
  7273  002290  ECB9  F020         	call	_writeEEPROM	;wreg free
  7274                           
  7275                           ;main.c: 556: writeEEPROM( 0x43 + 35, 0 );
  7276  002294  6A09               	clrf	?_writeEEPROM+1,c
  7277  002296  0E66               	movlw	102
  7278  002298  6E08               	movwf	?_writeEEPROM,c
  7279  00229A  0E00               	movlw	0
  7280  00229C  6A0A               	clrf	?_writeEEPROM+2,c
  7281  00229E  ECB9  F020         	call	_writeEEPROM	;wreg free
  7282                           
  7283                           ;main.c: 557: writeEEPROM( 0x43 + 36, 0 );
  7284  0022A2  6A09               	clrf	?_writeEEPROM+1,c
  7285  0022A4  0E67               	movlw	103
  7286  0022A6  6E08               	movwf	?_writeEEPROM,c
  7287  0022A8  0E00               	movlw	0
  7288  0022AA  6A0A               	clrf	?_writeEEPROM+2,c
  7289  0022AC  ECB9  F020         	call	_writeEEPROM	;wreg free
  7290                           
  7291                           ;main.c: 558: writeEEPROM( 0x43 + 37, 0 );
  7292  0022B0  6A09               	clrf	?_writeEEPROM+1,c
  7293  0022B2  0E68               	movlw	104
  7294  0022B4  6E08               	movwf	?_writeEEPROM,c
  7295  0022B6  0E00               	movlw	0
  7296  0022B8  6A0A               	clrf	?_writeEEPROM+2,c
  7297  0022BA  ECB9  F020         	call	_writeEEPROM	;wreg free
  7298                           
  7299                           ;main.c: 559: writeEEPROM( 0x43 + 38, 0 );
  7300  0022BE  6A09               	clrf	?_writeEEPROM+1,c
  7301  0022C0  0E69               	movlw	105
  7302  0022C2  6E08               	movwf	?_writeEEPROM,c
  7303  0022C4  0E00               	movlw	0
  7304  0022C6  6A0A               	clrf	?_writeEEPROM+2,c
  7305  0022C8  ECB9  F020         	call	_writeEEPROM	;wreg free
  7306                           
  7307                           ;main.c: 560: writeEEPROM( 0x43 + 39, 0 );
  7308  0022CC  6A09               	clrf	?_writeEEPROM+1,c
  7309  0022CE  0E6A               	movlw	106
  7310  0022D0  6E08               	movwf	?_writeEEPROM,c
  7311  0022D2  0E00               	movlw	0
  7312  0022D4  6A0A               	clrf	?_writeEEPROM+2,c
  7313  0022D6  ECB9  F020         	call	_writeEEPROM	;wreg free
  7314                           
  7315                           ;main.c: 561: writeEEPROM( 0x43 + 40, 0 );
  7316  0022DA  6A09               	clrf	?_writeEEPROM+1,c
  7317  0022DC  0E6B               	movlw	107
  7318  0022DE  6E08               	movwf	?_writeEEPROM,c
  7319  0022E0  0E00               	movlw	0
  7320  0022E2  6A0A               	clrf	?_writeEEPROM+2,c
  7321  0022E4  ECB9  F020         	call	_writeEEPROM	;wreg free
  7322                           
  7323                           ;main.c: 562: writeEEPROM( 0x43 + 41, 0 );
  7324  0022E8  6A09               	clrf	?_writeEEPROM+1,c
  7325  0022EA  0E6C               	movlw	108
  7326  0022EC  6E08               	movwf	?_writeEEPROM,c
  7327  0022EE  0E00               	movlw	0
  7328  0022F0  6A0A               	clrf	?_writeEEPROM+2,c
  7329  0022F2  ECB9  F020         	call	_writeEEPROM	;wreg free
  7330                           
  7331                           ;main.c: 563: writeEEPROM( 0x43 + 42, 0 );
  7332  0022F6  6A09               	clrf	?_writeEEPROM+1,c
  7333  0022F8  0E6D               	movlw	109
  7334  0022FA  6E08               	movwf	?_writeEEPROM,c
  7335  0022FC  0E00               	movlw	0
  7336  0022FE  6A0A               	clrf	?_writeEEPROM+2,c
  7337  002300  ECB9  F020         	call	_writeEEPROM	;wreg free
  7338                           
  7339                           ;main.c: 564: writeEEPROM( 0x43 + 43, 0 );
  7340  002304  6A09               	clrf	?_writeEEPROM+1,c
  7341  002306  0E6E               	movlw	110
  7342  002308  6E08               	movwf	?_writeEEPROM,c
  7343  00230A  0E00               	movlw	0
  7344  00230C  6A0A               	clrf	?_writeEEPROM+2,c
  7345  00230E  ECB9  F020         	call	_writeEEPROM	;wreg free
  7346                           
  7347                           ;main.c: 565: writeEEPROM( 0x43 + 44, 0 );
  7348  002312  6A09               	clrf	?_writeEEPROM+1,c
  7349  002314  0E6F               	movlw	111
  7350  002316  6E08               	movwf	?_writeEEPROM,c
  7351  002318  0E00               	movlw	0
  7352  00231A  6A0A               	clrf	?_writeEEPROM+2,c
  7353  00231C  ECB9  F020         	call	_writeEEPROM	;wreg free
  7354                           
  7355                           ;main.c: 566: writeEEPROM( 0x43 + 45, 0 );
  7356  002320  6A09               	clrf	?_writeEEPROM+1,c
  7357  002322  0E70               	movlw	112
  7358  002324  6E08               	movwf	?_writeEEPROM,c
  7359  002326  0E00               	movlw	0
  7360  002328  6A0A               	clrf	?_writeEEPROM+2,c
  7361  00232A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7362                           
  7363                           ;main.c: 567: writeEEPROM( 0x43 + 46, 0 );
  7364  00232E  6A09               	clrf	?_writeEEPROM+1,c
  7365  002330  0E71               	movlw	113
  7366  002332  6E08               	movwf	?_writeEEPROM,c
  7367  002334  0E00               	movlw	0
  7368  002336  6A0A               	clrf	?_writeEEPROM+2,c
  7369  002338  ECB9  F020         	call	_writeEEPROM	;wreg free
  7370                           
  7371                           ;main.c: 568: writeEEPROM( 0x43 + 47, 0 );
  7372  00233C  6A09               	clrf	?_writeEEPROM+1,c
  7373  00233E  0E72               	movlw	114
  7374  002340  6E08               	movwf	?_writeEEPROM,c
  7375  002342  0E00               	movlw	0
  7376  002344  6A0A               	clrf	?_writeEEPROM+2,c
  7377  002346  ECB9  F020         	call	_writeEEPROM	;wreg free
  7378                           
  7379                           ;main.c: 569: writeEEPROM( 0x43 + 48, 0 );
  7380  00234A  6A09               	clrf	?_writeEEPROM+1,c
  7381  00234C  0E73               	movlw	115
  7382  00234E  6E08               	movwf	?_writeEEPROM,c
  7383  002350  0E00               	movlw	0
  7384  002352  6A0A               	clrf	?_writeEEPROM+2,c
  7385  002354  ECB9  F020         	call	_writeEEPROM	;wreg free
  7386                           
  7387                           ;main.c: 570: writeEEPROM( 0x43 + 49, 0 );
  7388  002358  6A09               	clrf	?_writeEEPROM+1,c
  7389  00235A  0E74               	movlw	116
  7390  00235C  6E08               	movwf	?_writeEEPROM,c
  7391  00235E  0E00               	movlw	0
  7392  002360  6A0A               	clrf	?_writeEEPROM+2,c
  7393  002362  ECB9  F020         	call	_writeEEPROM	;wreg free
  7394                           
  7395                           ;main.c: 572: writeEEPROM( 0x43 + 50, 0 );
  7396  002366  6A09               	clrf	?_writeEEPROM+1,c
  7397  002368  0E75               	movlw	117
  7398  00236A  6E08               	movwf	?_writeEEPROM,c
  7399  00236C  0E00               	movlw	0
  7400  00236E  6A0A               	clrf	?_writeEEPROM+2,c
  7401  002370  ECB9  F020         	call	_writeEEPROM	;wreg free
  7402                           
  7403                           ;main.c: 573: writeEEPROM( 0x43 + 51, 0 );
  7404  002374  6A09               	clrf	?_writeEEPROM+1,c
  7405  002376  0E76               	movlw	118
  7406  002378  6E08               	movwf	?_writeEEPROM,c
  7407  00237A  0E00               	movlw	0
  7408  00237C  6A0A               	clrf	?_writeEEPROM+2,c
  7409  00237E  ECB9  F020         	call	_writeEEPROM	;wreg free
  7410                           
  7411                           ;main.c: 574: writeEEPROM( 0x43 + 52, 0 );
  7412  002382  6A09               	clrf	?_writeEEPROM+1,c
  7413  002384  0E77               	movlw	119
  7414  002386  6E08               	movwf	?_writeEEPROM,c
  7415  002388  0E00               	movlw	0
  7416  00238A  6A0A               	clrf	?_writeEEPROM+2,c
  7417  00238C  ECB9  F020         	call	_writeEEPROM	;wreg free
  7418                           
  7419                           ;main.c: 575: writeEEPROM( 0x43 + 53, 0 );
  7420  002390  6A09               	clrf	?_writeEEPROM+1,c
  7421  002392  0E78               	movlw	120
  7422  002394  6E08               	movwf	?_writeEEPROM,c
  7423  002396  0E00               	movlw	0
  7424  002398  6A0A               	clrf	?_writeEEPROM+2,c
  7425  00239A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7426                           
  7427                           ;main.c: 576: writeEEPROM( 0x43 + 54, 0 );
  7428  00239E  6A09               	clrf	?_writeEEPROM+1,c
  7429  0023A0  0E79               	movlw	121
  7430  0023A2  6E08               	movwf	?_writeEEPROM,c
  7431  0023A4  0E00               	movlw	0
  7432  0023A6  6A0A               	clrf	?_writeEEPROM+2,c
  7433  0023A8  ECB9  F020         	call	_writeEEPROM	;wreg free
  7434                           
  7435                           ;main.c: 577: writeEEPROM( 0x43 + 55, 0 );
  7436  0023AC  6A09               	clrf	?_writeEEPROM+1,c
  7437  0023AE  0E7A               	movlw	122
  7438  0023B0  6E08               	movwf	?_writeEEPROM,c
  7439  0023B2  0E00               	movlw	0
  7440  0023B4  6A0A               	clrf	?_writeEEPROM+2,c
  7441  0023B6  ECB9  F020         	call	_writeEEPROM	;wreg free
  7442                           
  7443                           ;main.c: 578: writeEEPROM( 0x43 + 56, 0 );
  7444  0023BA  6A09               	clrf	?_writeEEPROM+1,c
  7445  0023BC  0E7B               	movlw	123
  7446  0023BE  6E08               	movwf	?_writeEEPROM,c
  7447  0023C0  0E00               	movlw	0
  7448  0023C2  6A0A               	clrf	?_writeEEPROM+2,c
  7449  0023C4  ECB9  F020         	call	_writeEEPROM	;wreg free
  7450                           
  7451                           ;main.c: 579: writeEEPROM( 0x43 + 57, 0 );
  7452  0023C8  6A09               	clrf	?_writeEEPROM+1,c
  7453  0023CA  0E7C               	movlw	124
  7454  0023CC  6E08               	movwf	?_writeEEPROM,c
  7455  0023CE  0E00               	movlw	0
  7456  0023D0  6A0A               	clrf	?_writeEEPROM+2,c
  7457  0023D2  ECB9  F020         	call	_writeEEPROM	;wreg free
  7458                           
  7459                           ;main.c: 580: writeEEPROM( 0x43 + 58, 0 );
  7460  0023D6  6A09               	clrf	?_writeEEPROM+1,c
  7461  0023D8  0E7D               	movlw	125
  7462  0023DA  6E08               	movwf	?_writeEEPROM,c
  7463  0023DC  0E00               	movlw	0
  7464  0023DE  6A0A               	clrf	?_writeEEPROM+2,c
  7465  0023E0  ECB9  F020         	call	_writeEEPROM	;wreg free
  7466                           
  7467                           ;main.c: 581: writeEEPROM( 0x43 + 59, 0 );
  7468  0023E4  6A09               	clrf	?_writeEEPROM+1,c
  7469  0023E6  0E7E               	movlw	126
  7470  0023E8  6E08               	movwf	?_writeEEPROM,c
  7471  0023EA  0E00               	movlw	0
  7472  0023EC  6A0A               	clrf	?_writeEEPROM+2,c
  7473  0023EE  ECB9  F020         	call	_writeEEPROM	;wreg free
  7474                           
  7475                           ;main.c: 582: writeEEPROM( 0x43 + 60, 0 );
  7476  0023F2  6A09               	clrf	?_writeEEPROM+1,c
  7477  0023F4  0E7F               	movlw	127
  7478  0023F6  6E08               	movwf	?_writeEEPROM,c
  7479  0023F8  0E00               	movlw	0
  7480  0023FA  6A0A               	clrf	?_writeEEPROM+2,c
  7481  0023FC  ECB9  F020         	call	_writeEEPROM	;wreg free
  7482                           
  7483                           ;main.c: 583: writeEEPROM( 0x43 + 61, 0 );
  7484  002400  6A09               	clrf	?_writeEEPROM+1,c
  7485  002402  0E80               	movlw	128
  7486  002404  6E08               	movwf	?_writeEEPROM,c
  7487  002406  0E00               	movlw	0
  7488  002408  6A0A               	clrf	?_writeEEPROM+2,c
  7489  00240A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7490                           
  7491                           ;main.c: 584: writeEEPROM( 0x43 + 62, 0 );
  7492  00240E  6A09               	clrf	?_writeEEPROM+1,c
  7493  002410  0E81               	movlw	129
  7494  002412  6E08               	movwf	?_writeEEPROM,c
  7495  002414  0E00               	movlw	0
  7496  002416  6A0A               	clrf	?_writeEEPROM+2,c
  7497  002418  ECB9  F020         	call	_writeEEPROM	;wreg free
  7498                           
  7499                           ;main.c: 585: writeEEPROM( 0x43 + 63, 0 );
  7500  00241C  6A09               	clrf	?_writeEEPROM+1,c
  7501  00241E  0E82               	movlw	130
  7502  002420  6E08               	movwf	?_writeEEPROM,c
  7503  002422  0E00               	movlw	0
  7504  002424  6A0A               	clrf	?_writeEEPROM+2,c
  7505  002426  ECB9  F020         	call	_writeEEPROM	;wreg free
  7506                           
  7507                           ;main.c: 586: writeEEPROM( 0x43 + 64, 0 );
  7508  00242A  6A09               	clrf	?_writeEEPROM+1,c
  7509  00242C  0E83               	movlw	131
  7510  00242E  6E08               	movwf	?_writeEEPROM,c
  7511  002430  0E00               	movlw	0
  7512  002432  6A0A               	clrf	?_writeEEPROM+2,c
  7513  002434  ECB9  F020         	call	_writeEEPROM	;wreg free
  7514                           
  7515                           ;main.c: 587: writeEEPROM( 0x43 + 65, 0 );
  7516  002438  6A09               	clrf	?_writeEEPROM+1,c
  7517  00243A  0E84               	movlw	132
  7518  00243C  6E08               	movwf	?_writeEEPROM,c
  7519  00243E  0E00               	movlw	0
  7520  002440  6A0A               	clrf	?_writeEEPROM+2,c
  7521  002442  ECB9  F020         	call	_writeEEPROM	;wreg free
  7522                           
  7523                           ;main.c: 591: for ( i = 0; i < 7; i++ ) {
  7524  002446  6A0D               	clrf	init_app_eeprom@i,c
  7525  002448                     l185:
  7526                           
  7527                           ;main.c: 592: for ( j = 0; j < 8; j++ ) {
  7528  002448  6A0E               	clrf	init_app_eeprom@j,c
  7529  00244A                     l4671:
  7530                           
  7531                           ;main.c: 593: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7532  00244A  500E               	movf	init_app_eeprom@j,w,c
  7533  00244C  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7534  002450  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7535  002452  90D8               	bcf	status,0,c
  7536  002454  360B               	rlcf	??_init_app_eeprom,f,c
  7537  002456  360C               	rlcf	??_init_app_eeprom+1,f,c
  7538  002458  90D8               	bcf	status,0,c
  7539  00245A  360B               	rlcf	??_init_app_eeprom,f,c
  7540  00245C  360C               	rlcf	??_init_app_eeprom+1,f,c
  7541  00245E  90D8               	bcf	status,0,c
  7542  002460  360B               	rlcf	??_init_app_eeprom,f,c
  7543  002462  360C               	rlcf	??_init_app_eeprom+1,f,c
  7544  002464  260B               	addwf	??_init_app_eeprom,f,c
  7545  002466  0E00               	movlw	0
  7546  002468  220C               	addwfc	??_init_app_eeprom+1,f,c
  7547  00246A  0E8B               	movlw	139
  7548  00246C  240B               	addwf	??_init_app_eeprom,w,c
  7549  00246E  6E08               	movwf	?_writeEEPROM,c
  7550  002470  0E00               	movlw	0
  7551  002472  200C               	addwfc	??_init_app_eeprom+1,w,c
  7552  002474  6E09               	movwf	?_writeEEPROM+1,c
  7553  002476  0E00               	movlw	0
  7554  002478  6A0A               	clrf	?_writeEEPROM+2,c
  7555  00247A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7556  00247E  2A0E               	incf	init_app_eeprom@j,f,c
  7557  002480  0E07               	movlw	7
  7558  002482  640E               	cpfsgt	init_app_eeprom@j,c
  7559  002484  D7E2               	goto	l4671
  7560  002486  2A0D               	incf	init_app_eeprom@i,f,c
  7561  002488  0E06               	movlw	6
  7562  00248A  640D               	cpfsgt	init_app_eeprom@i,c
  7563  00248C  D7DD               	goto	l185
  7564  00248E  0C06               	retlw	6
  7565  002490                     __end_of_init_app_eeprom:
  7566                           	opt stack 0
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           postinc0	equ	0xFEE
  7575                           wreg	equ	0xFE8
  7576                           indf1	equ	0xFE7
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           plusw2	equ	0xFDB
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _vscp_setUserID *****************
  7588 ;; Defined at:
  7589 ;;		line 2307 in file "../main.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  idx             1    wreg     unsigned char 
  7592 ;;  data            1   10[COMRAM] unsigned char 
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;  idx             1   11[COMRAM] unsigned char 
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, status,0, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : F/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7604 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7607 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7608 ;;Total ram usage:        2 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    3
  7611 ;; This function calls:
  7612 ;;		_writeEEPROM
  7613 ;; This function is called by:
  7614 ;;		_vscp_writeStdReg
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           	psect	text21
  7619  0042EA                     __ptext21:
  7620                           	opt stack 0
  7621  0042EA                     _vscp_setUserID:
  7622                           	opt stack 25
  7623                           
  7624                           ;incstack = 0
  7625                           ;incstack = 0
  7626                           ;vscp_setUserID@idx stored from wreg
  7627  0042EA  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;main.c: 2308: writeEEPROM( idx + 0x06, data );
  7631  0042EE  0E06               	movlw	6
  7632  0042F0  240C               	addwf	vscp_setUserID@idx,w,c
  7633  0042F2  6E08               	movwf	?_writeEEPROM,c
  7634  0042F4  6A09               	clrf	?_writeEEPROM+1,c
  7635  0042F6  0E00               	movlw	0
  7636  0042F8  2209               	addwfc	?_writeEEPROM+1,f,c
  7637  0042FA  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7638  0042FE  EFB9  F020         	goto	_writeEEPROM	;wreg free
  7639  004302                     __end_of_vscp_setUserID:
  7640                           	opt stack 0
  7641                           tblptru	equ	0xFF8
  7642                           tblptrh	equ	0xFF7
  7643                           tblptrl	equ	0xFF6
  7644                           tablat	equ	0xFF5
  7645                           prodh	equ	0xFF4
  7646                           prodl	equ	0xFF3
  7647                           intcon	equ	0xFF2
  7648                           postinc0	equ	0xFEE
  7649                           wreg	equ	0xFE8
  7650                           indf1	equ	0xFE7
  7651                           fsr1h	equ	0xFE2
  7652                           fsr1l	equ	0xFE1
  7653                           indf2	equ	0xFDF
  7654                           postinc2	equ	0xFDE
  7655                           postdec2	equ	0xFDD
  7656                           plusw2	equ	0xFDB
  7657                           fsr2h	equ	0xFDA
  7658                           fsr2l	equ	0xFD9
  7659                           status	equ	0xFD8
  7660                           
  7661 ;; *************** function _vscp_setManufacturerId *****************
  7662 ;; Defined at:
  7663 ;;		line 832 in file "../main.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;  idx             1    wreg     unsigned char 
  7666 ;;  data            1   10[COMRAM] unsigned char 
  7667 ;; Auto vars:     Size  Location     Type
  7668 ;;  idx             1   11[COMRAM] unsigned char 
  7669 ;; Return value:  Size  Location     Type
  7670 ;;		None               void
  7671 ;; Registers used:
  7672 ;;		wreg, status,2, status,0, cstack
  7673 ;; Tracked objects:
  7674 ;;		On entry : F/0
  7675 ;;		On exit  : 0/0
  7676 ;;		Unchanged: 0/0
  7677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7678 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7681 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7682 ;;Total ram usage:        2 bytes
  7683 ;; Hardware stack levels used:    1
  7684 ;; Hardware stack levels required when called:    3
  7685 ;; This function calls:
  7686 ;;		_writeEEPROM
  7687 ;; This function is called by:
  7688 ;;		_vscp_writeStdReg
  7689 ;; This function uses a non-reentrant model
  7690 ;;
  7691                           
  7692                           	psect	text22
  7693  0041BC                     __ptext22:
  7694                           	opt stack 0
  7695  0041BC                     _vscp_setManufacturerId:
  7696                           	opt stack 25
  7697                           
  7698                           ;incstack = 0
  7699                           ;incstack = 0
  7700                           ;vscp_setManufacturerId@idx stored from wreg
  7701  0041BC  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;main.c: 833: if ( idx>7 ) return;
  7705  0041C0  0E07               	movlw	7
  7706  0041C2  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7707  0041C4  D001               	goto	l5611
  7708  0041C6  0C07               	retlw	7
  7709  0041C8                     l5611:
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;main.c: 834: writeEEPROM(0x0B + idx, data);
  7713  0041C8  0E0B               	movlw	11
  7714  0041CA  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7715  0041CC  6E08               	movwf	?_writeEEPROM,c
  7716  0041CE  6A09               	clrf	?_writeEEPROM+1,c
  7717  0041D0  0E00               	movlw	0
  7718  0041D2  2209               	addwfc	?_writeEEPROM+1,f,c
  7719  0041D4  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7720  0041D8  EFB9  F020         	goto	_writeEEPROM	;wreg free
  7721  0041DC                     __end_of_vscp_setManufacturerId:
  7722                           	opt stack 0
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodh	equ	0xFF4
  7728                           prodl	equ	0xFF3
  7729                           intcon	equ	0xFF2
  7730                           postinc0	equ	0xFEE
  7731                           wreg	equ	0xFE8
  7732                           indf1	equ	0xFE7
  7733                           fsr1h	equ	0xFE2
  7734                           fsr1l	equ	0xFE1
  7735                           indf2	equ	0xFDF
  7736                           postinc2	equ	0xFDE
  7737                           postdec2	equ	0xFDD
  7738                           plusw2	equ	0xFDB
  7739                           fsr2h	equ	0xFDA
  7740                           fsr2l	equ	0xFD9
  7741                           status	equ	0xFD8
  7742                           
  7743 ;; *************** function _vscp_setGUID *****************
  7744 ;; Defined at:
  7745 ;;		line 820 in file "../main.c"
  7746 ;; Parameters:    Size  Location     Type
  7747 ;;  idx             1    wreg     unsigned char 
  7748 ;;  data            1   10[COMRAM] unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  idx             1   11[COMRAM] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;		None               void
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, status,0, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : F/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7760 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7761 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7763 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7764 ;;Total ram usage:        2 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    3
  7767 ;; This function calls:
  7768 ;;		_writeEEPROM
  7769 ;; This function is called by:
  7770 ;;		_vscp_writeStdReg
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           	psect	text23
  7775  0041DC                     __ptext23:
  7776                           	opt stack 0
  7777  0041DC                     _vscp_setGUID:
  7778                           	opt stack 25
  7779                           
  7780                           ;incstack = 0
  7781                           ;incstack = 0
  7782                           ;vscp_setGUID@idx stored from wreg
  7783  0041DC  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;main.c: 821: if ( idx>15 ) return;
  7787  0041E0  0E0F               	movlw	15
  7788  0041E2  640C               	cpfsgt	vscp_setGUID@idx,c
  7789  0041E4  D001               	goto	l5605
  7790  0041E6  0C0F               	retlw	15
  7791  0041E8                     l5605:
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;main.c: 822: writeEEPROM(0x13 + idx, data);
  7795  0041E8  0E13               	movlw	19
  7796  0041EA  240C               	addwf	vscp_setGUID@idx,w,c
  7797  0041EC  6E08               	movwf	?_writeEEPROM,c
  7798  0041EE  6A09               	clrf	?_writeEEPROM+1,c
  7799  0041F0  0E00               	movlw	0
  7800  0041F2  2209               	addwfc	?_writeEEPROM+1,f,c
  7801  0041F4  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7802  0041F8  EFB9  F020         	goto	_writeEEPROM	;wreg free
  7803  0041FC                     __end_of_vscp_setGUID:
  7804                           	opt stack 0
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           indf1	equ	0xFE7
  7815                           fsr1h	equ	0xFE2
  7816                           fsr1l	equ	0xFE1
  7817                           indf2	equ	0xFDF
  7818                           postinc2	equ	0xFDE
  7819                           postdec2	equ	0xFDD
  7820                           plusw2	equ	0xFDB
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825 ;; *************** function _vscp_writeAppReg *****************
  7826 ;; Defined at:
  7827 ;;		line 983 in file "../main.c"
  7828 ;; Parameters:    Size  Location     Type
  7829 ;;  reg             1    wreg     unsigned char 
  7830 ;;  val             1   80[COMRAM] unsigned char 
  7831 ;; Auto vars:     Size  Location     Type
  7832 ;;  reg             1   29[BANK0 ] unsigned char 
  7833 ;;  val             1   26[BANK0 ] unsigned char 
  7834 ;;  rv              1   28[BANK0 ] unsigned char 
  7835 ;;  bOn             1   27[BANK0 ] enum E18242
  7836 ;;  bInfoEvent      1   25[BANK0 ] enum E18242
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      unsigned char 
  7839 ;; Registers used:
  7840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : F/0
  7843 ;;		On exit  : F/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7846 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7847 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7848 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;Total ram usage:        9 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    7
  7853 ;; This function calls:
  7854 ;;		_writeEEPROM
  7855 ;;		_readEEPROM
  7856 ;;		_SendInformationEvent
  7857 ;;		_calculateSetFilterMask
  7858 ;; This function is called by:
  7859 ;;		_vscp_writeRegister
  7860 ;;		_vscp_handleProtocolEvent
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text24
  7865  000F22                     __ptext24:
  7866                           	opt stack 0
  7867  000F22                     _vscp_writeAppReg:
  7868                           	opt stack 21
  7869                           
  7870                           ;incstack = 0
  7871                           ;incstack = 0
  7872                           ;vscp_writeAppReg@reg stored from wreg
  7873  000F22  CFE8 F0CE          	movff	wreg,vscp_writeAppReg@reg
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;main.c: 984: uint8_t rv;
  7877                           ;main.c: 985: BOOL bInfoEvent = 0;
  7878  000F26  6BCA               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7879                           
  7880                           ;main.c: 986: BOOL bOn = 0;
  7881  000F28  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;main.c: 988: rv = ~val;
  7885  000F2A  1C51               	comf	vscp_writeAppReg@val,w,c
  7886  000F2C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7887                           
  7888                           ; BSR set to: 0
  7889                           ;main.c: 991: if ( reg == 0 ) {
  7890  000F2E  67CE               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7891  000F30  D00D               	goto	l9879
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;main.c: 992: writeEEPROM(0x43 + 0, val);
  7895  000F32  6A09               	clrf	?_writeEEPROM+1,c
  7896  000F34  0E43               	movlw	67
  7897  000F36  6E08               	movwf	?_writeEEPROM,c
  7898  000F38  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7899  000F3C  ECB9  F020         	call	_writeEEPROM	;wreg free
  7900                           
  7901                           ;main.c: 993: rv = readEEPROM(0x43 + 0);
  7902  000F40  6A09               	clrf	?_readEEPROM+1,c
  7903  000F42  0E43               	movlw	67
  7904  000F44  6E08               	movwf	?_readEEPROM,c
  7905  000F46  ECDA  F021         	call	_readEEPROM	;wreg free
  7906  000F4A  D39C               	goto	L24
  7907  000F4C                     l9879:
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;main.c: 995: else if ( reg == 1 ) {
  7911  000F4C  05CE               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7912  000F4E  E10D               	bnz	l9883
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;main.c: 997: writeEEPROM(0x43 + 1, val);
  7916  000F50  6A09               	clrf	?_writeEEPROM+1,c
  7917  000F52  0E44               	movlw	68
  7918  000F54  6E08               	movwf	?_writeEEPROM,c
  7919  000F56  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7920  000F5A  ECB9  F020         	call	_writeEEPROM	;wreg free
  7921                           
  7922                           ;main.c: 998: rv = readEEPROM(0x43 + 1);
  7923  000F5E  6A09               	clrf	?_readEEPROM+1,c
  7924  000F60  0E44               	movlw	68
  7925  000F62  6E08               	movwf	?_readEEPROM,c
  7926  000F64  ECDA  F021         	call	_readEEPROM	;wreg free
  7927  000F68  D38D               	goto	L24
  7928  000F6A                     l9883:
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;main.c: 1001: else if ( (reg >= 2) && (reg <= 9) ) {
  7932  000F6A  0E01               	movlw	1
  7933  000F6C  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7934  000F6E  D17B               	goto	l10035
  7935                           
  7936                           ; BSR set to: 0
  7937  000F70  0E0A               	movlw	10
  7938  000F72  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7939  000F74  D178               	goto	l10035
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;main.c: 1003: if ( readEEPROM( 0x43 +
  7943                           ;main.c: 1004: 10 + reg - 2 ) &
  7944                           ;main.c: 1005: 0x80 ) {
  7945  000F76  0E4B               	movlw	75
  7946  000F78  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7947  000F7A  6E08               	movwf	?_readEEPROM,c
  7948  000F7C  6A09               	clrf	?_readEEPROM+1,c
  7949  000F7E  0E00               	movlw	0
  7950  000F80  2209               	addwfc	?_readEEPROM+1,f,c
  7951  000F82  ECDA  F021         	call	_readEEPROM	;wreg free
  7952  000F86  0100               	movlb	0	; () banked
  7953  000F88  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7954  000F8A  BFC7               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7955  000F8C  D157               	goto	l10033
  7956  000F8E  D37C               	goto	l10211
  7957  000F90                     l9891:
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 1012: bInfoEvent = 1;
  7961  000F90  0E01               	movlw	1
  7962  000F92  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;main.c: 1014: if ( 1 == val ) {
  7966  000F94  0451               	decf	vscp_writeAppReg@val,w,c
  7967  000F96  E126               	bnz	l304
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;main.c: 1016: LATBbits.LATB4 = 1;
  7971  000F98  888A               	bsf	3978,4,c	;volatile
  7972                           
  7973                           ; BSR set to: 0
  7974                           ;main.c: 1017: rv = LATBbits.LATB4;
  7975  000F9A  0E00               	movlw	0
  7976  000F9C  B88A               	btfsc	3978,4,c	;volatile
  7977  000F9E  0E01               	movlw	1
  7978  000FA0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  7979                           
  7980                           ; BSR set to: 0
  7981                           ;main.c: 1018: bOn = 1;
  7982  000FA2  0E01               	movlw	1
  7983  000FA4  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;main.c: 1021: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  7987  000FA6  6A09               	clrf	?_readEEPROM+1,c
  7988  000FA8  0E4D               	movlw	77
  7989  000FAA  6E08               	movwf	?_readEEPROM,c
  7990  000FAC  ECDA  F021         	call	_readEEPROM	;wreg free
  7991  000FB0  0100               	movlb	0	; () banked
  7992  000FB2  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  7993  000FB4  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  7994  000FB6  D368               	goto	l10211
  7995  000FB8                     l9903:
  7996                           
  7997                           ; BSR set to: 0
  7998                           ;main.c: 1022: relay_protection_timer[ 0 ] =
  7999                           ;main.c: 1023: readEEPROM( 0x43 + 34 ) * 256 +
  8000                           ;main.c: 1024: readEEPROM( 0x43 + 35 );
  8001  000FB8  6A09               	clrf	?_readEEPROM+1,c
  8002  000FBA  0E66               	movlw	102
  8003  000FBC  6E08               	movwf	?_readEEPROM,c
  8004  000FBE  ECDA  F021         	call	_readEEPROM	;wreg free
  8005  000FC2  0100               	movlb	0	; () banked
  8006  000FC4  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8007  000FC6  6A09               	clrf	?_readEEPROM+1,c
  8008  000FC8  0E65               	movlw	101
  8009  000FCA  6E08               	movwf	?_readEEPROM,c
  8010  000FCC  ECDA  F021         	call	_readEEPROM	;wreg free
  8011  000FD0  0100               	movlb	0	; () banked
  8012  000FD2  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8013  000FD4  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8014  000FD6  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8015  000FD8  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8016  000FDA  6F60               	movwf	_relay_protection_timer& (0+255),b
  8017  000FDC  0E00               	movlw	0
  8018  000FDE  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8019  000FE0  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8020  000FE2  D352               	goto	l10211
  8021  000FE4                     l304:
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;main.c: 1028: else if (0 == val) {
  8025  000FE4  6651               	tstfsz	vscp_writeAppReg@val,c
  8026  000FE6  D350               	goto	l10211
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;main.c: 1029: LATBbits.LATB4 = 0;
  8030  000FE8  988A               	bcf	3978,4,c	;volatile
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;main.c: 1030: rv = LATBbits.LATB4;
  8034  000FEA  0E00               	movlw	0
  8035  000FEC  B88A               	btfsc	3978,4,c	;volatile
  8036  000FEE  0E01               	movlw	1
  8037  000FF0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8038  000FF2                     l9909:
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;main.c: 1031: bOn = 0;
  8042  000FF2  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8043  000FF4  D349               	goto	l10211
  8044  000FF6                     l9911:
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;main.c: 1038: bInfoEvent = 1;
  8048  000FF6  0E01               	movlw	1
  8049  000FF8  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 1040: if (1 == val) {
  8053  000FFA  0451               	decf	vscp_writeAppReg@val,w,c
  8054  000FFC  E11D               	bnz	l310
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;main.c: 1042: LATBbits.LATB1 = 1;
  8058  000FFE  828A               	bsf	3978,1,c	;volatile
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;main.c: 1043: rv = LATBbits.LATB1;
  8062  001000  0E00               	movlw	0
  8063  001002  B28A               	btfsc	3978,1,c	;volatile
  8064  001004  0E01               	movlw	1
  8065  001006  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;main.c: 1044: bOn = 1;
  8069  001008  0E01               	movlw	1
  8070  00100A  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;main.c: 1046: if (readEEPROM(0x43 + 11) & 0x04) {
  8074  00100C  6A09               	clrf	?_readEEPROM+1,c
  8075  00100E  0E4E               	movlw	78
  8076  001010  6E08               	movwf	?_readEEPROM,c
  8077  001012  ECDA  F021         	call	_readEEPROM	;wreg free
  8078  001016  0100               	movlb	0	; () banked
  8079  001018  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8080  00101A  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8081  00101C  D335               	goto	l10211
  8082  00101E                     l9923:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;main.c: 1047: relay_protection_timer[ 1 ] =
  8086                           ;main.c: 1048: readEEPROM(0x43 + 36) * 256 +
  8087                           ;main.c: 1049: readEEPROM(0x43 + 37);
  8088  00101E  6A09               	clrf	?_readEEPROM+1,c
  8089  001020  0E68               	movlw	104
  8090  001022  6E08               	movwf	?_readEEPROM,c
  8091  001024  ECDA  F021         	call	_readEEPROM	;wreg free
  8092  001028  0100               	movlb	0	; () banked
  8093  00102A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8094  00102C  6A09               	clrf	?_readEEPROM+1,c
  8095  00102E  0E67               	movlw	103
  8096  001030  6E08               	movwf	?_readEEPROM,c
  8097  001032  ECDA  F021         	call	_readEEPROM	;wreg free
  8098  001036  D166               	goto	L25
  8099  001038                     l310:
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 1053: else if (0 == val) {
  8103  001038  6651               	tstfsz	vscp_writeAppReg@val,c
  8104  00103A  D326               	goto	l10211
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;main.c: 1054: LATBbits.LATB1 = 0;
  8108  00103C  928A               	bcf	3978,1,c	;volatile
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;main.c: 1055: rv = LATBbits.LATB1;
  8112  00103E  0E00               	movlw	0
  8113  001040  B28A               	btfsc	3978,1,c	;volatile
  8114  001042  0E01               	movlw	1
  8115  001044  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8116  001046  D7D5               	goto	l9909
  8117  001048                     l9931:
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;main.c: 1063: bInfoEvent = 1;
  8121  001048  0E01               	movlw	1
  8122  00104A  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;main.c: 1065: if (1 == val) {
  8126  00104C  0451               	decf	vscp_writeAppReg@val,w,c
  8127  00104E  E126               	bnz	l315
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;main.c: 1067: LATBbits.LATB0 = 1;
  8131  001050  808A               	bsf	3978,0,c	;volatile
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;main.c: 1068: rv = LATBbits.LATB0;
  8135  001052  0E00               	movlw	0
  8136  001054  B08A               	btfsc	3978,0,c	;volatile
  8137  001056  0E01               	movlw	1
  8138  001058  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;main.c: 1069: bOn = 1;
  8142  00105A  0E01               	movlw	1
  8143  00105C  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 1071: if ( readEEPROM(0x43 + 12) & 0x04) {
  8147  00105E  6A09               	clrf	?_readEEPROM+1,c
  8148  001060  0E4F               	movlw	79
  8149  001062  6E08               	movwf	?_readEEPROM,c
  8150  001064  ECDA  F021         	call	_readEEPROM	;wreg free
  8151  001068  0100               	movlb	0	; () banked
  8152  00106A  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8153  00106C  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8154  00106E  D30C               	goto	l10211
  8155  001070                     l9943:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;main.c: 1072: relay_protection_timer[ 2 ] =
  8159                           ;main.c: 1073: readEEPROM(0x43 + 38) * 256 +
  8160                           ;main.c: 1074: readEEPROM(0x43 + 39);
  8161  001070  6A09               	clrf	?_readEEPROM+1,c
  8162  001072  0E6A               	movlw	106
  8163  001074  6E08               	movwf	?_readEEPROM,c
  8164  001076  ECDA  F021         	call	_readEEPROM	;wreg free
  8165  00107A  0100               	movlb	0	; () banked
  8166  00107C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8167  00107E  6A09               	clrf	?_readEEPROM+1,c
  8168  001080  0E69               	movlw	105
  8169  001082  6E08               	movwf	?_readEEPROM,c
  8170  001084  ECDA  F021         	call	_readEEPROM	;wreg free
  8171  001088  0100               	movlb	0	; () banked
  8172  00108A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8173  00108C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8174  00108E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8175  001090  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8176  001092  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8177  001094  0E00               	movlw	0
  8178  001096  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8179  001098  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8180  00109A  D2F6               	goto	l10211
  8181  00109C                     l315:
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;main.c: 1078: else if (0 == val) {
  8185  00109C  6651               	tstfsz	vscp_writeAppReg@val,c
  8186  00109E  D2F4               	goto	l10211
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;main.c: 1079: LATBbits.LATB0 = 0;
  8190  0010A0  908A               	bcf	3978,0,c	;volatile
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;main.c: 1080: rv = LATBbits.LATB0;
  8194  0010A2  0E00               	movlw	0
  8195  0010A4  B08A               	btfsc	3978,0,c	;volatile
  8196  0010A6  0E01               	movlw	1
  8197  0010A8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8198  0010AA  D7A3               	goto	l9909
  8199  0010AC                     l9951:
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;main.c: 1089: bInfoEvent = 1;
  8203  0010AC  0E01               	movlw	1
  8204  0010AE  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;main.c: 1091: if (1 == val) {
  8208  0010B0  0451               	decf	vscp_writeAppReg@val,w,c
  8209  0010B2  E126               	bnz	l320
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;main.c: 1093: LATCbits.LATC7 = 1;
  8213  0010B4  8E8B               	bsf	3979,7,c	;volatile
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;main.c: 1094: rv = LATCbits.LATC7;
  8217  0010B6  0E00               	movlw	0
  8218  0010B8  BE8B               	btfsc	3979,7,c	;volatile
  8219  0010BA  0E01               	movlw	1
  8220  0010BC  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;main.c: 1095: bOn = 1;
  8224  0010BE  0E01               	movlw	1
  8225  0010C0  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;main.c: 1097: if (readEEPROM(0x43 + 13) & 0x04) {
  8229  0010C2  6A09               	clrf	?_readEEPROM+1,c
  8230  0010C4  0E50               	movlw	80
  8231  0010C6  6E08               	movwf	?_readEEPROM,c
  8232  0010C8  ECDA  F021         	call	_readEEPROM	;wreg free
  8233  0010CC  0100               	movlb	0	; () banked
  8234  0010CE  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8235  0010D0  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8236  0010D2  D2DA               	goto	l10211
  8237  0010D4                     l9963:
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;main.c: 1098: relay_protection_timer[ 3 ] =
  8241                           ;main.c: 1099: readEEPROM(0x43 + 40) * 256 +
  8242                           ;main.c: 1100: readEEPROM(0x43 + 41);
  8243  0010D4  6A09               	clrf	?_readEEPROM+1,c
  8244  0010D6  0E6C               	movlw	108
  8245  0010D8  6E08               	movwf	?_readEEPROM,c
  8246  0010DA  ECDA  F021         	call	_readEEPROM	;wreg free
  8247  0010DE  0100               	movlb	0	; () banked
  8248  0010E0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8249  0010E2  6A09               	clrf	?_readEEPROM+1,c
  8250  0010E4  0E6B               	movlw	107
  8251  0010E6  6E08               	movwf	?_readEEPROM,c
  8252  0010E8  ECDA  F021         	call	_readEEPROM	;wreg free
  8253  0010EC  0100               	movlb	0	; () banked
  8254  0010EE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8255  0010F0  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8256  0010F2  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8257  0010F4  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8258  0010F6  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8259  0010F8  0E00               	movlw	0
  8260  0010FA  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8261  0010FC  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8262  0010FE  D2C4               	goto	l10211
  8263  001100                     l320:
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;main.c: 1104: else if (0 == val) {
  8267  001100  6651               	tstfsz	vscp_writeAppReg@val,c
  8268  001102  D2C2               	goto	l10211
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;main.c: 1105: LATCbits.LATC7 = 0;
  8272  001104  9E8B               	bcf	3979,7,c	;volatile
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;main.c: 1106: rv = LATCbits.LATC7;
  8276  001106  0E00               	movlw	0
  8277  001108  BE8B               	btfsc	3979,7,c	;volatile
  8278  00110A  0E01               	movlw	1
  8279  00110C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8280  00110E  D771               	goto	l9909
  8281  001110                     l9971:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;main.c: 1115: bInfoEvent = 1;
  8285  001110  0E01               	movlw	1
  8286  001112  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;main.c: 1117: if (1 == val) {
  8290  001114  0451               	decf	vscp_writeAppReg@val,w,c
  8291  001116  E126               	bnz	l325
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;main.c: 1119: LATCbits.LATC6 = 1;
  8295  001118  8C8B               	bsf	3979,6,c	;volatile
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;main.c: 1120: rv = LATCbits.LATC6;
  8299  00111A  0E00               	movlw	0
  8300  00111C  BC8B               	btfsc	3979,6,c	;volatile
  8301  00111E  0E01               	movlw	1
  8302  001120  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;main.c: 1121: bOn = 1;
  8306  001122  0E01               	movlw	1
  8307  001124  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8308                           
  8309                           ; BSR set to: 0
  8310                           ;main.c: 1123: if (readEEPROM(0x43 + 14) & 0x04) {
  8311  001126  6A09               	clrf	?_readEEPROM+1,c
  8312  001128  0E51               	movlw	81
  8313  00112A  6E08               	movwf	?_readEEPROM,c
  8314  00112C  ECDA  F021         	call	_readEEPROM	;wreg free
  8315  001130  0100               	movlb	0	; () banked
  8316  001132  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8317  001134  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8318  001136  D2A8               	goto	l10211
  8319  001138                     l9983:
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;main.c: 1124: relay_protection_timer[ 4 ] =
  8323                           ;main.c: 1125: readEEPROM(0x43 + 42) * 256 +
  8324                           ;main.c: 1126: readEEPROM(0x43 + 43);
  8325  001138  6A09               	clrf	?_readEEPROM+1,c
  8326  00113A  0E6E               	movlw	110
  8327  00113C  6E08               	movwf	?_readEEPROM,c
  8328  00113E  ECDA  F021         	call	_readEEPROM	;wreg free
  8329  001142  0100               	movlb	0	; () banked
  8330  001144  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8331  001146  6A09               	clrf	?_readEEPROM+1,c
  8332  001148  0E6D               	movlw	109
  8333  00114A  6E08               	movwf	?_readEEPROM,c
  8334  00114C  ECDA  F021         	call	_readEEPROM	;wreg free
  8335  001150  0100               	movlb	0	; () banked
  8336  001152  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8337  001154  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8338  001156  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8339  001158  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8340  00115A  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8341  00115C  0E00               	movlw	0
  8342  00115E  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8343  001160  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8344  001162  D292               	goto	l10211
  8345  001164                     l325:
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;main.c: 1130: else if (0 == val) {
  8349  001164  6651               	tstfsz	vscp_writeAppReg@val,c
  8350  001166  D290               	goto	l10211
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;main.c: 1131: LATCbits.LATC6 = 0;
  8354  001168  9C8B               	bcf	3979,6,c	;volatile
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;main.c: 1132: rv = LATCbits.LATC6;
  8358  00116A  0E00               	movlw	0
  8359  00116C  BC8B               	btfsc	3979,6,c	;volatile
  8360  00116E  0E01               	movlw	1
  8361  001170  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8362  001172  D73F               	goto	l9909
  8363  001174                     l9991:
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;main.c: 1141: bInfoEvent = 1;
  8367  001174  0E01               	movlw	1
  8368  001176  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;main.c: 1143: if (1 == val) {
  8372  001178  0451               	decf	vscp_writeAppReg@val,w,c
  8373  00117A  E126               	bnz	l330
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;main.c: 1145: LATCbits.LATC5 = 1;
  8377  00117C  8A8B               	bsf	3979,5,c	;volatile
  8378                           
  8379                           ; BSR set to: 0
  8380                           ;main.c: 1146: rv = LATCbits.LATC5;
  8381  00117E  0E00               	movlw	0
  8382  001180  BA8B               	btfsc	3979,5,c	;volatile
  8383  001182  0E01               	movlw	1
  8384  001184  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;main.c: 1147: bOn = 1;
  8388  001186  0E01               	movlw	1
  8389  001188  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;main.c: 1149: if (readEEPROM(0x43 + 15) & 0x04) {
  8393  00118A  6A09               	clrf	?_readEEPROM+1,c
  8394  00118C  0E52               	movlw	82
  8395  00118E  6E08               	movwf	?_readEEPROM,c
  8396  001190  ECDA  F021         	call	_readEEPROM	;wreg free
  8397  001194  0100               	movlb	0	; () banked
  8398  001196  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8399  001198  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8400  00119A  D276               	goto	l10211
  8401  00119C                     l10003:
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;main.c: 1150: relay_protection_timer[ 5 ] =
  8405                           ;main.c: 1151: readEEPROM(0x43 + 44) * 256 +
  8406                           ;main.c: 1152: readEEPROM(0x43 + 45);
  8407  00119C  6A09               	clrf	?_readEEPROM+1,c
  8408  00119E  0E70               	movlw	112
  8409  0011A0  6E08               	movwf	?_readEEPROM,c
  8410  0011A2  ECDA  F021         	call	_readEEPROM	;wreg free
  8411  0011A6  0100               	movlb	0	; () banked
  8412  0011A8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8413  0011AA  6A09               	clrf	?_readEEPROM+1,c
  8414  0011AC  0E6F               	movlw	111
  8415  0011AE  6E08               	movwf	?_readEEPROM,c
  8416  0011B0  ECDA  F021         	call	_readEEPROM	;wreg free
  8417  0011B4  0100               	movlb	0	; () banked
  8418  0011B6  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8419  0011B8  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8420  0011BA  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8421  0011BC  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8422  0011BE  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8423  0011C0  0E00               	movlw	0
  8424  0011C2  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8425  0011C4  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8426  0011C6  D260               	goto	l10211
  8427  0011C8                     l330:
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;main.c: 1156: else if (0 == val) {
  8431  0011C8  6651               	tstfsz	vscp_writeAppReg@val,c
  8432  0011CA  D25E               	goto	l10211
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;main.c: 1157: LATCbits.LATC5 = 0;
  8436  0011CC  9A8B               	bcf	3979,5,c	;volatile
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;main.c: 1158: rv = LATCbits.LATC5;
  8440  0011CE  0E00               	movlw	0
  8441  0011D0  BA8B               	btfsc	3979,5,c	;volatile
  8442  0011D2  0E01               	movlw	1
  8443  0011D4  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8444  0011D6  D70D               	goto	l9909
  8445  0011D8                     l10011:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;main.c: 1166: bInfoEvent = 1;
  8449  0011D8  0E01               	movlw	1
  8450  0011DA  6FCA               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;main.c: 1168: if (1 == val) {
  8454  0011DC  0451               	decf	vscp_writeAppReg@val,w,c
  8455  0011DE  E126               	bnz	l335
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;main.c: 1170: LATCbits.LATC4 = 1;
  8459  0011E0  888B               	bsf	3979,4,c	;volatile
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;main.c: 1171: rv = LATCbits.LATC4;
  8463  0011E2  0E00               	movlw	0
  8464  0011E4  B88B               	btfsc	3979,4,c	;volatile
  8465  0011E6  0E01               	movlw	1
  8466  0011E8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8467                           
  8468                           ; BSR set to: 0
  8469                           ;main.c: 1172: bOn = 1;
  8470  0011EA  0E01               	movlw	1
  8471  0011EC  6FCC               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;main.c: 1174: if (readEEPROM(0x43 + 16) & 0x04) {
  8475  0011EE  6A09               	clrf	?_readEEPROM+1,c
  8476  0011F0  0E53               	movlw	83
  8477  0011F2  6E08               	movwf	?_readEEPROM,c
  8478  0011F4  ECDA  F021         	call	_readEEPROM	;wreg free
  8479  0011F8  0100               	movlb	0	; () banked
  8480  0011FA  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8481  0011FC  A5C7               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8482  0011FE  D244               	goto	l10211
  8483  001200                     l10023:
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;main.c: 1175: relay_protection_timer[ 6 ] =
  8487                           ;main.c: 1176: readEEPROM(0x43 + 46) * 256 +
  8488                           ;main.c: 1177: readEEPROM(0x43 + 47);
  8489  001200  6A09               	clrf	?_readEEPROM+1,c
  8490  001202  0E72               	movlw	114
  8491  001204  6E08               	movwf	?_readEEPROM,c
  8492  001206  ECDA  F021         	call	_readEEPROM	;wreg free
  8493  00120A  0100               	movlb	0	; () banked
  8494  00120C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8495  00120E  6A09               	clrf	?_readEEPROM+1,c
  8496  001210  0E71               	movlw	113
  8497  001212  6E08               	movwf	?_readEEPROM,c
  8498  001214  ECDA  F021         	call	_readEEPROM	;wreg free
  8499  001218  0100               	movlb	0	; () banked
  8500  00121A  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8501  00121C  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8502  00121E  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8503  001220  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8504  001222  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8505  001224  0E00               	movlw	0
  8506  001226  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8507  001228  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8508  00122A  D22E               	goto	l10211
  8509  00122C                     l335:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;main.c: 1181: else if (0 == val) {
  8513  00122C  6651               	tstfsz	vscp_writeAppReg@val,c
  8514  00122E  D22C               	goto	l10211
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;main.c: 1182: LATCbits.LATC4 = 0;
  8518  001230  988B               	bcf	3979,4,c	;volatile
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 1183: rv = LATCbits.LATC4;
  8522  001232  0E00               	movlw	0
  8523  001234  B88B               	btfsc	3979,4,c	;volatile
  8524  001236  0E01               	movlw	1
  8525  001238  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8526  00123A  D6DB               	goto	l9909
  8527  00123C                     l10033:
  8528                           
  8529                           ; BSR set to: 0
  8530  00123C  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8531                           
  8532                           ; Switch size 1, requested type "space"
  8533                           ; Number of cases is 7, Range of values is 2 to 8
  8534                           ; switch strategies available:
  8535                           ; Name         Instructions Cycles
  8536                           ; simple_byte           22    12 (average)
  8537                           ;	Chosen strategy is simple_byte
  8538  00123E  0A02               	xorlw	2	; case 2
  8539  001240  E101 D6A6          	bz	l9891
  8540  001244  0A01               	xorlw	1	; case 3
  8541  001246  E101 D6D6          	bz	l9911
  8542  00124A  0A07               	xorlw	7	; case 4
  8543  00124C  E101 D6FC          	bz	l9931
  8544  001250  0A01               	xorlw	1	; case 5
  8545  001252  E101 D72B          	bz	l9951
  8546  001256  0A03               	xorlw	3	; case 6
  8547  001258  E101 D75A          	bz	l9971
  8548  00125C  0A01               	xorlw	1	; case 7
  8549  00125E  E08A               	bz	l9991
  8550  001260  0A0F               	xorlw	15	; case 8
  8551  001262  E0BA               	bz	l10011
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;main.c: 1189: }
  8555                           ;main.c: 1190: }
  8556  001264  D211               	goto	l10211
  8557  001266                     l10035:
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;main.c: 1193: else if ( (reg >= 10 ) &&
  8561                           ;main.c: 1194: (reg <= 17) ) {
  8562  001266  0E09               	movlw	9
  8563  001268  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8564  00126A  D10A               	goto	l10143
  8565                           
  8566                           ; BSR set to: 0
  8567  00126C  0E12               	movlw	18
  8568  00126E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8569  001270  D107               	goto	l10143
  8570  001272  D0F2               	goto	l10141
  8571  001274                     l10041:
  8572                           
  8573                           ; BSR set to: 0
  8574                           ;main.c: 1200: writeEEPROM( 0x43 + reg, val );
  8575  001274  0E43               	movlw	67
  8576  001276  DA41               	call	PL4	;call to abstracted procedure
  8577  001278  ECB9  F020         	call	_writeEEPROM	;wreg free
  8578                           
  8579                           ;main.c: 1201: rv = readEEPROM( 0x43 + reg );
  8580  00127C  DA46               	call	PL6	;call to abstracted procedure
  8581  00127E  ECDA  F021         	call	_readEEPROM	;wreg free
  8582  001282  0100               	movlb	0	; () banked
  8583  001284  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;main.c: 1203: if ( val & 0x01 ) {
  8587  001286  A051               	btfss	vscp_writeAppReg@val,0,c
  8588  001288  D010               	goto	l10051
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;main.c: 1205: LATBbits.LATB4 = 0;
  8592  00128A  988A               	bcf	3978,4,c	;volatile
  8593                           
  8594                           ;main.c: 1206: bOn = 0;
  8595  00128C  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;main.c: 1208: relay_pulse_flags |= 0x01;
  8599  00128E  818A               	bsf	_relay_pulse_flags& (0+255),0,b
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;main.c: 1209: relay_pulse_timer[ 0 ] =
  8603                           ;main.c: 1210: readEEPROM( 0x43 + 18 ) * 256 +
  8604                           ;main.c: 1211: readEEPROM( 0x43 + 19 );
  8605  001290  6A09               	clrf	?_readEEPROM+1,c
  8606  001292  0E56               	movlw	86
  8607  001294  6E08               	movwf	?_readEEPROM,c
  8608  001296  ECDA  F021         	call	_readEEPROM	;wreg free
  8609  00129A  0100               	movlb	0	; () banked
  8610  00129C  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8611  00129E  6A09               	clrf	?_readEEPROM+1,c
  8612  0012A0  0E55               	movlw	85
  8613  0012A2  6E08               	movwf	?_readEEPROM,c
  8614  0012A4  ECDA  F021         	call	_readEEPROM	;wreg free
  8615  0012A8  DA38               	call	PL40	;call to abstracted procedure
  8616  0012AA                     l10051:
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;main.c: 1212: }
  8620                           ;main.c: 1214: if ( val & 0x04 ) {
  8621  0012AA  B451               	btfsc	vscp_writeAppReg@val,2,c
  8622  0012AC  D685               	goto	l9903
  8623  0012AE  D1EC               	goto	l10211
  8624  0012B0                     l10055:
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;main.c: 1223: writeEEPROM( 0x43 + reg, val );
  8628  0012B0  0E43               	movlw	67
  8629  0012B2  DA23               	call	PL4	;call to abstracted procedure
  8630  0012B4  ECB9  F020         	call	_writeEEPROM	;wreg free
  8631                           
  8632                           ;main.c: 1224: rv = readEEPROM( 0x43 + reg );
  8633  0012B8  DA28               	call	PL6	;call to abstracted procedure
  8634  0012BA  ECDA  F021         	call	_readEEPROM	;wreg free
  8635  0012BE  0100               	movlb	0	; () banked
  8636  0012C0  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 1226: if ( val & 0x01 ) {
  8640  0012C2  A051               	btfss	vscp_writeAppReg@val,0,c
  8641  0012C4  D011               	goto	l10065
  8642                           
  8643                           ; BSR set to: 0
  8644                           ;main.c: 1228: LATBbits.LATB1 = 0;
  8645  0012C6  928A               	bcf	3978,1,c	;volatile
  8646                           
  8647                           ;main.c: 1229: bOn = 0;
  8648  0012C8  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;main.c: 1231: relay_pulse_flags |= 0x02;
  8652  0012CA  838A               	bsf	_relay_pulse_flags& (0+255),1,b
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;main.c: 1232: relay_pulse_timer[ 1 ] =
  8656                           ;main.c: 1233: readEEPROM( 0x43 + 18) * 256 +
  8657                           ;main.c: 1234: readEEPROM( 0x43 + 19);
  8658  0012CC  6A09               	clrf	?_readEEPROM+1,c
  8659  0012CE  0E56               	movlw	86
  8660  0012D0  6E08               	movwf	?_readEEPROM,c
  8661  0012D2  ECDA  F021         	call	_readEEPROM	;wreg free
  8662  0012D6  0100               	movlb	0	; () banked
  8663  0012D8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8664  0012DA  6A09               	clrf	?_readEEPROM+1,c
  8665  0012DC  0E55               	movlw	85
  8666  0012DE  6E08               	movwf	?_readEEPROM,c
  8667  0012E0  ECDA  F021         	call	_readEEPROM	;wreg free
  8668  0012E4  0100               	movlb	0	; () banked
  8669  0012E6  DA23               	call	PL50	;call to abstracted procedure
  8670  0012E8                     l10065:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;main.c: 1235: }
  8674                           ;main.c: 1237: if ( val & 0x04 ) {
  8675  0012E8  A451               	btfss	vscp_writeAppReg@val,2,c
  8676  0012EA  D1CE               	goto	l10211
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;main.c: 1238: relay_protection_timer[ 1 ] =
  8680                           ;main.c: 1239: readEEPROM( 0x43 + 34 ) * 256 +
  8681                           ;main.c: 1240: readEEPROM( 0x43 + 35 );
  8682  0012EC  6A09               	clrf	?_readEEPROM+1,c
  8683  0012EE  0E66               	movlw	102
  8684  0012F0  6E08               	movwf	?_readEEPROM,c
  8685  0012F2  ECDA  F021         	call	_readEEPROM	;wreg free
  8686  0012F6  0100               	movlb	0	; () banked
  8687  0012F8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8688  0012FA  6A09               	clrf	?_readEEPROM+1,c
  8689  0012FC  0E65               	movlw	101
  8690  0012FE  6E08               	movwf	?_readEEPROM,c
  8691  001300  ECDA  F021         	call	_readEEPROM	;wreg free
  8692  001304                     L25:
  8693  001304  0100               	movlb	0	; () banked
  8694  001306  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8695  001308  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8696  00130A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  8697  00130C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8698  00130E  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8699  001310  0E00               	movlw	0
  8700  001312  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8701  001314  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8702  001316  D1B8               	goto	l10211
  8703  001318                     l10069:
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;main.c: 1246: writeEEPROM( 0x43 + reg, val );
  8707  001318  0E43               	movlw	67
  8708  00131A  D9EF               	call	PL4	;call to abstracted procedure
  8709  00131C  ECB9  F020         	call	_writeEEPROM	;wreg free
  8710                           
  8711                           ;main.c: 1247: rv = readEEPROM( 0x43 + reg );
  8712  001320  D9F4               	call	PL6	;call to abstracted procedure
  8713  001322  ECDA  F021         	call	_readEEPROM	;wreg free
  8714  001326  0100               	movlb	0	; () banked
  8715  001328  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8716                           
  8717                           ; BSR set to: 0
  8718                           ;main.c: 1249: if ( val & 0x01 ) {
  8719  00132A  A051               	btfss	vscp_writeAppReg@val,0,c
  8720  00132C  D012               	goto	l10079
  8721                           
  8722                           ; BSR set to: 0
  8723                           ;main.c: 1251: LATBbits.LATB0 = 0;
  8724  00132E  908A               	bcf	3978,0,c	;volatile
  8725                           
  8726                           ;main.c: 1252: bOn = 0;
  8727  001330  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;main.c: 1254: relay_pulse_flags |= 0x04;
  8731  001332  858A               	bsf	_relay_pulse_flags& (0+255),2,b
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;main.c: 1255: relay_pulse_timer[ 2 ] =
  8735                           ;main.c: 1256: readEEPROM( 0x43 + 22) * 256 +
  8736                           ;main.c: 1257: readEEPROM( 0x43 + 23);
  8737  001334  6A09               	clrf	?_readEEPROM+1,c
  8738  001336  0E5A               	movlw	90
  8739  001338  6E08               	movwf	?_readEEPROM,c
  8740  00133A  ECDA  F021         	call	_readEEPROM	;wreg free
  8741  00133E  0100               	movlb	0	; () banked
  8742  001340  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8743  001342  6A09               	clrf	?_readEEPROM+1,c
  8744  001344  0E59               	movlw	89
  8745  001346  6E08               	movwf	?_readEEPROM,c
  8746  001348  ECDA  F021         	call	_readEEPROM	;wreg free
  8747  00134C  0100               	movlb	0	; () banked
  8748  00134E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8749  001350  DA07               	call	PL64	;call to abstracted procedure
  8750  001352                     l10079:
  8751                           
  8752                           ; BSR set to: 0
  8753                           ;main.c: 1258: }
  8754                           ;main.c: 1260: if ( val & 0x04 ) {
  8755  001352  B451               	btfsc	vscp_writeAppReg@val,2,c
  8756  001354  D68D               	goto	l9943
  8757  001356  D198               	goto	l10211
  8758  001358                     l10083:
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;main.c: 1269: writeEEPROM( 0x43 + reg, val );
  8762  001358  0E43               	movlw	67
  8763  00135A  D9CF               	call	PL4	;call to abstracted procedure
  8764  00135C  ECB9  F020         	call	_writeEEPROM	;wreg free
  8765                           
  8766                           ;main.c: 1270: rv = readEEPROM( 0x43 + reg );
  8767  001360  D9D4               	call	PL6	;call to abstracted procedure
  8768  001362  ECDA  F021         	call	_readEEPROM	;wreg free
  8769  001366  0100               	movlb	0	; () banked
  8770  001368  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;main.c: 1272: if ( val & 0x01 ) {
  8774  00136A  A051               	btfss	vscp_writeAppReg@val,0,c
  8775  00136C  D012               	goto	l10093
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;main.c: 1274: LATCbits.LATC7 = 0;
  8779  00136E  9E8B               	bcf	3979,7,c	;volatile
  8780                           
  8781                           ;main.c: 1275: bOn = 0;
  8782  001370  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;main.c: 1277: relay_pulse_flags |= 0x08;
  8786  001372  878A               	bsf	_relay_pulse_flags& (0+255),3,b
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;main.c: 1278: relay_pulse_timer[ 3 ] =
  8790                           ;main.c: 1279: readEEPROM( 0x43 + 24) * 256 +
  8791                           ;main.c: 1280: readEEPROM( 0x43 + 25);
  8792  001374  6A09               	clrf	?_readEEPROM+1,c
  8793  001376  0E5C               	movlw	92
  8794  001378  6E08               	movwf	?_readEEPROM,c
  8795  00137A  ECDA  F021         	call	_readEEPROM	;wreg free
  8796  00137E  0100               	movlb	0	; () banked
  8797  001380  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8798  001382  6A09               	clrf	?_readEEPROM+1,c
  8799  001384  0E5B               	movlw	91
  8800  001386  6E08               	movwf	?_readEEPROM,c
  8801  001388  ECDA  F021         	call	_readEEPROM	;wreg free
  8802  00138C  0100               	movlb	0	; () banked
  8803  00138E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8804  001390  D9EF               	call	PL66	;call to abstracted procedure
  8805  001392                     l10093:
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;main.c: 1281: }
  8809                           ;main.c: 1283: if ( val & 0x04 ) {
  8810  001392  B451               	btfsc	vscp_writeAppReg@val,2,c
  8811  001394  D69F               	goto	l9963
  8812  001396  D178               	goto	l10211
  8813  001398                     l10097:
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;main.c: 1292: writeEEPROM( 0x43 + reg, val );
  8817  001398  0E43               	movlw	67
  8818  00139A  D9AF               	call	PL4	;call to abstracted procedure
  8819  00139C  ECB9  F020         	call	_writeEEPROM	;wreg free
  8820                           
  8821                           ;main.c: 1293: rv = readEEPROM( 0x43 + reg );
  8822  0013A0  D9B4               	call	PL6	;call to abstracted procedure
  8823  0013A2  ECDA  F021         	call	_readEEPROM	;wreg free
  8824  0013A6  0100               	movlb	0	; () banked
  8825  0013A8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8826                           
  8827                           ; BSR set to: 0
  8828                           ;main.c: 1295: if ( val & 0x01 ) {
  8829  0013AA  A051               	btfss	vscp_writeAppReg@val,0,c
  8830  0013AC  D012               	goto	l10107
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;main.c: 1297: LATCbits.LATC6 = 0;
  8834  0013AE  9C8B               	bcf	3979,6,c	;volatile
  8835                           
  8836                           ;main.c: 1298: bOn = 0;
  8837  0013B0  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;main.c: 1300: relay_pulse_flags |= 0x10;
  8841  0013B2  898A               	bsf	_relay_pulse_flags& (0+255),4,b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;main.c: 1301: relay_pulse_timer[ 4 ] =
  8845                           ;main.c: 1302: readEEPROM( 0x43 + 26) * 256 +
  8846                           ;main.c: 1303: readEEPROM( 0x43 + 27);
  8847  0013B4  6A09               	clrf	?_readEEPROM+1,c
  8848  0013B6  0E5E               	movlw	94
  8849  0013B8  6E08               	movwf	?_readEEPROM,c
  8850  0013BA  ECDA  F021         	call	_readEEPROM	;wreg free
  8851  0013BE  0100               	movlb	0	; () banked
  8852  0013C0  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8853  0013C2  6A09               	clrf	?_readEEPROM+1,c
  8854  0013C4  0E5D               	movlw	93
  8855  0013C6  6E08               	movwf	?_readEEPROM,c
  8856  0013C8  ECDA  F021         	call	_readEEPROM	;wreg free
  8857  0013CC  0100               	movlb	0	; () banked
  8858  0013CE  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8859  0013D0  D9BF               	call	PL62	;call to abstracted procedure
  8860  0013D2                     l10107:
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;main.c: 1304: }
  8864                           ;main.c: 1306: if ( val & 0x04 ) {
  8865  0013D2  B451               	btfsc	vscp_writeAppReg@val,2,c
  8866  0013D4  D6B1               	goto	l9983
  8867  0013D6  D158               	goto	l10211
  8868  0013D8                     l10111:
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;main.c: 1315: writeEEPROM( 0x43 + reg, val );
  8872  0013D8  0E43               	movlw	67
  8873  0013DA  D98F               	call	PL4	;call to abstracted procedure
  8874  0013DC  ECB9  F020         	call	_writeEEPROM	;wreg free
  8875                           
  8876                           ;main.c: 1316: rv = readEEPROM( 0x43 + reg );
  8877  0013E0  D994               	call	PL6	;call to abstracted procedure
  8878  0013E2  ECDA  F021         	call	_readEEPROM	;wreg free
  8879  0013E6  0100               	movlb	0	; () banked
  8880  0013E8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;main.c: 1318: if ( val & 0x01 ) {
  8884  0013EA  A051               	btfss	vscp_writeAppReg@val,0,c
  8885  0013EC  D012               	goto	l10121
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1320: LATCbits.LATC5 = 0;
  8889  0013EE  9A8B               	bcf	3979,5,c	;volatile
  8890                           
  8891                           ;main.c: 1321: bOn = 0;
  8892  0013F0  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8893                           
  8894                           ; BSR set to: 0
  8895                           ;main.c: 1323: relay_pulse_flags |= 0x20;
  8896  0013F2  8B8A               	bsf	_relay_pulse_flags& (0+255),5,b
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;main.c: 1324: relay_pulse_timer[ 5 ] =
  8900                           ;main.c: 1325: readEEPROM( 0x43 + 28) * 256 +
  8901                           ;main.c: 1326: readEEPROM( 0x43 + 29);
  8902  0013F4  6A09               	clrf	?_readEEPROM+1,c
  8903  0013F6  0E60               	movlw	96
  8904  0013F8  6E08               	movwf	?_readEEPROM,c
  8905  0013FA  ECDA  F021         	call	_readEEPROM	;wreg free
  8906  0013FE  0100               	movlb	0	; () banked
  8907  001400  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8908  001402  6A09               	clrf	?_readEEPROM+1,c
  8909  001404  0E5F               	movlw	95
  8910  001406  6E08               	movwf	?_readEEPROM,c
  8911  001408  ECDA  F021         	call	_readEEPROM	;wreg free
  8912  00140C  0100               	movlb	0	; () banked
  8913  00140E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8914  001410  D997               	call	PL60	;call to abstracted procedure
  8915  001412                     l10121:
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;main.c: 1327: }
  8919                           ;main.c: 1329: if ( val & 0x04 ) {
  8920  001412  B451               	btfsc	vscp_writeAppReg@val,2,c
  8921  001414  D6C3               	goto	l10003
  8922  001416  D138               	goto	l10211
  8923  001418                     l10125:
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;main.c: 1338: writeEEPROM( 0x43 + reg, val );
  8927  001418  0E43               	movlw	67
  8928  00141A  D96F               	call	PL4	;call to abstracted procedure
  8929  00141C  ECB9  F020         	call	_writeEEPROM	;wreg free
  8930                           
  8931                           ;main.c: 1339: rv = readEEPROM( 0x43 + reg );
  8932  001420  D974               	call	PL6	;call to abstracted procedure
  8933  001422  ECDA  F021         	call	_readEEPROM	;wreg free
  8934  001426  0100               	movlb	0	; () banked
  8935  001428  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;main.c: 1341: if ( val & 0x01 ) {
  8939  00142A  A051               	btfss	vscp_writeAppReg@val,0,c
  8940  00142C  D012               	goto	l10135
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;main.c: 1343: LATCbits.LATC4 = 0;
  8944  00142E  988B               	bcf	3979,4,c	;volatile
  8945                           
  8946                           ;main.c: 1344: bOn = 0;
  8947  001430  6BCC               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;main.c: 1346: relay_pulse_flags |= 0x40;
  8951  001432  8D8A               	bsf	_relay_pulse_flags& (0+255),6,b
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1347: relay_pulse_timer[ 6 ] =
  8955                           ;main.c: 1348: readEEPROM( 0x43 + 30) * 256 +
  8956                           ;main.c: 1349: readEEPROM( 0x43 + 31);
  8957  001434  6A09               	clrf	?_readEEPROM+1,c
  8958  001436  0E62               	movlw	98
  8959  001438  6E08               	movwf	?_readEEPROM,c
  8960  00143A  ECDA  F021         	call	_readEEPROM	;wreg free
  8961  00143E  0100               	movlb	0	; () banked
  8962  001440  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  8963  001442  6A09               	clrf	?_readEEPROM+1,c
  8964  001444  0E61               	movlw	97
  8965  001446  6E08               	movwf	?_readEEPROM,c
  8966  001448  ECDA  F021         	call	_readEEPROM	;wreg free
  8967  00144C  0100               	movlb	0	; () banked
  8968  00144E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8969  001450  D997               	call	PL68	;call to abstracted procedure
  8970  001452                     l10135:
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;main.c: 1350: }
  8974                           ;main.c: 1352: if ( val & 0x04 ) {
  8975  001452  B451               	btfsc	vscp_writeAppReg@val,2,c
  8976  001454  D6D5               	goto	l10023
  8977  001456  D118               	goto	l10211
  8978  001458                     l10141:
  8979                           
  8980                           ; BSR set to: 0
  8981  001458  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8982                           
  8983                           ; Switch size 1, requested type "space"
  8984                           ; Number of cases is 7, Range of values is 10 to 16
  8985                           ; switch strategies available:
  8986                           ; Name         Instructions Cycles
  8987                           ; simple_byte           22    12 (average)
  8988                           ;	Chosen strategy is simple_byte
  8989  00145A  0A0A               	xorlw	10	; case 10
  8990  00145C  E101 D70A          	bz	l10041
  8991  001460  0A01               	xorlw	1	; case 11
  8992  001462  E101 D725          	bz	l10055
  8993  001466  0A07               	xorlw	7	; case 12
  8994  001468  E101 D756          	bz	l10069
  8995  00146C  0A01               	xorlw	1	; case 13
  8996  00146E  E101 D773          	bz	l10083
  8997  001472  0A03               	xorlw	3	; case 14
  8998  001474  E091               	bz	l10097
  8999  001476  0A01               	xorlw	1	; case 15
  9000  001478  E0AF               	bz	l10111
  9001  00147A  0A1F               	xorlw	31	; case 16
  9002  00147C  E0CD               	bz	l10125
  9003  00147E  D104               	goto	l10211
  9004  001480                     l10143:
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;main.c: 1363: else if ( (reg >= 18 ) &&
  9008                           ;main.c: 1364: (reg <= 33 ) ) {
  9009  001480  0E11               	movlw	17
  9010  001482  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9011  001484  D0A3               	goto	l10169
  9012                           
  9013                           ; BSR set to: 0
  9014  001486  0E22               	movlw	34
  9015  001488  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9016  00148A  D0A0               	goto	l10169
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;main.c: 1367: writeEEPROM( 0x43 + reg, val );
  9020  00148C  0E43               	movlw	67
  9021  00148E  D935               	call	PL4	;call to abstracted procedure
  9022  001490  ECB9  F020         	call	_writeEEPROM	;wreg free
  9023                           
  9024                           ;main.c: 1368: rv = readEEPROM( 0x43 + reg );
  9025  001494  D93A               	call	PL6	;call to abstracted procedure
  9026  001496  ECDA  F021         	call	_readEEPROM	;wreg free
  9027  00149A  0100               	movlb	0	; () banked
  9028  00149C  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9029                           
  9030                           ;main.c: 1372: switch ( reg ) {
  9031  00149E  D083               	goto	l10167
  9032  0014A0                     l10149:
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;main.c: 1375: relay_pulse_timer[ 0 ] =
  9036                           ;main.c: 1376: readEEPROM( 0x43 + 18) * 256 +
  9037                           ;main.c: 1377: readEEPROM( 0x43 + 19);
  9038  0014A0  6A09               	clrf	?_readEEPROM+1,c
  9039  0014A2  0E56               	movlw	86
  9040  0014A4  6E08               	movwf	?_readEEPROM,c
  9041  0014A6  ECDA  F021         	call	_readEEPROM	;wreg free
  9042  0014AA  0100               	movlb	0	; () banked
  9043  0014AC  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9044  0014AE  6A09               	clrf	?_readEEPROM+1,c
  9045  0014B0  0E55               	movlw	85
  9046  0014B2  6E08               	movwf	?_readEEPROM,c
  9047  0014B4  ECDA  F021         	call	_readEEPROM	;wreg free
  9048  0014B8  D930               	call	PL40	;call to abstracted procedure
  9049                           
  9050                           ;main.c: 1378: break;
  9051  0014BA  D0E6               	goto	l10211
  9052  0014BC                     l10151:
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;main.c: 1381: relay_pulse_timer[ 1 ] =
  9056                           ;main.c: 1382: readEEPROM( 0x43 + 20) * 256 +
  9057                           ;main.c: 1383: readEEPROM( 0x43 + 21);
  9058  0014BC  6A09               	clrf	?_readEEPROM+1,c
  9059  0014BE  0E58               	movlw	88
  9060  0014C0  6E08               	movwf	?_readEEPROM,c
  9061  0014C2  ECDA  F021         	call	_readEEPROM	;wreg free
  9062  0014C6  0100               	movlb	0	; () banked
  9063  0014C8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9064  0014CA  6A09               	clrf	?_readEEPROM+1,c
  9065  0014CC  0E57               	movlw	87
  9066  0014CE  6E08               	movwf	?_readEEPROM,c
  9067  0014D0  ECDA  F021         	call	_readEEPROM	;wreg free
  9068  0014D4  0100               	movlb	0	; () banked
  9069  0014D6  D92B               	call	PL50	;call to abstracted procedure
  9070                           
  9071                           ;main.c: 1384: break;
  9072  0014D8  D0D7               	goto	l10211
  9073  0014DA                     l10153:
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 1387: relay_pulse_timer[ 2 ] =
  9077                           ;main.c: 1388: readEEPROM( 0x43 + 22) * 256 +
  9078                           ;main.c: 1389: readEEPROM( 0x43 + 23);
  9079  0014DA  6A09               	clrf	?_readEEPROM+1,c
  9080  0014DC  0E5A               	movlw	90
  9081  0014DE  6E08               	movwf	?_readEEPROM,c
  9082  0014E0  ECDA  F021         	call	_readEEPROM	;wreg free
  9083  0014E4  0100               	movlb	0	; () banked
  9084  0014E6  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9085  0014E8  6A09               	clrf	?_readEEPROM+1,c
  9086  0014EA  0E59               	movlw	89
  9087  0014EC  6E08               	movwf	?_readEEPROM,c
  9088  0014EE  ECDA  F021         	call	_readEEPROM	;wreg free
  9089  0014F2  0100               	movlb	0	; () banked
  9090  0014F4  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9091  0014F6  D934               	call	PL64	;call to abstracted procedure
  9092                           
  9093                           ;main.c: 1390: break;
  9094  0014F8  D0C7               	goto	l10211
  9095  0014FA                     l10155:
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;main.c: 1393: relay_pulse_timer[ 3 ] =
  9099                           ;main.c: 1394: readEEPROM( 0x43 + 24) * 256 +
  9100                           ;main.c: 1395: readEEPROM( 0x43 + 25);
  9101  0014FA  6A09               	clrf	?_readEEPROM+1,c
  9102  0014FC  0E5C               	movlw	92
  9103  0014FE  6E08               	movwf	?_readEEPROM,c
  9104  001500  ECDA  F021         	call	_readEEPROM	;wreg free
  9105  001504  0100               	movlb	0	; () banked
  9106  001506  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9107  001508  6A09               	clrf	?_readEEPROM+1,c
  9108  00150A  0E5B               	movlw	91
  9109  00150C  6E08               	movwf	?_readEEPROM,c
  9110  00150E  ECDA  F021         	call	_readEEPROM	;wreg free
  9111  001512  0100               	movlb	0	; () banked
  9112  001514  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9113  001516  D92C               	call	PL66	;call to abstracted procedure
  9114                           
  9115                           ;main.c: 1396: break;
  9116  001518  D0B7               	goto	l10211
  9117  00151A                     l10157:
  9118                           
  9119                           ; BSR set to: 0
  9120                           ;main.c: 1399: relay_pulse_timer[ 4 ] =
  9121                           ;main.c: 1400: readEEPROM( 0x43 + 26) * 256 +
  9122                           ;main.c: 1401: readEEPROM( 0x43 + 27);
  9123  00151A  6A09               	clrf	?_readEEPROM+1,c
  9124  00151C  0E5E               	movlw	94
  9125  00151E  6E08               	movwf	?_readEEPROM,c
  9126  001520  ECDA  F021         	call	_readEEPROM	;wreg free
  9127  001524  0100               	movlb	0	; () banked
  9128  001526  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9129  001528  6A09               	clrf	?_readEEPROM+1,c
  9130  00152A  0E5D               	movlw	93
  9131  00152C  6E08               	movwf	?_readEEPROM,c
  9132  00152E  ECDA  F021         	call	_readEEPROM	;wreg free
  9133  001532  0100               	movlb	0	; () banked
  9134  001534  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9135  001536  D90C               	call	PL62	;call to abstracted procedure
  9136                           
  9137                           ;main.c: 1402: break;
  9138  001538  D0A7               	goto	l10211
  9139  00153A                     l10159:
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;main.c: 1405: relay_pulse_timer[ 5 ] =
  9143                           ;main.c: 1406: readEEPROM( 0x43 + 28) * 256 +
  9144                           ;main.c: 1407: readEEPROM( 0x43 + 29);
  9145  00153A  6A09               	clrf	?_readEEPROM+1,c
  9146  00153C  0E60               	movlw	96
  9147  00153E  6E08               	movwf	?_readEEPROM,c
  9148  001540  ECDA  F021         	call	_readEEPROM	;wreg free
  9149  001544  0100               	movlb	0	; () banked
  9150  001546  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9151  001548  6A09               	clrf	?_readEEPROM+1,c
  9152  00154A  0E5F               	movlw	95
  9153  00154C  6E08               	movwf	?_readEEPROM,c
  9154  00154E  ECDA  F021         	call	_readEEPROM	;wreg free
  9155  001552  0100               	movlb	0	; () banked
  9156  001554  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9157  001556  D8F4               	call	PL60	;call to abstracted procedure
  9158                           
  9159                           ;main.c: 1408: break;
  9160  001558  D097               	goto	l10211
  9161  00155A                     l10161:
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;main.c: 1411: relay_pulse_timer[ 6 ] =
  9165                           ;main.c: 1412: readEEPROM( 0x43 + 30) * 256 +
  9166                           ;main.c: 1413: readEEPROM( 0x43 + 31);
  9167  00155A  6A09               	clrf	?_readEEPROM+1,c
  9168  00155C  0E62               	movlw	98
  9169  00155E  6E08               	movwf	?_readEEPROM,c
  9170  001560  ECDA  F021         	call	_readEEPROM	;wreg free
  9171  001564  0100               	movlb	0	; () banked
  9172  001566  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9173  001568  6A09               	clrf	?_readEEPROM+1,c
  9174  00156A  0E61               	movlw	97
  9175  00156C  6E08               	movwf	?_readEEPROM,c
  9176  00156E  ECDA  F021         	call	_readEEPROM	;wreg free
  9177  001572  0100               	movlb	0	; () banked
  9178  001574  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9179  001576  D904               	call	PL68	;call to abstracted procedure
  9180                           
  9181                           ;main.c: 1414: break;
  9182  001578  D087               	goto	l10211
  9183  00157A                     l10163:
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;main.c: 1417: relay_pulse_timer[ 7 ] =
  9187                           ;main.c: 1418: readEEPROM( 0x43 + 32) * 256 +
  9188                           ;main.c: 1419: readEEPROM( 0x43 + 33);
  9189  00157A  6A09               	clrf	?_readEEPROM+1,c
  9190  00157C  0E64               	movlw	100
  9191  00157E  6E08               	movwf	?_readEEPROM,c
  9192  001580  ECDA  F021         	call	_readEEPROM	;wreg free
  9193  001584  0100               	movlb	0	; () banked
  9194  001586  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9195  001588  6A09               	clrf	?_readEEPROM+1,c
  9196  00158A  0E63               	movlw	99
  9197  00158C  6E08               	movwf	?_readEEPROM,c
  9198  00158E  ECDA  F021         	call	_readEEPROM	;wreg free
  9199  001592  0100               	movlb	0	; () banked
  9200  001594  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9201  001596  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9202  001598  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9203  00159A  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9204  00159C  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9205  00159E  0E00               	movlw	0
  9206  0015A0  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9207  0015A2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9208                           
  9209                           ;main.c: 1420: break;
  9210  0015A4  D071               	goto	l10211
  9211  0015A6                     l10167:
  9212                           
  9213                           ; BSR set to: 0
  9214  0015A6  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9215                           
  9216                           ; Switch size 1, requested type "space"
  9217                           ; Number of cases is 8, Range of values is 19 to 33
  9218                           ; switch strategies available:
  9219                           ; Name         Instructions Cycles
  9220                           ; simple_byte           25    13 (average)
  9221                           ;	Chosen strategy is simple_byte
  9222  0015A8  0A13               	xorlw	19	; case 19
  9223  0015AA  E101 D779          	bz	l10149
  9224  0015AE  0A06               	xorlw	6	; case 21
  9225  0015B0  E085               	bz	l10151
  9226  0015B2  0A02               	xorlw	2	; case 23
  9227  0015B4  E092               	bz	l10153
  9228  0015B6  0A0E               	xorlw	14	; case 25
  9229  0015B8  E0A0               	bz	l10155
  9230  0015BA  0A02               	xorlw	2	; case 27
  9231  0015BC  E0AE               	bz	l10157
  9232  0015BE  0A06               	xorlw	6	; case 29
  9233  0015C0  E0BC               	bz	l10159
  9234  0015C2  0A02               	xorlw	2	; case 31
  9235  0015C4  E0CA               	bz	l10161
  9236  0015C6  0A3E               	xorlw	62	; case 33
  9237  0015C8  E0D8               	bz	l10163
  9238  0015CA  D05E               	goto	l10211
  9239  0015CC                     l10169:
  9240                           
  9241                           ; BSR set to: 0
  9242                           ;main.c: 1428: else if ( ( reg >= 34 ) &&
  9243                           ;main.c: 1429: ( reg <= 49 ) ) {
  9244  0015CC  0E21               	movlw	33
  9245  0015CE  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9246  0015D0  D03C               	goto	l10195
  9247                           
  9248                           ; BSR set to: 0
  9249  0015D2  0E32               	movlw	50
  9250  0015D4  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9251  0015D6  D039               	goto	l10195
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;main.c: 1432: writeEEPROM( 0x43 + reg, val );
  9255  0015D8  0E43               	movlw	67
  9256  0015DA  D88F               	call	PL4	;call to abstracted procedure
  9257  0015DC  ECB9  F020         	call	_writeEEPROM	;wreg free
  9258                           
  9259                           ;main.c: 1433: rv = readEEPROM( 0x43 + reg );
  9260  0015E0  D894               	call	PL6	;call to abstracted procedure
  9261  0015E2  ECDA  F021         	call	_readEEPROM	;wreg free
  9262  0015E6  0100               	movlb	0	; () banked
  9263  0015E8  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9264                           
  9265                           ;main.c: 1435: switch ( reg ) {
  9266  0015EA  D016               	goto	l10193
  9267  0015EC                     l10189:
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;main.c: 1480: relay_protection_timer[ 7 ] =
  9271                           ;main.c: 1481: readEEPROM( 0x43 + 48 ) * 256 +
  9272                           ;main.c: 1482: readEEPROM( 0x43 + 49 );
  9273  0015EC  6A09               	clrf	?_readEEPROM+1,c
  9274  0015EE  0E74               	movlw	116
  9275  0015F0  6E08               	movwf	?_readEEPROM,c
  9276  0015F2  ECDA  F021         	call	_readEEPROM	;wreg free
  9277  0015F6  0100               	movlb	0	; () banked
  9278  0015F8  6FC7               	movwf	??_vscp_writeAppReg& (0+255),b
  9279  0015FA  6A09               	clrf	?_readEEPROM+1,c
  9280  0015FC  0E73               	movlw	115
  9281  0015FE  6E08               	movwf	?_readEEPROM,c
  9282  001600  ECDA  F021         	call	_readEEPROM	;wreg free
  9283  001604  0100               	movlb	0	; () banked
  9284  001606  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9285  001608  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9286  00160A  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9287  00160C  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9288  00160E  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9289  001610  0E00               	movlw	0
  9290  001612  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9291  001614  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9292                           
  9293                           ;main.c: 1483: break;
  9294  001616  D038               	goto	l10211
  9295  001618                     l10193:
  9296                           
  9297                           ; BSR set to: 0
  9298  001618  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9299                           
  9300                           ; Switch size 1, requested type "space"
  9301                           ; Number of cases is 8, Range of values is 35 to 49
  9302                           ; switch strategies available:
  9303                           ; Name         Instructions Cycles
  9304                           ; simple_byte           25    13 (average)
  9305                           ;	Chosen strategy is simple_byte
  9306  00161A  0A23               	xorlw	35	; case 35
  9307  00161C  E101 D4CC          	bz	l9903
  9308  001620  0A06               	xorlw	6	; case 37
  9309  001622  E101 D4FC          	bz	l9923
  9310  001626  0A02               	xorlw	2	; case 39
  9311  001628  E101 D522          	bz	l9943
  9312  00162C  0A0E               	xorlw	14	; case 41
  9313  00162E  E101 D551          	bz	l9963
  9314  001632  0A02               	xorlw	2	; case 43
  9315  001634  E101 D580          	bz	l9983
  9316  001638  0A06               	xorlw	6	; case 45
  9317  00163A  E101 D5AF          	bz	l10003
  9318  00163E  0A02               	xorlw	2	; case 47
  9319  001640  E101 D5DE          	bz	l10023
  9320  001644  0A1E               	xorlw	30	; case 49
  9321  001646  E0D2               	bz	l10189
  9322  001648  D01F               	goto	l10211
  9323  00164A                     l10195:
  9324                           
  9325                           ; BSR set to: 0
  9326                           ;main.c: 1491: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9327  00164A  0E31               	movlw	49
  9328  00164C  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9329  00164E  D00B               	goto	l10201
  9330                           
  9331                           ; BSR set to: 0
  9332  001650  0E42               	movlw	66
  9333  001652  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9334  001654  D008               	goto	l10201
  9335                           
  9336                           ; BSR set to: 0
  9337                           ;main.c: 1494: writeEEPROM( 0x43 + reg, val );
  9338  001656  0E43               	movlw	67
  9339  001658  D850               	call	PL4	;call to abstracted procedure
  9340  00165A  ECB9  F020         	call	_writeEEPROM	;wreg free
  9341                           
  9342                           ;main.c: 1495: rv = readEEPROM( 0x43 + reg );
  9343  00165E  D855               	call	PL6	;call to abstracted procedure
  9344  001660  ECDA  F021         	call	_readEEPROM	;wreg free
  9345  001664  D00F               	goto	L24
  9346  001666                     l10201:
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;main.c: 1498: else if ( (reg >= 72) &&
  9350                           ;main.c: 1499: (reg < (72 + 7 * 8)) ) {
  9351  001666  0E47               	movlw	71
  9352  001668  65CE               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9353  00166A  D00E               	goto	l10211
  9354                           
  9355                           ; BSR set to: 0
  9356  00166C  0E80               	movlw	128
  9357  00166E  61CE               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9358  001670  D00B               	goto	l10211
  9359                           
  9360                           ; BSR set to: 0
  9361                           ;main.c: 1500: writeEEPROM( 0x43 + reg, val );
  9362  001672  0E43               	movlw	67
  9363  001674  D842               	call	PL4	;call to abstracted procedure
  9364  001676  ECB9  F020         	call	_writeEEPROM	;wreg free
  9365                           
  9366                           ;main.c: 1501: calculateSetFilterMask();
  9367  00167A  ECC0  F00E         	call	_calculateSetFilterMask	;wreg free
  9368                           
  9369                           ;main.c: 1502: rv = readEEPROM( 0x43 + reg );
  9370  00167E  D845               	call	PL6	;call to abstracted procedure
  9371  001680  ECDA  F021         	call	_readEEPROM	;wreg free
  9372  001684                     L24:
  9373  001684  0100               	movlb	0	; () banked
  9374  001686  6FCD               	movwf	vscp_writeAppReg@rv& (0+255),b
  9375  001688                     l10211:
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;main.c: 1503: }
  9379                           ;main.c: 1509: if ( bInfoEvent ) {
  9380  001688  51CA               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9381  00168A  E035               	bz	l10231
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;main.c: 1511: unsigned char val;
  9385                           ;main.c: 1512: val = readEEPROM( 0x43 +
  9386                           ;main.c: 1513: 10 + (reg - 2) );
  9387  00168C  0E4B               	movlw	75
  9388  00168E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9389  001690  6E08               	movwf	?_readEEPROM,c
  9390  001692  6A09               	clrf	?_readEEPROM+1,c
  9391  001694  0E00               	movlw	0
  9392  001696  2209               	addwfc	?_readEEPROM+1,f,c
  9393  001698  ECDA  F021         	call	_readEEPROM	;wreg free
  9394  00169C  0100               	movlb	0	; () banked
  9395  00169E  6FCB               	movwf	vscp_writeAppReg@val_632& (0+255),b
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;main.c: 1515: if ( bOn ) {
  9399  0016A0  51CC               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9400  0016A2  E015               	bz	l395
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;main.c: 1517: if ( val & 0x08 ) {
  9404  0016A4  A7CB               	btfss	vscp_writeAppReg@val_632& (0+255),3,b
  9405  0016A6  D008               	goto	l10221
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;main.c: 1518: SendInformationEvent( reg - 2,
  9409                           ;main.c: 1519: 20,
  9410                           ;main.c: 1520: 3 );
  9411  0016A8  0E14               	movlw	20
  9412  0016AA  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9413  0016AC  0E03               	movlw	3
  9414  0016AE  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9415  0016B0  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9416  0016B2  0FFE               	addlw	254
  9417  0016B4  EC52  F01F         	call	_SendInformationEvent
  9418  0016B8                     l10221:
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;main.c: 1521: }
  9422                           ;main.c: 1523: if ( val & 0x20 ) {
  9423  0016B8  ABCB               	btfss	vscp_writeAppReg@val_632& (0+255),5,b
  9424  0016BA  D01D               	goto	l10231
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;main.c: 1524: SendInformationEvent( reg - 2,
  9428                           ;main.c: 1525: 20,
  9429                           ;main.c: 1526: 25 );
  9430  0016BC  0E14               	movlw	20
  9431  0016BE  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9432  0016C0  0E19               	movlw	25
  9433  0016C2  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9434  0016C4  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9435  0016C6  0FFE               	addlw	254
  9436  0016C8  EC52  F01F         	call	_SendInformationEvent
  9437  0016CC  D014               	goto	l10231
  9438  0016CE                     l395:
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;main.c: 1530: else {
  9442                           ;main.c: 1532: if ( val & 0x10 ) {
  9443  0016CE  A9CB               	btfss	vscp_writeAppReg@val_632& (0+255),4,b
  9444  0016D0  D008               	goto	l10227
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;main.c: 1533: SendInformationEvent( reg - 2,
  9448                           ;main.c: 1534: 20,
  9449                           ;main.c: 1535: 4 );
  9450  0016D2  0E14               	movlw	20
  9451  0016D4  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9452  0016D6  0E04               	movlw	4
  9453  0016D8  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9454  0016DA  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9455  0016DC  0FFE               	addlw	254
  9456  0016DE  EC52  F01F         	call	_SendInformationEvent
  9457  0016E2                     l10227:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;main.c: 1536: }
  9461                           ;main.c: 1538: if ( val & 0x40 ) {
  9462  0016E2  ADCB               	btfss	vscp_writeAppReg@val_632& (0+255),6,b
  9463  0016E4  D008               	goto	l10231
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;main.c: 1539: SendInformationEvent( reg - 2,
  9467                           ;main.c: 1540: 20,
  9468                           ;main.c: 1541: 24 );
  9469  0016E6  0E14               	movlw	20
  9470  0016E8  6FC5               	movwf	?_SendInformationEvent& (0+255),b
  9471  0016EA  0E18               	movlw	24
  9472  0016EC  6FC6               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9473  0016EE  51CE               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9474  0016F0  0FFE               	addlw	254
  9475  0016F2  EC52  F01F         	call	_SendInformationEvent
  9476  0016F6                     l10231:
  9477                           
  9478                           ; BSR set to: 0
  9479                           ;main.c: 1542: }
  9480                           ;main.c: 1543: }
  9481                           ;main.c: 1544: }
  9482                           ;main.c: 1546: return rv;
  9483  0016F6  51CD               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9484                           
  9485                           ; BSR set to: 0
  9486  0016F8  0012               	return	
  9487  0016FA                     __end_of_vscp_writeAppReg:
  9488                           	opt stack 0
  9489  0016FA                     PL4:
  9490                           	opt stack 21
  9491  0016FA  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9492  0016FC  6E08               	movwf	?_writeEEPROM,c
  9493  0016FE  6A09               	clrf	?_writeEEPROM+1,c
  9494  001700  0E00               	movlw	0
  9495  001702  2209               	addwfc	?_writeEEPROM+1,f,c
  9496  001704  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9497  001708  0C00               	retlw	0
  9498  00170A                     __end_ofPL4:
  9499                           	opt stack 0
  9500  00170A                     PL6:
  9501                           	opt stack 21
  9502  00170A  0E43               	movlw	67
  9503  00170C  0100               	movlb	0	; () banked
  9504  00170E  25CE               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9505  001710  6E08               	movwf	?_readEEPROM,c
  9506  001712  6A09               	clrf	?_readEEPROM+1,c
  9507  001714  0E00               	movlw	0
  9508  001716  2209               	addwfc	?_readEEPROM+1,f,c
  9509  001718  0C00               	retlw	0
  9510  00171A                     __end_ofPL6:
  9511                           	opt stack 0
  9512  00171A                     PL40:
  9513                           	opt stack 21
  9514  00171A  0100               	movlb	0	; () banked
  9515  00171C  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9516  00171E  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9517  001720  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9518  001722  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9519  001724  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9520  001726  0E00               	movlw	0
  9521  001728  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9522  00172A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9523  00172C  0012               	return	
  9524  00172E                     __end_ofPL40:
  9525                           	opt stack 0
  9526  00172E                     PL50:
  9527                           	opt stack 21
  9528  00172E  6FC9               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9529  001730  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9530  001732  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9531  001734  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9532  001736  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9533  001738  0E00               	movlw	0
  9534  00173A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9535  00173C  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9536  00173E  0012               	return	
  9537  001740                     __end_ofPL50:
  9538                           	opt stack 0
  9539  001740                     PL60:
  9540                           	opt stack 21
  9541  001740  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9542  001742  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9543  001744  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9544  001746  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9545  001748  0E00               	movlw	0
  9546  00174A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9547  00174C  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9548  00174E  0012               	return	
  9549  001750                     __end_ofPL60:
  9550                           	opt stack 0
  9551  001750                     PL62:
  9552                           	opt stack 21
  9553  001750  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9554  001752  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9555  001754  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9556  001756  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9557  001758  0E00               	movlw	0
  9558  00175A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9559  00175C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9560  00175E  0012               	return	
  9561  001760                     __end_ofPL62:
  9562                           	opt stack 0
  9563  001760                     PL64:
  9564                           	opt stack 21
  9565  001760  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9566  001762  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9567  001764  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9568  001766  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9569  001768  0E00               	movlw	0
  9570  00176A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9571  00176C  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9572  00176E  0012               	return	
  9573  001770                     __end_ofPL64:
  9574                           	opt stack 0
  9575  001770                     PL66:
  9576                           	opt stack 21
  9577  001770  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9578  001772  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9579  001774  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9580  001776  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9581  001778  0E00               	movlw	0
  9582  00177A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9583  00177C  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9584  00177E  0012               	return	
  9585  001780                     __end_ofPL66:
  9586                           	opt stack 0
  9587  001780                     PL68:
  9588                           	opt stack 21
  9589  001780  6BC8               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9590  001782  51C7               	movf	??_vscp_writeAppReg& (0+255),w,b
  9591  001784  25C8               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9592  001786  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9593  001788  0E00               	movlw	0
  9594  00178A  21C9               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9595  00178C  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9596  00178E  0012               	return	
  9597  001790                     __end_ofPL68:
  9598                           	opt stack 0
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           postinc0	equ	0xFEE
  9607                           wreg	equ	0xFE8
  9608                           indf1	equ	0xFE7
  9609                           fsr1h	equ	0xFE2
  9610                           fsr1l	equ	0xFE1
  9611                           indf2	equ	0xFDF
  9612                           postinc2	equ	0xFDE
  9613                           postdec2	equ	0xFDD
  9614                           plusw2	equ	0xFDB
  9615                           fsr2h	equ	0xFDA
  9616                           fsr2l	equ	0xFD9
  9617                           status	equ	0xFD8
  9618                           
  9619 ;; *************** function _calculateSetFilterMask *****************
  9620 ;; Defined at:
  9621 ;;		line 2613 in file "../main.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;		None
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9626 ;;  filter          4   57[COMRAM] unsigned long 
  9627 ;;  mask            4   53[COMRAM] unsigned long 
  9628 ;;  rowmask         4   48[COMRAM] unsigned long 
  9629 ;;  i               1   66[COMRAM] unsigned char 
  9630 ;;  j               1   65[COMRAM] unsigned char 
  9631 ;;  lastOID         1   52[COMRAM] unsigned char 
  9632 ;; Return value:  Size  Location     Type
  9633 ;;		None               void
  9634 ;; Registers used:
  9635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9642 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9643 ;;      Temps:         31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9644 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9645 ;;Total ram usage:       50 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    3
  9648 ;; This function calls:
  9649 ;;		_readEEPROM
  9650 ;;		_ECANSetOperationMode
  9651 ;;		__CANIDToRegs
  9652 ;; This function is called by:
  9653 ;;		_vscp_writeAppReg
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text25
  9658  001D80                     __ptext25:
  9659                           	opt stack 0
  9660  001D80                     _calculateSetFilterMask:
  9661                           	opt stack 24
  9662                           
  9663                           ;main.c: 2614: uint8_t i,j;
  9664                           ;main.c: 2615: uint8_t lastOID;
  9665                           ;main.c: 2616: uint32_t rowmask;
  9666                           ;main.c: 2617: uint32_t rowfilter;
  9667                           ;main.c: 2620: uint32_t mask = 0xffffffff;
  9668                           
  9669                           ; BSR set to: 0
  9670                           ;incstack = 0
  9671                           ;incstack = 0
  9672  001D80  6836               	setf	calculateSetFilterMask@mask,c
  9673  001D82  6837               	setf	calculateSetFilterMask@mask+1,c
  9674  001D84  6838               	setf	calculateSetFilterMask@mask+2,c
  9675  001D86  6839               	setf	calculateSetFilterMask@mask+3,c
  9676                           
  9677                           ;main.c: 2621: uint32_t filter = 0;
  9678  001D88  6A3A               	clrf	calculateSetFilterMask@filter,c
  9679  001D8A  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9680  001D8C  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9681  001D8E  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9682                           
  9683                           ;main.c: 2624: for ( i=0; i < 7; i++ ) {
  9684  001D90  6A43               	clrf	calculateSetFilterMask@i,c
  9685  001D92                     l8447:
  9686                           
  9687                           ;main.c: 2627: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9688  001D92  5043               	movf	calculateSetFilterMask@i,w,c
  9689  001D94  D971               	call	PL10	;call to abstracted procedure
  9690  001D96  0E44               	movlw	68
  9691  001D98  2412               	addwf	??_calculateSetFilterMask,w,c
  9692  001D9A  6E08               	movwf	?_readEEPROM,c
  9693  001D9C  0E00               	movlw	0
  9694  001D9E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9695  001DA0  6E09               	movwf	?_readEEPROM+1,c
  9696  001DA2  ECDA  F021         	call	_readEEPROM	;wreg free
  9697  001DA6  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9698  001DA8  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9699  001DAA  D11A               	goto	l8491
  9700                           
  9701                           ;main.c: 2636: rowmask =
  9702                           ;main.c: 2638: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9703                           ;main.c: 2640: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9704                           ;main.c: 2642: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9705                           ;main.c: 2644: 0xff;
  9706  001DAC  5043               	movf	calculateSetFilterMask@i,w,c
  9707  001DAE  D964               	call	PL10	;call to abstracted procedure
  9708  001DB0  0E47               	movlw	71
  9709  001DB2  2412               	addwf	??_calculateSetFilterMask,w,c
  9710  001DB4  6E08               	movwf	?_readEEPROM,c
  9711  001DB6  0E00               	movlw	0
  9712  001DB8  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9713  001DBA  6E09               	movwf	?_readEEPROM+1,c
  9714  001DBC  ECDA  F021         	call	_readEEPROM	;wreg free
  9715  001DC0  D967               	call	PL12	;call to abstracted procedure
  9716  001DC2  0E45               	movlw	69
  9717  001DC4  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9718  001DC6  6E08               	movwf	?_readEEPROM,c
  9719  001DC8  0E00               	movlw	0
  9720  001DCA  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9721  001DCC  6E09               	movwf	?_readEEPROM+1,c
  9722  001DCE  ECDA  F021         	call	_readEEPROM	;wreg free
  9723  001DD2  D933               	call	PL8	;call to abstracted procedure
  9724  001DD4  ECDA  F021         	call	_readEEPROM	;wreg free
  9725  001DD8  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9726  001DDA  0E02               	movlw	2
  9727  001DDC  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9728  001DDE  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9729  001DE2  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9730  001DE4  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9731  001DE6  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9732  001DE8  0E17               	movlw	23
  9733  001DEA                     u9925:
  9734  001DEA  90D8               	bcf	status,0,c
  9735  001DEC  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9736  001DEE  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9737  001DF0  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9738  001DF2  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9739  001DF4  2EE8               	decfsz	wreg,f,c
  9740  001DF6  D7F9               	goto	u9925
  9741  001DF8  501C               	movf	??_calculateSetFilterMask+10,w,c
  9742  001DFA  D964               	call	PL14	;call to abstracted procedure
  9743  001DFC  0EFF               	movlw	255
  9744  001DFE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9745  001E00  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9746  001E02  502C               	movf	??_calculateSetFilterMask+26,w,c
  9747  001E04  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9748  001E06  502D               	movf	??_calculateSetFilterMask+27,w,c
  9749  001E08  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9750  001E0A  502E               	movf	??_calculateSetFilterMask+28,w,c
  9751  001E0C  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
  9752                           
  9753                           ;main.c: 2645: ;
  9754                           ;main.c: 2650: rowfilter =
  9755                           ;main.c: 2652: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
  9756                           ;main.c: 2654: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
  9757                           ;main.c: 2656: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
  9758                           ;main.c: 2659: readEEPROM( 0x43 + 8*i );
  9759  001E0E  5043               	movf	calculateSetFilterMask@i,w,c
  9760  001E10  D933               	call	PL10	;call to abstracted procedure
  9761  001E12  0E48               	movlw	72
  9762  001E14  2412               	addwf	??_calculateSetFilterMask,w,c
  9763  001E16  6E08               	movwf	?_readEEPROM,c
  9764  001E18  0E00               	movlw	0
  9765  001E1A  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9766  001E1C  6E09               	movwf	?_readEEPROM+1,c
  9767  001E1E  ECDA  F021         	call	_readEEPROM	;wreg free
  9768  001E22  D936               	call	PL12	;call to abstracted procedure
  9769  001E24  0E46               	movlw	70
  9770  001E26  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9771  001E28  6E08               	movwf	?_readEEPROM,c
  9772  001E2A  0E00               	movlw	0
  9773  001E2C  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9774  001E2E  6E09               	movwf	?_readEEPROM+1,c
  9775  001E30  ECDA  F021         	call	_readEEPROM	;wreg free
  9776  001E34  D902               	call	PL8	;call to abstracted procedure
  9777  001E36  ECDA  F021         	call	_readEEPROM	;wreg free
  9778  001E3A  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9779  001E3C  0E01               	movlw	1
  9780  001E3E  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9781  001E40  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9782  001E44  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9783  001E46  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9784  001E48  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9785  001E4A  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
  9786  001E4E  6A25               	clrf	??_calculateSetFilterMask+19,c
  9787  001E50  6A24               	clrf	??_calculateSetFilterMask+18,c
  9788  001E52  6A23               	clrf	??_calculateSetFilterMask+17,c
  9789  001E54  501C               	movf	??_calculateSetFilterMask+10,w,c
  9790  001E56  D936               	call	PL14	;call to abstracted procedure
  9791  001E58  5043               	movf	calculateSetFilterMask@i,w,c
  9792  001E5A  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
  9793  001E5C  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
  9794  001E5E  90D8               	bcf	status,0,c
  9795  001E60  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9796  001E62  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9797  001E64  90D8               	bcf	status,0,c
  9798  001E66  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9799  001E68  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9800  001E6A  90D8               	bcf	status,0,c
  9801  001E6C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9802  001E6E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9803  001E70  0E43               	movlw	67
  9804  001E72  242F               	addwf	??_calculateSetFilterMask+29,w,c
  9805  001E74  6E08               	movwf	?_readEEPROM,c
  9806  001E76  0E00               	movlw	0
  9807  001E78  2030               	addwfc	??_calculateSetFilterMask+30,w,c
  9808  001E7A  6E09               	movwf	?_readEEPROM+1,c
  9809  001E7C  ECDA  F021         	call	_readEEPROM	;wreg free
  9810  001E80  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9811  001E82  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
  9812  001E84  502C               	movf	??_calculateSetFilterMask+26,w,c
  9813  001E86  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
  9814  001E88  502D               	movf	??_calculateSetFilterMask+27,w,c
  9815  001E8A  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
  9816  001E8C  502E               	movf	??_calculateSetFilterMask+28,w,c
  9817  001E8E  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
  9818                           
  9819                           ;main.c: 2661: if ( 0 == i ) filter = rowfilter;
  9820  001E90  6643               	tstfsz	calculateSetFilterMask@i,c
  9821  001E92  D008               	goto	l8455
  9822  001E94  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
  9823  001E98  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
  9824  001E9C  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
  9825  001EA0  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
  9826  001EA4                     l8455:
  9827                           
  9828                           ;main.c: 2665: mask &= rowmask;
  9829  001EA4  5031               	movf	calculateSetFilterMask@rowmask,w,c
  9830  001EA6  1636               	andwf	calculateSetFilterMask@mask,f,c
  9831  001EA8  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
  9832  001EAA  1637               	andwf	calculateSetFilterMask@mask+1,f,c
  9833  001EAC  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
  9834  001EAE  1638               	andwf	calculateSetFilterMask@mask+2,f,c
  9835  001EB0  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
  9836  001EB2  1639               	andwf	calculateSetFilterMask@mask+3,f,c
  9837                           
  9838                           ;main.c: 2670: for ( j=0; j<32; j++ ) {
  9839  001EB4  6A42               	clrf	calculateSetFilterMask@j,c
  9840  001EB6                     l8463:
  9841                           
  9842                           ;main.c: 2672: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
  9843  001EB6  5042               	movf	calculateSetFilterMask@j,w,c
  9844  001EB8  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
  9845  001EBC  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
  9846  001EC0  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
  9847  001EC4  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
  9848  001EC8  2AE8               	incf	wreg,f,c
  9849  001ECA  D005               	goto	u9940
  9850  001ECC                     u9945:
  9851  001ECC  90D8               	bcf	status,0,c
  9852  001ECE  3215               	rrcf	??_calculateSetFilterMask+3,f,c
  9853  001ED0  3214               	rrcf	??_calculateSetFilterMask+2,f,c
  9854  001ED2  3213               	rrcf	??_calculateSetFilterMask+1,f,c
  9855  001ED4  3212               	rrcf	??_calculateSetFilterMask,f,c
  9856  001ED6                     u9940:
  9857  001ED6  2EE8               	decfsz	wreg,f,c
  9858  001ED8  D7F9               	goto	u9945
  9859  001EDA  0E01               	movlw	1
  9860  001EDC  1612               	andwf	??_calculateSetFilterMask,f,c
  9861  001EDE  5042               	movf	calculateSetFilterMask@j,w,c
  9862  001EE0  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
  9863  001EE4  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
  9864  001EE8  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
  9865  001EEC  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
  9866  001EF0  2AE8               	incf	wreg,f,c
  9867  001EF2  D005               	goto	u9950
  9868  001EF4                     u9955:
  9869  001EF4  90D8               	bcf	status,0,c
  9870  001EF6  3219               	rrcf	??_calculateSetFilterMask+7,f,c
  9871  001EF8  3218               	rrcf	??_calculateSetFilterMask+6,f,c
  9872  001EFA  3217               	rrcf	??_calculateSetFilterMask+5,f,c
  9873  001EFC  3216               	rrcf	??_calculateSetFilterMask+4,f,c
  9874  001EFE                     u9950:
  9875  001EFE  2EE8               	decfsz	wreg,f,c
  9876  001F00  D7F9               	goto	u9955
  9877  001F02  5016               	movf	??_calculateSetFilterMask+4,w,c
  9878  001F04  0B01               	andlw	1
  9879  001F06  1812               	xorwf	??_calculateSetFilterMask,w,c
  9880  001F08  E010               	bz	l8467
  9881                           
  9882                           ;main.c: 2673: mask &= ~(1<<j);
  9883  001F0A  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
  9884  001F0E  D8FC               	call	PL80	;call to abstracted procedure
  9885  001F10  D001               	goto	u9974
  9886  001F12                     u9975:
  9887  001F12  D8FF               	call	PL82	;call to abstracted procedure
  9888  001F14                     u9974:
  9889  001F14  2E12               	decfsz	??_calculateSetFilterMask,f,c
  9890  001F16  D7FD               	goto	u9975
  9891  001F18  1C13               	comf	??_calculateSetFilterMask+1,w,c
  9892  001F1A  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
  9893  001F1C  1C14               	comf	??_calculateSetFilterMask+2,w,c
  9894  001F1E  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
  9895  001F20  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9896  001F22  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
  9897  001F24  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
  9898  001F26  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
  9899  001F28  D8E5               	call	PL46	;call to abstracted procedure
  9900  001F2A                     l8467:
  9901  001F2A  2A42               	incf	calculateSetFilterMask@j,f,c
  9902  001F2C  0E1F               	movlw	31
  9903  001F2E  6442               	cpfsgt	calculateSetFilterMask@j,c
  9904  001F30  D7C2               	goto	l8463
  9905                           
  9906                           ;main.c: 2674: }
  9907                           ;main.c: 2675: }
  9908                           ;main.c: 2681: filter &= rowfilter;
  9909  001F32  503E               	movf	calculateSetFilterMask@rowfilter,w,c
  9910  001F34  163A               	andwf	calculateSetFilterMask@filter,f,c
  9911  001F36  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
  9912  001F38  163B               	andwf	calculateSetFilterMask@filter+1,f,c
  9913  001F3A  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
  9914  001F3C  163C               	andwf	calculateSetFilterMask@filter+2,f,c
  9915  001F3E  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
  9916  001F40  163D               	andwf	calculateSetFilterMask@filter+3,f,c
  9917                           
  9918                           ;main.c: 2689: }
  9919                           ;main.c: 2691: if (i) {
  9920                           
  9921                           ;main.c: 2684: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
  9922  001F42  5043               	movf	calculateSetFilterMask@i,w,c
  9923  001F44  E042               	bz	l8487
  9924                           
  9925                           ;main.c: 2694: for (j = 0; j < 8; j++) {
  9926  001F46  6A42               	clrf	calculateSetFilterMask@j,c
  9927  001F48                     l8481:
  9928                           
  9929                           ;main.c: 2695: if ((lastOID >> i & 1)
  9930                           ;main.c: 2696: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
  9931  001F48  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
  9932  001F4C  5043               	movf	calculateSetFilterMask@i,w,c
  9933  001F4E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
  9934  001F50  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
  9935  001F52  90D8               	bcf	status,0,c
  9936  001F54  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9937  001F56  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9938  001F58  90D8               	bcf	status,0,c
  9939  001F5A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9940  001F5C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9941  001F5E  90D8               	bcf	status,0,c
  9942  001F60  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9943  001F62  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9944  001F64  0E43               	movlw	67
  9945  001F66  2413               	addwf	??_calculateSetFilterMask+1,w,c
  9946  001F68  6E08               	movwf	?_readEEPROM,c
  9947  001F6A  0E00               	movlw	0
  9948  001F6C  2014               	addwfc	??_calculateSetFilterMask+2,w,c
  9949  001F6E  6E09               	movwf	?_readEEPROM+1,c
  9950  001F70  ECDA  F021         	call	_readEEPROM	;wreg free
  9951  001F74  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
  9952  001F76  2A12               	incf	??_calculateSetFilterMask,f,c
  9953  001F78  D002               	goto	u10004
  9954  001F7A                     u10005:
  9955  001F7A  90D8               	bcf	status,0,c
  9956  001F7C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
  9957  001F7E                     u10004:
  9958  001F7E  2E12               	decfsz	??_calculateSetFilterMask,f,c
  9959  001F80  D7FC               	goto	u10005
  9960  001F82  0E01               	movlw	1
  9961  001F84  1615               	andwf	??_calculateSetFilterMask+3,f,c
  9962  001F86  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
  9963  001F8A  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
  9964  001F8E  2A16               	incf	??_calculateSetFilterMask+4,f,c
  9965  001F90  D002               	goto	u10014
  9966  001F92                     u10015:
  9967  001F92  90D8               	bcf	status,0,c
  9968  001F94  3217               	rrcf	??_calculateSetFilterMask+5,f,c
  9969  001F96                     u10014:
  9970  001F96  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
  9971  001F98  D7FC               	goto	u10015
  9972  001F9A  5017               	movf	??_calculateSetFilterMask+5,w,c
  9973  001F9C  0B01               	andlw	1
  9974  001F9E  1815               	xorwf	??_calculateSetFilterMask+3,w,c
  9975  001FA0  E010               	bz	l8485
  9976                           
  9977                           ;main.c: 2697: mask &= (1 << i);
  9978  001FA2  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
  9979  001FA6  D8B0               	call	PL80	;call to abstracted procedure
  9980  001FA8  D001               	goto	u10034
  9981  001FAA                     u10035:
  9982  001FAA  D8B3               	call	PL82	;call to abstracted procedure
  9983  001FAC                     u10034:
  9984  001FAC  2E12               	decfsz	??_calculateSetFilterMask,f,c
  9985  001FAE  D7FD               	goto	u10035
  9986  001FB0  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
  9987  001FB4  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
  9988  001FB8  0E00               	movlw	0
  9989  001FBA  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
  9990  001FBC  0EFF               	movlw	255
  9991  001FBE  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
  9992  001FC0  D899               	call	PL46	;call to abstracted procedure
  9993  001FC2                     l8485:
  9994  001FC2  2A42               	incf	calculateSetFilterMask@j,f,c
  9995  001FC4  0E07               	movlw	7
  9996  001FC6  6442               	cpfsgt	calculateSetFilterMask@j,c
  9997  001FC8  D7BF               	goto	l8481
  9998  001FCA                     l8487:
  9999                           
 10000                           ;main.c: 2698: }
 10001                           ;main.c: 2699: }
 10002                           ;main.c: 2701: lastOID = readEEPROM(0x43 + 8 * i);
 10003  001FCA  5043               	movf	calculateSetFilterMask@i,w,c
 10004  001FCC  D855               	call	PL10	;call to abstracted procedure
 10005  001FCE  0E43               	movlw	67
 10006  001FD0  2412               	addwf	??_calculateSetFilterMask,w,c
 10007  001FD2  6E08               	movwf	?_readEEPROM,c
 10008  001FD4  0E00               	movlw	0
 10009  001FD6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10010  001FD8  6E09               	movwf	?_readEEPROM+1,c
 10011  001FDA  ECDA  F021         	call	_readEEPROM	;wreg free
 10012  001FDE  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10013  001FE0                     l8491:
 10014  001FE0  2A43               	incf	calculateSetFilterMask@i,f,c
 10015  001FE2  0E06               	movlw	6
 10016  001FE4  6443               	cpfsgt	calculateSetFilterMask@i,c
 10017  001FE6  D6D5               	goto	l8447
 10018                           
 10019                           ;main.c: 2707: }
 10020                           ;main.c: 2709: }
 10021                           ;main.c: 2710: }
 10022                           ;main.c: 2713: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10023  001FE8  0E80               	movlw	128
 10024  001FEA  EC81  F021         	call	_ECANSetOperationMode
 10025                           
 10026                           ;main.c: 2716: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10027  001FEE  010E               	movlb	14	; () banked
 10028  001FF0  0E0E               	movlw	14	;volatile
 10029  001FF2  6E09               	movwf	?__CANIDToRegs+1,c
 10030  001FF4  0EFC               	movlw	252	;volatile
 10031  001FF6  6E08               	movwf	?__CANIDToRegs,c
 10032  001FF8  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10033  001FFC  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10034  002000  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10035  002004  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10036  002008  0E01               	movlw	1
 10037  00200A  6E0E               	movwf	?__CANIDToRegs+6,c
 10038  00200C  EC66  F01A         	call	__CANIDToRegs	;wreg free
 10039                           
 10040                           ;main.c: 2719: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10041  002010  010E               	movlb	14	; () banked
 10042  002012  8346               	bsf	70,1,b	;volatile
 10043                           
 10044                           ; BSR set to: 14
 10045  002014  0E0E               	movlw	14	;volatile
 10046  002016  6E09               	movwf	?__CANIDToRegs+1,c
 10047  002018  0EE4               	movlw	228	;volatile
 10048  00201A  6E08               	movwf	?__CANIDToRegs,c
 10049  00201C  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10050  002020  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10051  002024  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10052  002028  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10053  00202C  0E01               	movlw	1
 10054  00202E  6E0E               	movwf	?__CANIDToRegs+6,c
 10055  002030  EC66  F01A         	call	__CANIDToRegs	;wreg free
 10056                           
 10057                           ;main.c: 2722: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10058  002034  0E00               	movlw	0
 10059  002036  EF81  F021         	goto	_ECANSetOperationMode
 10060  00203A                     __end_of_calculateSetFilterMask:
 10061                           	opt stack 0
 10062  00203A                     PL8:
 10063                           	opt stack 24
 10064  00203A  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10065  00203C  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10066  002040  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10067  002042  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10068  002044  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10069  002046  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10070  00204A  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10071  00204E  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10072  002050  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10073  002052  5043               	movf	calculateSetFilterMask@i,w,c
 10074  002054  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10075  002056  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10076  002058  90D8               	bcf	status,0,c
 10077  00205A  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10078  00205C  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10079  00205E  90D8               	bcf	status,0,c
 10080  002060  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10081  002062  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10082  002064  90D8               	bcf	status,0,c
 10083  002066  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10084  002068  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10085  00206A  0E44               	movlw	68
 10086  00206C  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10087  00206E  6E08               	movwf	?_readEEPROM,c
 10088  002070  0E00               	movlw	0
 10089  002072  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10090  002074  6E09               	movwf	?_readEEPROM+1,c
 10091  002076  0012               	return	
 10092  002078                     __end_ofPL8:
 10093                           	opt stack 0
 10094  002078                     PL10:
 10095                           	opt stack 24
 10096  002078  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10097  00207A  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10098  00207C  90D8               	bcf	status,0,c
 10099  00207E  3612               	rlcf	??_calculateSetFilterMask,f,c
 10100  002080  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10101  002082  90D8               	bcf	status,0,c
 10102  002084  3612               	rlcf	??_calculateSetFilterMask,f,c
 10103  002086  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10104  002088  90D8               	bcf	status,0,c
 10105  00208A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10106  00208C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10107  00208E  0012               	return	
 10108  002090                     __end_ofPL10:
 10109                           	opt stack 0
 10110  002090                     PL12:
 10111                           	opt stack 24
 10112  002090  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10113  002092  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10114  002096  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10115  002098  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10116  00209A  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10117  00209C  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10118  0020A0  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10119  0020A4  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10120  0020A8  6A15               	clrf	??_calculateSetFilterMask+3,c
 10121  0020AA  5043               	movf	calculateSetFilterMask@i,w,c
 10122  0020AC  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10123  0020AE  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10124  0020B0  90D8               	bcf	status,0,c
 10125  0020B2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10126  0020B4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10127  0020B6  90D8               	bcf	status,0,c
 10128  0020B8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10129  0020BA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10130  0020BC  90D8               	bcf	status,0,c
 10131  0020BE  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10132  0020C0  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10133  0020C2  0012               	return	
 10134  0020C4                     __end_ofPL12:
 10135                           	opt stack 0
 10136  0020C4                     PL14:
 10137                           	opt stack 24
 10138  0020C4  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10139  0020C6  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10140  0020C8  501D               	movf	??_calculateSetFilterMask+11,w,c
 10141  0020CA  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10142  0020CC  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10143  0020CE  501E               	movf	??_calculateSetFilterMask+12,w,c
 10144  0020D0  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10145  0020D2  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10146  0020D4  501F               	movf	??_calculateSetFilterMask+13,w,c
 10147  0020D6  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10148  0020D8  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10149  0020DA  5015               	movf	??_calculateSetFilterMask+3,w,c
 10150  0020DC  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10151  0020DE  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10152  0020E0  5016               	movf	??_calculateSetFilterMask+4,w,c
 10153  0020E2  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10154  0020E4  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10155  0020E6  5017               	movf	??_calculateSetFilterMask+5,w,c
 10156  0020E8  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10157  0020EA  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10158  0020EC  5018               	movf	??_calculateSetFilterMask+6,w,c
 10159  0020EE  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10160  0020F0  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10161  0020F2  0012               	return	
 10162  0020F4                     __end_ofPL14:
 10163                           	opt stack 0
 10164  0020F4                     PL46:
 10165                           	opt stack 24
 10166  0020F4  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10167  0020F6  5015               	movf	??_calculateSetFilterMask+3,w,c
 10168  0020F8  1636               	andwf	calculateSetFilterMask@mask,f,c
 10169  0020FA  5016               	movf	??_calculateSetFilterMask+4,w,c
 10170  0020FC  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10171  0020FE  5017               	movf	??_calculateSetFilterMask+5,w,c
 10172  002100  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10173  002102  5018               	movf	??_calculateSetFilterMask+6,w,c
 10174  002104  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10175  002106  0012               	return	
 10176  002108                     __end_ofPL46:
 10177                           	opt stack 0
 10178  002108                     PL80:
 10179                           	opt stack 24
 10180  002108  0E01               	movlw	1
 10181  00210A  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10182  00210C  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10183  00210E  2A12               	incf	??_calculateSetFilterMask,f,c
 10184  002110  0012               	return	
 10185  002112                     __end_ofPL80:
 10186                           	opt stack 0
 10187  002112                     PL82:
 10188                           	opt stack 24
 10189  002112  90D8               	bcf	status,0,c
 10190  002114  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10191  002116  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10192  002118  0012               	return	
 10193  00211A                     __end_ofPL82:
 10194                           	opt stack 0
 10195                           tblptru	equ	0xFF8
 10196                           tblptrh	equ	0xFF7
 10197                           tblptrl	equ	0xFF6
 10198                           tablat	equ	0xFF5
 10199                           prodh	equ	0xFF4
 10200                           prodl	equ	0xFF3
 10201                           intcon	equ	0xFF2
 10202                           postinc0	equ	0xFEE
 10203                           wreg	equ	0xFE8
 10204                           indf1	equ	0xFE7
 10205                           fsr1h	equ	0xFE2
 10206                           fsr1l	equ	0xFE1
 10207                           indf2	equ	0xFDF
 10208                           postinc2	equ	0xFDE
 10209                           postdec2	equ	0xFDD
 10210                           plusw2	equ	0xFDB
 10211                           fsr2h	equ	0xFDA
 10212                           fsr2l	equ	0xFD9
 10213                           status	equ	0xFD8
 10214                           
 10215 ;; *************** function _SendInformationEvent *****************
 10216 ;; Defined at:
 10217 ;;		line 1576 in file "../main.c"
 10218 ;; Parameters:    Size  Location     Type
 10219 ;;  idx             1    wreg     unsigned char 
 10220 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10221 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10222 ;; Auto vars:     Size  Location     Type
 10223 ;;  idx             1   79[COMRAM] unsigned char 
 10224 ;;  data            3   76[COMRAM] unsigned char [3]
 10225 ;; Return value:  Size  Location     Type
 10226 ;;		None               void
 10227 ;; Registers used:
 10228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10229 ;; Tracked objects:
 10230 ;;		On entry : F/0
 10231 ;;		On exit  : F/0
 10232 ;;		Unchanged: 0/0
 10233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10235 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10236 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10237 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10238 ;;Total ram usage:        8 bytes
 10239 ;; Hardware stack levels used:    1
 10240 ;; Hardware stack levels required when called:    6
 10241 ;; This function calls:
 10242 ;;		_readEEPROM
 10243 ;;		_sendVSCPFrame
 10244 ;; This function is called by:
 10245 ;;		_doApplicationOneSecondWork
 10246 ;;		_vscp_writeAppReg
 10247 ;;		_doActionOn
 10248 ;;		_doActionOff
 10249 ;;		_doActionStatus
 10250 ;;		_doActionToggle
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text26
 10255  003EA4                     __ptext26:
 10256                           	opt stack 0
 10257  003EA4                     _SendInformationEvent:
 10258                           	opt stack 23
 10259                           
 10260                           ;incstack = 0
 10261                           ;incstack = 0
 10262                           ;SendInformationEvent@idx stored from wreg
 10263  003EA4  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;main.c: 1577: uint8_t data[3];
 10267                           ;main.c: 1590: data[ 0 ] = idx;
 10268  003EA8  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;main.c: 1591: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10272  003EAC  90D8               	bcf	status,0,c
 10273  003EAE  3450               	rlcf	SendInformationEvent@idx,w,c
 10274  003EB0  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10275  003EB2  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10276  003EB4  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10277  003EB6  0E75               	movlw	117
 10278  003EB8  244B               	addwf	??_SendInformationEvent,w,c
 10279  003EBA  6E08               	movwf	?_readEEPROM,c
 10280  003EBC  0E00               	movlw	0
 10281  003EBE  204C               	addwfc	??_SendInformationEvent+1,w,c
 10282  003EC0  6E09               	movwf	?_readEEPROM+1,c
 10283  003EC2  ECDA  F021         	call	_readEEPROM	;wreg free
 10284  003EC6  6E4E               	movwf	SendInformationEvent@data+1,c
 10285                           
 10286                           ;main.c: 1592: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10287  003EC8  90D8               	bcf	status,0,c
 10288  003ECA  3450               	rlcf	SendInformationEvent@idx,w,c
 10289  003ECC  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10290  003ECE  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10291  003ED0  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10292  003ED2  0E76               	movlw	118
 10293  003ED4  244B               	addwf	??_SendInformationEvent,w,c
 10294  003ED6  6E08               	movwf	?_readEEPROM,c
 10295  003ED8  0E00               	movlw	0
 10296  003EDA  204C               	addwfc	??_SendInformationEvent+1,w,c
 10297  003EDC  6E09               	movwf	?_readEEPROM+1,c
 10298  003EDE  ECDA  F021         	call	_readEEPROM	;wreg free
 10299  003EE2  6E4F               	movwf	SendInformationEvent@data+2,c
 10300                           
 10301                           ;main.c: 1593: sendVSCPFrame( eventClass,
 10302                           ;main.c: 1594: eventTypeId,
 10303                           ;main.c: 1595: vscp_nickname,
 10304                           ;main.c: 1596: 0x03,
 10305                           ;main.c: 1597: 3,
 10306                           ;main.c: 1598: data );
 10307  003EE4  0100               	movlb	0	; () banked
 10308  003EE6  C0C5  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10309  003EEA  6A40               	clrf	?_sendVSCPFrame+1,c
 10310  003EEC  C0C6  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10311  003EF0  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10312  003EF4  0E03               	movlw	3
 10313  003EF6  6E43               	movwf	?_sendVSCPFrame+4,c
 10314  003EF8  6E44               	movwf	?_sendVSCPFrame+5,c
 10315  003EFA  0E4D               	movlw	low SendInformationEvent@data
 10316  003EFC  6E45               	movwf	?_sendVSCPFrame+6,c
 10317  003EFE  0E00               	movlw	high SendInformationEvent@data
 10318  003F00  6E46               	movwf	?_sendVSCPFrame+7,c
 10319  003F02  0E0F               	movlw	15
 10320  003F04  6E46               	movwf	?_sendVSCPFrame+7,c
 10321  003F06  0E5F               	movlw	__accesstop+-1
 10322  003F08  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10323  003F0A  6A46               	clrf	?_sendVSCPFrame+7,c
 10324  003F0C  EF01  F01E         	goto	_sendVSCPFrame	;wreg free
 10325  003F10                     __end_of_SendInformationEvent:
 10326                           	opt stack 0
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           intcon	equ	0xFF2
 10334                           postinc0	equ	0xFEE
 10335                           wreg	equ	0xFE8
 10336                           indf1	equ	0xFE7
 10337                           fsr1h	equ	0xFE2
 10338                           fsr1l	equ	0xFE1
 10339                           indf2	equ	0xFDF
 10340                           postinc2	equ	0xFDE
 10341                           postdec2	equ	0xFDD
 10342                           plusw2	equ	0xFDB
 10343                           fsr2h	equ	0xFDA
 10344                           fsr2l	equ	0xFD9
 10345                           status	equ	0xFD8
 10346                           
 10347 ;; *************** function _vscp_readRegister *****************
 10348 ;; Defined at:
 10349 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;  reg             1    wreg     unsigned char 
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  reg             1   28[COMRAM] unsigned char 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      unsigned char 
 10356 ;; Registers used:
 10357 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : F/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10367 ;;Total ram usage:        1 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    5
 10370 ;; This function calls:
 10371 ;;		_vscp_readAppReg
 10372 ;;		_vscp_readStdReg
 10373 ;; This function is called by:
 10374 ;;		_vscp_handleProtocolEvent
 10375 ;; This function uses a non-reentrant model
 10376 ;;
 10377                           
 10378                           	psect	text27
 10379  00431A                     __ptext27:
 10380                           	opt stack 0
 10381  00431A                     _vscp_readRegister:
 10382                           	opt stack 24
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;incstack = 0
 10386                           ;incstack = 0
 10387                           ;vscp_readRegister@reg stored from wreg
 10388  00431A  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 10392  00431E  0E7F               	movlw	127
 10393  004320  641D               	cpfsgt	vscp_readRegister@reg,c
 10394  004322  D003               	goto	l8967
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 10398  004324  501D               	movf	vscp_readRegister@reg,w,c
 10399  004326  EFC6  F017         	goto	_vscp_readStdReg
 10400  00432A                     l8967:
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 10404  00432A  501D               	movf	vscp_readRegister@reg,w,c
 10405  00432C  EFA6  F01D         	goto	_vscp_readAppReg
 10406  004330                     __end_of_vscp_readRegister:
 10407                           	opt stack 0
 10408                           tblptru	equ	0xFF8
 10409                           tblptrh	equ	0xFF7
 10410                           tblptrl	equ	0xFF6
 10411                           tablat	equ	0xFF5
 10412                           prodh	equ	0xFF4
 10413                           prodl	equ	0xFF3
 10414                           intcon	equ	0xFF2
 10415                           postinc0	equ	0xFEE
 10416                           wreg	equ	0xFE8
 10417                           indf1	equ	0xFE7
 10418                           fsr1h	equ	0xFE2
 10419                           fsr1l	equ	0xFE1
 10420                           indf2	equ	0xFDF
 10421                           postinc2	equ	0xFDE
 10422                           postdec2	equ	0xFDD
 10423                           plusw2	equ	0xFDB
 10424                           fsr2h	equ	0xFDA
 10425                           fsr2l	equ	0xFD9
 10426                           status	equ	0xFD8
 10427                           
 10428 ;; *************** function _vscp_readStdReg *****************
 10429 ;; Defined at:
 10430 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;  reg             1    wreg     unsigned char 
 10433 ;; Auto vars:     Size  Location     Type
 10434 ;;  reg             1   27[COMRAM] unsigned char 
 10435 ;;  code            4   20[COMRAM] unsigned long 
 10436 ;;  idx             1   25[COMRAM] unsigned char 
 10437 ;;  code            4   16[COMRAM] unsigned long 
 10438 ;;  idx             1   24[COMRAM] unsigned char 
 10439 ;;  rv              1   26[COMRAM] unsigned char 
 10440 ;; Return value:  Size  Location     Type
 10441 ;;                  1    wreg      unsigned char 
 10442 ;; Registers used:
 10443 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10444 ;; Tracked objects:
 10445 ;;		On entry : F/0
 10446 ;;		On exit  : 0/0
 10447 ;;		Unchanged: 0/0
 10448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10450 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10451 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10452 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10453 ;;Total ram usage:       17 bytes
 10454 ;; Hardware stack levels used:    1
 10455 ;; Hardware stack levels required when called:    4
 10456 ;; This function calls:
 10457 ;;		_vscp_getMajorVersion
 10458 ;;		_vscp_getMinorVersion
 10459 ;;		_vscp_getSubMinorVersion
 10460 ;;		_vscp_getGUID
 10461 ;;		_vscp_getMDF_URL
 10462 ;;		_vscp_getUserID
 10463 ;;		_vscp_getManufacturerId
 10464 ;;		_vscp_getBootLoaderAlgorithm
 10465 ;;		_vscp_getBufferSize
 10466 ;;		_vscp_getFamilyCode
 10467 ;;		_vscp_getFamilyType
 10468 ;;		_vscp_getRegisterPagesUsed
 10469 ;; This function is called by:
 10470 ;;		_vscp_readRegister
 10471 ;;		_vscp_handleProtocolEvent
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           	psect	text28
 10476  002F8C                     __ptext28:
 10477                           	opt stack 0
 10478  002F8C                     _vscp_readStdReg:
 10479                           	opt stack 25
 10480                           
 10481                           ;incstack = 0
 10482                           ;incstack = 0
 10483                           ;vscp_readStdReg@reg stored from wreg
 10484  002F8C  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;vscp_firmware.c: 567: uint8_t rv = 0;
 10488  002F90  6A1B               	clrf	vscp_readStdReg@rv,c
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 10492  002F92  501C               	movf	vscp_readStdReg@reg,w,c
 10493  002F94  0A80               	xorlw	128
 10494  002F96  E104               	bnz	l8977
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 10498  002F98  C08C  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10499                           
 10500                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 10501  002F9C  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 10502                           
 10503                           ;vscp_firmware.c: 575: }
 10504  002F9E  D0B3               	goto	l9065
 10505  002FA0                     l8977:
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 10509  002FA0  501C               	movf	vscp_readStdReg@reg,w,c
 10510  002FA2  0A81               	xorlw	129
 10511  002FA4  E102               	bnz	l8981
 10512                           
 10513                           ; BSR set to: 0
 10514                           ;vscp_firmware.c: 579: rv = 1;
 10515  002FA6  0E01               	movlw	1
 10516  002FA8  D075               	goto	L36
 10517  002FAA                     l8981:
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 10521  002FAA  501C               	movf	vscp_readStdReg@reg,w,c
 10522  002FAC  0A82               	xorlw	130
 10523  002FAE  E102               	bnz	l8985
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;vscp_firmware.c: 585: rv = 5;
 10527  002FB0  0E05               	movlw	5
 10528  002FB2  D070               	goto	L36
 10529  002FB4                     l8985:
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 10533  002FB4  501C               	movf	vscp_readStdReg@reg,w,c
 10534  002FB6  0A83               	xorlw	131
 10535  002FB8  E102               	bnz	l8989
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;vscp_firmware.c: 591: rv = 0;
 10539  002FBA  6A1B               	clrf	vscp_readStdReg@rv,c
 10540                           
 10541                           ;vscp_firmware.c: 593: }
 10542  002FBC  D0A4               	goto	l9065
 10543  002FBE                     l8989:
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 10547  002FBE  501C               	movf	vscp_readStdReg@reg,w,c
 10548  002FC0  0A94               	xorlw	148
 10549  002FC2  E103               	bnz	l8993
 10550                           
 10551                           ; BSR set to: 0
 10552                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 10553  002FC4  EC16  F022         	call	_vscp_getMajorVersion	;wreg free
 10554  002FC8  D065               	goto	L36
 10555  002FCA                     l8993:
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 10559  002FCA  501C               	movf	vscp_readStdReg@reg,w,c
 10560  002FCC  0A95               	xorlw	149
 10561  002FCE  E103               	bnz	l8997
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 10565  002FD0  EC15  F022         	call	_vscp_getMinorVersion	;wreg free
 10566  002FD4  D05F               	goto	L36
 10567  002FD6                     l8997:
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 10571  002FD6  501C               	movf	vscp_readStdReg@reg,w,c
 10572  002FD8  0A96               	xorlw	150
 10573  002FDA  E103               	bnz	l9001
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 10577  002FDC  EC14  F022         	call	_vscp_getSubMinorVersion	;wreg free
 10578  002FE0  D059               	goto	L36
 10579  002FE2                     l9001:
 10580                           
 10581                           ; BSR set to: 0
 10582                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 10583  002FE2  0E89               	movlw	137
 10584  002FE4  601C               	cpfslt	vscp_readStdReg@reg,c
 10585  002FE6  D005               	goto	l9005
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 10589  002FE8  501C               	movf	vscp_readStdReg@reg,w,c
 10590  002FEA  0F7C               	addlw	124
 10591  002FEC  ECA2  F021         	call	_vscp_getUserID
 10592  002FF0  D051               	goto	L36
 10593  002FF2                     l9005:
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 10597                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 10598  002FF2  0E88               	movlw	136
 10599  002FF4  641C               	cpfsgt	vscp_readStdReg@reg,c
 10600  002FF6  D008               	goto	l9011
 10601                           
 10602                           ; BSR set to: 0
 10603  002FF8  0E91               	movlw	145
 10604  002FFA  601C               	cpfslt	vscp_readStdReg@reg,c
 10605  002FFC  D005               	goto	l9011
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 10609  002FFE  501C               	movf	vscp_readStdReg@reg,w,c
 10610  003000  0F77               	addlw	119
 10611  003002  EC98  F021         	call	_vscp_getManufacturerId
 10612  003006  D046               	goto	L36
 10613  003008                     l9011:
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 10617  003008  501C               	movf	vscp_readStdReg@reg,w,c
 10618  00300A  0A91               	xorlw	145
 10619  00300C  E103               	bnz	l9015
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 10623  00300E  C091  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10624                           
 10625                           ;vscp_firmware.c: 630: }
 10626  003012  D079               	goto	l9065
 10627  003014                     l9015:
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 10631  003014  501C               	movf	vscp_readStdReg@reg,w,c
 10632  003016  0A93               	xorlw	147
 10633  003018  E103               	bnz	l9019
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 10637  00301A  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10638                           
 10639                           ;vscp_firmware.c: 636: }
 10640  00301E  D073               	goto	l9065
 10641  003020                     l9019:
 10642                           
 10643                           ; BSR set to: 0
 10644                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 10645  003020  501C               	movf	vscp_readStdReg@reg,w,c
 10646  003022  0A92               	xorlw	146
 10647  003024  E102               	bnz	l9023
 10648                           
 10649                           ; BSR set to: 0
 10650                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 10651  003026  5053               	movf	_vscp_page_select+1,w,c
 10652  003028  D035               	goto	L36
 10653  00302A                     l9023:
 10654                           
 10655                           ; BSR set to: 0
 10656                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 10657  00302A  501C               	movf	vscp_readStdReg@reg,w,c
 10658  00302C  0A97               	xorlw	151
 10659  00302E  E103               	bnz	l9027
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 10663  003030  EC13  F022         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10664  003034  D02F               	goto	L36
 10665  003036                     l9027:
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 10669  003036  501C               	movf	vscp_readStdReg@reg,w,c
 10670  003038  0A98               	xorlw	152
 10671  00303A  E103               	bnz	l9031
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 10675  00303C  EC12  F022         	call	_vscp_getBufferSize	;wreg free
 10676  003040  D029               	goto	L36
 10677  003042                     l9031:
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 10681  003042  501C               	movf	vscp_readStdReg@reg,w,c
 10682  003044  0A99               	xorlw	153
 10683  003046  E103               	bnz	l9035
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 10687  003048  EC11  F022         	call	_vscp_getRegisterPagesUsed	;wreg free
 10688  00304C  D023               	goto	L36
 10689  00304E                     l9035:
 10690                           
 10691                           ; BSR set to: 0
 10692                           ;vscp_firmware.c: 656: else if ( ( reg >= 0x9A ) &&
 10693                           ;vscp_firmware.c: 657: ( reg < ( 0x9A + 4 ) ) ) {
 10694  00304E  0E99               	movlw	153
 10695  003050  641C               	cpfsgt	vscp_readStdReg@reg,c
 10696  003052  D022               	goto	l9045
 10697                           
 10698                           ; BSR set to: 0
 10699  003054  0E9E               	movlw	158
 10700  003056  601C               	cpfslt	vscp_readStdReg@reg,c
 10701  003058  D01F               	goto	l9045
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;vscp_firmware.c: 659: uint32_t code = vscp_getFamilyCode();
 10705  00305A  ECFB  F021         	call	_vscp_getFamilyCode	;wreg free
 10706  00305E  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10707  003062  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10708  003066  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10709  00306A  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;vscp_firmware.c: 660: uint8_t idx = reg - 0x9A;
 10713  00306E  501C               	movf	vscp_readStdReg@reg,w,c
 10714  003070  0F66               	addlw	102
 10715  003072  6E19               	movwf	vscp_readStdReg@idx,c
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;vscp_firmware.c: 661: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10719  003074  5019               	movf	vscp_readStdReg@idx,w,c
 10720  003076  D849               	call	PL34	;call to abstracted procedure
 10721  003078  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 10722  00307C  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 10723  003080  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 10724  003084  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 10725  003088  2AE8               	incf	wreg,f,c
 10726  00308A  D001               	goto	u11050
 10727  00308C                     u11055:
 10728  00308C  D848               	call	PL76	;call to abstracted procedure
 10729  00308E                     u11050:
 10730  00308E  2EE8               	decfsz	wreg,f,c
 10731  003090  D7FD               	goto	u11055
 10732  003092  D024               	goto	L37
 10733  003094                     L36:
 10734  003094  6E1B               	movwf	vscp_readStdReg@rv,c
 10735                           
 10736                           ;vscp_firmware.c: 662: }
 10737  003096  D037               	goto	l9065
 10738  003098                     l9045:
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;vscp_firmware.c: 663: else if ( ( reg >= 0x9E ) &&
 10742                           ;vscp_firmware.c: 664: ( reg < ( 0x9E + 4 ) ) ) {
 10743  003098  0E9D               	movlw	157
 10744  00309A  641C               	cpfsgt	vscp_readStdReg@reg,c
 10745  00309C  D021               	goto	l9055
 10746                           
 10747                           ; BSR set to: 0
 10748  00309E  0EA2               	movlw	162
 10749  0030A0  601C               	cpfslt	vscp_readStdReg@reg,c
 10750  0030A2  D01E               	goto	l9055
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;vscp_firmware.c: 666: uint32_t code = vscp_getFamilyType();
 10754  0030A4  ECF6  F021         	call	_vscp_getFamilyType	;wreg free
 10755  0030A8  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1217+3
 10756  0030AC  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1217+2
 10757  0030B0  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1217+1
 10758  0030B4  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1217
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;vscp_firmware.c: 667: uint8_t idx = reg - 0x9E;
 10762  0030B8  501C               	movf	vscp_readStdReg@reg,w,c
 10763  0030BA  0F62               	addlw	98
 10764  0030BC  6E1A               	movwf	vscp_readStdReg@idx_1218,c
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;vscp_firmware.c: 668: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10768  0030BE  501A               	movf	vscp_readStdReg@idx_1218,w,c
 10769  0030C0  D824               	call	PL34	;call to abstracted procedure
 10770  0030C2  C015  F00D         	movff	vscp_readStdReg@code_1217,??_vscp_readStdReg+1
 10771  0030C6  C016  F00E         	movff	vscp_readStdReg@code_1217+1,??_vscp_readStdReg+2
 10772  0030CA  C017  F00F         	movff	vscp_readStdReg@code_1217+2,??_vscp_readStdReg+3
 10773  0030CE  C018  F010         	movff	vscp_readStdReg@code_1217+3,??_vscp_readStdReg+4
 10774  0030D2  2AE8               	incf	wreg,f,c
 10775  0030D4  D001               	goto	u11080
 10776  0030D6                     u11085:
 10777  0030D6  D823               	call	PL76	;call to abstracted procedure
 10778  0030D8                     u11080:
 10779  0030D8  2EE8               	decfsz	wreg,f,c
 10780  0030DA  D7FD               	goto	u11085
 10781  0030DC                     L37:
 10782  0030DC  500D               	movf	??_vscp_readStdReg+1,w,c
 10783  0030DE  D7DA               	goto	L36
 10784  0030E0                     l9055:
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;vscp_firmware.c: 670: else if ((reg > (0xD0 - 1)) &&
 10788                           ;vscp_firmware.c: 671: (reg < 0xE0)) {
 10789  0030E0  0ECF               	movlw	207
 10790  0030E2  641C               	cpfsgt	vscp_readStdReg@reg,c
 10791  0030E4  D008               	goto	l9061
 10792                           
 10793                           ; BSR set to: 0
 10794  0030E6  0EE0               	movlw	224
 10795  0030E8  601C               	cpfslt	vscp_readStdReg@reg,c
 10796  0030EA  D005               	goto	l9061
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;vscp_firmware.c: 674: rv = vscp_getGUID(reg - 0xD0);
 10800  0030EC  501C               	movf	vscp_readStdReg@reg,w,c
 10801  0030EE  0F30               	addlw	48
 10802  0030F0  ECAC  F021         	call	_vscp_getGUID
 10803  0030F4  D7CF               	goto	L36
 10804  0030F6                     l9061:
 10805                           
 10806                           ; BSR set to: 0
 10807                           ;vscp_firmware.c: 677: else if ( reg >= 0xE0 ) {
 10808  0030F6  0EDF               	movlw	223
 10809  0030F8  641C               	cpfsgt	vscp_readStdReg@reg,c
 10810  0030FA  D005               	goto	l9065
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;vscp_firmware.c: 680: rv = vscp_getMDF_URL(reg - 0xE0);
 10814  0030FC  501C               	movf	vscp_readStdReg@reg,w,c
 10815  0030FE  0F20               	addlw	32
 10816  003100  EC5A  F021         	call	_vscp_getMDF_URL
 10817  003104  D7C7               	goto	L36
 10818  003106                     l9065:
 10819                           
 10820                           ;vscp_firmware.c: 682: }
 10821                           ;vscp_firmware.c: 684: return rv;
 10822  003106  501B               	movf	vscp_readStdReg@rv,w,c
 10823  003108  0012               	return	
 10824  00310A                     __end_of_vscp_readStdReg:
 10825                           	opt stack 0
 10826  00310A                     PL34:
 10827                           	opt stack 25
 10828  00310A  0803               	sublw	3
 10829  00310C  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 10830  00310E  90D8               	bcf	status,0,c
 10831  003110  360C               	rlcf	??_vscp_readStdReg,f,c
 10832  003112  90D8               	bcf	status,0,c
 10833  003114  360C               	rlcf	??_vscp_readStdReg,f,c
 10834  003116  90D8               	bcf	status,0,c
 10835  003118  360C               	rlcf	??_vscp_readStdReg,f,c
 10836  00311A  500C               	movf	??_vscp_readStdReg,w,c
 10837  00311C  0012               	return	
 10838  00311E                     __end_ofPL34:
 10839                           	opt stack 0
 10840  00311E                     PL76:
 10841                           	opt stack 25
 10842  00311E  90D8               	bcf	status,0,c
 10843  003120  3210               	rrcf	??_vscp_readStdReg+4,f,c
 10844  003122  320F               	rrcf	??_vscp_readStdReg+3,f,c
 10845  003124  320E               	rrcf	??_vscp_readStdReg+2,f,c
 10846  003126  320D               	rrcf	??_vscp_readStdReg+1,f,c
 10847  003128  0012               	return	
 10848  00312A                     __end_ofPL76:
 10849                           	opt stack 0
 10850                           tblptru	equ	0xFF8
 10851                           tblptrh	equ	0xFF7
 10852                           tblptrl	equ	0xFF6
 10853                           tablat	equ	0xFF5
 10854                           prodh	equ	0xFF4
 10855                           prodl	equ	0xFF3
 10856                           intcon	equ	0xFF2
 10857                           postinc0	equ	0xFEE
 10858                           wreg	equ	0xFE8
 10859                           indf1	equ	0xFE7
 10860                           fsr1h	equ	0xFE2
 10861                           fsr1l	equ	0xFE1
 10862                           indf2	equ	0xFDF
 10863                           postinc2	equ	0xFDE
 10864                           postdec2	equ	0xFDD
 10865                           plusw2	equ	0xFDB
 10866                           fsr2h	equ	0xFDA
 10867                           fsr2l	equ	0xFD9
 10868                           status	equ	0xFD8
 10869                           
 10870 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10871 ;; Defined at:
 10872 ;;		line 2503 in file "../main.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;		None
 10875 ;; Auto vars:     Size  Location     Type
 10876 ;;		None
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      unsigned char 
 10879 ;; Registers used:
 10880 ;;		wreg
 10881 ;; Tracked objects:
 10882 ;;		On entry : F/0
 10883 ;;		On exit  : F/0
 10884 ;;		Unchanged: F/0
 10885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10889 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10890 ;;Total ram usage:        0 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    2
 10893 ;; This function calls:
 10894 ;;		Nothing
 10895 ;; This function is called by:
 10896 ;;		_vscp_readStdReg
 10897 ;; This function uses a non-reentrant model
 10898 ;;
 10899                           
 10900                           	psect	text29
 10901  004422                     __ptext29:
 10902                           	opt stack 0
 10903  004422                     _vscp_getRegisterPagesUsed:
 10904                           	opt stack 26
 10905                           
 10906                           ; BSR set to: 0
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;main.c: 2504: return 1;
 10910                           
 10911                           ;incstack = 0
 10912                           ;incstack = 0
 10913  004422  0C01               	retlw	1
 10914  004424                     __end_of_vscp_getRegisterPagesUsed:
 10915                           	opt stack 0
 10916                           tblptru	equ	0xFF8
 10917                           tblptrh	equ	0xFF7
 10918                           tblptrl	equ	0xFF6
 10919                           tablat	equ	0xFF5
 10920                           prodh	equ	0xFF4
 10921                           prodl	equ	0xFF3
 10922                           intcon	equ	0xFF2
 10923                           postinc0	equ	0xFEE
 10924                           wreg	equ	0xFE8
 10925                           indf1	equ	0xFE7
 10926                           fsr1h	equ	0xFE2
 10927                           fsr1l	equ	0xFE1
 10928                           indf2	equ	0xFDF
 10929                           postinc2	equ	0xFDE
 10930                           postdec2	equ	0xFDD
 10931                           plusw2	equ	0xFDB
 10932                           fsr2h	equ	0xFDA
 10933                           fsr2l	equ	0xFD9
 10934                           status	equ	0xFD8
 10935                           
 10936 ;; *************** function _vscp_getFamilyType *****************
 10937 ;; Defined at:
 10938 ;;		line 2484 in file "../main.c"
 10939 ;; Parameters:    Size  Location     Type
 10940 ;;		None
 10941 ;; Auto vars:     Size  Location     Type
 10942 ;;		None
 10943 ;; Return value:  Size  Location     Type
 10944 ;;                  4    7[COMRAM] unsigned long 
 10945 ;; Registers used:
 10946 ;;		None
 10947 ;; Tracked objects:
 10948 ;;		On entry : F/0
 10949 ;;		On exit  : F/0
 10950 ;;		Unchanged: F/0
 10951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10955 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10956 ;;Total ram usage:        4 bytes
 10957 ;; Hardware stack levels used:    1
 10958 ;; Hardware stack levels required when called:    2
 10959 ;; This function calls:
 10960 ;;		Nothing
 10961 ;; This function is called by:
 10962 ;;		_vscp_readStdReg
 10963 ;; This function uses a non-reentrant model
 10964 ;;
 10965                           
 10966                           	psect	text30
 10967  0043EC                     __ptext30:
 10968                           	opt stack 0
 10969  0043EC                     _vscp_getFamilyType:
 10970                           	opt stack 26
 10971                           
 10972                           ; BSR set to: 0
 10973                           ;main.c: 2485: return 0;
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;incstack = 0
 10977                           ;incstack = 0
 10978  0043EC  6A08               	clrf	?_vscp_getFamilyType,c
 10979  0043EE  6A09               	clrf	?_vscp_getFamilyType+1,c
 10980  0043F0  6A0A               	clrf	?_vscp_getFamilyType+2,c
 10981  0043F2  6A0B               	clrf	?_vscp_getFamilyType+3,c
 10982                           
 10983                           ; BSR set to: 0
 10984  0043F4  0012               	return	
 10985  0043F6                     __end_of_vscp_getFamilyType:
 10986                           	opt stack 0
 10987                           tblptru	equ	0xFF8
 10988                           tblptrh	equ	0xFF7
 10989                           tblptrl	equ	0xFF6
 10990                           tablat	equ	0xFF5
 10991                           prodh	equ	0xFF4
 10992                           prodl	equ	0xFF3
 10993                           intcon	equ	0xFF2
 10994                           postinc0	equ	0xFEE
 10995                           wreg	equ	0xFE8
 10996                           indf1	equ	0xFE7
 10997                           fsr1h	equ	0xFE2
 10998                           fsr1l	equ	0xFE1
 10999                           indf2	equ	0xFDF
 11000                           postinc2	equ	0xFDE
 11001                           postdec2	equ	0xFDD
 11002                           plusw2	equ	0xFDB
 11003                           fsr2h	equ	0xFDA
 11004                           fsr2l	equ	0xFD9
 11005                           status	equ	0xFD8
 11006                           
 11007 ;; *************** function _vscp_getFamilyCode *****************
 11008 ;; Defined at:
 11009 ;;		line 2475 in file "../main.c"
 11010 ;; Parameters:    Size  Location     Type
 11011 ;;		None
 11012 ;; Auto vars:     Size  Location     Type
 11013 ;;		None
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  4    7[COMRAM] unsigned long 
 11016 ;; Registers used:
 11017 ;;		None
 11018 ;; Tracked objects:
 11019 ;;		On entry : F/0
 11020 ;;		On exit  : F/0
 11021 ;;		Unchanged: F/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11026 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11027 ;;Total ram usage:        4 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    2
 11030 ;; This function calls:
 11031 ;;		Nothing
 11032 ;; This function is called by:
 11033 ;;		_vscp_readStdReg
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text31
 11038  0043F6                     __ptext31:
 11039                           	opt stack 0
 11040  0043F6                     _vscp_getFamilyCode:
 11041                           	opt stack 26
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;main.c: 2476: return 0L;
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;incstack = 0
 11048                           ;incstack = 0
 11049  0043F6  6A08               	clrf	?_vscp_getFamilyCode,c
 11050  0043F8  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11051  0043FA  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11052  0043FC  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11053                           
 11054                           ; BSR set to: 0
 11055  0043FE  0012               	return	
 11056  004400                     __end_of_vscp_getFamilyCode:
 11057                           	opt stack 0
 11058                           tblptru	equ	0xFF8
 11059                           tblptrh	equ	0xFF7
 11060                           tblptrl	equ	0xFF6
 11061                           tablat	equ	0xFF5
 11062                           prodh	equ	0xFF4
 11063                           prodl	equ	0xFF3
 11064                           intcon	equ	0xFF2
 11065                           postinc0	equ	0xFEE
 11066                           wreg	equ	0xFE8
 11067                           indf1	equ	0xFE7
 11068                           fsr1h	equ	0xFE2
 11069                           fsr1l	equ	0xFE1
 11070                           indf2	equ	0xFDF
 11071                           postinc2	equ	0xFDE
 11072                           postdec2	equ	0xFDD
 11073                           plusw2	equ	0xFDB
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function _vscp_getBufferSize *****************
 11079 ;; Defined at:
 11080 ;;		line 2336 in file "../main.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      unsigned char 
 11087 ;; Registers used:
 11088 ;;		wreg
 11089 ;; Tracked objects:
 11090 ;;		On entry : F/0
 11091 ;;		On exit  : F/0
 11092 ;;		Unchanged: F/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11098 ;;Total ram usage:        0 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    2
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_vscp_readStdReg
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text32
 11109  004424                     __ptext32:
 11110                           	opt stack 0
 11111  004424                     _vscp_getBufferSize:
 11112                           	opt stack 26
 11113                           
 11114                           ; BSR set to: 0
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;main.c: 2337: return 8;
 11118                           
 11119                           ; BSR set to: 0
 11120                           ;incstack = 0
 11121                           ;incstack = 0
 11122  004424  0C08               	retlw	8
 11123  004426                     __end_of_vscp_getBufferSize:
 11124                           	opt stack 0
 11125                           tblptru	equ	0xFF8
 11126                           tblptrh	equ	0xFF7
 11127                           tblptrl	equ	0xFF6
 11128                           tablat	equ	0xFF5
 11129                           prodh	equ	0xFF4
 11130                           prodl	equ	0xFF3
 11131                           intcon	equ	0xFF2
 11132                           postinc0	equ	0xFEE
 11133                           wreg	equ	0xFE8
 11134                           indf1	equ	0xFE7
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           plusw2	equ	0xFDB
 11141                           fsr2h	equ	0xFDA
 11142                           fsr2l	equ	0xFD9
 11143                           status	equ	0xFD8
 11144                           
 11145 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11146 ;; Defined at:
 11147 ;;		line 2327 in file "../main.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      unsigned char 
 11154 ;; Registers used:
 11155 ;;		wreg
 11156 ;; Tracked objects:
 11157 ;;		On entry : F/0
 11158 ;;		On exit  : F/0
 11159 ;;		Unchanged: F/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    2
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_vscp_readStdReg
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text33
 11176  004426                     __ptext33:
 11177                           	opt stack 0
 11178  004426                     _vscp_getBootLoaderAlgorithm:
 11179                           	opt stack 26
 11180                           
 11181                           ; BSR set to: 0
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;main.c: 2328: return 0x01;
 11185                           
 11186                           ; BSR set to: 0
 11187                           ;incstack = 0
 11188                           ;incstack = 0
 11189  004426  0C01               	retlw	1
 11190  004428                     __end_of_vscp_getBootLoaderAlgorithm:
 11191                           	opt stack 0
 11192                           tblptru	equ	0xFF8
 11193                           tblptrh	equ	0xFF7
 11194                           tblptrl	equ	0xFF6
 11195                           tablat	equ	0xFF5
 11196                           prodh	equ	0xFF4
 11197                           prodl	equ	0xFF3
 11198                           intcon	equ	0xFF2
 11199                           postinc0	equ	0xFEE
 11200                           wreg	equ	0xFE8
 11201                           indf1	equ	0xFE7
 11202                           fsr1h	equ	0xFE2
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           plusw2	equ	0xFDB
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _vscp_getManufacturerId *****************
 11213 ;; Defined at:
 11214 ;;		line 2318 in file "../main.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  idx             1    wreg     unsigned char 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;  idx             1   10[COMRAM] unsigned char 
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  1    wreg      unsigned char 
 11221 ;; Registers used:
 11222 ;;		wreg, status,2, status,0, cstack
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11229 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11231 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11232 ;;Total ram usage:        1 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; Hardware stack levels required when called:    3
 11235 ;; This function calls:
 11236 ;;		_readEEPROM
 11237 ;; This function is called by:
 11238 ;;		_vscp_readStdReg
 11239 ;;		_vscp_writeStdReg
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text34
 11244  004330                     __ptext34:
 11245                           	opt stack 0
 11246  004330                     _vscp_getManufacturerId:
 11247                           	opt stack 25
 11248                           
 11249                           ; BSR set to: 0
 11250                           ;incstack = 0
 11251                           ;incstack = 0
 11252                           ;vscp_getManufacturerId@idx stored from wreg
 11253  004330  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11254                           
 11255                           ;main.c: 2319: return readEEPROM( 0x0B + idx );
 11256  004334  0E0B               	movlw	11
 11257  004336  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11258  004338  6E08               	movwf	?_readEEPROM,c
 11259  00433A  6A09               	clrf	?_readEEPROM+1,c
 11260  00433C  0E00               	movlw	0
 11261  00433E  2209               	addwfc	?_readEEPROM+1,f,c
 11262  004340  EFDA  F021         	goto	_readEEPROM	;wreg free
 11263  004344                     __end_of_vscp_getManufacturerId:
 11264                           	opt stack 0
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           postinc0	equ	0xFEE
 11273                           wreg	equ	0xFE8
 11274                           indf1	equ	0xFE7
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           plusw2	equ	0xFDB
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _vscp_getUserID *****************
 11286 ;; Defined at:
 11287 ;;		line 2298 in file "../main.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;  idx             1    wreg     unsigned char 
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  idx             1   10[COMRAM] unsigned char 
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  1    wreg      unsigned char 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11305 ;;Total ram usage:        1 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    3
 11308 ;; This function calls:
 11309 ;;		_readEEPROM
 11310 ;; This function is called by:
 11311 ;;		_vscp_readStdReg
 11312 ;;		_vscp_writeStdReg
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           	psect	text35
 11317  004344                     __ptext35:
 11318                           	opt stack 0
 11319  004344                     _vscp_getUserID:
 11320                           	opt stack 25
 11321                           
 11322                           ;incstack = 0
 11323                           ;incstack = 0
 11324                           ;vscp_getUserID@idx stored from wreg
 11325  004344  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11326                           
 11327                           ;main.c: 2299: return readEEPROM( 0x06 + idx );
 11328  004348  0E06               	movlw	6
 11329  00434A  240B               	addwf	vscp_getUserID@idx,w,c
 11330  00434C  6E08               	movwf	?_readEEPROM,c
 11331  00434E  6A09               	clrf	?_readEEPROM+1,c
 11332  004350  0E00               	movlw	0
 11333  004352  2209               	addwfc	?_readEEPROM+1,f,c
 11334  004354  EFDA  F021         	goto	_readEEPROM	;wreg free
 11335  004358                     __end_of_vscp_getUserID:
 11336                           	opt stack 0
 11337                           tblptru	equ	0xFF8
 11338                           tblptrh	equ	0xFF7
 11339                           tblptrl	equ	0xFF6
 11340                           tablat	equ	0xFF5
 11341                           prodh	equ	0xFF4
 11342                           prodl	equ	0xFF3
 11343                           intcon	equ	0xFF2
 11344                           postinc0	equ	0xFEE
 11345                           wreg	equ	0xFE8
 11346                           indf1	equ	0xFE7
 11347                           fsr1h	equ	0xFE2
 11348                           fsr1l	equ	0xFE1
 11349                           indf2	equ	0xFDF
 11350                           postinc2	equ	0xFDE
 11351                           postdec2	equ	0xFDD
 11352                           plusw2	equ	0xFDB
 11353                           fsr2h	equ	0xFDA
 11354                           fsr2l	equ	0xFD9
 11355                           status	equ	0xFD8
 11356                           
 11357 ;; *************** function _vscp_getMDF_URL *****************
 11358 ;; Defined at:
 11359 ;;		line 2289 in file "../main.c"
 11360 ;; Parameters:    Size  Location     Type
 11361 ;;  idx             1    wreg     unsigned char 
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;  idx             1    8[COMRAM] unsigned char 
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  1    wreg      unsigned char 
 11366 ;; Registers used:
 11367 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11368 ;; Tracked objects:
 11369 ;;		On entry : F/0
 11370 ;;		On exit  : F/0
 11371 ;;		Unchanged: F/0
 11372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11375 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11376 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11377 ;;Total ram usage:        2 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:    2
 11380 ;; This function calls:
 11381 ;;		Nothing
 11382 ;; This function is called by:
 11383 ;;		_vscp_readStdReg
 11384 ;;		_vscp_handleProtocolEvent
 11385 ;; This function uses a non-reentrant model
 11386 ;;
 11387                           
 11388                           	psect	text36
 11389  0042B4                     __ptext36:
 11390                           	opt stack 0
 11391  0042B4                     _vscp_getMDF_URL:
 11392                           	opt stack 26
 11393                           
 11394                           ;incstack = 0
 11395                           ;incstack = 0
 11396                           ;vscp_getMDF_URL@idx stored from wreg
 11397  0042B4  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;main.c: 2290: return vscp_deviceURL[ idx ];
 11401  0042B8  5009               	movf	vscp_getMDF_URL@idx,w,c
 11402  0042BA  0F00               	addlw	low _vscp_deviceURL
 11403  0042BC  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11404  0042BE  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11405  0042C2  0E0F               	movlw	high __smallconst
 11406  0042C4  6EF7               	movwf	tblptrh,c
 11407  0042C6  0E00               	movlw	low (__smallconst shr (0+16))
 11408  0042C8  6EF8               	movwf	tblptru,c
 11409  0042CA  0008               	tblrd		*
 11410  0042CC  50F5               	movf	tablat,w,c
 11411                           
 11412                           ; BSR set to: 0
 11413  0042CE  0012               	return	
 11414  0042D0                     __end_of_vscp_getMDF_URL:
 11415                           	opt stack 0
 11416                           tblptru	equ	0xFF8
 11417                           tblptrh	equ	0xFF7
 11418                           tblptrl	equ	0xFF6
 11419                           tablat	equ	0xFF5
 11420                           prodh	equ	0xFF4
 11421                           prodl	equ	0xFF3
 11422                           intcon	equ	0xFF2
 11423                           postinc0	equ	0xFEE
 11424                           wreg	equ	0xFE8
 11425                           indf1	equ	0xFE7
 11426                           fsr1h	equ	0xFE2
 11427                           fsr1l	equ	0xFE1
 11428                           indf2	equ	0xFDF
 11429                           postinc2	equ	0xFDE
 11430                           postdec2	equ	0xFDD
 11431                           plusw2	equ	0xFDB
 11432                           fsr2h	equ	0xFDA
 11433                           fsr2l	equ	0xFD9
 11434                           status	equ	0xFD8
 11435                           
 11436 ;; *************** function _vscp_getGUID *****************
 11437 ;; Defined at:
 11438 ;;		line 2277 in file "../main.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  idx             1    wreg     unsigned char 
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;  idx             1   10[COMRAM] unsigned char 
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  1    wreg      unsigned char 
 11445 ;; Registers used:
 11446 ;;		wreg, status,2, status,0, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11456 ;;Total ram usage:        1 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    3
 11459 ;; This function calls:
 11460 ;;		_readEEPROM
 11461 ;; This function is called by:
 11462 ;;		_vscp_readStdReg
 11463 ;;		_vscp_writeStdReg
 11464 ;;		_vscp_handleProtocolEvent
 11465 ;; This function uses a non-reentrant model
 11466 ;;
 11467                           
 11468                           	psect	text37
 11469  004358                     __ptext37:
 11470                           	opt stack 0
 11471  004358                     _vscp_getGUID:
 11472                           	opt stack 25
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;incstack = 0
 11476                           ;incstack = 0
 11477                           ;vscp_getGUID@idx stored from wreg
 11478  004358  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11479                           
 11480                           ;main.c: 2278: return readEEPROM( 0x13 + idx );
 11481  00435C  0E13               	movlw	19
 11482  00435E  240B               	addwf	vscp_getGUID@idx,w,c
 11483  004360  6E08               	movwf	?_readEEPROM,c
 11484  004362  6A09               	clrf	?_readEEPROM+1,c
 11485  004364  0E00               	movlw	0
 11486  004366  2209               	addwfc	?_readEEPROM+1,f,c
 11487  004368  EFDA  F021         	goto	_readEEPROM	;wreg free
 11488  00436C                     __end_of_vscp_getGUID:
 11489                           	opt stack 0
 11490                           tblptru	equ	0xFF8
 11491                           tblptrh	equ	0xFF7
 11492                           tblptrl	equ	0xFF6
 11493                           tablat	equ	0xFF5
 11494                           prodh	equ	0xFF4
 11495                           prodl	equ	0xFF3
 11496                           intcon	equ	0xFF2
 11497                           postinc0	equ	0xFEE
 11498                           wreg	equ	0xFE8
 11499                           indf1	equ	0xFE7
 11500                           fsr1h	equ	0xFE2
 11501                           fsr1l	equ	0xFE1
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           plusw2	equ	0xFDB
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function _vscp_getSubMinorVersion *****************
 11511 ;; Defined at:
 11512 ;;		line 2266 in file "../main.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;		None
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;		None
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  1    wreg      unsigned char 
 11519 ;; Registers used:
 11520 ;;		wreg
 11521 ;; Tracked objects:
 11522 ;;		On entry : F/0
 11523 ;;		On exit  : F/0
 11524 ;;		Unchanged: F/0
 11525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11530 ;;Total ram usage:        0 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    2
 11533 ;; This function calls:
 11534 ;;		Nothing
 11535 ;; This function is called by:
 11536 ;;		_vscp_readStdReg
 11537 ;; This function uses a non-reentrant model
 11538 ;;
 11539                           
 11540                           	psect	text38
 11541  004428                     __ptext38:
 11542                           	opt stack 0
 11543  004428                     _vscp_getSubMinorVersion:
 11544                           	opt stack 26
 11545                           
 11546                           ; BSR set to: 0
 11547                           
 11548                           ; BSR set to: 0
 11549                           ;main.c: 2267: return 0;
 11550                           
 11551                           ;incstack = 0
 11552                           ;incstack = 0
 11553  004428  0C00               	retlw	0
 11554  00442A                     __end_of_vscp_getSubMinorVersion:
 11555                           	opt stack 0
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           intcon	equ	0xFF2
 11563                           postinc0	equ	0xFEE
 11564                           wreg	equ	0xFE8
 11565                           indf1	equ	0xFE7
 11566                           fsr1h	equ	0xFE2
 11567                           fsr1l	equ	0xFE1
 11568                           indf2	equ	0xFDF
 11569                           postinc2	equ	0xFDE
 11570                           postdec2	equ	0xFDD
 11571                           plusw2	equ	0xFDB
 11572                           fsr2h	equ	0xFDA
 11573                           fsr2l	equ	0xFD9
 11574                           status	equ	0xFD8
 11575                           
 11576 ;; *************** function _vscp_getMinorVersion *****************
 11577 ;; Defined at:
 11578 ;;		line 2257 in file "../main.c"
 11579 ;; Parameters:    Size  Location     Type
 11580 ;;		None
 11581 ;; Auto vars:     Size  Location     Type
 11582 ;;		None
 11583 ;; Return value:  Size  Location     Type
 11584 ;;                  1    wreg      unsigned char 
 11585 ;; Registers used:
 11586 ;;		wreg
 11587 ;; Tracked objects:
 11588 ;;		On entry : F/0
 11589 ;;		On exit  : F/0
 11590 ;;		Unchanged: F/0
 11591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11596 ;;Total ram usage:        0 bytes
 11597 ;; Hardware stack levels used:    1
 11598 ;; Hardware stack levels required when called:    2
 11599 ;; This function calls:
 11600 ;;		Nothing
 11601 ;; This function is called by:
 11602 ;;		_vscp_readStdReg
 11603 ;; This function uses a non-reentrant model
 11604 ;;
 11605                           
 11606                           	psect	text39
 11607  00442A                     __ptext39:
 11608                           	opt stack 0
 11609  00442A                     _vscp_getMinorVersion:
 11610                           	opt stack 26
 11611                           
 11612                           ; BSR set to: 0
 11613                           
 11614                           ; BSR set to: 0
 11615                           ;main.c: 2258: return 1;
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;incstack = 0
 11619                           ;incstack = 0
 11620  00442A  0C01               	retlw	1
 11621  00442C                     __end_of_vscp_getMinorVersion:
 11622                           	opt stack 0
 11623                           tblptru	equ	0xFF8
 11624                           tblptrh	equ	0xFF7
 11625                           tblptrl	equ	0xFF6
 11626                           tablat	equ	0xFF5
 11627                           prodh	equ	0xFF4
 11628                           prodl	equ	0xFF3
 11629                           intcon	equ	0xFF2
 11630                           postinc0	equ	0xFEE
 11631                           wreg	equ	0xFE8
 11632                           indf1	equ	0xFE7
 11633                           fsr1h	equ	0xFE2
 11634                           fsr1l	equ	0xFE1
 11635                           indf2	equ	0xFDF
 11636                           postinc2	equ	0xFDE
 11637                           postdec2	equ	0xFDD
 11638                           plusw2	equ	0xFDB
 11639                           fsr2h	equ	0xFDA
 11640                           fsr2l	equ	0xFD9
 11641                           status	equ	0xFD8
 11642                           
 11643 ;; *************** function _vscp_getMajorVersion *****************
 11644 ;; Defined at:
 11645 ;;		line 2248 in file "../main.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;		None
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;		None
 11650 ;; Return value:  Size  Location     Type
 11651 ;;                  1    wreg      unsigned char 
 11652 ;; Registers used:
 11653 ;;		wreg
 11654 ;; Tracked objects:
 11655 ;;		On entry : F/0
 11656 ;;		On exit  : F/0
 11657 ;;		Unchanged: F/0
 11658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11663 ;;Total ram usage:        0 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    2
 11666 ;; This function calls:
 11667 ;;		Nothing
 11668 ;; This function is called by:
 11669 ;;		_vscp_readStdReg
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           	psect	text40
 11674  00442C                     __ptext40:
 11675                           	opt stack 0
 11676  00442C                     _vscp_getMajorVersion:
 11677                           	opt stack 26
 11678                           
 11679                           ; BSR set to: 0
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;main.c: 2249: return 1;
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;incstack = 0
 11686                           ;incstack = 0
 11687  00442C  0C01               	retlw	1
 11688  00442E                     __end_of_vscp_getMajorVersion:
 11689                           	opt stack 0
 11690                           tblptru	equ	0xFF8
 11691                           tblptrh	equ	0xFF7
 11692                           tblptrl	equ	0xFF6
 11693                           tablat	equ	0xFF5
 11694                           prodh	equ	0xFF4
 11695                           prodl	equ	0xFF3
 11696                           intcon	equ	0xFF2
 11697                           postinc0	equ	0xFEE
 11698                           wreg	equ	0xFE8
 11699                           indf1	equ	0xFE7
 11700                           fsr1h	equ	0xFE2
 11701                           fsr1l	equ	0xFE1
 11702                           indf2	equ	0xFDF
 11703                           postinc2	equ	0xFDE
 11704                           postdec2	equ	0xFDD
 11705                           plusw2	equ	0xFDB
 11706                           fsr2h	equ	0xFDA
 11707                           fsr2l	equ	0xFD9
 11708                           status	equ	0xFD8
 11709                           
 11710 ;; *************** function _vscp_newNodeOnline *****************
 11711 ;; Defined at:
 11712 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;		None
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;		None
 11717 ;; Return value:  Size  Location     Type
 11718 ;;		None               void
 11719 ;; Registers used:
 11720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11721 ;; Tracked objects:
 11722 ;;		On entry : F/0
 11723 ;;		On exit  : F/0
 11724 ;;		Unchanged: 0/0
 11725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11728 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11729 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11730 ;;Total ram usage:        1 bytes
 11731 ;; Hardware stack levels used:    1
 11732 ;; Hardware stack levels required when called:    7
 11733 ;; This function calls:
 11734 ;;		_vscp_sendEvent
 11735 ;; This function is called by:
 11736 ;;		_vscp_handleProtocolEvent
 11737 ;; This function uses a non-reentrant model
 11738 ;;
 11739                           
 11740                           	psect	text41
 11741  0040AE                     __ptext41:
 11742                           	opt stack 0
 11743  0040AE                     _vscp_newNodeOnline:
 11744                           	opt stack 22
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11748                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11749                           
 11750                           ; BSR set to: 0
 11751                           ;incstack = 0
 11752                           ;incstack = 0
 11753  0040AE  C096  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11754  0040B2  0E0F               	movlw	15
 11755  0040B4  164C               	andwf	??_vscp_newNodeOnline,f,c
 11756  0040B6  044C               	decf	??_vscp_newNodeOnline,w,c
 11757  0040B8  A4D8               	btfss	status,2,c
 11758  0040BA  0012               	return	
 11759                           
 11760                           ; BSR set to: 0
 11761  0040BC  5191               	movf	_vscp_nickname& (0+255),w,b
 11762  0040BE  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11763  0040C2  62DF               	cpfseq	indf2,c
 11764  0040C4  0012               	return	
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 11768  0040C6  0E80               	movlw	128
 11769  0040C8  6FA4               	movwf	_vscp_omsg& (0+255),b
 11770                           
 11771                           ; BSR set to: 0
 11772                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 11773  0040CA  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11774                           
 11775                           ; BSR set to: 0
 11776                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 11777  0040CC  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11778  0040CE  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11779                           
 11780                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 11781  0040D0  0E03               	movlw	3
 11782  0040D2  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;vscp_firmware.c: 506: vscp_sendEvent();
 11786  0040D4  EF93  F020         	goto	_vscp_sendEvent	;wreg free
 11787  0040D8                     __end_of_vscp_newNodeOnline:
 11788                           	opt stack 0
 11789                           tblptru	equ	0xFF8
 11790                           tblptrh	equ	0xFF7
 11791                           tblptrl	equ	0xFF6
 11792                           tablat	equ	0xFF5
 11793                           prodh	equ	0xFF4
 11794                           prodl	equ	0xFF3
 11795                           intcon	equ	0xFF2
 11796                           postinc0	equ	0xFEE
 11797                           wreg	equ	0xFE8
 11798                           indf1	equ	0xFE7
 11799                           fsr1h	equ	0xFE2
 11800                           fsr1l	equ	0xFE1
 11801                           indf2	equ	0xFDF
 11802                           postinc2	equ	0xFDE
 11803                           postdec2	equ	0xFDD
 11804                           plusw2	equ	0xFDB
 11805                           fsr2h	equ	0xFDA
 11806                           fsr2l	equ	0xFD9
 11807                           status	equ	0xFD8
 11808                           
 11809 ;; *************** function _vscp_handleDropNickname *****************
 11810 ;; Defined at:
 11811 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;		None
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  bytes           1   11[COMRAM] unsigned char 
 11816 ;; Return value:  Size  Location     Type
 11817 ;;		None               void
 11818 ;; Registers used:
 11819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11820 ;; Tracked objects:
 11821 ;;		On entry : F/0
 11822 ;;		On exit  : F/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11828 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11829 ;;Total ram usage:        1 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    5
 11832 ;; This function calls:
 11833 ;;		_vscp_init
 11834 ;;		_vscp_writeNicknamePermanent
 11835 ;; This function is called by:
 11836 ;;		_vscp_handleProtocolEvent
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           	psect	text42
 11841  004024                     __ptext42:
 11842                           	opt stack 0
 11843  004024                     _vscp_handleDropNickname:
 11844                           	opt stack 24
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;incstack = 0
 11851                           ;incstack = 0
 11852  004024  5196               	movf	_vscp_imsg& (0+255),w,b
 11853  004026  0B0F               	andlw	15
 11854  004028  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11858  00402A  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11859  00402C  B4D8               	btfsc	status,2,c
 11860  00402E  0012               	return	
 11861                           
 11862                           ; BSR set to: 0
 11863  004030  5191               	movf	_vscp_nickname& (0+255),w,b
 11864  004032  EE20  F09C         	lfsr	2,_vscp_imsg+6
 11865  004036  62DF               	cpfseq	indf2,c
 11866  004038  0012               	return	
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11870  00403A  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11871  00403C  E005               	bz	l1093
 11872                           
 11873                           ; BSR set to: 0
 11874  00403E  0E01               	movlw	1
 11875  004040  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11876  004042  0C01               	retlw	1
 11877                           
 11878                           ; BSR set to: 0
 11879  004044  679D               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11880  004046  0C01               	retlw	1
 11881  004048                     l1093:
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 11885  004048  6991               	setf	_vscp_nickname& (0+255),b
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 11889  00404A  0EFF               	movlw	255
 11890  00404C  ECC8  F021         	call	_vscp_writeNicknamePermanent
 11891                           
 11892                           ;vscp_firmware.c: 473: vscp_init();
 11893  004050  EFB0  F01F         	goto	_vscp_init	;wreg free
 11894  004054                     __end_of_vscp_handleDropNickname:
 11895                           	opt stack 0
 11896                           tblptru	equ	0xFF8
 11897                           tblptrh	equ	0xFF7
 11898                           tblptrl	equ	0xFF6
 11899                           tablat	equ	0xFF5
 11900                           prodh	equ	0xFF4
 11901                           prodl	equ	0xFF3
 11902                           intcon	equ	0xFF2
 11903                           postinc0	equ	0xFEE
 11904                           wreg	equ	0xFE8
 11905                           indf1	equ	0xFE7
 11906                           fsr1h	equ	0xFE2
 11907                           fsr1l	equ	0xFE1
 11908                           indf2	equ	0xFDF
 11909                           postinc2	equ	0xFDE
 11910                           postdec2	equ	0xFDD
 11911                           plusw2	equ	0xFDB
 11912                           fsr2h	equ	0xFDA
 11913                           fsr2l	equ	0xFD9
 11914                           status	equ	0xFD8
 11915                           
 11916 ;; *************** function _vscp_init *****************
 11917 ;; Defined at:
 11918 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 11919 ;; Parameters:    Size  Location     Type
 11920 ;;		None
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;		None
 11923 ;; Return value:  Size  Location     Type
 11924 ;;		None               void
 11925 ;; Registers used:
 11926 ;;		wreg, status,2, cstack
 11927 ;; Tracked objects:
 11928 ;;		On entry : 0/0
 11929 ;;		On exit  : F/0
 11930 ;;		Unchanged: 0/0
 11931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11936 ;;Total ram usage:        0 bytes
 11937 ;; Hardware stack levels used:    1
 11938 ;; Hardware stack levels required when called:    4
 11939 ;; This function calls:
 11940 ;;		_vscp_readNicknamePermanent
 11941 ;; This function is called by:
 11942 ;;		_main
 11943 ;;		_vscp_handleDropNickname
 11944 ;;		_vscp_handleProtocolEvent
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text43
 11949  003F60                     __ptext43:
 11950                           	opt stack 0
 11951  003F60                     _vscp_init:
 11952                           	opt stack 24
 11953                           
 11954                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 11955                           
 11956                           ; BSR set to: 0
 11957                           ;incstack = 0
 11958                           ;incstack = 0
 11959  003F60  0E02               	movlw	2
 11960  003F62  6E56               	movwf	_vscp_initledfunc,c
 11961                           
 11962                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 11963  003F64  EC00  F022         	call	_vscp_readNicknamePermanent	;wreg free
 11964  003F68  0100               	movlb	0	; () banked
 11965  003F6A  6F91               	movwf	_vscp_nickname& (0+255),b
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 11969  003F6C  6791               	tstfsz	_vscp_nickname& (0+255),b
 11970  003F6E  D001               	goto	l1035
 11971                           
 11972                           ; BSR set to: 0
 11973  003F70  6991               	setf	_vscp_nickname& (0+255),b
 11974  003F72                     l1035:
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 11978  003F72  6B96               	clrf	_vscp_imsg& (0+255),b
 11979                           
 11980                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 11981  003F74  6B97               	clrf	(_vscp_imsg+1)& (0+255),b
 11982                           
 11983                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 11984  003F76  6B98               	clrf	(_vscp_imsg+2)& (0+255),b
 11985  003F78  6B99               	clrf	(_vscp_imsg+3)& (0+255),b
 11986                           
 11987                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 11988  003F7A  6B9A               	clrf	(_vscp_imsg+4)& (0+255),b
 11989                           
 11990                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 11991  003F7C  6BA4               	clrf	_vscp_omsg& (0+255),b
 11992                           
 11993                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 11994  003F7E  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 11995                           
 11996                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 11997  003F80  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 11998  003F82  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 11999                           
 12000                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 12001  003F84  6BA8               	clrf	(_vscp_omsg+4)& (0+255),b
 12002                           
 12003                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 12004  003F86  6B8C               	clrf	_vscp_alarmstatus& (0+255),b
 12005                           
 12006                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 12007  003F88  6A57               	clrf	_vscp_probe_address,c
 12008                           
 12009                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 12010  003F8A  6B92               	clrf	_vscp_node_state& (0+255),b
 12011                           
 12012                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 12013  003F8C  6B93               	clrf	_vscp_node_substate& (0+255),b
 12014                           
 12015                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 12016  003F8E  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12017                           
 12018                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 12019  003F90  6A52               	clrf	_vscp_page_select,c
 12020  003F92  6A53               	clrf	_vscp_page_select+1,c
 12021                           
 12022                           ;vscp_firmware.c: 151: vscp_timer = 0;
 12023  003F94  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12024  003F96  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12025                           
 12026                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 12027  003F98  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12028  003F9A  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12029                           
 12030                           ;vscp_firmware.c: 153: vscp_second = 0;
 12031  003F9C  6B95               	clrf	_vscp_second& (0+255),b
 12032                           
 12033                           ;vscp_firmware.c: 154: vscp_minute = 0;
 12034  003F9E  6B90               	clrf	_vscp_minute& (0+255),b
 12035                           
 12036                           ;vscp_firmware.c: 155: vscp_hour = 0;
 12037  003FA0  6B8E               	clrf	_vscp_hour& (0+255),b
 12038                           
 12039                           ; BSR set to: 0
 12040  003FA2  0012               	return	
 12041  003FA4                     __end_of_vscp_init:
 12042                           	opt stack 0
 12043                           tblptru	equ	0xFF8
 12044                           tblptrh	equ	0xFF7
 12045                           tblptrl	equ	0xFF6
 12046                           tablat	equ	0xFF5
 12047                           prodh	equ	0xFF4
 12048                           prodl	equ	0xFF3
 12049                           intcon	equ	0xFF2
 12050                           postinc0	equ	0xFEE
 12051                           wreg	equ	0xFE8
 12052                           indf1	equ	0xFE7
 12053                           fsr1h	equ	0xFE2
 12054                           fsr1l	equ	0xFE1
 12055                           indf2	equ	0xFDF
 12056                           postinc2	equ	0xFDE
 12057                           postdec2	equ	0xFDD
 12058                           plusw2	equ	0xFDB
 12059                           fsr2h	equ	0xFDA
 12060                           fsr2l	equ	0xFD9
 12061                           status	equ	0xFD8
 12062                           
 12063 ;; *************** function _vscp_readNicknamePermanent *****************
 12064 ;; Defined at:
 12065 ;;		line 861 in file "../main.c"
 12066 ;; Parameters:    Size  Location     Type
 12067 ;;		None
 12068 ;; Auto vars:     Size  Location     Type
 12069 ;;		None
 12070 ;; Return value:  Size  Location     Type
 12071 ;;                  1    wreg      unsigned char 
 12072 ;; Registers used:
 12073 ;;		wreg, status,2, cstack
 12074 ;; Tracked objects:
 12075 ;;		On entry : 0/0
 12076 ;;		On exit  : 0/0
 12077 ;;		Unchanged: 0/0
 12078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12083 ;;Total ram usage:        0 bytes
 12084 ;; Hardware stack levels used:    1
 12085 ;; Hardware stack levels required when called:    3
 12086 ;; This function calls:
 12087 ;;		_readEEPROM
 12088 ;; This function is called by:
 12089 ;;		_vscp_init
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           	psect	text44
 12094  004400                     __ptext44:
 12095                           	opt stack 0
 12096  004400                     _vscp_readNicknamePermanent:
 12097                           	opt stack 24
 12098                           
 12099                           ;main.c: 862: return readEEPROM( 0x01 );
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;incstack = 0
 12103                           ;incstack = 0
 12104  004400  6A09               	clrf	?_readEEPROM+1,c
 12105  004402  0E01               	movlw	1
 12106  004404  6E08               	movwf	?_readEEPROM,c
 12107  004406  EFDA  F021         	goto	_readEEPROM	;wreg free
 12108  00440A                     __end_of_vscp_readNicknamePermanent:
 12109                           	opt stack 0
 12110                           tblptru	equ	0xFF8
 12111                           tblptrh	equ	0xFF7
 12112                           tblptrl	equ	0xFF6
 12113                           tablat	equ	0xFF5
 12114                           prodh	equ	0xFF4
 12115                           prodl	equ	0xFF3
 12116                           intcon	equ	0xFF2
 12117                           postinc0	equ	0xFEE
 12118                           wreg	equ	0xFE8
 12119                           indf1	equ	0xFE7
 12120                           fsr1h	equ	0xFE2
 12121                           fsr1l	equ	0xFE1
 12122                           indf2	equ	0xFDF
 12123                           postinc2	equ	0xFDE
 12124                           postdec2	equ	0xFDD
 12125                           plusw2	equ	0xFDB
 12126                           fsr2h	equ	0xFDA
 12127                           fsr2l	equ	0xFD9
 12128                           status	equ	0xFD8
 12129                           
 12130 ;; *************** function _vscp_handleSetNickname *****************
 12131 ;; Defined at:
 12132 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;		None
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;		None
 12137 ;; Return value:  Size  Location     Type
 12138 ;;		None               void
 12139 ;; Registers used:
 12140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12141 ;; Tracked objects:
 12142 ;;		On entry : F/0
 12143 ;;		On exit  : 0/0
 12144 ;;		Unchanged: 0/0
 12145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12150 ;;Total ram usage:        0 bytes
 12151 ;; Hardware stack levels used:    1
 12152 ;; Hardware stack levels required when called:    4
 12153 ;; This function calls:
 12154 ;;		_vscp_writeNicknamePermanent
 12155 ;;		_vscp_setSegmentCRC
 12156 ;; This function is called by:
 12157 ;;		_vscp_handleProtocolEvent
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           	psect	text45
 12162  004198                     __ptext45:
 12163                           	opt stack 0
 12164  004198                     _vscp_handleSetNickname:
 12165                           	opt stack 25
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 12169                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12170                           
 12171                           ;incstack = 0
 12172                           ;incstack = 0
 12173  004198  5196               	movf	_vscp_imsg& (0+255),w,b
 12174  00419A  0B0F               	andlw	15
 12175  00419C  0A02               	xorlw	2
 12176  00419E  A4D8               	btfss	status,2,c
 12177  0041A0  0012               	return	
 12178                           
 12179                           ; BSR set to: 0
 12180  0041A2  5191               	movf	_vscp_nickname& (0+255),w,b
 12181  0041A4  EE20  F09C         	lfsr	2,_vscp_imsg+6
 12182  0041A8  62DF               	cpfseq	indf2,c
 12183  0041AA  0012               	return	
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 12187  0041AC  C09D  F091         	movff	_vscp_imsg+7,_vscp_nickname
 12188                           
 12189                           ; BSR set to: 0
 12190                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 12191  0041B0  5191               	movf	_vscp_nickname& (0+255),w,b
 12192  0041B2  ECC8  F021         	call	_vscp_writeNicknamePermanent
 12193                           
 12194                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 12195  0041B6  0E40               	movlw	64
 12196  0041B8  EFBF  F021         	goto	_vscp_setSegmentCRC
 12197  0041BC                     __end_of_vscp_handleSetNickname:
 12198                           	opt stack 0
 12199                           tblptru	equ	0xFF8
 12200                           tblptrh	equ	0xFF7
 12201                           tblptrl	equ	0xFF6
 12202                           tablat	equ	0xFF5
 12203                           prodh	equ	0xFF4
 12204                           prodl	equ	0xFF3
 12205                           intcon	equ	0xFF2
 12206                           postinc0	equ	0xFEE
 12207                           wreg	equ	0xFE8
 12208                           indf1	equ	0xFE7
 12209                           fsr1h	equ	0xFE2
 12210                           fsr1l	equ	0xFE1
 12211                           indf2	equ	0xFDF
 12212                           postinc2	equ	0xFDE
 12213                           postdec2	equ	0xFDD
 12214                           plusw2	equ	0xFDB
 12215                           fsr2h	equ	0xFDA
 12216                           fsr2l	equ	0xFD9
 12217                           status	equ	0xFD8
 12218                           
 12219 ;; *************** function _vscp_handleHeartbeat *****************
 12220 ;; Defined at:
 12221 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;		None
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;		None
 12226 ;; Return value:  Size  Location     Type
 12227 ;;		None               void
 12228 ;; Registers used:
 12229 ;;		wreg, status,2, status,0, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : F/0
 12232 ;;		On exit  : 0/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12239 ;;Total ram usage:        0 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    4
 12242 ;; This function calls:
 12243 ;;		_vscp_writeNicknamePermanent
 12244 ;;		_vscp_getSegmentCRC
 12245 ;;		_vscp_setSegmentCRC
 12246 ;; This function is called by:
 12247 ;;		_vscp_handleProtocolEvent
 12248 ;; This function uses a non-reentrant model
 12249 ;;
 12250                           
 12251                           	psect	text46
 12252  003FA4                     __ptext46:
 12253                           	opt stack 0
 12254  003FA4                     _vscp_handleHeartbeat:
 12255                           	opt stack 25
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 12259                           
 12260                           ;incstack = 0
 12261                           ;incstack = 0
 12262  003FA4  EC05  F022         	call	_vscp_getSegmentCRC	;wreg free
 12263  003FA8  0900               	iorlw	0
 12264  003FAA  E118               	bnz	l8931
 12265                           
 12266                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12267                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12268  003FAC  0100               	movlb	0	; () banked
 12269  003FAE  5196               	movf	_vscp_imsg& (0+255),w,b
 12270  003FB0  0B0F               	andlw	15
 12271  003FB2  0A05               	xorlw	5
 12272  003FB4  A4D8               	btfss	status,2,c
 12273  003FB6  0012               	return	
 12274                           
 12275                           ; BSR set to: 0
 12276  003FB8  EC05  F022         	call	_vscp_getSegmentCRC	;wreg free
 12277  003FBC  0100               	movlb	0	; () banked
 12278  003FBE  199C               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12279  003FC0  B4D8               	btfsc	status,2,c
 12280  003FC2  0012               	return	
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12284  003FC4  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12285  003FC6  ECBF  F021         	call	_vscp_setSegmentCRC
 12286                           
 12287                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 12288  003FCA  0100               	movlb	0	; () banked
 12289  003FCC  6991               	setf	_vscp_nickname& (0+255),b
 12290                           
 12291                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 12292  003FCE  0EFF               	movlw	255
 12293  003FD0  ECC8  F021         	call	_vscp_writeNicknamePermanent
 12294                           
 12295                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 12296  003FD4  0E01               	movlw	1
 12297  003FD6  0100               	movlb	0	; () banked
 12298  003FD8  6F92               	movwf	_vscp_node_state& (0+255),b
 12299  003FDA  0C01               	retlw	1
 12300  003FDC                     l8931:
 12301                           
 12302                           ;vscp_firmware.c: 403: else {
 12303                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12304  003FDC  0100               	movlb	0	; () banked
 12305  003FDE  519C               	movf	(_vscp_imsg+6)& (0+255),w,b
 12306  003FE0  EFBF  F021         	goto	_vscp_setSegmentCRC
 12307  003FE4                     __end_of_vscp_handleHeartbeat:
 12308                           	opt stack 0
 12309                           tblptru	equ	0xFF8
 12310                           tblptrh	equ	0xFF7
 12311                           tblptrl	equ	0xFF6
 12312                           tablat	equ	0xFF5
 12313                           prodh	equ	0xFF4
 12314                           prodl	equ	0xFF3
 12315                           intcon	equ	0xFF2
 12316                           postinc0	equ	0xFEE
 12317                           wreg	equ	0xFE8
 12318                           indf1	equ	0xFE7
 12319                           fsr1h	equ	0xFE2
 12320                           fsr1l	equ	0xFE1
 12321                           indf2	equ	0xFDF
 12322                           postinc2	equ	0xFDE
 12323                           postdec2	equ	0xFDD
 12324                           plusw2	equ	0xFDB
 12325                           fsr2h	equ	0xFDA
 12326                           fsr2l	equ	0xFD9
 12327                           status	equ	0xFD8
 12328                           
 12329 ;; *************** function _vscp_getMatrixInfo *****************
 12330 ;; Defined at:
 12331 ;;		line 2458 in file "../main.c"
 12332 ;; Parameters:    Size  Location     Type
 12333 ;;  pData           1    wreg     PTR unsigned char 
 12334 ;;		 -> vscp_omsg(13), 
 12335 ;; Auto vars:     Size  Location     Type
 12336 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12337 ;;		 -> vscp_omsg(13), 
 12338 ;;  i               1    7[COMRAM] unsigned char 
 12339 ;; Return value:  Size  Location     Type
 12340 ;;		None               void
 12341 ;; Registers used:
 12342 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12343 ;; Tracked objects:
 12344 ;;		On entry : F/0
 12345 ;;		On exit  : F/0
 12346 ;;		Unchanged: 0/0
 12347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12352 ;;Total ram usage:        1 bytes
 12353 ;; Hardware stack levels used:    1
 12354 ;; Hardware stack levels required when called:    2
 12355 ;; This function calls:
 12356 ;;		Nothing
 12357 ;; This function is called by:
 12358 ;;		_vscp_handleProtocolEvent
 12359 ;; This function uses a non-reentrant model
 12360 ;;
 12361                           
 12362                           	psect	text47
 12363  0041FC                     __ptext47:
 12364                           	opt stack 0
 12365  0041FC                     _vscp_getMatrixInfo:
 12366                           	opt stack 27
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;main.c: 2459: uint8_t i;
 12370                           ;main.c: 2461: vscp_omsg.data[ 0 ] = 7;
 12371                           
 12372                           ;incstack = 0
 12373                           ;incstack = 0
 12374  0041FC  0E07               	movlw	7
 12375  0041FE  6FA9               	movwf	(_vscp_omsg+5)& (0+255),b
 12376                           
 12377                           ;main.c: 2462: vscp_omsg.data[ 1 ] = 72;
 12378  004200  0E48               	movlw	72
 12379  004202  6FAA               	movwf	(_vscp_omsg+6)& (0+255),b
 12380                           
 12381                           ;main.c: 2465: for ( i = 2; i < 8; i++ ) {
 12382  004204  0E02               	movlw	2
 12383  004206  6E08               	movwf	vscp_getMatrixInfo@i,c
 12384  004208                     l6429:
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;main.c: 2466: vscp_omsg.data[ i ] = 0;
 12388  004208  5008               	movf	vscp_getMatrixInfo@i,w,c
 12389  00420A  0FA9               	addlw	low (_vscp_omsg+5)
 12390  00420C  6ED9               	movwf	fsr2l,c
 12391  00420E  6ADA               	clrf	fsr2h,c
 12392  004210  6ADF               	clrf	indf2,c
 12393                           
 12394                           ; BSR set to: 0
 12395  004212  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12396                           
 12397                           ; BSR set to: 0
 12398  004214  0E07               	movlw	7
 12399  004216  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12400  004218  D7F7               	goto	l6429
 12401  00421A  0C07               	retlw	7
 12402  00421C                     __end_of_vscp_getMatrixInfo:
 12403                           	opt stack 0
 12404                           tblptru	equ	0xFF8
 12405                           tblptrh	equ	0xFF7
 12406                           tblptrl	equ	0xFF6
 12407                           tablat	equ	0xFF5
 12408                           prodh	equ	0xFF4
 12409                           prodl	equ	0xFF3
 12410                           intcon	equ	0xFF2
 12411                           postinc0	equ	0xFEE
 12412                           wreg	equ	0xFE8
 12413                           indf1	equ	0xFE7
 12414                           fsr1h	equ	0xFE2
 12415                           fsr1l	equ	0xFE1
 12416                           indf2	equ	0xFDF
 12417                           postinc2	equ	0xFDE
 12418                           postdec2	equ	0xFDD
 12419                           plusw2	equ	0xFDB
 12420                           fsr2h	equ	0xFDA
 12421                           fsr2l	equ	0xFD9
 12422                           status	equ	0xFD8
 12423                           
 12424 ;; *************** function _vscp_goBootloaderMode *****************
 12425 ;; Defined at:
 12426 ;;		line 2442 in file "../main.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  algorithm       1    wreg     unsigned char 
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;  algorithm       1   10[COMRAM] unsigned char 
 12431 ;; Return value:  Size  Location     Type
 12432 ;;		None               void
 12433 ;; Registers used:
 12434 ;;		wreg, status,2, status,0, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : F/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12443 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12444 ;;Total ram usage:        1 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    3
 12447 ;; This function calls:
 12448 ;;		_writeEEPROM
 12449 ;; This function is called by:
 12450 ;;		_vscp_handleProtocolEvent
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text48
 12455  0042D0                     __ptext48:
 12456                           	opt stack 0
 12457  0042D0                     _vscp_goBootloaderMode:
 12458                           	opt stack 26
 12459                           
 12460                           ; BSR set to: 0
 12461                           ;incstack = 0
 12462                           ;incstack = 0
 12463                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12464  0042D0  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12465                           
 12466                           ; BSR set to: 0
 12467                           ;main.c: 2443: if ( 0x01 != algorithm ) return;
 12468  0042D4  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12469  0042D6  A4D8               	btfss	status,2,c
 12470  0042D8  0012               	return	
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;main.c: 2447: writeEEPROM(0x00, 0xff);
 12474  0042DA  6A09               	clrf	?_writeEEPROM+1,c
 12475  0042DC  6A08               	clrf	?_writeEEPROM,c
 12476  0042DE  0EFF               	movlw	255
 12477  0042E0  680A               	setf	?_writeEEPROM+2,c
 12478  0042E2  ECB9  F020         	call	_writeEEPROM	;wreg free
 12479  0042E6  00FF               	reset		;# 
 12480  0042E8  0012               	return	
 12481  0042EA                     __end_of_vscp_goBootloaderMode:
 12482                           	opt stack 0
 12483                           tblptru	equ	0xFF8
 12484                           tblptrh	equ	0xFF7
 12485                           tblptrl	equ	0xFF6
 12486                           tablat	equ	0xFF5
 12487                           prodh	equ	0xFF4
 12488                           prodl	equ	0xFF3
 12489                           intcon	equ	0xFF2
 12490                           postinc0	equ	0xFEE
 12491                           wreg	equ	0xFE8
 12492                           indf1	equ	0xFE7
 12493                           fsr1h	equ	0xFE2
 12494                           fsr1l	equ	0xFE1
 12495                           indf2	equ	0xFDF
 12496                           postinc2	equ	0xFDE
 12497                           postdec2	equ	0xFDD
 12498                           plusw2	equ	0xFDB
 12499                           fsr2h	equ	0xFDA
 12500                           fsr2l	equ	0xFD9
 12501                           status	equ	0xFD8
 12502                           
 12503 ;; *************** function _vscp_handleProbeState *****************
 12504 ;; Defined at:
 12505 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;		None
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;		None
 12510 ;; Return value:  Size  Location     Type
 12511 ;;		None               void
 12512 ;; Registers used:
 12513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : F/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12523 ;;Total ram usage:        0 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    8
 12526 ;; This function calls:
 12527 ;;		_vscp_goActiveState
 12528 ;;		_vscp_writeNicknamePermanent
 12529 ;;		_vscp_sendEvent
 12530 ;;		_vscp_setSegmentCRC
 12531 ;; This function is called by:
 12532 ;;		_main
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           	psect	text49
 12537  003A92                     __ptext49:
 12538                           	opt stack 0
 12539  003A92                     _vscp_handleProbeState:
 12540                           	opt stack 22
 12541                           
 12542                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 12543                           
 12544                           ;incstack = 0
 12545                           ;incstack = 0
 12546  003A92  D053               	goto	l7353
 12547  003A94                     l7283:
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 12551  003A94  2857               	incf	_vscp_probe_address,w,c
 12552  003A96  E010               	bz	l7299
 12553                           
 12554                           ; BSR set to: 0
 12555                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 12556  003A98  0E81               	movlw	129
 12557  003A9A  6FA4               	movwf	_vscp_omsg& (0+255),b
 12558                           
 12559                           ; BSR set to: 0
 12560                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 12561  003A9C  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 12565  003A9E  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12566  003AA0  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12567                           
 12568                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 12569  003AA2  0E02               	movlw	2
 12570  003AA4  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12574  003AA6  C057  F0A9         	movff	_vscp_probe_address,_vscp_omsg+5
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;vscp_firmware.c: 214: vscp_sendEvent();
 12578  003AAA  EC93  F020         	call	_vscp_sendEvent	;wreg free
 12579                           
 12580                           ; BSR set to: 0
 12581                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 12582  003AAE  0E01               	movlw	1
 12583  003AB0  6F93               	movwf	_vscp_node_substate& (0+255),b
 12584  003AB2                     l7297:
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;vscp_firmware.c: 217: vscp_timer = 0;
 12588  003AB2  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12589  003AB4  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12590                           
 12591                           ;vscp_firmware.c: 219: } else {
 12592  003AB6  D048               	goto	l1050
 12593  003AB8                     l7299:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 12597  003AB8  0E04               	movlw	4
 12598  003ABA  6F92               	movwf	_vscp_node_state& (0+255),b
 12599                           
 12600                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 12601  003ABC  0E81               	movlw	129
 12602  003ABE  6FA4               	movwf	_vscp_omsg& (0+255),b
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 12606  003AC0  69A9               	setf	(_vscp_omsg+5)& (0+255),b
 12607                           
 12608                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 12609  003AC2  0E07               	movlw	7
 12610  003AC4  6FA5               	movwf	(_vscp_omsg+1)& (0+255),b
 12611                           
 12612                           ; BSR set to: 0
 12613                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 12614  003AC6  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12615  003AC8  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12616                           
 12617                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 12618  003ACA  0E03               	movlw	3
 12619  003ACC  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12620                           
 12621                           ; BSR set to: 0
 12622                           ;vscp_firmware.c: 232: vscp_sendEvent();
 12623  003ACE  EC93  F020         	call	_vscp_sendEvent	;wreg free
 12624  003AD2  D03A               	goto	l1050
 12625  003AD4                     l1051:
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 12629  003AD4  AF96               	btfss	_vscp_imsg& (0+255),7,b
 12630  003AD6  D00F               	goto	l7323
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 12634                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 12635  003AD8  5199               	movf	(_vscp_imsg+3)& (0+255),w,b
 12636  003ADA  1198               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12637  003ADC  E135               	bnz	l1050
 12638                           
 12639                           ; BSR set to: 0
 12640  003ADE  519A               	movf	(_vscp_imsg+4)& (0+255),w,b
 12641  003AE0  0A03               	xorlw	3
 12642  003AE2  E132               	bnz	l1050
 12643                           
 12644                           ; BSR set to: 0
 12645                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 12646  003AE4  6657               	tstfsz	_vscp_probe_address,c
 12647  003AE6  D003               	goto	l7317
 12648                           
 12649                           ; BSR set to: 0
 12650                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 12651  003AE8  0E02               	movlw	2
 12652  003AEA  6F92               	movwf	_vscp_node_state& (0+255),b
 12653  003AEC  D7E2               	goto	l7297
 12654  003AEE                     l7317:
 12655                           
 12656                           ; BSR set to: 0
 12657                           ;vscp_firmware.c: 256: vscp_probe_address++;
 12658  003AEE  2A57               	incf	_vscp_probe_address,f,c
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 12662  003AF0  6B93               	clrf	_vscp_node_substate& (0+255),b
 12663  003AF2                     l7321:
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 12667  003AF2  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12668  003AF4  D029               	goto	l1050
 12669  003AF6                     l7323:
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 12673  003AF6  0EE9               	movlw	233
 12674  003AF8  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12675  003AFA  0E03               	movlw	3
 12676  003AFC  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12677  003AFE  E324               	bnc	l1050
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 12681  003B00  2B94               	incf	_vscp_probe_cnt& (0+255),f,b
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 12685  003B02  0E02               	movlw	2
 12686  003B04  6594               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12687  003B06  D017               	goto	l1058
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 12691  003B08  6657               	tstfsz	_vscp_probe_address,c
 12692  003B0A  D005               	goto	l1059
 12693                           
 12694                           ; BSR set to: 0
 12695                           ;vscp_firmware.c: 274: vscp_probe_address++;
 12696  003B0C  2A57               	incf	_vscp_probe_address,f,c
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 12700  003B0E  6B93               	clrf	_vscp_node_substate& (0+255),b
 12701                           
 12702                           ; BSR set to: 0
 12703                           ;vscp_firmware.c: 276: vscp_timer = 0;
 12704  003B10  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12705  003B12  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12706  003B14  D7EE               	goto	l7321
 12707  003B16                     l1059:
 12708                           
 12709                           ; BSR set to: 0
 12710                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 12711  003B16  C057  F091         	movff	_vscp_probe_address,_vscp_nickname
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 12715  003B1A  0E03               	movlw	3
 12716  003B1C  6F92               	movwf	_vscp_node_state& (0+255),b
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 12720  003B1E  6B93               	clrf	_vscp_node_substate& (0+255),b
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 12724  003B20  5191               	movf	_vscp_nickname& (0+255),w,b
 12725  003B22  ECC8  F021         	call	_vscp_writeNicknamePermanent
 12726                           
 12727                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 12728  003B26  0E40               	movlw	64
 12729  003B28  ECBF  F021         	call	_vscp_setSegmentCRC
 12730                           
 12731                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 12732  003B2C  0100               	movlb	0	; () banked
 12733  003B2E  6B94               	clrf	_vscp_probe_cnt& (0+255),b
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;vscp_firmware.c: 290: vscp_goActiveState();
 12737  003B30  EC3C  F021         	call	_vscp_goActiveState	;wreg free
 12738  003B34  D009               	goto	l1050
 12739  003B36                     l1058:
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 12743  003B36  6B93               	clrf	_vscp_node_substate& (0+255),b
 12744  003B38  D007               	goto	l1050
 12745  003B3A                     l7353:
 12746  003B3A  0100               	movlb	0	; () banked
 12747  003B3C  5193               	movf	_vscp_node_substate& (0+255),w,b
 12748                           
 12749                           ; Switch size 1, requested type "space"
 12750                           ; Number of cases is 3, Range of values is 0 to 2
 12751                           ; switch strategies available:
 12752                           ; Name         Instructions Cycles
 12753                           ; simple_byte           10     6 (average)
 12754                           ;	Chosen strategy is simple_byte
 12755  003B3E  E0AA               	bz	l7283
 12756  003B40  0A01               	xorlw	1	; case 1
 12757  003B42  E0C8               	bz	l1051
 12758  003B44  0A03               	xorlw	3	; case 2
 12759  003B46  E1F7               	bnz	l1058
 12760  003B48                     l1050:
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 12764  003B48  6B96               	clrf	_vscp_imsg& (0+255),b
 12765                           
 12766                           ; BSR set to: 0
 12767  003B4A  0012               	return	
 12768  003B4C                     __end_of_vscp_handleProbeState:
 12769                           	opt stack 0
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           postinc0	equ	0xFEE
 12778                           wreg	equ	0xFE8
 12779                           indf1	equ	0xFE7
 12780                           fsr1h	equ	0xFE2
 12781                           fsr1l	equ	0xFE1
 12782                           indf2	equ	0xFDF
 12783                           postinc2	equ	0xFDE
 12784                           postdec2	equ	0xFDD
 12785                           plusw2	equ	0xFDB
 12786                           fsr2h	equ	0xFDA
 12787                           fsr2l	equ	0xFD9
 12788                           status	equ	0xFD8
 12789                           
 12790 ;; *************** function _vscp_goActiveState *****************
 12791 ;; Defined at:
 12792 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 12793 ;; Parameters:    Size  Location     Type
 12794 ;;		None
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;		None
 12797 ;; Return value:  Size  Location     Type
 12798 ;;		None               void
 12799 ;; Registers used:
 12800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12801 ;; Tracked objects:
 12802 ;;		On entry : 0/0
 12803 ;;		On exit  : F/0
 12804 ;;		Unchanged: 0/0
 12805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12810 ;;Total ram usage:        0 bytes
 12811 ;; Hardware stack levels used:    1
 12812 ;; Hardware stack levels required when called:    7
 12813 ;; This function calls:
 12814 ;;		_vscp_sendEvent
 12815 ;; This function is called by:
 12816 ;;		_main
 12817 ;;		_vscp_handleProbeState
 12818 ;; This function uses a non-reentrant model
 12819 ;;
 12820                           
 12821                           	psect	text50
 12822  004278                     __ptext50:
 12823                           	opt stack 0
 12824  004278                     _vscp_goActiveState:
 12825                           	opt stack 22
 12826                           
 12827                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 12828                           
 12829                           ; BSR set to: 0
 12830                           ;incstack = 0
 12831                           ;incstack = 0
 12832  004278  0E81               	movlw	129
 12833  00427A  0100               	movlb	0	; () banked
 12834  00427C  6FA4               	movwf	_vscp_omsg& (0+255),b
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 12838  00427E  6BA5               	clrf	(_vscp_omsg+1)& (0+255),b
 12839                           
 12840                           ; BSR set to: 0
 12841                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 12842  004280  6BA6               	clrf	(_vscp_omsg+2)& (0+255),b
 12843  004282  6BA7               	clrf	(_vscp_omsg+3)& (0+255),b
 12844                           
 12845                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 12846  004284  0E02               	movlw	2
 12847  004286  6FA8               	movwf	(_vscp_omsg+4)& (0+255),b
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 12851  004288  C091  F0A9         	movff	_vscp_nickname,_vscp_omsg+5
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;vscp_firmware.c: 358: vscp_sendEvent();
 12855  00428C  EC93  F020         	call	_vscp_sendEvent	;wreg free
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 12859  004290  0E01               	movlw	1
 12860  004292  6E56               	movwf	_vscp_initledfunc,c
 12861                           
 12862                           ; BSR set to: 0
 12863  004294  0C01               	retlw	1
 12864  004296                     __end_of_vscp_goActiveState:
 12865                           	opt stack 0
 12866                           tblptru	equ	0xFF8
 12867                           tblptrh	equ	0xFF7
 12868                           tblptrl	equ	0xFF6
 12869                           tablat	equ	0xFF5
 12870                           prodh	equ	0xFF4
 12871                           prodl	equ	0xFF3
 12872                           intcon	equ	0xFF2
 12873                           postinc0	equ	0xFEE
 12874                           wreg	equ	0xFE8
 12875                           indf1	equ	0xFE7
 12876                           fsr1h	equ	0xFE2
 12877                           fsr1l	equ	0xFE1
 12878                           indf2	equ	0xFDF
 12879                           postinc2	equ	0xFDE
 12880                           postdec2	equ	0xFDD
 12881                           plusw2	equ	0xFDB
 12882                           fsr2h	equ	0xFDA
 12883                           fsr2l	equ	0xFD9
 12884                           status	equ	0xFD8
 12885                           
 12886 ;; *************** function _vscp_sendEvent *****************
 12887 ;; Defined at:
 12888 ;;		line 1275 in file "../../vscp_firmware/common/vscp_firmware.c"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;		None
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;  rv              1    0        unsigned char 
 12893 ;; Return value:  Size  Location     Type
 12894 ;;                  1    wreg      unsigned char 
 12895 ;; Registers used:
 12896 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12897 ;; Tracked objects:
 12898 ;;		On entry : F/0
 12899 ;;		On exit  : F/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12905 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12906 ;;Total ram usage:        1 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    6
 12909 ;; This function calls:
 12910 ;;		_sendVSCPFrame
 12911 ;; This function is called by:
 12912 ;;		_vscp_handleProbeState
 12913 ;;		_vscp_goActiveState
 12914 ;;		_vscp_sendHeartBeat
 12915 ;;		_vscp_newNodeOnline
 12916 ;;		_vscp_handleProtocolEvent
 12917 ;; This function uses a non-reentrant model
 12918 ;;
 12919                           
 12920                           	psect	text51
 12921  004126                     __ptext51:
 12922                           	opt stack 0
 12923  004126                     _vscp_sendEvent:
 12924                           	opt stack 22
 12925                           
 12926                           ; BSR set to: 0
 12927                           
 12928                           ; BSR set to: 0
 12929                           ;incstack = 0
 12930                           ;incstack = 0
 12931  004126  C0A6  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12932  00412A  C0A7  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12933  00412E  C0A8  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12934  004132  C091  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12935  004136  C0A5  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12936  00413A  51A4               	movf	_vscp_omsg& (0+255),w,b
 12937  00413C  0B0F               	andlw	15
 12938  00413E  6E44               	movwf	?_sendVSCPFrame+5,c
 12939  004140  0E00               	movlw	high (_vscp_omsg+5)
 12940  004142  6E46               	movwf	?_sendVSCPFrame+7,c
 12941  004144  0EA9               	movlw	low (_vscp_omsg+5)
 12942  004146  6E45               	movwf	?_sendVSCPFrame+6,c
 12943  004148  EF01  F01E         	goto	_sendVSCPFrame	;wreg free
 12944  00414C                     __end_of_vscp_sendEvent:
 12945                           	opt stack 0
 12946                           tblptru	equ	0xFF8
 12947                           tblptrh	equ	0xFF7
 12948                           tblptrl	equ	0xFF6
 12949                           tablat	equ	0xFF5
 12950                           prodh	equ	0xFF4
 12951                           prodl	equ	0xFF3
 12952                           intcon	equ	0xFF2
 12953                           postinc0	equ	0xFEE
 12954                           wreg	equ	0xFE8
 12955                           indf1	equ	0xFE7
 12956                           fsr1h	equ	0xFE2
 12957                           fsr1l	equ	0xFE1
 12958                           indf2	equ	0xFDF
 12959                           postinc2	equ	0xFDE
 12960                           postdec2	equ	0xFDD
 12961                           plusw2	equ	0xFDB
 12962                           fsr2h	equ	0xFDA
 12963                           fsr2l	equ	0xFD9
 12964                           status	equ	0xFD8
 12965                           
 12966 ;; *************** function _sendVSCPFrame *****************
 12967 ;; Defined at:
 12968 ;;		line 2517 in file "../main.c"
 12969 ;; Parameters:    Size  Location     Type
 12970 ;;  vscpclass       2   62[COMRAM] unsigned short 
 12971 ;;  vscptype        1   64[COMRAM] unsigned char 
 12972 ;;  nodeid          1   65[COMRAM] unsigned char 
 12973 ;;  priority        1   66[COMRAM] unsigned char 
 12974 ;;  size            1   67[COMRAM] unsigned char 
 12975 ;;  pData           2   68[COMRAM] PTR unsigned char 
 12976 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 12977 ;; Auto vars:     Size  Location     Type
 12978 ;;  id              4   70[COMRAM] unsigned long 
 12979 ;; Return value:  Size  Location     Type
 12980 ;;                  1    wreg      unsigned char 
 12981 ;; Registers used:
 12982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12983 ;; Tracked objects:
 12984 ;;		On entry : F/0
 12985 ;;		On exit  : F/0
 12986 ;;		Unchanged: 0/0
 12987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12988 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12989 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12990 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12991 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12992 ;;Total ram usage:       32 bytes
 12993 ;; Hardware stack levels used:    1
 12994 ;; Hardware stack levels required when called:    5
 12995 ;; This function calls:
 12996 ;;		_sendCANFrame
 12997 ;; This function is called by:
 12998 ;;		_SendInformationEvent
 12999 ;;		_vscp_sendEvent
 13000 ;; This function uses a non-reentrant model
 13001 ;;
 13002                           
 13003                           	psect	text52
 13004  003C02                     __ptext52:
 13005                           	opt stack 0
 13006  003C02                     _sendVSCPFrame:
 13007                           	opt stack 23
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;main.c: 2518: uint32_t id = ( (uint32_t)priority << 26 ) |
 13011                           ;main.c: 2519: ( (uint32_t)vscpclass << 16 ) |
 13012                           ;main.c: 2520: ( (uint32_t)vscptype << 8 ) |
 13013                           ;main.c: 2521: nodeid;
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;incstack = 0
 13017                           ;incstack = 0
 13018  003C02  C041  F0B1         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13019  003C06  6BB2               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13020  003C08  6BB3               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13021  003C0A  6BB4               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13022  003C0C  C0B3  F0B4         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13023  003C10  C0B2  F0B3         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13024  003C14  C0B1  F0B2         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13025  003C18  6BB1               	clrf	??_sendVSCPFrame& (0+255),b
 13026  003C1A  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13027  003C1C  6FB5               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13028  003C1E  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13029  003C20  6FB6               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13030  003C22  6BB7               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13031  003C24  6BB8               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13032  003C26  C0B6  F0B8         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13033  003C2A  C0B5  F0B7         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13034  003C2E  6BB6               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13035  003C30  6BB5               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13036  003C32  C043  F0B9         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13037  003C36  6BBA               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13038  003C38  6BBB               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13039  003C3A  6BBC               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13040  003C3C  0E1A               	movlw	26
 13041  003C3E                     u10065:
 13042  003C3E  90D8               	bcf	status,0,c
 13043  003C40  37B9               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13044  003C42  37BA               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13045  003C44  37BB               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13046  003C46  37BC               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13047  003C48  2EE8               	decfsz	wreg,f,c
 13048  003C4A  D7F9               	goto	u10065
 13049  003C4C  51B5               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13050  003C4E  11B9               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13051  003C50  6FBD               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13052  003C52  51B6               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13053  003C54  11BA               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13054  003C56  6FBE               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13055  003C58  51B7               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13056  003C5A  11BB               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13057  003C5C  6FBF               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13058  003C5E  51B8               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13059  003C60  11BC               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13060  003C62  6FC0               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13061  003C64  51B1               	movf	??_sendVSCPFrame& (0+255),w,b
 13062  003C66  11BD               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13063  003C68  6FC1               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13064  003C6A  51B2               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13065  003C6C  11BE               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13066  003C6E  6FC2               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13067  003C70  51B3               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13068  003C72  11BF               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13069  003C74  6FC3               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13070  003C76  51B4               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13071  003C78  11C0               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13072  003C7A  6FC4               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13073  003C7C  5042               	movf	sendVSCPFrame@nodeid,w,c
 13074  003C7E  11C1               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13075  003C80  6E47               	movwf	sendVSCPFrame@id,c
 13076  003C82  51C2               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13077  003C84  6E48               	movwf	sendVSCPFrame@id+1,c
 13078  003C86  51C3               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13079  003C88  6E49               	movwf	sendVSCPFrame@id+2,c
 13080  003C8A  51C4               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13081  003C8C  6E4A               	movwf	sendVSCPFrame@id+3,c
 13082                           
 13083                           ; BSR set to: 0
 13084                           ;main.c: 2523: if ( !sendCANFrame( id, size, pData ) ) {
 13085  003C8E  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13086  003C92  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13087  003C96  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13088  003C9A  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13089  003C9E  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13090  003CA2  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13091  003CA6  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13092  003CAA  ECF2  F01F         	call	_sendCANFrame	;wreg free
 13093  003CAE  0900               	iorlw	0
 13094  003CB0  E101               	bnz	l8513
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;main.c: 2524: return 0;
 13098  003CB2  0C00               	retlw	0
 13099  003CB4                     l8513:
 13100                           
 13101                           ; BSR set to: 0
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;main.c: 2525: }
 13105                           ;main.c: 2527: return 1;
 13106  003CB4  0C01               	retlw	1
 13107  003CB6                     __end_of_sendVSCPFrame:
 13108                           	opt stack 0
 13109                           tblptru	equ	0xFF8
 13110                           tblptrh	equ	0xFF7
 13111                           tblptrl	equ	0xFF6
 13112                           tablat	equ	0xFF5
 13113                           prodh	equ	0xFF4
 13114                           prodl	equ	0xFF3
 13115                           intcon	equ	0xFF2
 13116                           postinc0	equ	0xFEE
 13117                           wreg	equ	0xFE8
 13118                           indf1	equ	0xFE7
 13119                           fsr1h	equ	0xFE2
 13120                           fsr1l	equ	0xFE1
 13121                           indf2	equ	0xFDF
 13122                           postinc2	equ	0xFDE
 13123                           postdec2	equ	0xFDD
 13124                           plusw2	equ	0xFDB
 13125                           fsr2h	equ	0xFDA
 13126                           fsr2l	equ	0xFD9
 13127                           status	equ	0xFD8
 13128                           
 13129 ;; *************** function _sendCANFrame *****************
 13130 ;; Defined at:
 13131 ;;		line 2562 in file "../main.c"
 13132 ;; Parameters:    Size  Location     Type
 13133 ;;  id              4   54[COMRAM] unsigned long 
 13134 ;;  dlc             1   58[COMRAM] unsigned char 
 13135 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13136 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13137 ;; Auto vars:     Size  Location     Type
 13138 ;;  rv              1   61[COMRAM] unsigned char 
 13139 ;; Return value:  Size  Location     Type
 13140 ;;                  1    wreg      unsigned char 
 13141 ;; Registers used:
 13142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13143 ;; Tracked objects:
 13144 ;;		On entry : F/0
 13145 ;;		On exit  : F/0
 13146 ;;		Unchanged: 0/0
 13147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13148 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13151 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13152 ;;Total ram usage:        8 bytes
 13153 ;; Hardware stack levels used:    1
 13154 ;; Hardware stack levels required when called:    4
 13155 ;; This function calls:
 13156 ;;		_ECANSendMessage
 13157 ;; This function is called by:
 13158 ;;		_sendVSCPFrame
 13159 ;; This function uses a non-reentrant model
 13160 ;;
 13161                           
 13162                           	psect	text53
 13163  003FE4                     __ptext53:
 13164                           	opt stack 0
 13165  003FE4                     _sendCANFrame:
 13166                           	opt stack 23
 13167                           
 13168                           ; BSR set to: 0
 13169                           ;main.c: 2563: uint8_t rv = 0;
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;incstack = 0
 13173                           ;incstack = 0
 13174  003FE4  6A3E               	clrf	sendCANFrame@rv,c
 13175                           
 13176                           ;main.c: 2564: sendTimer = 0;
 13177  003FE6  6A55               	clrf	_sendTimer,c
 13178                           
 13179                           ;main.c: 2566: while ( sendTimer < 1 ) {
 13180  003FE8  D017               	goto	l8803
 13181  003FEA                     l8799:
 13182                           
 13183                           ;main.c: 2567: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13184  003FEA  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13185  003FEE  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13186  003FF2  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13187  003FF6  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13188  003FFA  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13189  003FFE  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13190  004002  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13191  004006  0E20               	movlw	32
 13192  004008  6E19               	movwf	?_ECANSendMessage+7,c
 13193  00400A  EC95  F018         	call	_ECANSendMessage	;wreg free
 13194  00400E  0900               	iorlw	0
 13195  004010  E003               	bz	l8803
 13196                           
 13197                           ;main.c: 2568: rv = 1;
 13198  004012  0E01               	movlw	1
 13199  004014  6E3E               	movwf	sendCANFrame@rv,c
 13200                           
 13201                           ;main.c: 2569: break;
 13202  004016  D002               	goto	l656
 13203  004018                     l8803:
 13204  004018  5055               	movf	_sendTimer,w,c
 13205  00401A  E0E7               	bz	l8799
 13206  00401C                     l656:
 13207                           
 13208                           ;main.c: 2570: }
 13209                           ;main.c: 2571: }
 13210                           ;main.c: 2573: vscp_omsg.flags = 0;
 13211  00401C  0100               	movlb	0	; () banked
 13212  00401E  6BA4               	clrf	_vscp_omsg& (0+255),b
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;main.c: 2575: return rv;
 13216  004020  503E               	movf	sendCANFrame@rv,w,c
 13217                           
 13218                           ; BSR set to: 0
 13219  004022  0012               	return	
 13220  004024                     __end_of_sendCANFrame:
 13221                           	opt stack 0
 13222                           tblptru	equ	0xFF8
 13223                           tblptrh	equ	0xFF7
 13224                           tblptrl	equ	0xFF6
 13225                           tablat	equ	0xFF5
 13226                           prodh	equ	0xFF4
 13227                           prodl	equ	0xFF3
 13228                           intcon	equ	0xFF2
 13229                           postinc0	equ	0xFEE
 13230                           wreg	equ	0xFE8
 13231                           indf1	equ	0xFE7
 13232                           fsr1h	equ	0xFE2
 13233                           fsr1l	equ	0xFE1
 13234                           indf2	equ	0xFDF
 13235                           postinc2	equ	0xFDE
 13236                           postdec2	equ	0xFDD
 13237                           plusw2	equ	0xFDB
 13238                           fsr2h	equ	0xFDA
 13239                           fsr2l	equ	0xFD9
 13240                           status	equ	0xFD8
 13241                           
 13242 ;; *************** function _ECANSendMessage *****************
 13243 ;; Defined at:
 13244 ;;		line 617 in file "../ECAN.c"
 13245 ;; Parameters:    Size  Location     Type
 13246 ;;  id              4   17[COMRAM] unsigned long 
 13247 ;;  data            2   21[COMRAM] PTR unsigned char 
 13248 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13249 ;;  dataLen         1   23[COMRAM] unsigned char 
 13250 ;;  msgFlags        1   24[COMRAM] enum E18958
 13251 ;; Auto vars:     Size  Location     Type
 13252 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13253 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13254 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13255 ;;		 -> B0CON(1), 
 13256 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13257 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13258 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13259 ;;		 -> B0CON(1), 
 13260 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13261 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13262 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13263 ;;		 -> B0CON(1), 
 13264 ;;  i               1   51[COMRAM] unsigned char 
 13265 ;;  temp            1   50[COMRAM] unsigned char 
 13266 ;;  tempBSEL0       1   47[COMRAM] struct .
 13267 ;;  j               1   46[COMRAM] unsigned char 
 13268 ;;  buffers         1   45[COMRAM] unsigned char 
 13269 ;;  mode            1   44[COMRAM] unsigned char 
 13270 ;; Return value:  Size  Location     Type
 13271 ;;                  1    wreg      enum E18242
 13272 ;; Registers used:
 13273 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13274 ;; Tracked objects:
 13275 ;;		On entry : 0/0
 13276 ;;		On exit  : 0/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13279 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13280 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13282 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13283 ;;Total ram usage:       37 bytes
 13284 ;; Hardware stack levels used:    1
 13285 ;; Hardware stack levels required when called:    3
 13286 ;; This function calls:
 13287 ;;		__CANIDToRegs
 13288 ;; This function is called by:
 13289 ;;		_sendCANFrame
 13290 ;; This function uses a non-reentrant model
 13291 ;;
 13292                           
 13293                           	psect	text54
 13294  00312A                     __ptext54:
 13295                           	opt stack 0
 13296  00312A                     _ECANSendMessage:
 13297                           	opt stack 23
 13298                           
 13299                           ;ECAN.c: 619: BYTE mode;
 13300                           ;ECAN.c: 620: BYTE buffers;
 13301                           ;ECAN.c: 628: BYTE i,j;
 13302                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13303                           ;ECAN.c: 630: BYTE* pb[9];
 13304                           ;ECAN.c: 631: BYTE temp;
 13305                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13306                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13307                           
 13308                           ; BSR set to: 0
 13309                           ;incstack = 0
 13310                           ;incstack = 0
 13311  00312A  0E0F               	movlw	15	;volatile
 13312  00312C  6E1C               	movwf	ECANSendMessage@pb+1,c
 13313  00312E  0E20               	movlw	32	;volatile
 13314  003130  6E1B               	movwf	ECANSendMessage@pb,c
 13315                           
 13316                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13317  003132  0E0F               	movlw	15	;volatile
 13318  003134  6E1E               	movwf	ECANSendMessage@pb+3,c
 13319  003136  0E10               	movlw	16	;volatile
 13320  003138  6E1D               	movwf	ECANSendMessage@pb+2,c
 13321                           
 13322                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13323  00313A  0E0F               	movlw	15	;volatile
 13324  00313C  6E20               	movwf	ECANSendMessage@pb+5,c
 13325  00313E  6A1F               	clrf	ECANSendMessage@pb+4,c
 13326                           
 13327                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13328  003140  010E               	movlb	14	; () banked
 13329  003142  0E0E               	movlw	14	;volatile
 13330  003144  6E22               	movwf	ECANSendMessage@pb+7,c
 13331  003146  0E80               	movlw	128	;volatile
 13332  003148  6E21               	movwf	ECANSendMessage@pb+6,c
 13333                           
 13334                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13335  00314A  0E0E               	movlw	14	;volatile
 13336  00314C  6E24               	movwf	ECANSendMessage@pb+9,c
 13337  00314E  0E90               	movlw	144	;volatile
 13338  003150  6E23               	movwf	ECANSendMessage@pb+8,c
 13339                           
 13340                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13341  003152  0E0E               	movlw	14	;volatile
 13342  003154  6E26               	movwf	ECANSendMessage@pb+11,c
 13343  003156  0EA0               	movlw	160	;volatile
 13344  003158  6E25               	movwf	ECANSendMessage@pb+10,c
 13345                           
 13346                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13347  00315A  0E0E               	movlw	14	;volatile
 13348  00315C  6E28               	movwf	ECANSendMessage@pb+13,c
 13349  00315E  0EB0               	movlw	176	;volatile
 13350  003160  6E27               	movwf	ECANSendMessage@pb+12,c
 13351                           
 13352                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13353  003162  0E0E               	movlw	14	;volatile
 13354  003164  6E2A               	movwf	ECANSendMessage@pb+15,c
 13355  003166  0EC0               	movlw	192	;volatile
 13356  003168  6E29               	movwf	ECANSendMessage@pb+14,c
 13357                           
 13358                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13359  00316A  0E0E               	movlw	14	;volatile
 13360  00316C  6E2C               	movwf	ECANSendMessage@pb+17,c
 13361  00316E  0ED0               	movlw	208	;volatile
 13362  003170  6E2B               	movwf	ECANSendMessage@pb+16,c
 13363                           
 13364                           ; BSR set to: 14
 13365                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13366  003172  5072               	movf	3954,w,c	;volatile
 13367  003174  0BC0               	andlw	192
 13368  003176  6E2D               	movwf	ECANSendMessage@mode,c
 13369                           
 13370                           ; BSR set to: 14
 13371                           ;ECAN.c: 660: if ( mode == 0x00 )
 13372  003178  662D               	tstfsz	ECANSendMessage@mode,c
 13373  00317A  D002               	goto	l8817
 13374                           
 13375                           ; BSR set to: 14
 13376                           ;ECAN.c: 661: buffers = 2;
 13377  00317C  0E02               	movlw	2
 13378  00317E  D001               	goto	L38
 13379  003180                     l8817:
 13380                           
 13381                           ; BSR set to: 14
 13382                           ;ECAN.c: 662: else
 13383                           ;ECAN.c: 663: buffers = 8;
 13384  003180  0E08               	movlw	8
 13385  003182                     L38:
 13386  003182  6E2E               	movwf	ECANSendMessage@buffers,c
 13387                           
 13388                           ; BSR set to: 14
 13389                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13390  003184  90D8               	bcf	status,0,c
 13391  003186  317D               	rrcf	125,w,b	;volatile
 13392  003188  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13393                           
 13394                           ; BSR set to: 14
 13395                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13396  00318A  6A34               	clrf	ECANSendMessage@i,c
 13397  00318C  D07C               	goto	l8877
 13398  00318E                     l8823:
 13399                           
 13400                           ;ECAN.c: 688: {
 13401                           ;ECAN.c: 693: ptr = pb[i];
 13402  00318E  5034               	movf	ECANSendMessage@i,w,c
 13403  003190  0D02               	mullw	2
 13404  003192  50F3               	movf	prodl,w,c
 13405  003194  0F1B               	addlw	low ECANSendMessage@pb
 13406  003196  6ED9               	movwf	fsr2l,c
 13407  003198  6ADA               	clrf	fsr2h,c
 13408  00319A  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13409  00319E  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13410                           
 13411                           ;ECAN.c: 694: tempPtr = ptr;
 13412  0031A2  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13413  0031A6  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13414                           
 13415                           ;ECAN.c: 702: if ( i > 2 )
 13416  0031AA  0E02               	movlw	2
 13417  0031AC  6434               	cpfsgt	ECANSendMessage@i,c
 13418  0031AE  D004               	goto	l8835
 13419                           
 13420                           ;ECAN.c: 703: {
 13421                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13422  0031B0  90D8               	bcf	status,0,c
 13423  0031B2  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13424                           
 13425                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13426  0031B4  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13427  0031B6  D066               	goto	l8875
 13428  0031B8                     l8835:
 13429                           
 13430                           ;ECAN.c: 714: }
 13431                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13432  0031B8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13433  0031BC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13434  0031C0  50DF               	movf	indf2,w,c
 13435  0031C2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13436  0031C4  B61A               	btfsc	??_ECANSendMessage,3,c
 13437  0031C6  D05E               	goto	l8875
 13438                           
 13439                           ;ECAN.c: 721: {
 13440                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13441  0031C8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13442  0031CC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13443  0031D0  0EFC               	movlw	252
 13444  0031D2  16DF               	andwf	indf2,f,c
 13445                           
 13446                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13447  0031D4  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13448  0031D8  0E03               	movlw	3
 13449  0031DA  161A               	andwf	??_ECANSendMessage,f,c
 13450  0031DC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13451  0031E0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13452  0031E4  501A               	movf	??_ECANSendMessage,w,c
 13453  0031E6  12DF               	iorwf	indf2,f,c
 13454                           
 13455                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13456  0031E8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13457  0031EA  D004               	goto	l848
 13458                           
 13459                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13460  0031EC  5018               	movf	ECANSendMessage@dataLen,w,c
 13461  0031EE  0940               	iorlw	64
 13462  0031F0  6E33               	movwf	ECANSendMessage@temp,c
 13463  0031F2  D002               	goto	l8845
 13464  0031F4                     l848:
 13465                           
 13466                           ;ECAN.c: 729: else
 13467                           ;ECAN.c: 730: temp = dataLen;
 13468  0031F4  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13469  0031F8                     l8845:
 13470                           
 13471                           ;ECAN.c: 732: *(ptr+5) = temp;
 13472  0031F8  EE20 F005          	lfsr	2,5
 13473  0031FC  5035               	movf	ECANSendMessage@ptr,w,c
 13474  0031FE  26D9               	addwf	fsr2l,f,c
 13475  003200  5036               	movf	ECANSendMessage@ptr+1,w,c
 13476  003202  22DA               	addwfc	fsr2h,f,c
 13477  003204  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13478                           
 13479                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13480  003208  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13481  00320A  D003               	goto	l850
 13482                           
 13483                           ;ECAN.c: 736: temp = 1;
 13484  00320C  0E01               	movlw	1
 13485  00320E  6E33               	movwf	ECANSendMessage@temp,c
 13486  003210  D001               	goto	l8851
 13487  003212                     l850:
 13488                           
 13489                           ;ECAN.c: 738: else
 13490                           ;ECAN.c: 739: temp = 0;
 13491  003212  6A33               	clrf	ECANSendMessage@temp,c
 13492  003214                     l8851:
 13493                           
 13494                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13495  003214  2835               	incf	ECANSendMessage@ptr,w,c
 13496  003216  6E08               	movwf	?__CANIDToRegs,c
 13497  003218  0E00               	movlw	0
 13498  00321A  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13499  00321C  6E09               	movwf	?__CANIDToRegs+1,c
 13500  00321E  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13501  003222  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13502  003226  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13503  00322A  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13504  00322E  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13505  003232  EC66  F01A         	call	__CANIDToRegs	;wreg free
 13506                           
 13507                           ;ECAN.c: 745: ptr += 6;
 13508  003236  0E06               	movlw	6
 13509  003238  2635               	addwf	ECANSendMessage@ptr,f,c
 13510  00323A  0E00               	movlw	0
 13511  00323C  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13512                           
 13513                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13514  00323E  6A2F               	clrf	ECANSendMessage@j,c
 13515  003240  D00F               	goto	l8865
 13516  003242                     l8857:
 13517                           
 13518                           ;ECAN.c: 748: *ptr++ = *data++;
 13519  003242  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13520  003246  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13521  00324A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13522  00324E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13523  003252  CFDF FFE7          	movff	indf2,indf1
 13524  003256  4A16               	infsnz	ECANSendMessage@data,f,c
 13525  003258  2A17               	incf	ECANSendMessage@data+1,f,c
 13526  00325A  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13527  00325C  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13528  00325E  2A2F               	incf	ECANSendMessage@j,f,c
 13529  003260                     l8865:
 13530  003260  5018               	movf	ECANSendMessage@dataLen,w,c
 13531  003262  5C2F               	subwf	ECANSendMessage@j,w,c
 13532  003264  E3EE               	bnc	l8857
 13533                           
 13534                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13535  003266  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13536  00326A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13537  00326E  50DF               	movf	indf2,w,c
 13538  003270  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13539  003272  B41A               	btfsc	??_ECANSendMessage,2,c
 13540  003274  0C01               	retlw	1
 13541                           
 13542                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13543  003276  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13544  00327A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13545  00327E  0E00               	movlw	0
 13546  003280  86DB               	bsf	plusw2,3,c
 13547                           
 13548                           ;ECAN.c: 755: return TRUE;
 13549  003282  0C01               	retlw	1
 13550  003284                     l8875:
 13551  003284  2A34               	incf	ECANSendMessage@i,f,c
 13552  003286                     l8877:
 13553  003286  502E               	movf	ECANSendMessage@buffers,w,c
 13554  003288  5C34               	subwf	ECANSendMessage@i,w,c
 13555  00328A  E381               	bnc	l8823
 13556                           
 13557                           ;ECAN.c: 756: }
 13558                           ;ECAN.c: 757: }
 13559                           ;ECAN.c: 760: return FALSE;
 13560  00328C  0C00               	retlw	0
 13561  00328E                     __end_of_ECANSendMessage:
 13562                           	opt stack 0
 13563                           tblptru	equ	0xFF8
 13564                           tblptrh	equ	0xFF7
 13565                           tblptrl	equ	0xFF6
 13566                           tablat	equ	0xFF5
 13567                           prodh	equ	0xFF4
 13568                           prodl	equ	0xFF3
 13569                           intcon	equ	0xFF2
 13570                           postinc0	equ	0xFEE
 13571                           wreg	equ	0xFE8
 13572                           indf1	equ	0xFE7
 13573                           fsr1h	equ	0xFE2
 13574                           fsr1l	equ	0xFE1
 13575                           indf2	equ	0xFDF
 13576                           postinc2	equ	0xFDE
 13577                           postdec2	equ	0xFDD
 13578                           plusw2	equ	0xFDB
 13579                           fsr2h	equ	0xFDA
 13580                           fsr2l	equ	0xFD9
 13581                           status	equ	0xFD8
 13582                           
 13583 ;; *************** function __CANIDToRegs *****************
 13584 ;; Defined at:
 13585 ;;		line 1099 in file "../ECAN.c"
 13586 ;; Parameters:    Size  Location     Type
 13587 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13588 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13589 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13590 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13591 ;;  val             4    9[COMRAM] unsigned long 
 13592 ;;  type            1   13[COMRAM] unsigned char 
 13593 ;; Auto vars:     Size  Location     Type
 13594 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13595 ;;		 -> _CANIDToRegs@val(4), 
 13596 ;; Return value:  Size  Location     Type
 13597 ;;		None               void
 13598 ;; Registers used:
 13599 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13600 ;; Tracked objects:
 13601 ;;		On entry : 0/E
 13602 ;;		On exit  : 0/0
 13603 ;;		Unchanged: 0/0
 13604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13605 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13607 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13608 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13609 ;;Total ram usage:       10 bytes
 13610 ;; Hardware stack levels used:    1
 13611 ;; Hardware stack levels required when called:    2
 13612 ;; This function calls:
 13613 ;;		Nothing
 13614 ;; This function is called by:
 13615 ;;		_calculateSetFilterMask
 13616 ;;		_ECANSendMessage
 13617 ;; This function uses a non-reentrant model
 13618 ;;
 13619                           
 13620                           	psect	text55
 13621  0034CC                     __ptext55:
 13622                           	opt stack 0
 13623  0034CC                     __CANIDToRegs:
 13624                           	opt stack 23
 13625                           
 13626                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13627                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13628                           
 13629                           ;incstack = 0
 13630                           ;incstack = 0
 13631  0034CC  0E0A               	movlw	low __CANIDToRegs@val
 13632  0034CE  6E11               	movwf	__CANIDToRegs@Value,c
 13633                           
 13634                           ;ECAN.c: 1104: if ( type == 0 )
 13635  0034D0  660E               	tstfsz	__CANIDToRegs@type,c
 13636  0034D2  D022               	goto	l8893
 13637                           
 13638                           ;ECAN.c: 1105: {
 13639                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13640  0034D4  5011               	movf	__CANIDToRegs@Value,w,c
 13641  0034D6  6ED9               	movwf	fsr2l,c
 13642  0034D8  6ADA               	clrf	fsr2h,c
 13643  0034DA  50DF               	movf	indf2,w,c
 13644  0034DC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13645  0034DE  90D8               	bcf	status,0,c
 13646  0034E0  320F               	rrcf	??__CANIDToRegs,f,c
 13647  0034E2  90D8               	bcf	status,0,c
 13648  0034E4  320F               	rrcf	??__CANIDToRegs,f,c
 13649  0034E6  90D8               	bcf	status,0,c
 13650  0034E8  300F               	rrcf	??__CANIDToRegs,w,c
 13651                           
 13652                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13653  0034EA  D862               	call	PL30	;call to abstracted procedure
 13654  0034EC  2AD9               	incf	fsr2l,f,c
 13655  0034EE  6ADA               	clrf	fsr2h,c
 13656  0034F0  D872               	call	PL74	;call to abstracted procedure
 13657  0034F2                     u10735:
 13658  0034F2  90D8               	bcf	status,0,c
 13659  0034F4  360F               	rlcf	??__CANIDToRegs,f,c
 13660  0034F6  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13661  0034F8  D7FC               	goto	u10735
 13662  0034FA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13663                           
 13664                           ;ECAN.c: 1109: ptr++;
 13665                           
 13666                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13667  0034FE  D846               	call	PL18	;call to abstracted procedure
 13668  003500  D86A               	call	PL74	;call to abstracted procedure
 13669  003502                     u10745:
 13670  003502  90D8               	bcf	status,0,c
 13671  003504  360F               	rlcf	??__CANIDToRegs,f,c
 13672  003506  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13673  003508  D7FC               	goto	u10745
 13674  00350A  500F               	movf	??__CANIDToRegs,w,c
 13675  00350C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13676  003510  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13677  003514  6EDF               	movwf	indf2,c
 13678                           
 13679                           ;ECAN.c: 1111: }
 13680  003516  0012               	return	
 13681  003518                     l8893:
 13682                           
 13683                           ;ECAN.c: 1112: else
 13684                           ;ECAN.c: 1113: {
 13685                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13686  003518  5011               	movf	__CANIDToRegs@Value,w,c
 13687  00351A  D842               	call	PL26	;call to abstracted procedure
 13688  00351C  0E05               	movlw	5
 13689  00351E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13690  003520                     u10755:
 13691  003520  90D8               	bcf	status,0,c
 13692  003522  320F               	rrcf	??__CANIDToRegs,f,c
 13693  003524  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13694  003526  D7FC               	goto	u10755
 13695  003528  500F               	movf	??__CANIDToRegs,w,c
 13696                           
 13697                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13698  00352A  D842               	call	PL30	;call to abstracted procedure
 13699  00352C  0E03               	movlw	3
 13700  00352E  D849               	call	PL48	;call to abstracted procedure
 13701  003530  360F               	rlcf	??__CANIDToRegs,f,c
 13702  003532  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13703                           
 13704                           ;ECAN.c: 1117: ptr++;
 13705                           
 13706                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13707  003536  D82A               	call	PL18	;call to abstracted procedure
 13708  003538  0E02               	movlw	2
 13709  00353A  D843               	call	PL48	;call to abstracted procedure
 13710  00353C  340F               	rlcf	??__CANIDToRegs,w,c
 13711  00353E  0BE0               	andlw	224
 13712  003540  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13713  003544  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13714  003548  6EDF               	movwf	indf2,c
 13715                           
 13716                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13717  00354A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13718  00354E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13719  003552  0E00               	movlw	0
 13720  003554  86DB               	bsf	plusw2,3,c
 13721                           
 13722                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13723  003556  5011               	movf	__CANIDToRegs@Value,w,c
 13724  003558  D823               	call	PL26	;call to abstracted procedure
 13725  00355A  0E03               	movlw	3
 13726  00355C  160F               	andwf	??__CANIDToRegs,f,c
 13727  00355E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13728                           
 13729                           ;ECAN.c: 1122: ptr++;
 13730                           
 13731                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13732  003562  D814               	call	PL18	;call to abstracted procedure
 13733  003564  2AD9               	incf	fsr2l,f,c
 13734  003566  6ADA               	clrf	fsr2h,c
 13735  003568  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13736  00356C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13737  003570  CFDF FFE7          	movff	indf2,indf1
 13738                           
 13739                           ;ECAN.c: 1124: ptr++;
 13740  003574  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13741  003576  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13742                           
 13743                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13744  003578  5011               	movf	__CANIDToRegs@Value,w,c
 13745  00357A  6ED9               	movwf	fsr2l,c
 13746  00357C  6ADA               	clrf	fsr2h,c
 13747  00357E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13748  003582  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13749  003586  CFDF FFE7          	movff	indf2,indf1
 13750  00358A  0012               	return	
 13751  00358C                     __end_of__CANIDToRegs:
 13752                           	opt stack 0
 13753  00358C                     PL18:
 13754                           	opt stack 23
 13755  00358C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13756  003590  500F               	movf	??__CANIDToRegs,w,c
 13757  003592  12DF               	iorwf	indf2,f,c
 13758  003594  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13759  003596  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13760  003598  5011               	movf	__CANIDToRegs@Value,w,c
 13761  00359A  6ED9               	movwf	fsr2l,c
 13762  00359C  6ADA               	clrf	fsr2h,c
 13763  00359E  0012               	return	
 13764  0035A0                     __end_ofPL18:
 13765                           	opt stack 0
 13766  0035A0                     PL26:
 13767                           	opt stack 23
 13768  0035A0  6ED9               	movwf	fsr2l,c
 13769  0035A2  6ADA               	clrf	fsr2h,c
 13770  0035A4  0E02               	movlw	2
 13771  0035A6  26D9               	addwf	fsr2l,f,c
 13772  0035A8  6ADA               	clrf	fsr2h,c
 13773  0035AA  50DF               	movf	indf2,w,c
 13774  0035AC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13775  0035AE  0012               	return	
 13776  0035B0                     __end_ofPL26:
 13777                           	opt stack 0
 13778  0035B0                     PL30:
 13779                           	opt stack 23
 13780  0035B0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13781  0035B4  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13782  0035B8  6EDF               	movwf	indf2,c
 13783  0035BA  5011               	movf	__CANIDToRegs@Value,w,c
 13784  0035BC  6ED9               	movwf	fsr2l,c
 13785  0035BE  6ADA               	clrf	fsr2h,c
 13786  0035C0  0012               	return	
 13787  0035C2                     __end_ofPL30:
 13788                           	opt stack 0
 13789  0035C2                     PL48:
 13790                           	opt stack 23
 13791  0035C2  26D9               	addwf	fsr2l,f,c
 13792  0035C4  6ADA               	clrf	fsr2h,c
 13793  0035C6  50DF               	movf	indf2,w,c
 13794  0035C8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13795  0035CA  90D8               	bcf	status,0,c
 13796  0035CC  360F               	rlcf	??__CANIDToRegs,f,c
 13797  0035CE  90D8               	bcf	status,0,c
 13798  0035D0  360F               	rlcf	??__CANIDToRegs,f,c
 13799  0035D2  90D8               	bcf	status,0,c
 13800  0035D4  0012               	return	
 13801  0035D6                     __end_ofPL48:
 13802                           	opt stack 0
 13803  0035D6                     PL74:
 13804                           	opt stack 23
 13805  0035D6  50DF               	movf	indf2,w,c
 13806  0035D8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13807  0035DA  0E05               	movlw	5
 13808  0035DC  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13809  0035DE  0C05               	retlw	5
 13810  0035E0                     __end_ofPL74:
 13811                           	opt stack 0
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon	equ	0xFF2
 13819                           postinc0	equ	0xFEE
 13820                           wreg	equ	0xFE8
 13821                           indf1	equ	0xFE7
 13822                           fsr1h	equ	0xFE2
 13823                           fsr1l	equ	0xFE1
 13824                           indf2	equ	0xFDF
 13825                           postinc2	equ	0xFDE
 13826                           postdec2	equ	0xFDD
 13827                           plusw2	equ	0xFDB
 13828                           fsr2h	equ	0xFDA
 13829                           fsr2l	equ	0xFD9
 13830                           status	equ	0xFD8
 13831                           
 13832 ;; *************** function _vscp_getEvent *****************
 13833 ;; Defined at:
 13834 ;;		line 1295 in file "../../vscp_firmware/common/vscp_firmware.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;		None
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;  rv              1   43[COMRAM] unsigned char 
 13839 ;; Return value:  Size  Location     Type
 13840 ;;                  1    wreg      unsigned char 
 13841 ;; Registers used:
 13842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13843 ;; Tracked objects:
 13844 ;;		On entry : F/0
 13845 ;;		On exit  : 0/0
 13846 ;;		Unchanged: 0/0
 13847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13851 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13852 ;;Total ram usage:        1 bytes
 13853 ;; Hardware stack levels used:    1
 13854 ;; Hardware stack levels required when called:    6
 13855 ;; This function calls:
 13856 ;;		_getVSCPFrame
 13857 ;; This function is called by:
 13858 ;;		_main
 13859 ;; This function uses a non-reentrant model
 13860 ;;
 13861                           
 13862                           	psect	text56
 13863  004082                     __ptext56:
 13864                           	opt stack 0
 13865  004082                     _vscp_getEvent:
 13866                           	opt stack 24
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;vscp_firmware.c: 1296: int8_t rv;
 13870                           ;vscp_firmware.c: 1302: if (vscp_imsg.flags & 0x80) return !0;
 13871                           
 13872                           ;incstack = 0
 13873                           ;incstack = 0
 13874  004082  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 13875  004084  0012               	return	
 13876                           
 13877                           ; BSR set to: 0
 13878                           ;vscp_firmware.c: 1305: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13879                           ;vscp_firmware.c: 1306: &vscp_imsg.vscp_type,
 13880                           ;vscp_firmware.c: 1307: &vscp_imsg.oaddr,
 13881                           ;vscp_firmware.c: 1308: &vscp_imsg.priority,
 13882                           ;vscp_firmware.c: 1309: &vscp_imsg.flags,
 13883                           ;vscp_firmware.c: 1310: vscp_imsg.data))) {
 13884  004086  0E9A               	movlw	low (_vscp_imsg+4)
 13885  004088  6E1E               	movwf	?_getVSCPFrame,c
 13886  00408A  0E9B               	movlw	low (_vscp_imsg+5)
 13887  00408C  6E1F               	movwf	?_getVSCPFrame+1,c
 13888  00408E  0E97               	movlw	low (_vscp_imsg+1)
 13889  004090  6E20               	movwf	?_getVSCPFrame+2,c
 13890  004092  0E96               	movlw	low _vscp_imsg
 13891  004094  6E21               	movwf	?_getVSCPFrame+3,c
 13892  004096  0E9C               	movlw	low (_vscp_imsg+6)
 13893  004098  6E22               	movwf	?_getVSCPFrame+4,c
 13894  00409A  0E98               	movlw	(_vscp_imsg+2)& (0+255)
 13895  00409C  ECE2  F01E         	call	_getVSCPFrame
 13896  0040A0  6E2C               	movwf	vscp_getEvent@rv,c
 13897  0040A2  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13898  0040A4  B4D8               	btfsc	status,2,c
 13899  0040A6  0012               	return	
 13900                           
 13901                           ;vscp_firmware.c: 1312: vscp_imsg.flags |= 0x80;
 13902  0040A8  0100               	movlb	0	; () banked
 13903  0040AA  8F96               	bsf	_vscp_imsg& (0+255),7,b
 13904  0040AC  0012               	return	
 13905  0040AE                     __end_of_vscp_getEvent:
 13906                           	opt stack 0
 13907                           tblptru	equ	0xFF8
 13908                           tblptrh	equ	0xFF7
 13909                           tblptrl	equ	0xFF6
 13910                           tablat	equ	0xFF5
 13911                           prodh	equ	0xFF4
 13912                           prodl	equ	0xFF3
 13913                           intcon	equ	0xFF2
 13914                           postinc0	equ	0xFEE
 13915                           wreg	equ	0xFE8
 13916                           indf1	equ	0xFE7
 13917                           fsr1h	equ	0xFE2
 13918                           fsr1l	equ	0xFE1
 13919                           indf2	equ	0xFDF
 13920                           postinc2	equ	0xFDE
 13921                           postdec2	equ	0xFDD
 13922                           plusw2	equ	0xFDB
 13923                           fsr2h	equ	0xFDA
 13924                           fsr2l	equ	0xFD9
 13925                           status	equ	0xFD8
 13926                           
 13927 ;; *************** function _getVSCPFrame *****************
 13928 ;; Defined at:
 13929 ;;		line 2541 in file "../main.c"
 13930 ;; Parameters:    Size  Location     Type
 13931 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13932 ;;		 -> vscp_imsg(14), 
 13933 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13934 ;;		 -> vscp_imsg(14), 
 13935 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13936 ;;		 -> vscp_imsg(14), 
 13937 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13938 ;;		 -> vscp_imsg(14), 
 13939 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13940 ;;		 -> vscp_imsg(14), 
 13941 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13942 ;;		 -> vscp_imsg(14), 
 13943 ;; Auto vars:     Size  Location     Type
 13944 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13945 ;;		 -> vscp_imsg(14), 
 13946 ;;  id              4   39[COMRAM] unsigned long 
 13947 ;; Return value:  Size  Location     Type
 13948 ;;                  1    wreg      unsigned char 
 13949 ;; Registers used:
 13950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13951 ;; Tracked objects:
 13952 ;;		On entry : F/0
 13953 ;;		On exit  : 0/0
 13954 ;;		Unchanged: 0/0
 13955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13956 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13957 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13958 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13959 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13960 ;;Total ram usage:       14 bytes
 13961 ;; Hardware stack levels used:    1
 13962 ;; Hardware stack levels required when called:    5
 13963 ;; This function calls:
 13964 ;;		_getCANFrame
 13965 ;; This function is called by:
 13966 ;;		_vscp_getEvent
 13967 ;; This function uses a non-reentrant model
 13968 ;;
 13969                           
 13970                           	psect	text57
 13971  003DC4                     __ptext57:
 13972                           	opt stack 0
 13973  003DC4                     _getVSCPFrame:
 13974                           	opt stack 24
 13975                           
 13976                           ;incstack = 0
 13977                           ;incstack = 0
 13978                           ;getVSCPFrame@pvscpclass stored from wreg
 13979  003DC4  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;main.c: 2542: uint32_t id;
 13983                           ;main.c: 2544: if ( !getCANFrame(&id, pSize, pData) ) {
 13984  003DC8  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 13985  003DCC  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 13986  003DD0  0E28               	movlw	getVSCPFrame@id& (0+255)
 13987  003DD2  ECA6  F020         	call	_getCANFrame
 13988  003DD6  0900               	iorlw	0
 13989  003DD8  E101               	bnz	l6465
 13990                           
 13991                           ;main.c: 2545: return 0;
 13992  003DDA  0C00               	retlw	0
 13993  003DDC                     l6465:
 13994                           
 13995                           ;main.c: 2546: }
 13996                           ;main.c: 2548: *pNodeId = id & 0x0ff;
 13997  003DDC  501F               	movf	getVSCPFrame@pNodeId,w,c
 13998  003DDE  6ED9               	movwf	fsr2l,c
 13999  003DE0  6ADA               	clrf	fsr2h,c
 14000  003DE2  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14001                           
 14002                           ;main.c: 2549: *pvscptype = (id >> 8) & 0xff;
 14003  003DE6  501E               	movf	getVSCPFrame@pvscptype,w,c
 14004  003DE8  6ED9               	movwf	fsr2l,c
 14005  003DEA  6ADA               	clrf	fsr2h,c
 14006  003DEC  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14007                           
 14008                           ;main.c: 2550: *pvscpclass = (id >> 16) & 0x1ff;
 14009  003DF0  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14010  003DF2  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14011  003DF4  0E01               	movlw	1
 14012  003DF6  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14013  003DF8  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14014  003DFA  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14015  003DFC  6ED9               	movwf	fsr2l,c
 14016  003DFE  6ADA               	clrf	fsr2h,c
 14017  003E00  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14018  003E04  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14019                           
 14020                           ;main.c: 2551: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14021  003E08  5020               	movf	getVSCPFrame@pPriority,w,c
 14022  003E0A  6ED9               	movwf	fsr2l,c
 14023  003E0C  6ADA               	clrf	fsr2h,c
 14024  003E0E  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14025  003E12  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14026  003E16  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14027  003E1A  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14028  003E1E  0E1B               	movlw	27
 14029  003E20  D005               	goto	u6780
 14030  003E22                     u6785:
 14031  003E22  90D8               	bcf	status,0,c
 14032  003E24  3226               	rrcf	??_getVSCPFrame+3,f,c
 14033  003E26  3225               	rrcf	??_getVSCPFrame+2,f,c
 14034  003E28  3224               	rrcf	??_getVSCPFrame+1,f,c
 14035  003E2A  3223               	rrcf	??_getVSCPFrame,f,c
 14036  003E2C                     u6780:
 14037  003E2C  2EE8               	decfsz	wreg,f,c
 14038  003E2E  D7F9               	goto	u6785
 14039  003E30  5023               	movf	??_getVSCPFrame,w,c
 14040  003E32  0B07               	andlw	7
 14041  003E34  6EDF               	movwf	indf2,c
 14042                           
 14043                           ;main.c: 2553: return 1;
 14044  003E36  0C01               	retlw	1
 14045  003E38                     __end_of_getVSCPFrame:
 14046                           	opt stack 0
 14047                           tblptru	equ	0xFF8
 14048                           tblptrh	equ	0xFF7
 14049                           tblptrl	equ	0xFF6
 14050                           tablat	equ	0xFF5
 14051                           prodh	equ	0xFF4
 14052                           prodl	equ	0xFF3
 14053                           intcon	equ	0xFF2
 14054                           postinc0	equ	0xFEE
 14055                           wreg	equ	0xFE8
 14056                           indf1	equ	0xFE7
 14057                           fsr1h	equ	0xFE2
 14058                           fsr1l	equ	0xFE1
 14059                           indf2	equ	0xFDF
 14060                           postinc2	equ	0xFDE
 14061                           postdec2	equ	0xFDD
 14062                           plusw2	equ	0xFDB
 14063                           fsr2h	equ	0xFDA
 14064                           fsr2l	equ	0xFD9
 14065                           status	equ	0xFD8
 14066                           
 14067 ;; *************** function _getCANFrame *****************
 14068 ;; Defined at:
 14069 ;;		line 2583 in file "../main.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  pid             1    wreg     PTR unsigned long 
 14072 ;;		 -> getVSCPFrame@id(4), 
 14073 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14074 ;;		 -> vscp_imsg(14), 
 14075 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14076 ;;		 -> vscp_imsg(14), 
 14077 ;; Auto vars:     Size  Location     Type
 14078 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14079 ;;		 -> getVSCPFrame@id(4), 
 14080 ;;  flags           1   28[COMRAM] enum E19001
 14081 ;; Return value:  Size  Location     Type
 14082 ;;                  1    wreg      unsigned char 
 14083 ;; Registers used:
 14084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14085 ;; Tracked objects:
 14086 ;;		On entry : F/0
 14087 ;;		On exit  : 0/0
 14088 ;;		Unchanged: 0/0
 14089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14090 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14093 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14094 ;;Total ram usage:        4 bytes
 14095 ;; Hardware stack levels used:    1
 14096 ;; Hardware stack levels required when called:    4
 14097 ;; This function calls:
 14098 ;;		_ECANReceiveMessage
 14099 ;; This function is called by:
 14100 ;;		_getVSCPFrame
 14101 ;; This function uses a non-reentrant model
 14102 ;;
 14103                           
 14104                           	psect	text58
 14105  00414C                     __ptext58:
 14106                           	opt stack 0
 14107  00414C                     _getCANFrame:
 14108                           	opt stack 24
 14109                           
 14110                           ;incstack = 0
 14111                           ;incstack = 0
 14112                           ;getCANFrame@pid stored from wreg
 14113  00414C  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;main.c: 2584: ECAN_RX_MSG_FLAGS flags;
 14117                           ;main.c: 2588: if (vscp_imsg.flags & 0x80) return 0;
 14118  004150  BF96               	btfsc	_vscp_imsg& (0+255),7,b
 14119  004152                     l6477:
 14120  004152  0C00               	retlw	0
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;main.c: 2590: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14124  004154  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14125  004158  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14126  00415C  0E1D               	movlw	low getCANFrame@flags
 14127  00415E  6E11               	movwf	?_ECANReceiveMessage+2,c
 14128  004160  501C               	movf	getCANFrame@pid,w,c
 14129  004162  ECE5  F015         	call	_ECANReceiveMessage
 14130  004166  0900               	iorlw	0
 14131  004168  E0F4               	bz	l6477
 14132                           
 14133                           ;main.c: 2593: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14134  00416A  AC1D               	btfss	getCANFrame@flags,6,c
 14135                           
 14136                           ;main.c: 2596: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14137  00416C  AA1D               	btfss	getCANFrame@flags,5,c
 14138  00416E  0C00               	retlw	0
 14139                           
 14140                           ;main.c: 2598: return 1;
 14141  004170  0C01               	retlw	1
 14142  004172                     __end_of_getCANFrame:
 14143                           	opt stack 0
 14144                           tblptru	equ	0xFF8
 14145                           tblptrh	equ	0xFF7
 14146                           tblptrl	equ	0xFF6
 14147                           tablat	equ	0xFF5
 14148                           prodh	equ	0xFF4
 14149                           prodl	equ	0xFF3
 14150                           intcon	equ	0xFF2
 14151                           postinc0	equ	0xFEE
 14152                           wreg	equ	0xFE8
 14153                           indf1	equ	0xFE7
 14154                           fsr1h	equ	0xFE2
 14155                           fsr1l	equ	0xFE1
 14156                           indf2	equ	0xFDF
 14157                           postinc2	equ	0xFDE
 14158                           postdec2	equ	0xFDD
 14159                           plusw2	equ	0xFDB
 14160                           fsr2h	equ	0xFDA
 14161                           fsr2l	equ	0xFD9
 14162                           status	equ	0xFD8
 14163                           
 14164 ;; *************** function _ECANReceiveMessage *****************
 14165 ;; Defined at:
 14166 ;;		line 803 in file "../ECAN.c"
 14167 ;; Parameters:    Size  Location     Type
 14168 ;;  id              1    wreg     PTR unsigned long 
 14169 ;;		 -> getVSCPFrame@id(4), 
 14170 ;;  data            1   14[COMRAM] PTR unsigned char 
 14171 ;;		 -> vscp_imsg(14), 
 14172 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14173 ;;		 -> vscp_imsg(14), 
 14174 ;;  msgFlags        1   16[COMRAM] PTR enum E18976
 14175 ;;		 -> getCANFrame@flags(1), 
 14176 ;; Auto vars:     Size  Location     Type
 14177 ;;  id              1   19[COMRAM] PTR unsigned long 
 14178 ;;		 -> getVSCPFrame@id(4), 
 14179 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14180 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14181 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14182 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14183 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14184 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14185 ;;  temp            1   22[COMRAM] struct .
 14186 ;;  mode            1   21[COMRAM] unsigned char 
 14187 ;;  i               1   20[COMRAM] unsigned char 
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  1    wreg      enum E18242
 14190 ;; Registers used:
 14191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14192 ;; Tracked objects:
 14193 ;;		On entry : F/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14197 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14198 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14200 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14201 ;;Total ram usage:       11 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    3
 14204 ;; This function calls:
 14205 ;;		__ECANPointBuffer
 14206 ;;		__RegsToCANID
 14207 ;; This function is called by:
 14208 ;;		_getCANFrame
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           	psect	text59
 14213  002BCA                     __ptext59:
 14214                           	opt stack 0
 14215  002BCA                     _ECANReceiveMessage:
 14216                           	opt stack 24
 14217                           
 14218                           ;incstack = 0
 14219                           ;incstack = 0
 14220                           ;ECANReceiveMessage@id stored from wreg
 14221  002BCA  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;ECAN.c: 805: BYTE mode;
 14225                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14226                           ;ECAN.c: 809: char i;
 14227                           ;ECAN.c: 810: BYTE_VAL temp;
 14228                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14229  002BCE  6A54               	clrf	__ECANRxFilterHitInfo,c
 14230                           
 14231                           ; BSR set to: 0
 14232                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14233  002BD0  5072               	movf	3954,w,c	;volatile
 14234  002BD2  0BC0               	andlw	192
 14235  002BD4  6E16               	movwf	ECANReceiveMessage@mode,c
 14236                           
 14237                           ; BSR set to: 0
 14238                           ;ECAN.c: 816: if ( mode == 0x00 )
 14239  002BD6  6616               	tstfsz	ECANReceiveMessage@mode,c
 14240  002BD8  D030               	goto	l6613
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;ECAN.c: 822: {
 14244                           ;ECAN.c: 824: if ( RXB0FUL )
 14245  002BDA  AE60               	btfss	3936,7,c	;volatile
 14246  002BDC  D012               	goto	l861
 14247                           
 14248                           ; BSR set to: 0
 14249                           ;ECAN.c: 825: {
 14250                           ;ECAN.c: 827: RXB0IF = 0;
 14251  002BDE  9077               	bcf	3959,0,c	;volatile
 14252                           
 14253                           ;ECAN.c: 830: if ( RXB0OVFL )
 14254  002BE0  AE71               	btfss	3953,7,c	;volatile
 14255  002BE2  D006               	goto	l6589
 14256                           
 14257                           ; BSR set to: 0
 14258                           ;ECAN.c: 831: {
 14259                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14260  002BE4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14261  002BE6  6ED9               	movwf	fsr2l,c
 14262  002BE8  6ADA               	clrf	fsr2h,c
 14263  002BEA  0E00               	movlw	0
 14264  002BEC  86DB               	bsf	plusw2,3,c
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;ECAN.c: 833: RXB0OVFL = 0;
 14268  002BEE  9E71               	bcf	3953,7,c	;volatile
 14269  002BF0                     l6589:
 14270                           
 14271                           ; BSR set to: 0
 14272                           ;ECAN.c: 834: }
 14273                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14274  002BF0  A060               	btfss	3936,0,c	;volatile
 14275  002BF2  D002               	bra	u6955
 14276  002BF4  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14277  002BF6  D001               	bra	u6957
 14278  002BF8                     u6955:
 14279  002BF8  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14280  002BFA                     u6957:
 14281                           
 14282                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14283  002BFA  0E0F               	movlw	15	;volatile
 14284  002BFC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14285  002BFE  0E60               	movlw	96	;volatile
 14286  002C00  D01A               	goto	L39
 14287  002C02                     l861:
 14288                           
 14289                           ; BSR set to: 0
 14290                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14291  002C02  010F               	movlb	15	; () banked
 14292  002C04  AF30               	btfss	48,7,b	;volatile
 14293  002C06  0C00               	retlw	0
 14294                           
 14295                           ; BSR set to: 15
 14296                           ;ECAN.c: 842: {
 14297                           ;ECAN.c: 844: RXB1IF = 0;
 14298  002C08  9277               	bcf	3959,1,c	;volatile
 14299                           
 14300                           ;ECAN.c: 847: if ( RXB1OVFL )
 14301  002C0A  AC71               	btfss	3953,6,c	;volatile
 14302  002C0C  D006               	goto	l6599
 14303                           
 14304                           ; BSR set to: 15
 14305                           ;ECAN.c: 848: {
 14306                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14307  002C0E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14308  002C10  6ED9               	movwf	fsr2l,c
 14309  002C12  6ADA               	clrf	fsr2h,c
 14310  002C14  0E00               	movlw	0
 14311  002C16  86DB               	bsf	plusw2,3,c
 14312                           
 14313                           ; BSR set to: 15
 14314                           ;ECAN.c: 850: RXB1OVFL = 0;
 14315  002C18  9C71               	bcf	3953,6,c	;volatile
 14316  002C1A                     l6599:
 14317                           
 14318                           ; BSR set to: 15
 14319                           ;ECAN.c: 851: }
 14320                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14321  002C1A  5130               	movf	48,w,b	;volatile
 14322  002C1C  0B07               	andlw	7
 14323  002C1E  6E54               	movwf	__ECANRxFilterHitInfo,c
 14324                           
 14325                           ; BSR set to: 15
 14326                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14327  002C20  0E02               	movlw	2
 14328  002C22  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14329  002C24  D005               	goto	l6605
 14330                           
 14331                           ; BSR set to: 15
 14332                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14333  002C26  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14334  002C28  6ED9               	movwf	fsr2l,c
 14335  002C2A  6ADA               	clrf	fsr2h,c
 14336  002C2C  0E00               	movlw	0
 14337  002C2E  8EDB               	bsf	plusw2,7,c
 14338  002C30                     l6605:
 14339                           
 14340                           ; BSR set to: 15
 14341                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14342  002C30  0E0F               	movlw	15	;volatile
 14343  002C32  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14344  002C34  0E30               	movlw	48	;volatile
 14345  002C36                     L39:
 14346  002C36  6E18               	movwf	ECANReceiveMessage@ptr,c
 14347                           
 14348                           ;ECAN.c: 860: }
 14349  002C38  D05B               	goto	l6667
 14350  002C3A                     l6613:
 14351                           
 14352                           ; BSR set to: 0
 14353                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14354  002C3A  5016               	movf	ECANReceiveMessage@mode,w,c
 14355  002C3C  0A40               	xorlw	64
 14356  002C3E  E13E               	bnz	l871
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;ECAN.c: 875: {
 14360                           ;ECAN.c: 876: if ( RXB0FUL )
 14361  002C40  AE60               	btfss	3936,7,c	;volatile
 14362  002C42  D004               	goto	l872
 14363                           
 14364                           ; BSR set to: 0
 14365                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14366  002C44  0E0F               	movlw	15	;volatile
 14367  002C46  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14368  002C48  0E60               	movlw	96	;volatile
 14369  002C4A  D036               	goto	L46
 14370  002C4C                     l872:
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14374  002C4C  010F               	movlb	15	; () banked
 14375  002C4E  AF30               	btfss	48,7,b	;volatile
 14376  002C50  D004               	goto	l874
 14377                           
 14378                           ; BSR set to: 15
 14379                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14380  002C52  0E0F               	movlw	15	;volatile
 14381  002C54  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14382  002C56  0E30               	movlw	48	;volatile
 14383  002C58  D02F               	goto	L46
 14384  002C5A                     l874:
 14385                           
 14386                           ; BSR set to: 15
 14387                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14388  002C5A  010E               	movlb	14
 14389  002C5C  A57D               	btfss	125,2,b	;volatile
 14390  002C5E  AF80               	btfss	128,7,b	;volatile
 14391  002C60  D004               	goto	l876
 14392                           
 14393                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14394  002C62  0E0E               	movlw	14	;volatile
 14395  002C64  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14396  002C66  0E80               	movlw	128	;volatile
 14397  002C68  D027               	goto	L46
 14398  002C6A                     l876:
 14399                           
 14400                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14401  002C6A  010E               	movlb	14
 14402  002C6C  A77D               	btfss	125,3,b	;volatile
 14403  002C6E  AF90               	btfss	144,7,b	;volatile
 14404  002C70  D004               	goto	l878
 14405                           
 14406                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14407  002C72  0E0E               	movlw	14	;volatile
 14408  002C74  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14409  002C76  0E90               	movlw	144	;volatile
 14410  002C78  D01F               	goto	L46
 14411  002C7A                     l878:
 14412                           
 14413                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14414  002C7A  010E               	movlb	14
 14415  002C7C  A97D               	btfss	125,4,b	;volatile
 14416  002C7E  AFA0               	btfss	160,7,b	;volatile
 14417  002C80  D004               	goto	l880
 14418                           
 14419                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14420  002C82  0E0E               	movlw	14	;volatile
 14421  002C84  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14422  002C86  0EA0               	movlw	160	;volatile
 14423  002C88  D017               	goto	L46
 14424  002C8A                     l880:
 14425                           
 14426                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14427  002C8A  010E               	movlb	14
 14428  002C8C  AB7D               	btfss	125,5,b	;volatile
 14429  002C8E  AFB0               	btfss	176,7,b	;volatile
 14430  002C90  D004               	goto	l882
 14431                           
 14432                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14433  002C92  0E0E               	movlw	14	;volatile
 14434  002C94  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14435  002C96  0EB0               	movlw	176	;volatile
 14436  002C98  D00F               	goto	L46
 14437  002C9A                     l882:
 14438                           
 14439                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14440  002C9A  010E               	movlb	14
 14441  002C9C  AD7D               	btfss	125,6,b	;volatile
 14442  002C9E  AFC0               	btfss	192,7,b	;volatile
 14443  002CA0  D004               	goto	l884
 14444                           
 14445                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14446  002CA2  0E0E               	movlw	14	;volatile
 14447  002CA4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14448  002CA6  0EC0               	movlw	192	;volatile
 14449  002CA8  D007               	goto	L46
 14450  002CAA                     l884:
 14451                           
 14452                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14453  002CAA  010E               	movlb	14
 14454  002CAC  AF7D               	btfss	125,7,b	;volatile
 14455  002CAE  AFD0               	btfss	208,7,b	;volatile
 14456  002CB0  0C00               	retlw	0
 14457                           
 14458                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14459  002CB2  0E0E               	movlw	14	;volatile
 14460  002CB4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14461  002CB6  0ED0               	movlw	208	;volatile
 14462  002CB8                     L46:
 14463  002CB8  6E18               	movwf	ECANReceiveMessage@ptr,c
 14464  002CBA  D00A               	goto	l6657
 14465  002CBC                     l871:
 14466                           
 14467                           ; BSR set to: 0
 14468                           ;ECAN.c: 910: else
 14469                           ;ECAN.c: 915: {
 14470                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14471  002CBC  AE71               	btfss	3953,7,c	;volatile
 14472  002CBE  0C00               	retlw	0
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;ECAN.c: 917: {
 14476                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14477  002CC0  506F               	movf	3951,w,c	;volatile
 14478  002CC2  0B07               	andlw	7
 14479  002CC4  ECA3  F01E         	call	__ECANPointBuffer
 14480  002CC8  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14481  002CCC  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14482  002CD0                     l6657:
 14483                           
 14484                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14485  002CD0  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14486  002CD4  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14487  002CD8  50DF               	movf	indf2,w,c
 14488  002CDA  0B1F               	andlw	31
 14489  002CDC  6E54               	movwf	__ECANRxFilterHitInfo,c
 14490                           
 14491                           ;ECAN.c: 932: RXB1IF = 0;
 14492  002CDE  9277               	bcf	3959,1,c	;volatile
 14493                           
 14494                           ;ECAN.c: 934: if ( RXB1OVFL )
 14495  002CE0  AC71               	btfss	3953,6,c	;volatile
 14496  002CE2  D006               	goto	l6667
 14497                           
 14498                           ;ECAN.c: 935: {
 14499                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14500  002CE4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14501  002CE6  6ED9               	movwf	fsr2l,c
 14502  002CE8  6ADA               	clrf	fsr2h,c
 14503  002CEA  0E00               	movlw	0
 14504  002CEC  86DB               	bsf	plusw2,3,c
 14505                           
 14506                           ;ECAN.c: 937: RXB1OVFL = 0;
 14507  002CEE  9C71               	bcf	3953,6,c	;volatile
 14508  002CF0                     l6667:
 14509                           
 14510                           ;ECAN.c: 942: savedPtr = ptr;
 14511  002CF0  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14512  002CF4  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14513                           
 14514                           ;ECAN.c: 943: *msgFlags = 0;
 14515  002CF8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14516  002CFA  6ED9               	movwf	fsr2l,c
 14517  002CFC  6ADA               	clrf	fsr2h,c
 14518  002CFE  6ADF               	clrf	indf2,c
 14519                           
 14520                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14521  002D00  EE20 F005          	lfsr	2,5
 14522  002D04  D854               	call	PL70	;call to abstracted procedure
 14523                           
 14524                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14525  002D06  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14526  002D08  6ED9               	movwf	fsr2l,c
 14527  002D0A  6ADA               	clrf	fsr2h,c
 14528  002D0C  5017               	movf	ECANReceiveMessage@temp,w,c
 14529  002D0E  0B0F               	andlw	15
 14530  002D10  6EDF               	movwf	indf2,c
 14531                           
 14532                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14533  002D12  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14534  002D14  D005               	goto	l892
 14535                           
 14536                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14537  002D16  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14538  002D18  6ED9               	movwf	fsr2l,c
 14539  002D1A  6ADA               	clrf	fsr2h,c
 14540  002D1C  0E00               	movlw	0
 14541  002D1E  8CDB               	bsf	plusw2,6,c
 14542  002D20                     l892:
 14543                           
 14544                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14545  002D20  EE20 F002          	lfsr	2,2
 14546  002D24  D844               	call	PL70	;call to abstracted procedure
 14547                           
 14548                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14549  002D26  A617               	btfss	ECANReceiveMessage@temp,3,c
 14550  002D28  D008               	goto	l893
 14551                           
 14552                           ;ECAN.c: 956: {
 14553                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14554  002D2A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14555  002D2C  6ED9               	movwf	fsr2l,c
 14556  002D2E  6ADA               	clrf	fsr2h,c
 14557  002D30  0E00               	movlw	0
 14558  002D32  8ADB               	bsf	plusw2,5,c
 14559                           
 14560                           ;ECAN.c: 958: temp.Val = 1;
 14561  002D34  0E01               	movlw	1
 14562  002D36  6E17               	movwf	ECANReceiveMessage@temp,c
 14563                           
 14564                           ;ECAN.c: 959: }
 14565  002D38  D001               	goto	l6685
 14566  002D3A                     l893:
 14567                           
 14568                           ;ECAN.c: 960: else
 14569                           ;ECAN.c: 961: temp.Val = 0;
 14570  002D3A  6A17               	clrf	ECANReceiveMessage@temp,c
 14571  002D3C                     l6685:
 14572                           
 14573                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14574  002D3C  2818               	incf	ECANReceiveMessage@ptr,w,c
 14575  002D3E  6E08               	movwf	?__RegsToCANID,c
 14576  002D40  0E00               	movlw	0
 14577  002D42  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14578  002D44  6E09               	movwf	?__RegsToCANID+1,c
 14579  002D46  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14580  002D4A  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14581  002D4E  ECD7  F019         	call	__RegsToCANID	;wreg free
 14582                           
 14583                           ;ECAN.c: 966: ptr += 6;
 14584  002D52  0E06               	movlw	6
 14585  002D54  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14586  002D56  0E00               	movlw	0
 14587  002D58  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14588                           
 14589                           ;ECAN.c: 967: temp.Val = *dataLen;
 14590  002D5A  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14591  002D5C  6ED9               	movwf	fsr2l,c
 14592  002D5E  6ADA               	clrf	fsr2h,c
 14593  002D60  50DF               	movf	indf2,w,c
 14594  002D62  6E17               	movwf	ECANReceiveMessage@temp,c
 14595                           
 14596                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14597  002D64  6A15               	clrf	ECANReceiveMessage@i,c
 14598  002D66  D00D               	goto	l6701
 14599  002D68                     l6693:
 14600                           
 14601                           ;ECAN.c: 969: *data++ = *ptr++;
 14602  002D68  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14603  002D6C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14604  002D70  500F               	movf	ECANReceiveMessage@data,w,c
 14605  002D72  6EE1               	movwf	fsr1l,c
 14606  002D74  6AE2               	clrf	fsr1h,c
 14607  002D76  CFDF FFE7          	movff	indf2,indf1
 14608  002D7A  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14609  002D7C  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14610  002D7E  2A0F               	incf	ECANReceiveMessage@data,f,c
 14611  002D80  2A15               	incf	ECANReceiveMessage@i,f,c
 14612  002D82                     l6701:
 14613  002D82  5017               	movf	ECANReceiveMessage@temp,w,c
 14614  002D84  5C15               	subwf	ECANReceiveMessage@i,w,c
 14615  002D86  E3F0               	bnc	l6693
 14616                           
 14617                           ;ECAN.c: 972: if ( IRXIF )
 14618  002D88  AE77               	btfss	3959,7,c	;volatile
 14619  002D8A  D006               	goto	l6707
 14620                           
 14621                           ;ECAN.c: 973: {
 14622                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14623  002D8C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14624  002D8E  6ED9               	movwf	fsr2l,c
 14625  002D90  6ADA               	clrf	fsr2h,c
 14626  002D92  0E00               	movlw	0
 14627  002D94  88DB               	bsf	plusw2,4,c
 14628                           
 14629                           ;ECAN.c: 975: IRXIF = 0;
 14630  002D96  9E77               	bcf	3959,7,c	;volatile
 14631  002D98                     l6707:
 14632                           
 14633                           ;ECAN.c: 976: }
 14634                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14635  002D98  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14636  002D9C  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14637  002DA0  0E7F               	movlw	127
 14638  002DA2  16DF               	andwf	indf2,f,c
 14639                           
 14640                           ;ECAN.c: 983: if ( mode == 0x80 )
 14641  002DA4  5016               	movf	ECANReceiveMessage@mode,w,c
 14642  002DA6  0A80               	xorlw	128
 14643  002DA8  B4D8               	btfsc	status,2,c
 14644                           
 14645                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14646  002DAA  9E71               	bcf	3953,7,c	;volatile
 14647                           
 14648                           ;ECAN.c: 990: return TRUE;
 14649  002DAC  0C01               	retlw	1
 14650  002DAE                     __end_of_ECANReceiveMessage:
 14651                           	opt stack 0
 14652  002DAE                     PL70:
 14653                           	opt stack 24
 14654  002DAE  5018               	movf	ECANReceiveMessage@ptr,w,c
 14655  002DB0  26D9               	addwf	fsr2l,f,c
 14656  002DB2  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14657  002DB4  22DA               	addwfc	fsr2h,f,c
 14658  002DB6  50DF               	movf	indf2,w,c
 14659  002DB8  6E17               	movwf	ECANReceiveMessage@temp,c
 14660  002DBA  0012               	return	
 14661  002DBC                     __end_ofPL70:
 14662                           	opt stack 0
 14663                           tblptru	equ	0xFF8
 14664                           tblptrh	equ	0xFF7
 14665                           tblptrl	equ	0xFF6
 14666                           tablat	equ	0xFF5
 14667                           prodh	equ	0xFF4
 14668                           prodl	equ	0xFF3
 14669                           intcon	equ	0xFF2
 14670                           postinc0	equ	0xFEE
 14671                           wreg	equ	0xFE8
 14672                           indf1	equ	0xFE7
 14673                           fsr1h	equ	0xFE2
 14674                           fsr1l	equ	0xFE1
 14675                           indf2	equ	0xFDF
 14676                           postinc2	equ	0xFDE
 14677                           postdec2	equ	0xFDD
 14678                           plusw2	equ	0xFDB
 14679                           fsr2h	equ	0xFDA
 14680                           fsr2l	equ	0xFD9
 14681                           status	equ	0xFD8
 14682                           
 14683 ;; *************** function __RegsToCANID *****************
 14684 ;; Defined at:
 14685 ;;		line 1156 in file "../ECAN.c"
 14686 ;; Parameters:    Size  Location     Type
 14687 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14688 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14689 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14690 ;;  val             1    9[COMRAM] PTR unsigned long 
 14691 ;;		 -> getVSCPFrame@id(4), 
 14692 ;;  type            1   10[COMRAM] unsigned char 
 14693 ;; Auto vars:     Size  Location     Type
 14694 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14695 ;;		 -> getVSCPFrame@id(4), 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;		None               void
 14698 ;; Registers used:
 14699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14705 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14707 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14708 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14709 ;;Total ram usage:        7 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    2
 14712 ;; This function calls:
 14713 ;;		Nothing
 14714 ;; This function is called by:
 14715 ;;		_ECANReceiveMessage
 14716 ;; This function uses a non-reentrant model
 14717 ;;
 14718                           
 14719                           	psect	text60
 14720  0033AE                     __ptext60:
 14721                           	opt stack 0
 14722  0033AE                     __RegsToCANID:
 14723                           	opt stack 24
 14724                           
 14725                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14726                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14727                           
 14728                           ;incstack = 0
 14729                           ;incstack = 0
 14730  0033AE  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14731                           
 14732                           ;ECAN.c: 1161: if ( type == 0 )
 14733  0033B2  660B               	tstfsz	__RegsToCANID@type,c
 14734  0033B4  D02B               	goto	l6781
 14735                           
 14736                           ;ECAN.c: 1162: {
 14737                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14738  0033B6  500E               	movf	__RegsToCANID@Value,w,c
 14739  0033B8  6ED9               	movwf	fsr2l,c
 14740  0033BA  D86C               	call	PL42	;call to abstracted procedure
 14741  0033BC  360C               	rlcf	??__RegsToCANID,f,c
 14742  0033BE  90D8               	bcf	status,0,c
 14743  0033C0  360C               	rlcf	??__RegsToCANID,f,c
 14744  0033C2  90D8               	bcf	status,0,c
 14745  0033C4  340C               	rlcf	??__RegsToCANID,w,c
 14746  0033C6  6EDF               	movwf	indf2,c
 14747                           
 14748                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14749  0033C8  500E               	movf	__RegsToCANID@Value,w,c
 14750  0033CA  6ED9               	movwf	fsr2l,c
 14751  0033CC  6ADA               	clrf	fsr2h,c
 14752  0033CE  2AD9               	incf	fsr2l,f,c
 14753  0033D0  6ADA               	clrf	fsr2h,c
 14754  0033D2  D873               	call	PL52	;call to abstracted procedure
 14755  0033D4                     u7275:
 14756  0033D4  90D8               	bcf	status,0,c
 14757  0033D6  320C               	rrcf	??__RegsToCANID,f,c
 14758  0033D8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14759  0033DA  D7FC               	goto	u7275
 14760  0033DC  500C               	movf	??__RegsToCANID,w,c
 14761                           
 14762                           ;ECAN.c: 1166: ptr++;
 14763                           
 14764                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14765  0033DE  D863               	call	PL44	;call to abstracted procedure
 14766  0033E0  0E05               	movlw	5
 14767  0033E2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14768  0033E4                     u7285:
 14769  0033E4  90D8               	bcf	status,0,c
 14770  0033E6  320C               	rrcf	??__RegsToCANID,f,c
 14771  0033E8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14772  0033EA  D7FC               	goto	u7285
 14773  0033EC  500E               	movf	__RegsToCANID@Value,w,c
 14774  0033EE  6ED9               	movwf	fsr2l,c
 14775  0033F0  6ADA               	clrf	fsr2h,c
 14776  0033F2  500C               	movf	??__RegsToCANID,w,c
 14777  0033F4  12DF               	iorwf	indf2,f,c
 14778                           
 14779                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14780  0033F6  D83D               	call	PL24	;call to abstracted procedure
 14781  0033F8  6ADF               	clrf	indf2,c
 14782                           
 14783                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14784  0033FA  500E               	movf	__RegsToCANID@Value,w,c
 14785  0033FC  6ED9               	movwf	fsr2l,c
 14786  0033FE  6ADA               	clrf	fsr2h,c
 14787  003400  0E03               	movlw	3
 14788  003402  26D9               	addwf	fsr2l,f,c
 14789  003404  6ADA               	clrf	fsr2h,c
 14790  003406  0E00               	movlw	0
 14791  003408  6EDF               	movwf	indf2,c
 14792                           
 14793                           ;ECAN.c: 1170: }
 14794  00340A  0C00               	retlw	0
 14795  00340C                     l6781:
 14796                           
 14797                           ;ECAN.c: 1171: else
 14798                           ;ECAN.c: 1172: {
 14799                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14800  00340C  D832               	call	PL24	;call to abstracted procedure
 14801  00340E  D855               	call	PL52	;call to abstracted procedure
 14802  003410                     u7295:
 14803  003410  90D8               	bcf	status,0,c
 14804  003412  360C               	rlcf	??__RegsToCANID,f,c
 14805  003414  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14806  003416  D7FC               	goto	u7295
 14807  003418  500C               	movf	??__RegsToCANID,w,c
 14808  00341A  6EDF               	movwf	indf2,c
 14809                           
 14810                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14811  00341C  500E               	movf	__RegsToCANID@Value,w,c
 14812  00341E  6ED9               	movwf	fsr2l,c
 14813  003420  6ADA               	clrf	fsr2h,c
 14814  003422  0E03               	movlw	3
 14815  003424  26D9               	addwf	fsr2l,f,c
 14816  003426  D836               	call	PL42	;call to abstracted procedure
 14817  003428  320C               	rrcf	??__RegsToCANID,f,c
 14818  00342A  90D8               	bcf	status,0,c
 14819  00342C  320C               	rrcf	??__RegsToCANID,f,c
 14820  00342E  90D8               	bcf	status,0,c
 14821  003430  300C               	rrcf	??__RegsToCANID,w,c
 14822                           
 14823                           ;ECAN.c: 1176: ptr++;
 14824                           
 14825                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14826  003432  D839               	call	PL44	;call to abstracted procedure
 14827  003434  0E03               	movlw	3
 14828  003436  160C               	andwf	??__RegsToCANID,f,c
 14829  003438  D81C               	call	PL24	;call to abstracted procedure
 14830  00343A  500C               	movf	??__RegsToCANID,w,c
 14831  00343C  12DF               	iorwf	indf2,f,c
 14832                           
 14833                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14834  00343E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14835  003442  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14836  003446  50DF               	movf	indf2,w,c
 14837  003448  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14838  00344A  90D8               	bcf	status,0,c
 14839  00344C  320C               	rrcf	??__RegsToCANID,f,c
 14840  00344E  90D8               	bcf	status,0,c
 14841  003450  320C               	rrcf	??__RegsToCANID,f,c
 14842  003452  90D8               	bcf	status,0,c
 14843  003454  320C               	rrcf	??__RegsToCANID,f,c
 14844  003456  0E1C               	movlw	28
 14845  003458  160C               	andwf	??__RegsToCANID,f,c
 14846  00345A  D80B               	call	PL24	;call to abstracted procedure
 14847  00345C  500C               	movf	??__RegsToCANID,w,c
 14848  00345E  12DF               	iorwf	indf2,f,c
 14849                           
 14850                           ;ECAN.c: 1180: ptr++;
 14851                           
 14852                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14853  003460  D80F               	call	PL36	;call to abstracted procedure
 14854  003462  2AE1               	incf	fsr1l,f,c
 14855  003464  6AE2               	clrf	fsr1h,c
 14856  003466  CFDF FFE7          	movff	indf2,indf1
 14857                           
 14858                           ;ECAN.c: 1182: ptr++;
 14859                           
 14860                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14861  00346A  D80A               	call	PL36	;call to abstracted procedure
 14862  00346C  CFDF FFE7          	movff	indf2,indf1
 14863  003470  0012               	return	
 14864  003472                     __end_of__RegsToCANID:
 14865                           	opt stack 0
 14866  003472                     PL24:
 14867                           	opt stack 24
 14868  003472  500E               	movf	__RegsToCANID@Value,w,c
 14869  003474  6ED9               	movwf	fsr2l,c
 14870  003476  6ADA               	clrf	fsr2h,c
 14871  003478  0E02               	movlw	2
 14872  00347A  26D9               	addwf	fsr2l,f,c
 14873  00347C  6ADA               	clrf	fsr2h,c
 14874  00347E  0012               	return	
 14875  003480                     __end_ofPL24:
 14876                           	opt stack 0
 14877  003480                     PL36:
 14878                           	opt stack 24
 14879  003480  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14880  003482  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14881  003484  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14882  003488  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14883  00348C  500E               	movf	__RegsToCANID@Value,w,c
 14884  00348E  6EE1               	movwf	fsr1l,c
 14885  003490  6AE2               	clrf	fsr1h,c
 14886  003492  0012               	return	
 14887  003494                     __end_ofPL36:
 14888                           	opt stack 0
 14889  003494                     PL42:
 14890                           	opt stack 24
 14891  003494  6ADA               	clrf	fsr2h,c
 14892  003496  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14893  00349A  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14894  00349E  50E7               	movf	indf1,w,c
 14895  0034A0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14896  0034A2  90D8               	bcf	status,0,c
 14897  0034A4  0012               	return	
 14898  0034A6                     __end_ofPL42:
 14899                           	opt stack 0
 14900  0034A6                     PL44:
 14901                           	opt stack 24
 14902  0034A6  6EDF               	movwf	indf2,c
 14903  0034A8  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14904  0034AA  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14905  0034AC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14906  0034B0  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14907  0034B4  50DF               	movf	indf2,w,c
 14908  0034B6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14909  0034B8  0012               	return	
 14910  0034BA                     __end_ofPL44:
 14911                           	opt stack 0
 14912  0034BA                     PL52:
 14913                           	opt stack 24
 14914  0034BA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14915  0034BE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14916  0034C2  50E7               	movf	indf1,w,c
 14917  0034C4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14918  0034C6  0E05               	movlw	5
 14919  0034C8  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14920  0034CA  0C05               	retlw	5
 14921  0034CC                     __end_ofPL52:
 14922                           	opt stack 0
 14923                           tblptru	equ	0xFF8
 14924                           tblptrh	equ	0xFF7
 14925                           tblptrl	equ	0xFF6
 14926                           tablat	equ	0xFF5
 14927                           prodh	equ	0xFF4
 14928                           prodl	equ	0xFF3
 14929                           intcon	equ	0xFF2
 14930                           postinc0	equ	0xFEE
 14931                           wreg	equ	0xFE8
 14932                           indf1	equ	0xFE7
 14933                           fsr1h	equ	0xFE2
 14934                           fsr1l	equ	0xFE1
 14935                           indf2	equ	0xFDF
 14936                           postinc2	equ	0xFDE
 14937                           postdec2	equ	0xFDD
 14938                           plusw2	equ	0xFDB
 14939                           fsr2h	equ	0xFDA
 14940                           fsr2l	equ	0xFD9
 14941                           status	equ	0xFD8
 14942                           
 14943 ;; *************** function __ECANPointBuffer *****************
 14944 ;; Defined at:
 14945 ;;		line 1207 in file "../ECAN.c"
 14946 ;; Parameters:    Size  Location     Type
 14947 ;;  b               1    wreg     unsigned char 
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;  b               1   10[COMRAM] unsigned char 
 14950 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14951 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14952 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14953 ;; Return value:  Size  Location     Type
 14954 ;;                  2    7[COMRAM] PTR unsigned char 
 14955 ;; Registers used:
 14956 ;;		wreg, status,2, status,0
 14957 ;; Tracked objects:
 14958 ;;		On entry : F/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14962 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14963 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14965 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14966 ;;Total ram usage:        6 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:    2
 14969 ;; This function calls:
 14970 ;;		Nothing
 14971 ;; This function is called by:
 14972 ;;		_ECANReceiveMessage
 14973 ;; This function uses a non-reentrant model
 14974 ;;
 14975                           
 14976                           	psect	text61
 14977  003D46                     __ptext61:
 14978                           	opt stack 0
 14979  003D46                     __ECANPointBuffer:
 14980                           	opt stack 24
 14981                           
 14982                           ;incstack = 0
 14983                           ;incstack = 0
 14984                           ;__ECANPointBuffer@b stored from wreg
 14985  003D46  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;ECAN.c: 1208: BYTE* pt;
 14989                           ;ECAN.c: 1210: switch(b)
 14990  003D4A  D028               	goto	l6767
 14991  003D4C                     l6749:
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 14995  003D4C  0E0F               	movlw	15	;volatile
 14996  003D4E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 14997  003D50  0E60               	movlw	96	;volatile
 14998  003D52  D022               	goto	L53
 14999  003D54                     l6751:
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15003  003D54  010F               	movlb	15	; () banked
 15004  003D56  0E0F               	movlw	15	;volatile
 15005  003D58  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15006  003D5A  0E30               	movlw	48	;volatile
 15007  003D5C  D01D               	goto	L53
 15008  003D5E                     l6753:
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15012  003D5E  010E               	movlb	14	; () banked
 15013  003D60  0E0E               	movlw	14	;volatile
 15014  003D62  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15015  003D64  0E80               	movlw	128	;volatile
 15016  003D66  D018               	goto	L53
 15017  003D68                     l6755:
 15018                           
 15019                           ; BSR set to: 0
 15020                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15021  003D68  010E               	movlb	14	; () banked
 15022  003D6A  0E0E               	movlw	14	;volatile
 15023  003D6C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15024  003D6E  0E90               	movlw	144	;volatile
 15025  003D70  D013               	goto	L53
 15026  003D72                     l6757:
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15030  003D72  010E               	movlb	14	; () banked
 15031  003D74  0E0E               	movlw	14	;volatile
 15032  003D76  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15033  003D78  0EA0               	movlw	160	;volatile
 15034  003D7A  D00E               	goto	L53
 15035  003D7C                     l6759:
 15036                           
 15037                           ; BSR set to: 0
 15038                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15039  003D7C  010E               	movlb	14	; () banked
 15040  003D7E  0E0E               	movlw	14	;volatile
 15041  003D80  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15042  003D82  0EB0               	movlw	176	;volatile
 15043  003D84  D009               	goto	L53
 15044  003D86                     l6761:
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15048  003D86  010E               	movlb	14	; () banked
 15049  003D88  0E0E               	movlw	14	;volatile
 15050  003D8A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15051  003D8C  0EC0               	movlw	192	;volatile
 15052  003D8E  D004               	goto	L53
 15053  003D90                     l6763:
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15057  003D90  010E               	movlb	14	; () banked
 15058  003D92  0E0E               	movlw	14	;volatile
 15059  003D94  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15060  003D96  0ED0               	movlw	208	;volatile
 15061  003D98                     L53:
 15062  003D98  6E0C               	movwf	__ECANPointBuffer@pt,c
 15063                           
 15064                           ;ECAN.c: 1235: break;
 15065  003D9A  D00F               	goto	l920
 15066  003D9C                     l6767:
 15067                           
 15068                           ; BSR set to: 0
 15069  003D9C  500B               	movf	__ECANPointBuffer@b,w,c
 15070                           
 15071                           ; Switch size 1, requested type "space"
 15072                           ; Number of cases is 7, Range of values is 0 to 6
 15073                           ; switch strategies available:
 15074                           ; Name         Instructions Cycles
 15075                           ; simple_byte           22    12 (average)
 15076                           ;	Chosen strategy is simple_byte
 15077  003D9E  E0D6               	bz	l6749
 15078  003DA0  0A01               	xorlw	1	; case 1
 15079  003DA2  E0D8               	bz	l6751
 15080  003DA4  0A03               	xorlw	3	; case 2
 15081  003DA6  E0DB               	bz	l6753
 15082  003DA8  0A01               	xorlw	1	; case 3
 15083  003DAA  E0DE               	bz	l6755
 15084  003DAC  0A07               	xorlw	7	; case 4
 15085  003DAE  E0E1               	bz	l6757
 15086  003DB0  0A01               	xorlw	1	; case 5
 15087  003DB2  E0E4               	bz	l6759
 15088  003DB4  0A03               	xorlw	3	; case 6
 15089  003DB6  E0E7               	bz	l6761
 15090  003DB8  D7EB               	goto	l6763
 15091  003DBA                     l920:
 15092                           
 15093                           ;ECAN.c: 1237: return (pt);
 15094  003DBA  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15095  003DBE  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15096  003DC2  0012               	return	
 15097  003DC4                     __end_of__ECANPointBuffer:
 15098                           	opt stack 0
 15099                           tblptru	equ	0xFF8
 15100                           tblptrh	equ	0xFF7
 15101                           tblptrl	equ	0xFF6
 15102                           tablat	equ	0xFF5
 15103                           prodh	equ	0xFF4
 15104                           prodl	equ	0xFF3
 15105                           intcon	equ	0xFF2
 15106                           postinc0	equ	0xFEE
 15107                           wreg	equ	0xFE8
 15108                           indf1	equ	0xFE7
 15109                           fsr1h	equ	0xFE2
 15110                           fsr1l	equ	0xFE1
 15111                           indf2	equ	0xFDF
 15112                           postinc2	equ	0xFDE
 15113                           postdec2	equ	0xFDD
 15114                           plusw2	equ	0xFDB
 15115                           fsr2h	equ	0xFDA
 15116                           fsr2l	equ	0xFD9
 15117                           status	equ	0xFD8
 15118                           
 15119 ;; *************** function _vscp_check_pstorage *****************
 15120 ;; Defined at:
 15121 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 15122 ;; Parameters:    Size  Location     Type
 15123 ;;		None
 15124 ;; Auto vars:     Size  Location     Type
 15125 ;;		None
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  1    wreg      unsigned char 
 15128 ;; Registers used:
 15129 ;;		wreg, status,2, status,0, cstack
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15139 ;;Total ram usage:        0 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; Hardware stack levels required when called:    4
 15142 ;; This function calls:
 15143 ;;		_vscp_writeNicknamePermanent
 15144 ;;		_vscp_getSegmentCRC
 15145 ;;		_vscp_setSegmentCRC
 15146 ;;		_vscp_setControlByte
 15147 ;; This function is called by:
 15148 ;;		_main
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           	psect	text62
 15153  00421C                     __ptext62:
 15154                           	opt stack 0
 15155  00421C                     _vscp_check_pstorage:
 15156                           	opt stack 26
 15157                           
 15158                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15159                           
 15160                           ;incstack = 0
 15161                           ;incstack = 0
 15162  00421C  EC05  F022         	call	_vscp_getSegmentCRC	;wreg free
 15163  004220  0BC0               	andlw	192
 15164  004222  0A40               	xorlw	64
 15165  004224  E101               	bnz	l7225
 15166                           
 15167                           ;vscp_firmware.c: 170: return !0;
 15168  004226  0C01               	retlw	1
 15169  004228                     l7225:
 15170                           
 15171                           ;vscp_firmware.c: 171: }
 15172                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 15173  004228  0EFF               	movlw	255
 15174  00422A  ECC8  F021         	call	_vscp_writeNicknamePermanent
 15175                           
 15176                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 15177  00422E  0E00               	movlw	0
 15178  004230  ECBF  F021         	call	_vscp_setSegmentCRC
 15179                           
 15180                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 15181  004234  0EA0               	movlw	160
 15182  004236  ECB6  F021         	call	_vscp_setControlByte
 15183                           
 15184                           ;vscp_firmware.c: 183: return 0;
 15185  00423A  0C00               	retlw	0
 15186  00423C                     __end_of_vscp_check_pstorage:
 15187                           	opt stack 0
 15188                           tblptru	equ	0xFF8
 15189                           tblptrh	equ	0xFF7
 15190                           tblptrl	equ	0xFF6
 15191                           tablat	equ	0xFF5
 15192                           prodh	equ	0xFF4
 15193                           prodl	equ	0xFF3
 15194                           intcon	equ	0xFF2
 15195                           postinc0	equ	0xFEE
 15196                           wreg	equ	0xFE8
 15197                           indf1	equ	0xFE7
 15198                           fsr1h	equ	0xFE2
 15199                           fsr1l	equ	0xFE1
 15200                           indf2	equ	0xFDF
 15201                           postinc2	equ	0xFDE
 15202                           postdec2	equ	0xFDD
 15203                           plusw2	equ	0xFDB
 15204                           fsr2h	equ	0xFDA
 15205                           fsr2l	equ	0xFD9
 15206                           status	equ	0xFD8
 15207                           
 15208 ;; *************** function _vscp_setControlByte *****************
 15209 ;; Defined at:
 15210 ;;		line 2382 in file "../main.c"
 15211 ;; Parameters:    Size  Location     Type
 15212 ;;  ctrl            1    wreg     unsigned char 
 15213 ;; Auto vars:     Size  Location     Type
 15214 ;;  ctrl            1   10[COMRAM] unsigned char 
 15215 ;; Return value:  Size  Location     Type
 15216 ;;		None               void
 15217 ;; Registers used:
 15218 ;;		wreg, status,2, cstack
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15225 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15227 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15228 ;;Total ram usage:        1 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; Hardware stack levels required when called:    3
 15231 ;; This function calls:
 15232 ;;		_writeEEPROM
 15233 ;; This function is called by:
 15234 ;;		_vscp_check_pstorage
 15235 ;; This function uses a non-reentrant model
 15236 ;;
 15237                           
 15238                           	psect	text63
 15239  00436C                     __ptext63:
 15240                           	opt stack 0
 15241  00436C                     _vscp_setControlByte:
 15242                           	opt stack 26
 15243                           
 15244                           ;incstack = 0
 15245                           ;incstack = 0
 15246                           ;vscp_setControlByte@ctrl stored from wreg
 15247  00436C  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15248                           
 15249                           ;main.c: 2383: writeEEPROM(0x03, ctrl);
 15250  004370  6A09               	clrf	?_writeEEPROM+1,c
 15251  004372  0E03               	movlw	3
 15252  004374  6E08               	movwf	?_writeEEPROM,c
 15253  004376  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15254  00437A  EFB9  F020         	goto	_writeEEPROM	;wreg free
 15255  00437E                     __end_of_vscp_setControlByte:
 15256                           	opt stack 0
 15257                           tblptru	equ	0xFF8
 15258                           tblptrh	equ	0xFF7
 15259                           tblptrl	equ	0xFF6
 15260                           tablat	equ	0xFF5
 15261                           prodh	equ	0xFF4
 15262                           prodl	equ	0xFF3
 15263                           intcon	equ	0xFF2
 15264                           postinc0	equ	0xFEE
 15265                           wreg	equ	0xFE8
 15266                           indf1	equ	0xFE7
 15267                           fsr1h	equ	0xFE2
 15268                           fsr1l	equ	0xFE1
 15269                           indf2	equ	0xFDF
 15270                           postinc2	equ	0xFDE
 15271                           postdec2	equ	0xFDD
 15272                           plusw2	equ	0xFDB
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function _vscp_setSegmentCRC *****************
 15278 ;; Defined at:
 15279 ;;		line 2373 in file "../main.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  crc             1    wreg     unsigned char 
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;  crc             1   10[COMRAM] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;		None               void
 15286 ;; Registers used:
 15287 ;;		wreg, status,2, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15294 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15297 ;;Total ram usage:        1 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    3
 15300 ;; This function calls:
 15301 ;;		_writeEEPROM
 15302 ;; This function is called by:
 15303 ;;		_vscp_check_pstorage
 15304 ;;		_vscp_handleProbeState
 15305 ;;		_vscp_handleHeartbeat
 15306 ;;		_vscp_handleSetNickname
 15307 ;; This function uses a non-reentrant model
 15308 ;;
 15309                           
 15310                           	psect	text64
 15311  00437E                     __ptext64:
 15312                           	opt stack 0
 15313  00437E                     _vscp_setSegmentCRC:
 15314                           	opt stack 25
 15315                           
 15316                           ;incstack = 0
 15317                           ;incstack = 0
 15318                           ;vscp_setSegmentCRC@crc stored from wreg
 15319  00437E  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15320                           
 15321                           ;main.c: 2374: writeEEPROM( 0x02, crc );
 15322  004382  6A09               	clrf	?_writeEEPROM+1,c
 15323  004384  0E02               	movlw	2
 15324  004386  6E08               	movwf	?_writeEEPROM,c
 15325  004388  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15326  00438C  EFB9  F020         	goto	_writeEEPROM	;wreg free
 15327  004390                     __end_of_vscp_setSegmentCRC:
 15328                           	opt stack 0
 15329                           tblptru	equ	0xFF8
 15330                           tblptrh	equ	0xFF7
 15331                           tblptrl	equ	0xFF6
 15332                           tablat	equ	0xFF5
 15333                           prodh	equ	0xFF4
 15334                           prodl	equ	0xFF3
 15335                           intcon	equ	0xFF2
 15336                           postinc0	equ	0xFEE
 15337                           wreg	equ	0xFE8
 15338                           indf1	equ	0xFE7
 15339                           fsr1h	equ	0xFE2
 15340                           fsr1l	equ	0xFE1
 15341                           indf2	equ	0xFDF
 15342                           postinc2	equ	0xFDE
 15343                           postdec2	equ	0xFDD
 15344                           plusw2	equ	0xFDB
 15345                           fsr2h	equ	0xFDA
 15346                           fsr2l	equ	0xFD9
 15347                           status	equ	0xFD8
 15348                           
 15349 ;; *************** function _vscp_getSegmentCRC *****************
 15350 ;; Defined at:
 15351 ;;		line 2364 in file "../main.c"
 15352 ;; Parameters:    Size  Location     Type
 15353 ;;		None
 15354 ;; Auto vars:     Size  Location     Type
 15355 ;;		None
 15356 ;; Return value:  Size  Location     Type
 15357 ;;                  1    wreg      unsigned char 
 15358 ;; Registers used:
 15359 ;;		wreg, status,2, cstack
 15360 ;; Tracked objects:
 15361 ;;		On entry : 0/0
 15362 ;;		On exit  : 0/0
 15363 ;;		Unchanged: 0/0
 15364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15369 ;;Total ram usage:        0 bytes
 15370 ;; Hardware stack levels used:    1
 15371 ;; Hardware stack levels required when called:    3
 15372 ;; This function calls:
 15373 ;;		_readEEPROM
 15374 ;; This function is called by:
 15375 ;;		_vscp_check_pstorage
 15376 ;;		_vscp_handleHeartbeat
 15377 ;; This function uses a non-reentrant model
 15378 ;;
 15379                           
 15380                           	psect	text65
 15381  00440A                     __ptext65:
 15382                           	opt stack 0
 15383  00440A                     _vscp_getSegmentCRC:
 15384                           	opt stack 25
 15385                           
 15386                           ;main.c: 2365: return readEEPROM( 0x02 );
 15387                           
 15388                           ;incstack = 0
 15389                           ;incstack = 0
 15390  00440A  6A09               	clrf	?_readEEPROM+1,c
 15391  00440C  0E02               	movlw	2
 15392  00440E  6E08               	movwf	?_readEEPROM,c
 15393  004410  EFDA  F021         	goto	_readEEPROM	;wreg free
 15394  004414                     __end_of_vscp_getSegmentCRC:
 15395                           	opt stack 0
 15396                           tblptru	equ	0xFF8
 15397                           tblptrh	equ	0xFF7
 15398                           tblptrl	equ	0xFF6
 15399                           tablat	equ	0xFF5
 15400                           prodh	equ	0xFF4
 15401                           prodl	equ	0xFF3
 15402                           intcon	equ	0xFF2
 15403                           postinc0	equ	0xFEE
 15404                           wreg	equ	0xFE8
 15405                           indf1	equ	0xFE7
 15406                           fsr1h	equ	0xFE2
 15407                           fsr1l	equ	0xFE1
 15408                           indf2	equ	0xFDF
 15409                           postinc2	equ	0xFDE
 15410                           postdec2	equ	0xFDD
 15411                           plusw2	equ	0xFDB
 15412                           fsr2h	equ	0xFDA
 15413                           fsr2l	equ	0xFD9
 15414                           status	equ	0xFD8
 15415                           
 15416 ;; *************** function _vscp_writeNicknamePermanent *****************
 15417 ;; Defined at:
 15418 ;;		line 870 in file "../main.c"
 15419 ;; Parameters:    Size  Location     Type
 15420 ;;  nickname        1    wreg     unsigned char 
 15421 ;; Auto vars:     Size  Location     Type
 15422 ;;  nickname        1   10[COMRAM] unsigned char 
 15423 ;; Return value:  Size  Location     Type
 15424 ;;		None               void
 15425 ;; Registers used:
 15426 ;;		wreg, status,2, cstack
 15427 ;; Tracked objects:
 15428 ;;		On entry : 0/0
 15429 ;;		On exit  : 0/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15433 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15435 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15436 ;;Total ram usage:        1 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; Hardware stack levels required when called:    3
 15439 ;; This function calls:
 15440 ;;		_writeEEPROM
 15441 ;; This function is called by:
 15442 ;;		_vscp_check_pstorage
 15443 ;;		_vscp_handleProbeState
 15444 ;;		_vscp_handleHeartbeat
 15445 ;;		_vscp_handleSetNickname
 15446 ;;		_vscp_handleDropNickname
 15447 ;; This function uses a non-reentrant model
 15448 ;;
 15449                           
 15450                           	psect	text66
 15451  004390                     __ptext66:
 15452                           	opt stack 0
 15453  004390                     _vscp_writeNicknamePermanent:
 15454                           	opt stack 25
 15455                           
 15456                           ;incstack = 0
 15457                           ;incstack = 0
 15458                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15459  004390  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15460                           
 15461                           ;main.c: 871: writeEEPROM( 0x01, nickname );
 15462  004394  6A09               	clrf	?_writeEEPROM+1,c
 15463  004396  0E01               	movlw	1
 15464  004398  6E08               	movwf	?_writeEEPROM,c
 15465  00439A  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15466  00439E  EFB9  F020         	goto	_writeEEPROM	;wreg free
 15467  0043A2                     __end_of_vscp_writeNicknamePermanent:
 15468                           	opt stack 0
 15469                           tblptru	equ	0xFF8
 15470                           tblptrh	equ	0xFF7
 15471                           tblptrl	equ	0xFF6
 15472                           tablat	equ	0xFF5
 15473                           prodh	equ	0xFF4
 15474                           prodl	equ	0xFF3
 15475                           intcon	equ	0xFF2
 15476                           postinc0	equ	0xFEE
 15477                           wreg	equ	0xFE8
 15478                           indf1	equ	0xFE7
 15479                           fsr1h	equ	0xFE2
 15480                           fsr1l	equ	0xFE1
 15481                           indf2	equ	0xFDF
 15482                           postinc2	equ	0xFDE
 15483                           postdec2	equ	0xFDD
 15484                           plusw2	equ	0xFDB
 15485                           fsr2h	equ	0xFDA
 15486                           fsr2l	equ	0xFD9
 15487                           status	equ	0xFD8
 15488                           
 15489 ;; *************** function _writeEEPROM *****************
 15490 ;; Defined at:
 15491 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15492 ;; Parameters:    Size  Location     Type
 15493 ;;  address         2    7[COMRAM] unsigned short 
 15494 ;;  data            1    9[COMRAM] unsigned char 
 15495 ;; Auto vars:     Size  Location     Type
 15496 ;;		None
 15497 ;; Return value:  Size  Location     Type
 15498 ;;		None               void
 15499 ;; Registers used:
 15500 ;;		wreg, status,2
 15501 ;; Tracked objects:
 15502 ;;		On entry : 0/0
 15503 ;;		On exit  : 0/0
 15504 ;;		Unchanged: 0/0
 15505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15506 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15509 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15510 ;;Total ram usage:        3 bytes
 15511 ;; Hardware stack levels used:    1
 15512 ;; Hardware stack levels required when called:    2
 15513 ;; This function calls:
 15514 ;;		Nothing
 15515 ;; This function is called by:
 15516 ;;		_main
 15517 ;;		_init_app_eeprom
 15518 ;;		_vscp_setGUID
 15519 ;;		_vscp_setManufacturerId
 15520 ;;		_vscp_writeNicknamePermanent
 15521 ;;		_vscp_writeAppReg
 15522 ;;		_doActionDisable
 15523 ;;		_vscp_setUserID
 15524 ;;		_vscp_setSegmentCRC
 15525 ;;		_vscp_setControlByte
 15526 ;;		_vscp_goBootloaderMode
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           	psect	text67
 15531  004172                     __ptext67:
 15532                           	opt stack 0
 15533  004172                     _writeEEPROM:
 15534                           	opt stack 26
 15535                           
 15536                           ;eeprom.c: 29: EEADR = address & 0xff;
 15537                           
 15538                           ;incstack = 0
 15539                           ;incstack = 0
 15540  004172  C008  FF74         	movff	writeEEPROM@address,3956	;volatile
 15541                           
 15542                           ;eeprom.c: 30: EEDATA = data;
 15543  004176  C00A  FF73         	movff	writeEEPROM@data,3955	;volatile
 15544                           
 15545                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15546  00417A  9E7F               	bcf	3967,7,c	;volatile
 15547                           
 15548                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15549  00417C  9C7F               	bcf	3967,6,c	;volatile
 15550                           
 15551                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15552  00417E  847F               	bsf	3967,2,c	;volatile
 15553                           
 15554                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15555  004180  9EF2               	bcf	intcon,7,c	;volatile
 15556                           
 15557                           ;eeprom.c: 37: EECON2 = 0x55;
 15558  004182  0E55               	movlw	85
 15559  004184  6E7E               	movwf	3966,c	;volatile
 15560                           
 15561                           ;eeprom.c: 38: EECON2 = 0xaa;
 15562  004186  0EAA               	movlw	170
 15563  004188  6E7E               	movwf	3966,c	;volatile
 15564                           
 15565                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15566  00418A  827F               	bsf	3967,1,c	;volatile
 15567                           
 15568                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15569  00418C  8EF2               	bsf	intcon,7,c	;volatile
 15570  00418E                     l1299:
 15571  00418E  ACB7               	btfss	4023,6,c	;volatile
 15572  004190  D7FE               	goto	l1299
 15573                           
 15574                           ;eeprom.c: 44: PIR4bits.EEIF = 0;
 15575  004192  9CB7               	bcf	4023,6,c	;volatile
 15576                           
 15577                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15578  004194  947F               	bcf	3967,2,c	;volatile
 15579  004196  0012               	return	
 15580  004198                     __end_of_writeEEPROM:
 15581                           	opt stack 0
 15582                           tblptru	equ	0xFF8
 15583                           tblptrh	equ	0xFF7
 15584                           tblptrl	equ	0xFF6
 15585                           tablat	equ	0xFF5
 15586                           prodh	equ	0xFF4
 15587                           prodl	equ	0xFF3
 15588                           intcon	equ	0xFF2
 15589                           postinc0	equ	0xFEE
 15590                           wreg	equ	0xFE8
 15591                           indf1	equ	0xFE7
 15592                           fsr1h	equ	0xFE2
 15593                           fsr1l	equ	0xFE1
 15594                           indf2	equ	0xFDF
 15595                           postinc2	equ	0xFDE
 15596                           postdec2	equ	0xFDD
 15597                           plusw2	equ	0xFDB
 15598                           fsr2h	equ	0xFDA
 15599                           fsr2l	equ	0xFD9
 15600                           status	equ	0xFD8
 15601                           
 15602 ;; *************** function _init *****************
 15603 ;; Defined at:
 15604 ;;		line 341 in file "../main.c"
 15605 ;; Parameters:    Size  Location     Type
 15606 ;;		None
 15607 ;; Auto vars:     Size  Location     Type
 15608 ;;		None
 15609 ;; Return value:  Size  Location     Type
 15610 ;;		None               void
 15611 ;; Registers used:
 15612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15613 ;; Tracked objects:
 15614 ;;		On entry : 0/0
 15615 ;;		On exit  : 0/0
 15616 ;;		Unchanged: 0/0
 15617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15622 ;;Total ram usage:        0 bytes
 15623 ;; Hardware stack levels used:    1
 15624 ;; Hardware stack levels required when called:    4
 15625 ;; This function calls:
 15626 ;;		_WriteTimer0
 15627 ;;		_init_app_ram
 15628 ;;		_OpenTimer0
 15629 ;;		_ECANInitialize
 15630 ;; This function is called by:
 15631 ;;		_main
 15632 ;; This function uses a non-reentrant model
 15633 ;;
 15634                           
 15635                           	psect	text68
 15636  004054                     __ptext68:
 15637                           	opt stack 0
 15638  004054                     _init:
 15639                           	opt stack 26
 15640                           
 15641                           ;main.c: 346: init_app_ram();
 15642                           
 15643                           ;incstack = 0
 15644                           ;incstack = 0
 15645  004054  ECF9  F01B         	call	_init_app_ram	;wreg free
 15646                           
 15647                           ;main.c: 357: TRISA = 0x00;
 15648  004058  6A92               	clrf	3986,c	;volatile
 15649                           
 15650                           ;main.c: 358: PORTA = 0x00;
 15651  00405A  6A80               	clrf	3968,c	;volatile
 15652                           
 15653                           ;main.c: 370: TRISB = 0b00000000;
 15654  00405C  6A93               	clrf	3987,c	;volatile
 15655                           
 15656                           ;main.c: 371: PORTB = 0x00;
 15657  00405E  6A81               	clrf	3969,c	;volatile
 15658                           
 15659                           ;main.c: 381: TRISC = 0b00000001;
 15660  004060  0E01               	movlw	1
 15661  004062  6E94               	movwf	3988,c	;volatile
 15662                           
 15663                           ;main.c: 382: PORTC = 0x00;
 15664  004064  6A82               	clrf	3970,c	;volatile
 15665                           
 15666                           ;main.c: 408: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15667  004066  0E92               	movlw	146
 15668  004068  EC4B  F021         	call	_OpenTimer0
 15669                           
 15670                           ;main.c: 409: WriteTimer0( 0xfb1d );
 15671  00406C  0EFB               	movlw	251
 15672  00406E  6E09               	movwf	?_WriteTimer0+1,c
 15673  004070  0E1D               	movlw	29
 15674  004072  6E08               	movwf	?_WriteTimer0,c
 15675  004074  ECD1  F021         	call	_WriteTimer0	;wreg free
 15676                           
 15677                           ;main.c: 412: ECANInitialize();
 15678  004078  EC5B  F01E         	call	_ECANInitialize	;wreg free
 15679                           
 15680                           ;main.c: 433: INTCONbits.PEIE = 1;
 15681  00407C  8CF2               	bsf	intcon,6,c	;volatile
 15682                           
 15683                           ;main.c: 436: INTCONbits.GIE = 1;
 15684  00407E  8EF2               	bsf	intcon,7,c	;volatile
 15685  004080  0012               	return	
 15686  004082                     __end_of_init:
 15687                           	opt stack 0
 15688                           tblptru	equ	0xFF8
 15689                           tblptrh	equ	0xFF7
 15690                           tblptrl	equ	0xFF6
 15691                           tablat	equ	0xFF5
 15692                           prodh	equ	0xFF4
 15693                           prodl	equ	0xFF3
 15694                           intcon	equ	0xFF2
 15695                           postinc0	equ	0xFEE
 15696                           wreg	equ	0xFE8
 15697                           indf1	equ	0xFE7
 15698                           fsr1h	equ	0xFE2
 15699                           fsr1l	equ	0xFE1
 15700                           indf2	equ	0xFDF
 15701                           postinc2	equ	0xFDE
 15702                           postdec2	equ	0xFDD
 15703                           plusw2	equ	0xFDB
 15704                           fsr2h	equ	0xFDA
 15705                           fsr2l	equ	0xFD9
 15706                           status	equ	0xFD8
 15707                           
 15708 ;; *************** function _ECANInitialize *****************
 15709 ;; Defined at:
 15710 ;;		line 168 in file "../ECAN.c"
 15711 ;; Parameters:    Size  Location     Type
 15712 ;;		None
 15713 ;; Auto vars:     Size  Location     Type
 15714 ;;		None
 15715 ;; Return value:  Size  Location     Type
 15716 ;;		None               void
 15717 ;; Registers used:
 15718 ;;		wreg, status,2, status,0, cstack
 15719 ;; Tracked objects:
 15720 ;;		On entry : 0/0
 15721 ;;		On exit  : 0/0
 15722 ;;		Unchanged: 0/0
 15723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15728 ;;Total ram usage:        0 bytes
 15729 ;; Hardware stack levels used:    1
 15730 ;; Hardware stack levels required when called:    3
 15731 ;; This function calls:
 15732 ;;		_ECANSetOperationMode
 15733 ;; This function is called by:
 15734 ;;		_init
 15735 ;; This function uses a non-reentrant model
 15736 ;;
 15737                           
 15738                           	psect	text69
 15739  003CB6                     __ptext69:
 15740                           	opt stack 0
 15741  003CB6                     _ECANInitialize:
 15742                           	opt stack 26
 15743                           
 15744                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15745                           
 15746                           ;incstack = 0
 15747                           ;incstack = 0
 15748  003CB6  0E80               	movlw	128
 15749  003CB8  EC81  F021         	call	_ECANSetOperationMode
 15750                           
 15751                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15752  003CBC  0E09               	movlw	9
 15753  003CBE  010E               	movlb	14	; () banked
 15754  003CC0  6F43               	movwf	67,b	;volatile
 15755                           
 15756                           ; BSR set to: 14
 15757                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15758  003CC2  0EFC               	movlw	252
 15759  003CC4  6F44               	movwf	68,b	;volatile
 15760                           
 15761                           ; BSR set to: 14
 15762                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15763                           ;ECAN.c: 181: (0 << 6) |
 15764                           ;ECAN.c: 182: (2-1);
 15765  003CC6  0E01               	movlw	1
 15766  003CC8  6F45               	movwf	69,b	;volatile
 15767                           
 15768                           ; BSR set to: 14
 15769                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15770  003CCA  0E20               	movlw	32
 15771  003CCC  6E70               	movwf	3952,c	;volatile
 15772                           
 15773                           ; BSR set to: 14
 15774                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15775  003CCE  8E72               	bsf	3954,7,c	;volatile
 15776                           
 15777                           ; BSR set to: 14
 15778                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15779  003CD0  9C72               	bcf	3954,6,c	;volatile
 15780                           
 15781                           ; BSR set to: 14
 15782                           ;ECAN.c: 205: RXB0CON = 0;
 15783  003CD2  6A60               	clrf	3936,c	;volatile
 15784                           
 15785                           ; BSR set to: 14
 15786                           ;ECAN.c: 211: RXB1CON = 0;
 15787  003CD4  010F               	movlb	15	; () banked
 15788  003CD6  6B30               	clrf	48,b	;volatile
 15789                           
 15790                           ; BSR set to: 15
 15791                           ;ECAN.c: 221: B0CON = 0;
 15792  003CD8  010E               	movlb	14	; () banked
 15793  003CDA  6B80               	clrf	128,b	;volatile
 15794                           
 15795                           ; BSR set to: 14
 15796                           ;ECAN.c: 231: B1CON = 0;
 15797  003CDC  6B90               	clrf	144,b	;volatile
 15798                           
 15799                           ; BSR set to: 14
 15800                           ;ECAN.c: 241: B2CON = 0;
 15801  003CDE  6BA0               	clrf	160,b	;volatile
 15802                           
 15803                           ; BSR set to: 14
 15804                           ;ECAN.c: 254: B3CON = 0 << 2;
 15805  003CE0  6BB0               	clrf	176,b	;volatile
 15806                           
 15807                           ; BSR set to: 14
 15808                           ;ECAN.c: 264: B4CON = 0 << 2;
 15809  003CE2  6BC0               	clrf	192,b	;volatile
 15810                           
 15811                           ; BSR set to: 14
 15812                           ;ECAN.c: 274: B5CON = 0 << 2;
 15813  003CE4  6BD0               	clrf	208,b	;volatile
 15814                           
 15815                           ; BSR set to: 14
 15816                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15817  003CE6  0EE0               	movlw	224
 15818  003CE8  6F7D               	movwf	125,b	;volatile
 15819                           
 15820                           ; BSR set to: 14
 15821                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15822  003CEA  6BE0               	clrf	224,b	;volatile
 15823                           
 15824                           ; BSR set to: 14
 15825  003CEC  0E08               	movlw	8
 15826  003CEE  6FE1               	movwf	225,b	;volatile
 15827                           
 15828                           ; BSR set to: 14
 15829  003CF0  6BE2               	clrf	226,b	;volatile
 15830                           
 15831                           ; BSR set to: 14
 15832  003CF2  6BE3               	clrf	227,b	;volatile
 15833                           
 15834                           ; BSR set to: 14
 15835                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15836  003CF4  6BE4               	clrf	228,b	;volatile
 15837                           
 15838                           ; BSR set to: 14
 15839  003CF6  0EE8               	movlw	232
 15840  003CF8  6FE5               	movwf	229,b	;volatile
 15841                           
 15842                           ; BSR set to: 14
 15843  003CFA  0E1A               	movlw	26
 15844  003CFC  6FE6               	movwf	230,b	;volatile
 15845                           
 15846                           ; BSR set to: 14
 15847  003CFE  6BE7               	clrf	231,b	;volatile
 15848                           
 15849                           ; BSR set to: 14
 15850                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15851  003D00  0E03               	movlw	3
 15852  003D02  6F46               	movwf	70,b	;volatile
 15853                           
 15854                           ; BSR set to: 14
 15855                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15856  003D04  6B47               	clrf	71,b	;volatile
 15857                           
 15858                           ; BSR set to: 14
 15859                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15860  003D06  6B71               	clrf	113,b	;volatile
 15861                           
 15862                           ; BSR set to: 14
 15863                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15864  003D08  0E11               	movlw	17
 15865  003D0A  6F72               	movwf	114,b	;volatile
 15866                           
 15867                           ; BSR set to: 14
 15868                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15869  003D0C  6F73               	movwf	115,b	;volatile
 15870                           
 15871                           ; BSR set to: 14
 15872                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15873  003D0E  6B74               	clrf	116,b	;volatile
 15874                           
 15875                           ; BSR set to: 14
 15876                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15877  003D10  6B75               	clrf	117,b	;volatile
 15878                           
 15879                           ; BSR set to: 14
 15880                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15881  003D12  6B76               	clrf	118,b	;volatile
 15882                           
 15883                           ; BSR set to: 14
 15884                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15885  003D14  6B77               	clrf	119,b	;volatile
 15886                           
 15887                           ; BSR set to: 14
 15888                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15889  003D16  6B78               	clrf	120,b	;volatile
 15890                           
 15891                           ; BSR set to: 14
 15892                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15893  003D18  0E54               	movlw	84
 15894  003D1A  6F79               	movwf	121,b	;volatile
 15895                           
 15896                           ; BSR set to: 14
 15897                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15898  003D1C  0E05               	movlw	5
 15899  003D1E  6F7A               	movwf	122,b	;volatile
 15900                           
 15901                           ; BSR set to: 14
 15902                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15903  003D20  6B7B               	clrf	123,b	;volatile
 15904                           
 15905                           ; BSR set to: 14
 15906                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15907  003D22  6B7B               	clrf	123,b	;volatile
 15908                           
 15909                           ; BSR set to: 14
 15910                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15911  003D24  0E0F               	movlw	15
 15912  003D26  6FF8               	movwf	248,b	;volatile
 15913                           
 15914                           ; BSR set to: 14
 15915  003D28  0EE0               	movlw	224
 15916  003D2A  6FF9               	movwf	249,b	;volatile
 15917                           
 15918                           ; BSR set to: 14
 15919  003D2C  6BFA               	clrf	250,b	;volatile
 15920                           
 15921                           ; BSR set to: 14
 15922  003D2E  6BFB               	clrf	251,b	;volatile
 15923                           
 15924                           ; BSR set to: 14
 15925                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15926  003D30  87F9               	bsf	249,3,b	;volatile
 15927                           
 15928                           ; BSR set to: 14
 15929                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15930  003D32  0E0F               	movlw	15
 15931  003D34  6FFC               	movwf	252,b	;volatile
 15932                           
 15933                           ; BSR set to: 14
 15934  003D36  0EE0               	movlw	224
 15935  003D38  6FFD               	movwf	253,b	;volatile
 15936                           
 15937                           ; BSR set to: 14
 15938  003D3A  69FE               	setf	254,b	;volatile
 15939                           
 15940                           ; BSR set to: 14
 15941  003D3C  6BFF               	clrf	255,b	;volatile
 15942                           
 15943                           ; BSR set to: 14
 15944                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15945  003D3E  87FD               	bsf	253,3,b	;volatile
 15946                           
 15947                           ; BSR set to: 14
 15948                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15949  003D40  0E00               	movlw	0
 15950  003D42  EF81  F021         	goto	_ECANSetOperationMode
 15951  003D46                     __end_of_ECANInitialize:
 15952                           	opt stack 0
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           postinc0	equ	0xFEE
 15961                           wreg	equ	0xFE8
 15962                           indf1	equ	0xFE7
 15963                           fsr1h	equ	0xFE2
 15964                           fsr1l	equ	0xFE1
 15965                           indf2	equ	0xFDF
 15966                           postinc2	equ	0xFDE
 15967                           postdec2	equ	0xFDD
 15968                           plusw2	equ	0xFDB
 15969                           fsr2h	equ	0xFDA
 15970                           fsr2l	equ	0xFD9
 15971                           status	equ	0xFD8
 15972                           
 15973 ;; *************** function _ECANSetOperationMode *****************
 15974 ;; Defined at:
 15975 ;;		line 1012 in file "../ECAN.c"
 15976 ;; Parameters:    Size  Location     Type
 15977 ;;  mode            1    wreg     enum E18989
 15978 ;; Auto vars:     Size  Location     Type
 15979 ;;  mode            1    7[COMRAM] enum E18989
 15980 ;; Return value:  Size  Location     Type
 15981 ;;		None               void
 15982 ;; Registers used:
 15983 ;;		wreg, status,2, status,0
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15990 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15992 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15993 ;;Total ram usage:        1 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; Hardware stack levels required when called:    2
 15996 ;; This function calls:
 15997 ;;		Nothing
 15998 ;; This function is called by:
 15999 ;;		_calculateSetFilterMask
 16000 ;;		_ECANInitialize
 16001 ;; This function uses a non-reentrant model
 16002 ;;
 16003                           
 16004                           	psect	text70
 16005  004302                     __ptext70:
 16006                           	opt stack 0
 16007  004302                     _ECANSetOperationMode:
 16008                           	opt stack 24
 16009                           
 16010                           ;incstack = 0
 16011                           ;incstack = 0
 16012                           ;ECANSetOperationMode@mode stored from wreg
 16013  004302  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16014                           
 16015                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16016  004306  0E1F               	movlw	31
 16017  004308  166F               	andwf	3951,f,c	;volatile
 16018                           
 16019                           ;ECAN.c: 1014: CANCON |= mode;
 16020  00430A  5008               	movf	ECANSetOperationMode@mode,w,c
 16021  00430C  126F               	iorwf	3951,f,c	;volatile
 16022  00430E                     l6719:
 16023  00430E  506F               	movf	3951,w,c	;volatile
 16024  004310  0BE0               	andlw	224
 16025  004312  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16026  004314  B4D8               	btfsc	status,2,c
 16027  004316  0012               	return	
 16028  004318  D7FA               	goto	l6719
 16029  00431A                     __end_of_ECANSetOperationMode:
 16030                           	opt stack 0
 16031                           tblptru	equ	0xFF8
 16032                           tblptrh	equ	0xFF7
 16033                           tblptrl	equ	0xFF6
 16034                           tablat	equ	0xFF5
 16035                           prodh	equ	0xFF4
 16036                           prodl	equ	0xFF3
 16037                           intcon	equ	0xFF2
 16038                           postinc0	equ	0xFEE
 16039                           wreg	equ	0xFE8
 16040                           indf1	equ	0xFE7
 16041                           fsr1h	equ	0xFE2
 16042                           fsr1l	equ	0xFE1
 16043                           indf2	equ	0xFDF
 16044                           postinc2	equ	0xFDE
 16045                           postdec2	equ	0xFDD
 16046                           plusw2	equ	0xFDB
 16047                           fsr2h	equ	0xFDA
 16048                           fsr2l	equ	0xFD9
 16049                           status	equ	0xFD8
 16050                           
 16051 ;; *************** function _OpenTimer0 *****************
 16052 ;; Defined at:
 16053 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  config          1    wreg     unsigned char 
 16056 ;; Auto vars:     Size  Location     Type
 16057 ;;  config          1    7[COMRAM] unsigned char 
 16058 ;; Return value:  Size  Location     Type
 16059 ;;		None               void
 16060 ;; Registers used:
 16061 ;;		wreg, status,2, status,0
 16062 ;; Tracked objects:
 16063 ;;		On entry : 0/0
 16064 ;;		On exit  : 0/0
 16065 ;;		Unchanged: 0/0
 16066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16071 ;;Total ram usage:        1 bytes
 16072 ;; Hardware stack levels used:    1
 16073 ;; Hardware stack levels required when called:    2
 16074 ;; This function calls:
 16075 ;;		Nothing
 16076 ;; This function is called by:
 16077 ;;		_init
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           	psect	text71
 16082  004296                     __ptext71:
 16083                           	opt stack 0
 16084  004296                     _OpenTimer0:
 16085                           	opt stack 27
 16086                           
 16087                           ;incstack = 0
 16088                           ;incstack = 0
 16089                           ;OpenTimer0@config stored from wreg
 16090  004296  CFE8 F008          	movff	wreg,OpenTimer0@config
 16091  00429A  5008               	movf	OpenTimer0@config,w,c
 16092  00429C  0B7F               	andlw	127
 16093  00429E  6ED5               	movwf	4053,c	;volatile
 16094  0042A0  6AD7               	clrf	4055,c	;volatile
 16095  0042A2  6AD6               	clrf	4054,c	;volatile
 16096  0042A4  94F2               	bcf	intcon,2,c	;volatile
 16097  0042A6  AE08               	btfss	OpenTimer0@config,7,c
 16098  0042A8  D002               	goto	l1318
 16099  0042AA  8AF2               	bsf	intcon,5,c	;volatile
 16100  0042AC  D001               	goto	l1319
 16101  0042AE                     l1318:
 16102  0042AE  9AF2               	bcf	intcon,5,c	;volatile
 16103  0042B0                     l1319:
 16104  0042B0  8ED5               	bsf	4053,7,c	;volatile
 16105  0042B2  0012               	return	
 16106  0042B4                     __end_of_OpenTimer0:
 16107                           	opt stack 0
 16108                           tblptru	equ	0xFF8
 16109                           tblptrh	equ	0xFF7
 16110                           tblptrl	equ	0xFF6
 16111                           tablat	equ	0xFF5
 16112                           prodh	equ	0xFF4
 16113                           prodl	equ	0xFF3
 16114                           intcon	equ	0xFF2
 16115                           postinc0	equ	0xFEE
 16116                           wreg	equ	0xFE8
 16117                           indf1	equ	0xFE7
 16118                           fsr1h	equ	0xFE2
 16119                           fsr1l	equ	0xFE1
 16120                           indf2	equ	0xFDF
 16121                           postinc2	equ	0xFDE
 16122                           postdec2	equ	0xFDD
 16123                           plusw2	equ	0xFDB
 16124                           fsr2h	equ	0xFDA
 16125                           fsr2l	equ	0xFD9
 16126                           status	equ	0xFD8
 16127                           
 16128 ;; *************** function _init_app_ram *****************
 16129 ;; Defined at:
 16130 ;;		line 446 in file "../main.c"
 16131 ;; Parameters:    Size  Location     Type
 16132 ;;		None
 16133 ;; Auto vars:     Size  Location     Type
 16134 ;;  i               1   12[COMRAM] unsigned char 
 16135 ;; Return value:  Size  Location     Type
 16136 ;;		None               void
 16137 ;; Registers used:
 16138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16139 ;; Tracked objects:
 16140 ;;		On entry : 0/0
 16141 ;;		On exit  : 0/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16145 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16147 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16148 ;;Total ram usage:        3 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; Hardware stack levels required when called:    3
 16151 ;; This function calls:
 16152 ;;		_readEEPROM
 16153 ;; This function is called by:
 16154 ;;		_main
 16155 ;;		_init
 16156 ;;		_vscp_restoreDefaults
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           	psect	text72
 16161  0037F2                     __ptext72:
 16162                           	opt stack 0
 16163  0037F2                     _init_app_ram:
 16164                           	opt stack 24
 16165                           
 16166                           ;main.c: 447: uint8_t i;
 16167                           ;main.c: 449: measurement_clock = 0;
 16168                           
 16169                           ;incstack = 0
 16170                           ;incstack = 0
 16171  0037F2  0100               	movlb	0	; () banked
 16172  0037F4  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16173  0037F6  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16174  0037F8  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16175  0037FA  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16176                           
 16177                           ;main.c: 451: seconds = 0;
 16178  0037FC  6B8B               	clrf	_seconds& (0+255),b
 16179                           
 16180                           ;main.c: 452: minutes = 0;
 16181  0037FE  6B89               	clrf	_minutes& (0+255),b
 16182                           
 16183                           ;main.c: 453: hours = 0;
 16184  003800  6B88               	clrf	_hours& (0+255),b
 16185                           
 16186                           ;main.c: 455: relay_pulse_flags = 0;
 16187  003802  6B8A               	clrf	_relay_pulse_flags& (0+255),b
 16188                           
 16189                           ;main.c: 458: for ( i = 0; i < 8; i++ ) {
 16190  003804  6A0D               	clrf	init_app_ram@i,c
 16191  003806                     l7237:
 16192                           
 16193                           ; BSR set to: 0
 16194                           ;main.c: 459: relay_pulse_timer[ i ] = 0;
 16195  003806  500D               	movf	init_app_ram@i,w,c
 16196  003808  0D02               	mullw	2
 16197  00380A  50F3               	movf	prodl,w,c
 16198  00380C  0F70               	addlw	low _relay_pulse_timer
 16199  00380E  6ED9               	movwf	fsr2l,c
 16200  003810  6ADA               	clrf	fsr2h,c
 16201  003812  6ADE               	clrf	postinc2,c
 16202  003814  6ADD               	clrf	postdec2,c
 16203                           
 16204                           ;main.c: 460: relay_protection_timer[ i ] = 0;
 16205  003816  500D               	movf	init_app_ram@i,w,c
 16206  003818  0D02               	mullw	2
 16207  00381A  50F3               	movf	prodl,w,c
 16208  00381C  0F60               	addlw	low _relay_protection_timer
 16209  00381E  6ED9               	movwf	fsr2l,c
 16210  003820  6ADA               	clrf	fsr2h,c
 16211  003822  6ADE               	clrf	postinc2,c
 16212  003824  6ADD               	clrf	postdec2,c
 16213                           
 16214                           ; BSR set to: 0
 16215  003826  2A0D               	incf	init_app_ram@i,f,c
 16216                           
 16217                           ; BSR set to: 0
 16218  003828  0E07               	movlw	7
 16219  00382A  640D               	cpfsgt	init_app_ram@i,c
 16220  00382C  D7EC               	goto	l7237
 16221                           
 16222                           ; BSR set to: 0
 16223                           ;main.c: 461: }
 16224                           ;main.c: 463: for ( i=0; i<7; i++ ) {
 16225  00382E  6A0D               	clrf	init_app_ram@i,c
 16226  003830                     l7247:
 16227                           
 16228                           ;main.c: 466: if ( readEEPROM( 0x43 + 10 + i ) &
 16229                           ;main.c: 467: 0x01 ) {
 16230  003830  0E4D               	movlw	77
 16231  003832  240D               	addwf	init_app_ram@i,w,c
 16232  003834  6E08               	movwf	?_readEEPROM,c
 16233  003836  6A09               	clrf	?_readEEPROM+1,c
 16234  003838  0E00               	movlw	0
 16235  00383A  2209               	addwfc	?_readEEPROM+1,f,c
 16236  00383C  ECDA  F021         	call	_readEEPROM	;wreg free
 16237  003840  6E0B               	movwf	??_init_app_ram& (0+255),c
 16238  003842  A00B               	btfss	??_init_app_ram,0,c
 16239  003844  D027               	goto	l7253
 16240                           
 16241                           ;main.c: 469: relay_pulse_flags |= (1<<i);
 16242  003846  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16243  00384A  0E01               	movlw	1
 16244  00384C  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16245  00384E  2A0B               	incf	??_init_app_ram,f,c
 16246  003850  D002               	goto	u8074
 16247  003852                     u8075:
 16248  003852  90D8               	bcf	status,0,c
 16249  003854  360C               	rlcf	??_init_app_ram+1,f,c
 16250  003856                     u8074:
 16251  003856  2E0B               	decfsz	??_init_app_ram,f,c
 16252  003858  D7FC               	goto	u8075
 16253  00385A  500C               	movf	??_init_app_ram+1,w,c
 16254  00385C  0100               	movlb	0	; () banked
 16255  00385E  138A               	iorwf	_relay_pulse_flags& (0+255),f,b
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;main.c: 470: relay_pulse_timer[ i ] =
 16259                           ;main.c: 471: readEEPROM( 0x43 + 18 + i ) * 256 +
 16260                           ;main.c: 472: readEEPROM( 0x43 + 19 + i );
 16261  003860  0E55               	movlw	85
 16262  003862  240D               	addwf	init_app_ram@i,w,c
 16263  003864  6E08               	movwf	?_readEEPROM,c
 16264  003866  6A09               	clrf	?_readEEPROM+1,c
 16265  003868  0E00               	movlw	0
 16266  00386A  2209               	addwfc	?_readEEPROM+1,f,c
 16267  00386C  ECDA  F021         	call	_readEEPROM	;wreg free
 16268  003870  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16269  003872  6A0B               	clrf	??_init_app_ram& (0+255),c
 16270  003874  0E56               	movlw	86
 16271  003876  240D               	addwf	init_app_ram@i,w,c
 16272  003878  6E08               	movwf	?_readEEPROM,c
 16273  00387A  6A09               	clrf	?_readEEPROM+1,c
 16274  00387C  0E00               	movlw	0
 16275  00387E  2209               	addwfc	?_readEEPROM+1,f,c
 16276  003880  ECDA  F021         	call	_readEEPROM	;wreg free
 16277  003884  D831               	call	PL58	;call to abstracted procedure
 16278  003886  0F70               	addlw	low _relay_pulse_timer
 16279  003888  6ED9               	movwf	fsr2l,c
 16280  00388A  6ADA               	clrf	fsr2h,c
 16281  00388C  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16282  003890  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16283  003894                     l7253:
 16284                           
 16285                           ;main.c: 473: }
 16286                           ;main.c: 476: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16287  003894  0E52               	movlw	82
 16288  003896  240D               	addwf	init_app_ram@i,w,c
 16289  003898  6E08               	movwf	?_readEEPROM,c
 16290  00389A  6A09               	clrf	?_readEEPROM+1,c
 16291  00389C  0E00               	movlw	0
 16292  00389E  2209               	addwfc	?_readEEPROM+1,f,c
 16293  0038A0  ECDA  F021         	call	_readEEPROM	;wreg free
 16294  0038A4  6E0B               	movwf	??_init_app_ram& (0+255),c
 16295  0038A6  A40B               	btfss	??_init_app_ram,2,c
 16296  0038A8  D01A               	goto	l7257
 16297                           
 16298                           ;main.c: 477: relay_protection_timer[ i ] =
 16299                           ;main.c: 478: readEEPROM(0x43 + 44 + i ) * 256 +
 16300                           ;main.c: 479: readEEPROM(0x43 + 45 + i );
 16301  0038AA  0E6F               	movlw	111
 16302  0038AC  240D               	addwf	init_app_ram@i,w,c
 16303  0038AE  6E08               	movwf	?_readEEPROM,c
 16304  0038B0  6A09               	clrf	?_readEEPROM+1,c
 16305  0038B2  0E00               	movlw	0
 16306  0038B4  2209               	addwfc	?_readEEPROM+1,f,c
 16307  0038B6  ECDA  F021         	call	_readEEPROM	;wreg free
 16308  0038BA  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16309  0038BC  6A0B               	clrf	??_init_app_ram& (0+255),c
 16310  0038BE  0E70               	movlw	112
 16311  0038C0  240D               	addwf	init_app_ram@i,w,c
 16312  0038C2  6E08               	movwf	?_readEEPROM,c
 16313  0038C4  6A09               	clrf	?_readEEPROM+1,c
 16314  0038C6  0E00               	movlw	0
 16315  0038C8  2209               	addwfc	?_readEEPROM+1,f,c
 16316  0038CA  ECDA  F021         	call	_readEEPROM	;wreg free
 16317  0038CE  D80C               	call	PL58	;call to abstracted procedure
 16318  0038D0  0F60               	addlw	low _relay_protection_timer
 16319  0038D2  6ED9               	movwf	fsr2l,c
 16320  0038D4  6ADA               	clrf	fsr2h,c
 16321  0038D6  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16322  0038DA  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16323  0038DE                     l7257:
 16324  0038DE  2A0D               	incf	init_app_ram@i,f,c
 16325  0038E0  0E06               	movlw	6
 16326  0038E2  640D               	cpfsgt	init_app_ram@i,c
 16327  0038E4  D7A5               	goto	l7247
 16328  0038E6  0C06               	retlw	6
 16329  0038E8                     __end_of_init_app_ram:
 16330                           	opt stack 0
 16331  0038E8                     PL58:
 16332                           	opt stack 24
 16333  0038E8  260B               	addwf	??_init_app_ram,f,c
 16334  0038EA  0E00               	movlw	0
 16335  0038EC  220C               	addwfc	??_init_app_ram+1,f,c
 16336  0038EE  500D               	movf	init_app_ram@i,w,c
 16337  0038F0  0D02               	mullw	2
 16338  0038F2  50F3               	movf	prodl,w,c
 16339  0038F4  0100               	movlb	0	; () banked
 16340  0038F6  0012               	return	
 16341  0038F8                     __end_ofPL58:
 16342                           	opt stack 0
 16343                           tblptru	equ	0xFF8
 16344                           tblptrh	equ	0xFF7
 16345                           tblptrl	equ	0xFF6
 16346                           tablat	equ	0xFF5
 16347                           prodh	equ	0xFF4
 16348                           prodl	equ	0xFF3
 16349                           intcon	equ	0xFF2
 16350                           postinc0	equ	0xFEE
 16351                           wreg	equ	0xFE8
 16352                           indf1	equ	0xFE7
 16353                           fsr1h	equ	0xFE2
 16354                           fsr1l	equ	0xFE1
 16355                           indf2	equ	0xFDF
 16356                           postinc2	equ	0xFDE
 16357                           postdec2	equ	0xFDD
 16358                           plusw2	equ	0xFDB
 16359                           fsr2h	equ	0xFDA
 16360                           fsr2l	equ	0xFD9
 16361                           status	equ	0xFD8
 16362                           
 16363 ;; *************** function _WriteTimer0 *****************
 16364 ;; Defined at:
 16365 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16366 ;; Parameters:    Size  Location     Type
 16367 ;;  timer0          2    7[COMRAM] unsigned int 
 16368 ;; Auto vars:     Size  Location     Type
 16369 ;;  timer           2    9[COMRAM] struct Timers
 16370 ;; Return value:  Size  Location     Type
 16371 ;;		None               void
 16372 ;; Registers used:
 16373 ;;		None
 16374 ;; Tracked objects:
 16375 ;;		On entry : 0/0
 16376 ;;		On exit  : 0/0
 16377 ;;		Unchanged: 0/0
 16378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16379 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16382 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16383 ;;Total ram usage:        4 bytes
 16384 ;; Hardware stack levels used:    1
 16385 ;; Hardware stack levels required when called:    2
 16386 ;; This function calls:
 16387 ;;		Nothing
 16388 ;; This function is called by:
 16389 ;;		_init
 16390 ;; This function uses a non-reentrant model
 16391 ;;
 16392                           
 16393                           	psect	text73
 16394  0043A2                     __ptext73:
 16395                           	opt stack 0
 16396  0043A2                     _WriteTimer0:
 16397                           	opt stack 27
 16398                           
 16399                           ;incstack = 0
 16400                           ;incstack = 0
 16401  0043A2  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16402  0043A6  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16403  0043AA  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16404  0043AE  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16405  0043B2  0012               	return	
 16406  0043B4                     __end_of_WriteTimer0:
 16407                           	opt stack 0
 16408                           tblptru	equ	0xFF8
 16409                           tblptrh	equ	0xFF7
 16410                           tblptrl	equ	0xFF6
 16411                           tablat	equ	0xFF5
 16412                           prodh	equ	0xFF4
 16413                           prodl	equ	0xFF3
 16414                           intcon	equ	0xFF2
 16415                           postinc0	equ	0xFEE
 16416                           wreg	equ	0xFE8
 16417                           indf1	equ	0xFE7
 16418                           fsr1h	equ	0xFE2
 16419                           fsr1l	equ	0xFE1
 16420                           indf2	equ	0xFDF
 16421                           postinc2	equ	0xFDE
 16422                           postdec2	equ	0xFDD
 16423                           plusw2	equ	0xFDB
 16424                           fsr2h	equ	0xFDA
 16425                           fsr2l	equ	0xFD9
 16426                           status	equ	0xFD8
 16427                           
 16428 ;; *************** function _vscp_readAppReg *****************
 16429 ;; Defined at:
 16430 ;;		line 910 in file "../main.c"
 16431 ;; Parameters:    Size  Location     Type
 16432 ;;  reg             1    wreg     unsigned char 
 16433 ;; Auto vars:     Size  Location     Type
 16434 ;;  reg             1   11[COMRAM] unsigned char 
 16435 ;;  rv              1   10[COMRAM] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  1    wreg      unsigned char 
 16438 ;; Registers used:
 16439 ;;		wreg, status,2, status,0, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : F/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16446 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16448 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16449 ;;Total ram usage:        2 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    3
 16452 ;; This function calls:
 16453 ;;		_readEEPROM
 16454 ;; This function is called by:
 16455 ;;		_vscp_readRegister
 16456 ;;		_vscp_handleProtocolEvent
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           	psect	text74
 16461  003B4C                     __ptext74:
 16462                           	opt stack 0
 16463  003B4C                     _vscp_readAppReg:
 16464                           	opt stack 25
 16465                           
 16466                           ;incstack = 0
 16467                           ;incstack = 0
 16468                           ;vscp_readAppReg@reg stored from wreg
 16469  003B4C  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;main.c: 911: uint8_t rv;
 16473                           ;main.c: 913: rv = 0x00;
 16474  003B50  6A0B               	clrf	vscp_readAppReg@rv,c
 16475                           
 16476                           ; BSR set to: 0
 16477                           ;main.c: 916: if ( reg == 0x00 ) {
 16478  003B52  660C               	tstfsz	vscp_readAppReg@reg,c
 16479  003B54  D006               	goto	l8039
 16480                           
 16481                           ; BSR set to: 0
 16482                           ;main.c: 917: rv = readEEPROM(0x43 + 0);
 16483  003B56  6A09               	clrf	?_readEEPROM+1,c
 16484  003B58  0E43               	movlw	67
 16485  003B5A  6E08               	movwf	?_readEEPROM,c
 16486  003B5C  ECDA  F021         	call	_readEEPROM	;wreg free
 16487  003B60  D04D               	goto	L56
 16488  003B62                     l8039:
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;main.c: 920: else if ( reg == 0x01 ) {
 16492  003B62  040C               	decf	vscp_readAppReg@reg,w,c
 16493  003B64  E106               	bnz	l8043
 16494                           
 16495                           ; BSR set to: 0
 16496                           ;main.c: 921: rv = readEEPROM(0x43 + 1);
 16497  003B66  6A09               	clrf	?_readEEPROM+1,c
 16498  003B68  0E44               	movlw	68
 16499  003B6A  6E08               	movwf	?_readEEPROM,c
 16500  003B6C  ECDA  F021         	call	_readEEPROM	;wreg free
 16501  003B70  D045               	goto	L56
 16502  003B72                     l8043:
 16503                           
 16504                           ; BSR set to: 0
 16505                           ;main.c: 923: else if ( (reg >= 2) && (reg < 10) ) {
 16506  003B72  0E01               	movlw	1
 16507  003B74  640C               	cpfsgt	vscp_readAppReg@reg,c
 16508  003B76  D034               	goto	l8067
 16509                           
 16510                           ; BSR set to: 0
 16511  003B78  0E0A               	movlw	10
 16512  003B7A  600C               	cpfslt	vscp_readAppReg@reg,c
 16513  003B7C  D031               	goto	l8067
 16514  003B7E  D01E               	goto	l8065
 16515  003B80                     l8049:
 16516                           
 16517                           ; BSR set to: 0
 16518                           ;main.c: 929: rv = LATBbits.LATB4;
 16519  003B80  0E00               	movlw	0
 16520  003B82  B88A               	btfsc	3978,4,c	;volatile
 16521  003B84  0E01               	movlw	1
 16522  003B86  D03A               	goto	L56
 16523  003B88                     l8051:
 16524                           
 16525                           ; BSR set to: 0
 16526                           ;main.c: 934: rv = LATBbits.LATB1;
 16527  003B88  0E00               	movlw	0
 16528  003B8A  B28A               	btfsc	3978,1,c	;volatile
 16529  003B8C  0E01               	movlw	1
 16530  003B8E  D036               	goto	L56
 16531  003B90                     l8053:
 16532                           
 16533                           ; BSR set to: 0
 16534                           ;main.c: 939: rv = LATBbits.LATB0;
 16535  003B90  0E00               	movlw	0
 16536  003B92  B08A               	btfsc	3978,0,c	;volatile
 16537  003B94  0E01               	movlw	1
 16538  003B96  D032               	goto	L56
 16539  003B98                     l8055:
 16540                           
 16541                           ; BSR set to: 0
 16542                           ;main.c: 944: rv = LATCbits.LATC7;
 16543  003B98  0E00               	movlw	0
 16544  003B9A  BE8B               	btfsc	3979,7,c	;volatile
 16545  003B9C  0E01               	movlw	1
 16546  003B9E  D02E               	goto	L56
 16547  003BA0                     l8057:
 16548                           
 16549                           ; BSR set to: 0
 16550                           ;main.c: 949: rv = LATCbits.LATC6;
 16551  003BA0  0E00               	movlw	0
 16552  003BA2  BC8B               	btfsc	3979,6,c	;volatile
 16553  003BA4  0E01               	movlw	1
 16554  003BA6  D02A               	goto	L56
 16555  003BA8                     l8059:
 16556                           
 16557                           ; BSR set to: 0
 16558                           ;main.c: 954: rv = LATCbits.LATC5;
 16559  003BA8  0E00               	movlw	0
 16560  003BAA  BA8B               	btfsc	3979,5,c	;volatile
 16561  003BAC  0E01               	movlw	1
 16562  003BAE  D026               	goto	L56
 16563  003BB0                     l8061:
 16564                           
 16565                           ; BSR set to: 0
 16566                           ;main.c: 959: rv = LATCbits.LATC4;
 16567  003BB0  0E00               	movlw	0
 16568  003BB2  B88B               	btfsc	3979,4,c	;volatile
 16569  003BB4  0E01               	movlw	1
 16570  003BB6  D022               	goto	L56
 16571  003BB8                     l290:
 16572                           
 16573                           ; BSR set to: 0
 16574                           ;main.c: 964: rv = 0;
 16575  003BB8  6A0B               	clrf	vscp_readAppReg@rv,c
 16576                           
 16577                           ;main.c: 965: break;
 16578  003BBA  D021               	goto	l8073
 16579  003BBC                     l8065:
 16580                           
 16581                           ; BSR set to: 0
 16582  003BBC  500C               	movf	vscp_readAppReg@reg,w,c
 16583                           
 16584                           ; Switch size 1, requested type "space"
 16585                           ; Number of cases is 8, Range of values is 2 to 9
 16586                           ; switch strategies available:
 16587                           ; Name         Instructions Cycles
 16588                           ; simple_byte           25    13 (average)
 16589                           ;	Chosen strategy is simple_byte
 16590  003BBE  0A02               	xorlw	2	; case 2
 16591  003BC0  E0DF               	bz	l8049
 16592  003BC2  0A01               	xorlw	1	; case 3
 16593  003BC4  E0E1               	bz	l8051
 16594  003BC6  0A07               	xorlw	7	; case 4
 16595  003BC8  E0E3               	bz	l8053
 16596  003BCA  0A01               	xorlw	1	; case 5
 16597  003BCC  E0E5               	bz	l8055
 16598  003BCE  0A03               	xorlw	3	; case 6
 16599  003BD0  E0E7               	bz	l8057
 16600  003BD2  0A01               	xorlw	1	; case 7
 16601  003BD4  E0E9               	bz	l8059
 16602  003BD6  0A0F               	xorlw	15	; case 8
 16603  003BD8  E0EB               	bz	l8061
 16604  003BDA  0A01               	xorlw	1	; case 9
 16605  003BDC  E0ED               	bz	l290
 16606  003BDE  D00F               	goto	l8073
 16607  003BE0                     l8067:
 16608                           
 16609                           ; BSR set to: 0
 16610                           ;main.c: 969: else if ( ( reg >= 10 ) &&
 16611                           ;main.c: 970: (reg < (72 + 7 * 8 ) ) ) {
 16612  003BE0  0E09               	movlw	9
 16613  003BE2  640C               	cpfsgt	vscp_readAppReg@reg,c
 16614  003BE4  D00C               	goto	l8073
 16615                           
 16616                           ; BSR set to: 0
 16617  003BE6  0E80               	movlw	128
 16618  003BE8  600C               	cpfslt	vscp_readAppReg@reg,c
 16619  003BEA  D009               	goto	l8073
 16620                           
 16621                           ; BSR set to: 0
 16622                           ;main.c: 971: rv = readEEPROM( 0x43 + reg );
 16623  003BEC  0E43               	movlw	67
 16624  003BEE  240C               	addwf	vscp_readAppReg@reg,w,c
 16625  003BF0  6E08               	movwf	?_readEEPROM,c
 16626  003BF2  6A09               	clrf	?_readEEPROM+1,c
 16627  003BF4  0E00               	movlw	0
 16628  003BF6  2209               	addwfc	?_readEEPROM+1,f,c
 16629  003BF8  ECDA  F021         	call	_readEEPROM	;wreg free
 16630  003BFC                     L56:
 16631  003BFC  6E0B               	movwf	vscp_readAppReg@rv,c
 16632  003BFE                     l8073:
 16633                           
 16634                           ;main.c: 972: }
 16635                           ;main.c: 974: return rv;
 16636  003BFE  500B               	movf	vscp_readAppReg@rv,w,c
 16637  003C00  0012               	return	
 16638  003C02                     __end_of_vscp_readAppReg:
 16639                           	opt stack 0
 16640                           tblptru	equ	0xFF8
 16641                           tblptrh	equ	0xFF7
 16642                           tblptrl	equ	0xFF6
 16643                           tablat	equ	0xFF5
 16644                           prodh	equ	0xFF4
 16645                           prodl	equ	0xFF3
 16646                           intcon	equ	0xFF2
 16647                           postinc0	equ	0xFEE
 16648                           wreg	equ	0xFE8
 16649                           indf1	equ	0xFE7
 16650                           fsr1h	equ	0xFE2
 16651                           fsr1l	equ	0xFE1
 16652                           indf2	equ	0xFDF
 16653                           postinc2	equ	0xFDE
 16654                           postdec2	equ	0xFDD
 16655                           plusw2	equ	0xFDB
 16656                           fsr2h	equ	0xFDA
 16657                           fsr2l	equ	0xFD9
 16658                           status	equ	0xFD8
 16659                           
 16660 ;; *************** function _readEEPROM *****************
 16661 ;; Defined at:
 16662 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  address         2    7[COMRAM] unsigned short 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;  data            1    9[COMRAM] unsigned char 
 16667 ;; Return value:  Size  Location     Type
 16668 ;;                  1    wreg      unsigned char 
 16669 ;; Registers used:
 16670 ;;		wreg, status,2
 16671 ;; Tracked objects:
 16672 ;;		On entry : 0/0
 16673 ;;		On exit  : 0/0
 16674 ;;		Unchanged: 0/0
 16675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16676 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16679 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16680 ;;Total ram usage:        3 bytes
 16681 ;; Hardware stack levels used:    1
 16682 ;; Hardware stack levels required when called:    2
 16683 ;; This function calls:
 16684 ;;		Nothing
 16685 ;; This function is called by:
 16686 ;;		_init_app_ram
 16687 ;;		_doApplicationOneSecondWork
 16688 ;;		_vscp_readNicknamePermanent
 16689 ;;		_vscp_getZone
 16690 ;;		_vscp_getSubzone
 16691 ;;		_vscp_readAppReg
 16692 ;;		_vscp_writeAppReg
 16693 ;;		_SendInformationEvent
 16694 ;;		_doDM
 16695 ;;		_doActionOn
 16696 ;;		_doActionOff
 16697 ;;		_doActionPulse
 16698 ;;		_doActionStatus
 16699 ;;		_doActionDisable
 16700 ;;		_doActionToggle
 16701 ;;		_vscp_getGUID
 16702 ;;		_vscp_getUserID
 16703 ;;		_vscp_getManufacturerId
 16704 ;;		_vscp_getSegmentCRC
 16705 ;;		_calculateSetFilterMask
 16706 ;; This function uses a non-reentrant model
 16707 ;;
 16708                           
 16709                           	psect	text75
 16710  0043B4                     __ptext75:
 16711                           	opt stack 0
 16712  0043B4                     _readEEPROM:
 16713                           	opt stack 26
 16714                           
 16715                           ;eeprom.c: 93: uint8_t data;
 16716                           ;eeprom.c: 98: EEADR = address & 0xff;
 16717                           
 16718                           ;incstack = 0
 16719                           ;incstack = 0
 16720  0043B4  C008  FF74         	movff	readEEPROM@address,3956	;volatile
 16721                           
 16722                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16723  0043B8  9E7F               	bcf	3967,7,c	;volatile
 16724                           
 16725                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16726  0043BA  9C7F               	bcf	3967,6,c	;volatile
 16727                           
 16728                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16729  0043BC  807F               	bsf	3967,0,c	;volatile
 16730                           
 16731                           ;eeprom.c: 102: data = EEDATA;
 16732  0043BE  CF73 F00A          	movff	3955,readEEPROM@data	;volatile
 16733                           
 16734                           ;eeprom.c: 104: return data;
 16735  0043C2  500A               	movf	readEEPROM@data,w,c
 16736  0043C4  0012               	return	
 16737  0043C6                     __end_of_readEEPROM:
 16738                           	opt stack 0
 16739                           tblptru	equ	0xFF8
 16740                           tblptrh	equ	0xFF7
 16741                           tblptrl	equ	0xFF6
 16742                           tablat	equ	0xFF5
 16743                           prodh	equ	0xFF4
 16744                           prodl	equ	0xFF3
 16745                           intcon	equ	0xFF2
 16746                           postinc0	equ	0xFEE
 16747                           wreg	equ	0xFE8
 16748                           indf1	equ	0xFE7
 16749                           fsr1h	equ	0xFE2
 16750                           fsr1l	equ	0xFE1
 16751                           indf2	equ	0xFDF
 16752                           postinc2	equ	0xFDE
 16753                           postdec2	equ	0xFDD
 16754                           plusw2	equ	0xFDB
 16755                           fsr2h	equ	0xFDA
 16756                           fsr2l	equ	0xFD9
 16757                           status	equ	0xFD8
 16758                           
 16759 ;; *************** function _interrupt_at_low_vector *****************
 16760 ;; Defined at:
 16761 ;;		line 155 in file "../main.c"
 16762 ;; Parameters:    Size  Location     Type
 16763 ;;		None
 16764 ;; Auto vars:     Size  Location     Type
 16765 ;;		None
 16766 ;; Return value:  Size  Location     Type
 16767 ;;		None               void
 16768 ;; Registers used:
 16769 ;;		wreg, status,2, status,0, cstack
 16770 ;; Tracked objects:
 16771 ;;		On entry : 0/0
 16772 ;;		On exit  : 0/0
 16773 ;;		Unchanged: 0/0
 16774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16777 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16779 ;;Total ram usage:        3 bytes
 16780 ;; Hardware stack levels used:    1
 16781 ;; Hardware stack levels required when called:    1
 16782 ;; This function calls:
 16783 ;;		i1_WriteTimer0
 16784 ;; This function is called by:
 16785 ;;		Interrupt level 1
 16786 ;; This function uses a non-reentrant model
 16787 ;;
 16788                           
 16789                           	psect	intcodelo
 16790  000018                     __pintcodelo:
 16791                           	opt stack 0
 16792  000018                     _interrupt_at_low_vector:
 16793                           	opt stack 21
 16794                           
 16795                           ;incstack = 0
 16796  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16797  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16798  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16799  000024                     
 16800                           ;main.c: 157: if ( INTCONbits.TMR0IF ) {
 16801  000024  A4F2               	btfss	intcon,2,c	;volatile
 16802  000026  D001               	goto	i1u786_21
 16803  000028  D001               	goto	i1u786_20
 16804  00002A                     i1u786_21:
 16805  00002A  D03E               	goto	i1l145
 16806  00002C                     i1u786_20:
 16807  00002C                     
 16808                           ;main.c: 160: WriteTimer0(0xfb1d);
 16809  00002C  0EFB               	movlw	251
 16810  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 16811  000030  0E1D               	movlw	29
 16812  000032  6E01               	movwf	?i1_WriteTimer0,c
 16813  000034  ECE3  F021         	call	i1_WriteTimer0	;wreg free
 16814  000038                     
 16815                           ;main.c: 162: vscp_timer++;
 16816  000038  0100               	movlb	0	; () banked
 16817  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16818  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16819  00003E                     
 16820                           ; BSR set to: 0
 16821                           ;main.c: 163: vscp_configtimer++;
 16822  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16823  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16824  000042                     
 16825                           ; BSR set to: 0
 16826                           ;main.c: 164: measurement_clock++;
 16827  000042  0E01               	movlw	1
 16828  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16829  000046  0E00               	movlw	0
 16830  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16831  00004A  0E00               	movlw	0
 16832  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16833  00004E  0E00               	movlw	0
 16834  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16835  000052                     
 16836                           ; BSR set to: 0
 16837                           ;main.c: 167: if ( PORTCbits.RC0 ) {
 16838  000052  A082               	btfss	3970,0,c	;volatile
 16839  000054  D001               	goto	i1u787_21
 16840  000056  D001               	goto	i1u787_20
 16841  000058                     i1u787_21:
 16842  000058  D002               	goto	i1l7075
 16843  00005A                     i1u787_20:
 16844  00005A                     
 16845                           ; BSR set to: 0
 16846                           ;main.c: 168: vscp_initbtncnt = 0;
 16847  00005A  6B8F               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16848                           
 16849                           ;main.c: 169: } else {
 16850  00005C  D001               	goto	i1l137
 16851  00005E                     i1l7075:
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;main.c: 171: vscp_initbtncnt++;
 16855  00005E  2B8F               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16856  000060                     i1l137:
 16857                           
 16858                           ; BSR set to: 0
 16859                           ;main.c: 172: }
 16860                           ;main.c: 175: vscp_statuscnt++;
 16861  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16862  000062                     
 16863                           ; BSR set to: 0
 16864                           ;main.c: 176: if ( ( 0x02 == vscp_initledfunc ) &&
 16865                           ;main.c: 177: ( vscp_statuscnt > 100 ) ) {
 16866  000062  5056               	movf	_vscp_initledfunc,w,c
 16867  000064  0A02               	xorlw	2
 16868  000066  A4D8               	btfss	status,2,c
 16869  000068  D001               	goto	i1u788_21
 16870  00006A  D001               	goto	i1u788_20
 16871  00006C                     i1u788_21:
 16872  00006C  D00E               	goto	i1l7085
 16873  00006E                     i1u788_20:
 16874  00006E                     
 16875                           ; BSR set to: 0
 16876  00006E  0E64               	movlw	100
 16877  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16878  000072  D001               	goto	i1u789_21
 16879  000074  D001               	goto	i1u789_20
 16880  000076                     i1u789_21:
 16881  000076  D009               	goto	i1l7085
 16882  000078                     i1u789_20:
 16883  000078                     
 16884                           ; BSR set to: 0
 16885                           ;main.c: 179: if ( PORTCbits.RC1 ) {
 16886  000078  A282               	btfss	3970,1,c	;volatile
 16887  00007A  D001               	goto	i1u790_21
 16888  00007C  D001               	goto	i1u790_20
 16889  00007E                     i1u790_21:
 16890  00007E  D002               	goto	i1l139
 16891  000080                     i1u790_20:
 16892  000080                     
 16893                           ; BSR set to: 0
 16894                           ;main.c: 180: PORTCbits.RC1 = 0;
 16895  000080  9282               	bcf	3970,1,c	;volatile
 16896                           
 16897                           ;main.c: 181: }
 16898  000082  D001               	goto	i1l140
 16899  000084                     i1l139:
 16900                           
 16901                           ; BSR set to: 0
 16902                           ;main.c: 182: else {
 16903                           ;main.c: 183: PORTCbits.RC1 = 1;
 16904  000084  8282               	bsf	3970,1,c	;volatile
 16905  000086                     i1l140:
 16906                           
 16907                           ; BSR set to: 0
 16908                           ;main.c: 184: }
 16909                           ;main.c: 186: vscp_statuscnt = 0;
 16910  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16911                           
 16912                           ;main.c: 188: }
 16913  000088  D00E               	goto	i1l141
 16914  00008A                     i1l7085:
 16915                           
 16916                           ; BSR set to: 0
 16917                           ;main.c: 189: else if (0x01 == vscp_initledfunc) {
 16918  00008A  0456               	decf	_vscp_initledfunc,w,c
 16919  00008C  A4D8               	btfss	status,2,c
 16920  00008E  D001               	goto	i1u791_21
 16921  000090  D001               	goto	i1u791_20
 16922  000092                     i1u791_21:
 16923  000092  D003               	goto	i1l142
 16924  000094                     i1u791_20:
 16925  000094                     
 16926                           ; BSR set to: 0
 16927                           ;main.c: 190: PORTCbits.RC1 = 1;
 16928  000094  8282               	bsf	3970,1,c	;volatile
 16929                           
 16930                           ;main.c: 191: vscp_statuscnt = 0;
 16931  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16932                           
 16933                           ;main.c: 192: }
 16934  000098  D006               	goto	i1l141
 16935  00009A                     i1l142:
 16936                           
 16937                           ; BSR set to: 0
 16938                           ;main.c: 193: else if (0x00 == vscp_initledfunc) {
 16939  00009A  6656               	tstfsz	_vscp_initledfunc,c
 16940  00009C  D001               	goto	i1u792_21
 16941  00009E  D001               	goto	i1u792_20
 16942  0000A0                     i1u792_21:
 16943  0000A0  D002               	goto	i1l141
 16944  0000A2                     i1u792_20:
 16945  0000A2                     
 16946                           ; BSR set to: 0
 16947                           ;main.c: 194: PORTCbits.RC1 = 0;
 16948  0000A2  9282               	bcf	3970,1,c	;volatile
 16949                           
 16950                           ;main.c: 195: vscp_statuscnt = 0;
 16951  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16952  0000A6                     i1l141:
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;main.c: 196: }
 16956                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 16957  0000A6  94F2               	bcf	intcon,2,c	;volatile
 16958  0000A8                     i1l145:
 16959  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 16960  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 16961  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 16962  0000B4  0010               	retfie	
 16963  0000B6                     __end_of_interrupt_at_low_vector:
 16964                           	opt stack 0
 16965                           tblptru	equ	0xFF8
 16966                           tblptrh	equ	0xFF7
 16967                           tblptrl	equ	0xFF6
 16968                           tablat	equ	0xFF5
 16969                           prodh	equ	0xFF4
 16970                           prodl	equ	0xFF3
 16971                           intcon	equ	0xFF2
 16972                           postinc0	equ	0xFEE
 16973                           wreg	equ	0xFE8
 16974                           indf1	equ	0xFE7
 16975                           fsr1h	equ	0xFE2
 16976                           fsr1l	equ	0xFE1
 16977                           bsr	equ	0xFE0
 16978                           indf2	equ	0xFDF
 16979                           postinc2	equ	0xFDE
 16980                           postdec2	equ	0xFDD
 16981                           plusw2	equ	0xFDB
 16982                           fsr2h	equ	0xFDA
 16983                           fsr2l	equ	0xFD9
 16984                           status	equ	0xFD8
 16985                           
 16986 ;; *************** function i1_WriteTimer0 *****************
 16987 ;; Defined at:
 16988 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16989 ;; Parameters:    Size  Location     Type
 16990 ;;  timer0          2    0[COMRAM] unsigned int 
 16991 ;; Auto vars:     Size  Location     Type
 16992 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 16993 ;; Return value:  Size  Location     Type
 16994 ;;		None               void
 16995 ;; Registers used:
 16996 ;;		None
 16997 ;; Tracked objects:
 16998 ;;		On entry : 0/0
 16999 ;;		On exit  : 0/0
 17000 ;;		Unchanged: 0/0
 17001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17003 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17005 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17006 ;;Total ram usage:        4 bytes
 17007 ;; Hardware stack levels used:    1
 17008 ;; This function calls:
 17009 ;;		Nothing
 17010 ;; This function is called by:
 17011 ;;		_interrupt_at_low_vector
 17012 ;; This function uses a non-reentrant model
 17013 ;;
 17014                           
 17015                           	psect	text77
 17016  0043C6                     __ptext77:
 17017                           	opt stack 0
 17018  0043C6                     i1_WriteTimer0:
 17019                           	opt stack 21
 17020                           
 17021                           ;incstack = 0
 17022                           ;incstack = 0
 17023  0043C6  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17024  0043CA  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17025  0043CE  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17026  0043D2  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17027  0043D6  0012               	return	
 17028  0043D8                     __end_ofi1_WriteTimer0:
 17029                           	opt stack 0
 17030                           tblptru	equ	0xFF8
 17031                           tblptrh	equ	0xFF7
 17032                           tblptrl	equ	0xFF6
 17033                           tablat	equ	0xFF5
 17034                           prodh	equ	0xFF4
 17035                           prodl	equ	0xFF3
 17036                           intcon	equ	0xFF2
 17037                           postinc0	equ	0xFEE
 17038                           wreg	equ	0xFE8
 17039                           indf1	equ	0xFE7
 17040                           fsr1h	equ	0xFE2
 17041                           fsr1l	equ	0xFE1
 17042                           bsr	equ	0xFE0
 17043                           indf2	equ	0xFDF
 17044                           postinc2	equ	0xFDE
 17045                           postdec2	equ	0xFDD
 17046                           plusw2	equ	0xFDB
 17047                           fsr2h	equ	0xFDA
 17048                           fsr2l	equ	0xFD9
 17049                           status	equ	0xFD8
 17050                           tblptru	equ	0xFF8
 17051                           tblptrh	equ	0xFF7
 17052                           tblptrl	equ	0xFF6
 17053                           tablat	equ	0xFF5
 17054                           prodh	equ	0xFF4
 17055                           prodl	equ	0xFF3
 17056                           intcon	equ	0xFF2
 17057                           postinc0	equ	0xFEE
 17058                           wreg	equ	0xFE8
 17059                           indf1	equ	0xFE7
 17060                           fsr1h	equ	0xFE2
 17061                           fsr1l	equ	0xFE1
 17062                           bsr	equ	0xFE0
 17063                           indf2	equ	0xFDF
 17064                           postinc2	equ	0xFDE
 17065                           postdec2	equ	0xFDD
 17066                           plusw2	equ	0xFDB
 17067                           fsr2h	equ	0xFDA
 17068                           fsr2l	equ	0xFD9
 17069                           status	equ	0xFD8
 17070                           
 17071                           	psect	rparam
 17072  0000                     tblptru	equ	0xFF8
 17073                           tblptrh	equ	0xFF7
 17074                           tblptrl	equ	0xFF6
 17075                           tablat	equ	0xFF5
 17076                           prodh	equ	0xFF4
 17077                           prodl	equ	0xFF3
 17078                           intcon	equ	0xFF2
 17079                           postinc0	equ	0xFEE
 17080                           wreg	equ	0xFE8
 17081                           indf1	equ	0xFE7
 17082                           fsr1h	equ	0xFE2
 17083                           fsr1l	equ	0xFE1
 17084                           bsr	equ	0xFE0
 17085                           indf2	equ	0xFDF
 17086                           postinc2	equ	0xFDE
 17087                           postdec2	equ	0xFDD
 17088                           plusw2	equ	0xFDB
 17089                           fsr2h	equ	0xFDA
 17090                           fsr2l	equ	0xFD9
 17091                           status	equ	0xFD8
 17092                           tblptru	equ	0xFF8
 17093                           tblptrh	equ	0xFF7
 17094                           tblptrl	equ	0xFF6
 17095                           tablat	equ	0xFF5
 17096                           prodh	equ	0xFF4
 17097                           prodl	equ	0xFF3
 17098                           intcon	equ	0xFF2
 17099                           postinc0	equ	0xFEE
 17100                           wreg	equ	0xFE8
 17101                           indf1	equ	0xFE7
 17102                           fsr1h	equ	0xFE2
 17103                           fsr1l	equ	0xFE1
 17104                           bsr	equ	0xFE0
 17105                           indf2	equ	0xFDF
 17106                           postinc2	equ	0xFDE
 17107                           postdec2	equ	0xFDD
 17108                           plusw2	equ	0xFDB
 17109                           fsr2h	equ	0xFDA
 17110                           fsr2l	equ	0xFD9
 17111                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    33
    Data        0
    BSS         88
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     140
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18976 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70463
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15705
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34567
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11300
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2191
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1909
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      8C       5       87.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E4       6        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Apr 19 18:10:19 2015

                      doActionToggle@val 00CA                  __end_of_vscp_readAppReg 3C02  
                  __end_of_sendVSCPFrame 3CB6                                       PL2 2BA2  
                                     PL4 16FA                                       PL6 170A  
                                     PL8 203A             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000B                  __end_of_vscp_readStdReg 310A  
                  doActionToggle@dmflags 00C9                                      PL10 2078  
                                    PL20 26DA                                      PL12 2090  
                                    PL30 35B0                                      PL22 26E8  
                                    PL14 20C4                                      PL40 171A  
                                    PL32 26F6                                      PL24 3472  
                                    PL16 2BBC                                      PL50 172E  
                                    PL42 3494                                      PL34 310A  
                                    PL26 35A0                                      PL18 358C  
                                    PL60 1740                                      PL52 34BA  
                                    PL44 34A6                                      PL36 3480  
                                    PL28 1D3C                                      PL70 2DAE  
                                    PL62 1750                                      PL54 2704  
                                    PL46 20F4                                      PL38 1D54  
                                    PL80 2108                                      PL72 1D68  
                                    PL64 1760                                      PL56 2716  
                                    PL48 35C2                                      PL82 2112  
                                    PL74 35D6                                      PL66 1770  
                                    PL58 38E8                                      PL76 311E  
                                    PL68 1780                                      PL78 1D76  
                                    l211 2598                                      l220 25BC  
                                    l212 25A0                                      l204 257C  
                                    l221 25C4                                      l205 2584  
                                    l310 1038                                      l214 25A4  
                                    l223 25C8                                      l215 25AC  
                                    l320 1100                                      l304 0FE4  
                                    l224 25D2                                      l208 258C  
                                    l217 25B0                                      l209 2594  
                                    l330 11C8                                      l226 268E  
                                    l218 25B8                                      l162 396E  
                                    l315 109C                                      l325 1164  
                                    l149 3910                                      l158 3954  
                                    l335 122C                                      l415 29EC  
                                    l185 2448                                      l417 2A06  
                     vscp_readStdReg@idx 0019                                      l290 3BB8  
                                    l442 2780                                      l451 2880  
                                    l444 2964                                      l453 28C0  
                                    l445 27C0                                      l517 36BE  
                                    l470 3A2C                                      l550 3304  
                                    l542 32E0                                      l471 3A64  
                                    l455 2900                                      l447 2800  
                                    l543 32E8                                      l472 3A30  
                                    l552 3308                                      l473 3A34  
                                    l449 2840                                      l561 332C  
                                    l553 3310                                      l474 3A38  
                                    l562 3336                                      l546 32F0  
                                    l395 16CE                                      l475 3A3C  
                                    l491 2E12                                      l555 3314  
                                    l547 32F8                                      l476 3A40  
                                    l564 3380                                      l556 331C  
                                    l477 3A44                                      l493 2E42  
                                    l549 32FC                                      l494 2E72  
                                    l558 3320                                      l495 2EA2  
                                    l559 3328                                      l920 3DBA  
                                    l656 401C                                      l496 2ED2  
                                    l497 2F02                                      l850 3212  
                                    l498 2F32                        doActionStatus@bOn 00CA  
                                    l861 2C02                       vscp_readStdReg@reg 001C  
                                    l871 2CBC                                      l880 2C8A  
                                    l872 2C4C                                      l848 31F4  
                                    l882 2C9A                                      l874 2C5A  
                                    l892 2D20                                      l884 2CAA  
                                    l876 2C6A                                      l893 2D3A  
                                    l878 2C7A           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00CB            __end_of_vscp_handleProbeState 3B4C  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 1D80                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1050 3B48  
                                   l1051 3AD4                                     l1035 3F72  
                   __size_of_doActionOff 00BA                                     l1240 1AC6  
                                   l1216 194A                                     l1241 1ADA  
                                   l1058 3B36                                     l1242 1B16  
                                   l1059 3B16                                     l1251 1B52  
                                   l1093 4048                                     l1318 42AE  
                                   l1182 37EC                                     l1319 42B0  
                                   l1299 418E                      vscp_readStdReg@code 0011  
                                   l5611 41C8                                     l5605 41E8  
                                   l7053 40F8                                     l7045 40E2  
                                   l4671 244A                vscp_getManufacturerId@idx 000B  
                                   l7225 4228                                     l7321 3AF2  
                                   l9001 2FE2                                     l8051 3B88  
                                   l8043 3B72                                     l7323 3AF6  
                                   l9011 3008                                     l8061 3BB0  
                                   l8053 3B90                                     l7253 3894  
                                   l7237 3806                                     l6701 2D82  
                                   l6605 2C30                                     l6613 2C3A  
                                   l7317 3AEE                                     l6429 4208  
                                   l9005 2FF2                                     l9101 3752  
                                   l8055 3B98                                     l8039 3B62  
                                   l7247 3830                                     l9031 3042  
                                   l9023 302A                                     l9015 3014  
                                   l9111 3774                                     l8057 3BA0  
                                   l8049 3B80                                     l8065 3BBC  
                                   l8073 3BFE                                     l7257 38DE  
                                   l6465 3DDC                                     l7353 3B3A  
                                   l9113 378A                                     l9201 3944  
                                   l8059 3BA8                                     l8067 3BE0  
                                   l6707 2D98                                     l7283 3A94  
                                   l9035 304E                                     l9027 3036  
                                   l9019 3020                                     l9203 3948  
                                   l6477 4152                                     l9061 30F6  
                                   l9045 3098                                     l9133 37D2  
                                   l9125 37BE                                     l9109 3770  
                                   l9213 3968                                     l9205 394E  
                                   l6719 430E                                     l6751 3D54  
                                   l9055 30E0                                     l9143 37EE  
                                   l9231 39B6                                     l6761 3D86  
                                   l6753 3D5E                                     l6657 2CD0  
                                   l8513 3CB4                                     l7297 3AB2  
                                   l9065 3106                                     l9217 3972  
                                   l6763 3D90                                     l6755 3D68  
                                   l6667 2CF0                                     l7299 3AB8  
                                   l9403 19D8                                     l9315 1814  
                                   l9243 39CA                                     l9219 398A  
                                   l6757 3D72                                     l6749 3D4C  
                                   l6781 340C                                     l6693 2D68  
                                   l6685 2D3C                                     l6589 2BF0  
                                   l9261 17AA                                     l9253 179A  
                                   l6759 3D7C                                     l6767 3D9C  
                                   l6599 2C1A                                     l8463 1EB6  
                                   l8455 1EA4                                     l8447 1D92  
                                   l9095 3736                                     l9407 19EE  
                                   l9423 1A14                                     l9255 179E  
                                   l8631 2F82                                     l8703 3E72  
                                   l9247 39D2                                     l9183 390C  
                                   l8481 1F48                                     l9089 3716  
                                   l9521 1B0A                                     l9513 1AFA  
                                   l9505 1ADC                                     l9441 1A66  
                                   l9425 1A16                                     l9345 187A  
                                   l9329 1820                                     l9281 17E6  
                                   l9257 17A2                                     l8705 3E9A  
                                   l9193 3932                                     l8803 4018  
                                   l8467 1F2A                                     l8491 1FE0  
                                   l9531 1B18                                     l9435 1A3A  
                                   l9427 1A20                                     l9355 18AE  
                                   l9259 17A6                                     l8485 1FC2  
                                   l9621 1C24                                     l9613 1BF6  
                                   l9517 1B02                                     l9453 1A7A  
                                   l9365 18E2                                     l8629 2F62  
                                   l7861 3F32                                     l9197 393A  
                                   l8823 318E                                     l8487 1FCA  
                                   l9631 1C44                                     l9535 1B32  
                                   l9375 1916                                     l9295 17EE  
                                   l9703 2A20                                     l7871 3F44  
                                   l8817 3180                                     l9617 1C0C  
                                   l9609 1BD6                                     l9393 197A  
                                   l8593 2DFA                                     l8585 2DC2  
                                   l8851 3214                                     l8835 31B8  
                                   l8931 3FDC                                     l9643 1C86  
                                   l9571 1B7C                                     l9387 194E  
                                   l9731 2B52                                     l9723 2B04  
                                   l9715 2AD0                                     l7867 3F3C  
                                   l8845 31F8                                     l9581 1BA0  
                                   l9557 1B54                                     l9485 1ABA  
                                   l9469 1A9A                                     l9397 1992  
                                   l9389 196C                                     l9725 2B1E  
                                   l9821 267A                                     l9911 0FF6  
                                   l9903 0FB8                                     l9639 1C5E  
                                   l8695 3E3E                                     l9719 2AEA  
                                   l9807 25D6                                     l9831 26B4  
                                   l8857 3242                                     l8865 3260  
                                   l9593 1BC6                                     l9665 1CD8  
                                   l9729 2B38                                     l9737 2B6C  
                                   l9681 299E                                     l9817 2668  
                                   l9809 25F2                                     l9833 26D6  
                                   l9745 2494                                     l8875 3284  
                                   l9931 1048                                     l9923 101E  
                                   l9851 3A12                                     l9843 39DE  
                                   l9739 2B96                                     l9827 26A0  
                                   l8893 3518                                     l8877 3286  
                                   l8981 2FAA                                     l9909 0FF2  
                                   l9589 1BC2                                     l9749 249C  
                                   l8799 3FEA                                     l8967 432A  
                                   l9951 10AC                                     l9943 1070  
                                   l9863 3A76                                     l9767 250C  
                                   l8993 2FCA                                     l8985 2FB4  
                                   l8977 2FA0                                     l9769 2544  
                                   l9971 1110                                     l9963 10D4  
                                   l9891 0F90                                     l9883 0F6A  
                                   l9859 3A48                                     l9867 3A88  
                                   l9779 2586                                     l8997 2FD6  
                                   l8989 2FBE                                     l9991 1174  
                                   l9983 1138                                     l9879 0F4C  
            __size_of_vscp_getMatrixInfo 0020                           sendCANFrame@id 0037  
                                   u8074 3856                                     u8075 3852  
                                   u7275 33D4                                     u7285 33E4  
                                   u7295 3410                                     u6780 3E2C  
                         sendCANFrame@rv 003E                                     u6785 3E22  
                                   u6955 2BF8                                     u6957 2BFA  
                                   u9940 1ED6                                     u9925 1DEA  
                                   u9950 1EFE                                     u9945 1ECC  
                                   u9955 1EF4                                     u9974 1F14  
                                   u9975 1F12                         ??_ECANInitialize 0009  
              vscp_setManufacturerId@idx 000C                                     _doDM 2992  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 38F8                                     _init 4054  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0F22                              _vscp_minute 0090  
                            _vscp_second 0095                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B6  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 0050  
                          __CFG_FOSC$HS2 000000                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0020                            __CFG_MCLRE$ON 000000  
                       _vscp_writeStdReg 36EC                          _doActionDisable 3E38  
                            _writeEEPROM 4172                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 3E38  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 0026  
                                  l10011 11D8                                    l10003 119C  
                                  l10111 13D8                                    l10023 1200  
                                  l10201 1666                                    l10121 1412  
                                  l10041 1274                                    l10033 123C  
                                  l10107 13D2                                    l10051 12AA  
                                  l10035 1266                                    l10211 1688  
                                  l10221 16B8                                    l10125 1418  
                                  l10141 1458                                    l10231 16F6  
                                  l10151 14BC                                    l10135 1452  
                                  l10055 12B0                                    l10143 1480  
                                  l10311 361C                                    l10303 35E8  
                                  l10161 155A                                    l10153 14DA  
                                  l10065 12E8                                    l10241 272E  
                                  l10321 365A                                    l10313 3632  
                                  l10227 16E2                                    l10163 157A  
                                  l10155 14FA                                    l10083 1358  
                                  l10323 3664                                    l10315 363C  
                                  l10331 3694                                    l10411 3392  
                                  l10157 151A                                    l10149 14A0  
                                  l10093 1392                                    l10069 1318  
                                  l10325 366E                                    l10317 3646  
                                  l10405 336C                                    l10159 153A  
                                  l10167 15A6                                    l10079 1352  
                                  l10343 36D0                                    l10319 3650  
                                  l10415 33A4                                    _B0CON 000E80  
                                  l10193 1618                                    l10169 15CC  
                                  l10097 1398                                    l10249 2766  
                                  l10337 36AA                                    l10329 3678  
                                  l10195 164A                                    l10427 426E  
                                  l10347 36E2                                    l10189 15EC  
                                  l10285 2940                                    l10293 2988  
                                  l10365 32CA                                    l10357 3296  
                                  _B1CON 000E90                                    l10289 2976  
                                  l10369 32EA                                    ?_doDM 0001  
                                  l10397 333A                                    l10399 3356  
                                  _B2CON 000EA0                                    _B3CON 000EB0  
                                  _B4CON 000EC0            __size_of_SendInformationEvent 006C  
          __size_of_vscp_getMajorVersion 0002                                    _B5CON 000ED0  
             __end_of_vscp_goActiveState 4296            ??_vscp_writeNicknamePermanent 000B  
                     writeEEPROM@address 0008                                    ?_main 0001  
                                  ?_init 0001                   ?_vscp_goBootloaderMode 0001  
                          i1_WriteTimer0 43C6                                    _EEADR 000F74  
                        __end_of___lbmod 4100                  _vscp_handleDropNickname 4024  
                                  _BSEL0 000E7D                                    u10004 1F7E  
                                  u10005 1F7A                                    u10014 1F96  
                                  u10015 1F92                                    u10034 1FAC  
                                  u10035 1FAA                                    u10065 3C3E  
                                  u11050 308E                                    u10234 2DD2  
                                  u10235 2DCE                                    u11055 308C  
                                  u11080 30D8                                    _T0CON 000FD5  
                                  u13004 273E                                    u11085 30D6  
                                  u13005 273A                                    u10394 3E4E  
                                  u10395 3E4A                                    u12174 24EA  
                                  u10735 34F2                                    u12175 24E6  
                                  u10745 3502                                    u13154 35F8  
                                  u12194 2554                                    u10755 3520  
                                  u13155 35F4                                    u12195 2550  
                                  u12364 39EE                                    u12365 39EA  
                                  u13254 32A6                                    u13255 32A2  
                                  i1l140 0086                                    i1l141 00A6  
                                  i1l142 009A                                    i1l137 0060  
                                  i1l145 00A8                                    i1l139 0084  
                        sendCANFrame@dlc 003B                                    _MSEL0 000E79  
                                  _MSEL1 000E7A                                    _MSEL2 000E7B  
                                  _IRXIF 007BBF                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6       __end_of_vscp_readNicknamePermanent 440A  
             _vscp_readNicknamePermanent 4400                                    _PORTA 000F80  
                                  _PORTB 000F81                                    _PORTC 000F82  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                         ?_vscp_getSubzone 0001  
                           _vscp_getGUID 4358                                    doDM@i 00DD  
                           _vscp_getZone 43E2                       vscp_writeAppReg@rv 00CD  
                                  _hours 0088                _vscp_getRegisterPagesUsed 4422  
                 __size_of_vscp_getEvent 002C                             _vscp_setGUID 41DC  
                                  tablat 000FF5                  _vscp_getSubMinorVersion 4428  
                                  plusw2 000FDB                                    status 000FD8  
             __end_of_vscp_sendHeartBeat 4126                     _ECANSetOperationMode 4302  
                        __initialization 423C                             __end_of_doDM 2BA2  
                           __end_of_main 39D8                             __end_of_init 4082  
                       ?_vscp_readAppReg 0001                  _interrupt_at_low_vector 0018  
                         doDM@class_mask 00D2                        ??_ECANSendMessage 001A  
                         ?i1_WriteTimer0 0001                                   ??_doDM 00CD  
                       ?_vscp_readStdReg 0001                    getVSCPFrame@pvscptype 001E  
                 ??_vscp_restoreDefaults 000F                                   ??_main 0052  
                                 ??_init 000E            __size_of_vscp_handleHeartbeat 0040  
               ??_vscp_getManufacturerId 000B                 ??_vscp_setManufacturerId 000C  
               _vscp_handleProtocolEvent 1790                            __activetblptr 000003  
                      __RegsToCANID@type 000B                           __CFG_PLLCFG$ON 000000  
                         __CFG_RETEN$OFF 000000               ECANReceiveMessage@msgFlags 0011  
          doApplicationOneSecondWork@bOn 00CF                __size_of__ECANPointBuffer 007E  
                                 _B0TXEN 0073EA                                   _B1TXEN 0073EB  
                                 _B2TXEN 0073EC                                   _B3TXEN 0073ED  
                                 _B4TXEN 0073EE                                   _B5TXEN 0073EF  
                 __size_of_doActionPulse 01D0               ECANReceiveMessage@savedPtr 0012  
                                 _CANCON 000F6F                                   _EEDATA 000F73  
                                 _EECON2 000F7E                                   _CIOCON 000F70  
                          doDM@type_mask 00D5                       vscp_writeStdReg@rv 0014  
                          ?_init_app_ram 0001                                   _MDSEL0 007B96  
                                 _MDSEL1 007B97                          __CFG_BBSIZ$BB2K 000000  
                                 i1l7061 0024                                   i1l7071 0052  
                                 i1l7063 002C                                   i1l7081 0078  
                                 i1l7073 005A                                   i1l7065 0038  
                             _OpenTimer0 4296                                   i1l7083 0080  
                                 i1l7075 005E                                   i1l7067 003E  
                                 i1l7085 008A                                   i1l7077 0062  
                                 i1l7069 0042                           __CFG_WDTEN$OFF 000000  
                                 i1l7087 0094                                   i1l7079 006E  
                                 i1l7089 00A2                          _init_app_eeprom 211A  
                                 _RXB0IF 007BB8                                   _RXB1IF 007BB9  
                __end_of_doActionDisable 3EA4                                   _RXF1EN 007231  
                 ECANReceiveMessage@data 000F                   ECANReceiveMessage@mode 0016  
                 ECANReceiveMessage@temp 0017                        getVSCPFrame@pData 0022  
                      getVSCPFrame@pSize 0021                       _vscp_newNodeOnline 40AE  
                  ?_ECANSetOperationMode 0001                       __CANIDToRegs@Value 0011  
                         __CFG_XINST$OFF 000000   vscp_handleProtocolEvent@page_save_1244 00DA  
                         getCANFrame@pid 001C                           __CFG_STVREN$ON 000000  
                              ??___lbmod 0009                            _vscp_getEvent 4082  
                                 _doWork 4420                         OpenTimer0@config 0008  
                    ?_vscp_newNodeOnline 0001                ??_vscp_handleDropNickname 000C  
                    vscp_writeAppReg@bOn 00CC          calculateSetFilterMask@rowfilter 003E  
             calculateSetFilterMask@mask 0036                      vscp_writeAppReg@reg 00CE  
             __end_of_vscp_setSegmentCRC 4390                      vscp_writeAppReg@val 0051  
                                 clear_0 4242                                   clear_1 424E  
                          ?_sendCANFrame 0037             vscp_handleProtocolEvent@byte 00E8  
                __size_of_vscp_getUserID 0014                            _vscp_nickname 0091  
                           __mediumconst 0000                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
                  vscp_setSegmentCRC@crc 000B                ??_vscp_getSubMinorVersion 0008  
   __size_of_vscp_getBootLoaderAlgorithm 0002                           ??_init_app_ram 000B  
                   ??_vscp_newNodeOnline 004C                          ___lbmod@divisor 0008  
                        doActionToggle@i 00CC                               __accesstop 0060  
                __end_of__initialization 4254                          ___lbmod@counter 000A  
          __size_of_vscp_getMinorVersion 0002                          doActionStatus@i 00CC  
                        writeEEPROM@data 000A                    __size_of_getVSCPFrame 0074  
                     _vscp_writeRegister 425A                ??_interrupt_at_low_vector 0005  
                __size_of_vscp_sendEvent 0026                           __pcstackCOMRAM 0001  
                         ?_vscp_getEvent 0001                            _doActionPulse 2DBC  
            __end_of_vscp_check_pstorage 423C                  __size_of_vscp_setUserID 0018  
                        ??i1_WriteTimer0 0003                      ?_vscp_writeRegister 00CF  
                             __end_ofPL2 2BBC                               __end_ofPL4 170A  
                             __end_ofPL6 171A                               __end_ofPL8 2078  
                         ??_sendCANFrame 003E                               _doActionOn 2728  
                ?_calculateSetFilterMask 0001            calculateSetFilterMask@lastOID 0035  
             __end_of_vscp_getFamilyCode 4400                            ?__RegsToCANID 0008  
            __size_of_ECANReceiveMessage 01E4                       sendVSCPFrame@pData 0045  
             __end_of_vscp_getFamilyType 43F6          __size_of_vscp_getManufacturerId 0014  
                vscp_writeRegister@value 00CF          __size_of_vscp_setManufacturerId 0020  
               __end_of_vscp_writeAppReg 16FA                   getVSCPFrame@pvscpclass 0027  
                __end_of_init_app_eeprom 2490              __end_of_vscp_setControlByte 437E  
               __end_of_vscp_writeStdReg 37F2            calculateSetFilterMask@rowmask 0031  
                     __RegsToCANID@Value 000E                     ??_vscp_writeRegister 0052  
        __end_of_vscp_handleDropNickname 4054                             _getVSCPFrame 3DC4  
                             __pbssBANK0 0060                              ?_OpenTimer0 0001  
             __end_of_vscp_getBufferSize 4426                         ?_doActionDisable 000B  
                  vscp_writeRegister@reg 00D0                   ??_ECANSetOperationMode 0008  
     __size_of_vscp_getRegisterPagesUsed 0002                             ?_writeEEPROM 0008  
                         ?_doActionPulse 000B          __end_of_vscp_getSubMinorVersion 442A  
               ECANSetOperationMode@mode 0008                                  _B0RXFUL 007407  
                                _B1RXFUL 007487                     __ECANRxFilterHitInfo 0054  
                                _B2RXFUL 007507                                  _B3RXFUL 007587  
                                _B4RXFUL 007607                                  ?_doWork 0001  
                ??_vscp_goBootloaderMode 000B                                  _B5RXFUL 007687  
         __end_of_calculateSetFilterMask 203A                  __size_of_doActionToggle 0120  
                       WriteTimer0@timer 000A                  __size_of_doActionStatus 010C  
                                _ECANCON 000F72                            ??_WriteTimer0 000A  
                         ??__RegsToCANID 000C                    sendVSCPFrame@priority 0043  
                                _BRGCON1 000E43                                  _BRGCON2 000E44  
                                _BRGCON3 000E45           SendInformationEvent@eventClass 00C5  
                    vscp_writeStdReg@reg 0015             __end_of_vscp_doOneSecondWork 3F60  
                       __CFG_CANMX$PORTB 000000              ?_vscp_readNicknamePermanent 0001  
                  sendVSCPFrame@vscptype 0041                            ??_doActionOff 00C7  
        __end_of_interrupt_at_low_vector 00B6                 vscp_readStdReg@code_1217 0015  
                      sendCANFrame@pdata 003C                    _vscp_handleProbeState 3A92  
                                _RXB0CON 000F60                                  _RXB1CON 000F30  
                                _RXB0FUL 007B07                         __ECANPointBuffer 3D46  
             __end_of_vscp_getMatrixInfo 421C                                  _TXB0CON 000F20  
                                _TXB1CON 000F10                                  _TXB2CON 000F00  
                                _RXFCON0 000E46                                  _RXFCON1 000E47  
                  doActionStatus@dmflags 00C9                       _vscp_goActiveState 4278  
                 __size_of_sendVSCPFrame 00B4             __end_of_SendInformationEvent 3F10  
           __end_of_vscp_getMajorVersion 442E                       __size_of_vscp_init 0044  
                SendInformationEvent@idx 0050                               _readEEPROM 43B4  
                 _vscp_getManufacturerId 4330                   _vscp_setManufacturerId 41BC  
                        _ECANSendMessage 312A                      ?_vscp_goActiveState 0001  
                                __Hparam 0000                          ??_vscp_getEvent 002C  
                                __Lparam 0000                       _vscp_node_substate 0093  
             __end_of_vscp_getSegmentCRC 4414               ??_vscp_handleProtocolEvent 00D1  
                          ??_getCANFrame 001C                             doActionOff@i 00CB  
      __end_of_vscp_getRegisterPagesUsed 4424                 __size_of_vscp_getMDF_URL 001C  
                                ___lbmod 40D8                          getCANFrame@pdlc 001A  
                vscp_writeAppReg@val_632 00CB                                _FIFOEMPTY 007B8F  
                        __size_of_doWork 0002                             __psmallconst 0F00  
                   __end_of_init_app_ram 38E8                       _vscp_sendHeartBeat 4100  
                                __pcinit 423C                           _vscp_deviceURL 0F00  
                            ?_doActionOn 0051                                  __ramtop 0F00  
                    __size_of_OpenTimer0 001E                                  __ptext0 38F8  
                                __ptext1 4420                                  __ptext2 2490  
                                __ptext3 3F10                                  __ptext4 4100  
                                __ptext5 43D8                                  __ptext6 43E2  
                                __ptext7 441C                                  __ptext8 2992  
                                __ptext9 328E                           _vscp_getUserID 4344  
                              _T0CONbits 000FD5                     ??_vscp_goActiveState 004C  
                       doActionDisable@i 0010                    vscp_writeStdReg@value 000F  
                    ?_vscp_sendHeartBeat 00C5                 ??_vscp_handleSetNickname 000C  
                                _minutes 0089                                  _seconds 008B  
                      __CFG_MSSPMSK$MSK7 000000                      __end_of_WriteTimer0 43B4  
                       ?_init_app_eeprom 0001                        vscp_readAppReg@rv 000B  
                     vscp_getMDF_URL@idx 0009            vscp_handleProtocolEvent@bytes 00DE  
                   end_of_initialization 4254                      __end_of_doActionOff 3A92  
           __end_of_vscp_handleHeartbeat 3FE4                 __size_of_vscp_getSubzone 000A  
                   __end_of_sendCANFrame 4024                vscp_handleProtocolEvent@i 00EA  
              vscp_handleProtocolEvent@j 00EB                vscp_handleProtocolEvent@k 00E5  
                        ??_doActionPulse 000C                   doActionDisable@dmflags 000E  
                   ??_vscp_sendHeartBeat 004C                           _vscp_sendEvent 4126  
                      ECANSendMessage@id 0012                        ECANSendMessage@pb 001B  
                                postdec2 000FDD                  __size_of_ECANInitialize 0090  
                         _vscp_setUserID 42EA                                  postinc0 000FEE  
                                postinc2 000FDE                   __end_of_vscp_deviceURL 0F21  
    __end_of_vscp_writeNicknamePermanent 43A2              _vscp_writeNicknamePermanent 4390  
                     __ECANPointBuffer@b 000B                            _sendVSCPFrame 3C02  
                 __end_of_vscp_getUserID 4358             ?_vscp_getBootLoaderAlgorithm 0001  
                              _RXM0EXIDM 0077CB                        __end_of_vscp_init 3FA4  
                         _vscp_probe_cnt 0094                                _PORTCbits 000F82  
                    __end_of_getCANFrame 4172            __size_of_vscp_restoreDefaults 0008  
                 ?_vscp_handleProbeState 0001                 __size_of_vscp_readAppReg 00B6  
                       ___lbmod@dividend 0009                         doActionPulse@arg 000B  
                         _vscp_statuscnt 0058                 __size_of_vscp_readStdReg 017E  
                       doActionPulse@val 0010                       _vscp_setSegmentCRC 437E  
                      readEEPROM@address 0008               vscp_handleProtocolEvent@cb 00E3  
                __end_of_ECANSendMessage 328E                        vscp_readStdReg@rv 001B  
                            ___lbmod@rem 000B                            ?__CANIDToRegs 0008  
                            doDM@dmflags 00DC                     __end_of__RegsToCANID 3472  
                            ?_readEEPROM 0008                      __size_of_doActionOn 026A  
                    ?_vscp_setSegmentCRC 0001                   __end_of_vscp_sendEvent 414C  
                             _vscp_error 441C                     _vscp_doOneSecondWork 3F10  
                     i1WriteTimer0@timer 0003                               _vscp_timer 0086  
                 __end_of_vscp_setUserID 4302                   vscp_sendHeartBeat@zone 004C  
                         ?_sendVSCPFrame 003F              doApplicationOneSecondWork@i 00D1  
                         _doActionToggle 328E                     __size_of_writeEEPROM 0026  
                         _doActionStatus 35E0                          ?_vscp_getUserID 0001  
                         __end_of_doWork 4422             __end_of_vscp_getMinorVersion 442C  
                            _WriteTimer0 43A2                     _SendInformationEvent 3EA4  
                   _vscp_getMajorVersion 442C                     ??_vscp_setSegmentCRC 000B  
                      ??_vscp_getMDF_URL 0008            ??_vscp_getBootLoaderAlgorithm 0008  
                            __end_ofPL10 2090                              __end_ofPL20 26E8  
                            __end_ofPL12 20C4                        ?_vscp_writeAppReg 0051  
                            __end_ofPL30 35C2                              __end_ofPL22 26F6  
                            __end_ofPL14 20F4                              __end_ofPL40 172E  
                            __end_ofPL32 2704                              __end_ofPL24 3480  
                            __end_ofPL16 2BCA                              __end_ofPL50 1740  
                            __end_ofPL42 34A6                              __end_ofPL34 311E  
                            __end_ofPL26 35B0                              __end_ofPL18 35A0  
                            __end_ofPL60 1750                              __end_ofPL52 34CC  
                            __end_ofPL44 34BA                              __end_ofPL36 3494  
                            __end_ofPL28 1D54                              __end_ofPL70 2DBC  
                            __end_ofPL62 1760                              __end_ofPL54 2716  
                            __end_ofPL46 2108                              __end_ofPL38 1D68  
                            __end_ofPL80 2112                              __end_ofPL72 1D76  
                            __end_ofPL64 1770                              __end_ofPL56 2728  
                            __end_ofPL48 35D6                              __end_ofPL82 211A  
                            __end_ofPL74 35E0                              __end_ofPL66 1780  
                            __end_ofPL58 38F8                              __end_ofPL76 312A  
                            __end_ofPL68 1790                              __end_ofPL78 1D80  
                    start_initialization 423C                              _doActionOff 39D8  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00C7  
                      ?_vscp_writeStdReg 000F                   _relay_protection_timer 0060  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0010                       _vscp_getFamilyCode 43F6  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 43EC  
                       doDM@class_filter 00D0                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 431A                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E2                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1D3C  
                        ?_vscp_setUserID 000B                                _doDM$2084 00D6  
                              _doDM$2085 00D7                                _doDM$2086 00D8  
                              _doDM$2087 00D9                                _doDM$2088 00DA  
                              _doDM$2089 00DB                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 00F6                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 33AE                        ??_vscp_getSubzone 000B  
                 __end_of_doActionStatus 36EC                 __end_of__ECANPointBuffer 3DC4  
                      __CANIDToRegs@type 000E                              _getCANFrame 414C  
                               ??_doWork 0008                       _vscp_getBufferSize 4424  
            vscp_handleProtocolEvent@len 00DF                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00DD               __end_of_ECANReceiveMessage 2DAE  
                         doActionOff@val 00CA                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001A                    ?_SendInformationEvent 00C5  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 43D8  
          __end_of_vscp_goBootloaderMode 42EA                     _vscp_handleHeartbeat 3FA4  
                     __end_of_OpenTimer0 42B4      __size_of_doApplicationOneSecondWork 024A  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
                         doActionPulse@i 0011             __size_of_vscp_check_pstorage 0020  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                          ?_vscp_getGUID 0001                            __pcstackBANK0 00B1  
                       _vscp_alarmstatus 008C                            ?_vscp_getZone 0001  
                  __size_of_sendCANFrame 0040                  ?_vscp_getManufacturerId 0001  
                ?_vscp_setManufacturerId 000B                            ?_vscp_setGUID 000B  
            __size_of_vscp_writeRegister 001E                         ?_ECANSendMessage 0012  
                      ??_vscp_readAppReg 000B                        sendVSCPFrame@size 0044  
              __end_of_vscp_readRegister 4330                        _relay_pulse_flags 008A  
                           _init_app_ram 37F2                        _relay_pulse_timer 0070  
           __size_of_vscp_setControlByte 0012                 ?_interrupt_at_low_vector 0001  
                      ??_vscp_readStdReg 000C                     ??_vscp_getBufferSize 0008  
                            ?_vscp_error 0001                       _vscp_getMatrixInfo 41FC  
                 _vscp_handleSetNickname 4198            __size_of_ECANSetOperationMode 0018  
                        ??_sendVSCPFrame 00B1                          ?_doActionToggle 0051  
                         _ECANInitialize 3CB6                          ?_doActionStatus 0051  
               __size_of_doActionDisable 006C                                 ?___lbmod 0008  
                    ?_vscp_getMatrixInfo 0001                  calculateSetFilterMask@i 0043  
                calculateSetFilterMask@j 0042                          vscp_getGUID@idx 000B  
                            __pintcodelo 0018                             ??_doActionOn 00C7  
                  ?_vscp_handleHeartbeat 0001         vscp_handleProtocolEvent@len_1234 00E1  
                vscp_readStdReg@idx_1218 001A               vscp_setManufacturerId@data 000B  
                           _sendCANFrame 3FE4                              __smallconst 0F00  
                      WriteTimer0@timer0 0008                       _vscp_getSegmentCRC 440A  
                         ??_vscp_getGUID 000B                           ??_vscp_getZone 000B  
                            doActionOn@i 00CC           __end_of_vscp_getManufacturerId 4344  
         __end_of_vscp_setManufacturerId 41DC                    __size_of__RegsToCANID 00C4  
       vscp_handleProtocolEvent@pos_1233 00E0                          doDM@type_filter 00D4  
                         ??_vscp_setGUID 000C                      ?_vscp_getSegmentCRC 0001  
                   ??_vscp_getMatrixInfo 0008                         _vscp_configtimer 0084  
                     doActionDisable@arg 000B                       doActionDisable@val 000F  
        SendInformationEvent@eventTypeId 00C6                   ??_vscp_doOneSecondWork 004D  
                 sendVSCPFrame@vscpclass 003F                                 _LATBbits 000F8A  
                   _vscp_getMinorVersion 442A                                 _LATCbits 000F8B  
                              _sendTimer 0055                       __end_of_doActionOn 2992  
                 __end_of_ECANInitialize 3D46                                 i1u790_20 0080  
                               i1u790_21 007E                                 i1u791_20 0094  
                               i1u791_21 0092                                 _PIR4bits 000FB7  
                               i1u792_20 00A2                                 i1u792_21 00A0  
                               i1u786_20 002C                                 i1u786_21 002A  
                               i1u787_20 005A                                 i1u787_21 0058  
                               i1u788_20 006E                                 i1u788_21 006C  
                               i1u789_20 0078                                 i1u789_21 0076  
                       ECANSendMessage@i 0034                         ECANSendMessage@j 002F  
                  __end_of_vscp_getEvent 40AE                                 _RXF0EIDH 000EE2  
                               _RXF0EIDL 000EE3                                 _RXB0OVFL 007B8F  
                               _RXF1EIDH 000EE6                                 _RXF1EIDL 000EE7  
                               _RXB1OVFL 007B8E                                 _RXF0SIDH 000EE0  
                               _RXF0SIDL 000EE1                                 _RXF1SIDH 000EE4  
                               _RXF1SIDL 000EE5                                 _RXM0EIDH 000EFA  
                               _RXM0EIDL 000EFB                          vscp_getEvent@rv 002C  
                               _RXM1EIDH 000EFE                                 _RXM1EIDL 000EFF  
                   ??_vscp_getSegmentCRC 000B                                 _RXFBCON0 000E71  
                               _RXFBCON1 000E72                                 _RXFBCON2 000E73  
                               _RXFBCON3 000E74                                 _RXFBCON4 000E75  
                               _RXFBCON5 000E76                                 _RXFBCON6 000E77  
                               _RXFBCON7 000E78                                 _RXM0SIDH 000EF8  
                               _RXM0SIDL 000EF9                   ??_SendInformationEvent 004B  
                               _RXM1SIDH 000EFC                   ??_vscp_getMajorVersion 0008  
                               _RXM1SIDL 000EFD               ?_vscp_getRegisterPagesUsed 0001  
                ??_vscp_handleProbeState 004C                       vscp_setUserID@data 000B  
                   __end_of__CANIDToRegs 358C                         __CFG_SOSCSEL$DIG 000000  
                           __RegsToCANID 33AE                       _vscp_probe_address 0057  
                     doActionOff@dmflags 00C9              __size_of_vscp_goActiveState 001E  
                    getVSCPFrame@pNodeId 001F                                _vscp_init 3F60  
                              _vscp_imsg 0096                                _vscp_hour 008E  
                              _vscp_omsg 00A4                         vscp_setGUID@data 000B  
      __size_of_vscp_handleProtocolEvent 05AC                      __size_of_vscp_error 0004  
              ?_vscp_handleProtocolEvent 0001                 SendInformationEvent@data 004D  
   __size_of_vscp_writeNicknamePermanent 0012       __end_of_doApplicationOneSecondWork 26DA  
             _doApplicationOneSecondWork 2490                         _vscp_page_select 0052  
             __size_of_vscp_readRegister 0016                        _measurement_clock 0080  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 0376             __end_of_vscp_restoreDefaults 441C  
                             _EECON1bits 000F7F                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 42B4  
                               __Lrparam 0000                    __end_of_doActionPulse 2F8C  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00CB  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                      ??_doActionDisable 000C               vscp_writeAppReg@bInfoEvent 00CA  
                     __end_of_readEEPROM 43C6                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3E38  
                               __ptext11 35E0                                 __ptext20 211A  
                               __ptext12 2DBC                                 __ptext21 42EA  
                               __ptext13 2728                                 __ptext30 43EC  
                               __ptext22 41BC                                 __ptext14 39D8  
                               __ptext31 43F6                                 __ptext23 41DC  
                               __ptext15 1790                                 __ptext40 442C  
                               __ptext32 4424                                 __ptext24 0F22  
                               __ptext16 40D8                                 __ptext41 40AE  
                               __ptext33 4426                                 __ptext25 1D80  
                               __ptext17 425A                                 __ptext50 4278  
                               __ptext42 4024                                 __ptext34 4330  
                               __ptext26 3EA4                                 __ptext18 36EC  
                               __ptext51 4126                                 __ptext43 3F60  
                               __ptext35 4344                                 __ptext27 431A  
                               __ptext19 4414                                 __ptext60 33AE  
                               __ptext52 3C02                                 __ptext44 4400  
                               __ptext36 42B4                                 __ptext28 2F8C  
                               __ptext61 3D46                                 __ptext53 3FE4  
                               __ptext45 4198                                 __ptext37 4358  
                               __ptext29 4422                                 __ptext70 4302  
                               __ptext62 421C                                 __ptext54 312A  
                               __ptext46 3FA4                                 __ptext38 4428  
                               __ptext71 4296                                 __ptext63 436C  
                               __ptext55 34CC                                 __ptext47 41FC  
                               __ptext39 442A                                 __ptext72 37F2  
                               __ptext64 437E                                 __ptext56 4082  
                               __ptext48 42D0                                 __ptext73 43A2  
                               __ptext65 440A                                 __ptext57 3DC4  
                               __ptext49 3A92                                 __ptext74 3B4C  
                               __ptext66 4390                                 __ptext58 414C  
                               __ptext75 43B4                                 __ptext67 4172  
                               __ptext59 2BCA                                 __ptext68 4054  
                               __ptext77 43C6                                 __ptext69 3CB6  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00C5  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 43D8             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000C                            __size_of_doDM 0210  
                          __size_of_main 00E0                            __size_of_init 002E  
              __size_of_vscp_writeAppReg 07D8                      _vscp_check_pstorage 421C  
                          init_app_ram@i 000D           vscp_handleProtocolEvent@i_1232 00E7  
         vscp_handleProtocolEvent@i_1235 00E9           vscp_handleProtocolEvent@i_1243 00E4  
                   __end_of_vscp_getGUID 436C                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 43EC  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CA                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 41FC                       vscp_readAppReg@reg 000C  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00DC  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000D  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 436C  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 3B4C  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 008D                          _vscp_readStdReg 2F8C  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 40D8  
                     _ECANReceiveMessage 2BCA                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 008F                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 42D0  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00C7  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00C7  
                        _vscp_node_state 0092                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BA                  vscp_setControlByte@ctrl 000B  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000B  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 000A  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 4428              _vscp_getBootLoaderAlgorithm 4426  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __end_of_writeEEPROM 4198                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000C  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 42D0  
           __end_of_ECANSetOperationMode 431A                     _vscp_restoreDefaults 4414  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000B  
                __end_of_vscp_getSubzone 43E2              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0077EB               __end_of_vscp_writeRegister 4278  
                     __end_of_vscp_error 4420                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 41BC       vscp_handleProtocolEvent@bytes_1240 00E6  
                  ??_vscp_setControlByte 000B                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00CC                             __CANIDToRegs 34CC  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00D8  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D0  
               __size_of_ECANSendMessage 0164                        doActionToggle@bOn 00CB  
                      doActionToggle@arg 0051  
