

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Sun Apr 19 18:15:25 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    91                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    92                           	psect	pa_nodes,global,class=CODE,delta=1
    93  0000                     tblptru	equ	0xFF8
    94                           tblptrh	equ	0xFF7
    95                           tblptrl	equ	0xFF6
    96                           tablat	equ	0xFF5
    97                           prodh	equ	0xFF4
    98                           prodl	equ	0xFF3
    99                           intcon	equ	0xFF2
   100                           wreg	equ	0xFE8
   101                           indf1	equ	0xFE7
   102                           fsr1h	equ	0xFE2
   103                           fsr1l	equ	0xFE1
   104                           indf2	equ	0xFDF
   105                           postinc2	equ	0xFDE
   106                           postdec2	equ	0xFDD
   107                           plusw2	equ	0xFDB
   108                           fsr2h	equ	0xFDA
   109                           fsr2l	equ	0xFD9
   110                           status	equ	0xFD8
   111                           
   112                           	psect	smallconst
   113  000F00                     __psmallconst:
   114                           	opt stack 0
   115  000F00                     _vscp_deviceURL:
   116                           	opt stack 0
   117  000F00  77                 	db	119
   118  000F01  77                 	db	119
   119  000F02  77                 	db	119
   120  000F03  2E                 	db	46
   121  000F04  65                 	db	101
   122  000F05  75                 	db	117
   123  000F06  72                 	db	114
   124  000F07  6F                 	db	111
   125  000F08  73                 	db	115
   126  000F09  6F                 	db	111
   127  000F0A  75                 	db	117
   128  000F0B  72                 	db	114
   129  000F0C  63                 	db	99
   130  000F0D  65                 	db	101
   131  000F0E  2E                 	db	46
   132  000F0F  73                 	db	115
   133  000F10  65                 	db	101
   134  000F11  2F                 	db	47
   135  000F12  6F                 	db	111
   136  000F13  64                 	db	100
   137  000F14  65                 	db	101
   138  000F15  73                 	db	115
   139  000F16  73                 	db	115
   140  000F17  61                 	db	97
   141  000F18  5F                 	db	95
   142  000F19  30                 	db	48
   143  000F1A  31                 	db	49
   144  000F1B  30                 	db	48
   145  000F1C  2E                 	db	46
   146  000F1D  78                 	db	120
   147  000F1E  6D                 	db	109
   148  000F1F  6C                 	db	108
   149  000F20  00                 	db	0
   150  000F21                     __end_of_vscp_deviceURL:
   151                           	opt stack 0
   152  0000                     _BRGCON1	set	3651
   153  0000                     _BRGCON2	set	3652
   154  0000                     _BRGCON3	set	3653
   155  0000                     _BSEL0	set	3709
   156  0000                     _CANCON	set	3951
   157  0000                     _CIOCON	set	3952
   158  0000                     _ECANCON	set	3954
   159  0000                     _EEADR	set	3956
   160  0000                     _EECON1bits	set	3967
   161  0000                     _EECON2	set	3966
   162  0000                     _EEDATA	set	3955
   163  0000                     _INTCONbits	set	4082
   164  0000                     _LATBbits	set	3978
   165  0000                     _LATCbits	set	3979
   166  0000                     _MSEL0	set	3705
   167  0000                     _MSEL1	set	3706
   168  0000                     _MSEL2	set	3707
   169  0000                     _PIR4bits	set	4023
   170  0000                     _PORTA	set	3968
   171  0000                     _PORTB	set	3969
   172  0000                     _PORTC	set	3970
   173  0000                     _PORTCbits	set	3970
   174  0000                     _RXB1CONbits	set	3888
   175  0000                     _RXF0EIDH	set	3810
   176  0000                     _RXF0EIDL	set	3811
   177  0000                     _RXF0SIDH	set	3808
   178  0000                     _RXF0SIDL	set	3809
   179  0000                     _RXF1EIDH	set	3814
   180  0000                     _RXF1EIDL	set	3815
   181  0000                     _RXF1SIDL	set	3813
   182  0000                     _RXFBCON0	set	3697
   183  0000                     _RXFBCON1	set	3698
   184  0000                     _RXFBCON2	set	3699
   185  0000                     _RXFBCON3	set	3700
   186  0000                     _RXFBCON4	set	3701
   187  0000                     _RXFBCON5	set	3702
   188  0000                     _RXFBCON6	set	3703
   189  0000                     _RXFBCON7	set	3704
   190  0000                     _RXFCON0	set	3654
   191  0000                     _RXFCON1	set	3655
   192  0000                     _RXM0EIDH	set	3834
   193  0000                     _RXM0EIDL	set	3835
   194  0000                     _RXM0SIDH	set	3832
   195  0000                     _RXM0SIDL	set	3833
   196  0000                     _RXM1EIDH	set	3838
   197  0000                     _RXM1EIDL	set	3839
   198  0000                     _RXM1SIDL	set	3837
   199  0000                     _T0CON	set	4053
   200  0000                     _T0CONbits	set	4053
   201  0000                     _TMR0H	set	4055
   202  0000                     _TMR0L	set	4054
   203  0000                     _TRISA	set	3986
   204  0000                     _TRISB	set	3987
   205  0000                     _TRISC	set	3988
   206  0000                     _B0RXFUL	set	29703
   207  0000                     _B0TXEN	set	29674
   208  0000                     _B1RXFUL	set	29831
   209  0000                     _B1TXEN	set	29675
   210  0000                     _B2RXFUL	set	29959
   211  0000                     _B2TXEN	set	29676
   212  0000                     _B3RXFUL	set	30087
   213  0000                     _B3TXEN	set	29677
   214  0000                     _B4RXFUL	set	30215
   215  0000                     _B4TXEN	set	29678
   216  0000                     _B5RXFUL	set	30343
   217  0000                     _B5TXEN	set	29679
   218  0000                     _FIFOEMPTY	set	31631
   219  0000                     _IRXIF	set	31679
   220  0000                     _MDSEL0	set	31638
   221  0000                     _MDSEL1	set	31639
   222  0000                     _RXB0FILHIT0	set	31488
   223  0000                     _RXB0FUL	set	31495
   224  0000                     _RXB0IF	set	31672
   225  0000                     _RXB0OVFL	set	31631
   226  0000                     _RXB1IF	set	31673
   227  0000                     _RXB1OVFL	set	31630
   228  0000                     _RXF1EN	set	29233
   229  0000                     _RXM0EXIDM	set	30667
   230  0000                     _RXM1EXIDEN	set	30699
   231  0000                     _B0CON	set	3712
   232  0000                     _B1CON	set	3728
   233  0000                     _B2CON	set	3744
   234  0000                     _B3CON	set	3760
   235  0000                     _B4CON	set	3776
   236  0000                     _B5CON	set	3792
   237  0000                     _RXB0CON	set	3936
   238  0000                     _RXB1CON	set	3888
   239  0000                     _RXF1SIDH	set	3812
   240  0000                     _RXM1SIDH	set	3836
   241  0000                     _TXB0CON	set	3872
   242  0000                     _TXB1CON	set	3856
   243  0000                     _TXB2CON	set	3840
   244  000F21  00                 	db	0	; dummy byte at the end
   245  0000                     tblptru	equ	0xFF8
   246                           tblptrh	equ	0xFF7
   247                           tblptrl	equ	0xFF6
   248                           tablat	equ	0xFF5
   249                           prodh	equ	0xFF4
   250                           prodl	equ	0xFF3
   251                           intcon	equ	0xFF2
   252                           wreg	equ	0xFE8
   253                           indf1	equ	0xFE7
   254                           fsr1h	equ	0xFE2
   255                           fsr1l	equ	0xFE1
   256                           indf2	equ	0xFDF
   257                           postinc2	equ	0xFDE
   258                           postdec2	equ	0xFDD
   259                           plusw2	equ	0xFDB
   260                           fsr2h	equ	0xFDA
   261                           fsr2l	equ	0xFD9
   262                           status	equ	0xFD8
   263                           
   264                           	psect	nvBANK0
   265  0000F1                     __pnvBANK0:
   266                           	opt stack 0
   267  0000F1                     ___DCDelay:
   268                           	opt stack 0
   269  0000F1                     	ds	1
   270                           
   271                           ; #config settings
   272  0000                     tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           prodh	equ	0xFF4
   277                           prodl	equ	0xFF3
   278                           intcon	equ	0xFF2
   279                           wreg	equ	0xFE8
   280                           indf1	equ	0xFE7
   281                           fsr1h	equ	0xFE2
   282                           fsr1l	equ	0xFE1
   283                           indf2	equ	0xFDF
   284                           postinc2	equ	0xFDE
   285                           postdec2	equ	0xFDD
   286                           plusw2	equ	0xFDB
   287                           fsr2h	equ	0xFDA
   288                           fsr2l	equ	0xFD9
   289                           status	equ	0xFD8
   290                           
   291                           	psect	cinit
   292  00423E                     __pcinit:
   293                           	opt stack 0
   294  00423E                     start_initialization:
   295                           	opt stack 0
   296  00423E                     __initialization:
   297                           	opt stack 0
   298                           
   299                           ; Clear objects allocated to BANK0 (86 bytes)
   300  00423E  EE00  F060         	lfsr	0,__pbssBANK0
   301  004242  0E56               	movlw	86
   302  004244                     clear_0:
   303  004244  6AEE               	clrf	postinc0,c
   304  004246  06E8               	decf	wreg,f,c
   305  004248  E1FD               	bnz	clear_0
   306                           
   307                           ; Clear objects allocated to COMRAM (7 bytes)
   308  00424A  EE00  F052         	lfsr	0,__pbssCOMRAM
   309  00424E  0E07               	movlw	7
   310  004250                     clear_1:
   311  004250  6AEE               	clrf	postinc0,c
   312  004252  06E8               	decf	wreg,f,c
   313  004254  E1FD               	bnz	clear_1
   314  004256                     end_of_initialization:
   315                           	opt stack 0
   316  004256                     __end_of__initialization:
   317                           	opt stack 0
   318  004256  0100               	movlb	0
   319  004258  EF7C  F01C         	goto	_main	;jump to C main() function
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           prodh	equ	0xFF4
   325                           prodl	equ	0xFF3
   326                           intcon	equ	0xFF2
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           indf1	equ	0xFE7
   330                           fsr1h	equ	0xFE2
   331                           fsr1l	equ	0xFE1
   332                           indf2	equ	0xFDF
   333                           postinc2	equ	0xFDE
   334                           postdec2	equ	0xFDD
   335                           plusw2	equ	0xFDB
   336                           fsr2h	equ	0xFDA
   337                           fsr2l	equ	0xFD9
   338                           status	equ	0xFD8
   339                           
   340                           	psect	bssCOMRAM
   341  000052                     __pbssCOMRAM:
   342                           	opt stack 0
   343  000052                     _vscp_page_select:
   344                           	opt stack 0
   345  000052                     	ds	2
   346  000054                     __ECANRxFilterHitInfo:
   347                           	opt stack 0
   348  000054                     	ds	1
   349  000055                     _sendTimer:
   350                           	opt stack 0
   351  000055                     	ds	1
   352  000056                     _vscp_initledfunc:
   353                           	opt stack 0
   354  000056                     	ds	1
   355  000057                     _vscp_probe_address:
   356                           	opt stack 0
   357  000057                     	ds	1
   358  000058                     _vscp_statuscnt:
   359                           	opt stack 0
   360  000058                     	ds	1
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           prodh	equ	0xFF4
   366                           prodl	equ	0xFF3
   367                           intcon	equ	0xFF2
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           indf1	equ	0xFE7
   371                           fsr1h	equ	0xFE2
   372                           fsr1l	equ	0xFE1
   373                           indf2	equ	0xFDF
   374                           postinc2	equ	0xFDE
   375                           postdec2	equ	0xFDD
   376                           plusw2	equ	0xFDB
   377                           fsr2h	equ	0xFDA
   378                           fsr2l	equ	0xFD9
   379                           status	equ	0xFD8
   380                           
   381                           	psect	bssBANK0
   382  000060                     __pbssBANK0:
   383                           	opt stack 0
   384  000060                     _relay_protection_timer:
   385                           	opt stack 0
   386  000060                     	ds	16
   387  000070                     _relay_pulse_timer:
   388                           	opt stack 0
   389  000070                     	ds	16
   390  000080                     _measurement_clock:
   391                           	opt stack 0
   392  000080                     	ds	4
   393  000084                     _vscp_configtimer:
   394                           	opt stack 0
   395  000084                     	ds	2
   396  000086                     _vscp_timer:
   397                           	opt stack 0
   398  000086                     	ds	2
   399  000088                     __IT_INT_MASK:
   400                           	opt stack 0
   401  000088                     	ds	1
   402  000089                     __IT_SAVE_BSR:
   403                           	opt stack 0
   404  000089                     	ds	1
   405  00008A                     __IT_SAVE_STATUS:
   406                           	opt stack 0
   407  00008A                     	ds	1
   408  00008B                     __IT_SAVE_WREG:
   409                           	opt stack 0
   410  00008B                     	ds	1
   411  00008C                     ___DCByte:
   412                           	opt stack 0
   413  00008C                     	ds	1
   414  00008D                     _hours:
   415                           	opt stack 0
   416  00008D                     	ds	1
   417  00008E                     _minutes:
   418                           	opt stack 0
   419  00008E                     	ds	1
   420  00008F                     _relay_pulse_flags:
   421                           	opt stack 0
   422  00008F                     	ds	1
   423  000090                     _seconds:
   424                           	opt stack 0
   425  000090                     	ds	1
   426  000091                     _vscp_alarmstatus:
   427                           	opt stack 0
   428  000091                     	ds	1
   429  000092                     _vscp_guid_reset:
   430                           	opt stack 0
   431  000092                     	ds	1
   432  000093                     _vscp_hour:
   433                           	opt stack 0
   434  000093                     	ds	1
   435  000094                     _vscp_initbtncnt:
   436                           	opt stack 0
   437  000094                     	ds	1
   438  000095                     _vscp_minute:
   439                           	opt stack 0
   440  000095                     	ds	1
   441  000096                     _vscp_nickname:
   442                           	opt stack 0
   443  000096                     	ds	1
   444  000097                     _vscp_node_state:
   445                           	opt stack 0
   446  000097                     	ds	1
   447  000098                     _vscp_node_substate:
   448                           	opt stack 0
   449  000098                     	ds	1
   450  000099                     _vscp_probe_cnt:
   451                           	opt stack 0
   452  000099                     	ds	1
   453  00009A                     _vscp_second:
   454                           	opt stack 0
   455  00009A                     	ds	1
   456  00009B                     _vscp_imsg:
   457                           	opt stack 0
   458  00009B                     	ds	14
   459  0000A9                     _vscp_omsg:
   460                           	opt stack 0
   461  0000A9                     	ds	13
   462                           tblptru	equ	0xFF8
   463                           tblptrh	equ	0xFF7
   464                           tblptrl	equ	0xFF6
   465                           tablat	equ	0xFF5
   466                           prodh	equ	0xFF4
   467                           prodl	equ	0xFF3
   468                           intcon	equ	0xFF2
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           indf1	equ	0xFE7
   472                           fsr1h	equ	0xFE2
   473                           fsr1l	equ	0xFE1
   474                           indf2	equ	0xFDF
   475                           postinc2	equ	0xFDE
   476                           postdec2	equ	0xFDD
   477                           plusw2	equ	0xFDB
   478                           fsr2h	equ	0xFDA
   479                           fsr2l	equ	0xFD9
   480                           status	equ	0xFD8
   481                           
   482                           	psect	cstackBANK0
   483  0000B6                     __pcstackBANK0:
   484                           	opt stack 0
   485  0000B6                     ??_sendVSCPFrame:
   486                           
   487                           ; 0 bytes @ 0x0
   488  0000B6                     	ds	20
   489  0000CA                     ?_SendInformationEvent:
   490                           	opt stack 0
   491  0000CA                     ?_vscp_sendHeartBeat:
   492                           	opt stack 0
   493  0000CA                     SendInformationEvent@eventClass:
   494                           	opt stack 0
   495  0000CA                     vscp_sendHeartBeat@subzone:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x14
   499  0000CA                     	ds	1
   500  0000CB                     SendInformationEvent@eventTypeId:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x15
   504  0000CB                     	ds	1
   505  0000CC                     ??_doActionOff:
   506  0000CC                     ??_doActionOn:
   507  0000CC                     ??_doActionStatus:
   508  0000CC                     ??_doActionToggle:
   509  0000CC                     ??_vscp_writeAppReg:
   510                           
   511                           ; 0 bytes @ 0x16
   512  0000CC                     	ds	2
   513  0000CE                     doActionOff@dmflags:
   514                           	opt stack 0
   515  0000CE                     doActionStatus@dmflags:
   516                           	opt stack 0
   517  0000CE                     doActionToggle@dmflags:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x18
   521  0000CE                     	ds	1
   522  0000CF                     vscp_writeAppReg@bInfoEvent:
   523                           	opt stack 0
   524  0000CF                     doActionOn@dmflags:
   525                           	opt stack 0
   526  0000CF                     doActionOff@val:
   527                           	opt stack 0
   528  0000CF                     doActionStatus@bOn:
   529                           	opt stack 0
   530  0000CF                     doActionToggle@val:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x19
   534  0000CF                     	ds	1
   535  0000D0                     vscp_writeAppReg@val_632:
   536                           	opt stack 0
   537  0000D0                     doActionOn@val:
   538                           	opt stack 0
   539  0000D0                     doActionOff@i:
   540                           	opt stack 0
   541  0000D0                     doActionStatus@val:
   542                           	opt stack 0
   543  0000D0                     doActionToggle@bOn:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x1A
   547  0000D0                     	ds	1
   548  0000D1                     ??_doApplicationOneSecondWork:
   549  0000D1                     vscp_writeAppReg@bOn:
   550                           	opt stack 0
   551  0000D1                     doActionOn@i:
   552                           	opt stack 0
   553  0000D1                     doActionStatus@i:
   554                           	opt stack 0
   555  0000D1                     doActionToggle@i:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x1B
   559  0000D1                     	ds	1
   560  0000D2                     ??_doDM:
   561  0000D2                     vscp_writeAppReg@rv:
   562                           	opt stack 0
   563                           
   564                           ; 1 bytes @ 0x1C
   565  0000D2                     	ds	1
   566  0000D3                     vscp_writeAppReg@reg:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x1D
   570  0000D3                     	ds	1
   571  0000D4                     ?_vscp_writeRegister:
   572                           	opt stack 0
   573  0000D4                     doApplicationOneSecondWork@bOn:
   574                           	opt stack 0
   575  0000D4                     vscp_writeRegister@value:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x1E
   579  0000D4                     	ds	1
   580  0000D5                     doApplicationOneSecondWork@ctrlreg:
   581                           	opt stack 0
   582  0000D5                     vscp_writeRegister@reg:
   583                           	opt stack 0
   584  0000D5                     doDM@class_filter:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0x1F
   588  0000D5                     	ds	1
   589  0000D6                     ??_vscp_handleProtocolEvent:
   590  0000D6                     doApplicationOneSecondWork@i:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x20
   594  0000D6                     	ds	1
   595  0000D7                     doDM@class_mask:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x21
   599  0000D7                     	ds	2
   600  0000D9                     doDM@type_filter:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x23
   604  0000D9                     	ds	1
   605  0000DA                     doDM@type_mask:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x24
   609  0000DA                     	ds	1
   610  0000DB                     _doDM$2092:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x25
   614  0000DB                     	ds	1
   615  0000DC                     _doDM$2093:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x26
   619  0000DC                     	ds	1
   620  0000DD                     _doDM$2094:
   621                           	opt stack 0
   622  0000DD                     vscp_handleProtocolEvent@page_save:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x27
   626  0000DD                     	ds	1
   627  0000DE                     _doDM$2095:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x28
   631  0000DE                     	ds	1
   632  0000DF                     _doDM$2096:
   633                           	opt stack 0
   634  0000DF                     vscp_handleProtocolEvent@page_save_1244:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x29
   638  0000DF                     	ds	1
   639  0000E0                     _doDM$2097:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x2A
   643  0000E0                     	ds	1
   644  0000E1                     doDM@dmflags:
   645                           	opt stack 0
   646  0000E1                     vscp_handleProtocolEvent@offset:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x2B
   650  0000E1                     	ds	1
   651  0000E2                     doDM@i:
   652                           	opt stack 0
   653  0000E2                     vscp_handleProtocolEvent@pos:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x2C
   657  0000E2                     	ds	1
   658  0000E3                     vscp_handleProtocolEvent@bytes:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x2D
   662  0000E3                     	ds	1
   663  0000E4                     vscp_handleProtocolEvent@len:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x2E
   667  0000E4                     	ds	1
   668  0000E5                     vscp_handleProtocolEvent@pos_1233:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x2F
   672  0000E5                     	ds	1
   673  0000E6                     vscp_handleProtocolEvent@len_1234:
   674                           	opt stack 0
   675                           
   676                           ; 1 bytes @ 0x30
   677  0000E6                     	ds	1
   678  0000E7                     vscp_handleProtocolEvent@bytes_this_time:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x31
   682  0000E7                     	ds	1
   683  0000E8                     vscp_handleProtocolEvent@cb:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x32
   687  0000E8                     	ds	1
   688  0000E9                     vscp_handleProtocolEvent@i_1243:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x33
   692  0000E9                     	ds	1
   693  0000EA                     vscp_handleProtocolEvent@k:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x34
   697  0000EA                     	ds	1
   698  0000EB                     vscp_handleProtocolEvent@bytes_1240:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x35
   702  0000EB                     	ds	1
   703  0000EC                     vscp_handleProtocolEvent@i_1232:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x36
   707  0000EC                     	ds	1
   708  0000ED                     vscp_handleProtocolEvent@byte:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x37
   712  0000ED                     	ds	1
   713  0000EE                     vscp_handleProtocolEvent@i_1235:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x38
   717  0000EE                     	ds	1
   718  0000EF                     vscp_handleProtocolEvent@i:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x39
   722  0000EF                     	ds	1
   723  0000F0                     vscp_handleProtocolEvent@j:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x3A
   727  0000F0                     	ds	1
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           prodh	equ	0xFF4
   733                           prodl	equ	0xFF3
   734                           intcon	equ	0xFF2
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           indf1	equ	0xFE7
   738                           fsr1h	equ	0xFE2
   739                           fsr1l	equ	0xFE1
   740                           indf2	equ	0xFDF
   741                           postinc2	equ	0xFDE
   742                           postdec2	equ	0xFDD
   743                           plusw2	equ	0xFDB
   744                           fsr2h	equ	0xFDA
   745                           fsr2l	equ	0xFD9
   746                           status	equ	0xFD8
   747                           
   748                           	psect	cstackCOMRAM
   749  000001                     __pcstackCOMRAM:
   750                           	opt stack 0
   751  000001                     ?i1_WriteTimer0:
   752                           	opt stack 0
   753  000001                     i1WriteTimer0@timer0:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x0
   757  000001                     	ds	2
   758  000003                     i1WriteTimer0@timer:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x2
   762  000003                     	ds	2
   763  000005                     ??_interrupt_at_low_vector:
   764                           
   765                           ; 0 bytes @ 0x4
   766  000005                     	ds	3
   767  000008                     ?_WriteTimer0:
   768                           	opt stack 0
   769  000008                     ?_writeEEPROM:
   770                           	opt stack 0
   771  000008                     ?__CANIDToRegs:
   772                           	opt stack 0
   773  000008                     ?__RegsToCANID:
   774                           	opt stack 0
   775  000008                     ??_vscp_getMDF_URL:
   776  000008                     ?_readEEPROM:
   777                           	opt stack 0
   778  000008                     ?___lbmod:
   779                           	opt stack 0
   780  000008                     ?__ECANPointBuffer:
   781                           	opt stack 0
   782  000008                     ?_vscp_getFamilyCode:
   783                           	opt stack 0
   784  000008                     ?_vscp_getFamilyType:
   785                           	opt stack 0
   786  000008                     vscp_getMatrixInfo@i:
   787                           	opt stack 0
   788  000008                     ECANSetOperationMode@mode:
   789                           	opt stack 0
   790  000008                     OpenTimer0@config:
   791                           	opt stack 0
   792  000008                     ___lbmod@divisor:
   793                           	opt stack 0
   794  000008                     __CANIDToRegs@ptr:
   795                           	opt stack 0
   796  000008                     __RegsToCANID@ptr:
   797                           	opt stack 0
   798  000008                     writeEEPROM@address:
   799                           	opt stack 0
   800  000008                     readEEPROM@address:
   801                           	opt stack 0
   802  000008                     WriteTimer0@timer0:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x7
   806  000008                     	ds	1
   807  000009                     vscp_getMDF_URL@idx:
   808                           	opt stack 0
   809  000009                     ___lbmod@dividend:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x8
   813  000009                     	ds	1
   814  00000A                     __RegsToCANID@val:
   815                           	opt stack 0
   816  00000A                     writeEEPROM@data:
   817                           	opt stack 0
   818  00000A                     readEEPROM@data:
   819                           	opt stack 0
   820  00000A                     ___lbmod@counter:
   821                           	opt stack 0
   822  00000A                     WriteTimer0@timer:
   823                           	opt stack 0
   824  00000A                     __CANIDToRegs@val:
   825                           	opt stack 0
   826                           
   827                           ; 4 bytes @ 0x9
   828  00000A                     	ds	1
   829  00000B                     ??_init_app_eeprom:
   830  00000B                     ??_init_app_ram:
   831  00000B                     ?_doActionPulse:
   832                           	opt stack 0
   833  00000B                     ?_doActionDisable:
   834                           	opt stack 0
   835  00000B                     ?_vscp_setGUID:
   836                           	opt stack 0
   837  00000B                     ?_vscp_setManufacturerId:
   838                           	opt stack 0
   839  00000B                     ?_vscp_setUserID:
   840                           	opt stack 0
   841  00000B                     vscp_setGUID@data:
   842                           	opt stack 0
   843  00000B                     vscp_setManufacturerId@data:
   844                           	opt stack 0
   845  00000B                     vscp_writeNicknamePermanent@nickname:
   846                           	opt stack 0
   847  00000B                     vscp_readAppReg@rv:
   848                           	opt stack 0
   849  00000B                     doActionPulse@arg:
   850                           	opt stack 0
   851  00000B                     doActionDisable@arg:
   852                           	opt stack 0
   853  00000B                     vscp_getGUID@idx:
   854                           	opt stack 0
   855  00000B                     vscp_getUserID@idx:
   856                           	opt stack 0
   857  00000B                     vscp_setUserID@data:
   858                           	opt stack 0
   859  00000B                     vscp_getManufacturerId@idx:
   860                           	opt stack 0
   861  00000B                     vscp_setSegmentCRC@crc:
   862                           	opt stack 0
   863  00000B                     vscp_setControlByte@ctrl:
   864                           	opt stack 0
   865  00000B                     vscp_goBootloaderMode@algorithm:
   866                           	opt stack 0
   867  00000B                     __RegsToCANID@type:
   868                           	opt stack 0
   869  00000B                     __ECANPointBuffer@b:
   870                           	opt stack 0
   871  00000B                     ___lbmod@rem:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0xA
   875  00000B                     	ds	1
   876  00000C                     ??_doActionPulse:
   877  00000C                     ??_doActionDisable:
   878  00000C                     ??__RegsToCANID:
   879  00000C                     ??_vscp_readStdReg:
   880  00000C                     vscp_setGUID@idx:
   881                           	opt stack 0
   882  00000C                     vscp_setManufacturerId@idx:
   883                           	opt stack 0
   884  00000C                     vscp_readAppReg@reg:
   885                           	opt stack 0
   886  00000C                     vscp_setUserID@idx:
   887                           	opt stack 0
   888  00000C                     vscp_handleDropNickname@bytes:
   889                           	opt stack 0
   890  00000C                     __ECANPointBuffer@pt:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0xB
   894  00000C                     	ds	1
   895  00000D                     init_app_ram@i:
   896                           	opt stack 0
   897  00000D                     init_app_eeprom@i:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0xC
   901  00000D                     	ds	1
   902  00000E                     init_app_eeprom@j:
   903                           	opt stack 0
   904  00000E                     doActionDisable@dmflags:
   905                           	opt stack 0
   906  00000E                     __CANIDToRegs@type:
   907                           	opt stack 0
   908  00000E                     __RegsToCANID@Value:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0xD
   912  00000E                     	ds	1
   913  00000F                     ??__CANIDToRegs:
   914  00000F                     ?_ECANReceiveMessage:
   915                           	opt stack 0
   916  00000F                     ?_vscp_writeStdReg:
   917                           	opt stack 0
   918  00000F                     doActionPulse@dmflags:
   919                           	opt stack 0
   920  00000F                     doActionDisable@val:
   921                           	opt stack 0
   922  00000F                     ECANReceiveMessage@data:
   923                           	opt stack 0
   924  00000F                     vscp_writeStdReg@value:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0xE
   928  00000F                     	ds	1
   929  000010                     ??_vscp_writeStdReg:
   930  000010                     doActionPulse@val:
   931                           	opt stack 0
   932  000010                     doActionDisable@i:
   933                           	opt stack 0
   934  000010                     ECANReceiveMessage@dataLen:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0xF
   938  000010                     	ds	1
   939  000011                     doActionPulse@i:
   940                           	opt stack 0
   941  000011                     ECANReceiveMessage@msgFlags:
   942                           	opt stack 0
   943  000011                     __CANIDToRegs@Value:
   944                           	opt stack 0
   945  000011                     vscp_readStdReg@code:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x10
   949  000011                     	ds	1
   950  000012                     ??_calculateSetFilterMask:
   951  000012                     ?_ECANSendMessage:
   952                           	opt stack 0
   953  000012                     ECANReceiveMessage@savedPtr:
   954                           	opt stack 0
   955  000012                     ECANSendMessage@id:
   956                           	opt stack 0
   957                           
   958                           ; 4 bytes @ 0x11
   959  000012                     	ds	2
   960  000014                     ECANReceiveMessage@id:
   961                           	opt stack 0
   962  000014                     vscp_writeStdReg@rv:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x13
   966  000014                     	ds	1
   967  000015                     ECANReceiveMessage@i:
   968                           	opt stack 0
   969  000015                     vscp_writeStdReg@reg:
   970                           	opt stack 0
   971  000015                     vscp_readStdReg@code_1217:
   972                           	opt stack 0
   973                           
   974                           ; 4 bytes @ 0x14
   975  000015                     	ds	1
   976  000016                     ECANReceiveMessage@mode:
   977                           	opt stack 0
   978  000016                     ECANSendMessage@data:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x15
   982  000016                     	ds	1
   983  000017                     ECANReceiveMessage@temp:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x16
   987  000017                     	ds	1
   988  000018                     ECANSendMessage@dataLen:
   989                           	opt stack 0
   990  000018                     ECANReceiveMessage@ptr:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x17
   994  000018                     	ds	1
   995  000019                     ECANSendMessage@msgFlags:
   996                           	opt stack 0
   997  000019                     vscp_readStdReg@idx:
   998                           	opt stack 0
   999                           
  1000                           ; 1 bytes @ 0x18
  1001  000019                     	ds	1
  1002  00001A                     ??_ECANSendMessage:
  1003  00001A                     ?_getCANFrame:
  1004                           	opt stack 0
  1005  00001A                     getCANFrame@pdlc:
  1006                           	opt stack 0
  1007  00001A                     vscp_readStdReg@idx_1218:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x19
  1011  00001A                     	ds	1
  1012  00001B                     getCANFrame@pdata:
  1013                           	opt stack 0
  1014  00001B                     vscp_readStdReg@rv:
  1015                           	opt stack 0
  1016  00001B                     ECANSendMessage@pb:
  1017                           	opt stack 0
  1018                           
  1019                           ; 18 bytes @ 0x1A
  1020  00001B                     	ds	1
  1021  00001C                     getCANFrame@pid:
  1022                           	opt stack 0
  1023  00001C                     vscp_readStdReg@reg:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x1B
  1027  00001C                     	ds	1
  1028  00001D                     getCANFrame@flags:
  1029                           	opt stack 0
  1030  00001D                     vscp_readRegister@reg:
  1031                           	opt stack 0
  1032                           
  1033                           ; 1 bytes @ 0x1C
  1034  00001D                     	ds	1
  1035  00001E                     ?_getVSCPFrame:
  1036                           	opt stack 0
  1037  00001E                     getVSCPFrame@pvscptype:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x1D
  1041  00001E                     	ds	1
  1042  00001F                     getVSCPFrame@pNodeId:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x1E
  1046  00001F                     	ds	1
  1047  000020                     getVSCPFrame@pPriority:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x1F
  1051  000020                     	ds	1
  1052  000021                     getVSCPFrame@pSize:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x20
  1056  000021                     	ds	1
  1057  000022                     getVSCPFrame@pData:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x21
  1061  000022                     	ds	1
  1062  000023                     ??_getVSCPFrame:
  1063                           
  1064                           ; 0 bytes @ 0x22
  1065  000023                     	ds	4
  1066  000027                     getVSCPFrame@pvscpclass:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x26
  1070  000027                     	ds	1
  1071  000028                     getVSCPFrame@id:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x27
  1075  000028                     	ds	4
  1076  00002C                     vscp_getEvent@rv:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x2B
  1080  00002C                     	ds	1
  1081  00002D                     ECANSendMessage@mode:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x2C
  1085  00002D                     	ds	1
  1086  00002E                     ECANSendMessage@buffers:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x2D
  1090  00002E                     	ds	1
  1091  00002F                     ECANSendMessage@j:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x2E
  1095  00002F                     	ds	1
  1096  000030                     ECANSendMessage@tempBSEL0:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x2F
  1100  000030                     	ds	1
  1101  000031                     ECANSendMessage@tempPtr:
  1102                           	opt stack 0
  1103  000031                     calculateSetFilterMask@rowmask:
  1104                           	opt stack 0
  1105                           
  1106                           ; 4 bytes @ 0x30
  1107  000031                     	ds	2
  1108  000033                     ECANSendMessage@temp:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x32
  1112  000033                     	ds	1
  1113  000034                     ECANSendMessage@i:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x33
  1117  000034                     	ds	1
  1118  000035                     calculateSetFilterMask@lastOID:
  1119                           	opt stack 0
  1120  000035                     ECANSendMessage@ptr:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x34
  1124  000035                     	ds	1
  1125  000036                     calculateSetFilterMask@mask:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x35
  1129  000036                     	ds	1
  1130  000037                     ?_sendCANFrame:
  1131                           	opt stack 0
  1132  000037                     sendCANFrame@id:
  1133                           	opt stack 0
  1134                           
  1135                           ; 4 bytes @ 0x36
  1136  000037                     	ds	3
  1137  00003A                     calculateSetFilterMask@filter:
  1138                           	opt stack 0
  1139                           
  1140                           ; 4 bytes @ 0x39
  1141  00003A                     	ds	1
  1142  00003B                     sendCANFrame@dlc:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x3A
  1146  00003B                     	ds	1
  1147  00003C                     sendCANFrame@pdata:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x3B
  1151  00003C                     	ds	2
  1152  00003E                     sendCANFrame@rv:
  1153                           	opt stack 0
  1154  00003E                     calculateSetFilterMask@rowfilter:
  1155                           	opt stack 0
  1156                           
  1157                           ; 4 bytes @ 0x3D
  1158  00003E                     	ds	1
  1159  00003F                     ?_sendVSCPFrame:
  1160                           	opt stack 0
  1161  00003F                     sendVSCPFrame@vscpclass:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x3E
  1165  00003F                     	ds	2
  1166  000041                     sendVSCPFrame@vscptype:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x40
  1170  000041                     	ds	1
  1171  000042                     sendVSCPFrame@nodeid:
  1172                           	opt stack 0
  1173  000042                     calculateSetFilterMask@j:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x41
  1177  000042                     	ds	1
  1178  000043                     sendVSCPFrame@priority:
  1179                           	opt stack 0
  1180  000043                     calculateSetFilterMask@i:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x42
  1184  000043                     	ds	1
  1185  000044                     sendVSCPFrame@size:
  1186                           	opt stack 0
  1187                           
  1188                           ; 1 bytes @ 0x43
  1189  000044                     	ds	1
  1190  000045                     sendVSCPFrame@pData:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x44
  1194  000045                     	ds	2
  1195  000047                     sendVSCPFrame@id:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x46
  1199  000047                     	ds	4
  1200  00004B                     ??_SendInformationEvent:
  1201  00004B                     
  1202                           ; 0 bytes @ 0x4A
  1203  00004B                     	ds	1
  1204  00004C                     ??_vscp_newNodeOnline:
  1205  00004C                     vscp_sendHeartBeat@zone:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x4B
  1209  00004C                     	ds	1
  1210  00004D                     ??_vscp_doOneSecondWork:
  1211  00004D                     SendInformationEvent@data:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0x4C
  1215  00004D                     	ds	3
  1216  000050                     SendInformationEvent@idx:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0x4F
  1220  000050                     	ds	1
  1221  000051                     ?_doActionOff:
  1222                           	opt stack 0
  1223  000051                     ?_doActionOn:
  1224                           	opt stack 0
  1225  000051                     ?_doActionStatus:
  1226                           	opt stack 0
  1227  000051                     ?_doActionToggle:
  1228                           	opt stack 0
  1229  000051                     ?_vscp_writeAppReg:
  1230                           	opt stack 0
  1231  000051                     vscp_writeAppReg@val:
  1232                           	opt stack 0
  1233  000051                     doActionOn@arg:
  1234                           	opt stack 0
  1235  000051                     doActionOff@arg:
  1236                           	opt stack 0
  1237  000051                     doActionStatus@arg:
  1238                           	opt stack 0
  1239  000051                     doActionToggle@arg:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x50
  1243  000051                     	ds	1
  1244  000052                     tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           prodh	equ	0xFF4
  1249                           prodl	equ	0xFF3
  1250                           intcon	equ	0xFF2
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           indf1	equ	0xFE7
  1254                           fsr1h	equ	0xFE2
  1255                           fsr1l	equ	0xFE1
  1256                           indf2	equ	0xFDF
  1257                           postinc2	equ	0xFDE
  1258                           postdec2	equ	0xFDD
  1259                           plusw2	equ	0xFDB
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           status	equ	0xFD8
  1263                           
  1264                           ; 0 bytes @ 0x51
  1265 ;;
  1266 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1267 ;;
  1268 ;; *************** function _main *****************
  1269 ;; Defined at:
  1270 ;;		line 211 in file "../main.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;		None
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;		None               void
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : F/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1288 ;;Total ram usage:        0 bytes
  1289 ;; Hardware stack levels required when called:   10
  1290 ;; This function calls:
  1291 ;;		_init
  1292 ;;		_vscp_check_pstorage
  1293 ;;		_init_app_eeprom
  1294 ;;		_init_app_ram
  1295 ;;		_vscp_init
  1296 ;;		_writeEEPROM
  1297 ;;		_vscp_getEvent
  1298 ;;		_vscp_goActiveState
  1299 ;;		_vscp_handleProbeState
  1300 ;;		_vscp_handleProtocolEvent
  1301 ;;		_doDM
  1302 ;;		_vscp_error
  1303 ;;		_vscp_doOneSecondWork
  1304 ;;		_doApplicationOneSecondWork
  1305 ;;		_doWork
  1306 ;; This function is called by:
  1307 ;;		Startup code after reset
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           	psect	text0
  1312  0038F8                     __ptext0:
  1313                           	opt stack 0
  1314  0038F8                     _main:
  1315                           	opt stack 20
  1316                           
  1317                           ;main.c: 212: init();
  1318                           
  1319                           ;incstack = 0
  1320                           ;incstack = 0
  1321  0038F8  EC2A  F020         	call	_init	;wreg free
  1322                           
  1323                           ;main.c: 216: if ( !vscp_check_pstorage() ) {
  1324  0038FC  EC0F  F021         	call	_vscp_check_pstorage	;wreg free
  1325  003900  0900               	iorlw	0
  1326  003902  E104               	bnz	l9197
  1327                           
  1328                           ;main.c: 219: init_app_eeprom();
  1329  003904  EC8D  F010         	call	_init_app_eeprom	;wreg free
  1330                           
  1331                           ;main.c: 220: init_app_ram();
  1332  003908  ECF9  F01B         	call	_init_app_ram	;wreg free
  1333  00390C                     l9197:
  1334                           
  1335                           ;main.c: 223: }
  1336                           ;main.c: 225: vscp_init();
  1337  00390C  ECB0  F01F         	call	_vscp_init	;wreg free
  1338  003910                     l149:
  1339                           
  1340                           ; BSR set to: 0
  1341  003910  0004               	clrwdt		;# 
  1342                           
  1343                           ;main.c: 231: if ( ( vscp_initbtncnt > 250 ) &&
  1344                           ;main.c: 232: ( 0x01 != vscp_node_state ) ) {
  1345  003912  0EFA               	movlw	250
  1346  003914  0100               	movlb	0	; () banked
  1347  003916  6594               	cpfsgt	_vscp_initbtncnt& (0+255),b	;volatile
  1348  003918  D00C               	goto	l9207
  1349                           
  1350                           ; BSR set to: 0
  1351  00391A  0597               	decf	_vscp_node_state& (0+255),w,b
  1352  00391C  E00A               	bz	l9207
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 235: vscp_nickname = 0xff;
  1356  00391E  6996               	setf	_vscp_nickname& (0+255),b
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;main.c: 236: writeEEPROM( 0x01, 0xff );
  1360  003920  6A09               	clrf	?_writeEEPROM+1,c
  1361  003922  0E01               	movlw	1
  1362  003924  6E08               	movwf	?_writeEEPROM,c
  1363  003926  0EFF               	movlw	255
  1364  003928  680A               	setf	?_writeEEPROM+2,c
  1365  00392A  ECBA  F020         	call	_writeEEPROM	;wreg free
  1366                           
  1367                           ;main.c: 237: vscp_init();
  1368  00392E  ECB0  F01F         	call	_vscp_init	;wreg free
  1369  003932                     l9207:
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 239: }
  1373                           ;main.c: 242: vscp_imsg.flags = 0;
  1374  003932  6B9B               	clrf	_vscp_imsg& (0+255),b
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;main.c: 243: vscp_getEvent();
  1378  003934  EC42  F020         	call	_vscp_getEvent	;wreg free
  1379                           
  1380                           ;main.c: 245: switch ( vscp_node_state ) {
  1381  003938  D01C               	goto	l9231
  1382  00393A                     l9211:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 250: if (0xff == vscp_nickname) {
  1386  00393A  2996               	incf	_vscp_nickname& (0+255),w,b
  1387  00393C  E103               	bnz	l9215
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 252: vscp_node_state = 0x01;
  1391  00393E  0E01               	movlw	1
  1392  003940  6F97               	movwf	_vscp_node_state& (0+255),b
  1393                           
  1394                           ;main.c: 253: } else {
  1395  003942  D023               	goto	l9233
  1396  003944                     l9215:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 255: vscp_node_state = 0x03;
  1400  003944  0E03               	movlw	3
  1401  003946  6F97               	movwf	_vscp_node_state& (0+255),b
  1402  003948                     l9217:
  1403                           
  1404                           ; BSR set to: 0
  1405                           ;main.c: 256: vscp_goActiveState();
  1406  003948  EC3D  F021         	call	_vscp_goActiveState	;wreg free
  1407  00394C  D01E               	goto	l9233
  1408  00394E                     l9219:
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;main.c: 261: vscp_handleProbeState();
  1412  00394E  EC49  F01D         	call	_vscp_handleProbeState	;wreg free
  1413                           
  1414                           ;main.c: 262: break;
  1415  003952  D01B               	goto	l9233
  1416  003954                     l158:
  1417                           
  1418                           ; BSR set to: 0
  1419                           ;main.c: 271: if (vscp_imsg.flags & 0x80) {
  1420  003954  AF9B               	btfss	_vscp_imsg& (0+255),7,b
  1421  003956  D019               	goto	l9233
  1422                           
  1423                           ; BSR set to: 0
  1424                           ;main.c: 273: if ( 0 == vscp_imsg.vscp_class ) {
  1425  003958  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
  1426  00395A  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  1427  00395C  B4D8               	btfsc	status,2,c
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;main.c: 276: vscp_handleProtocolEvent();
  1431  00395E  ECC8  F00B         	call	_vscp_handleProtocolEvent	;wreg free
  1432                           
  1433                           ;main.c: 278: }
  1434                           ;main.c: 280: doDM();
  1435  003962  ECC9  F014         	call	_doDM	;wreg free
  1436  003966  D011               	goto	l9233
  1437  003968                     l9227:
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 286: vscp_error();
  1441  003968  EC0F  F022         	call	_vscp_error	;wreg free
  1442                           
  1443                           ;main.c: 287: break;
  1444  00396C  D00E               	goto	l9233
  1445  00396E                     l162:
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;main.c: 290: vscp_node_state = 0x00;
  1449  00396E  6B97               	clrf	_vscp_node_state& (0+255),b
  1450                           
  1451                           ;main.c: 291: break;
  1452  003970  D00C               	goto	l9233
  1453  003972                     l9231:
  1454  003972  0100               	movlb	0	; () banked
  1455  003974  5197               	movf	_vscp_node_state& (0+255),w,b
  1456                           
  1457                           ; Switch size 1, requested type "space"
  1458                           ; Number of cases is 5, Range of values is 0 to 4
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte           16     9 (average)
  1462                           ;	Chosen strategy is simple_byte
  1463  003976  E0E1               	bz	l9211
  1464  003978  0A01               	xorlw	1	; case 1
  1465  00397A  E0E9               	bz	l9219
  1466  00397C  0A03               	xorlw	3	; case 2
  1467  00397E  E0E4               	bz	l9217
  1468  003980  0A01               	xorlw	1	; case 3
  1469  003982  E0E8               	bz	l158
  1470  003984  0A07               	xorlw	7	; case 4
  1471  003986  E0F0               	bz	l9227
  1472  003988  D7F2               	goto	l162
  1473  00398A                     l9233:
  1474                           
  1475                           ;main.c: 296: if ( measurement_clock > 1000 ) {
  1476  00398A  0EE9               	movlw	233
  1477  00398C  0100               	movlb	0	; () banked
  1478  00398E  5D80               	subwf	_measurement_clock& (0+255),w,b	;volatile
  1479  003990  0E03               	movlw	3
  1480  003992  5981               	subwfb	(_measurement_clock+1)& (0+255),w,b	;volatile
  1481  003994  0E00               	movlw	0
  1482  003996  5982               	subwfb	(_measurement_clock+2)& (0+255),w,b	;volatile
  1483  003998  0E00               	movlw	0
  1484  00399A  5983               	subwfb	(_measurement_clock+3)& (0+255),w,b	;volatile
  1485  00399C  E30C               	bnc	l9245
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;main.c: 298: measurement_clock = 0;
  1489  00399E  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
  1490  0039A0  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
  1491  0039A2  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
  1492  0039A4  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;main.c: 300: sendTimer++;
  1496  0039A6  2A55               	incf	_sendTimer,f,c
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 303: vscp_doOneSecondWork();
  1500  0039A8  EC88  F01F         	call	_vscp_doOneSecondWork	;wreg free
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;main.c: 307: if ( 0x03 == vscp_node_state ) {
  1504  0039AC  5197               	movf	_vscp_node_state& (0+255),w,b
  1505  0039AE  0A03               	xorlw	3
  1506  0039B0  B4D8               	btfsc	status,2,c
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;main.c: 310: doApplicationOneSecondWork();
  1510  0039B2  EC48  F012         	call	_doApplicationOneSecondWork	;wreg free
  1511  0039B6                     l9245:
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 312: }
  1515                           ;main.c: 314: }
  1516                           ;main.c: 317: if ( seconds > 59 ) {
  1517  0039B6  0E3B               	movlw	59
  1518  0039B8  6590               	cpfsgt	_seconds& (0+255),b
  1519  0039BA  D00B               	goto	l9261
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;main.c: 319: seconds = 0;
  1523  0039BC  6B90               	clrf	_seconds& (0+255),b
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;main.c: 320: minutes++;
  1527  0039BE  2B8E               	incf	_minutes& (0+255),f,b
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;main.c: 322: if ( minutes > 59 ) {
  1531  0039C0  0E3B               	movlw	59
  1532  0039C2  658E               	cpfsgt	_minutes& (0+255),b
  1533  0039C4  D002               	goto	l9257
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 323: minutes = 0;
  1537  0039C6  6B8E               	clrf	_minutes& (0+255),b
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;main.c: 324: hours++;
  1541  0039C8  2B8D               	incf	_hours& (0+255),f,b
  1542  0039CA                     l9257:
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;main.c: 325: }
  1546                           ;main.c: 327: if ( hours > 23 ) hours = 0;
  1547  0039CA  0E17               	movlw	23
  1548  0039CC  658D               	cpfsgt	_hours& (0+255),b
  1549  0039CE  D001               	goto	l9261
  1550                           
  1551                           ; BSR set to: 0
  1552  0039D0  6B8D               	clrf	_hours& (0+255),b
  1553  0039D2                     l9261:
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 329: }
  1557                           ;main.c: 331: doWork();
  1558  0039D2  EC11  F022         	call	_doWork	;wreg free
  1559  0039D6  D79C               	goto	l149
  1560  0039D8                     __end_of_main:
  1561                           	opt stack 0
  1562                           tblptru	equ	0xFF8
  1563                           tblptrh	equ	0xFF7
  1564                           tblptrl	equ	0xFF6
  1565                           tablat	equ	0xFF5
  1566                           prodh	equ	0xFF4
  1567                           prodl	equ	0xFF3
  1568                           intcon	equ	0xFF2
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           indf1	equ	0xFE7
  1572                           fsr1h	equ	0xFE2
  1573                           fsr1l	equ	0xFE1
  1574                           indf2	equ	0xFDF
  1575                           postinc2	equ	0xFDE
  1576                           postdec2	equ	0xFDD
  1577                           plusw2	equ	0xFDB
  1578                           fsr2h	equ	0xFDA
  1579                           fsr2l	equ	0xFD9
  1580                           status	equ	0xFD8
  1581                           
  1582 ;; *************** function _doWork *****************
  1583 ;; Defined at:
  1584 ;;		line 899 in file "../main.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;		None               void
  1591 ;; Registers used:
  1592 ;;		wreg, status,2, status,0
  1593 ;; Tracked objects:
  1594 ;;		On entry : F/0
  1595 ;;		On exit  : F/0
  1596 ;;		Unchanged: F/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1602 ;;Total ram usage:        0 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    2
  1605 ;; This function calls:
  1606 ;;		Nothing
  1607 ;; This function is called by:
  1608 ;;		_main
  1609 ;; This function uses a non-reentrant model
  1610 ;;
  1611                           
  1612                           	psect	text1
  1613  004422                     __ptext1:
  1614                           	opt stack 0
  1615  004422                     _doWork:
  1616                           	opt stack 27
  1617                           
  1618                           ; BSR set to: 0
  1619                           
  1620                           ; BSR set to: 0
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;incstack = 0
  1624                           ;incstack = 0
  1625  004422  0012               	return	
  1626  004424                     __end_of_doWork:
  1627                           	opt stack 0
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           prodh	equ	0xFF4
  1633                           prodl	equ	0xFF3
  1634                           intcon	equ	0xFF2
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           indf1	equ	0xFE7
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           indf2	equ	0xFDF
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           plusw2	equ	0xFDB
  1644                           fsr2h	equ	0xFDA
  1645                           fsr2l	equ	0xFD9
  1646                           status	equ	0xFD8
  1647                           
  1648 ;; *************** function _doApplicationOneSecondWork *****************
  1649 ;; Defined at:
  1650 ;;		line 604 in file "../main.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;  i               1   32[BANK0 ] unsigned char 
  1655 ;;  ctrlreg         1   31[BANK0 ] unsigned char 
  1656 ;;  bOn             1   30[BANK0 ] enum E18242
  1657 ;; Return value:  Size  Location     Type
  1658 ;;		None               void
  1659 ;; Registers used:
  1660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : F/0
  1663 ;;		On exit  : F/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1668 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1669 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1670 ;;Total ram usage:        6 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    8
  1673 ;; This function calls:
  1674 ;;		_readEEPROM
  1675 ;;		_doActionOff
  1676 ;;		_SendInformationEvent
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681                           
  1682                           	psect	text2
  1683  002490                     __ptext2:
  1684                           	opt stack 0
  1685  002490                     _doApplicationOneSecondWork:
  1686                           	opt stack 21
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 606: uint8_t i;
  1690                           ;main.c: 607: uint8_t ctrlreg;
  1691                           ;main.c: 608: BOOL bOn = 0;
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;incstack = 0
  1695                           ;incstack = 0
  1696  002490  6BD4               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1697                           
  1698                           ;main.c: 610: for ( i = 0; i < 8; i++ ) {
  1699  002492  6BD6               	clrf	doApplicationOneSecondWork@i& (0+255),b
  1700  002494                     l9759:
  1701                           
  1702                           ; BSR set to: 0
  1703  002494  0E07               	movlw	7
  1704  002496  65D6               	cpfsgt	doApplicationOneSecondWork@i& (0+255),b
  1705  002498  D001               	goto	l9763
  1706  00249A  0C07               	retlw	7
  1707  00249C                     l9763:
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 613: ctrlreg = readEEPROM( 0x43 + 10 + i );
  1711  00249C  D92C               	call	PL32	;call to abstracted procedure
  1712  00249E  ECDB  F021         	call	_readEEPROM	;wreg free
  1713  0024A2  0100               	movlb	0	; () banked
  1714  0024A4  6FD5               	movwf	doApplicationOneSecondWork@ctrlreg& (0+255),b
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 616: if ( !( ctrlreg & 0x80 ) ) continue;
  1718  0024A6  AFD5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),7,b
  1719  0024A8  D116               	goto	l9847
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 620: if ( relay_protection_timer[ i ] ) {
  1723                           
  1724                           ; BSR set to: 0
  1725  0024AA  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1726  0024AC  0D02               	mullw	2
  1727  0024AE  50F3               	movf	prodl,w,c
  1728  0024B0  0F60               	addlw	low _relay_protection_timer
  1729  0024B2  6ED9               	movwf	fsr2l,c
  1730  0024B4  6ADA               	clrf	fsr2h,c
  1731  0024B6  50DE               	movf	postinc2,w,c
  1732  0024B8  10DD               	iorwf	postdec2,w,c
  1733  0024BA  E028               	bz	l9781
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 622: relay_protection_timer[ i ]--;
  1737  0024BC  D915               	call	PL24	;call to abstracted procedure
  1738  0024BE  06DE               	decf	postinc2,f,c
  1739  0024C0  0E00               	movlw	0
  1740  0024C2  5ADD               	subwfb	postdec2,f,c
  1741                           
  1742                           ;main.c: 625: if ( !relay_protection_timer[ i ] &&
  1743                           ;main.c: 626: ( readEEPROM( 0x43 + 10 + i ) &
  1744                           ;main.c: 627: 0x04 ) ) {
  1745  0024C4  D911               	call	PL24	;call to abstracted procedure
  1746  0024C6  50DE               	movf	postinc2,w,c
  1747  0024C8  10DD               	iorwf	postdec2,w,c
  1748  0024CA  E13C               	bnz	l9783
  1749                           
  1750                           ; BSR set to: 0
  1751  0024CC  D914               	call	PL32	;call to abstracted procedure
  1752  0024CE  ECDB  F021         	call	_readEEPROM	;wreg free
  1753  0024D2  0100               	movlb	0	; () banked
  1754  0024D4  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  1755  0024D6  A5D1               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  1756  0024D8  D035               	goto	l9783
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;main.c: 630: doActionOff( 0, (1 << i) );
  1760  0024DA  C0D6  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1761  0024DE  0E01               	movlw	1
  1762  0024E0  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1763  0024E2  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1764  0024E4  D002               	goto	u12174
  1765  0024E6                     u12175:
  1766  0024E6  90D8               	bcf	status,0,c
  1767  0024E8  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1768  0024EA                     u12174:
  1769  0024EA  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1770  0024EC  D7FC               	goto	u12175
  1771  0024EE  51D2               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1772  0024F0  6E51               	movwf	?_doActionOff,c
  1773  0024F2  0E00               	movlw	0
  1774  0024F4  ECEC  F01C         	call	_doActionOff
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;main.c: 633: if ( ctrlreg & 0x02 ) {
  1778  0024F8  A3D5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),1,b
  1779  0024FA  D024               	goto	l9783
  1780                           
  1781                           ; BSR set to: 0
  1782                           ;main.c: 634: SendInformationEvent( i, 1,
  1783                           ;main.c: 635: 2 );
  1784  0024FC  0E01               	movlw	1
  1785  0024FE  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  1786  002500  0E02               	movlw	2
  1787  002502  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  1788  002504  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1789  002506  EC52  F01F         	call	_SendInformationEvent
  1790  00250A  D01C               	goto	l9783
  1791  00250C                     l9781:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 640: else {
  1795                           ;main.c: 642: relay_protection_timer[ i ] =
  1796                           ;main.c: 643: readEEPROM(0x43 + 34 + i ) * 256 +
  1797                           ;main.c: 644: readEEPROM(0x43 + 35 + i );
  1798  00250C  0E65               	movlw	101
  1799  00250E  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1800  002510  6E08               	movwf	?_readEEPROM,c
  1801  002512  6A09               	clrf	?_readEEPROM+1,c
  1802  002514  0E00               	movlw	0
  1803  002516  2209               	addwfc	?_readEEPROM+1,f,c
  1804  002518  ECDB  F021         	call	_readEEPROM	;wreg free
  1805  00251C  0100               	movlb	0	; () banked
  1806  00251E  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1807  002520  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  1808  002522  0E66               	movlw	102
  1809  002524  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  1810  002526  6E08               	movwf	?_readEEPROM,c
  1811  002528  6A09               	clrf	?_readEEPROM+1,c
  1812  00252A  0E00               	movlw	0
  1813  00252C  2209               	addwfc	?_readEEPROM+1,f,c
  1814  00252E  ECDB  F021         	call	_readEEPROM	;wreg free
  1815  002532  0100               	movlb	0	; () banked
  1816  002534  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  1817  002536  0E00               	movlw	0
  1818  002538  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1819  00253A  D8D6               	call	PL24	;call to abstracted procedure
  1820  00253C  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  1821  002540  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  1822  002544                     l9783:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 645: }
  1826                           ;main.c: 648: if ( relay_pulse_flags & (1 << i) ) {
  1827  002544  C0D6  F0D1         	movff	doApplicationOneSecondWork@i,??_doApplicationOneSecondWork
  1828  002548  0E01               	movlw	1
  1829  00254A  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  1830  00254C  2BD1               	incf	??_doApplicationOneSecondWork& (0+255),f,b
  1831  00254E  D002               	goto	u12194
  1832  002550                     u12195:
  1833  002550  90D8               	bcf	status,0,c
  1834  002552  37D2               	rlcf	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  1835  002554                     u12194:
  1836  002554  2FD1               	decfsz	??_doApplicationOneSecondWork& (0+255),f,b
  1837  002556  D7FC               	goto	u12195
  1838  002558  51D2               	movf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  1839  00255A  158F               	andwf	_relay_pulse_flags& (0+255),w,b
  1840  00255C  E101 D0BB          	bz	l9847
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;main.c: 650: if ( relay_pulse_timer[ i ] ) {
  1844  002560  D8BC               	call	PL22	;call to abstracted procedure
  1845  002562  50DE               	movf	postinc2,w,c
  1846  002564  10DD               	iorwf	postdec2,w,c
  1847  002566  E101 D0A5          	bz	l9845
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 652: relay_pulse_timer[ i ]--;
  1851  00256A  D8B7               	call	PL22	;call to abstracted procedure
  1852  00256C  06DE               	decf	postinc2,f,c
  1853  00256E  0E00               	movlw	0
  1854  002570  5ADD               	subwfb	postdec2,f,c
  1855                           
  1856                           ;main.c: 655: if ( !relay_pulse_timer[ i ] ) {
  1857  002572  D8B3               	call	PL22	;call to abstracted procedure
  1858  002574  50DE               	movf	postinc2,w,c
  1859  002576  10DD               	iorwf	postdec2,w,c
  1860  002578  E02E               	bz	l9821
  1861  00257A  D0AD               	goto	l9847
  1862  00257C                     l204:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;main.c: 660: if ( LATBbits.LATB4 ) {
  1866  00257C  A88A               	btfss	3978,4,c	;volatile
  1867  00257E  D002               	goto	l205
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 661: LATBbits.LATB4 = 0;
  1871  002580  988A               	bcf	3978,4,c	;volatile
  1872  002582  D025               	goto	L6
  1873  002584                     l205:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;main.c: 664: LATBbits.LATB4 = 1;
  1877  002584  888A               	bsf	3978,4,c	;volatile
  1878  002586                     l9793:
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;main.c: 665: bOn = 1;
  1882  002586  0E01               	movlw	1
  1883  002588  6FD4               	movwf	doApplicationOneSecondWork@bOn& (0+255),b
  1884  00258A  D033               	goto	l9823
  1885  00258C                     l208:
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 670: if ( LATBbits.LATB1 ) {
  1889  00258C  A28A               	btfss	3978,1,c	;volatile
  1890  00258E  D002               	goto	l209
  1891                           
  1892                           ; BSR set to: 0
  1893                           ;main.c: 671: LATBbits.LATB1 = 0;
  1894  002590  928A               	bcf	3978,1,c	;volatile
  1895  002592  D01D               	goto	L6
  1896  002594                     l209:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 674: LATBbits.LATB1 = 1;
  1900  002594  828A               	bsf	3978,1,c	;volatile
  1901  002596  D7F7               	goto	l9793
  1902  002598                     l211:
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 680: if ( LATBbits.LATB0 ) {
  1906  002598  A08A               	btfss	3978,0,c	;volatile
  1907  00259A  D002               	goto	l212
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;main.c: 681: LATBbits.LATB0 = 0;
  1911  00259C  908A               	bcf	3978,0,c	;volatile
  1912  00259E  D017               	goto	L6
  1913  0025A0                     l212:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;main.c: 684: LATBbits.LATB0 = 1;
  1917  0025A0  808A               	bsf	3978,0,c	;volatile
  1918  0025A2  D7F1               	goto	l9793
  1919  0025A4                     l214:
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;main.c: 690: if ( LATCbits.LATC7 ) {
  1923  0025A4  AE8B               	btfss	3979,7,c	;volatile
  1924  0025A6  D002               	goto	l215
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;main.c: 691: LATCbits.LATC7 = 0;
  1928  0025A8  9E8B               	bcf	3979,7,c	;volatile
  1929  0025AA  D011               	goto	L6
  1930  0025AC                     l215:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;main.c: 694: LATCbits.LATC7 = 1;
  1934  0025AC  8E8B               	bsf	3979,7,c	;volatile
  1935  0025AE  D7EB               	goto	l9793
  1936  0025B0                     l217:
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;main.c: 700: if ( LATCbits.LATC6 ) {
  1940  0025B0  AC8B               	btfss	3979,6,c	;volatile
  1941  0025B2  D002               	goto	l218
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 701: LATCbits.LATC6 = 0;
  1945  0025B4  9C8B               	bcf	3979,6,c	;volatile
  1946  0025B6  D00B               	goto	L6
  1947  0025B8                     l218:
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;main.c: 704: LATCbits.LATC6 = 1;
  1951  0025B8  8C8B               	bsf	3979,6,c	;volatile
  1952  0025BA  D7E5               	goto	l9793
  1953  0025BC                     l220:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;main.c: 710: if ( LATCbits.LATC5 ) {
  1957  0025BC  AA8B               	btfss	3979,5,c	;volatile
  1958  0025BE  D002               	goto	l221
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 711: LATCbits.LATC5 = 0;
  1962  0025C0  9A8B               	bcf	3979,5,c	;volatile
  1963  0025C2  D005               	goto	L6
  1964  0025C4                     l221:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;main.c: 714: LATCbits.LATC5 = 1;
  1968  0025C4  8A8B               	bsf	3979,5,c	;volatile
  1969  0025C6  D7DF               	goto	l9793
  1970  0025C8                     l223:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;main.c: 720: if ( LATCbits.LATC4 ) {
  1974  0025C8  A88B               	btfss	3979,4,c	;volatile
  1975  0025CA  D003               	goto	l224
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 721: LATCbits.LATC4 = 0;
  1979  0025CC  988B               	bcf	3979,4,c	;volatile
  1980  0025CE                     L6:
  1981                           
  1982                           ;main.c: 722: bOn = 0;
  1983  0025CE  6BD4               	clrf	doApplicationOneSecondWork@bOn& (0+255),b
  1984                           
  1985                           ;main.c: 723: } else {
  1986  0025D0  D010               	goto	l9823
  1987  0025D2                     l224:
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 724: LATCbits.LATC4 = 1;
  1991  0025D2  888B               	bsf	3979,4,c	;volatile
  1992  0025D4  D7D8               	goto	l9793
  1993  0025D6                     l9821:
  1994                           
  1995                           ; BSR set to: 0
  1996  0025D6  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  1997                           
  1998                           ; Switch size 1, requested type "space"
  1999                           ; Number of cases is 7, Range of values is 0 to 6
  2000                           ; switch strategies available:
  2001                           ; Name         Instructions Cycles
  2002                           ; simple_byte           22    12 (average)
  2003                           ;	Chosen strategy is simple_byte
  2004  0025D8  E0D1               	bz	l204
  2005  0025DA  0A01               	xorlw	1	; case 1
  2006  0025DC  E0D7               	bz	l208
  2007  0025DE  0A03               	xorlw	3	; case 2
  2008  0025E0  E0DB               	bz	l211
  2009  0025E2  0A01               	xorlw	1	; case 3
  2010  0025E4  E0DF               	bz	l214
  2011  0025E6  0A07               	xorlw	7	; case 4
  2012  0025E8  E0E3               	bz	l217
  2013  0025EA  0A01               	xorlw	1	; case 5
  2014  0025EC  E0E7               	bz	l220
  2015  0025EE  0A03               	xorlw	3	; case 6
  2016  0025F0  E0EB               	bz	l223
  2017  0025F2                     l9823:
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 732: relay_pulse_timer[ i ] =
  2021                           ;main.c: 733: readEEPROM( 0x43 +
  2022                           ;main.c: 734: 18 + 2*i ) * 256 +
  2023                           ;main.c: 735: readEEPROM( 0x43 +
  2024                           ;main.c: 736: 19 + 2*i );
  2025  0025F2  D888               	call	PL50	;call to abstracted procedure
  2026  0025F4  ECDB  F021         	call	_readEEPROM	;wreg free
  2027  0025F8  0100               	movlb	0	; () banked
  2028  0025FA  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2029  0025FC  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2030  0025FE  D88B               	call	PL52	;call to abstracted procedure
  2031  002600  ECDB  F021         	call	_readEEPROM	;wreg free
  2032  002604  0100               	movlb	0	; () banked
  2033  002606  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2034  002608  0E00               	movlw	0
  2035  00260A  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2036  00260C  D866               	call	PL22	;call to abstracted procedure
  2037  00260E  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2038  002612  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;main.c: 738: if ( bOn ) {
  2042  002616  51D4               	movf	doApplicationOneSecondWork@bOn& (0+255),w,b
  2043  002618  E03A               	bz	l226
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;main.c: 741: if ( readEEPROM( 0x43 + 10 + i ) & 0x04 ) {
  2047  00261A  D86D               	call	PL32	;call to abstracted procedure
  2048  00261C  ECDB  F021         	call	_readEEPROM	;wreg free
  2049  002620  0100               	movlb	0	; () banked
  2050  002622  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2051  002624  A5D1               	btfss	??_doApplicationOneSecondWork& (0+255),2,b
  2052  002626  D020               	goto	l9831
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;main.c: 742: relay_protection_timer[ i ] =
  2056                           ;main.c: 743: readEEPROM( 0x43 + 34 + 2*i ) * 256 +
  2057                           ;main.c: 744: readEEPROM( 0x43 + 35 + 2*i );
  2058  002628  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2059  00262A  0D02               	mullw	2
  2060  00262C  0E65               	movlw	101
  2061  00262E  24F3               	addwf	prodl,w,c
  2062  002630  6E08               	movwf	?_readEEPROM,c
  2063  002632  0E00               	movlw	0
  2064  002634  20F4               	addwfc	prodh,w,c
  2065  002636  6E09               	movwf	?_readEEPROM+1,c
  2066  002638  ECDB  F021         	call	_readEEPROM	;wreg free
  2067  00263C  0100               	movlb	0	; () banked
  2068  00263E  6FD2               	movwf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2069  002640  6BD1               	clrf	??_doApplicationOneSecondWork& (0+255),b
  2070  002642  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2071  002644  0D02               	mullw	2
  2072  002646  0E66               	movlw	102
  2073  002648  24F3               	addwf	prodl,w,c
  2074  00264A  6E08               	movwf	?_readEEPROM,c
  2075  00264C  0E00               	movlw	0
  2076  00264E  20F4               	addwfc	prodh,w,c
  2077  002650  6E09               	movwf	?_readEEPROM+1,c
  2078  002652  ECDB  F021         	call	_readEEPROM	;wreg free
  2079  002656  0100               	movlb	0	; () banked
  2080  002658  27D1               	addwf	??_doApplicationOneSecondWork& (0+255),f,b
  2081  00265A  0E00               	movlw	0
  2082  00265C  23D2               	addwfc	(??_doApplicationOneSecondWork+1)& (0+255),f,b
  2083  00265E  D844               	call	PL24	;call to abstracted procedure
  2084  002660  C0D1  FFDE         	movff	??_doApplicationOneSecondWork,postinc2
  2085  002664  C0D2  FFDD         	movff	??_doApplicationOneSecondWork+1,postdec2
  2086  002668                     l9831:
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;main.c: 745: }
  2090                           ;main.c: 747: if ( ctrlreg & 0x08 ) {
  2091  002668  A7D5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),3,b
  2092  00266A  D007               	goto	l9835
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;main.c: 748: SendInformationEvent( i, 20,
  2096                           ;main.c: 749: 3 );
  2097  00266C  0E14               	movlw	20
  2098  00266E  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2099  002670  0E03               	movlw	3
  2100  002672  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2101  002674  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2102  002676  EC52  F01F         	call	_SendInformationEvent
  2103  00267A                     l9835:
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;main.c: 750: }
  2107                           ;main.c: 752: if ( ctrlreg & 0x20 ) {
  2108  00267A  ABD5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),5,b
  2109  00267C  D02C               	goto	l9847
  2110                           
  2111                           ; BSR set to: 0
  2112                           ;main.c: 753: SendInformationEvent( i, 20,
  2113                           ;main.c: 754: 25 );
  2114  00267E  0E14               	movlw	20
  2115  002680  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2116  002682  0E19               	movlw	25
  2117  002684  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2118  002686  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2119  002688  EC52  F01F         	call	_SendInformationEvent
  2120  00268C  D024               	goto	l9847
  2121  00268E                     l226:
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;main.c: 759: if ( ctrlreg & 0x10 ) {
  2125  00268E  A9D5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),4,b
  2126  002690  D007               	goto	l9841
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;main.c: 760: SendInformationEvent( i, 20,
  2130                           ;main.c: 761: 4 );
  2131  002692  0E14               	movlw	20
  2132  002694  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2133  002696  0E04               	movlw	4
  2134  002698  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2135  00269A  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2136  00269C  EC52  F01F         	call	_SendInformationEvent
  2137  0026A0                     l9841:
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;main.c: 762: }
  2141                           ;main.c: 764: if (ctrlreg & 0x40) {
  2142  0026A0  ADD5               	btfss	doApplicationOneSecondWork@ctrlreg& (0+255),6,b
  2143  0026A2  D019               	goto	l9847
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;main.c: 765: SendInformationEvent( i, 20,
  2147                           ;main.c: 766: 24 );
  2148  0026A4  0E14               	movlw	20
  2149  0026A6  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  2150  0026A8  0E18               	movlw	24
  2151  0026AA  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  2152  0026AC  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2153  0026AE  EC52  F01F         	call	_SendInformationEvent
  2154  0026B2  D011               	goto	l9847
  2155  0026B4                     l9845:
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 773: else {
  2159                           ;main.c: 775: relay_pulse_timer[ 0 ] =
  2160                           ;main.c: 776: readEEPROM( 0x43 + 18 + 2*i ) * 256 +
  2161                           ;main.c: 777: readEEPROM( 0x43 + 19 + 2*i );
  2162  0026B4  D830               	call	PL52	;call to abstracted procedure
  2163  0026B6  ECDB  F021         	call	_readEEPROM	;wreg free
  2164  0026BA  0100               	movlb	0	; () banked
  2165  0026BC  6FD1               	movwf	??_doApplicationOneSecondWork& (0+255),b
  2166  0026BE  D822               	call	PL50	;call to abstracted procedure
  2167  0026C0  ECDB  F021         	call	_readEEPROM	;wreg free
  2168  0026C4  0100               	movlb	0	; () banked
  2169  0026C6  6FD3               	movwf	(??_doApplicationOneSecondWork+2)& (0+255),b
  2170  0026C8  6BD2               	clrf	(??_doApplicationOneSecondWork+1)& (0+255),b
  2171  0026CA  51D1               	movf	??_doApplicationOneSecondWork& (0+255),w,b
  2172  0026CC  25D2               	addwf	(??_doApplicationOneSecondWork+1)& (0+255),w,b
  2173  0026CE  6F70               	movwf	_relay_pulse_timer& (0+255),b
  2174  0026D0  0E00               	movlw	0
  2175  0026D2  21D3               	addwfc	(??_doApplicationOneSecondWork+2)& (0+255),w,b
  2176  0026D4  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  2177  0026D6                     l9847:
  2178                           
  2179                           ; BSR set to: 0
  2180  0026D6  2BD6               	incf	doApplicationOneSecondWork@i& (0+255),f,b
  2181  0026D8  D6DD               	goto	l9759
  2182  0026DA                     __end_of_doApplicationOneSecondWork:
  2183                           	opt stack 0
  2184  0026DA                     PL22:
  2185                           	opt stack 21
  2186  0026DA  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2187  0026DC  0D02               	mullw	2
  2188  0026DE  50F3               	movf	prodl,w,c
  2189  0026E0  0F70               	addlw	low _relay_pulse_timer
  2190  0026E2  6ED9               	movwf	fsr2l,c
  2191  0026E4  6ADA               	clrf	fsr2h,c
  2192  0026E6  0012               	return	
  2193  0026E8                     __end_ofPL22:
  2194                           	opt stack 0
  2195  0026E8                     PL24:
  2196                           	opt stack 21
  2197  0026E8  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2198  0026EA  0D02               	mullw	2
  2199  0026EC  50F3               	movf	prodl,w,c
  2200  0026EE  0F60               	addlw	low _relay_protection_timer
  2201  0026F0  6ED9               	movwf	fsr2l,c
  2202  0026F2  6ADA               	clrf	fsr2h,c
  2203  0026F4  0012               	return	
  2204  0026F6                     __end_ofPL24:
  2205                           	opt stack 0
  2206  0026F6                     PL32:
  2207                           	opt stack 21
  2208  0026F6  0E4D               	movlw	77
  2209  0026F8  25D6               	addwf	doApplicationOneSecondWork@i& (0+255),w,b
  2210  0026FA  6E08               	movwf	?_readEEPROM,c
  2211  0026FC  6A09               	clrf	?_readEEPROM+1,c
  2212  0026FE  0E00               	movlw	0
  2213  002700  2209               	addwfc	?_readEEPROM+1,f,c
  2214  002702  0C00               	retlw	0
  2215  002704                     __end_ofPL32:
  2216                           	opt stack 0
  2217  002704                     PL50:
  2218                           	opt stack 21
  2219  002704  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2220  002706  0D02               	mullw	2
  2221  002708  0E55               	movlw	85
  2222  00270A  24F3               	addwf	prodl,w,c
  2223  00270C  6E08               	movwf	?_readEEPROM,c
  2224  00270E  0E00               	movlw	0
  2225  002710  20F4               	addwfc	prodh,w,c
  2226  002712  6E09               	movwf	?_readEEPROM+1,c
  2227  002714  0012               	return	
  2228  002716                     __end_ofPL50:
  2229                           	opt stack 0
  2230  002716                     PL52:
  2231                           	opt stack 21
  2232  002716  51D6               	movf	doApplicationOneSecondWork@i& (0+255),w,b
  2233  002718  0D02               	mullw	2
  2234  00271A  0E56               	movlw	86
  2235  00271C  24F3               	addwf	prodl,w,c
  2236  00271E  6E08               	movwf	?_readEEPROM,c
  2237  002720  0E00               	movlw	0
  2238  002722  20F4               	addwfc	prodh,w,c
  2239  002724  6E09               	movwf	?_readEEPROM+1,c
  2240  002726  0012               	return	
  2241  002728                     __end_ofPL52:
  2242                           	opt stack 0
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           indf1	equ	0xFE7
  2253                           fsr1h	equ	0xFE2
  2254                           fsr1l	equ	0xFE1
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           plusw2	equ	0xFDB
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           
  2263 ;; *************** function _vscp_doOneSecondWork *****************
  2264 ;; Defined at:
  2265 ;;		line 516 in file "../../vscp_firmware/common/vscp_firmware.c"
  2266 ;; Parameters:    Size  Location     Type
  2267 ;;		None
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;		None
  2270 ;; Return value:  Size  Location     Type
  2271 ;;		None               void
  2272 ;; Registers used:
  2273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2274 ;; Tracked objects:
  2275 ;;		On entry : F/0
  2276 ;;		On exit  : F/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2283 ;;Total ram usage:        1 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    8
  2286 ;; This function calls:
  2287 ;;		_vscp_getZone
  2288 ;;		_vscp_getSubzone
  2289 ;;		_vscp_sendHeartBeat
  2290 ;; This function is called by:
  2291 ;;		_main
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text3
  2296  003F10                     __ptext3:
  2297                           	opt stack 0
  2298  003F10                     _vscp_doOneSecondWork:
  2299                           	opt stack 21
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;vscp_firmware.c: 518: ++vscp_second;
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;incstack = 0
  2306                           ;incstack = 0
  2307  003F10  2B9A               	incf	_vscp_second& (0+255),f,b
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;vscp_firmware.c: 520: if (vscp_second > 59) {
  2311  003F12  0E3B               	movlw	59
  2312  003F14  659A               	cpfsgt	_vscp_second& (0+255),b
  2313  003F16  D00D               	goto	l7875
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;vscp_firmware.c: 521: vscp_second = 0;
  2317  003F18  6B9A               	clrf	_vscp_second& (0+255),b
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;vscp_firmware.c: 522: vscp_minute++;
  2321  003F1A  2B95               	incf	_vscp_minute& (0+255),f,b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;vscp_firmware.c: 525: if (0x03 == vscp_node_state) {
  2325  003F1C  5197               	movf	_vscp_node_state& (0+255),w,b
  2326  003F1E  0A03               	xorlw	3
  2327  003F20  E108               	bnz	l7875
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;vscp_firmware.c: 526: vscp_sendHeartBeat(vscp_getZone(),
  2331                           ;vscp_firmware.c: 527: vscp_getSubzone());
  2332  003F22  ECED  F021         	call	_vscp_getSubzone	;wreg free
  2333  003F26  0100               	movlb	0	; () banked
  2334  003F28  6FCA               	movwf	?_vscp_sendHeartBeat& (0+255),b
  2335  003F2A  ECF2  F021         	call	_vscp_getZone	;wreg free
  2336  003F2E  EC81  F020         	call	_vscp_sendHeartBeat
  2337  003F32                     l7875:
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;vscp_firmware.c: 528: }
  2341                           ;vscp_firmware.c: 529: }
  2342                           ;vscp_firmware.c: 531: if (vscp_minute > 59) {
  2343  003F32  0E3B               	movlw	59
  2344  003F34  6595               	cpfsgt	_vscp_minute& (0+255),b
  2345  003F36  D002               	goto	l7881
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;vscp_firmware.c: 532: vscp_minute = 0;
  2349  003F38  6B95               	clrf	_vscp_minute& (0+255),b
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;vscp_firmware.c: 533: vscp_hour++;
  2353  003F3A  2B93               	incf	_vscp_hour& (0+255),f,b
  2354  003F3C                     l7881:
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;vscp_firmware.c: 534: }
  2358                           ;vscp_firmware.c: 536: if (vscp_hour > 23) vscp_hour = 0;
  2359  003F3C  0E17               	movlw	23
  2360  003F3E  6593               	cpfsgt	_vscp_hour& (0+255),b
  2361  003F40  D001               	goto	l7885
  2362                           
  2363                           ; BSR set to: 0
  2364  003F42  6B93               	clrf	_vscp_hour& (0+255),b
  2365  003F44                     l7885:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;vscp_firmware.c: 540: if (0x03 == vscp_node_state) {
  2369  003F44  5197               	movf	_vscp_node_state& (0+255),w,b
  2370  003F46  0A03               	xorlw	3
  2371  003F48  A4D8               	btfss	status,2,c
  2372  003F4A  0012               	return	
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;vscp_firmware.c: 541: vscp_guid_reset++;
  2376  003F4C  2B92               	incf	_vscp_guid_reset& (0+255),f,b
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;vscp_firmware.c: 542: if ((vscp_guid_reset & 0x0f) >= 2) {
  2380  003F4E  C092  F04D         	movff	_vscp_guid_reset,??_vscp_doOneSecondWork
  2381  003F52  0E0F               	movlw	15
  2382  003F54  164D               	andwf	??_vscp_doOneSecondWork,f,c
  2383  003F56  0E02               	movlw	2
  2384  003F58  5C4D               	subwf	??_vscp_doOneSecondWork,w,c
  2385  003F5A  B0D8               	btfsc	status,0,c
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;vscp_firmware.c: 543: vscp_guid_reset = 0;
  2389  003F5C  6B92               	clrf	_vscp_guid_reset& (0+255),b
  2390                           
  2391                           ; BSR set to: 0
  2392  003F5E  0012               	return	
  2393  003F60                     __end_of_vscp_doOneSecondWork:
  2394                           	opt stack 0
  2395                           tblptru	equ	0xFF8
  2396                           tblptrh	equ	0xFF7
  2397                           tblptrl	equ	0xFF6
  2398                           tablat	equ	0xFF5
  2399                           prodh	equ	0xFF4
  2400                           prodl	equ	0xFF3
  2401                           intcon	equ	0xFF2
  2402                           postinc0	equ	0xFEE
  2403                           wreg	equ	0xFE8
  2404                           indf1	equ	0xFE7
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           indf2	equ	0xFDF
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _vscp_sendHeartBeat *****************
  2416 ;; Defined at:
  2417 ;;		line 370 in file "../../vscp_firmware/common/vscp_firmware.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;  zone            1    wreg     unsigned char 
  2420 ;;  subzone         1   20[BANK0 ] unsigned char 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;  zone            1   75[COMRAM] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;		None               void
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : F/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2432 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2433 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2435 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2436 ;;Total ram usage:        2 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    7
  2439 ;; This function calls:
  2440 ;;		_vscp_sendEvent
  2441 ;; This function is called by:
  2442 ;;		_vscp_doOneSecondWork
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text4
  2447  004102                     __ptext4:
  2448                           	opt stack 0
  2449  004102                     _vscp_sendHeartBeat:
  2450                           	opt stack 21
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;incstack = 0
  2454                           ;incstack = 0
  2455                           ;vscp_sendHeartBeat@zone stored from wreg
  2456  004102  CFE8 F04C          	movff	wreg,vscp_sendHeartBeat@zone
  2457                           
  2458                           ;vscp_firmware.c: 371: vscp_omsg.flags = 0x80 + 3;
  2459  004106  0E83               	movlw	131
  2460  004108  0100               	movlb	0	; () banked
  2461  00410A  6FA9               	movwf	_vscp_omsg& (0+255),b
  2462                           
  2463                           ;vscp_firmware.c: 372: vscp_omsg.priority = 0x07;
  2464  00410C  0E07               	movlw	7
  2465  00410E  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  2466                           
  2467                           ;vscp_firmware.c: 373: vscp_omsg.vscp_class = 20;
  2468  004110  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  2469  004112  0E14               	movlw	20
  2470  004114  6FAB               	movwf	(_vscp_omsg+2)& (0+255),b
  2471                           
  2472                           ;vscp_firmware.c: 374: vscp_omsg.vscp_type = 9;
  2473  004116  0E09               	movlw	9
  2474  004118  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;vscp_firmware.c: 375: vscp_omsg.data[ 0 ] = 0;
  2478  00411A  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;vscp_firmware.c: 376: vscp_omsg.data[ 1 ] = zone;
  2482  00411C  C04C  F0AF         	movff	vscp_sendHeartBeat@zone,_vscp_omsg+6
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;vscp_firmware.c: 377: vscp_omsg.data[ 2 ] = subzone;
  2486  004120  C0CA  F0B0         	movff	vscp_sendHeartBeat@subzone,_vscp_omsg+7
  2487                           
  2488                           ; BSR set to: 0
  2489                           ;vscp_firmware.c: 380: vscp_sendEvent();
  2490  004124  EF94  F020         	goto	_vscp_sendEvent	;wreg free
  2491  004128                     __end_of_vscp_sendHeartBeat:
  2492                           	opt stack 0
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           prodh	equ	0xFF4
  2498                           prodl	equ	0xFF3
  2499                           intcon	equ	0xFF2
  2500                           postinc0	equ	0xFEE
  2501                           wreg	equ	0xFE8
  2502                           indf1	equ	0xFE7
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           plusw2	equ	0xFDB
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _vscp_getSubzone *****************
  2514 ;; Defined at:
  2515 ;;		line 888 in file "../main.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      unsigned char 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, cstack
  2524 ;; Tracked objects:
  2525 ;;		On entry : F/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2533 ;;Total ram usage:        0 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:    3
  2536 ;; This function calls:
  2537 ;;		_readEEPROM
  2538 ;; This function is called by:
  2539 ;;		_vscp_doOneSecondWork
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text5
  2544  0043DA                     __ptext5:
  2545                           	opt stack 0
  2546  0043DA                     _vscp_getSubzone:
  2547                           	opt stack 25
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;main.c: 889: return readEEPROM( 0x43 + 1 );
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;incstack = 0
  2554                           ;incstack = 0
  2555  0043DA  6A09               	clrf	?_readEEPROM+1,c
  2556  0043DC  0E44               	movlw	68
  2557  0043DE  6E08               	movwf	?_readEEPROM,c
  2558  0043E0  EFDB  F021         	goto	_readEEPROM	;wreg free
  2559  0043E4                     __end_of_vscp_getSubzone:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           prodh	equ	0xFF4
  2566                           prodl	equ	0xFF3
  2567                           intcon	equ	0xFF2
  2568                           postinc0	equ	0xFEE
  2569                           wreg	equ	0xFE8
  2570                           indf1	equ	0xFE7
  2571                           fsr1h	equ	0xFE2
  2572                           fsr1l	equ	0xFE1
  2573                           indf2	equ	0xFDF
  2574                           postinc2	equ	0xFDE
  2575                           postdec2	equ	0xFDD
  2576                           plusw2	equ	0xFDB
  2577                           fsr2h	equ	0xFDA
  2578                           fsr2l	equ	0xFD9
  2579                           status	equ	0xFD8
  2580                           
  2581 ;; *************** function _vscp_getZone *****************
  2582 ;; Defined at:
  2583 ;;		line 879 in file "../main.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      unsigned char 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2, cstack
  2592 ;; Tracked objects:
  2593 ;;		On entry : F/0
  2594 ;;		On exit  : 0/0
  2595 ;;		Unchanged: 0/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2601 ;;Total ram usage:        0 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:    3
  2604 ;; This function calls:
  2605 ;;		_readEEPROM
  2606 ;; This function is called by:
  2607 ;;		_vscp_doOneSecondWork
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text6
  2612  0043E4                     __ptext6:
  2613                           	opt stack 0
  2614  0043E4                     _vscp_getZone:
  2615                           	opt stack 25
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 880: return readEEPROM( 0x43 + 0 );
  2619                           
  2620                           ;incstack = 0
  2621                           ;incstack = 0
  2622  0043E4  6A09               	clrf	?_readEEPROM+1,c
  2623  0043E6  0E43               	movlw	67
  2624  0043E8  6E08               	movwf	?_readEEPROM,c
  2625  0043EA  EFDB  F021         	goto	_readEEPROM	;wreg free
  2626  0043EE                     __end_of_vscp_getZone:
  2627                           	opt stack 0
  2628                           tblptru	equ	0xFF8
  2629                           tblptrh	equ	0xFF7
  2630                           tblptrl	equ	0xFF6
  2631                           tablat	equ	0xFF5
  2632                           prodh	equ	0xFF4
  2633                           prodl	equ	0xFF3
  2634                           intcon	equ	0xFF2
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           indf1	equ	0xFE7
  2638                           fsr1h	equ	0xFE2
  2639                           fsr1l	equ	0xFE1
  2640                           indf2	equ	0xFDF
  2641                           postinc2	equ	0xFDE
  2642                           postdec2	equ	0xFDD
  2643                           plusw2	equ	0xFDB
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _vscp_error *****************
  2649 ;; Defined at:
  2650 ;;		line 191 in file "../../vscp_firmware/common/vscp_firmware.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;		None               void
  2657 ;; Registers used:
  2658 ;;		None
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2668 ;;Total ram usage:        0 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    2
  2671 ;; This function calls:
  2672 ;;		Nothing
  2673 ;; This function is called by:
  2674 ;;		_main
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text7
  2679  00441E                     __ptext7:
  2680                           	opt stack 0
  2681  00441E                     _vscp_error:
  2682                           	opt stack 27
  2683                           
  2684                           ;vscp_firmware.c: 192: vscp_initledfunc = 0x00;
  2685                           
  2686                           ;incstack = 0
  2687                           ;incstack = 0
  2688  00441E  6A56               	clrf	_vscp_initledfunc,c
  2689  004420  0012               	return	
  2690  004422                     __end_of_vscp_error:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           indf1	equ	0xFE7
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           postinc2	equ	0xFDE
  2706                           postdec2	equ	0xFDD
  2707                           plusw2	equ	0xFDB
  2708                           fsr2h	equ	0xFDA
  2709                           fsr2l	equ	0xFD9
  2710                           status	equ	0xFD8
  2711                           
  2712 ;; *************** function _doDM *****************
  2713 ;; Defined at:
  2714 ;;		line 1608 in file "../main.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  class_mask      2   33[BANK0 ] unsigned short 
  2719 ;;  class_filter    2   31[BANK0 ] unsigned short 
  2720 ;;  i               1   44[BANK0 ] unsigned char 
  2721 ;;  dmflags         1   43[BANK0 ] unsigned char 
  2722 ;;  type_mask       1   36[BANK0 ] unsigned char 
  2723 ;;  type_filter     1   35[BANK0 ] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;		None               void
  2726 ;; Registers used:
  2727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : F/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2734 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2735 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2736 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2737 ;;Total ram usage:       17 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    8
  2740 ;; This function calls:
  2741 ;;		_readEEPROM
  2742 ;;		_doActionOff
  2743 ;;		_doActionOn
  2744 ;;		_doActionPulse
  2745 ;;		_doActionStatus
  2746 ;;		_doActionDisable
  2747 ;;		_doActionToggle
  2748 ;; This function is called by:
  2749 ;;		_main
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text8
  2754  002992                     __ptext8:
  2755                           	opt stack 0
  2756  002992                     _doDM:
  2757                           	opt stack 21
  2758                           
  2759                           ;main.c: 1609: unsigned char i;
  2760                           ;main.c: 1610: unsigned char dmflags;
  2761                           ;main.c: 1611: unsigned short class_filter;
  2762                           ;main.c: 1612: unsigned short class_mask;
  2763                           ;main.c: 1613: unsigned char type_filter;
  2764                           ;main.c: 1614: unsigned char type_mask;
  2765                           ;main.c: 1617: if ( 0 == vscp_imsg.vscp_class ) return;
  2766                           
  2767                           ;incstack = 0
  2768                           ;incstack = 0
  2769  002992  0100               	movlb	0	; () banked
  2770  002994  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
  2771  002996  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  2772  002998  B4D8               	btfsc	status,2,c
  2773  00299A  0012               	return	
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 1619: for (i = 0; i < 7; i++) {
  2777  00299C  6BE2               	clrf	doDM@i& (0+255),b
  2778  00299E                     l9695:
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;main.c: 1622: dmflags = readEEPROM( 0x43 + 72 + 1 + (8 * i) );
  2782  00299E  D901               	call	PL2	;call to abstracted procedure
  2783  0029A0  0E8C               	movlw	140
  2784  0029A2  25D2               	addwf	??_doDM& (0+255),w,b
  2785  0029A4  6E08               	movwf	?_readEEPROM,c
  2786  0029A6  0E00               	movlw	0
  2787  0029A8  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2788  0029AA  6E09               	movwf	?_readEEPROM+1,c
  2789  0029AC  ECDB  F021         	call	_readEEPROM	;wreg free
  2790  0029B0  0100               	movlb	0	; () banked
  2791  0029B2  6FE1               	movwf	doDM@dmflags& (0+255),b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 1625: if ( dmflags & 0x80 ) {
  2795  0029B4  AFE1               	btfss	doDM@dmflags& (0+255),7,b
  2796  0029B6  D0EF               	goto	l9753
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 1628: if ( ( dmflags & 0x40 ) &&
  2800                           ;main.c: 1629: ( vscp_imsg.oaddr != readEEPROM( 0x43 + 72 + (8 * i) ) ) ) {
  2801  0029B8  ADE1               	btfss	doDM@dmflags& (0+255),6,b
  2802  0029BA  D018               	goto	l415
  2803                           
  2804                           ; BSR set to: 0
  2805  0029BC  51E2               	movf	doDM@i& (0+255),w,b
  2806  0029BE  6FD2               	movwf	??_doDM& (0+255),b
  2807  0029C0  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2808  0029C2  90D8               	bcf	status,0,c
  2809  0029C4  37D2               	rlcf	??_doDM& (0+255),f,b
  2810  0029C6  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2811  0029C8  90D8               	bcf	status,0,c
  2812  0029CA  37D2               	rlcf	??_doDM& (0+255),f,b
  2813  0029CC  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2814  0029CE  90D8               	bcf	status,0,c
  2815  0029D0  37D2               	rlcf	??_doDM& (0+255),f,b
  2816  0029D2  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  2817  0029D4  0E8B               	movlw	139
  2818  0029D6  25D2               	addwf	??_doDM& (0+255),w,b
  2819  0029D8  6E08               	movwf	?_readEEPROM,c
  2820  0029DA  0E00               	movlw	0
  2821  0029DC  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2822  0029DE  6E09               	movwf	?_readEEPROM+1,c
  2823  0029E0  ECDB  F021         	call	_readEEPROM	;wreg free
  2824  0029E4  0100               	movlb	0	; () banked
  2825  0029E6  19A0               	xorwf	(_vscp_imsg+5)& (0+255),w,b
  2826  0029E8  E001 D0D5          	bnz	l9753
  2827  0029EC                     l415:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;main.c: 1631: }
  2831                           ;main.c: 1634: if ( dmflags & 0x10 ) {
  2832  0029EC  A9E1               	btfss	doDM@dmflags& (0+255),4,b
  2833  0029EE  D00B               	goto	l417
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;main.c: 1635: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2837  0029F0  29A2               	incf	(_vscp_imsg+7)& (0+255),w,b
  2838  0029F2  E009               	bz	l417
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;main.c: 1636: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2842  0029F4  6A09               	clrf	?_readEEPROM+1,c
  2843  0029F6  0E43               	movlw	67
  2844  0029F8  6E08               	movwf	?_readEEPROM,c
  2845  0029FA  ECDB  F021         	call	_readEEPROM	;wreg free
  2846  0029FE  0100               	movlb	0	; () banked
  2847  002A00  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2848  002A02  E001 D0C8          	bnz	l9753
  2849  002A06                     l417:
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;main.c: 1638: }
  2853                           ;main.c: 1639: }
  2854                           ;main.c: 1640: }
  2855                           ;main.c: 1643: if ( dmflags & 0x08 ) {
  2856  002A06  A7E1               	btfss	doDM@dmflags& (0+255),3,b
  2857  002A08  D00B               	goto	l9717
  2858                           
  2859                           ; BSR set to: 0
  2860                           ;main.c: 1644: if ( 255 != vscp_imsg.data[ 1 ] ) {
  2861  002A0A  29A2               	incf	(_vscp_imsg+7)& (0+255),w,b
  2862  002A0C  E009               	bz	l9717
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 1645: if ( vscp_imsg.data[ 1 ] != readEEPROM( 0x43 + 0 ) ) {
  2866  002A0E  6A09               	clrf	?_readEEPROM+1,c
  2867  002A10  0E43               	movlw	67
  2868  002A12  6E08               	movwf	?_readEEPROM,c
  2869  002A14  ECDB  F021         	call	_readEEPROM	;wreg free
  2870  002A18  0100               	movlb	0	; () banked
  2871  002A1A  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  2872  002A1C  E001 D0BB          	bnz	l9753
  2873  002A20                     l9717:
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;main.c: 1647: }
  2877                           ;main.c: 1648: }
  2878                           ;main.c: 1649: }
  2879                           ;main.c: 1651: class_filter = ( dmflags & 0x01)*256 +
  2880                           ;main.c: 1652: readEEPROM( 0x43 +
  2881                           ;main.c: 1653: 72 +
  2882                           ;main.c: 1654: (8 * i) +
  2883                           ;main.c: 1655: 3);
  2884  002A20  51E2               	movf	doDM@i& (0+255),w,b
  2885  002A22  0D08               	mullw	8
  2886  002A24  0E8E               	movlw	142
  2887  002A26  24F3               	addwf	prodl,w,c
  2888  002A28  6E08               	movwf	?_readEEPROM,c
  2889  002A2A  0E00               	movlw	0
  2890  002A2C  20F4               	addwfc	prodh,w,c
  2891  002A2E  6E09               	movwf	?_readEEPROM+1,c
  2892  002A30  ECDB  F021         	call	_readEEPROM	;wreg free
  2893  002A34  0100               	movlb	0	; () banked
  2894  002A36  6FD2               	movwf	??_doDM& (0+255),b
  2895  002A38  51E1               	movf	doDM@dmflags& (0+255),w,b
  2896  002A3A  0B01               	andlw	1
  2897  002A3C  6FD4               	movwf	(??_doDM+2)& (0+255),b
  2898  002A3E  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2899  002A40  51D2               	movf	??_doDM& (0+255),w,b
  2900  002A42  25D3               	addwf	(??_doDM+1)& (0+255),w,b
  2901  002A44  6FD5               	movwf	doDM@class_filter& (0+255),b
  2902  002A46  0E00               	movlw	0
  2903  002A48  21D4               	addwfc	(??_doDM+2)& (0+255),w,b
  2904  002A4A  6FD6               	movwf	(doDM@class_filter+1)& (0+255),b
  2905                           
  2906                           ;main.c: 1656: class_mask = ( dmflags & 0x02)*256 +
  2907                           ;main.c: 1657: readEEPROM( 0x43 +
  2908                           ;main.c: 1658: 72 +
  2909                           ;main.c: 1659: (8 * i) +
  2910                           ;main.c: 1660: 2);
  2911  002A4C  51E2               	movf	doDM@i& (0+255),w,b
  2912  002A4E  0D08               	mullw	8
  2913  002A50  0E8D               	movlw	141
  2914  002A52  24F3               	addwf	prodl,w,c
  2915  002A54  6E08               	movwf	?_readEEPROM,c
  2916  002A56  0E00               	movlw	0
  2917  002A58  20F4               	addwfc	prodh,w,c
  2918  002A5A  6E09               	movwf	?_readEEPROM+1,c
  2919  002A5C  ECDB  F021         	call	_readEEPROM	;wreg free
  2920  002A60  0100               	movlb	0	; () banked
  2921  002A62  6FD2               	movwf	??_doDM& (0+255),b
  2922  002A64  51E1               	movf	doDM@dmflags& (0+255),w,b
  2923  002A66  0B02               	andlw	2
  2924  002A68  6FD4               	movwf	(??_doDM+2)& (0+255),b
  2925  002A6A  6BD3               	clrf	(??_doDM+1)& (0+255),b
  2926  002A6C  51D2               	movf	??_doDM& (0+255),w,b
  2927  002A6E  25D3               	addwf	(??_doDM+1)& (0+255),w,b
  2928  002A70  6FD7               	movwf	doDM@class_mask& (0+255),b
  2929  002A72  0E00               	movlw	0
  2930  002A74  21D4               	addwfc	(??_doDM+2)& (0+255),w,b
  2931  002A76  6FD8               	movwf	(doDM@class_mask+1)& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;main.c: 1661: type_filter = readEEPROM( 0x43 +
  2935                           ;main.c: 1662: 72 +
  2936                           ;main.c: 1663: (8 * i) +
  2937                           ;main.c: 1664: 5);
  2938  002A78  D894               	call	PL2	;call to abstracted procedure
  2939  002A7A  0E90               	movlw	144
  2940  002A7C  25D2               	addwf	??_doDM& (0+255),w,b
  2941  002A7E  6E08               	movwf	?_readEEPROM,c
  2942  002A80  0E00               	movlw	0
  2943  002A82  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2944  002A84  6E09               	movwf	?_readEEPROM+1,c
  2945  002A86  ECDB  F021         	call	_readEEPROM	;wreg free
  2946  002A8A  0100               	movlb	0	; () banked
  2947  002A8C  6FD9               	movwf	doDM@type_filter& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;main.c: 1665: type_mask = readEEPROM( 0x43 +
  2951                           ;main.c: 1666: 72 +
  2952                           ;main.c: 1667: (8 * i) +
  2953                           ;main.c: 1668: 4);
  2954  002A8E  D889               	call	PL2	;call to abstracted procedure
  2955  002A90  0E8F               	movlw	143
  2956  002A92  25D2               	addwf	??_doDM& (0+255),w,b
  2957  002A94  6E08               	movwf	?_readEEPROM,c
  2958  002A96  0E00               	movlw	0
  2959  002A98  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  2960  002A9A  6E09               	movwf	?_readEEPROM+1,c
  2961  002A9C  ECDB  F021         	call	_readEEPROM	;wreg free
  2962  002AA0  0100               	movlb	0	; () banked
  2963  002AA2  6FDA               	movwf	doDM@type_mask& (0+255),b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;main.c: 1670: if ( !( ( class_filter ^ vscp_imsg.vscp_class ) & class_mask ) &&
  2967                           ;main.c: 1671: !( ( type_filter ^ vscp_imsg.vscp_type ) & type_mask ) ) {
  2968  002AA4  EE20  F09D         	lfsr	2,_vscp_imsg+2
  2969  002AA8  CFDE F0D2          	movff	postinc2,??_doDM
  2970  002AAC  CFDD F0D3          	movff	postdec2,??_doDM+1
  2971  002AB0  51D5               	movf	doDM@class_filter& (0+255),w,b
  2972  002AB2  1BD2               	xorwf	??_doDM& (0+255),f,b
  2973  002AB4  51D6               	movf	(doDM@class_filter+1)& (0+255),w,b
  2974  002AB6  1BD3               	xorwf	(??_doDM+1)& (0+255),f,b
  2975  002AB8  51D7               	movf	doDM@class_mask& (0+255),w,b
  2976  002ABA  17D2               	andwf	??_doDM& (0+255),f,b
  2977  002ABC  51D8               	movf	(doDM@class_mask+1)& (0+255),w,b
  2978  002ABE  17D3               	andwf	(??_doDM+1)& (0+255),f,b
  2979  002AC0  51D3               	movf	(??_doDM+1)& (0+255),w,b
  2980  002AC2  11D2               	iorwf	??_doDM& (0+255),w,b
  2981  002AC4  E168               	bnz	l9753
  2982                           
  2983                           ; BSR set to: 0
  2984  002AC6  519F               	movf	(_vscp_imsg+4)& (0+255),w,b
  2985  002AC8  19D9               	xorwf	doDM@type_filter& (0+255),w,b
  2986  002ACA  15DA               	andwf	doDM@type_mask& (0+255),w,b
  2987  002ACC  E04F               	bz	l9751
  2988  002ACE  D063               	goto	l9753
  2989  002AD0                     l9729:
  2990                           
  2991                           ;main.c: 1677: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  2992  002AD0  0100               	movlb	0	; () banked
  2993  002AD2  D867               	call	PL2	;call to abstracted procedure
  2994  002AD4  D873               	call	PL16	;call to abstracted procedure
  2995  002AD6  ECDB  F021         	call	_readEEPROM	;wreg free
  2996  002ADA  0100               	movlb	0	; () banked
  2997  002ADC  6FDB               	movwf	_doDM$2092& (0+255),b
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 1677: doActionOn( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3001  002ADE  C0DB  F051         	movff	_doDM$2092,?_doActionOn
  3002  002AE2  51E1               	movf	doDM@dmflags& (0+255),w,b
  3003  002AE4  EC94  F013         	call	_doActionOn
  3004                           
  3005                           ;main.c: 1678: break;
  3006  002AE8  D056               	goto	l9753
  3007  002AEA                     l9733:
  3008                           
  3009                           ;main.c: 1681: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3010  002AEA  0100               	movlb	0	; () banked
  3011  002AEC  D85A               	call	PL2	;call to abstracted procedure
  3012  002AEE  D866               	call	PL16	;call to abstracted procedure
  3013  002AF0  ECDB  F021         	call	_readEEPROM	;wreg free
  3014  002AF4  0100               	movlb	0	; () banked
  3015  002AF6  6FDC               	movwf	_doDM$2093& (0+255),b
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;main.c: 1681: doActionOff( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3019  002AF8  C0DC  F051         	movff	_doDM$2093,?_doActionOff
  3020  002AFC  51E1               	movf	doDM@dmflags& (0+255),w,b
  3021  002AFE  ECEC  F01C         	call	_doActionOff
  3022                           
  3023                           ;main.c: 1682: break;
  3024  002B02  D049               	goto	l9753
  3025  002B04                     l9737:
  3026                           
  3027                           ;main.c: 1685: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3028  002B04  0100               	movlb	0	; () banked
  3029  002B06  D84D               	call	PL2	;call to abstracted procedure
  3030  002B08  D859               	call	PL16	;call to abstracted procedure
  3031  002B0A  ECDB  F021         	call	_readEEPROM	;wreg free
  3032  002B0E  0100               	movlb	0	; () banked
  3033  002B10  6FDD               	movwf	_doDM$2094& (0+255),b
  3034                           
  3035                           ;main.c: 1685: doActionPulse( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3036  002B12  C0DD  F00B         	movff	_doDM$2094,?_doActionPulse
  3037  002B16  51E1               	movf	doDM@dmflags& (0+255),w,b
  3038  002B18  ECDE  F016         	call	_doActionPulse
  3039                           
  3040                           ;main.c: 1686: break;
  3041  002B1C  D03C               	goto	l9753
  3042  002B1E                     l9739:
  3043                           
  3044                           ;main.c: 1689: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3045  002B1E  0100               	movlb	0	; () banked
  3046  002B20  D840               	call	PL2	;call to abstracted procedure
  3047  002B22  D84C               	call	PL16	;call to abstracted procedure
  3048  002B24  ECDB  F021         	call	_readEEPROM	;wreg free
  3049  002B28  0100               	movlb	0	; () banked
  3050  002B2A  6FDE               	movwf	_doDM$2095& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;main.c: 1689: doActionStatus( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3054  002B2C  C0DE  F051         	movff	_doDM$2095,?_doActionStatus
  3055  002B30  51E1               	movf	doDM@dmflags& (0+255),w,b
  3056  002B32  ECF0  F01A         	call	_doActionStatus
  3057                           
  3058                           ;main.c: 1690: break;
  3059  002B36  D02F               	goto	l9753
  3060  002B38                     l9743:
  3061                           
  3062                           ;main.c: 1693: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3063  002B38  0100               	movlb	0	; () banked
  3064  002B3A  D833               	call	PL2	;call to abstracted procedure
  3065  002B3C  D83F               	call	PL16	;call to abstracted procedure
  3066  002B3E  ECDB  F021         	call	_readEEPROM	;wreg free
  3067  002B42  0100               	movlb	0	; () banked
  3068  002B44  6FDF               	movwf	_doDM$2096& (0+255),b
  3069                           
  3070                           ;main.c: 1693: doActionDisable( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3071  002B46  C0DF  F00B         	movff	_doDM$2096,?_doActionDisable
  3072  002B4A  51E1               	movf	doDM@dmflags& (0+255),w,b
  3073  002B4C  EC1C  F01F         	call	_doActionDisable
  3074                           
  3075                           ;main.c: 1694: break;
  3076  002B50  D022               	goto	l9753
  3077  002B52                     l9745:
  3078                           
  3079                           ;main.c: 1697: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3080  002B52  0100               	movlb	0	; () banked
  3081  002B54  D826               	call	PL2	;call to abstracted procedure
  3082  002B56  D832               	call	PL16	;call to abstracted procedure
  3083  002B58  ECDB  F021         	call	_readEEPROM	;wreg free
  3084  002B5C  0100               	movlb	0	; () banked
  3085  002B5E  6FE0               	movwf	_doDM$2097& (0+255),b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;main.c: 1697: doActionToggle( dmflags, readEEPROM( 0x43 + 72 + (8 * i) + 7 ) );
  3089  002B60  C0E0  F051         	movff	_doDM$2097,?_doActionToggle
  3090  002B64  51E1               	movf	doDM@dmflags& (0+255),w,b
  3091  002B66  EC47  F019         	call	_doActionToggle
  3092                           
  3093                           ;main.c: 1698: break;
  3094  002B6A  D015               	goto	l9753
  3095  002B6C                     l9751:
  3096                           
  3097                           ; BSR set to: 0
  3098  002B6C  D81A               	call	PL2	;call to abstracted procedure
  3099  002B6E  0E91               	movlw	145
  3100  002B70  25D2               	addwf	??_doDM& (0+255),w,b
  3101  002B72  6E08               	movwf	?_readEEPROM,c
  3102  002B74  0E00               	movlw	0
  3103  002B76  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  3104  002B78  6E09               	movwf	?_readEEPROM+1,c
  3105  002B7A  ECDB  F021         	call	_readEEPROM	;wreg free
  3106                           
  3107                           ; Switch size 1, requested type "space"
  3108                           ; Number of cases is 6, Range of values is 1 to 16
  3109                           ; switch strategies available:
  3110                           ; Name         Instructions Cycles
  3111                           ; simple_byte           19    10 (average)
  3112                           ;	Chosen strategy is simple_byte
  3113  002B7E  0A01               	xorlw	1	; case 1
  3114  002B80  E0A7               	bz	l9729
  3115  002B82  0A03               	xorlw	3	; case 2
  3116  002B84  E0B2               	bz	l9733
  3117  002B86  0A01               	xorlw	1	; case 3
  3118  002B88  E0BD               	bz	l9737
  3119  002B8A  0A07               	xorlw	7	; case 4
  3120  002B8C  E0E2               	bz	l9745
  3121  002B8E  0A0E               	xorlw	14	; case 10
  3122  002B90  E0C6               	bz	l9739
  3123  002B92  0A1A               	xorlw	26	; case 16
  3124  002B94  E0D1               	bz	l9743
  3125  002B96                     l9753:
  3126  002B96  0100               	movlb	0	; () banked
  3127  002B98  2BE2               	incf	doDM@i& (0+255),f,b
  3128                           
  3129                           ; BSR set to: 0
  3130  002B9A  0E06               	movlw	6
  3131  002B9C  65E2               	cpfsgt	doDM@i& (0+255),b
  3132  002B9E  D6FF               	goto	l9695
  3133  002BA0  0C06               	retlw	6
  3134  002BA2                     __end_of_doDM:
  3135                           	opt stack 0
  3136  002BA2                     PL2:
  3137                           	opt stack 21
  3138  002BA2  51E2               	movf	doDM@i& (0+255),w,b
  3139  002BA4  6FD2               	movwf	??_doDM& (0+255),b
  3140  002BA6  6BD3               	clrf	(??_doDM+1)& (0+255),b
  3141  002BA8  90D8               	bcf	status,0,c
  3142  002BAA  37D2               	rlcf	??_doDM& (0+255),f,b
  3143  002BAC  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  3144  002BAE  90D8               	bcf	status,0,c
  3145  002BB0  37D2               	rlcf	??_doDM& (0+255),f,b
  3146  002BB2  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  3147  002BB4  90D8               	bcf	status,0,c
  3148  002BB6  37D2               	rlcf	??_doDM& (0+255),f,b
  3149  002BB8  37D3               	rlcf	(??_doDM+1)& (0+255),f,b
  3150  002BBA  0012               	return	
  3151  002BBC                     __end_ofPL2:
  3152                           	opt stack 0
  3153  002BBC                     PL16:
  3154                           	opt stack 21
  3155  002BBC  0E92               	movlw	146
  3156  002BBE  25D2               	addwf	??_doDM& (0+255),w,b
  3157  002BC0  6E08               	movwf	?_readEEPROM,c
  3158  002BC2  0E00               	movlw	0
  3159  002BC4  21D3               	addwfc	(??_doDM+1)& (0+255),w,b
  3160  002BC6  6E09               	movwf	?_readEEPROM+1,c
  3161  002BC8  0012               	return	
  3162  002BCA                     __end_ofPL16:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           indf1	equ	0xFE7
  3174                           fsr1h	equ	0xFE2
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           plusw2	equ	0xFDB
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _doActionToggle *****************
  3185 ;; Defined at:
  3186 ;;		line 2109 in file "../main.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;  dmflags         1    wreg     unsigned char 
  3189 ;;  arg             1   80[COMRAM] unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3192 ;;  i               1   27[BANK0 ] unsigned char 
  3193 ;;  bOn             1   26[BANK0 ] enum E18242
  3194 ;;  val             1   25[BANK0 ] unsigned char 
  3195 ;; Return value:  Size  Location     Type
  3196 ;;		None               void
  3197 ;; Registers used:
  3198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3199 ;; Tracked objects:
  3200 ;;		On entry : F/0
  3201 ;;		On exit  : F/0
  3202 ;;		Unchanged: 0/0
  3203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3204 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3205 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3206 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3207 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3208 ;;Total ram usage:        7 bytes
  3209 ;; Hardware stack levels used:    1
  3210 ;; Hardware stack levels required when called:    7
  3211 ;; This function calls:
  3212 ;;		_readEEPROM
  3213 ;;		_SendInformationEvent
  3214 ;; This function is called by:
  3215 ;;		_doDM
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text9
  3220  00328E                     __ptext9:
  3221                           	opt stack 0
  3222  00328E                     _doActionToggle:
  3223                           	opt stack 21
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;incstack = 0
  3227                           ;incstack = 0
  3228                           ;doActionToggle@dmflags stored from wreg
  3229  00328E  CFE8 F0CE          	movff	wreg,doActionToggle@dmflags
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;main.c: 2111: unsigned char i;
  3233                           ;main.c: 2112: unsigned char val;
  3234                           ;main.c: 2113: BOOL bOn = 0;
  3235  003292  6BD0               	clrf	doActionToggle@bOn& (0+255),b
  3236                           
  3237                           ;main.c: 2115: for ( i = 0; i < 8; i++ ) {
  3238  003294  6BD1               	clrf	doActionToggle@i& (0+255),b
  3239  003296                     l10371:
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;main.c: 2118: if ( !( arg & (1 << i) ) ) continue;
  3243  003296  C0D1  F0CC         	movff	doActionToggle@i,??_doActionToggle
  3244  00329A  0E01               	movlw	1
  3245  00329C  6FCD               	movwf	(??_doActionToggle+1)& (0+255),b
  3246  00329E  2BCC               	incf	??_doActionToggle& (0+255),f,b
  3247  0032A0  D002               	goto	u13254
  3248  0032A2                     u13255:
  3249  0032A2  90D8               	bcf	status,0,c
  3250  0032A4  37CD               	rlcf	(??_doActionToggle+1)& (0+255),f,b
  3251  0032A6                     u13254:
  3252  0032A6  2FCC               	decfsz	??_doActionToggle& (0+255),f,b
  3253  0032A8  D7FC               	goto	u13255
  3254  0032AA  51CD               	movf	(??_doActionToggle+1)& (0+255),w,b
  3255  0032AC  1451               	andwf	doActionToggle@arg,w,c
  3256  0032AE  E07A               	bz	l10429
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;main.c: 2121: if ( dmflags & 0x08 ) {
  3260  0032B0  A7CE               	btfss	doActionToggle@dmflags& (0+255),3,b
  3261  0032B2  D00B               	goto	l10379
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;main.c: 2122: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3265                           ;main.c: 2123: 53 +
  3266                           ;main.c: 2124: i ) ) {
  3267  0032B4  0E78               	movlw	120
  3268  0032B6  25D1               	addwf	doActionToggle@i& (0+255),w,b
  3269  0032B8  6E08               	movwf	?_readEEPROM,c
  3270  0032BA  6A09               	clrf	?_readEEPROM+1,c
  3271  0032BC  0E00               	movlw	0
  3272  0032BE  2209               	addwfc	?_readEEPROM+1,f,c
  3273  0032C0  ECDB  F021         	call	_readEEPROM	;wreg free
  3274  0032C4  0100               	movlb	0	; () banked
  3275  0032C6  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3276  0032C8  E16D               	bnz	l10429
  3277  0032CA                     l10379:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 2126: }
  3281                           ;main.c: 2127: }
  3282                           ;main.c: 2129: val = readEEPROM(0x43 + 10 + i);
  3283  0032CA  0E4D               	movlw	77
  3284  0032CC  25D1               	addwf	doActionToggle@i& (0+255),w,b
  3285  0032CE  6E08               	movwf	?_readEEPROM,c
  3286  0032D0  6A09               	clrf	?_readEEPROM+1,c
  3287  0032D2  0E00               	movlw	0
  3288  0032D4  2209               	addwfc	?_readEEPROM+1,f,c
  3289  0032D6  ECDB  F021         	call	_readEEPROM	;wreg free
  3290  0032DA  0100               	movlb	0	; () banked
  3291  0032DC  6FCF               	movwf	doActionToggle@val& (0+255),b
  3292                           
  3293                           ;main.c: 2131: switch ( i ) {
  3294  0032DE  D02D               	goto	l10411
  3295  0032E0                     l542:
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;main.c: 2134: if ( LATBbits.LATB4 ) {
  3299  0032E0  A88A               	btfss	3978,4,c	;volatile
  3300  0032E2  D002               	goto	l543
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;main.c: 2135: LATBbits.LATB4 = 0;
  3304  0032E4  988A               	bcf	3978,4,c	;volatile
  3305  0032E6  D025               	goto	L12
  3306  0032E8                     l543:
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;main.c: 2138: LATBbits.LATB4 = 1;
  3310  0032E8  888A               	bsf	3978,4,c	;volatile
  3311  0032EA                     l10383:
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;main.c: 2139: bOn = 1;
  3315  0032EA  0E01               	movlw	1
  3316  0032EC  6FD0               	movwf	doActionToggle@bOn& (0+255),b
  3317  0032EE  D033               	goto	l10413
  3318  0032F0                     l546:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;main.c: 2144: if ( LATBbits.LATB1 ) {
  3322  0032F0  A28A               	btfss	3978,1,c	;volatile
  3323  0032F2  D002               	goto	l547
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;main.c: 2145: LATBbits.LATB1 = 0;
  3327  0032F4  928A               	bcf	3978,1,c	;volatile
  3328  0032F6  D01D               	goto	L12
  3329  0032F8                     l547:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;main.c: 2148: LATBbits.LATB1 = 1;
  3333  0032F8  828A               	bsf	3978,1,c	;volatile
  3334  0032FA  D7F7               	goto	l10383
  3335  0032FC                     l549:
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;main.c: 2154: if ( LATBbits.LATB0 ) {
  3339  0032FC  A08A               	btfss	3978,0,c	;volatile
  3340  0032FE  D002               	goto	l550
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;main.c: 2155: LATBbits.LATB0 = 0;
  3344  003300  908A               	bcf	3978,0,c	;volatile
  3345  003302  D017               	goto	L12
  3346  003304                     l550:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;main.c: 2158: LATBbits.LATB0 = 1;
  3350  003304  808A               	bsf	3978,0,c	;volatile
  3351  003306  D7F1               	goto	l10383
  3352  003308                     l552:
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;main.c: 2164: if ( LATCbits.LATC7 ) {
  3356  003308  AE8B               	btfss	3979,7,c	;volatile
  3357  00330A  D002               	goto	l553
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;main.c: 2165: LATCbits.LATC7 = 0;
  3361  00330C  9E8B               	bcf	3979,7,c	;volatile
  3362  00330E  D011               	goto	L12
  3363  003310                     l553:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;main.c: 2168: LATCbits.LATC7 = 1;
  3367  003310  8E8B               	bsf	3979,7,c	;volatile
  3368  003312  D7EB               	goto	l10383
  3369  003314                     l555:
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;main.c: 2174: if ( LATCbits.LATC6 ) {
  3373  003314  AC8B               	btfss	3979,6,c	;volatile
  3374  003316  D002               	goto	l556
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;main.c: 2175: LATCbits.LATC6 = 0;
  3378  003318  9C8B               	bcf	3979,6,c	;volatile
  3379  00331A  D00B               	goto	L12
  3380  00331C                     l556:
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;main.c: 2178: LATCbits.LATC6 = 1;
  3384  00331C  8C8B               	bsf	3979,6,c	;volatile
  3385  00331E  D7E5               	goto	l10383
  3386  003320                     l558:
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;main.c: 2184: if ( LATCbits.LATC5 ) {
  3390  003320  AA8B               	btfss	3979,5,c	;volatile
  3391  003322  D002               	goto	l559
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;main.c: 2185: LATCbits.LATC5 = 0;
  3395  003324  9A8B               	bcf	3979,5,c	;volatile
  3396  003326  D005               	goto	L12
  3397  003328                     l559:
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 2188: LATCbits.LATC5 = 1;
  3401  003328  8A8B               	bsf	3979,5,c	;volatile
  3402  00332A  D7DF               	goto	l10383
  3403  00332C                     l561:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;main.c: 2194: if ( LATCbits.LATC4 ) {
  3407  00332C  A88B               	btfss	3979,4,c	;volatile
  3408  00332E  D003               	goto	l562
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;main.c: 2195: LATCbits.LATC4 = 0;
  3412  003330  988B               	bcf	3979,4,c	;volatile
  3413  003332                     L12:
  3414                           
  3415                           ;main.c: 2196: bOn = 0;
  3416  003332  6BD0               	clrf	doActionToggle@bOn& (0+255),b
  3417                           
  3418                           ;main.c: 2197: } else {
  3419  003334  D010               	goto	l10413
  3420  003336                     l562:
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;main.c: 2198: LATCbits.LATC4 = 1;
  3424  003336  888B               	bsf	3979,4,c	;volatile
  3425  003338  D7D8               	goto	l10383
  3426  00333A                     l10411:
  3427                           
  3428                           ; BSR set to: 0
  3429  00333A  51D1               	movf	doActionToggle@i& (0+255),w,b
  3430                           
  3431                           ; Switch size 1, requested type "space"
  3432                           ; Number of cases is 7, Range of values is 0 to 6
  3433                           ; switch strategies available:
  3434                           ; Name         Instructions Cycles
  3435                           ; simple_byte           22    12 (average)
  3436                           ;	Chosen strategy is simple_byte
  3437  00333C  E0D1               	bz	l542
  3438  00333E  0A01               	xorlw	1	; case 1
  3439  003340  E0D7               	bz	l546
  3440  003342  0A03               	xorlw	3	; case 2
  3441  003344  E0DB               	bz	l549
  3442  003346  0A01               	xorlw	1	; case 3
  3443  003348  E0DF               	bz	l552
  3444  00334A  0A07               	xorlw	7	; case 4
  3445  00334C  E0E3               	bz	l555
  3446  00334E  0A01               	xorlw	1	; case 5
  3447  003350  E0E7               	bz	l558
  3448  003352  0A03               	xorlw	3	; case 6
  3449  003354  E0EB               	bz	l561
  3450  003356                     l10413:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;main.c: 2205: if ( bOn ) {
  3454  003356  51D0               	movf	doActionToggle@bOn& (0+255),w,b
  3455  003358  E013               	bz	l564
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;main.c: 2208: if ( val & 0x08 ) {
  3459  00335A  A7CF               	btfss	doActionToggle@val& (0+255),3,b
  3460  00335C  D007               	goto	l10419
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;main.c: 2209: SendInformationEvent( i, 20, 3 );
  3464  00335E  0E14               	movlw	20
  3465  003360  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3466  003362  0E03               	movlw	3
  3467  003364  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3468  003366  51D1               	movf	doActionToggle@i& (0+255),w,b
  3469  003368  EC52  F01F         	call	_SendInformationEvent
  3470  00336C                     l10419:
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;main.c: 2210: }
  3474                           ;main.c: 2213: if ( val & 0x20 ) {
  3475  00336C  ABCF               	btfss	doActionToggle@val& (0+255),5,b
  3476  00336E  D01A               	goto	l10429
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;main.c: 2214: SendInformationEvent( i, 20, 25 );
  3480  003370  0E14               	movlw	20
  3481  003372  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3482  003374  0E19               	movlw	25
  3483  003376  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3484  003378  51D1               	movf	doActionToggle@i& (0+255),w,b
  3485  00337A  EC52  F01F         	call	_SendInformationEvent
  3486  00337E  D012               	goto	l10429
  3487  003380                     l564:
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;main.c: 2218: else {
  3491                           ;main.c: 2221: if ( val & 0x10 ) {
  3492  003380  A9CF               	btfss	doActionToggle@val& (0+255),4,b
  3493  003382  D007               	goto	l10425
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;main.c: 2222: SendInformationEvent( i, 20, 4 );
  3497  003384  0E14               	movlw	20
  3498  003386  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3499  003388  0E04               	movlw	4
  3500  00338A  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3501  00338C  51D1               	movf	doActionToggle@i& (0+255),w,b
  3502  00338E  EC52  F01F         	call	_SendInformationEvent
  3503  003392                     l10425:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;main.c: 2223: }
  3507                           ;main.c: 2226: if (val & 0x40 ) {
  3508  003392  ADCF               	btfss	doActionToggle@val& (0+255),6,b
  3509  003394  D007               	goto	l10429
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;main.c: 2227: SendInformationEvent( i, 20, 24 );
  3513  003396  0E14               	movlw	20
  3514  003398  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3515  00339A  0E18               	movlw	24
  3516  00339C  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3517  00339E  51D1               	movf	doActionToggle@i& (0+255),w,b
  3518  0033A0  EC52  F01F         	call	_SendInformationEvent
  3519  0033A4                     l10429:
  3520                           
  3521                           ; BSR set to: 0
  3522  0033A4  2BD1               	incf	doActionToggle@i& (0+255),f,b
  3523                           
  3524                           ; BSR set to: 0
  3525  0033A6  0E07               	movlw	7
  3526  0033A8  65D1               	cpfsgt	doActionToggle@i& (0+255),b
  3527  0033AA  D775               	goto	l10371
  3528  0033AC  0C07               	retlw	7
  3529  0033AE                     __end_of_doActionToggle:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           intcon	equ	0xFF2
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           indf1	equ	0xFE7
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _doActionDisable *****************
  3552 ;; Defined at:
  3553 ;;		line 2079 in file "../main.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  dmflags         1    wreg     unsigned char 
  3556 ;;  arg             1   10[COMRAM] unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  dmflags         1   13[COMRAM] unsigned char 
  3559 ;;  i               1   15[COMRAM] unsigned char 
  3560 ;;  val             1   14[COMRAM] unsigned char 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;		None               void
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0, cstack
  3565 ;; Tracked objects:
  3566 ;;		On entry : F/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3570 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3571 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3572 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3573 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3574 ;;Total ram usage:        6 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    3
  3577 ;; This function calls:
  3578 ;;		_writeEEPROM
  3579 ;;		_readEEPROM
  3580 ;; This function is called by:
  3581 ;;		_doDM
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text10
  3586  003E38                     __ptext10:
  3587                           	opt stack 0
  3588  003E38                     _doActionDisable:
  3589                           	opt stack 25
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;incstack = 0
  3593                           ;incstack = 0
  3594                           ;doActionDisable@dmflags stored from wreg
  3595  003E38  CFE8 F00E          	movff	wreg,doActionDisable@dmflags
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;main.c: 2081: unsigned char i;
  3599                           ;main.c: 2082: unsigned char val;
  3600                           ;main.c: 2084: for ( i = 0; i < 8; i++ ) {
  3601  003E3C  6A10               	clrf	doActionDisable@i,c
  3602  003E3E                     l8709:
  3603                           
  3604                           ;main.c: 2087: if ( !( arg & (1 << i) ) ) continue;
  3605  003E3E  C010  F00C         	movff	doActionDisable@i,??_doActionDisable
  3606  003E42  0E01               	movlw	1
  3607  003E44  6E0D               	movwf	(??_doActionDisable+1)& (0+255),c
  3608  003E46  2A0C               	incf	??_doActionDisable,f,c
  3609  003E48  D002               	goto	u10394
  3610  003E4A                     u10395:
  3611  003E4A  90D8               	bcf	status,0,c
  3612  003E4C  360D               	rlcf	??_doActionDisable+1,f,c
  3613  003E4E                     u10394:
  3614  003E4E  2E0C               	decfsz	??_doActionDisable,f,c
  3615  003E50  D7FC               	goto	u10395
  3616  003E52  500D               	movf	??_doActionDisable+1,w,c
  3617  003E54  140B               	andwf	doActionDisable@arg,w,c
  3618  003E56  E021               	bz	l8719
  3619                           
  3620                           ;main.c: 2090: if ( dmflags & 0x08) {
  3621  003E58  A60E               	btfss	doActionDisable@dmflags,3,c
  3622  003E5A  D00B               	goto	l8717
  3623                           
  3624                           ;main.c: 2091: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3625                           ;main.c: 2092: 53 +
  3626                           ;main.c: 2093: i ) ) {
  3627  003E5C  0E78               	movlw	120
  3628  003E5E  2410               	addwf	doActionDisable@i,w,c
  3629  003E60  6E08               	movwf	?_readEEPROM,c
  3630  003E62  6A09               	clrf	?_readEEPROM+1,c
  3631  003E64  0E00               	movlw	0
  3632  003E66  2209               	addwfc	?_readEEPROM+1,f,c
  3633  003E68  ECDB  F021         	call	_readEEPROM	;wreg free
  3634  003E6C  0100               	movlb	0	; () banked
  3635  003E6E  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3636  003E70  E114               	bnz	l8719
  3637  003E72                     l8717:
  3638                           
  3639                           ;main.c: 2095: }
  3640                           ;main.c: 2096: }
  3641                           ;main.c: 2098: val = readEEPROM( 0x43 + 10 + i );
  3642  003E72  0E4D               	movlw	77
  3643  003E74  2410               	addwf	doActionDisable@i,w,c
  3644  003E76  6E08               	movwf	?_readEEPROM,c
  3645  003E78  6A09               	clrf	?_readEEPROM+1,c
  3646  003E7A  0E00               	movlw	0
  3647  003E7C  2209               	addwfc	?_readEEPROM+1,f,c
  3648  003E7E  ECDB  F021         	call	_readEEPROM	;wreg free
  3649  003E82  6E0F               	movwf	doActionDisable@val,c
  3650                           
  3651                           ;main.c: 2099: writeEEPROM( 0x43 + 10 + i, val & ~0x80 );
  3652  003E84  0E4D               	movlw	77
  3653  003E86  2410               	addwf	doActionDisable@i,w,c
  3654  003E88  6E08               	movwf	?_writeEEPROM,c
  3655  003E8A  6A09               	clrf	?_writeEEPROM+1,c
  3656  003E8C  0E00               	movlw	0
  3657  003E8E  2209               	addwfc	?_writeEEPROM+1,f,c
  3658  003E90  500F               	movf	doActionDisable@val,w,c
  3659  003E92  0B7F               	andlw	127
  3660  003E94  6E0A               	movwf	?_writeEEPROM+2,c
  3661  003E96  ECBA  F020         	call	_writeEEPROM	;wreg free
  3662  003E9A                     l8719:
  3663  003E9A  2A10               	incf	doActionDisable@i,f,c
  3664  003E9C  0E07               	movlw	7
  3665  003E9E  6410               	cpfsgt	doActionDisable@i,c
  3666  003EA0  D7CE               	goto	l8709
  3667  003EA2  0C07               	retlw	7
  3668  003EA4                     __end_of_doActionDisable:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           tblptrh	equ	0xFF7
  3672                           tblptrl	equ	0xFF6
  3673                           tablat	equ	0xFF5
  3674                           prodh	equ	0xFF4
  3675                           prodl	equ	0xFF3
  3676                           intcon	equ	0xFF2
  3677                           postinc0	equ	0xFEE
  3678                           wreg	equ	0xFE8
  3679                           indf1	equ	0xFE7
  3680                           fsr1h	equ	0xFE2
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           plusw2	equ	0xFDB
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _doActionStatus *****************
  3691 ;; Defined at:
  3692 ;;		line 1990 in file "../main.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  dmflags         1    wreg     unsigned char 
  3695 ;;  arg             1   80[COMRAM] unsigned char 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  dmflags         1   24[BANK0 ] unsigned char 
  3698 ;;  i               1   27[BANK0 ] unsigned char 
  3699 ;;  val             1   26[BANK0 ] unsigned char 
  3700 ;;  bOn             1   25[BANK0 ] enum E18242
  3701 ;; Return value:  Size  Location     Type
  3702 ;;		None               void
  3703 ;; Registers used:
  3704 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : F/0
  3707 ;;		On exit  : F/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3710 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3711 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3713 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3714 ;;Total ram usage:        7 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    7
  3717 ;; This function calls:
  3718 ;;		_readEEPROM
  3719 ;;		_SendInformationEvent
  3720 ;; This function is called by:
  3721 ;;		_doDM
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text11
  3726  0035E0                     __ptext11:
  3727                           	opt stack 0
  3728  0035E0                     _doActionStatus:
  3729                           	opt stack 21
  3730                           
  3731                           ;incstack = 0
  3732                           ;incstack = 0
  3733                           ;doActionStatus@dmflags stored from wreg
  3734  0035E0  CFE8 F0CE          	movff	wreg,doActionStatus@dmflags
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;main.c: 1992: unsigned char i;
  3738                           ;main.c: 1993: unsigned char val;
  3739                           ;main.c: 1994: BOOL bOn = 0;
  3740  0035E4  6BCF               	clrf	doActionStatus@bOn& (0+255),b
  3741                           
  3742                           ;main.c: 1996: for (i = 0; i < 8; i++) {
  3743  0035E6  6BD1               	clrf	doActionStatus@i& (0+255),b
  3744  0035E8                     l10317:
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;main.c: 1999: if (!(arg & (1 << i))) continue;
  3748  0035E8  C0D1  F0CC         	movff	doActionStatus@i,??_doActionStatus
  3749  0035EC  0E01               	movlw	1
  3750  0035EE  6FCD               	movwf	(??_doActionStatus+1)& (0+255),b
  3751  0035F0  2BCC               	incf	??_doActionStatus& (0+255),f,b
  3752  0035F2  D002               	goto	u13154
  3753  0035F4                     u13155:
  3754  0035F4  90D8               	bcf	status,0,c
  3755  0035F6  37CD               	rlcf	(??_doActionStatus+1)& (0+255),f,b
  3756  0035F8                     u13154:
  3757  0035F8  2FCC               	decfsz	??_doActionStatus& (0+255),f,b
  3758  0035FA  D7FC               	goto	u13155
  3759  0035FC  51CD               	movf	(??_doActionStatus+1)& (0+255),w,b
  3760  0035FE  1451               	andwf	doActionStatus@arg,w,c
  3761  003600  E070               	bz	l10361
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;main.c: 2002: if (dmflags & 0x08) {
  3765  003602  A7CE               	btfss	doActionStatus@dmflags& (0+255),3,b
  3766  003604  D00B               	goto	l10325
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;main.c: 2003: if (vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  3770                           ;main.c: 2004: 53 +
  3771                           ;main.c: 2005: i ) ) {
  3772  003606  0E78               	movlw	120
  3773  003608  25D1               	addwf	doActionStatus@i& (0+255),w,b
  3774  00360A  6E08               	movwf	?_readEEPROM,c
  3775  00360C  6A09               	clrf	?_readEEPROM+1,c
  3776  00360E  0E00               	movlw	0
  3777  003610  2209               	addwfc	?_readEEPROM+1,f,c
  3778  003612  ECDB  F021         	call	_readEEPROM	;wreg free
  3779  003616  0100               	movlb	0	; () banked
  3780  003618  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  3781  00361A  E163               	bnz	l10361
  3782  00361C                     l10325:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;main.c: 2007: }
  3786                           ;main.c: 2008: }
  3787                           ;main.c: 2010: val = readEEPROM( 0x43 + 10 + i );
  3788  00361C  0E4D               	movlw	77
  3789  00361E  25D1               	addwf	doActionStatus@i& (0+255),w,b
  3790  003620  6E08               	movwf	?_readEEPROM,c
  3791  003622  6A09               	clrf	?_readEEPROM+1,c
  3792  003624  0E00               	movlw	0
  3793  003626  2209               	addwfc	?_readEEPROM+1,f,c
  3794  003628  ECDB  F021         	call	_readEEPROM	;wreg free
  3795  00362C  0100               	movlb	0	; () banked
  3796  00362E  6FD0               	movwf	doActionStatus@val& (0+255),b
  3797                           
  3798                           ;main.c: 2012: switch (i) {
  3799  003630  D023               	goto	l10343
  3800  003632                     l10327:
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;main.c: 2015: bOn = LATBbits.LATB4;
  3804  003632  0E00               	movlw	0
  3805  003634  B88A               	btfsc	3978,4,c	;volatile
  3806  003636  0E01               	movlw	1
  3807  003638  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3808                           
  3809                           ;main.c: 2016: break;
  3810  00363A  D02C               	goto	l10345
  3811  00363C                     l10329:
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;main.c: 2019: bOn = LATBbits.LATB1;
  3815  00363C  0E00               	movlw	0
  3816  00363E  B28A               	btfsc	3978,1,c	;volatile
  3817  003640  0E01               	movlw	1
  3818  003642  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3819                           
  3820                           ;main.c: 2020: break;
  3821  003644  D027               	goto	l10345
  3822  003646                     l10331:
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;main.c: 2023: bOn = LATBbits.LATB0;
  3826  003646  0E00               	movlw	0
  3827  003648  B08A               	btfsc	3978,0,c	;volatile
  3828  00364A  0E01               	movlw	1
  3829  00364C  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3830                           
  3831                           ;main.c: 2024: break;
  3832  00364E  D022               	goto	l10345
  3833  003650                     l10333:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;main.c: 2027: bOn = LATCbits.LATC7;
  3837  003650  0E00               	movlw	0
  3838  003652  BE8B               	btfsc	3979,7,c	;volatile
  3839  003654  0E01               	movlw	1
  3840  003656  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3841                           
  3842                           ;main.c: 2028: break;
  3843  003658  D01D               	goto	l10345
  3844  00365A                     l10335:
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;main.c: 2031: bOn = LATCbits.LATC6;
  3848  00365A  0E00               	movlw	0
  3849  00365C  BC8B               	btfsc	3979,6,c	;volatile
  3850  00365E  0E01               	movlw	1
  3851  003660  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3852                           
  3853                           ;main.c: 2032: break;
  3854  003662  D018               	goto	l10345
  3855  003664                     l10337:
  3856                           
  3857                           ; BSR set to: 0
  3858                           ;main.c: 2035: bOn = LATCbits.LATC5;
  3859  003664  0E00               	movlw	0
  3860  003666  BA8B               	btfsc	3979,5,c	;volatile
  3861  003668  0E01               	movlw	1
  3862  00366A  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3863                           
  3864                           ;main.c: 2036: break;
  3865  00366C  D013               	goto	l10345
  3866  00366E                     l10339:
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;main.c: 2039: bOn = LATCbits.LATC4;
  3870  00366E  0E00               	movlw	0
  3871  003670  B88B               	btfsc	3979,4,c	;volatile
  3872  003672  0E01               	movlw	1
  3873  003674  6FCF               	movwf	doActionStatus@bOn& (0+255),b
  3874                           
  3875                           ;main.c: 2040: break;
  3876  003676  D00E               	goto	l10345
  3877  003678                     l10343:
  3878                           
  3879                           ; BSR set to: 0
  3880  003678  51D1               	movf	doActionStatus@i& (0+255),w,b
  3881                           
  3882                           ; Switch size 1, requested type "space"
  3883                           ; Number of cases is 7, Range of values is 0 to 6
  3884                           ; switch strategies available:
  3885                           ; Name         Instructions Cycles
  3886                           ; simple_byte           22    12 (average)
  3887                           ;	Chosen strategy is simple_byte
  3888  00367A  E0DB               	bz	l10327
  3889  00367C  0A01               	xorlw	1	; case 1
  3890  00367E  E0DE               	bz	l10329
  3891  003680  0A03               	xorlw	3	; case 2
  3892  003682  E0E1               	bz	l10331
  3893  003684  0A01               	xorlw	1	; case 3
  3894  003686  E0E4               	bz	l10333
  3895  003688  0A07               	xorlw	7	; case 4
  3896  00368A  E0E7               	bz	l10335
  3897  00368C  0A01               	xorlw	1	; case 5
  3898  00368E  E0EA               	bz	l10337
  3899  003690  0A03               	xorlw	3	; case 6
  3900  003692  E0ED               	bz	l10339
  3901  003694                     l10345:
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;main.c: 2044: if (bOn) {
  3905  003694  51CF               	movf	doActionStatus@bOn& (0+255),w,b
  3906  003696  E013               	bz	l517
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;main.c: 2047: if ( val & 0x10 ) {
  3910  003698  A9D0               	btfss	doActionStatus@val& (0+255),4,b
  3911  00369A  D007               	goto	l10351
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;main.c: 2048: SendInformationEvent( i, 20, 4 );
  3915  00369C  0E14               	movlw	20
  3916  00369E  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3917  0036A0  0E04               	movlw	4
  3918  0036A2  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3919  0036A4  51D1               	movf	doActionStatus@i& (0+255),w,b
  3920  0036A6  EC52  F01F         	call	_SendInformationEvent
  3921  0036AA                     l10351:
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;main.c: 2049: }
  3925                           ;main.c: 2052: if ( val & 0x40 ) {
  3926  0036AA  ADD0               	btfss	doActionStatus@val& (0+255),6,b
  3927  0036AC  D01A               	goto	l10361
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;main.c: 2053: SendInformationEvent( i, 20, 24 );
  3931  0036AE  0E14               	movlw	20
  3932  0036B0  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3933  0036B2  0E18               	movlw	24
  3934  0036B4  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3935  0036B6  51D1               	movf	doActionStatus@i& (0+255),w,b
  3936  0036B8  EC52  F01F         	call	_SendInformationEvent
  3937  0036BC  D012               	goto	l10361
  3938  0036BE                     l517:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;main.c: 2057: else {
  3942                           ;main.c: 2060: if ( val & 0x10 ) {
  3943  0036BE  A9D0               	btfss	doActionStatus@val& (0+255),4,b
  3944  0036C0  D007               	goto	l10357
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;main.c: 2061: SendInformationEvent( i, 20, 4 );
  3948  0036C2  0E14               	movlw	20
  3949  0036C4  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3950  0036C6  0E04               	movlw	4
  3951  0036C8  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3952  0036CA  51D1               	movf	doActionStatus@i& (0+255),w,b
  3953  0036CC  EC52  F01F         	call	_SendInformationEvent
  3954  0036D0                     l10357:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;main.c: 2062: }
  3958                           ;main.c: 2065: if ( val & 0x40 ) {
  3959  0036D0  ADD0               	btfss	doActionStatus@val& (0+255),6,b
  3960  0036D2  D007               	goto	l10361
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;main.c: 2066: SendInformationEvent( i, 20, 24 );
  3964  0036D4  0E14               	movlw	20
  3965  0036D6  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  3966  0036D8  0E18               	movlw	24
  3967  0036DA  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  3968  0036DC  51D1               	movf	doActionStatus@i& (0+255),w,b
  3969  0036DE  EC52  F01F         	call	_SendInformationEvent
  3970  0036E2                     l10361:
  3971                           
  3972                           ; BSR set to: 0
  3973  0036E2  2BD1               	incf	doActionStatus@i& (0+255),f,b
  3974                           
  3975                           ; BSR set to: 0
  3976  0036E4  0E07               	movlw	7
  3977  0036E6  65D1               	cpfsgt	doActionStatus@i& (0+255),b
  3978  0036E8  D77F               	goto	l10317
  3979  0036EA  0C07               	retlw	7
  3980  0036EC                     __end_of_doActionStatus:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           prodh	equ	0xFF4
  3987                           prodl	equ	0xFF3
  3988                           intcon	equ	0xFF2
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           indf1	equ	0xFE7
  3992                           fsr1h	equ	0xFE2
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           plusw2	equ	0xFDB
  3998                           fsr2h	equ	0xFDA
  3999                           fsr2l	equ	0xFD9
  4000                           status	equ	0xFD8
  4001                           
  4002 ;; *************** function _doActionPulse *****************
  4003 ;; Defined at:
  4004 ;;		line 1899 in file "../main.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  dmflags         1    wreg     unsigned char 
  4007 ;;  arg             1   10[COMRAM] unsigned char 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  dmflags         1   14[COMRAM] unsigned char 
  4010 ;;  i               1   16[COMRAM] unsigned char 
  4011 ;;  val             1   15[COMRAM] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;		None               void
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : F/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4021 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4022 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4023 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4024 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4025 ;;Total ram usage:        7 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    3
  4028 ;; This function calls:
  4029 ;;		_readEEPROM
  4030 ;; This function is called by:
  4031 ;;		_doDM
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text12
  4036  002DBC                     __ptext12:
  4037                           	opt stack 0
  4038  002DBC                     _doActionPulse:
  4039                           	opt stack 25
  4040                           
  4041                           ; BSR set to: 0
  4042                           ;incstack = 0
  4043                           ;incstack = 0
  4044                           ;doActionPulse@dmflags stored from wreg
  4045  002DBC  CFE8 F00F          	movff	wreg,doActionPulse@dmflags
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;main.c: 1901: unsigned char i;
  4049                           ;main.c: 1902: unsigned char val;
  4050                           ;main.c: 1904: for ( i = 0; i < 8; i++ ) {
  4051  002DC0  6A11               	clrf	doActionPulse@i,c
  4052  002DC2                     l8599:
  4053                           
  4054                           ;main.c: 1907: if ( !( arg & ( 1 << i ) ) ) continue;
  4055  002DC2  C011  F00C         	movff	doActionPulse@i,??_doActionPulse
  4056  002DC6  0E01               	movlw	1
  4057  002DC8  6E0D               	movwf	(??_doActionPulse+1)& (0+255),c
  4058  002DCA  2A0C               	incf	??_doActionPulse,f,c
  4059  002DCC  D002               	goto	u10234
  4060  002DCE                     u10235:
  4061  002DCE  90D8               	bcf	status,0,c
  4062  002DD0  360D               	rlcf	??_doActionPulse+1,f,c
  4063  002DD2                     u10234:
  4064  002DD2  2E0C               	decfsz	??_doActionPulse,f,c
  4065  002DD4  D7FC               	goto	u10235
  4066  002DD6  500D               	movf	??_doActionPulse+1,w,c
  4067  002DD8  140B               	andwf	doActionPulse@arg,w,c
  4068  002DDA  E101 D0D2          	bz	l8645
  4069                           
  4070                           ;main.c: 1910: if (dmflags & 0x08) {
  4071  002DDE  A60F               	btfss	doActionPulse@dmflags,3,c
  4072  002DE0  D00C               	goto	l8607
  4073                           
  4074                           ;main.c: 1911: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4075                           ;main.c: 1912: 53 +
  4076                           ;main.c: 1913: i ) ) {
  4077  002DE2  0E78               	movlw	120
  4078  002DE4  2411               	addwf	doActionPulse@i,w,c
  4079  002DE6  6E08               	movwf	?_readEEPROM,c
  4080  002DE8  6A09               	clrf	?_readEEPROM+1,c
  4081  002DEA  0E00               	movlw	0
  4082  002DEC  2209               	addwfc	?_readEEPROM+1,f,c
  4083  002DEE  ECDB  F021         	call	_readEEPROM	;wreg free
  4084  002DF2  0100               	movlb	0	; () banked
  4085  002DF4  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4086  002DF6  E001 D0C4          	bnz	l8645
  4087  002DFA                     l8607:
  4088                           
  4089                           ;main.c: 1915: }
  4090                           ;main.c: 1916: }
  4091                           ;main.c: 1918: val = readEEPROM( 0x43 + 10 + i );
  4092  002DFA  0E4D               	movlw	77
  4093  002DFC  2411               	addwf	doActionPulse@i,w,c
  4094  002DFE  6E08               	movwf	?_readEEPROM,c
  4095  002E00  6A09               	clrf	?_readEEPROM+1,c
  4096  002E02  0E00               	movlw	0
  4097  002E04  2209               	addwfc	?_readEEPROM+1,f,c
  4098  002E06  ECDB  F021         	call	_readEEPROM	;wreg free
  4099  002E0A  6E10               	movwf	doActionPulse@val,c
  4100                           
  4101                           ;main.c: 1921: if ( !( val & 0x80 ) ) continue;
  4102  002E0C  AE10               	btfss	doActionPulse@val,7,c
  4103  002E0E  D0B9               	goto	l8645
  4104  002E10  D0A8               	goto	l8643
  4105  002E12                     l491:
  4106                           
  4107                           ;main.c: 1926: LATBbits.LATB4 = 0;
  4108  002E12  988A               	bcf	3978,4,c	;volatile
  4109                           
  4110                           ;main.c: 1927: relay_pulse_flags |= 0x01;
  4111  002E14  0100               	movlb	0	; () banked
  4112  002E16  818F               	bsf	_relay_pulse_flags& (0+255),0,b
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;main.c: 1928: relay_pulse_timer[ 0 ] =
  4116                           ;main.c: 1929: readEEPROM( 0x43 + 18 ) * 256 +
  4117                           ;main.c: 1930: readEEPROM( 0x43 + 19 );
  4118  002E18  6A09               	clrf	?_readEEPROM+1,c
  4119  002E1A  0E56               	movlw	86
  4120  002E1C  6E08               	movwf	?_readEEPROM,c
  4121  002E1E  ECDB  F021         	call	_readEEPROM	;wreg free
  4122  002E22  6E0C               	movwf	??_doActionPulse& (0+255),c
  4123  002E24  6A09               	clrf	?_readEEPROM+1,c
  4124  002E26  0E55               	movlw	85
  4125  002E28  6E08               	movwf	?_readEEPROM,c
  4126  002E2A  ECDB  F021         	call	_readEEPROM	;wreg free
  4127  002E2E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4128  002E30  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4129  002E32  500C               	movf	??_doActionPulse,w,c
  4130  002E34  240D               	addwf	??_doActionPulse+1,w,c
  4131  002E36  0100               	movlb	0	; () banked
  4132  002E38  6F70               	movwf	_relay_pulse_timer& (0+255),b
  4133  002E3A  0E00               	movlw	0
  4134  002E3C  200E               	addwfc	??_doActionPulse+2,w,c
  4135  002E3E  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  4136                           
  4137                           ;main.c: 1931: break;
  4138  002E40  D0A0               	goto	l8645
  4139  002E42                     l493:
  4140                           
  4141                           ;main.c: 1934: LATBbits.LATB1 = 0;
  4142  002E42  928A               	bcf	3978,1,c	;volatile
  4143                           
  4144                           ;main.c: 1935: relay_pulse_flags |= 0x02;
  4145  002E44  0100               	movlb	0	; () banked
  4146  002E46  838F               	bsf	_relay_pulse_flags& (0+255),1,b
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;main.c: 1936: relay_pulse_timer[ 1 ] =
  4150                           ;main.c: 1937: readEEPROM( 0x43 + 20 ) * 256 +
  4151                           ;main.c: 1938: readEEPROM( 0x43 + 21 );
  4152  002E48  6A09               	clrf	?_readEEPROM+1,c
  4153  002E4A  0E58               	movlw	88
  4154  002E4C  6E08               	movwf	?_readEEPROM,c
  4155  002E4E  ECDB  F021         	call	_readEEPROM	;wreg free
  4156  002E52  6E0C               	movwf	??_doActionPulse& (0+255),c
  4157  002E54  6A09               	clrf	?_readEEPROM+1,c
  4158  002E56  0E57               	movlw	87
  4159  002E58  6E08               	movwf	?_readEEPROM,c
  4160  002E5A  ECDB  F021         	call	_readEEPROM	;wreg free
  4161  002E5E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4162  002E60  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4163  002E62  500C               	movf	??_doActionPulse,w,c
  4164  002E64  240D               	addwf	??_doActionPulse+1,w,c
  4165  002E66  0100               	movlb	0	; () banked
  4166  002E68  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  4167  002E6A  0E00               	movlw	0
  4168  002E6C  200E               	addwfc	??_doActionPulse+2,w,c
  4169  002E6E  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  4170                           
  4171                           ;main.c: 1939: break;
  4172  002E70  D088               	goto	l8645
  4173  002E72                     l494:
  4174                           
  4175                           ;main.c: 1942: LATBbits.LATB0 = 0;
  4176  002E72  908A               	bcf	3978,0,c	;volatile
  4177                           
  4178                           ;main.c: 1943: relay_pulse_flags |= 0x04;
  4179  002E74  0100               	movlb	0	; () banked
  4180  002E76  858F               	bsf	_relay_pulse_flags& (0+255),2,b
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;main.c: 1944: relay_pulse_timer[ 2 ] =
  4184                           ;main.c: 1945: readEEPROM( 0x43 + 22 ) * 256 +
  4185                           ;main.c: 1946: readEEPROM( 0x43 + 23 );
  4186  002E78  6A09               	clrf	?_readEEPROM+1,c
  4187  002E7A  0E5A               	movlw	90
  4188  002E7C  6E08               	movwf	?_readEEPROM,c
  4189  002E7E  ECDB  F021         	call	_readEEPROM	;wreg free
  4190  002E82  6E0C               	movwf	??_doActionPulse& (0+255),c
  4191  002E84  6A09               	clrf	?_readEEPROM+1,c
  4192  002E86  0E59               	movlw	89
  4193  002E88  6E08               	movwf	?_readEEPROM,c
  4194  002E8A  ECDB  F021         	call	_readEEPROM	;wreg free
  4195  002E8E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4196  002E90  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4197  002E92  500C               	movf	??_doActionPulse,w,c
  4198  002E94  240D               	addwf	??_doActionPulse+1,w,c
  4199  002E96  0100               	movlb	0	; () banked
  4200  002E98  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  4201  002E9A  0E00               	movlw	0
  4202  002E9C  200E               	addwfc	??_doActionPulse+2,w,c
  4203  002E9E  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  4204                           
  4205                           ;main.c: 1947: break;
  4206  002EA0  D070               	goto	l8645
  4207  002EA2                     l495:
  4208                           
  4209                           ;main.c: 1950: LATCbits.LATC7 = 0;
  4210  002EA2  9E8B               	bcf	3979,7,c	;volatile
  4211                           
  4212                           ;main.c: 1951: relay_pulse_flags |= 0x08;
  4213  002EA4  0100               	movlb	0	; () banked
  4214  002EA6  878F               	bsf	_relay_pulse_flags& (0+255),3,b
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;main.c: 1952: relay_pulse_timer[ 3 ] =
  4218                           ;main.c: 1953: readEEPROM( 0x43 + 24 ) * 256 +
  4219                           ;main.c: 1954: readEEPROM( 0x43 + 25 );
  4220  002EA8  6A09               	clrf	?_readEEPROM+1,c
  4221  002EAA  0E5C               	movlw	92
  4222  002EAC  6E08               	movwf	?_readEEPROM,c
  4223  002EAE  ECDB  F021         	call	_readEEPROM	;wreg free
  4224  002EB2  6E0C               	movwf	??_doActionPulse& (0+255),c
  4225  002EB4  6A09               	clrf	?_readEEPROM+1,c
  4226  002EB6  0E5B               	movlw	91
  4227  002EB8  6E08               	movwf	?_readEEPROM,c
  4228  002EBA  ECDB  F021         	call	_readEEPROM	;wreg free
  4229  002EBE  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4230  002EC0  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4231  002EC2  500C               	movf	??_doActionPulse,w,c
  4232  002EC4  240D               	addwf	??_doActionPulse+1,w,c
  4233  002EC6  0100               	movlb	0	; () banked
  4234  002EC8  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  4235  002ECA  0E00               	movlw	0
  4236  002ECC  200E               	addwfc	??_doActionPulse+2,w,c
  4237  002ECE  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  4238                           
  4239                           ;main.c: 1955: break;
  4240  002ED0  D058               	goto	l8645
  4241  002ED2                     l496:
  4242                           
  4243                           ;main.c: 1958: LATCbits.LATC6 = 0;
  4244  002ED2  9C8B               	bcf	3979,6,c	;volatile
  4245                           
  4246                           ;main.c: 1959: relay_pulse_flags |= 0x10;
  4247  002ED4  0100               	movlb	0	; () banked
  4248  002ED6  898F               	bsf	_relay_pulse_flags& (0+255),4,b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;main.c: 1960: relay_pulse_timer[ 4 ] =
  4252                           ;main.c: 1961: readEEPROM( 0x43 + 26 ) * 256 +
  4253                           ;main.c: 1962: readEEPROM( 0x43 + 27 );
  4254  002ED8  6A09               	clrf	?_readEEPROM+1,c
  4255  002EDA  0E5E               	movlw	94
  4256  002EDC  6E08               	movwf	?_readEEPROM,c
  4257  002EDE  ECDB  F021         	call	_readEEPROM	;wreg free
  4258  002EE2  6E0C               	movwf	??_doActionPulse& (0+255),c
  4259  002EE4  6A09               	clrf	?_readEEPROM+1,c
  4260  002EE6  0E5D               	movlw	93
  4261  002EE8  6E08               	movwf	?_readEEPROM,c
  4262  002EEA  ECDB  F021         	call	_readEEPROM	;wreg free
  4263  002EEE  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4264  002EF0  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4265  002EF2  500C               	movf	??_doActionPulse,w,c
  4266  002EF4  240D               	addwf	??_doActionPulse+1,w,c
  4267  002EF6  0100               	movlb	0	; () banked
  4268  002EF8  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  4269  002EFA  0E00               	movlw	0
  4270  002EFC  200E               	addwfc	??_doActionPulse+2,w,c
  4271  002EFE  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  4272                           
  4273                           ;main.c: 1963: break;
  4274  002F00  D040               	goto	l8645
  4275  002F02                     l497:
  4276                           
  4277                           ;main.c: 1966: LATCbits.LATC5 = 0;
  4278  002F02  9A8B               	bcf	3979,5,c	;volatile
  4279                           
  4280                           ;main.c: 1967: relay_pulse_flags |= 0x20;
  4281  002F04  0100               	movlb	0	; () banked
  4282  002F06  8B8F               	bsf	_relay_pulse_flags& (0+255),5,b
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;main.c: 1968: relay_pulse_timer[ 5 ] =
  4286                           ;main.c: 1969: readEEPROM( 0x43 + 28 ) * 256 +
  4287                           ;main.c: 1970: readEEPROM( 0x43 + 29 );
  4288  002F08  6A09               	clrf	?_readEEPROM+1,c
  4289  002F0A  0E60               	movlw	96
  4290  002F0C  6E08               	movwf	?_readEEPROM,c
  4291  002F0E  ECDB  F021         	call	_readEEPROM	;wreg free
  4292  002F12  6E0C               	movwf	??_doActionPulse& (0+255),c
  4293  002F14  6A09               	clrf	?_readEEPROM+1,c
  4294  002F16  0E5F               	movlw	95
  4295  002F18  6E08               	movwf	?_readEEPROM,c
  4296  002F1A  ECDB  F021         	call	_readEEPROM	;wreg free
  4297  002F1E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4298  002F20  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4299  002F22  500C               	movf	??_doActionPulse,w,c
  4300  002F24  240D               	addwf	??_doActionPulse+1,w,c
  4301  002F26  0100               	movlb	0	; () banked
  4302  002F28  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  4303  002F2A  0E00               	movlw	0
  4304  002F2C  200E               	addwfc	??_doActionPulse+2,w,c
  4305  002F2E  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  4306                           
  4307                           ;main.c: 1971: break;
  4308  002F30  D028               	goto	l8645
  4309  002F32                     l498:
  4310                           
  4311                           ;main.c: 1974: LATCbits.LATC4 = 0;
  4312  002F32  988B               	bcf	3979,4,c	;volatile
  4313                           
  4314                           ;main.c: 1975: relay_pulse_flags |= 0x40;
  4315  002F34  0100               	movlb	0	; () banked
  4316  002F36  8D8F               	bsf	_relay_pulse_flags& (0+255),6,b
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;main.c: 1976: relay_pulse_timer[ 6 ] =
  4320                           ;main.c: 1977: readEEPROM( 0x43 + 30 ) * 256 +
  4321                           ;main.c: 1978: readEEPROM( 0x43 + 31 );
  4322  002F38  6A09               	clrf	?_readEEPROM+1,c
  4323  002F3A  0E62               	movlw	98
  4324  002F3C  6E08               	movwf	?_readEEPROM,c
  4325  002F3E  ECDB  F021         	call	_readEEPROM	;wreg free
  4326  002F42  6E0C               	movwf	??_doActionPulse& (0+255),c
  4327  002F44  6A09               	clrf	?_readEEPROM+1,c
  4328  002F46  0E61               	movlw	97
  4329  002F48  6E08               	movwf	?_readEEPROM,c
  4330  002F4A  ECDB  F021         	call	_readEEPROM	;wreg free
  4331  002F4E  6E0E               	movwf	(??_doActionPulse+2)& (0+255),c
  4332  002F50  6A0D               	clrf	(??_doActionPulse+1)& (0+255),c
  4333  002F52  500C               	movf	??_doActionPulse,w,c
  4334  002F54  240D               	addwf	??_doActionPulse+1,w,c
  4335  002F56  0100               	movlb	0	; () banked
  4336  002F58  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  4337  002F5A  0E00               	movlw	0
  4338  002F5C  200E               	addwfc	??_doActionPulse+2,w,c
  4339  002F5E  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  4340                           
  4341                           ;main.c: 1979: break;
  4342  002F60  D010               	goto	l8645
  4343  002F62                     l8643:
  4344  002F62  5011               	movf	doActionPulse@i,w,c
  4345                           
  4346                           ; Switch size 1, requested type "space"
  4347                           ; Number of cases is 7, Range of values is 0 to 6
  4348                           ; switch strategies available:
  4349                           ; Name         Instructions Cycles
  4350                           ; simple_byte           22    12 (average)
  4351                           ;	Chosen strategy is simple_byte
  4352  002F64  E101 D755          	bz	l491
  4353  002F68  0A01               	xorlw	1	; case 1
  4354  002F6A  E101 D76A          	bz	l493
  4355  002F6E  0A03               	xorlw	3	; case 2
  4356  002F70  E080               	bz	l494
  4357  002F72  0A01               	xorlw	1	; case 3
  4358  002F74  E096               	bz	l495
  4359  002F76  0A07               	xorlw	7	; case 4
  4360  002F78  E0AC               	bz	l496
  4361  002F7A  0A01               	xorlw	1	; case 5
  4362  002F7C  E0C2               	bz	l497
  4363  002F7E  0A03               	xorlw	3	; case 6
  4364  002F80  E0D8               	bz	l498
  4365  002F82                     l8645:
  4366  002F82  2A11               	incf	doActionPulse@i,f,c
  4367  002F84  0E07               	movlw	7
  4368  002F86  6411               	cpfsgt	doActionPulse@i,c
  4369  002F88  D71C               	goto	l8599
  4370  002F8A  0C07               	retlw	7
  4371  002F8C                     __end_of_doActionPulse:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           intcon	equ	0xFF2
  4380                           postinc0	equ	0xFEE
  4381                           wreg	equ	0xFE8
  4382                           indf1	equ	0xFE7
  4383                           fsr1h	equ	0xFE2
  4384                           fsr1l	equ	0xFE1
  4385                           indf2	equ	0xFDF
  4386                           postinc2	equ	0xFDE
  4387                           postdec2	equ	0xFDD
  4388                           plusw2	equ	0xFDB
  4389                           fsr2h	equ	0xFDA
  4390                           fsr2l	equ	0xFD9
  4391                           status	equ	0xFD8
  4392                           
  4393 ;; *************** function _doActionOn *****************
  4394 ;; Defined at:
  4395 ;;		line 1711 in file "../main.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  dmflags         1    wreg     unsigned char 
  4398 ;;  arg             1   80[COMRAM] unsigned char 
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  dmflags         1   25[BANK0 ] unsigned char 
  4401 ;;  i               1   27[BANK0 ] unsigned char 
  4402 ;;  val             1   26[BANK0 ] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;		None               void
  4405 ;; Registers used:
  4406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4407 ;; Tracked objects:
  4408 ;;		On entry : F/0
  4409 ;;		On exit  : F/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4412 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4413 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4414 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4415 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4416 ;;Total ram usage:        7 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; Hardware stack levels required when called:    7
  4419 ;; This function calls:
  4420 ;;		_readEEPROM
  4421 ;;		_SendInformationEvent
  4422 ;; This function is called by:
  4423 ;;		_doDM
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text13
  4428  002728                     __ptext13:
  4429                           	opt stack 0
  4430  002728                     _doActionOn:
  4431                           	opt stack 21
  4432                           
  4433                           ;incstack = 0
  4434                           ;incstack = 0
  4435                           ;doActionOn@dmflags stored from wreg
  4436  002728  CFE8 F0CF          	movff	wreg,doActionOn@dmflags
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;main.c: 1713: unsigned char i;
  4440                           ;main.c: 1714: unsigned char val;
  4441                           ;main.c: 1716: for (i = 0; i < 8; i++) {
  4442  00272C  6BD1               	clrf	doActionOn@i& (0+255),b
  4443  00272E                     l10255:
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;main.c: 1719: if ( !( arg & ( 1 << i ) ) ) continue;
  4447  00272E  C0D1  F0CC         	movff	doActionOn@i,??_doActionOn
  4448  002732  0E01               	movlw	1
  4449  002734  6FCD               	movwf	(??_doActionOn+1)& (0+255),b
  4450  002736  2BCC               	incf	??_doActionOn& (0+255),f,b
  4451  002738  D002               	goto	u13004
  4452  00273A                     u13005:
  4453  00273A  90D8               	bcf	status,0,c
  4454  00273C  37CD               	rlcf	(??_doActionOn+1)& (0+255),f,b
  4455  00273E                     u13004:
  4456  00273E  2FCC               	decfsz	??_doActionOn& (0+255),f,b
  4457  002740  D7FC               	goto	u13005
  4458  002742  51CD               	movf	(??_doActionOn+1)& (0+255),w,b
  4459  002744  1451               	andwf	doActionOn@arg,w,c
  4460  002746  E101 D11F          	bz	l10307
  4461                           
  4462                           ; BSR set to: 0
  4463                           ;main.c: 1722: if ( dmflags & 0x08 ) {
  4464  00274A  A7CF               	btfss	doActionOn@dmflags& (0+255),3,b
  4465  00274C  D00C               	goto	l10263
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;main.c: 1723: if ( vscp_imsg.data[ 2 ] != readEEPROM( 0x43 +
  4469                           ;main.c: 1724: 53 +
  4470                           ;main.c: 1725: i ) ) {
  4471  00274E  0E78               	movlw	120
  4472  002750  25D1               	addwf	doActionOn@i& (0+255),w,b
  4473  002752  6E08               	movwf	?_readEEPROM,c
  4474  002754  6A09               	clrf	?_readEEPROM+1,c
  4475  002756  0E00               	movlw	0
  4476  002758  2209               	addwfc	?_readEEPROM+1,f,c
  4477  00275A  ECDB  F021         	call	_readEEPROM	;wreg free
  4478  00275E  0100               	movlb	0	; () banked
  4479  002760  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4480  002762  E001 D111          	bnz	l10307
  4481  002766                     l10263:
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;main.c: 1727: }
  4485                           ;main.c: 1728: }
  4486                           ;main.c: 1730: val = readEEPROM( 0x43 + 10 + i );
  4487  002766  0E4D               	movlw	77
  4488  002768  25D1               	addwf	doActionOn@i& (0+255),w,b
  4489  00276A  6E08               	movwf	?_readEEPROM,c
  4490  00276C  6A09               	clrf	?_readEEPROM+1,c
  4491  00276E  0E00               	movlw	0
  4492  002770  2209               	addwfc	?_readEEPROM+1,f,c
  4493  002772  ECDB  F021         	call	_readEEPROM	;wreg free
  4494  002776  0100               	movlb	0	; () banked
  4495  002778  6FD0               	movwf	doActionOn@val& (0+255),b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;main.c: 1733: if ( !( val & 0x80 ) ) continue;
  4499  00277A  AFD0               	btfss	doActionOn@val& (0+255),7,b
  4500  00277C  D105               	goto	l10307
  4501  00277E  D0E0               	goto	l10299
  4502  002780                     l442:
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;main.c: 1738: LATBbits.LATB4 = 1;
  4506  002780  888A               	bsf	3978,4,c	;volatile
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;main.c: 1740: if (readEEPROM( 0x43 + 10 ) & 0x04 ) {
  4510  002782  6A09               	clrf	?_readEEPROM+1,c
  4511  002784  0E4D               	movlw	77
  4512  002786  6E08               	movwf	?_readEEPROM,c
  4513  002788  ECDB  F021         	call	_readEEPROM	;wreg free
  4514  00278C  0100               	movlb	0	; () banked
  4515  00278E  6FCC               	movwf	??_doActionOn& (0+255),b
  4516  002790  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4517  002792  D0E8               	goto	l444
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;main.c: 1741: relay_protection_timer[ 0 ] =
  4521                           ;main.c: 1742: readEEPROM( 0x43 + 34 ) * 256 +
  4522                           ;main.c: 1743: readEEPROM( 0x43 + 35 );
  4523  002794  6A09               	clrf	?_readEEPROM+1,c
  4524  002796  0E66               	movlw	102
  4525  002798  6E08               	movwf	?_readEEPROM,c
  4526  00279A  ECDB  F021         	call	_readEEPROM	;wreg free
  4527  00279E  0100               	movlb	0	; () banked
  4528  0027A0  6FCC               	movwf	??_doActionOn& (0+255),b
  4529  0027A2  6A09               	clrf	?_readEEPROM+1,c
  4530  0027A4  0E65               	movlw	101
  4531  0027A6  6E08               	movwf	?_readEEPROM,c
  4532  0027A8  ECDB  F021         	call	_readEEPROM	;wreg free
  4533  0027AC  0100               	movlb	0	; () banked
  4534  0027AE  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4535  0027B0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4536  0027B2  51CC               	movf	??_doActionOn& (0+255),w,b
  4537  0027B4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4538  0027B6  6F60               	movwf	_relay_protection_timer& (0+255),b
  4539  0027B8  0E00               	movlw	0
  4540  0027BA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4541  0027BC  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  4542  0027BE  D0D2               	goto	l444
  4543  0027C0                     l445:
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;main.c: 1748: LATBbits.LATB1 = 1;
  4547  0027C0  828A               	bsf	3978,1,c	;volatile
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;main.c: 1750: if (readEEPROM( 0x43 + 11) & 0x04 ) {
  4551  0027C2  6A09               	clrf	?_readEEPROM+1,c
  4552  0027C4  0E4E               	movlw	78
  4553  0027C6  6E08               	movwf	?_readEEPROM,c
  4554  0027C8  ECDB  F021         	call	_readEEPROM	;wreg free
  4555  0027CC  0100               	movlb	0	; () banked
  4556  0027CE  6FCC               	movwf	??_doActionOn& (0+255),b
  4557  0027D0  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4558  0027D2  D0C8               	goto	l444
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;main.c: 1751: relay_protection_timer[ 1 ] =
  4562                           ;main.c: 1752: readEEPROM( 0x43 + 36 ) * 256 +
  4563                           ;main.c: 1753: readEEPROM( 0x43 + 37 );
  4564  0027D4  6A09               	clrf	?_readEEPROM+1,c
  4565  0027D6  0E68               	movlw	104
  4566  0027D8  6E08               	movwf	?_readEEPROM,c
  4567  0027DA  ECDB  F021         	call	_readEEPROM	;wreg free
  4568  0027DE  0100               	movlb	0	; () banked
  4569  0027E0  6FCC               	movwf	??_doActionOn& (0+255),b
  4570  0027E2  6A09               	clrf	?_readEEPROM+1,c
  4571  0027E4  0E67               	movlw	103
  4572  0027E6  6E08               	movwf	?_readEEPROM,c
  4573  0027E8  ECDB  F021         	call	_readEEPROM	;wreg free
  4574  0027EC  0100               	movlb	0	; () banked
  4575  0027EE  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4576  0027F0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4577  0027F2  51CC               	movf	??_doActionOn& (0+255),w,b
  4578  0027F4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4579  0027F6  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  4580  0027F8  0E00               	movlw	0
  4581  0027FA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4582  0027FC  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  4583  0027FE  D0B2               	goto	l444
  4584  002800                     l447:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;main.c: 1758: LATBbits.LATB0 = 1;
  4588  002800  808A               	bsf	3978,0,c	;volatile
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;main.c: 1760: if (readEEPROM( 0x43 + 12) & 0x04 ) {
  4592  002802  6A09               	clrf	?_readEEPROM+1,c
  4593  002804  0E4F               	movlw	79
  4594  002806  6E08               	movwf	?_readEEPROM,c
  4595  002808  ECDB  F021         	call	_readEEPROM	;wreg free
  4596  00280C  0100               	movlb	0	; () banked
  4597  00280E  6FCC               	movwf	??_doActionOn& (0+255),b
  4598  002810  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4599  002812  D0A8               	goto	l444
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;main.c: 1761: relay_protection_timer[ 2 ] =
  4603                           ;main.c: 1762: readEEPROM( 0x43 + 38 ) * 256 +
  4604                           ;main.c: 1763: readEEPROM( 0x43 + 39 );
  4605  002814  6A09               	clrf	?_readEEPROM+1,c
  4606  002816  0E6A               	movlw	106
  4607  002818  6E08               	movwf	?_readEEPROM,c
  4608  00281A  ECDB  F021         	call	_readEEPROM	;wreg free
  4609  00281E  0100               	movlb	0	; () banked
  4610  002820  6FCC               	movwf	??_doActionOn& (0+255),b
  4611  002822  6A09               	clrf	?_readEEPROM+1,c
  4612  002824  0E69               	movlw	105
  4613  002826  6E08               	movwf	?_readEEPROM,c
  4614  002828  ECDB  F021         	call	_readEEPROM	;wreg free
  4615  00282C  0100               	movlb	0	; () banked
  4616  00282E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4617  002830  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4618  002832  51CC               	movf	??_doActionOn& (0+255),w,b
  4619  002834  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4620  002836  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  4621  002838  0E00               	movlw	0
  4622  00283A  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4623  00283C  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  4624  00283E  D092               	goto	l444
  4625  002840                     l449:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;main.c: 1768: LATCbits.LATC7 = 1;
  4629  002840  8E8B               	bsf	3979,7,c	;volatile
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;main.c: 1770: if ( readEEPROM( 0x43 + 13) & 0x04 ) {
  4633  002842  6A09               	clrf	?_readEEPROM+1,c
  4634  002844  0E50               	movlw	80
  4635  002846  6E08               	movwf	?_readEEPROM,c
  4636  002848  ECDB  F021         	call	_readEEPROM	;wreg free
  4637  00284C  0100               	movlb	0	; () banked
  4638  00284E  6FCC               	movwf	??_doActionOn& (0+255),b
  4639  002850  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4640  002852  D088               	goto	l444
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;main.c: 1771: relay_protection_timer[ 3 ] =
  4644                           ;main.c: 1772: readEEPROM( 0x43 + 40 ) * 256 +
  4645                           ;main.c: 1773: readEEPROM( 0x43 + 41 );
  4646  002854  6A09               	clrf	?_readEEPROM+1,c
  4647  002856  0E6C               	movlw	108
  4648  002858  6E08               	movwf	?_readEEPROM,c
  4649  00285A  ECDB  F021         	call	_readEEPROM	;wreg free
  4650  00285E  0100               	movlb	0	; () banked
  4651  002860  6FCC               	movwf	??_doActionOn& (0+255),b
  4652  002862  6A09               	clrf	?_readEEPROM+1,c
  4653  002864  0E6B               	movlw	107
  4654  002866  6E08               	movwf	?_readEEPROM,c
  4655  002868  ECDB  F021         	call	_readEEPROM	;wreg free
  4656  00286C  0100               	movlb	0	; () banked
  4657  00286E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4658  002870  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4659  002872  51CC               	movf	??_doActionOn& (0+255),w,b
  4660  002874  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4661  002876  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  4662  002878  0E00               	movlw	0
  4663  00287A  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4664  00287C  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  4665  00287E  D072               	goto	l444
  4666  002880                     l451:
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;main.c: 1778: LATCbits.LATC6 = 1;
  4670  002880  8C8B               	bsf	3979,6,c	;volatile
  4671                           
  4672                           ; BSR set to: 0
  4673                           ;main.c: 1780: if (readEEPROM( 0x43 + 14) & 0x04 ) {
  4674  002882  6A09               	clrf	?_readEEPROM+1,c
  4675  002884  0E51               	movlw	81
  4676  002886  6E08               	movwf	?_readEEPROM,c
  4677  002888  ECDB  F021         	call	_readEEPROM	;wreg free
  4678  00288C  0100               	movlb	0	; () banked
  4679  00288E  6FCC               	movwf	??_doActionOn& (0+255),b
  4680  002890  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4681  002892  D068               	goto	l444
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;main.c: 1781: relay_protection_timer[ 4 ] =
  4685                           ;main.c: 1782: readEEPROM( 0x43 + 42 ) * 256 +
  4686                           ;main.c: 1783: readEEPROM( 0x43 + 43 );
  4687  002894  6A09               	clrf	?_readEEPROM+1,c
  4688  002896  0E6E               	movlw	110
  4689  002898  6E08               	movwf	?_readEEPROM,c
  4690  00289A  ECDB  F021         	call	_readEEPROM	;wreg free
  4691  00289E  0100               	movlb	0	; () banked
  4692  0028A0  6FCC               	movwf	??_doActionOn& (0+255),b
  4693  0028A2  6A09               	clrf	?_readEEPROM+1,c
  4694  0028A4  0E6D               	movlw	109
  4695  0028A6  6E08               	movwf	?_readEEPROM,c
  4696  0028A8  ECDB  F021         	call	_readEEPROM	;wreg free
  4697  0028AC  0100               	movlb	0	; () banked
  4698  0028AE  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4699  0028B0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4700  0028B2  51CC               	movf	??_doActionOn& (0+255),w,b
  4701  0028B4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4702  0028B6  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  4703  0028B8  0E00               	movlw	0
  4704  0028BA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4705  0028BC  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  4706  0028BE  D052               	goto	l444
  4707  0028C0                     l453:
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;main.c: 1788: LATCbits.LATC5 = 1;
  4711  0028C0  8A8B               	bsf	3979,5,c	;volatile
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;main.c: 1790: if (readEEPROM( 0x43 + 15) & 0x04) {
  4715  0028C2  6A09               	clrf	?_readEEPROM+1,c
  4716  0028C4  0E52               	movlw	82
  4717  0028C6  6E08               	movwf	?_readEEPROM,c
  4718  0028C8  ECDB  F021         	call	_readEEPROM	;wreg free
  4719  0028CC  0100               	movlb	0	; () banked
  4720  0028CE  6FCC               	movwf	??_doActionOn& (0+255),b
  4721  0028D0  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4722  0028D2  D048               	goto	l444
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;main.c: 1791: relay_protection_timer[ 5 ] =
  4726                           ;main.c: 1792: readEEPROM( 0x43 + 44 ) * 256 +
  4727                           ;main.c: 1793: readEEPROM( 0x43 + 45 );
  4728  0028D4  6A09               	clrf	?_readEEPROM+1,c
  4729  0028D6  0E70               	movlw	112
  4730  0028D8  6E08               	movwf	?_readEEPROM,c
  4731  0028DA  ECDB  F021         	call	_readEEPROM	;wreg free
  4732  0028DE  0100               	movlb	0	; () banked
  4733  0028E0  6FCC               	movwf	??_doActionOn& (0+255),b
  4734  0028E2  6A09               	clrf	?_readEEPROM+1,c
  4735  0028E4  0E6F               	movlw	111
  4736  0028E6  6E08               	movwf	?_readEEPROM,c
  4737  0028E8  ECDB  F021         	call	_readEEPROM	;wreg free
  4738  0028EC  0100               	movlb	0	; () banked
  4739  0028EE  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4740  0028F0  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4741  0028F2  51CC               	movf	??_doActionOn& (0+255),w,b
  4742  0028F4  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4743  0028F6  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  4744  0028F8  0E00               	movlw	0
  4745  0028FA  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4746  0028FC  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  4747  0028FE  D032               	goto	l444
  4748  002900                     l455:
  4749                           
  4750                           ; BSR set to: 0
  4751                           ;main.c: 1798: LATCbits.LATC4 = 1;
  4752  002900  888B               	bsf	3979,4,c	;volatile
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;main.c: 1800: if ( readEEPROM( 0x43 + 16) & 0x04) {
  4756  002902  6A09               	clrf	?_readEEPROM+1,c
  4757  002904  0E53               	movlw	83
  4758  002906  6E08               	movwf	?_readEEPROM,c
  4759  002908  ECDB  F021         	call	_readEEPROM	;wreg free
  4760  00290C  0100               	movlb	0	; () banked
  4761  00290E  6FCC               	movwf	??_doActionOn& (0+255),b
  4762  002910  A5CC               	btfss	??_doActionOn& (0+255),2,b
  4763  002912  D028               	goto	l444
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;main.c: 1801: relay_protection_timer[ 6 ] =
  4767                           ;main.c: 1802: readEEPROM( 0x43 + 46 ) * 256 +
  4768                           ;main.c: 1803: readEEPROM( 0x43 + 47 );
  4769  002914  6A09               	clrf	?_readEEPROM+1,c
  4770  002916  0E72               	movlw	114
  4771  002918  6E08               	movwf	?_readEEPROM,c
  4772  00291A  ECDB  F021         	call	_readEEPROM	;wreg free
  4773  00291E  0100               	movlb	0	; () banked
  4774  002920  6FCC               	movwf	??_doActionOn& (0+255),b
  4775  002922  6A09               	clrf	?_readEEPROM+1,c
  4776  002924  0E71               	movlw	113
  4777  002926  6E08               	movwf	?_readEEPROM,c
  4778  002928  ECDB  F021         	call	_readEEPROM	;wreg free
  4779  00292C  0100               	movlb	0	; () banked
  4780  00292E  6FCE               	movwf	(??_doActionOn+2)& (0+255),b
  4781  002930  6BCD               	clrf	(??_doActionOn+1)& (0+255),b
  4782  002932  51CC               	movf	??_doActionOn& (0+255),w,b
  4783  002934  25CD               	addwf	(??_doActionOn+1)& (0+255),w,b
  4784  002936  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  4785  002938  0E00               	movlw	0
  4786  00293A  21CE               	addwfc	(??_doActionOn+2)& (0+255),w,b
  4787  00293C  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  4788  00293E  D012               	goto	l444
  4789  002940                     l10299:
  4790                           
  4791                           ; BSR set to: 0
  4792  002940  51D1               	movf	doActionOn@i& (0+255),w,b
  4793                           
  4794                           ; Switch size 1, requested type "space"
  4795                           ; Number of cases is 7, Range of values is 0 to 6
  4796                           ; switch strategies available:
  4797                           ; Name         Instructions Cycles
  4798                           ; simple_byte           22    12 (average)
  4799                           ;	Chosen strategy is simple_byte
  4800  002942  E101 D71D          	bz	l442
  4801  002946  0A01               	xorlw	1	; case 1
  4802  002948  E101 D73A          	bz	l445
  4803  00294C  0A03               	xorlw	3	; case 2
  4804  00294E  E101 D757          	bz	l447
  4805  002952  0A01               	xorlw	1	; case 3
  4806  002954  E101 D774          	bz	l449
  4807  002958  0A07               	xorlw	7	; case 4
  4808  00295A  E092               	bz	l451
  4809  00295C  0A01               	xorlw	1	; case 5
  4810  00295E  E0B0               	bz	l453
  4811  002960  0A03               	xorlw	3	; case 6
  4812  002962  E0CE               	bz	l455
  4813  002964                     l444:
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;main.c: 1810: if ( val & 0x08 ) {
  4817  002964  A7D0               	btfss	doActionOn@val& (0+255),3,b
  4818  002966  D007               	goto	l10303
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;main.c: 1811: SendInformationEvent( i, 20, 3 );
  4822  002968  0E14               	movlw	20
  4823  00296A  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  4824  00296C  0E03               	movlw	3
  4825  00296E  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4826  002970  51D1               	movf	doActionOn@i& (0+255),w,b
  4827  002972  EC52  F01F         	call	_SendInformationEvent
  4828  002976                     l10303:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;main.c: 1812: }
  4832                           ;main.c: 1815: if ( val & 0x20 ) {
  4833  002976  ABD0               	btfss	doActionOn@val& (0+255),5,b
  4834  002978  D007               	goto	l10307
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;main.c: 1816: SendInformationEvent( i, 20, 25 );
  4838  00297A  0E14               	movlw	20
  4839  00297C  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  4840  00297E  0E19               	movlw	25
  4841  002980  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  4842  002982  51D1               	movf	doActionOn@i& (0+255),w,b
  4843  002984  EC52  F01F         	call	_SendInformationEvent
  4844  002988                     l10307:
  4845                           
  4846                           ; BSR set to: 0
  4847  002988  2BD1               	incf	doActionOn@i& (0+255),f,b
  4848                           
  4849                           ; BSR set to: 0
  4850  00298A  0E07               	movlw	7
  4851  00298C  65D1               	cpfsgt	doActionOn@i& (0+255),b
  4852  00298E  D6CF               	goto	l10255
  4853  002990  0C07               	retlw	7
  4854  002992                     __end_of_doActionOn:
  4855                           	opt stack 0
  4856                           tblptru	equ	0xFF8
  4857                           tblptrh	equ	0xFF7
  4858                           tblptrl	equ	0xFF6
  4859                           tablat	equ	0xFF5
  4860                           prodh	equ	0xFF4
  4861                           prodl	equ	0xFF3
  4862                           intcon	equ	0xFF2
  4863                           postinc0	equ	0xFEE
  4864                           wreg	equ	0xFE8
  4865                           indf1	equ	0xFE7
  4866                           fsr1h	equ	0xFE2
  4867                           fsr1l	equ	0xFE1
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           postdec2	equ	0xFDD
  4871                           plusw2	equ	0xFDB
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function _doActionOff *****************
  4877 ;; Defined at:
  4878 ;;		line 1826 in file "../main.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  dmflags         1    wreg     unsigned char 
  4881 ;;  arg             1   80[COMRAM] unsigned char 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  dmflags         1   24[BANK0 ] unsigned char 
  4884 ;;  i               1   26[BANK0 ] unsigned char 
  4885 ;;  val             1   25[BANK0 ] unsigned char 
  4886 ;; Return value:  Size  Location     Type
  4887 ;;		None               void
  4888 ;; Registers used:
  4889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  4890 ;; Tracked objects:
  4891 ;;		On entry : F/0
  4892 ;;		On exit  : F/0
  4893 ;;		Unchanged: 0/0
  4894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4895 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4896 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4898 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4899 ;;Total ram usage:        6 bytes
  4900 ;; Hardware stack levels used:    1
  4901 ;; Hardware stack levels required when called:    7
  4902 ;; This function calls:
  4903 ;;		_readEEPROM
  4904 ;;		_SendInformationEvent
  4905 ;; This function is called by:
  4906 ;;		_doApplicationOneSecondWork
  4907 ;;		_doDM
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text14
  4912  0039D8                     __ptext14:
  4913                           	opt stack 0
  4914  0039D8                     _doActionOff:
  4915                           	opt stack 21
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;incstack = 0
  4919                           ;incstack = 0
  4920                           ;doActionOff@dmflags stored from wreg
  4921  0039D8  CFE8 F0CE          	movff	wreg,doActionOff@dmflags
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;main.c: 1828: unsigned char i;
  4925                           ;main.c: 1829: unsigned char val;
  4926                           ;main.c: 1831: for ( i = 0; i < 8; i++ ) {
  4927  0039DC  6BD0               	clrf	doActionOff@i& (0+255),b
  4928  0039DE                     l9857:
  4929                           
  4930                           ; BSR set to: 0
  4931                           ;main.c: 1834: if ( !( arg & ( 1 << i ) ) ) continue;
  4932  0039DE  C0D0  F0CC         	movff	doActionOff@i,??_doActionOff
  4933  0039E2  0E01               	movlw	1
  4934  0039E4  6FCD               	movwf	(??_doActionOff+1)& (0+255),b
  4935  0039E6  2BCC               	incf	??_doActionOff& (0+255),f,b
  4936  0039E8  D002               	goto	u12364
  4937  0039EA                     u12365:
  4938  0039EA  90D8               	bcf	status,0,c
  4939  0039EC  37CD               	rlcf	(??_doActionOff+1)& (0+255),f,b
  4940  0039EE                     u12364:
  4941  0039EE  2FCC               	decfsz	??_doActionOff& (0+255),f,b
  4942  0039F0  D7FC               	goto	u12365
  4943  0039F2  51CD               	movf	(??_doActionOff+1)& (0+255),w,b
  4944  0039F4  1451               	andwf	doActionOff@arg,w,c
  4945  0039F6  E048               	bz	l9881
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;main.c: 1837: if ( dmflags & 0x08 ) {
  4949  0039F8  A7CE               	btfss	doActionOff@dmflags& (0+255),3,b
  4950  0039FA  D00B               	goto	l9865
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;main.c: 1838: if ( vscp_imsg.data[ 2 ] != readEEPROM(0x43 +
  4954                           ;main.c: 1839: 53 +
  4955                           ;main.c: 1840: i ) ) {
  4956  0039FC  0E78               	movlw	120
  4957  0039FE  25D0               	addwf	doActionOff@i& (0+255),w,b
  4958  003A00  6E08               	movwf	?_readEEPROM,c
  4959  003A02  6A09               	clrf	?_readEEPROM+1,c
  4960  003A04  0E00               	movlw	0
  4961  003A06  2209               	addwfc	?_readEEPROM+1,f,c
  4962  003A08  ECDB  F021         	call	_readEEPROM	;wreg free
  4963  003A0C  0100               	movlb	0	; () banked
  4964  003A0E  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  4965  003A10  E13B               	bnz	l9881
  4966  003A12                     l9865:
  4967                           
  4968                           ; BSR set to: 0
  4969                           ;main.c: 1842: }
  4970                           ;main.c: 1843: }
  4971                           ;main.c: 1845: val = readEEPROM( 0x43 + 10 + i );
  4972  003A12  0E4D               	movlw	77
  4973  003A14  25D0               	addwf	doActionOff@i& (0+255),w,b
  4974  003A16  6E08               	movwf	?_readEEPROM,c
  4975  003A18  6A09               	clrf	?_readEEPROM+1,c
  4976  003A1A  0E00               	movlw	0
  4977  003A1C  2209               	addwfc	?_readEEPROM+1,f,c
  4978  003A1E  ECDB  F021         	call	_readEEPROM	;wreg free
  4979  003A22  0100               	movlb	0	; () banked
  4980  003A24  6FCF               	movwf	doActionOff@val& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;main.c: 1848: if ( !( val & 0x80 ) ) continue;
  4984  003A26  AFCF               	btfss	doActionOff@val& (0+255),7,b
  4985  003A28  D02F               	goto	l9881
  4986  003A2A  D00E               	goto	l9873
  4987  003A2C                     l470:
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;main.c: 1853: LATBbits.LATB4 = 0;
  4991  003A2C  988A               	bcf	3978,4,c	;volatile
  4992                           
  4993                           ;main.c: 1854: break;
  4994  003A2E  D01A               	goto	l471
  4995  003A30                     l472:
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;main.c: 1857: LATBbits.LATB1 = 0;
  4999  003A30  928A               	bcf	3978,1,c	;volatile
  5000                           
  5001                           ;main.c: 1858: break;
  5002  003A32  D018               	goto	l471
  5003  003A34                     l473:
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;main.c: 1861: LATBbits.LATB0 = 0;
  5007  003A34  908A               	bcf	3978,0,c	;volatile
  5008                           
  5009                           ;main.c: 1862: break;
  5010  003A36  D016               	goto	l471
  5011  003A38                     l474:
  5012                           
  5013                           ; BSR set to: 0
  5014                           ;main.c: 1865: LATCbits.LATC7 = 0;
  5015  003A38  9E8B               	bcf	3979,7,c	;volatile
  5016                           
  5017                           ;main.c: 1866: break;
  5018  003A3A  D014               	goto	l471
  5019  003A3C                     l475:
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;main.c: 1869: LATCbits.LATC6 = 0;
  5023  003A3C  9C8B               	bcf	3979,6,c	;volatile
  5024                           
  5025                           ;main.c: 1870: break;
  5026  003A3E  D012               	goto	l471
  5027  003A40                     l476:
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;main.c: 1873: LATCbits.LATC5 = 0;
  5031  003A40  9A8B               	bcf	3979,5,c	;volatile
  5032                           
  5033                           ;main.c: 1874: break;
  5034  003A42  D010               	goto	l471
  5035  003A44                     l477:
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;main.c: 1877: LATCbits.LATC4 = 0;
  5039  003A44  988B               	bcf	3979,4,c	;volatile
  5040                           
  5041                           ;main.c: 1878: break;
  5042  003A46  D00E               	goto	l471
  5043  003A48                     l9873:
  5044                           
  5045                           ; BSR set to: 0
  5046  003A48  51D0               	movf	doActionOff@i& (0+255),w,b
  5047                           
  5048                           ; Switch size 1, requested type "space"
  5049                           ; Number of cases is 7, Range of values is 0 to 6
  5050                           ; switch strategies available:
  5051                           ; Name         Instructions Cycles
  5052                           ; simple_byte           22    12 (average)
  5053                           ;	Chosen strategy is simple_byte
  5054  003A4A  E0F0               	bz	l470
  5055  003A4C  0A01               	xorlw	1	; case 1
  5056  003A4E  E0F0               	bz	l472
  5057  003A50  0A03               	xorlw	3	; case 2
  5058  003A52  E0F0               	bz	l473
  5059  003A54  0A01               	xorlw	1	; case 3
  5060  003A56  E0F0               	bz	l474
  5061  003A58  0A07               	xorlw	7	; case 4
  5062  003A5A  E0F0               	bz	l475
  5063  003A5C  0A01               	xorlw	1	; case 5
  5064  003A5E  E0F0               	bz	l476
  5065  003A60  0A03               	xorlw	3	; case 6
  5066  003A62  E0F0               	bz	l477
  5067  003A64                     l471:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;main.c: 1883: if ( val & 0x10 ) {
  5071  003A64  A9CF               	btfss	doActionOff@val& (0+255),4,b
  5072  003A66  D007               	goto	l9877
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;main.c: 1884: SendInformationEvent( i, 20, 4 );
  5076  003A68  0E14               	movlw	20
  5077  003A6A  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  5078  003A6C  0E04               	movlw	4
  5079  003A6E  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5080  003A70  51D0               	movf	doActionOff@i& (0+255),w,b
  5081  003A72  EC52  F01F         	call	_SendInformationEvent
  5082  003A76                     l9877:
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;main.c: 1885: }
  5086                           ;main.c: 1888: if ( val & 0x40 ) {
  5087  003A76  ADCF               	btfss	doActionOff@val& (0+255),6,b
  5088  003A78  D007               	goto	l9881
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;main.c: 1889: SendInformationEvent( i, 20, 24 );
  5092  003A7A  0E14               	movlw	20
  5093  003A7C  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  5094  003A7E  0E18               	movlw	24
  5095  003A80  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  5096  003A82  51D0               	movf	doActionOff@i& (0+255),w,b
  5097  003A84  EC52  F01F         	call	_SendInformationEvent
  5098  003A88                     l9881:
  5099                           
  5100                           ; BSR set to: 0
  5101  003A88  2BD0               	incf	doActionOff@i& (0+255),f,b
  5102                           
  5103                           ; BSR set to: 0
  5104  003A8A  0E07               	movlw	7
  5105  003A8C  65D0               	cpfsgt	doActionOff@i& (0+255),b
  5106  003A8E  D7A7               	goto	l9857
  5107  003A90  0C07               	retlw	7
  5108  003A92                     __end_of_doActionOff:
  5109                           	opt stack 0
  5110                           tblptru	equ	0xFF8
  5111                           tblptrh	equ	0xFF7
  5112                           tblptrl	equ	0xFF6
  5113                           tablat	equ	0xFF5
  5114                           prodh	equ	0xFF4
  5115                           prodl	equ	0xFF3
  5116                           intcon	equ	0xFF2
  5117                           postinc0	equ	0xFEE
  5118                           wreg	equ	0xFE8
  5119                           indf1	equ	0xFE7
  5120                           fsr1h	equ	0xFE2
  5121                           fsr1l	equ	0xFE1
  5122                           indf2	equ	0xFDF
  5123                           postinc2	equ	0xFDE
  5124                           postdec2	equ	0xFDD
  5125                           plusw2	equ	0xFDB
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _vscp_handleProtocolEvent *****************
  5131 ;; Defined at:
  5132 ;;		line 786 in file "../../vscp_firmware/common/vscp_firmware.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;  bytes           1   45[BANK0 ] unsigned char 
  5137 ;;  page_save       2   41[BANK0 ] unsigned short 
  5138 ;;  i               1   51[BANK0 ] unsigned char 
  5139 ;;  page_save       2   39[BANK0 ] unsigned short 
  5140 ;;  byte            1   55[BANK0 ] unsigned char 
  5141 ;;  bytes           1   53[BANK0 ] unsigned char 
  5142 ;;  cb              1   50[BANK0 ] unsigned char 
  5143 ;;  bytes_this_t    1   49[BANK0 ] unsigned char 
  5144 ;;  j               1   58[BANK0 ] unsigned char 
  5145 ;;  i               1   56[BANK0 ] unsigned char 
  5146 ;;  k               1   52[BANK0 ] unsigned char 
  5147 ;;  i               1   54[BANK0 ] unsigned char 
  5148 ;;  len             1   48[BANK0 ] unsigned char 
  5149 ;;  pos             1   47[BANK0 ] unsigned char 
  5150 ;;  i               1   57[BANK0 ] unsigned char 
  5151 ;;  len             1   46[BANK0 ] unsigned char 
  5152 ;;  pos             1   44[BANK0 ] unsigned char 
  5153 ;;  offset          1   43[BANK0 ] unsigned char 
  5154 ;; Return value:  Size  Location     Type
  5155 ;;		None               void
  5156 ;; Registers used:
  5157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  5158 ;; Tracked objects:
  5159 ;;		On entry : F/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5164 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5165 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5166 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5167 ;;Total ram usage:       27 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    9
  5170 ;; This function calls:
  5171 ;;		_vscp_init
  5172 ;;		_vscp_readAppReg
  5173 ;;		_vscp_writeAppReg
  5174 ;;		_vscp_sendEvent
  5175 ;;		_vscp_getGUID
  5176 ;;		_vscp_getMDF_URL
  5177 ;;		_vscp_goBootloaderMode
  5178 ;;		_vscp_getMatrixInfo
  5179 ;;		_vscp_handleHeartbeat
  5180 ;;		_vscp_handleSetNickname
  5181 ;;		_vscp_handleDropNickname
  5182 ;;		_vscp_newNodeOnline
  5183 ;;		_vscp_readRegister
  5184 ;;		_vscp_readStdReg
  5185 ;;		_vscp_writeRegister
  5186 ;;		_vscp_writeStdReg
  5187 ;;		___lbmod
  5188 ;; This function is called by:
  5189 ;;		_main
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           	psect	text15
  5194  001790                     __ptext15:
  5195                           	opt stack 0
  5196  001790                     _vscp_handleProtocolEvent:
  5197                           	opt stack 20
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;vscp_firmware.c: 788: if (0 == vscp_imsg.vscp_class) {
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;incstack = 0
  5204                           ;incstack = 0
  5205  001790  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
  5206  001792  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
  5207  001794  A4D8               	btfss	status,2,c
  5208  001796  0012               	return	
  5209  001798  D29F               	goto	l9679
  5210  00179A                     l9267:
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;vscp_firmware.c: 795: vscp_handleHeartbeat();
  5214  00179A  EFD2  F01F         	goto	_vscp_handleHeartbeat	;wreg free
  5215  00179E                     l9269:
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;vscp_firmware.c: 800: vscp_newNodeOnline();
  5219  00179E  EF58  F020         	goto	_vscp_newNodeOnline	;wreg free
  5220  0017A2                     l9271:
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;vscp_firmware.c: 805: vscp_handleSetNickname();
  5224  0017A2  EFCD  F020         	goto	_vscp_handleSetNickname	;wreg free
  5225  0017A6                     l9273:
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;vscp_firmware.c: 810: vscp_handleDropNickname();
  5229  0017A6  EF12  F020         	goto	_vscp_handleDropNickname	;wreg free
  5230  0017AA                     l9275:
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;vscp_firmware.c: 815: if ((2 == (vscp_imsg.flags & 0x0f)) &&
  5234                           ;vscp_firmware.c: 816: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5235  0017AA  519B               	movf	_vscp_imsg& (0+255),w,b
  5236  0017AC  0B0F               	andlw	15
  5237  0017AE  0A02               	xorlw	2
  5238  0017B0  A4D8               	btfss	status,2,c
  5239  0017B2  0012               	return	
  5240                           
  5241                           ; BSR set to: 0
  5242  0017B4  5196               	movf	_vscp_nickname& (0+255),w,b
  5243  0017B6  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5244  0017BA  62DF               	cpfseq	indf2,c
  5245  0017BC  0012               	return	
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;vscp_firmware.c: 818: if (vscp_imsg.data[ 1 ] < 0x80) {
  5249  0017BE  0E80               	movlw	128
  5250  0017C0  61A2               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5251  0017C2  D011               	goto	l9295
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;vscp_firmware.c: 821: vscp_omsg.data[ 1 ] = vscp_readAppReg(vscp_imsg.data[ 1 ]);
  5255  0017C4  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5256  0017C6  ECA6  F01D         	call	_vscp_readAppReg
  5257  0017CA                     L13:
  5258  0017CA  0100               	movlb	0	; () banked
  5259  0017CC                     L14:
  5260  0017CC  6FAF               	movwf	(_vscp_omsg+6)& (0+255),b
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;vscp_firmware.c: 824: vscp_omsg.data[ 0 ] = vscp_imsg.data[ 1 ];
  5264  0017CE  C0A2  F0AE         	movff	_vscp_imsg+7,_vscp_omsg+5
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;vscp_firmware.c: 826: vscp_omsg.priority = 0x03;
  5268  0017D2  0E03               	movlw	3
  5269  0017D4  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;vscp_firmware.c: 827: vscp_omsg.flags = 0x80 + 2;
  5273  0017D6  0E82               	movlw	130
  5274  0017D8  6FA9               	movwf	_vscp_omsg& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;vscp_firmware.c: 828: vscp_omsg.vscp_class = 0;
  5278  0017DA  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5279  0017DC  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;vscp_firmware.c: 829: vscp_omsg.vscp_type = 10;
  5283  0017DE  0E0A               	movlw	10
  5284  0017E0  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;vscp_firmware.c: 832: vscp_sendEvent();
  5288  0017E2  EF94  F020         	goto	_vscp_sendEvent	;wreg free
  5289  0017E6                     l9295:
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;vscp_firmware.c: 836: vscp_omsg.data[ 1 ] =
  5293                           ;vscp_firmware.c: 837: vscp_readStdReg(vscp_imsg.data[ 1 ]);
  5294  0017E6  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5295  0017E8  ECC6  F017         	call	_vscp_readStdReg
  5296  0017EC  D7EE               	goto	L13
  5297  0017EE                     l9309:
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;vscp_firmware.c: 855: if ((3 == (vscp_imsg.flags & 0x0f)) &&
  5301                           ;vscp_firmware.c: 856: (vscp_nickname == vscp_imsg.data[ 0 ])) {
  5302  0017EE  519B               	movf	_vscp_imsg& (0+255),w,b
  5303  0017F0  0B0F               	andlw	15
  5304  0017F2  0A03               	xorlw	3
  5305  0017F4  A4D8               	btfss	status,2,c
  5306  0017F6  0012               	return	
  5307                           
  5308                           ; BSR set to: 0
  5309  0017F8  5196               	movf	_vscp_nickname& (0+255),w,b
  5310  0017FA  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5311  0017FE  62DF               	cpfseq	indf2,c
  5312  001800  0012               	return	
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;vscp_firmware.c: 858: if (vscp_imsg.data[ 1 ] < 0x80) {
  5316  001802  0E80               	movlw	128
  5317  001804  61A2               	cpfslt	(_vscp_imsg+7)& (0+255),b
  5318  001806  D006               	goto	l9329
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;vscp_firmware.c: 861: vscp_omsg.data[ 1 ] =
  5322                           ;vscp_firmware.c: 862: vscp_writeAppReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5323  001808  C0A3  F051         	movff	_vscp_imsg+8,?_vscp_writeAppReg
  5324  00180C  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5325  00180E  EC91  F007         	call	_vscp_writeAppReg
  5326  001812  D7DC               	goto	L14
  5327  001814                     l9329:
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;vscp_firmware.c: 878: vscp_omsg.data[ 1 ] =
  5331                           ;vscp_firmware.c: 879: vscp_writeStdReg(vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ]);
  5332  001814  C0A3  F00F         	movff	_vscp_imsg+8,?_vscp_writeStdReg
  5333  001818  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5334  00181A  EC76  F01B         	call	_vscp_writeStdReg
  5335  00181E  D7D5               	goto	L13
  5336  001820                     l9343:
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;vscp_firmware.c: 897: if ((vscp_nickname == vscp_imsg.data[ 0 ]) &&
  5340                           ;vscp_firmware.c: 899: (vscp_getGUID(0) == vscp_imsg.data[ 2 ]) &&
  5341                           ;vscp_firmware.c: 900: (vscp_getGUID(3) == vscp_imsg.data[ 3 ]) &&
  5342                           ;vscp_firmware.c: 901: (vscp_getGUID(5) == vscp_imsg.data[ 4 ]) &&
  5343                           ;vscp_firmware.c: 902: (vscp_getGUID(7) == vscp_imsg.data[ 5 ]) &&
  5344                           ;vscp_firmware.c: 903: (((vscp_page_select >> 8) & 0xff) == vscp_imsg.data[ 6 ]) &&
  5345                           ;vscp_firmware.c: 904: ((vscp_page_select & 0xff) == vscp_imsg.data[ 7 ])) {
  5346  001820  5196               	movf	_vscp_nickname& (0+255),w,b
  5347  001822  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5348  001826  62DF               	cpfseq	indf2,c
  5349  001828  0012               	return	
  5350                           
  5351                           ; BSR set to: 0
  5352  00182A  0E00               	movlw	0
  5353  00182C  ECAD  F021         	call	_vscp_getGUID
  5354  001830  0100               	movlb	0	; () banked
  5355  001832  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5356  001834  A4D8               	btfss	status,2,c
  5357  001836  0012               	return	
  5358                           
  5359                           ; BSR set to: 0
  5360  001838  0E03               	movlw	3
  5361  00183A  ECAD  F021         	call	_vscp_getGUID
  5362  00183E  0100               	movlb	0	; () banked
  5363  001840  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5364  001842  A4D8               	btfss	status,2,c
  5365  001844  0012               	return	
  5366                           
  5367                           ; BSR set to: 0
  5368  001846  0E05               	movlw	5
  5369  001848  ECAD  F021         	call	_vscp_getGUID
  5370  00184C  0100               	movlb	0	; () banked
  5371  00184E  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5372  001850  A4D8               	btfss	status,2,c
  5373  001852  0012               	return	
  5374                           
  5375                           ; BSR set to: 0
  5376  001854  0E07               	movlw	7
  5377  001856  ECAD  F021         	call	_vscp_getGUID
  5378  00185A  0100               	movlb	0	; () banked
  5379  00185C  19A6               	xorwf	(_vscp_imsg+11)& (0+255),w,b
  5380  00185E  A4D8               	btfss	status,2,c
  5381  001860  0012               	return	
  5382                           
  5383                           ; BSR set to: 0
  5384  001862  5053               	movf	_vscp_page_select+1,w,c
  5385  001864  19A7               	xorwf	(_vscp_imsg+12)& (0+255),w,b
  5386  001866  A4D8               	btfss	status,2,c
  5387  001868  0012               	return	
  5388                           
  5389                           ; BSR set to: 0
  5390  00186A  5052               	movf	_vscp_page_select,w,c
  5391  00186C  EE20  F0A8         	lfsr	2,_vscp_imsg+13
  5392  001870  62DF               	cpfseq	indf2,c
  5393  001872  0012               	return	
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;vscp_firmware.c: 906: vscp_goBootloaderMode( vscp_imsg.data[ 1 ] );
  5397  001874  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5398  001876  EF69  F021         	goto	_vscp_goBootloaderMode
  5399  00187A                     l9359:
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;vscp_firmware.c: 915: if ((vscp_getGUID(0) == vscp_imsg.data[ 1 ]) &&
  5403                           ;vscp_firmware.c: 916: (vscp_getGUID(1) == vscp_imsg.data[ 2 ]) &&
  5404                           ;vscp_firmware.c: 917: (vscp_getGUID(2) == vscp_imsg.data[ 3 ]) &&
  5405                           ;vscp_firmware.c: 918: (vscp_getGUID(3) == vscp_imsg.data[ 4 ])) {
  5406  00187A  0E00               	movlw	0
  5407  00187C  ECAD  F021         	call	_vscp_getGUID
  5408  001880  0100               	movlb	0	; () banked
  5409  001882  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5410  001884  E173               	bnz	l9403
  5411                           
  5412                           ; BSR set to: 0
  5413  001886  0E01               	movlw	1
  5414  001888  ECAD  F021         	call	_vscp_getGUID
  5415  00188C  0100               	movlb	0	; () banked
  5416  00188E  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5417  001890  E16D               	bnz	l9403
  5418                           
  5419                           ; BSR set to: 0
  5420  001892  0E02               	movlw	2
  5421  001894  ECAD  F021         	call	_vscp_getGUID
  5422  001898  0100               	movlb	0	; () banked
  5423  00189A  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5424  00189C  E167               	bnz	l9403
  5425                           
  5426                           ; BSR set to: 0
  5427  00189E  0E03               	movlw	3
  5428  0018A0  ECAD  F021         	call	_vscp_getGUID
  5429  0018A4  0100               	movlb	0	; () banked
  5430  0018A6  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5431  0018A8  E161               	bnz	l9403
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;vscp_firmware.c: 919: vscp_guid_reset |= 0x10;
  5435  0018AA  8992               	bsf	_vscp_guid_reset& (0+255),4,b
  5436  0018AC  D05F               	goto	l9403
  5437  0018AE                     l9369:
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;vscp_firmware.c: 924: if ((vscp_getGUID(4) == vscp_imsg.data[ 1 ]) &&
  5441                           ;vscp_firmware.c: 925: (vscp_getGUID(5) == vscp_imsg.data[ 2 ]) &&
  5442                           ;vscp_firmware.c: 926: (vscp_getGUID(6) == vscp_imsg.data[ 3 ]) &&
  5443                           ;vscp_firmware.c: 927: (vscp_getGUID(7) == vscp_imsg.data[ 4 ])) {
  5444  0018AE  0E04               	movlw	4
  5445  0018B0  ECAD  F021         	call	_vscp_getGUID
  5446  0018B4  0100               	movlb	0	; () banked
  5447  0018B6  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5448  0018B8  E159               	bnz	l9403
  5449                           
  5450                           ; BSR set to: 0
  5451  0018BA  0E05               	movlw	5
  5452  0018BC  ECAD  F021         	call	_vscp_getGUID
  5453  0018C0  0100               	movlb	0	; () banked
  5454  0018C2  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5455  0018C4  E153               	bnz	l9403
  5456                           
  5457                           ; BSR set to: 0
  5458  0018C6  0E06               	movlw	6
  5459  0018C8  ECAD  F021         	call	_vscp_getGUID
  5460  0018CC  0100               	movlb	0	; () banked
  5461  0018CE  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5462  0018D0  E14D               	bnz	l9403
  5463                           
  5464                           ; BSR set to: 0
  5465  0018D2  0E07               	movlw	7
  5466  0018D4  ECAD  F021         	call	_vscp_getGUID
  5467  0018D8  0100               	movlb	0	; () banked
  5468  0018DA  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5469  0018DC  E147               	bnz	l9403
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;vscp_firmware.c: 928: vscp_guid_reset |= 0x20;
  5473  0018DE  8B92               	bsf	_vscp_guid_reset& (0+255),5,b
  5474  0018E0  D045               	goto	l9403
  5475  0018E2                     l9379:
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;vscp_firmware.c: 933: if ((vscp_getGUID(8) == vscp_imsg.data[ 1 ]) &&
  5479                           ;vscp_firmware.c: 934: (vscp_getGUID(9) == vscp_imsg.data[ 2 ]) &&
  5480                           ;vscp_firmware.c: 935: (vscp_getGUID(10) == vscp_imsg.data[ 3 ]) &&
  5481                           ;vscp_firmware.c: 936: (vscp_getGUID(11) == vscp_imsg.data[ 4 ])) {
  5482  0018E2  0E08               	movlw	8
  5483  0018E4  ECAD  F021         	call	_vscp_getGUID
  5484  0018E8  0100               	movlb	0	; () banked
  5485  0018EA  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5486  0018EC  E13F               	bnz	l9403
  5487                           
  5488                           ; BSR set to: 0
  5489  0018EE  0E09               	movlw	9
  5490  0018F0  ECAD  F021         	call	_vscp_getGUID
  5491  0018F4  0100               	movlb	0	; () banked
  5492  0018F6  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5493  0018F8  E139               	bnz	l9403
  5494                           
  5495                           ; BSR set to: 0
  5496  0018FA  0E0A               	movlw	10
  5497  0018FC  ECAD  F021         	call	_vscp_getGUID
  5498  001900  0100               	movlb	0	; () banked
  5499  001902  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5500  001904  E133               	bnz	l9403
  5501                           
  5502                           ; BSR set to: 0
  5503  001906  0E0B               	movlw	11
  5504  001908  ECAD  F021         	call	_vscp_getGUID
  5505  00190C  0100               	movlb	0	; () banked
  5506  00190E  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5507  001910  E12D               	bnz	l9403
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;vscp_firmware.c: 937: vscp_guid_reset |= 0x40;
  5511  001912  8D92               	bsf	_vscp_guid_reset& (0+255),6,b
  5512  001914  D02B               	goto	l9403
  5513  001916                     l9389:
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;vscp_firmware.c: 942: if ((vscp_getGUID(12) == vscp_imsg.data[ 1 ]) &&
  5517                           ;vscp_firmware.c: 943: (vscp_getGUID(13) == vscp_imsg.data[ 2 ]) &&
  5518                           ;vscp_firmware.c: 944: (vscp_getGUID(14) == vscp_imsg.data[ 3 ]) &&
  5519                           ;vscp_firmware.c: 945: (vscp_getGUID(15) == vscp_imsg.data[ 4 ])) {
  5520  001916  0E0C               	movlw	12
  5521  001918  ECAD  F021         	call	_vscp_getGUID
  5522  00191C  0100               	movlb	0	; () banked
  5523  00191E  19A2               	xorwf	(_vscp_imsg+7)& (0+255),w,b
  5524  001920  E125               	bnz	l9403
  5525                           
  5526                           ; BSR set to: 0
  5527  001922  0E0D               	movlw	13
  5528  001924  ECAD  F021         	call	_vscp_getGUID
  5529  001928  0100               	movlb	0	; () banked
  5530  00192A  19A3               	xorwf	(_vscp_imsg+8)& (0+255),w,b
  5531  00192C  E11F               	bnz	l9403
  5532                           
  5533                           ; BSR set to: 0
  5534  00192E  0E0E               	movlw	14
  5535  001930  ECAD  F021         	call	_vscp_getGUID
  5536  001934  0100               	movlb	0	; () banked
  5537  001936  19A4               	xorwf	(_vscp_imsg+9)& (0+255),w,b
  5538  001938  E119               	bnz	l9403
  5539                           
  5540                           ; BSR set to: 0
  5541  00193A  0E0F               	movlw	15
  5542  00193C  ECAD  F021         	call	_vscp_getGUID
  5543  001940  0100               	movlb	0	; () banked
  5544  001942  19A5               	xorwf	(_vscp_imsg+10)& (0+255),w,b
  5545  001944  E113               	bnz	l9403
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;vscp_firmware.c: 946: vscp_guid_reset |= 0x80;
  5549  001946  8F92               	bsf	_vscp_guid_reset& (0+255),7,b
  5550  001948  D011               	goto	l9403
  5551  00194A                     l1216:
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;vscp_firmware.c: 951: vscp_guid_reset = 0;
  5555  00194A  6B92               	clrf	_vscp_guid_reset& (0+255),b
  5556                           
  5557                           ;vscp_firmware.c: 952: break;
  5558  00194C  D00F               	goto	l9403
  5559  00194E                     l9401:
  5560                           
  5561                           ; BSR set to: 0
  5562  00194E  39A1               	swapf	(_vscp_imsg+6)& (0+255),w,b
  5563  001950  0B0F               	andlw	15
  5564  001952  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5565  001954  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5566                           
  5567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5568                           ; Switch size 1, requested type "space"
  5569                           ; Number of cases is 1, Range of values is 0 to 0
  5570                           ; switch strategies available:
  5571                           ; Name         Instructions Cycles
  5572                           ; simple_byte            4     3 (average)
  5573                           ;	Chosen strategy is simple_byte
  5574  001956  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5575  001958  E1F8               	bnz	l1216
  5576                           
  5577                           ; BSR set to: 0
  5578                           ; Switch size 1, requested type "space"
  5579                           ; Number of cases is 4, Range of values is 0 to 3
  5580                           ; switch strategies available:
  5581                           ; Name         Instructions Cycles
  5582                           ; simple_byte           13     7 (average)
  5583                           ;	Chosen strategy is simple_byte
  5584  00195A  51D6               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5585  00195C  E08E               	bz	l9359
  5586  00195E  0A01               	xorlw	1	; case 1
  5587  001960  E0A6               	bz	l9369
  5588  001962  0A03               	xorlw	3	; case 2
  5589  001964  E0BE               	bz	l9379
  5590  001966  0A01               	xorlw	1	; case 3
  5591  001968  E0D6               	bz	l9389
  5592  00196A  D7EF               	goto	l1216
  5593  00196C                     l9403:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;vscp_firmware.c: 955: if (0xf0 == (vscp_guid_reset & 0xf0)) {
  5597  00196C  5192               	movf	_vscp_guid_reset& (0+255),w,b
  5598  00196E  0BF0               	andlw	240
  5599  001970  0AF0               	xorlw	240
  5600  001972  B4D8               	btfsc	status,2,c
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;vscp_firmware.c: 957: vscp_init();
  5604  001974  ECB0  F01F         	call	_vscp_init	;wreg free
  5605  001978  0012               	return	
  5606  00197A                     l9407:
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;vscp_firmware.c: 963: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5610  00197A  5196               	movf	_vscp_nickname& (0+255),w,b
  5611  00197C  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5612  001980  62DF               	cpfseq	indf2,c
  5613  001982  0012               	return	
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;vscp_firmware.c: 965: uint8_t i;
  5617                           ;vscp_firmware.c: 966: uint8_t pos = 0;
  5618  001984  6BE2               	clrf	vscp_handleProtocolEvent@pos& (0+255),b
  5619                           
  5620                           ;vscp_firmware.c: 967: uint8_t offset = vscp_imsg.data[ 1 ];
  5621  001986  C0A2  F0E1         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@offset
  5622                           
  5623                           ;vscp_firmware.c: 968: uint8_t len = vscp_imsg.data[ 2 ];
  5624  00198A  C0A3  F0E4         	movff	_vscp_imsg+8,vscp_handleProtocolEvent@len
  5625                           
  5626                           ;vscp_firmware.c: 970: for (i = 0; i < len; i++) {
  5627  00198E  6BEF               	clrf	vscp_handleProtocolEvent@i& (0+255),b
  5628  001990  D042               	goto	l9439
  5629  001992                     l9411:
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;vscp_firmware.c: 971: vscp_omsg.data[ (i % 7) + 1 ] = vscp_readRegister(offset + i);
  5633  001992  0E07               	movlw	7
  5634  001994  6E08               	movwf	?___lbmod,c
  5635  001996  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5636  001998  EC6D  F020         	call	___lbmod
  5637  00199C  0100               	movlb	0	; () banked
  5638  00199E  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5639  0019A0  51D6               	movf	??_vscp_handleProtocolEvent& (0+255),w,b
  5640  0019A2  0FAF               	addlw	low (_vscp_omsg+6)
  5641  0019A4  6ED9               	movwf	fsr2l,c
  5642  0019A6  6ADA               	clrf	fsr2h,c
  5643  0019A8  51E1               	movf	vscp_handleProtocolEvent@offset& (0+255),w,b
  5644  0019AA  25EF               	addwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5645  0019AC  EC8E  F021         	call	_vscp_readRegister
  5646  0019B0  6EDF               	movwf	indf2,c
  5647                           
  5648                           ;vscp_firmware.c: 973: if ( (i % 7) == 6 || i == (len - 1) ) {
  5649  0019B2  0E07               	movlw	7
  5650  0019B4  6E08               	movwf	?___lbmod,c
  5651  0019B6  0100               	movlb	0	; () banked
  5652  0019B8  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5653  0019BA  EC6D  F020         	call	___lbmod
  5654  0019BE  0A06               	xorlw	6
  5655  0019C0  E00B               	bz	l9417
  5656  0019C2  0EFF               	movlw	255
  5657  0019C4  0100               	movlb	0	; () banked
  5658  0019C6  25E4               	addwf	vscp_handleProtocolEvent@len& (0+255),w,b
  5659  0019C8  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5660  0019CA  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  5661  0019CC  0EFF               	movlw	255
  5662  0019CE  23D7               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  5663  0019D0  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5664  0019D2  19D6               	xorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  5665  0019D4  11D7               	iorwf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  5666  0019D6  E11E               	bnz	l9437
  5667  0019D8                     l9417:
  5668                           
  5669                           ;vscp_firmware.c: 975: uint8_t bytes;
  5670                           ;vscp_firmware.c: 977: if ( ( i % 7 ) == 6 ) {
  5671  0019D8  0E07               	movlw	7
  5672  0019DA  6E08               	movwf	?___lbmod,c
  5673  0019DC  0100               	movlb	0	; () banked
  5674  0019DE  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5675  0019E0  EC6D  F020         	call	___lbmod
  5676  0019E4  0A06               	xorlw	6
  5677  0019E6  E103               	bnz	l9421
  5678                           
  5679                           ;vscp_firmware.c: 978: bytes = 7;
  5680  0019E8  0E07               	movlw	7
  5681  0019EA  0100               	movlb	0	; () banked
  5682  0019EC  D009               	goto	L15
  5683  0019EE                     l9421:
  5684                           
  5685                           ;vscp_firmware.c: 980: else {
  5686                           ;vscp_firmware.c: 981: bytes = ( i % 7 ) + 1;
  5687  0019EE  0E07               	movlw	7
  5688  0019F0  6E08               	movwf	?___lbmod,c
  5689  0019F2  0100               	movlb	0	; () banked
  5690  0019F4  51EF               	movf	vscp_handleProtocolEvent@i& (0+255),w,b
  5691  0019F6  EC6D  F020         	call	___lbmod
  5692  0019FA  0100               	movlb	0	; () banked
  5693  0019FC  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5694  0019FE  29D6               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5695  001A00                     L15:
  5696  001A00  6FE3               	movwf	vscp_handleProtocolEvent@bytes& (0+255),b
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;vscp_firmware.c: 982: }
  5700                           ;vscp_firmware.c: 984: vscp_omsg.flags = 0x80 + bytes + 1;
  5701  001A02  51E3               	movf	vscp_handleProtocolEvent@bytes& (0+255),w,b
  5702  001A04  0F81               	addlw	129
  5703  001A06  6FA9               	movwf	_vscp_omsg& (0+255),b
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;vscp_firmware.c: 985: vscp_omsg.priority = 0x03;
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;vscp_firmware.c: 986: vscp_omsg.vscp_class = 0;
  5710                           
  5711                           ; BSR set to: 0
  5712                           ;vscp_firmware.c: 987: vscp_omsg.vscp_type = 26;
  5713  001A08  D9AF               	call	PL72	;call to abstracted procedure
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;vscp_firmware.c: 988: vscp_omsg.data[ 0 ] = pos;
  5717  001A0A  C0E2  F0AE         	movff	vscp_handleProtocolEvent@pos,_vscp_omsg+5
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;vscp_firmware.c: 991: vscp_sendEvent();
  5721  001A0E  EC94  F020         	call	_vscp_sendEvent	;wreg free
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;vscp_firmware.c: 992: pos++;
  5725  001A12  2BE2               	incf	vscp_handleProtocolEvent@pos& (0+255),f,b
  5726  001A14                     l9437:
  5727                           
  5728                           ; BSR set to: 0
  5729  001A14  2BEF               	incf	vscp_handleProtocolEvent@i& (0+255),f,b
  5730  001A16                     l9439:
  5731                           
  5732                           ; BSR set to: 0
  5733  001A16  51E4               	movf	vscp_handleProtocolEvent@len& (0+255),w,b
  5734  001A18  5DEF               	subwf	vscp_handleProtocolEvent@i& (0+255),w,b
  5735  001A1A  B0D8               	btfsc	status,0,c
  5736  001A1C  0012               	return	
  5737  001A1E  D7B9               	goto	l9411
  5738  001A20                     l9441:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;vscp_firmware.c: 1000: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5742  001A20  5196               	movf	_vscp_nickname& (0+255),w,b
  5743  001A22  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5744  001A26  62DF               	cpfseq	indf2,c
  5745  001A28  0012               	return	
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;vscp_firmware.c: 1001: uint8_t i;
  5749                           ;vscp_firmware.c: 1002: uint8_t pos = vscp_imsg.data[ 1 ];
  5750  001A2A  C0A2  F0E5         	movff	_vscp_imsg+7,vscp_handleProtocolEvent@pos_1233
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;vscp_firmware.c: 1003: uint8_t len = (vscp_imsg.flags - 2) & 0x07;
  5754  001A2E  519B               	movf	_vscp_imsg& (0+255),w,b
  5755  001A30  0FFE               	addlw	254
  5756  001A32  0B07               	andlw	7
  5757  001A34  6FE6               	movwf	vscp_handleProtocolEvent@len_1234& (0+255),b
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;vscp_firmware.c: 1005: for (i = 0; i < len; i++) {
  5761  001A36  6BEC               	clrf	vscp_handleProtocolEvent@i_1232& (0+255),b
  5762  001A38  D016               	goto	l9455
  5763  001A3A                     l9449:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;vscp_firmware.c: 1007: vscp_writeRegister(pos + i, vscp_imsg.data[ 2 + i ]);
  5767  001A3A  51EC               	movf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5768  001A3C  0FA3               	addlw	low (_vscp_imsg+8)
  5769  001A3E  6ED9               	movwf	fsr2l,c
  5770  001A40  6ADA               	clrf	fsr2h,c
  5771  001A42  50DF               	movf	indf2,w,c
  5772  001A44  6FD4               	movwf	?_vscp_writeRegister& (0+255),b
  5773  001A46  51E5               	movf	vscp_handleProtocolEvent@pos_1233& (0+255),w,b
  5774  001A48  25EC               	addwf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5775  001A4A  EC2E  F021         	call	_vscp_writeRegister
  5776                           
  5777                           ;vscp_firmware.c: 1008: vscp_omsg.data[ 1 + i ] = vscp_readRegister(pos + i);
  5778  001A4E  0100               	movlb	0	; () banked
  5779  001A50  51EC               	movf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5780  001A52  0FAF               	addlw	low (_vscp_omsg+6)
  5781  001A54  6ED9               	movwf	fsr2l,c
  5782  001A56  6ADA               	clrf	fsr2h,c
  5783  001A58  51E5               	movf	vscp_handleProtocolEvent@pos_1233& (0+255),w,b
  5784  001A5A  25EC               	addwf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5785  001A5C  EC8E  F021         	call	_vscp_readRegister
  5786  001A60  6EDF               	movwf	indf2,c
  5787  001A62  0100               	movlb	0	; () banked
  5788  001A64  2BEC               	incf	vscp_handleProtocolEvent@i_1232& (0+255),f,b
  5789  001A66                     l9455:
  5790                           
  5791                           ; BSR set to: 0
  5792  001A66  51E6               	movf	vscp_handleProtocolEvent@len_1234& (0+255),w,b
  5793  001A68  5DEC               	subwf	vscp_handleProtocolEvent@i_1232& (0+255),w,b
  5794  001A6A  E3E7               	bnc	l9449
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;vscp_firmware.c: 1009: }
  5798                           ;vscp_firmware.c: 1011: vscp_omsg.priority = 0x03;
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;vscp_firmware.c: 1012: vscp_omsg.vscp_class = 0;
  5802                           
  5803                           ;vscp_firmware.c: 1013: vscp_omsg.vscp_type = 26;
  5804  001A6C  D97D               	call	PL72	;call to abstracted procedure
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;vscp_firmware.c: 1014: vscp_omsg.data[ 0 ] = 0;
  5808  001A6E  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;vscp_firmware.c: 1015: vscp_omsg.flags = 0x80 + len + 1;
  5812  001A70  51E6               	movf	vscp_handleProtocolEvent@len_1234& (0+255),w,b
  5813  001A72  0F81               	addlw	129
  5814  001A74  6FA9               	movwf	_vscp_omsg& (0+255),b
  5815  001A76  EF94  F020         	goto	_vscp_sendEvent
  5816  001A7A                     l9467:
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;vscp_firmware.c: 1025: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5820  001A7A  5196               	movf	_vscp_nickname& (0+255),w,b
  5821  001A7C  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5822  001A80  62DF               	cpfseq	indf2,c
  5823  001A82  0012               	return	
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;vscp_firmware.c: 1027: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5827                           ;vscp_firmware.c: 1028: vscp_imsg.data[ 1 ],
  5828                           ;vscp_firmware.c: 1029: vscp_readAppReg(vscp_imsg.data[ 1 ]) + 1);
  5829  001A84  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5830  001A86  ECA6  F01D         	call	_vscp_readAppReg
  5831  001A8A  0100               	movlb	0	; () banked
  5832  001A8C  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5833  001A8E  29D6               	incf	??_vscp_handleProtocolEvent& (0+255),w,b
  5834  001A90  6E51               	movwf	?_vscp_writeAppReg,c
  5835  001A92  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5836  001A94  EC91  F007         	call	_vscp_writeAppReg
  5837  001A98  D699               	goto	L14
  5838  001A9A                     l9483:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;vscp_firmware.c: 1045: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  5842  001A9A  5196               	movf	_vscp_nickname& (0+255),w,b
  5843  001A9C  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  5844  001AA0  62DF               	cpfseq	indf2,c
  5845  001AA2  0012               	return	
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;vscp_firmware.c: 1047: vscp_omsg.data[ 1 ] = vscp_writeAppReg(
  5849                           ;vscp_firmware.c: 1048: vscp_imsg.data[ 1 ],
  5850                           ;vscp_firmware.c: 1049: vscp_readAppReg(vscp_imsg.data[ 1 ]) - 1);
  5851  001AA4  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5852  001AA6  ECA6  F01D         	call	_vscp_readAppReg
  5853  001AAA  0100               	movlb	0	; () banked
  5854  001AAC  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  5855  001AAE  05D6               	decf	??_vscp_handleProtocolEvent& (0+255),w,b
  5856  001AB0  6E51               	movwf	?_vscp_writeAppReg,c
  5857  001AB2  51A2               	movf	(_vscp_imsg+7)& (0+255),w,b
  5858  001AB4  EC91  F007         	call	_vscp_writeAppReg
  5859  001AB8  D689               	goto	L14
  5860  001ABA                     l9499:
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;vscp_firmware.c: 1065: if ((vscp_nickname == vscp_imsg.data[ 0 ]) ||
  5864                           ;vscp_firmware.c: 1066: (0xff == vscp_imsg.data[ 0 ])) {
  5865  001ABA  51A1               	movf	(_vscp_imsg+6)& (0+255),w,b
  5866  001ABC  1996               	xorwf	_vscp_nickname& (0+255),w,b
  5867  001ABE  E003               	bz	l1240
  5868                           
  5869                           ; BSR set to: 0
  5870  001AC0  29A1               	incf	(_vscp_imsg+6)& (0+255),w,b
  5871  001AC2  A4D8               	btfss	status,2,c
  5872  001AC4  0012               	return	
  5873  001AC6                     l1240:
  5874                           
  5875                           ; BSR set to: 0
  5876                           ;vscp_firmware.c: 1068: uint8_t i, j, k = 0;
  5877  001AC6  6BEA               	clrf	vscp_handleProtocolEvent@k& (0+255),b
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;vscp_firmware.c: 1072: vscp_omsg.priority = 0x03;
  5881  001AC8  0E03               	movlw	3
  5882  001ACA  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  5883                           
  5884                           ;vscp_firmware.c: 1073: vscp_omsg.flags = 0x80 + 8;
  5885  001ACC  0E88               	movlw	136
  5886  001ACE  6FA9               	movwf	_vscp_omsg& (0+255),b
  5887                           
  5888                           ; BSR set to: 0
  5889                           ;vscp_firmware.c: 1074: vscp_omsg.vscp_class = 0;
  5890  001AD0  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  5891  001AD2  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  5892                           
  5893                           ;vscp_firmware.c: 1075: vscp_omsg.vscp_type = 32;
  5894  001AD4  0E20               	movlw	32
  5895  001AD6  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;vscp_firmware.c: 1077: for (i = 0; i < 3; i++)
  5899  001AD8  6BEE               	clrf	vscp_handleProtocolEvent@i_1235& (0+255),b
  5900  001ADA                     l1241:
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;vscp_firmware.c: 1078: {
  5904                           ;vscp_firmware.c: 1079: vscp_omsg.data[0] = i;
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;vscp_firmware.c: 1081: for (j = 1; j < 8; j++) {
  5908  001ADA  D94D               	call	PL78	;call to abstracted procedure
  5909  001ADC                     l9519:
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;vscp_firmware.c: 1082: vscp_omsg.data[j] = vscp_getGUID(15 - k++);
  5913  001ADC  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5914  001ADE  0FAE               	addlw	low (_vscp_omsg+5)
  5915  001AE0  6ED9               	movwf	fsr2l,c
  5916  001AE2  6ADA               	clrf	fsr2h,c
  5917  001AE4  51EA               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  5918  001AE6  080F               	sublw	15
  5919  001AE8  ECAD  F021         	call	_vscp_getGUID
  5920  001AEC  6EDF               	movwf	indf2,c
  5921  001AEE  0100               	movlb	0	; () banked
  5922  001AF0  2BEA               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;vscp_firmware.c: 1083: if (k > 16)
  5926  001AF2  0E10               	movlw	16
  5927  001AF4  65EA               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5928  001AF6  D001               	goto	l9527
  5929  001AF8  D004               	goto	l9531
  5930  001AFA                     l9527:
  5931                           
  5932                           ; BSR set to: 0
  5933  001AFA  2BF0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  5934                           
  5935                           ; BSR set to: 0
  5936  001AFC  0E07               	movlw	7
  5937  001AFE  65F0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  5938  001B00  D7ED               	goto	l9519
  5939  001B02                     l9531:
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;vscp_firmware.c: 1085: }
  5943                           ;vscp_firmware.c: 1087: if (k > 16)
  5944  001B02  0E10               	movlw	16
  5945  001B04  65EA               	cpfsgt	vscp_handleProtocolEvent@k& (0+255),b
  5946  001B06  D001               	goto	l9535
  5947  001B08  D006               	goto	l1242
  5948  001B0A                     l9535:
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;vscp_firmware.c: 1090: vscp_sendEvent();
  5952  001B0A  EC94  F020         	call	_vscp_sendEvent	;wreg free
  5953                           
  5954                           ; BSR set to: 0
  5955  001B0E  2BEE               	incf	vscp_handleProtocolEvent@i_1235& (0+255),f,b
  5956                           
  5957                           ; BSR set to: 0
  5958  001B10  0E02               	movlw	2
  5959  001B12  65EE               	cpfsgt	vscp_handleProtocolEvent@i_1235& (0+255),b
  5960  001B14  D7E2               	goto	l1241
  5961  001B16                     l1242:
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;vscp_firmware.c: 1091: }
  5965                           ;vscp_firmware.c: 1093: for (j = 0; j < 5; j++)
  5966  001B16  6BF0               	clrf	vscp_handleProtocolEvent@j& (0+255),b
  5967  001B18                     l9545:
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;vscp_firmware.c: 1094: {
  5971                           ;vscp_firmware.c: 1095: if (vscp_getMDF_URL(j) > 0)
  5972  001B18  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5973  001B1A  EC5B  F021         	call	_vscp_getMDF_URL
  5974  001B1E  0900               	iorlw	0
  5975  001B20  E008               	bz	l9549
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;vscp_firmware.c: 1096: vscp_omsg.data[3 + j] = vscp_getMDF_URL(j);
  5979  001B22  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5980  001B24  0FB1               	addlw	low (_vscp_omsg+8)
  5981  001B26  6ED9               	movwf	fsr2l,c
  5982  001B28  6ADA               	clrf	fsr2h,c
  5983  001B2A  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5984  001B2C  EC5B  F021         	call	_vscp_getMDF_URL
  5985  001B30  D005               	goto	L16
  5986  001B32                     l9549:
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;vscp_firmware.c: 1097: else
  5990                           ;vscp_firmware.c: 1098: vscp_omsg.data[3 + j] = 0;
  5991  001B32  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  5992  001B34  0FB1               	addlw	low (_vscp_omsg+8)
  5993  001B36  6ED9               	movwf	fsr2l,c
  5994  001B38  6ADA               	clrf	fsr2h,c
  5995  001B3A  0E00               	movlw	0
  5996  001B3C                     L16:
  5997  001B3C  6EDF               	movwf	indf2,c
  5998                           
  5999                           ; BSR set to: 0
  6000  001B3E  2BF0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6001                           
  6002                           ; BSR set to: 0
  6003  001B40  0E04               	movlw	4
  6004  001B42  65F0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6005  001B44  D7E9               	goto	l9545
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;vscp_firmware.c: 1099: }
  6009                           ;vscp_firmware.c: 1101: vscp_sendEvent();
  6010  001B46  EC94  F020         	call	_vscp_sendEvent	;wreg free
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;vscp_firmware.c: 1103: k = 5;
  6014  001B4A  0E05               	movlw	5
  6015  001B4C  6FEA               	movwf	vscp_handleProtocolEvent@k& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;vscp_firmware.c: 1104: for (i = 3; i < 7; i++)
  6019  001B4E  0E03               	movlw	3
  6020  001B50  6FEE               	movwf	vscp_handleProtocolEvent@i_1235& (0+255),b
  6021  001B52                     l1251:
  6022                           
  6023                           ; BSR set to: 0
  6024                           ;vscp_firmware.c: 1105: {
  6025                           ;vscp_firmware.c: 1106: vscp_omsg.data[0] = i;
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;vscp_firmware.c: 1108: for (j = 1; j < 8; j++) {
  6029  001B52  D911               	call	PL78	;call to abstracted procedure
  6030  001B54                     l9571:
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;vscp_firmware.c: 1109: vscp_omsg.data[j] = vscp_getMDF_URL(k++);
  6034  001B54  51F0               	movf	vscp_handleProtocolEvent@j& (0+255),w,b
  6035  001B56  0FAE               	addlw	low (_vscp_omsg+5)
  6036  001B58  6ED9               	movwf	fsr2l,c
  6037  001B5A  6ADA               	clrf	fsr2h,c
  6038  001B5C  51EA               	movf	vscp_handleProtocolEvent@k& (0+255),w,b
  6039  001B5E  EC5B  F021         	call	_vscp_getMDF_URL
  6040  001B62  6EDF               	movwf	indf2,c
  6041                           
  6042                           ; BSR set to: 0
  6043  001B64  2BEA               	incf	vscp_handleProtocolEvent@k& (0+255),f,b
  6044                           
  6045                           ; BSR set to: 0
  6046  001B66  2BF0               	incf	vscp_handleProtocolEvent@j& (0+255),f,b
  6047                           
  6048                           ; BSR set to: 0
  6049  001B68  0E07               	movlw	7
  6050  001B6A  65F0               	cpfsgt	vscp_handleProtocolEvent@j& (0+255),b
  6051  001B6C  D7F3               	goto	l9571
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;vscp_firmware.c: 1110: }
  6055                           ;vscp_firmware.c: 1111: vscp_sendEvent();
  6056  001B6E  EC94  F020         	call	_vscp_sendEvent	;wreg free
  6057                           
  6058                           ; BSR set to: 0
  6059  001B72  2BEE               	incf	vscp_handleProtocolEvent@i_1235& (0+255),f,b
  6060                           
  6061                           ; BSR set to: 0
  6062  001B74  0E06               	movlw	6
  6063  001B76  65EE               	cpfsgt	vscp_handleProtocolEvent@i_1235& (0+255),b
  6064  001B78  D7EC               	goto	l1251
  6065  001B7A  0C06               	retlw	6
  6066  001B7C                     l9585:
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;vscp_firmware.c: 1120: if (vscp_nickname == vscp_imsg.data[ 0 ]) {
  6070  001B7C  5196               	movf	_vscp_nickname& (0+255),w,b
  6071  001B7E  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  6072  001B82  62DF               	cpfseq	indf2,c
  6073  001B84  0012               	return	
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;vscp_firmware.c: 1122: vscp_omsg.priority = 0x03;
  6077  001B86  0E03               	movlw	3
  6078  001B88  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  6079                           
  6080                           ;vscp_firmware.c: 1123: vscp_omsg.flags = 0x80 + 7;
  6081  001B8A  0E87               	movlw	135
  6082  001B8C  6FA9               	movwf	_vscp_omsg& (0+255),b
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;vscp_firmware.c: 1124: vscp_omsg.vscp_class = 0;
  6086  001B8E  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  6087  001B90  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  6088                           
  6089                           ;vscp_firmware.c: 1125: vscp_omsg.vscp_type = 34;
  6090  001B92  0E22               	movlw	34
  6091  001B94  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;vscp_firmware.c: 1127: vscp_getMatrixInfo((char *) vscp_omsg.data);
  6095  001B96  0EAE               	movlw	(_vscp_omsg+5)& (0+255)
  6096  001B98  ECFF  F020         	call	_vscp_getMatrixInfo
  6097  001B9C  EF94  F020         	goto	_vscp_sendEvent
  6098  001BA0                     l9595:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;vscp_firmware.c: 1143: if ( vscp_nickname == vscp_imsg.data[0] ) {
  6102  001BA0  5196               	movf	_vscp_nickname& (0+255),w,b
  6103  001BA2  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  6104  001BA6  62DF               	cpfseq	indf2,c
  6105  001BA8  0012               	return	
  6106                           
  6107                           ; BSR set to: 0
  6108                           ;vscp_firmware.c: 1145: uint16_t page_save;
  6109                           ;vscp_firmware.c: 1146: uint8_t byte = 0, bytes = 0;
  6110  001BAA  6BED               	clrf	vscp_handleProtocolEvent@byte& (0+255),b
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;vscp_firmware.c: 1147: uint8_t bytes_this_time, cb;
  6114                           ;vscp_firmware.c: 1151: if ( ( vscp_imsg.flags & 0x0f) > 3 ) {
  6115  001BAC  C09B  F0D6         	movff	_vscp_imsg,??_vscp_handleProtocolEvent
  6116  001BB0  0E0F               	movlw	15
  6117  001BB2  17D6               	andwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6118  001BB4  0E04               	movlw	4
  6119  001BB6  5DD6               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6120  001BB8  E304               	bnc	l9603
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;vscp_firmware.c: 1154: bytes = vscp_imsg.data[4];
  6124  001BBA  C0A5  F0EB         	movff	_vscp_imsg+10,vscp_handleProtocolEvent@bytes_1240
  6125                           
  6126                           ;vscp_firmware.c: 1156: if ( 0 == bytes ) {
  6127  001BBE  67EB               	tstfsz	vscp_handleProtocolEvent@bytes_1240& (0+255),b
  6128  001BC0  D002               	goto	l9607
  6129  001BC2                     l9603:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;vscp_firmware.c: 1157: bytes = 1;
  6133  001BC2  0E01               	movlw	1
  6134  001BC4  6FEB               	movwf	vscp_handleProtocolEvent@bytes_1240& (0+255),b
  6135  001BC6                     l9607:
  6136                           
  6137                           ; BSR set to: 0
  6138                           ;vscp_firmware.c: 1162: }
  6139                           ;vscp_firmware.c: 1165: page_save = vscp_page_select;
  6140  001BC6  C052  F0DD         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save
  6141  001BCA  C053  F0DE         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save+1
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;vscp_firmware.c: 1170: vscp_page_select = ((vscp_imsg.data[1] << 8) | vscp_imsg.data[2]
      +                          );
  6145  001BCE  D8B6               	call	PL28	;call to abstracted procedure
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;vscp_firmware.c: 1173: vscp_omsg.priority = 0x03;
  6149  001BD0  0E03               	movlw	3
  6150  001BD2  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;vscp_firmware.c: 1174: vscp_omsg.vscp_class = 0;
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;vscp_firmware.c: 1175: vscp_omsg.vscp_type = 39;
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;vscp_firmware.c: 1176: vscp_omsg.data[0] = 0;
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;vscp_firmware.c: 1177: vscp_omsg.data[1] = vscp_imsg.data[1];
  6163                           
  6164                           ; BSR set to: 0
  6165                           ;vscp_firmware.c: 1178: vscp_omsg.data[2] = vscp_imsg.data[2];
  6166  001BD4  D8BF               	call	PL42	;call to abstracted procedure
  6167  001BD6                     l9623:
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;vscp_firmware.c: 1182: if ( ( bytes - byte ) >= 4 ) {
  6171  001BD6  51ED               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6172  001BD8  C0EB  F0D6         	movff	vscp_handleProtocolEvent@bytes_1240,??_vscp_handleProtocolEvent
  6173  001BDC  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6174  001BDE  5FD6               	subwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6175  001BE0  0E00               	movlw	0
  6176  001BE2  5BD7               	subwfb	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6177  001BE4  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6178  001BE6  0A80               	xorlw	128
  6179  001BE8  0F80               	addlw	-128
  6180  001BEA  0E04               	movlw	4
  6181  001BEC  B4D8               	btfsc	status,2,c
  6182  001BEE  5DD6               	subwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6183  001BF0  E302               	bnc	l9627
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;vscp_firmware.c: 1183: bytes_this_time = 4;
  6187  001BF2  0E04               	movlw	4
  6188  001BF4  D002               	goto	L17
  6189  001BF6                     l9627:
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;vscp_firmware.c: 1185: else {
  6193                           ;vscp_firmware.c: 1186: bytes_this_time = (bytes - byte);
  6194  001BF6  51ED               	movf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6195  001BF8  5DEB               	subwf	vscp_handleProtocolEvent@bytes_1240& (0+255),w,b
  6196  001BFA                     L17:
  6197  001BFA  6FE7               	movwf	vscp_handleProtocolEvent@bytes_this_time& (0+255),b
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;vscp_firmware.c: 1187: }
  6201                           ;vscp_firmware.c: 1190: vscp_omsg.flags = 0x80 + 4 + bytes_this_time;
  6202  001BFC  51E7               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6203  001BFE  0F84               	addlw	132
  6204  001C00  6FA9               	movwf	_vscp_omsg& (0+255),b
  6205                           
  6206                           ;vscp_firmware.c: 1191: vscp_omsg.data[3] =
  6207                           ;vscp_firmware.c: 1192: vscp_imsg.data[3] + byte;
  6208  001C02  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6209  001C04  25ED               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6210  001C06  6FB1               	movwf	(_vscp_omsg+8)& (0+255),b
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;vscp_firmware.c: 1195: for ( cb = 0; cb < bytes_this_time; cb++ ) {
  6214  001C08  6BE8               	clrf	vscp_handleProtocolEvent@cb& (0+255),b
  6215  001C0A  D00C               	goto	l9635
  6216  001C0C                     l9631:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;vscp_firmware.c: 1196: vscp_omsg.data[ (4 + cb) ] =
  6220                           ;vscp_firmware.c: 1197: vscp_readRegister( ( vscp_imsg.data[3] + byte + cb ) );
  6221  001C0C  51E8               	movf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6222  001C0E  0FB2               	addlw	low (_vscp_omsg+9)
  6223  001C10  6ED9               	movwf	fsr2l,c
  6224  001C12  6ADA               	clrf	fsr2h,c
  6225  001C14  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6226  001C16  25ED               	addwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6227  001C18  25E8               	addwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6228  001C1A  EC8E  F021         	call	_vscp_readRegister
  6229  001C1E  6EDF               	movwf	indf2,c
  6230  001C20  0100               	movlb	0	; () banked
  6231  001C22  2BE8               	incf	vscp_handleProtocolEvent@cb& (0+255),f,b
  6232  001C24                     l9635:
  6233                           
  6234                           ; BSR set to: 0
  6235  001C24  51E7               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6236  001C26  5DE8               	subwf	vscp_handleProtocolEvent@cb& (0+255),w,b
  6237  001C28  E3F1               	bnc	l9631
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;vscp_firmware.c: 1198: }
  6241                           ;vscp_firmware.c: 1201: vscp_sendEvent();
  6242  001C2A  EC94  F020         	call	_vscp_sendEvent	;wreg free
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;vscp_firmware.c: 1204: byte += bytes_this_time;
  6246  001C2E  51E7               	movf	vscp_handleProtocolEvent@bytes_this_time& (0+255),w,b
  6247  001C30  27ED               	addwf	vscp_handleProtocolEvent@byte& (0+255),f,b
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;vscp_firmware.c: 1207: vscp_omsg.data[0] += 1;
  6251  001C32  2BAE               	incf	(_vscp_omsg+5)& (0+255),f,b
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;vscp_firmware.c: 1209: } while (byte < bytes);
  6255  001C34  51EB               	movf	vscp_handleProtocolEvent@bytes_1240& (0+255),w,b
  6256  001C36  5DED               	subwf	vscp_handleProtocolEvent@byte& (0+255),w,b
  6257  001C38  E3CE               	bnc	l9623
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;vscp_firmware.c: 1212: vscp_page_select = page_save;
  6261  001C3A  C0DD  F052         	movff	vscp_handleProtocolEvent@page_save,_vscp_page_select
  6262  001C3E  C0DE  F053         	movff	vscp_handleProtocolEvent@page_save+1,_vscp_page_select+1
  6263  001C42  0012               	return	
  6264  001C44                     l9645:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;vscp_firmware.c: 1219: if ( vscp_nickname == vscp_imsg.data[ 0 ] ) {
  6268  001C44  5196               	movf	_vscp_nickname& (0+255),w,b
  6269  001C46  EE20  F0A1         	lfsr	2,_vscp_imsg+6
  6270  001C4A  62DF               	cpfseq	indf2,c
  6271  001C4C  0012               	return	
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;vscp_firmware.c: 1221: uint8_t i;
  6275                           ;vscp_firmware.c: 1222: uint16_t page_save;
  6276                           ;vscp_firmware.c: 1225: page_save = vscp_page_select;
  6277  001C4E  C052  F0DF         	movff	_vscp_page_select,vscp_handleProtocolEvent@page_save_1244
  6278  001C52  C053  F0E0         	movff	_vscp_page_select+1,vscp_handleProtocolEvent@page_save_1244+1
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;vscp_firmware.c: 1229: vscp_page_select = (vscp_imsg.data[1] << 8) | vscp_imsg.data[2];
  6282  001C56  D872               	call	PL28	;call to abstracted procedure
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;vscp_firmware.c: 1231: for (i = vscp_imsg.data[ 3 ];
  6286  001C58  C0A4  F0E9         	movff	_vscp_imsg+9,vscp_handleProtocolEvent@i_1243
  6287                           
  6288                           ;vscp_firmware.c: 1234: i < (vscp_imsg.data[ 3 ] + ((vscp_imsg.flags & 0x0f) - 4));
  6289                           ;vscp_firmware.c: 1235: i++) {
  6290  001C5C  D014               	goto	l9657
  6291  001C5E                     l9653:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;vscp_firmware.c: 1236: vscp_omsg.data[ 4 + (i - vscp_imsg.data[ 3 ]) ] =
  6295                           ;vscp_firmware.c: 1237: vscp_writeRegister(i, vscp_imsg.data[ 4 + (i - vscp_imsg.data[ 3
      +                           ]) ]);
  6296  001C5E  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6297  001C60  08A5               	sublw	low (_vscp_imsg+10)
  6298  001C62  25E9               	addwf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6299  001C64  6ED9               	movwf	fsr2l,c
  6300  001C66  6ADA               	clrf	fsr2h,c
  6301  001C68  50DF               	movf	indf2,w,c
  6302  001C6A  6FD4               	movwf	?_vscp_writeRegister& (0+255),b
  6303  001C6C  51E9               	movf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6304  001C6E  EC2E  F021         	call	_vscp_writeRegister
  6305  001C72  0100               	movlb	0	; () banked
  6306  001C74  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6307  001C76  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6308  001C78  08B2               	sublw	low (_vscp_omsg+9)
  6309  001C7A  25E9               	addwf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6310  001C7C  6ED9               	movwf	fsr2l,c
  6311  001C7E  6ADA               	clrf	fsr2h,c
  6312  001C80  C0D6  FFDF         	movff	??_vscp_handleProtocolEvent,indf2
  6313                           
  6314                           ; BSR set to: 0
  6315  001C84  2BE9               	incf	vscp_handleProtocolEvent@i_1243& (0+255),f,b
  6316  001C86                     l9657:
  6317                           
  6318                           ; BSR set to: 0
  6319  001C86  519B               	movf	_vscp_imsg& (0+255),w,b
  6320  001C88  0B0F               	andlw	15
  6321  001C8A  6FD6               	movwf	??_vscp_handleProtocolEvent& (0+255),b
  6322  001C8C  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6323  001C8E  51A4               	movf	(_vscp_imsg+9)& (0+255),w,b
  6324  001C90  27D6               	addwf	??_vscp_handleProtocolEvent& (0+255),f,b
  6325  001C92  0E00               	movlw	0
  6326  001C94  23D7               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),f,b
  6327  001C96  0EFC               	movlw	252
  6328  001C98  25D6               	addwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6329  001C9A  6FD8               	movwf	(??_vscp_handleProtocolEvent+2)& (0+255),b
  6330  001C9C  0EFF               	movlw	255
  6331  001C9E  21D7               	addwfc	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6332  001CA0  6FD9               	movwf	(??_vscp_handleProtocolEvent+3)& (0+255),b
  6333  001CA2  51E9               	movf	vscp_handleProtocolEvent@i_1243& (0+255),w,b
  6334  001CA4  6FDA               	movwf	(??_vscp_handleProtocolEvent+4)& (0+255),b
  6335  001CA6  6BDB               	clrf	(??_vscp_handleProtocolEvent+5)& (0+255),b
  6336  001CA8  51DB               	movf	(??_vscp_handleProtocolEvent+5)& (0+255),w,b
  6337  001CAA  0A80               	xorlw	128
  6338  001CAC  6FDC               	movwf	(??_vscp_handleProtocolEvent+6)& (0+255),b
  6339  001CAE  51D8               	movf	(??_vscp_handleProtocolEvent+2)& (0+255),w,b
  6340  001CB0  5DDA               	subwf	(??_vscp_handleProtocolEvent+4)& (0+255),w,b
  6341  001CB2  51D9               	movf	(??_vscp_handleProtocolEvent+3)& (0+255),w,b
  6342  001CB4  0A80               	xorlw	128
  6343  001CB6  59DC               	subwfb	(??_vscp_handleProtocolEvent+6)& (0+255),w,b
  6344  001CB8  E3D2               	bnc	l9653
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;vscp_firmware.c: 1238: }
  6348                           ;vscp_firmware.c: 1241: vscp_page_select = page_save;
  6349  001CBA  C0DF  F052         	movff	vscp_handleProtocolEvent@page_save_1244,_vscp_page_select
  6350  001CBE  C0E0  F053         	movff	vscp_handleProtocolEvent@page_save_1244+1,_vscp_page_select+1
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;vscp_firmware.c: 1243: vscp_omsg.priority = 0x03;
  6354  001CC2  0E03               	movlw	3
  6355  001CC4  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;vscp_firmware.c: 1244: vscp_omsg.flags = 0x80 + 4 + ((vscp_imsg.flags & 0x0f) - 4);
  6359  001CC6  519B               	movf	_vscp_imsg& (0+255),w,b
  6360  001CC8  0B0F               	andlw	15
  6361  001CCA  0F80               	addlw	128
  6362  001CCC  6FA9               	movwf	_vscp_omsg& (0+255),b
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;vscp_firmware.c: 1245: vscp_omsg.vscp_class = 0;
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;vscp_firmware.c: 1246: vscp_omsg.vscp_type = 39;
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;vscp_firmware.c: 1247: vscp_omsg.data[0] = 0;
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;vscp_firmware.c: 1248: vscp_omsg.data[1] = vscp_imsg.data[1];
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;vscp_firmware.c: 1249: vscp_omsg.data[2] = vscp_imsg.data[2];
  6378  001CCE  D842               	call	PL42	;call to abstracted procedure
  6379                           
  6380                           ; BSR set to: 0
  6381                           ;vscp_firmware.c: 1250: vscp_omsg.data[3] = vscp_imsg.data[3];
  6382  001CD0  C0A4  F0B1         	movff	_vscp_imsg+9,_vscp_omsg+8
  6383  001CD4  EF94  F020         	goto	_vscp_sendEvent
  6384  001CD8                     l9679:
  6385                           
  6386                           ; BSR set to: 0
  6387  001CD8  519F               	movf	(_vscp_imsg+4)& (0+255),w,b
  6388                           
  6389                           ; Switch size 1, requested type "space"
  6390                           ; Number of cases is 16, Range of values is 1 to 38
  6391                           ; switch strategies available:
  6392                           ; Name         Instructions Cycles
  6393                           ; simple_byte           49    25 (average)
  6394                           ;	Chosen strategy is simple_byte
  6395  001CDA  0A01               	xorlw	1	; case 1
  6396  001CDC  E101 D55D          	bz	l9267
  6397  001CE0  0A03               	xorlw	3	; case 2
  6398  001CE2  E101 D55C          	bz	l9269
  6399  001CE6  0A04               	xorlw	4	; case 6
  6400  001CE8  E101 D55B          	bz	l9271
  6401  001CEC  0A0E               	xorlw	14	; case 8
  6402  001CEE  E101 D55A          	bz	l9273
  6403  001CF2  0A01               	xorlw	1	; case 9
  6404  001CF4  E101 D559          	bz	l9275
  6405  001CF8  0A02               	xorlw	2	; case 11
  6406  001CFA  E101 D578          	bz	l9309
  6407  001CFE  0A07               	xorlw	7	; case 12
  6408  001D00  E101 D58E          	bz	l9343
  6409  001D04  0A1B               	xorlw	27	; case 23
  6410  001D06  E101 D622          	bz	l9401
  6411  001D0A  0A0F               	xorlw	15	; case 24
  6412  001D0C  E101 D635          	bz	l9407
  6413  001D10  0A01               	xorlw	1	; case 25
  6414  001D12  E101 D685          	bz	l9441
  6415  001D16  0A04               	xorlw	4	; case 29
  6416  001D18  E101 D6AF          	bz	l9467
  6417  001D1C  0A03               	xorlw	3	; case 30
  6418  001D1E  E101 D6BC          	bz	l9483
  6419  001D22  0A01               	xorlw	1	; case 31
  6420  001D24  E101 D6C9          	bz	l9499
  6421  001D28  0A3E               	xorlw	62	; case 33
  6422  001D2A  E101 D727          	bz	l9585
  6423  001D2E  0A04               	xorlw	4	; case 37
  6424  001D30  E101 D736          	bz	l9595
  6425  001D34  0A03               	xorlw	3	; case 38
  6426  001D36  A4D8               	btfss	status,2,c
  6427  001D38  0012               	return	
  6428  001D3A  D784               	goto	l9645
  6429  001D3C                     __end_of_vscp_handleProtocolEvent:
  6430                           	opt stack 0
  6431  001D3C                     PL28:
  6432                           	opt stack 20
  6433  001D3C  51A3               	movf	(_vscp_imsg+8)& (0+255),w,b
  6434  001D3E  C0A2  F0D6         	movff	_vscp_imsg+7,??_vscp_handleProtocolEvent
  6435  001D42  6BD7               	clrf	(??_vscp_handleProtocolEvent+1)& (0+255),b
  6436  001D44  C0D6  F0D7         	movff	??_vscp_handleProtocolEvent,??_vscp_handleProtocolEvent+1
  6437  001D48  6BD6               	clrf	??_vscp_handleProtocolEvent& (0+255),b
  6438  001D4A  11D6               	iorwf	??_vscp_handleProtocolEvent& (0+255),w,b
  6439  001D4C  6E52               	movwf	_vscp_page_select,c
  6440  001D4E  51D7               	movf	(??_vscp_handleProtocolEvent+1)& (0+255),w,b
  6441  001D50  6E53               	movwf	_vscp_page_select+1,c
  6442  001D52  0012               	return	
  6443  001D54                     __end_ofPL28:
  6444                           	opt stack 0
  6445  001D54                     PL42:
  6446                           	opt stack 20
  6447  001D54  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  6448  001D56  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  6449  001D58  0E27               	movlw	39
  6450  001D5A  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  6451  001D5C  6BAE               	clrf	(_vscp_omsg+5)& (0+255),b
  6452  001D5E  C0A2  F0AF         	movff	_vscp_imsg+7,_vscp_omsg+6
  6453  001D62  C0A3  F0B0         	movff	_vscp_imsg+8,_vscp_omsg+7
  6454  001D66  0012               	return	
  6455  001D68                     __end_ofPL42:
  6456                           	opt stack 0
  6457  001D68                     PL72:
  6458                           	opt stack 20
  6459  001D68  0E03               	movlw	3
  6460  001D6A  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
  6461  001D6C  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
  6462  001D6E  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
  6463  001D70  0E1A               	movlw	26
  6464  001D72  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
  6465  001D74  0C1A               	retlw	26
  6466  001D76                     __end_ofPL72:
  6467                           	opt stack 0
  6468  001D76                     PL78:
  6469                           	opt stack 20
  6470  001D76  C0EE  F0AE         	movff	vscp_handleProtocolEvent@i_1235,_vscp_omsg+5
  6471  001D7A  0E01               	movlw	1
  6472  001D7C  6FF0               	movwf	vscp_handleProtocolEvent@j& (0+255),b
  6473  001D7E  0C01               	retlw	1
  6474  001D80                     __end_ofPL78:
  6475                           	opt stack 0
  6476                           tblptru	equ	0xFF8
  6477                           tblptrh	equ	0xFF7
  6478                           tblptrl	equ	0xFF6
  6479                           tablat	equ	0xFF5
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           intcon	equ	0xFF2
  6483                           postinc0	equ	0xFEE
  6484                           wreg	equ	0xFE8
  6485                           indf1	equ	0xFE7
  6486                           fsr1h	equ	0xFE2
  6487                           fsr1l	equ	0xFE1
  6488                           indf2	equ	0xFDF
  6489                           postinc2	equ	0xFDE
  6490                           postdec2	equ	0xFDD
  6491                           plusw2	equ	0xFDB
  6492                           fsr2h	equ	0xFDA
  6493                           fsr2l	equ	0xFD9
  6494                           status	equ	0xFD8
  6495                           
  6496 ;; *************** function ___lbmod *****************
  6497 ;; Defined at:
  6498 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lbmod.c"
  6499 ;; Parameters:    Size  Location     Type
  6500 ;;  dividend        1    wreg     unsigned char 
  6501 ;;  divisor         1    7[COMRAM] unsigned char 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  dividend        1    8[COMRAM] unsigned char 
  6504 ;;  rem             1   10[COMRAM] unsigned char 
  6505 ;;  counter         1    9[COMRAM] unsigned char 
  6506 ;; Return value:  Size  Location     Type
  6507 ;;                  1    wreg      unsigned char 
  6508 ;; Registers used:
  6509 ;;		wreg, status,2, status,0
  6510 ;; Tracked objects:
  6511 ;;		On entry : F/0
  6512 ;;		On exit  : 0/0
  6513 ;;		Unchanged: 0/0
  6514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6515 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6516 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6518 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6519 ;;Total ram usage:        4 bytes
  6520 ;; Hardware stack levels used:    1
  6521 ;; Hardware stack levels required when called:    2
  6522 ;; This function calls:
  6523 ;;		Nothing
  6524 ;; This function is called by:
  6525 ;;		_vscp_handleProtocolEvent
  6526 ;; This function uses a non-reentrant model
  6527 ;;
  6528                           
  6529                           	psect	text16
  6530  0040DA                     __ptext16:
  6531                           	opt stack 0
  6532  0040DA                     ___lbmod:
  6533                           	opt stack 26
  6534                           
  6535                           ;incstack = 0
  6536                           ;incstack = 0
  6537                           ;___lbmod@dividend stored from wreg
  6538  0040DA  CFE8 F009          	movff	wreg,___lbmod@dividend
  6539                           
  6540                           ; BSR set to: 0
  6541  0040DE  0E08               	movlw	8
  6542  0040E0  6E0A               	movwf	___lbmod@counter,c
  6543                           
  6544                           ; BSR set to: 0
  6545  0040E2  6A0B               	clrf	___lbmod@rem,c
  6546  0040E4                     l7059:
  6547  0040E4  90D8               	bcf	status,0,c
  6548  0040E6  3409               	rlcf	___lbmod@dividend& (0+255),w,c
  6549  0040E8  340B               	rlcf	___lbmod@rem& (0+255),w,c
  6550  0040EA  6E0B               	movwf	___lbmod@rem,c
  6551  0040EC  90D8               	bcf	status,0,c
  6552  0040EE  3609               	rlcf	___lbmod@dividend,f,c
  6553  0040F0  5008               	movf	___lbmod@divisor,w,c
  6554  0040F2  5C0B               	subwf	___lbmod@rem,w,c
  6555  0040F4  E302               	bnc	l7067
  6556  0040F6  5008               	movf	___lbmod@divisor,w,c
  6557  0040F8  5E0B               	subwf	___lbmod@rem,f,c
  6558  0040FA                     l7067:
  6559  0040FA  2E0A               	decfsz	___lbmod@counter,f,c
  6560  0040FC  D7F3               	goto	l7059
  6561  0040FE  500B               	movf	___lbmod@rem,w,c
  6562  004100  0012               	return	
  6563  004102                     __end_of___lbmod:
  6564                           	opt stack 0
  6565                           tblptru	equ	0xFF8
  6566                           tblptrh	equ	0xFF7
  6567                           tblptrl	equ	0xFF6
  6568                           tablat	equ	0xFF5
  6569                           prodh	equ	0xFF4
  6570                           prodl	equ	0xFF3
  6571                           intcon	equ	0xFF2
  6572                           postinc0	equ	0xFEE
  6573                           wreg	equ	0xFE8
  6574                           indf1	equ	0xFE7
  6575                           fsr1h	equ	0xFE2
  6576                           fsr1l	equ	0xFE1
  6577                           indf2	equ	0xFDF
  6578                           postinc2	equ	0xFDE
  6579                           postdec2	equ	0xFDD
  6580                           plusw2	equ	0xFDB
  6581                           fsr2h	equ	0xFDA
  6582                           fsr2l	equ	0xFD9
  6583                           status	equ	0xFD8
  6584                           
  6585 ;; *************** function _vscp_writeRegister *****************
  6586 ;; Defined at:
  6587 ;;		line 692 in file "../../vscp_firmware/common/vscp_firmware.c"
  6588 ;; Parameters:    Size  Location     Type
  6589 ;;  reg             1    wreg     unsigned char 
  6590 ;;  value           1   30[BANK0 ] unsigned char 
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;  reg             1   31[BANK0 ] unsigned char 
  6593 ;; Return value:  Size  Location     Type
  6594 ;;                  1    wreg      unsigned char 
  6595 ;; Registers used:
  6596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6597 ;; Tracked objects:
  6598 ;;		On entry : F/0
  6599 ;;		On exit  : 0/0
  6600 ;;		Unchanged: 0/0
  6601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6602 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6606 ;;Total ram usage:        2 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    8
  6609 ;; This function calls:
  6610 ;;		_vscp_writeAppReg
  6611 ;;		_vscp_writeStdReg
  6612 ;; This function is called by:
  6613 ;;		_vscp_handleProtocolEvent
  6614 ;; This function uses a non-reentrant model
  6615 ;;
  6616                           
  6617                           	psect	text17
  6618  00425C                     __ptext17:
  6619                           	opt stack 0
  6620  00425C                     _vscp_writeRegister:
  6621                           	opt stack 20
  6622                           
  6623                           ;incstack = 0
  6624                           ;incstack = 0
  6625                           ;vscp_writeRegister@reg stored from wreg
  6626  00425C  CFE8 F0D5          	movff	wreg,vscp_writeRegister@reg
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;vscp_firmware.c: 693: if (reg >= 0x80) {
  6630  004260  0E7F               	movlw	127
  6631  004262  65D5               	cpfsgt	vscp_writeRegister@reg& (0+255),b
  6632  004264  D005               	goto	l10441
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;vscp_firmware.c: 694: return vscp_writeStdReg(reg, value);
  6636  004266  C0D4  F00F         	movff	vscp_writeRegister@value,?_vscp_writeStdReg
  6637  00426A  51D5               	movf	vscp_writeRegister@reg& (0+255),w,b
  6638  00426C  EF76  F01B         	goto	_vscp_writeStdReg
  6639  004270                     l10441:
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;vscp_firmware.c: 696: return vscp_writeAppReg(reg, value);
  6643  004270  C0D4  F051         	movff	vscp_writeRegister@value,?_vscp_writeAppReg
  6644  004274  51D5               	movf	vscp_writeRegister@reg& (0+255),w,b
  6645  004276  EF91  F007         	goto	_vscp_writeAppReg
  6646  00427A                     __end_of_vscp_writeRegister:
  6647                           	opt stack 0
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           intcon	equ	0xFF2
  6655                           postinc0	equ	0xFEE
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           fsr1h	equ	0xFE2
  6659                           fsr1l	equ	0xFE1
  6660                           indf2	equ	0xFDF
  6661                           postinc2	equ	0xFDE
  6662                           postdec2	equ	0xFDD
  6663                           plusw2	equ	0xFDB
  6664                           fsr2h	equ	0xFDA
  6665                           fsr2l	equ	0xFD9
  6666                           status	equ	0xFD8
  6667                           
  6668 ;; *************** function _vscp_writeStdReg *****************
  6669 ;; Defined at:
  6670 ;;		line 705 in file "../../vscp_firmware/common/vscp_firmware.c"
  6671 ;; Parameters:    Size  Location     Type
  6672 ;;  reg             1    wreg     unsigned char 
  6673 ;;  value           1   14[COMRAM] unsigned char 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  reg             1   20[COMRAM] unsigned char 
  6676 ;;  rv              1   19[COMRAM] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      unsigned char 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : F/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6686 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6688 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6689 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6690 ;;Total ram usage:        7 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    5
  6693 ;; This function calls:
  6694 ;;		_vscp_setGUID
  6695 ;;		_vscp_setManufacturerId
  6696 ;;		_vscp_getGUID
  6697 ;;		_vscp_getUserID
  6698 ;;		_vscp_setUserID
  6699 ;;		_vscp_getManufacturerId
  6700 ;;		_vscp_restoreDefaults
  6701 ;; This function is called by:
  6702 ;;		_vscp_writeRegister
  6703 ;;		_vscp_handleProtocolEvent
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text18
  6708  0036EC                     __ptext18:
  6709                           	opt stack 0
  6710  0036EC                     _vscp_writeStdReg:
  6711                           	opt stack 23
  6712                           
  6713                           ;incstack = 0
  6714                           ;incstack = 0
  6715                           ;vscp_writeStdReg@reg stored from wreg
  6716  0036EC  CFE8 F015          	movff	wreg,vscp_writeStdReg@reg
  6717                           
  6718                           ; BSR set to: 0
  6719                           ;vscp_firmware.c: 706: uint8_t rv = ~value;
  6720  0036F0  1C0F               	comf	vscp_writeStdReg@value,w,c
  6721  0036F2  6E14               	movwf	vscp_writeStdReg@rv,c
  6722                           
  6723                           ; BSR set to: 0
  6724                           ;vscp_firmware.c: 708: if ((reg > (0x82 + 1)) &&
  6725                           ;vscp_firmware.c: 709: (reg < 0x89)) {
  6726  0036F4  0E83               	movlw	131
  6727  0036F6  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6728  0036F8  D00E               	goto	l9103
  6729                           
  6730                           ; BSR set to: 0
  6731  0036FA  0E89               	movlw	137
  6732  0036FC  6015               	cpfslt	vscp_writeStdReg@reg,c
  6733  0036FE  D00B               	goto	l9103
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;vscp_firmware.c: 712: vscp_setUserID((reg - 0x84), value);
  6737  003700  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setUserID
  6738  003704  5015               	movf	vscp_writeStdReg@reg,w,c
  6739  003706  0F7C               	addlw	124
  6740  003708  EC76  F021         	call	_vscp_setUserID
  6741                           
  6742                           ;vscp_firmware.c: 713: rv = vscp_getUserID((reg - 0x84));
  6743  00370C  5015               	movf	vscp_writeStdReg@reg,w,c
  6744  00370E  0F7C               	addlw	124
  6745  003710  ECA3  F021         	call	_vscp_getUserID
  6746  003714  D069               	goto	L23
  6747  003716                     l9103:
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;vscp_firmware.c: 716: else if (0x92 == reg) {
  6751  003716  5015               	movf	vscp_writeStdReg@reg,w,c
  6752  003718  0A92               	xorlw	146
  6753  00371A  E10D               	bnz	l9109
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;vscp_firmware.c: 719: vscp_page_select = (vscp_page_select & 0xff) | ((uint16_t) value 
      +                          << 8);
  6757  00371C  500F               	movf	vscp_writeStdReg@value,w,c
  6758  00371E  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6759  003720  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6760  003722  5052               	movf	_vscp_page_select,w,c
  6761  003724  6E12               	movwf	(??_vscp_writeStdReg+2)& (0+255),c
  6762  003726  6A13               	clrf	(??_vscp_writeStdReg+3)& (0+255),c
  6763  003728  1010               	iorwf	??_vscp_writeStdReg,w,c
  6764  00372A  6E52               	movwf	_vscp_page_select,c
  6765  00372C  5011               	movf	??_vscp_writeStdReg+1,w,c
  6766  00372E  1013               	iorwf	??_vscp_writeStdReg+3,w,c
  6767  003730  6E53               	movwf	_vscp_page_select+1,c
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;vscp_firmware.c: 720: rv = (vscp_page_select >> 8) & 0xff;
  6771  003732  5053               	movf	_vscp_page_select+1,w,c
  6772  003734  D059               	goto	L23
  6773  003736                     l9109:
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;vscp_firmware.c: 722: else if (0x93 == reg) {
  6777  003736  5015               	movf	vscp_writeStdReg@reg,w,c
  6778  003738  0A93               	xorlw	147
  6779  00373A  E10B               	bnz	l9115
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;vscp_firmware.c: 725: vscp_page_select = (vscp_page_select & 0xff00) | value;
  6783  00373C  6A10               	clrf	??_vscp_writeStdReg& (0+255),c
  6784  00373E  5053               	movf	_vscp_page_select+1,w,c
  6785  003740  6E11               	movwf	(??_vscp_writeStdReg+1)& (0+255),c
  6786  003742  500F               	movf	vscp_writeStdReg@value,w,c
  6787  003744  1010               	iorwf	??_vscp_writeStdReg,w,c
  6788  003746  6E52               	movwf	_vscp_page_select,c
  6789  003748  5011               	movf	??_vscp_writeStdReg+1,w,c
  6790  00374A  6E53               	movwf	_vscp_page_select+1,c
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;vscp_firmware.c: 726: rv = (vscp_page_select & 0xff);
  6794  00374C  C052  F014         	movff	_vscp_page_select,vscp_writeStdReg@rv
  6795                           
  6796                           ;vscp_firmware.c: 727: }
  6797  003750  D04E               	goto	l9157
  6798  003752                     l9115:
  6799                           
  6800                           ; BSR set to: 0
  6801                           ;vscp_firmware.c: 732: else if ((reg > 0x88) && (reg < 0x91)) {
  6802  003752  0E88               	movlw	136
  6803  003754  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6804  003756  D019               	goto	l9127
  6805                           
  6806                           ; BSR set to: 0
  6807  003758  0E91               	movlw	145
  6808  00375A  6015               	cpfslt	vscp_writeStdReg@reg,c
  6809  00375C  D016               	goto	l9127
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;vscp_firmware.c: 734: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6813                           ;vscp_firmware.c: 735: (0xff != (vscp_page_select & 0xff))) {
  6814  00375E  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6815  003762  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6816  003766  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6817  003768  2811               	incf	??_vscp_writeStdReg+1,w,c
  6818  00376A  E102               	bnz	l9123
  6819                           
  6820                           ; BSR set to: 0
  6821  00376C  2852               	incf	_vscp_page_select,w,c
  6822  00376E  E002               	bz	l9125
  6823  003770                     l9123:
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;vscp_firmware.c: 737: rv = ~value;
  6827  003770  1C0F               	comf	vscp_writeStdReg@value,w,c
  6828  003772  D03A               	goto	L23
  6829  003774                     l9125:
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;vscp_firmware.c: 740: vscp_setManufacturerId(reg - 0x89, value);
  6833  003774  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setManufacturerId
  6834  003778  5015               	movf	vscp_writeStdReg@reg,w,c
  6835  00377A  0F77               	addlw	119
  6836  00377C  ECDF  F020         	call	_vscp_setManufacturerId
  6837                           
  6838                           ;vscp_firmware.c: 741: rv = vscp_getManufacturerId(reg - 0x89);
  6839  003780  5015               	movf	vscp_writeStdReg@reg,w,c
  6840  003782  0F77               	addlw	119
  6841  003784  EC99  F021         	call	_vscp_getManufacturerId
  6842  003788  D02F               	goto	L23
  6843  00378A                     l9127:
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;vscp_firmware.c: 744: else if ((reg > (0xD0 - 1)) && (reg < 0xE0)) {
  6847  00378A  0ECF               	movlw	207
  6848  00378C  6415               	cpfsgt	vscp_writeStdReg@reg,c
  6849  00378E  D017               	goto	l9139
  6850                           
  6851                           ; BSR set to: 0
  6852  003790  0EE0               	movlw	224
  6853  003792  6015               	cpfslt	vscp_writeStdReg@reg,c
  6854  003794  D014               	goto	l9139
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;vscp_firmware.c: 746: if ((0xff != ((vscp_page_select >> 8) & 0xff)) ||
  6858                           ;vscp_firmware.c: 747: (0xff != (vscp_page_select & 0xff))) {
  6859  003796  C053  F010         	movff	_vscp_page_select+1,??_vscp_writeStdReg
  6860  00379A  C010  F011         	movff	??_vscp_writeStdReg,??_vscp_writeStdReg+1
  6861  00379E  6A12               	clrf	(??_vscp_writeStdReg+2)& (0+255),c
  6862  0037A0  2811               	incf	??_vscp_writeStdReg+1,w,c
  6863  0037A2  E1E6               	bnz	l9123
  6864                           
  6865                           ; BSR set to: 0
  6866  0037A4  2852               	incf	_vscp_page_select,w,c
  6867  0037A6  E1E4               	bnz	l9123
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;vscp_firmware.c: 751: else {
  6871                           ;vscp_firmware.c: 752: vscp_setGUID(reg - 0xD0, value);
  6872  0037A8  C00F  F00B         	movff	vscp_writeStdReg@value,?_vscp_setGUID
  6873  0037AC  5015               	movf	vscp_writeStdReg@reg,w,c
  6874  0037AE  0F30               	addlw	48
  6875  0037B0  ECEF  F020         	call	_vscp_setGUID
  6876                           
  6877                           ;vscp_firmware.c: 753: rv = vscp_getGUID(reg - 0xD0);
  6878  0037B4  5015               	movf	vscp_writeStdReg@reg,w,c
  6879  0037B6  0F30               	addlw	48
  6880  0037B8  ECAD  F021         	call	_vscp_getGUID
  6881  0037BC  D015               	goto	L23
  6882  0037BE                     l9139:
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;vscp_firmware.c: 757: else if ( 0xA2 == reg ) {
  6886  0037BE  5015               	movf	vscp_writeStdReg@reg,w,c
  6887  0037C0  0AA2               	xorlw	162
  6888  0037C2  E1D6               	bnz	l9123
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;vscp_firmware.c: 758: if ( 0x55 == value ) {
  6892  0037C4  500F               	movf	vscp_writeStdReg@value,w,c
  6893  0037C6  0A55               	xorlw	85
  6894  0037C8  E104               	bnz	l9147
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;vscp_firmware.c: 759: vscp_configtimer = 0;
  6898  0037CA  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
  6899  0037CC  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;vscp_firmware.c: 760: rv = 0x55;
  6903  0037CE  0E55               	movlw	85
  6904  0037D0  D00B               	goto	L23
  6905  0037D2                     l9147:
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;vscp_firmware.c: 762: else if ( 0xaa == value ) {
  6909  0037D2  500F               	movf	vscp_writeStdReg@value,w,c
  6910  0037D4  0AAA               	xorlw	170
  6911  0037D6  E10B               	bnz	l9157
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;vscp_firmware.c: 763: if ( vscp_configtimer < 1000 ) {
  6915  0037D8  0EE8               	movlw	232
  6916  0037DA  5D84               	subwf	_vscp_configtimer& (0+255),w,b	;volatile
  6917  0037DC  0E03               	movlw	3
  6918  0037DE  5985               	subwfb	(_vscp_configtimer+1)& (0+255),w,b	;volatile
  6919  0037E0  E205               	bc	l1182
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;vscp_firmware.c: 764: vscp_restoreDefaults();
  6923  0037E2  EC0B  F022         	call	_vscp_restoreDefaults	;wreg free
  6924                           
  6925                           ;vscp_firmware.c: 765: rv = 0xaa;
  6926  0037E6  0EAA               	movlw	170
  6927  0037E8                     L23:
  6928  0037E8  6E14               	movwf	vscp_writeStdReg@rv,c
  6929                           
  6930                           ;vscp_firmware.c: 766: }
  6931  0037EA  D001               	goto	l9157
  6932  0037EC                     l1182:
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;vscp_firmware.c: 767: else {
  6936                           ;vscp_firmware.c: 768: rv = 0;
  6937  0037EC  6A14               	clrf	vscp_writeStdReg@rv,c
  6938  0037EE                     l9157:
  6939                           
  6940                           ;vscp_firmware.c: 776: }
  6941                           ;vscp_firmware.c: 778: return rv;
  6942  0037EE  5014               	movf	vscp_writeStdReg@rv,w,c
  6943  0037F0  0012               	return	
  6944  0037F2                     __end_of_vscp_writeStdReg:
  6945                           	opt stack 0
  6946                           tblptru	equ	0xFF8
  6947                           tblptrh	equ	0xFF7
  6948                           tblptrl	equ	0xFF6
  6949                           tablat	equ	0xFF5
  6950                           prodh	equ	0xFF4
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           indf1	equ	0xFE7
  6956                           fsr1h	equ	0xFE2
  6957                           fsr1l	equ	0xFE1
  6958                           indf2	equ	0xFDF
  6959                           postinc2	equ	0xFDE
  6960                           postdec2	equ	0xFDD
  6961                           plusw2	equ	0xFDB
  6962                           fsr2h	equ	0xFDA
  6963                           fsr2l	equ	0xFD9
  6964                           status	equ	0xFD8
  6965                           
  6966 ;; *************** function _vscp_restoreDefaults *****************
  6967 ;; Defined at:
  6968 ;;		line 2492 in file "../main.c"
  6969 ;; Parameters:    Size  Location     Type
  6970 ;;		None
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;		None
  6973 ;; Return value:  Size  Location     Type
  6974 ;;		None               void
  6975 ;; Registers used:
  6976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : F/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6986 ;;Total ram usage:        0 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    4
  6989 ;; This function calls:
  6990 ;;		_init_app_eeprom
  6991 ;;		_init_app_ram
  6992 ;; This function is called by:
  6993 ;;		_vscp_writeStdReg
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           	psect	text19
  6998  004416                     __ptext19:
  6999                           	opt stack 0
  7000  004416                     _vscp_restoreDefaults:
  7001                           	opt stack 23
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;main.c: 2493: init_app_eeprom();
  7005                           
  7006                           ;incstack = 0
  7007                           ;incstack = 0
  7008  004416  EC8D  F010         	call	_init_app_eeprom	;wreg free
  7009                           
  7010                           ;main.c: 2494: init_app_ram();
  7011  00441A  EFF9  F01B         	goto	_init_app_ram	;wreg free
  7012  00441E                     __end_of_vscp_restoreDefaults:
  7013                           	opt stack 0
  7014                           tblptru	equ	0xFF8
  7015                           tblptrh	equ	0xFF7
  7016                           tblptrl	equ	0xFF6
  7017                           tablat	equ	0xFF5
  7018                           prodh	equ	0xFF4
  7019                           prodl	equ	0xFF3
  7020                           intcon	equ	0xFF2
  7021                           postinc0	equ	0xFEE
  7022                           wreg	equ	0xFE8
  7023                           indf1	equ	0xFE7
  7024                           fsr1h	equ	0xFE2
  7025                           fsr1l	equ	0xFE1
  7026                           indf2	equ	0xFDF
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           plusw2	equ	0xFDB
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _init_app_eeprom *****************
  7035 ;; Defined at:
  7036 ;;		line 492 in file "../main.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;  j               1   13[COMRAM] unsigned char 
  7041 ;;  i               1   12[COMRAM] unsigned char 
  7042 ;; Return value:  Size  Location     Type
  7043 ;;		None               void
  7044 ;; Registers used:
  7045 ;;		wreg, status,2, status,0, cstack
  7046 ;; Tracked objects:
  7047 ;;		On entry : 0/0
  7048 ;;		On exit  : 0/0
  7049 ;;		Unchanged: 0/0
  7050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7053 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7054 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7055 ;;Total ram usage:        4 bytes
  7056 ;; Hardware stack levels used:    1
  7057 ;; Hardware stack levels required when called:    3
  7058 ;; This function calls:
  7059 ;;		_writeEEPROM
  7060 ;; This function is called by:
  7061 ;;		_main
  7062 ;;		_vscp_restoreDefaults
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           	psect	text20
  7067  00211A                     __ptext20:
  7068                           	opt stack 0
  7069  00211A                     _init_app_eeprom:
  7070                           	opt stack 23
  7071                           
  7072                           ;main.c: 493: unsigned char i, j;
  7073                           ;main.c: 495: writeEEPROM( 0x43 + 0, 0 );
  7074                           
  7075                           ;incstack = 0
  7076                           ;incstack = 0
  7077  00211A  6A09               	clrf	?_writeEEPROM+1,c
  7078  00211C  0E43               	movlw	67
  7079  00211E  6E08               	movwf	?_writeEEPROM,c
  7080  002120  0E00               	movlw	0
  7081  002122  6A0A               	clrf	?_writeEEPROM+2,c
  7082  002124  ECBA  F020         	call	_writeEEPROM	;wreg free
  7083                           
  7084                           ;main.c: 496: writeEEPROM( 0x43 + 1, 0 );
  7085  002128  6A09               	clrf	?_writeEEPROM+1,c
  7086  00212A  0E44               	movlw	68
  7087  00212C  6E08               	movwf	?_writeEEPROM,c
  7088  00212E  0E00               	movlw	0
  7089  002130  6A0A               	clrf	?_writeEEPROM+2,c
  7090  002132  ECBA  F020         	call	_writeEEPROM	;wreg free
  7091                           
  7092                           ;main.c: 498: writeEEPROM( 0x43 + 10,
  7093                           ;main.c: 499: 0x08 |
  7094                           ;main.c: 500: 0x10 |
  7095                           ;main.c: 501: 0x80 );
  7096  002136  6A09               	clrf	?_writeEEPROM+1,c
  7097  002138  0E4D               	movlw	77
  7098  00213A  6E08               	movwf	?_writeEEPROM,c
  7099  00213C  0E98               	movlw	152
  7100  00213E  6E0A               	movwf	?_writeEEPROM+2,c
  7101  002140  ECBA  F020         	call	_writeEEPROM	;wreg free
  7102                           
  7103                           ;main.c: 503: writeEEPROM( 0x43 + 11,
  7104                           ;main.c: 504: 0x08 |
  7105                           ;main.c: 505: 0x10 |
  7106                           ;main.c: 506: 0x80 );
  7107  002144  6A09               	clrf	?_writeEEPROM+1,c
  7108  002146  0E4E               	movlw	78
  7109  002148  6E08               	movwf	?_writeEEPROM,c
  7110  00214A  0E98               	movlw	152
  7111  00214C  6E0A               	movwf	?_writeEEPROM+2,c
  7112  00214E  ECBA  F020         	call	_writeEEPROM	;wreg free
  7113                           
  7114                           ;main.c: 508: writeEEPROM( 0x43 + 12,
  7115                           ;main.c: 509: 0x08 |
  7116                           ;main.c: 510: 0x10 |
  7117                           ;main.c: 511: 0x80 );
  7118  002152  6A09               	clrf	?_writeEEPROM+1,c
  7119  002154  0E4F               	movlw	79
  7120  002156  6E08               	movwf	?_writeEEPROM,c
  7121  002158  0E98               	movlw	152
  7122  00215A  6E0A               	movwf	?_writeEEPROM+2,c
  7123  00215C  ECBA  F020         	call	_writeEEPROM	;wreg free
  7124                           
  7125                           ;main.c: 513: writeEEPROM( 0x43 + 13,
  7126                           ;main.c: 514: 0x08 |
  7127                           ;main.c: 515: 0x10 |
  7128                           ;main.c: 516: 0x80 );
  7129  002160  6A09               	clrf	?_writeEEPROM+1,c
  7130  002162  0E50               	movlw	80
  7131  002164  6E08               	movwf	?_writeEEPROM,c
  7132  002166  0E98               	movlw	152
  7133  002168  6E0A               	movwf	?_writeEEPROM+2,c
  7134  00216A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7135                           
  7136                           ;main.c: 518: writeEEPROM( 0x43 + 14,
  7137                           ;main.c: 519: 0x08 |
  7138                           ;main.c: 520: 0x10 |
  7139                           ;main.c: 521: 0x80 );
  7140  00216E  6A09               	clrf	?_writeEEPROM+1,c
  7141  002170  0E51               	movlw	81
  7142  002172  6E08               	movwf	?_writeEEPROM,c
  7143  002174  0E98               	movlw	152
  7144  002176  6E0A               	movwf	?_writeEEPROM+2,c
  7145  002178  ECBA  F020         	call	_writeEEPROM	;wreg free
  7146                           
  7147                           ;main.c: 523: writeEEPROM( 0x43 + 15,
  7148                           ;main.c: 524: 0x08 |
  7149                           ;main.c: 525: 0x10 |
  7150                           ;main.c: 526: 0x80 );
  7151  00217C  6A09               	clrf	?_writeEEPROM+1,c
  7152  00217E  0E52               	movlw	82
  7153  002180  6E08               	movwf	?_writeEEPROM,c
  7154  002182  0E98               	movlw	152
  7155  002184  6E0A               	movwf	?_writeEEPROM+2,c
  7156  002186  ECBA  F020         	call	_writeEEPROM	;wreg free
  7157                           
  7158                           ;main.c: 528: writeEEPROM( 0x43 + 16,
  7159                           ;main.c: 529: 0x08 |
  7160                           ;main.c: 530: 0x10 |
  7161                           ;main.c: 531: 0x80 );
  7162  00218A  6A09               	clrf	?_writeEEPROM+1,c
  7163  00218C  0E53               	movlw	83
  7164  00218E  6E08               	movwf	?_writeEEPROM,c
  7165  002190  0E98               	movlw	152
  7166  002192  6E0A               	movwf	?_writeEEPROM+2,c
  7167  002194  ECBA  F020         	call	_writeEEPROM	;wreg free
  7168                           
  7169                           ;main.c: 533: writeEEPROM( 0x43 + 17,
  7170                           ;main.c: 534: 0x08 |
  7171                           ;main.c: 535: 0x10 |
  7172                           ;main.c: 536: 0x80 );
  7173  002198  6A09               	clrf	?_writeEEPROM+1,c
  7174  00219A  0E54               	movlw	84
  7175  00219C  6E08               	movwf	?_writeEEPROM,c
  7176  00219E  0E98               	movlw	152
  7177  0021A0  6E0A               	movwf	?_writeEEPROM+2,c
  7178  0021A2  ECBA  F020         	call	_writeEEPROM	;wreg free
  7179                           
  7180                           ;main.c: 538: writeEEPROM( 0x43 + 18, 0 );
  7181  0021A6  6A09               	clrf	?_writeEEPROM+1,c
  7182  0021A8  0E55               	movlw	85
  7183  0021AA  6E08               	movwf	?_writeEEPROM,c
  7184  0021AC  0E00               	movlw	0
  7185  0021AE  6A0A               	clrf	?_writeEEPROM+2,c
  7186  0021B0  ECBA  F020         	call	_writeEEPROM	;wreg free
  7187                           
  7188                           ;main.c: 539: writeEEPROM( 0x43 + 19, 0 );
  7189  0021B4  6A09               	clrf	?_writeEEPROM+1,c
  7190  0021B6  0E56               	movlw	86
  7191  0021B8  6E08               	movwf	?_writeEEPROM,c
  7192  0021BA  0E00               	movlw	0
  7193  0021BC  6A0A               	clrf	?_writeEEPROM+2,c
  7194  0021BE  ECBA  F020         	call	_writeEEPROM	;wreg free
  7195                           
  7196                           ;main.c: 540: writeEEPROM( 0x43 + 20, 0 );
  7197  0021C2  6A09               	clrf	?_writeEEPROM+1,c
  7198  0021C4  0E57               	movlw	87
  7199  0021C6  6E08               	movwf	?_writeEEPROM,c
  7200  0021C8  0E00               	movlw	0
  7201  0021CA  6A0A               	clrf	?_writeEEPROM+2,c
  7202  0021CC  ECBA  F020         	call	_writeEEPROM	;wreg free
  7203                           
  7204                           ;main.c: 541: writeEEPROM( 0x43 + 21, 0 );
  7205  0021D0  6A09               	clrf	?_writeEEPROM+1,c
  7206  0021D2  0E58               	movlw	88
  7207  0021D4  6E08               	movwf	?_writeEEPROM,c
  7208  0021D6  0E00               	movlw	0
  7209  0021D8  6A0A               	clrf	?_writeEEPROM+2,c
  7210  0021DA  ECBA  F020         	call	_writeEEPROM	;wreg free
  7211                           
  7212                           ;main.c: 542: writeEEPROM( 0x43 + 22, 0 );
  7213  0021DE  6A09               	clrf	?_writeEEPROM+1,c
  7214  0021E0  0E59               	movlw	89
  7215  0021E2  6E08               	movwf	?_writeEEPROM,c
  7216  0021E4  0E00               	movlw	0
  7217  0021E6  6A0A               	clrf	?_writeEEPROM+2,c
  7218  0021E8  ECBA  F020         	call	_writeEEPROM	;wreg free
  7219                           
  7220                           ;main.c: 543: writeEEPROM( 0x43 + 23, 0 );
  7221  0021EC  6A09               	clrf	?_writeEEPROM+1,c
  7222  0021EE  0E5A               	movlw	90
  7223  0021F0  6E08               	movwf	?_writeEEPROM,c
  7224  0021F2  0E00               	movlw	0
  7225  0021F4  6A0A               	clrf	?_writeEEPROM+2,c
  7226  0021F6  ECBA  F020         	call	_writeEEPROM	;wreg free
  7227                           
  7228                           ;main.c: 544: writeEEPROM( 0x43 + 24, 0 );
  7229  0021FA  6A09               	clrf	?_writeEEPROM+1,c
  7230  0021FC  0E5B               	movlw	91
  7231  0021FE  6E08               	movwf	?_writeEEPROM,c
  7232  002200  0E00               	movlw	0
  7233  002202  6A0A               	clrf	?_writeEEPROM+2,c
  7234  002204  ECBA  F020         	call	_writeEEPROM	;wreg free
  7235                           
  7236                           ;main.c: 545: writeEEPROM( 0x43 + 25, 0 );
  7237  002208  6A09               	clrf	?_writeEEPROM+1,c
  7238  00220A  0E5C               	movlw	92
  7239  00220C  6E08               	movwf	?_writeEEPROM,c
  7240  00220E  0E00               	movlw	0
  7241  002210  6A0A               	clrf	?_writeEEPROM+2,c
  7242  002212  ECBA  F020         	call	_writeEEPROM	;wreg free
  7243                           
  7244                           ;main.c: 546: writeEEPROM( 0x43 + 26, 0 );
  7245  002216  6A09               	clrf	?_writeEEPROM+1,c
  7246  002218  0E5D               	movlw	93
  7247  00221A  6E08               	movwf	?_writeEEPROM,c
  7248  00221C  0E00               	movlw	0
  7249  00221E  6A0A               	clrf	?_writeEEPROM+2,c
  7250  002220  ECBA  F020         	call	_writeEEPROM	;wreg free
  7251                           
  7252                           ;main.c: 547: writeEEPROM( 0x43 + 27, 0 );
  7253  002224  6A09               	clrf	?_writeEEPROM+1,c
  7254  002226  0E5E               	movlw	94
  7255  002228  6E08               	movwf	?_writeEEPROM,c
  7256  00222A  0E00               	movlw	0
  7257  00222C  6A0A               	clrf	?_writeEEPROM+2,c
  7258  00222E  ECBA  F020         	call	_writeEEPROM	;wreg free
  7259                           
  7260                           ;main.c: 548: writeEEPROM( 0x43 + 28, 0 );
  7261  002232  6A09               	clrf	?_writeEEPROM+1,c
  7262  002234  0E5F               	movlw	95
  7263  002236  6E08               	movwf	?_writeEEPROM,c
  7264  002238  0E00               	movlw	0
  7265  00223A  6A0A               	clrf	?_writeEEPROM+2,c
  7266  00223C  ECBA  F020         	call	_writeEEPROM	;wreg free
  7267                           
  7268                           ;main.c: 549: writeEEPROM( 0x43 + 29, 0 );
  7269  002240  6A09               	clrf	?_writeEEPROM+1,c
  7270  002242  0E60               	movlw	96
  7271  002244  6E08               	movwf	?_writeEEPROM,c
  7272  002246  0E00               	movlw	0
  7273  002248  6A0A               	clrf	?_writeEEPROM+2,c
  7274  00224A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7275                           
  7276                           ;main.c: 550: writeEEPROM( 0x43 + 30, 0 );
  7277  00224E  6A09               	clrf	?_writeEEPROM+1,c
  7278  002250  0E61               	movlw	97
  7279  002252  6E08               	movwf	?_writeEEPROM,c
  7280  002254  0E00               	movlw	0
  7281  002256  6A0A               	clrf	?_writeEEPROM+2,c
  7282  002258  ECBA  F020         	call	_writeEEPROM	;wreg free
  7283                           
  7284                           ;main.c: 551: writeEEPROM( 0x43 + 31, 0 );
  7285  00225C  6A09               	clrf	?_writeEEPROM+1,c
  7286  00225E  0E62               	movlw	98
  7287  002260  6E08               	movwf	?_writeEEPROM,c
  7288  002262  0E00               	movlw	0
  7289  002264  6A0A               	clrf	?_writeEEPROM+2,c
  7290  002266  ECBA  F020         	call	_writeEEPROM	;wreg free
  7291                           
  7292                           ;main.c: 552: writeEEPROM( 0x43 + 32, 0 );
  7293  00226A  6A09               	clrf	?_writeEEPROM+1,c
  7294  00226C  0E63               	movlw	99
  7295  00226E  6E08               	movwf	?_writeEEPROM,c
  7296  002270  0E00               	movlw	0
  7297  002272  6A0A               	clrf	?_writeEEPROM+2,c
  7298  002274  ECBA  F020         	call	_writeEEPROM	;wreg free
  7299                           
  7300                           ;main.c: 553: writeEEPROM( 0x43 + 33, 0 );
  7301  002278  6A09               	clrf	?_writeEEPROM+1,c
  7302  00227A  0E64               	movlw	100
  7303  00227C  6E08               	movwf	?_writeEEPROM,c
  7304  00227E  0E00               	movlw	0
  7305  002280  6A0A               	clrf	?_writeEEPROM+2,c
  7306  002282  ECBA  F020         	call	_writeEEPROM	;wreg free
  7307                           
  7308                           ;main.c: 555: writeEEPROM( 0x43 + 34, 0 );
  7309  002286  6A09               	clrf	?_writeEEPROM+1,c
  7310  002288  0E65               	movlw	101
  7311  00228A  6E08               	movwf	?_writeEEPROM,c
  7312  00228C  0E00               	movlw	0
  7313  00228E  6A0A               	clrf	?_writeEEPROM+2,c
  7314  002290  ECBA  F020         	call	_writeEEPROM	;wreg free
  7315                           
  7316                           ;main.c: 556: writeEEPROM( 0x43 + 35, 0 );
  7317  002294  6A09               	clrf	?_writeEEPROM+1,c
  7318  002296  0E66               	movlw	102
  7319  002298  6E08               	movwf	?_writeEEPROM,c
  7320  00229A  0E00               	movlw	0
  7321  00229C  6A0A               	clrf	?_writeEEPROM+2,c
  7322  00229E  ECBA  F020         	call	_writeEEPROM	;wreg free
  7323                           
  7324                           ;main.c: 557: writeEEPROM( 0x43 + 36, 0 );
  7325  0022A2  6A09               	clrf	?_writeEEPROM+1,c
  7326  0022A4  0E67               	movlw	103
  7327  0022A6  6E08               	movwf	?_writeEEPROM,c
  7328  0022A8  0E00               	movlw	0
  7329  0022AA  6A0A               	clrf	?_writeEEPROM+2,c
  7330  0022AC  ECBA  F020         	call	_writeEEPROM	;wreg free
  7331                           
  7332                           ;main.c: 558: writeEEPROM( 0x43 + 37, 0 );
  7333  0022B0  6A09               	clrf	?_writeEEPROM+1,c
  7334  0022B2  0E68               	movlw	104
  7335  0022B4  6E08               	movwf	?_writeEEPROM,c
  7336  0022B6  0E00               	movlw	0
  7337  0022B8  6A0A               	clrf	?_writeEEPROM+2,c
  7338  0022BA  ECBA  F020         	call	_writeEEPROM	;wreg free
  7339                           
  7340                           ;main.c: 559: writeEEPROM( 0x43 + 38, 0 );
  7341  0022BE  6A09               	clrf	?_writeEEPROM+1,c
  7342  0022C0  0E69               	movlw	105
  7343  0022C2  6E08               	movwf	?_writeEEPROM,c
  7344  0022C4  0E00               	movlw	0
  7345  0022C6  6A0A               	clrf	?_writeEEPROM+2,c
  7346  0022C8  ECBA  F020         	call	_writeEEPROM	;wreg free
  7347                           
  7348                           ;main.c: 560: writeEEPROM( 0x43 + 39, 0 );
  7349  0022CC  6A09               	clrf	?_writeEEPROM+1,c
  7350  0022CE  0E6A               	movlw	106
  7351  0022D0  6E08               	movwf	?_writeEEPROM,c
  7352  0022D2  0E00               	movlw	0
  7353  0022D4  6A0A               	clrf	?_writeEEPROM+2,c
  7354  0022D6  ECBA  F020         	call	_writeEEPROM	;wreg free
  7355                           
  7356                           ;main.c: 561: writeEEPROM( 0x43 + 40, 0 );
  7357  0022DA  6A09               	clrf	?_writeEEPROM+1,c
  7358  0022DC  0E6B               	movlw	107
  7359  0022DE  6E08               	movwf	?_writeEEPROM,c
  7360  0022E0  0E00               	movlw	0
  7361  0022E2  6A0A               	clrf	?_writeEEPROM+2,c
  7362  0022E4  ECBA  F020         	call	_writeEEPROM	;wreg free
  7363                           
  7364                           ;main.c: 562: writeEEPROM( 0x43 + 41, 0 );
  7365  0022E8  6A09               	clrf	?_writeEEPROM+1,c
  7366  0022EA  0E6C               	movlw	108
  7367  0022EC  6E08               	movwf	?_writeEEPROM,c
  7368  0022EE  0E00               	movlw	0
  7369  0022F0  6A0A               	clrf	?_writeEEPROM+2,c
  7370  0022F2  ECBA  F020         	call	_writeEEPROM	;wreg free
  7371                           
  7372                           ;main.c: 563: writeEEPROM( 0x43 + 42, 0 );
  7373  0022F6  6A09               	clrf	?_writeEEPROM+1,c
  7374  0022F8  0E6D               	movlw	109
  7375  0022FA  6E08               	movwf	?_writeEEPROM,c
  7376  0022FC  0E00               	movlw	0
  7377  0022FE  6A0A               	clrf	?_writeEEPROM+2,c
  7378  002300  ECBA  F020         	call	_writeEEPROM	;wreg free
  7379                           
  7380                           ;main.c: 564: writeEEPROM( 0x43 + 43, 0 );
  7381  002304  6A09               	clrf	?_writeEEPROM+1,c
  7382  002306  0E6E               	movlw	110
  7383  002308  6E08               	movwf	?_writeEEPROM,c
  7384  00230A  0E00               	movlw	0
  7385  00230C  6A0A               	clrf	?_writeEEPROM+2,c
  7386  00230E  ECBA  F020         	call	_writeEEPROM	;wreg free
  7387                           
  7388                           ;main.c: 565: writeEEPROM( 0x43 + 44, 0 );
  7389  002312  6A09               	clrf	?_writeEEPROM+1,c
  7390  002314  0E6F               	movlw	111
  7391  002316  6E08               	movwf	?_writeEEPROM,c
  7392  002318  0E00               	movlw	0
  7393  00231A  6A0A               	clrf	?_writeEEPROM+2,c
  7394  00231C  ECBA  F020         	call	_writeEEPROM	;wreg free
  7395                           
  7396                           ;main.c: 566: writeEEPROM( 0x43 + 45, 0 );
  7397  002320  6A09               	clrf	?_writeEEPROM+1,c
  7398  002322  0E70               	movlw	112
  7399  002324  6E08               	movwf	?_writeEEPROM,c
  7400  002326  0E00               	movlw	0
  7401  002328  6A0A               	clrf	?_writeEEPROM+2,c
  7402  00232A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7403                           
  7404                           ;main.c: 567: writeEEPROM( 0x43 + 46, 0 );
  7405  00232E  6A09               	clrf	?_writeEEPROM+1,c
  7406  002330  0E71               	movlw	113
  7407  002332  6E08               	movwf	?_writeEEPROM,c
  7408  002334  0E00               	movlw	0
  7409  002336  6A0A               	clrf	?_writeEEPROM+2,c
  7410  002338  ECBA  F020         	call	_writeEEPROM	;wreg free
  7411                           
  7412                           ;main.c: 568: writeEEPROM( 0x43 + 47, 0 );
  7413  00233C  6A09               	clrf	?_writeEEPROM+1,c
  7414  00233E  0E72               	movlw	114
  7415  002340  6E08               	movwf	?_writeEEPROM,c
  7416  002342  0E00               	movlw	0
  7417  002344  6A0A               	clrf	?_writeEEPROM+2,c
  7418  002346  ECBA  F020         	call	_writeEEPROM	;wreg free
  7419                           
  7420                           ;main.c: 569: writeEEPROM( 0x43 + 48, 0 );
  7421  00234A  6A09               	clrf	?_writeEEPROM+1,c
  7422  00234C  0E73               	movlw	115
  7423  00234E  6E08               	movwf	?_writeEEPROM,c
  7424  002350  0E00               	movlw	0
  7425  002352  6A0A               	clrf	?_writeEEPROM+2,c
  7426  002354  ECBA  F020         	call	_writeEEPROM	;wreg free
  7427                           
  7428                           ;main.c: 570: writeEEPROM( 0x43 + 49, 0 );
  7429  002358  6A09               	clrf	?_writeEEPROM+1,c
  7430  00235A  0E74               	movlw	116
  7431  00235C  6E08               	movwf	?_writeEEPROM,c
  7432  00235E  0E00               	movlw	0
  7433  002360  6A0A               	clrf	?_writeEEPROM+2,c
  7434  002362  ECBA  F020         	call	_writeEEPROM	;wreg free
  7435                           
  7436                           ;main.c: 572: writeEEPROM( 0x43 + 50, 0 );
  7437  002366  6A09               	clrf	?_writeEEPROM+1,c
  7438  002368  0E75               	movlw	117
  7439  00236A  6E08               	movwf	?_writeEEPROM,c
  7440  00236C  0E00               	movlw	0
  7441  00236E  6A0A               	clrf	?_writeEEPROM+2,c
  7442  002370  ECBA  F020         	call	_writeEEPROM	;wreg free
  7443                           
  7444                           ;main.c: 573: writeEEPROM( 0x43 + 51, 0 );
  7445  002374  6A09               	clrf	?_writeEEPROM+1,c
  7446  002376  0E76               	movlw	118
  7447  002378  6E08               	movwf	?_writeEEPROM,c
  7448  00237A  0E00               	movlw	0
  7449  00237C  6A0A               	clrf	?_writeEEPROM+2,c
  7450  00237E  ECBA  F020         	call	_writeEEPROM	;wreg free
  7451                           
  7452                           ;main.c: 574: writeEEPROM( 0x43 + 52, 0 );
  7453  002382  6A09               	clrf	?_writeEEPROM+1,c
  7454  002384  0E77               	movlw	119
  7455  002386  6E08               	movwf	?_writeEEPROM,c
  7456  002388  0E00               	movlw	0
  7457  00238A  6A0A               	clrf	?_writeEEPROM+2,c
  7458  00238C  ECBA  F020         	call	_writeEEPROM	;wreg free
  7459                           
  7460                           ;main.c: 575: writeEEPROM( 0x43 + 53, 0 );
  7461  002390  6A09               	clrf	?_writeEEPROM+1,c
  7462  002392  0E78               	movlw	120
  7463  002394  6E08               	movwf	?_writeEEPROM,c
  7464  002396  0E00               	movlw	0
  7465  002398  6A0A               	clrf	?_writeEEPROM+2,c
  7466  00239A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7467                           
  7468                           ;main.c: 576: writeEEPROM( 0x43 + 54, 0 );
  7469  00239E  6A09               	clrf	?_writeEEPROM+1,c
  7470  0023A0  0E79               	movlw	121
  7471  0023A2  6E08               	movwf	?_writeEEPROM,c
  7472  0023A4  0E00               	movlw	0
  7473  0023A6  6A0A               	clrf	?_writeEEPROM+2,c
  7474  0023A8  ECBA  F020         	call	_writeEEPROM	;wreg free
  7475                           
  7476                           ;main.c: 577: writeEEPROM( 0x43 + 55, 0 );
  7477  0023AC  6A09               	clrf	?_writeEEPROM+1,c
  7478  0023AE  0E7A               	movlw	122
  7479  0023B0  6E08               	movwf	?_writeEEPROM,c
  7480  0023B2  0E00               	movlw	0
  7481  0023B4  6A0A               	clrf	?_writeEEPROM+2,c
  7482  0023B6  ECBA  F020         	call	_writeEEPROM	;wreg free
  7483                           
  7484                           ;main.c: 578: writeEEPROM( 0x43 + 56, 0 );
  7485  0023BA  6A09               	clrf	?_writeEEPROM+1,c
  7486  0023BC  0E7B               	movlw	123
  7487  0023BE  6E08               	movwf	?_writeEEPROM,c
  7488  0023C0  0E00               	movlw	0
  7489  0023C2  6A0A               	clrf	?_writeEEPROM+2,c
  7490  0023C4  ECBA  F020         	call	_writeEEPROM	;wreg free
  7491                           
  7492                           ;main.c: 579: writeEEPROM( 0x43 + 57, 0 );
  7493  0023C8  6A09               	clrf	?_writeEEPROM+1,c
  7494  0023CA  0E7C               	movlw	124
  7495  0023CC  6E08               	movwf	?_writeEEPROM,c
  7496  0023CE  0E00               	movlw	0
  7497  0023D0  6A0A               	clrf	?_writeEEPROM+2,c
  7498  0023D2  ECBA  F020         	call	_writeEEPROM	;wreg free
  7499                           
  7500                           ;main.c: 580: writeEEPROM( 0x43 + 58, 0 );
  7501  0023D6  6A09               	clrf	?_writeEEPROM+1,c
  7502  0023D8  0E7D               	movlw	125
  7503  0023DA  6E08               	movwf	?_writeEEPROM,c
  7504  0023DC  0E00               	movlw	0
  7505  0023DE  6A0A               	clrf	?_writeEEPROM+2,c
  7506  0023E0  ECBA  F020         	call	_writeEEPROM	;wreg free
  7507                           
  7508                           ;main.c: 581: writeEEPROM( 0x43 + 59, 0 );
  7509  0023E4  6A09               	clrf	?_writeEEPROM+1,c
  7510  0023E6  0E7E               	movlw	126
  7511  0023E8  6E08               	movwf	?_writeEEPROM,c
  7512  0023EA  0E00               	movlw	0
  7513  0023EC  6A0A               	clrf	?_writeEEPROM+2,c
  7514  0023EE  ECBA  F020         	call	_writeEEPROM	;wreg free
  7515                           
  7516                           ;main.c: 582: writeEEPROM( 0x43 + 60, 0 );
  7517  0023F2  6A09               	clrf	?_writeEEPROM+1,c
  7518  0023F4  0E7F               	movlw	127
  7519  0023F6  6E08               	movwf	?_writeEEPROM,c
  7520  0023F8  0E00               	movlw	0
  7521  0023FA  6A0A               	clrf	?_writeEEPROM+2,c
  7522  0023FC  ECBA  F020         	call	_writeEEPROM	;wreg free
  7523                           
  7524                           ;main.c: 583: writeEEPROM( 0x43 + 61, 0 );
  7525  002400  6A09               	clrf	?_writeEEPROM+1,c
  7526  002402  0E80               	movlw	128
  7527  002404  6E08               	movwf	?_writeEEPROM,c
  7528  002406  0E00               	movlw	0
  7529  002408  6A0A               	clrf	?_writeEEPROM+2,c
  7530  00240A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7531                           
  7532                           ;main.c: 584: writeEEPROM( 0x43 + 62, 0 );
  7533  00240E  6A09               	clrf	?_writeEEPROM+1,c
  7534  002410  0E81               	movlw	129
  7535  002412  6E08               	movwf	?_writeEEPROM,c
  7536  002414  0E00               	movlw	0
  7537  002416  6A0A               	clrf	?_writeEEPROM+2,c
  7538  002418  ECBA  F020         	call	_writeEEPROM	;wreg free
  7539                           
  7540                           ;main.c: 585: writeEEPROM( 0x43 + 63, 0 );
  7541  00241C  6A09               	clrf	?_writeEEPROM+1,c
  7542  00241E  0E82               	movlw	130
  7543  002420  6E08               	movwf	?_writeEEPROM,c
  7544  002422  0E00               	movlw	0
  7545  002424  6A0A               	clrf	?_writeEEPROM+2,c
  7546  002426  ECBA  F020         	call	_writeEEPROM	;wreg free
  7547                           
  7548                           ;main.c: 586: writeEEPROM( 0x43 + 64, 0 );
  7549  00242A  6A09               	clrf	?_writeEEPROM+1,c
  7550  00242C  0E83               	movlw	131
  7551  00242E  6E08               	movwf	?_writeEEPROM,c
  7552  002430  0E00               	movlw	0
  7553  002432  6A0A               	clrf	?_writeEEPROM+2,c
  7554  002434  ECBA  F020         	call	_writeEEPROM	;wreg free
  7555                           
  7556                           ;main.c: 587: writeEEPROM( 0x43 + 65, 0 );
  7557  002438  6A09               	clrf	?_writeEEPROM+1,c
  7558  00243A  0E84               	movlw	132
  7559  00243C  6E08               	movwf	?_writeEEPROM,c
  7560  00243E  0E00               	movlw	0
  7561  002440  6A0A               	clrf	?_writeEEPROM+2,c
  7562  002442  ECBA  F020         	call	_writeEEPROM	;wreg free
  7563                           
  7564                           ;main.c: 591: for ( i = 0; i < 7; i++ ) {
  7565  002446  6A0D               	clrf	init_app_eeprom@i,c
  7566  002448                     l185:
  7567                           
  7568                           ;main.c: 592: for ( j = 0; j < 8; j++ ) {
  7569  002448  6A0E               	clrf	init_app_eeprom@j,c
  7570  00244A                     l4685:
  7571                           
  7572                           ;main.c: 593: writeEEPROM( 0x43 + 72 + i * 8 + j, 0 );
  7573  00244A  500E               	movf	init_app_eeprom@j,w,c
  7574  00244C  C00D  F00B         	movff	init_app_eeprom@i,??_init_app_eeprom
  7575  002450  6A0C               	clrf	(??_init_app_eeprom+1)& (0+255),c
  7576  002452  90D8               	bcf	status,0,c
  7577  002454  360B               	rlcf	??_init_app_eeprom,f,c
  7578  002456  360C               	rlcf	??_init_app_eeprom+1,f,c
  7579  002458  90D8               	bcf	status,0,c
  7580  00245A  360B               	rlcf	??_init_app_eeprom,f,c
  7581  00245C  360C               	rlcf	??_init_app_eeprom+1,f,c
  7582  00245E  90D8               	bcf	status,0,c
  7583  002460  360B               	rlcf	??_init_app_eeprom,f,c
  7584  002462  360C               	rlcf	??_init_app_eeprom+1,f,c
  7585  002464  260B               	addwf	??_init_app_eeprom,f,c
  7586  002466  0E00               	movlw	0
  7587  002468  220C               	addwfc	??_init_app_eeprom+1,f,c
  7588  00246A  0E8B               	movlw	139
  7589  00246C  240B               	addwf	??_init_app_eeprom,w,c
  7590  00246E  6E08               	movwf	?_writeEEPROM,c
  7591  002470  0E00               	movlw	0
  7592  002472  200C               	addwfc	??_init_app_eeprom+1,w,c
  7593  002474  6E09               	movwf	?_writeEEPROM+1,c
  7594  002476  0E00               	movlw	0
  7595  002478  6A0A               	clrf	?_writeEEPROM+2,c
  7596  00247A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7597  00247E  2A0E               	incf	init_app_eeprom@j,f,c
  7598  002480  0E07               	movlw	7
  7599  002482  640E               	cpfsgt	init_app_eeprom@j,c
  7600  002484  D7E2               	goto	l4685
  7601  002486  2A0D               	incf	init_app_eeprom@i,f,c
  7602  002488  0E06               	movlw	6
  7603  00248A  640D               	cpfsgt	init_app_eeprom@i,c
  7604  00248C  D7DD               	goto	l185
  7605  00248E  0C06               	retlw	6
  7606  002490                     __end_of_init_app_eeprom:
  7607                           	opt stack 0
  7608                           tblptru	equ	0xFF8
  7609                           tblptrh	equ	0xFF7
  7610                           tblptrl	equ	0xFF6
  7611                           tablat	equ	0xFF5
  7612                           prodh	equ	0xFF4
  7613                           prodl	equ	0xFF3
  7614                           intcon	equ	0xFF2
  7615                           postinc0	equ	0xFEE
  7616                           wreg	equ	0xFE8
  7617                           indf1	equ	0xFE7
  7618                           fsr1h	equ	0xFE2
  7619                           fsr1l	equ	0xFE1
  7620                           indf2	equ	0xFDF
  7621                           postinc2	equ	0xFDE
  7622                           postdec2	equ	0xFDD
  7623                           plusw2	equ	0xFDB
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _vscp_setUserID *****************
  7629 ;; Defined at:
  7630 ;;		line 2307 in file "../main.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  idx             1    wreg     unsigned char 
  7633 ;;  data            1   10[COMRAM] unsigned char 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;  idx             1   11[COMRAM] unsigned char 
  7636 ;; Return value:  Size  Location     Type
  7637 ;;		None               void
  7638 ;; Registers used:
  7639 ;;		wreg, status,2, status,0, cstack
  7640 ;; Tracked objects:
  7641 ;;		On entry : F/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7645 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7649 ;;Total ram usage:        2 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; Hardware stack levels required when called:    3
  7652 ;; This function calls:
  7653 ;;		_writeEEPROM
  7654 ;; This function is called by:
  7655 ;;		_vscp_writeStdReg
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text21
  7660  0042EC                     __ptext21:
  7661                           	opt stack 0
  7662  0042EC                     _vscp_setUserID:
  7663                           	opt stack 24
  7664                           
  7665                           ;incstack = 0
  7666                           ;incstack = 0
  7667                           ;vscp_setUserID@idx stored from wreg
  7668  0042EC  CFE8 F00C          	movff	wreg,vscp_setUserID@idx
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;main.c: 2308: writeEEPROM( idx + 0x06, data );
  7672  0042F0  0E06               	movlw	6
  7673  0042F2  240C               	addwf	vscp_setUserID@idx,w,c
  7674  0042F4  6E08               	movwf	?_writeEEPROM,c
  7675  0042F6  6A09               	clrf	?_writeEEPROM+1,c
  7676  0042F8  0E00               	movlw	0
  7677  0042FA  2209               	addwfc	?_writeEEPROM+1,f,c
  7678  0042FC  C00B  F00A         	movff	vscp_setUserID@data,?_writeEEPROM+2
  7679  004300  EFBA  F020         	goto	_writeEEPROM	;wreg free
  7680  004304                     __end_of_vscp_setUserID:
  7681                           	opt stack 0
  7682                           tblptru	equ	0xFF8
  7683                           tblptrh	equ	0xFF7
  7684                           tblptrl	equ	0xFF6
  7685                           tablat	equ	0xFF5
  7686                           prodh	equ	0xFF4
  7687                           prodl	equ	0xFF3
  7688                           intcon	equ	0xFF2
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           indf1	equ	0xFE7
  7692                           fsr1h	equ	0xFE2
  7693                           fsr1l	equ	0xFE1
  7694                           indf2	equ	0xFDF
  7695                           postinc2	equ	0xFDE
  7696                           postdec2	equ	0xFDD
  7697                           plusw2	equ	0xFDB
  7698                           fsr2h	equ	0xFDA
  7699                           fsr2l	equ	0xFD9
  7700                           status	equ	0xFD8
  7701                           
  7702 ;; *************** function _vscp_setManufacturerId *****************
  7703 ;; Defined at:
  7704 ;;		line 832 in file "../main.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  idx             1    wreg     unsigned char 
  7707 ;;  data            1   10[COMRAM] unsigned char 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  idx             1   11[COMRAM] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;		None               void
  7712 ;; Registers used:
  7713 ;;		wreg, status,2, status,0, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : F/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7719 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7722 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7723 ;;Total ram usage:        2 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    3
  7726 ;; This function calls:
  7727 ;;		_writeEEPROM
  7728 ;; This function is called by:
  7729 ;;		_vscp_writeStdReg
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           	psect	text22
  7734  0041BE                     __ptext22:
  7735                           	opt stack 0
  7736  0041BE                     _vscp_setManufacturerId:
  7737                           	opt stack 24
  7738                           
  7739                           ;incstack = 0
  7740                           ;incstack = 0
  7741                           ;vscp_setManufacturerId@idx stored from wreg
  7742  0041BE  CFE8 F00C          	movff	wreg,vscp_setManufacturerId@idx
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;main.c: 833: if ( idx>7 ) return;
  7746  0041C2  0E07               	movlw	7
  7747  0041C4  640C               	cpfsgt	vscp_setManufacturerId@idx,c
  7748  0041C6  D001               	goto	l5625
  7749  0041C8  0C07               	retlw	7
  7750  0041CA                     l5625:
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;main.c: 834: writeEEPROM(0x0B + idx, data);
  7754  0041CA  0E0B               	movlw	11
  7755  0041CC  240C               	addwf	vscp_setManufacturerId@idx,w,c
  7756  0041CE  6E08               	movwf	?_writeEEPROM,c
  7757  0041D0  6A09               	clrf	?_writeEEPROM+1,c
  7758  0041D2  0E00               	movlw	0
  7759  0041D4  2209               	addwfc	?_writeEEPROM+1,f,c
  7760  0041D6  C00B  F00A         	movff	vscp_setManufacturerId@data,?_writeEEPROM+2
  7761  0041DA  EFBA  F020         	goto	_writeEEPROM	;wreg free
  7762  0041DE                     __end_of_vscp_setManufacturerId:
  7763                           	opt stack 0
  7764                           tblptru	equ	0xFF8
  7765                           tblptrh	equ	0xFF7
  7766                           tblptrl	equ	0xFF6
  7767                           tablat	equ	0xFF5
  7768                           prodh	equ	0xFF4
  7769                           prodl	equ	0xFF3
  7770                           intcon	equ	0xFF2
  7771                           postinc0	equ	0xFEE
  7772                           wreg	equ	0xFE8
  7773                           indf1	equ	0xFE7
  7774                           fsr1h	equ	0xFE2
  7775                           fsr1l	equ	0xFE1
  7776                           indf2	equ	0xFDF
  7777                           postinc2	equ	0xFDE
  7778                           postdec2	equ	0xFDD
  7779                           plusw2	equ	0xFDB
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function _vscp_setGUID *****************
  7785 ;; Defined at:
  7786 ;;		line 820 in file "../main.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  idx             1    wreg     unsigned char 
  7789 ;;  data            1   10[COMRAM] unsigned char 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  idx             1   11[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : F/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7801 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7802 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7804 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7805 ;;Total ram usage:        2 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    3
  7808 ;; This function calls:
  7809 ;;		_writeEEPROM
  7810 ;; This function is called by:
  7811 ;;		_vscp_writeStdReg
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text23
  7816  0041DE                     __ptext23:
  7817                           	opt stack 0
  7818  0041DE                     _vscp_setGUID:
  7819                           	opt stack 24
  7820                           
  7821                           ;incstack = 0
  7822                           ;incstack = 0
  7823                           ;vscp_setGUID@idx stored from wreg
  7824  0041DE  CFE8 F00C          	movff	wreg,vscp_setGUID@idx
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;main.c: 821: if ( idx>15 ) return;
  7828  0041E2  0E0F               	movlw	15
  7829  0041E4  640C               	cpfsgt	vscp_setGUID@idx,c
  7830  0041E6  D001               	goto	l5619
  7831  0041E8  0C0F               	retlw	15
  7832  0041EA                     l5619:
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;main.c: 822: writeEEPROM(0x13 + idx, data);
  7836  0041EA  0E13               	movlw	19
  7837  0041EC  240C               	addwf	vscp_setGUID@idx,w,c
  7838  0041EE  6E08               	movwf	?_writeEEPROM,c
  7839  0041F0  6A09               	clrf	?_writeEEPROM+1,c
  7840  0041F2  0E00               	movlw	0
  7841  0041F4  2209               	addwfc	?_writeEEPROM+1,f,c
  7842  0041F6  C00B  F00A         	movff	vscp_setGUID@data,?_writeEEPROM+2
  7843  0041FA  EFBA  F020         	goto	_writeEEPROM	;wreg free
  7844  0041FE                     __end_of_vscp_setGUID:
  7845                           	opt stack 0
  7846                           tblptru	equ	0xFF8
  7847                           tblptrh	equ	0xFF7
  7848                           tblptrl	equ	0xFF6
  7849                           tablat	equ	0xFF5
  7850                           prodh	equ	0xFF4
  7851                           prodl	equ	0xFF3
  7852                           intcon	equ	0xFF2
  7853                           postinc0	equ	0xFEE
  7854                           wreg	equ	0xFE8
  7855                           indf1	equ	0xFE7
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           indf2	equ	0xFDF
  7859                           postinc2	equ	0xFDE
  7860                           postdec2	equ	0xFDD
  7861                           plusw2	equ	0xFDB
  7862                           fsr2h	equ	0xFDA
  7863                           fsr2l	equ	0xFD9
  7864                           status	equ	0xFD8
  7865                           
  7866 ;; *************** function _vscp_writeAppReg *****************
  7867 ;; Defined at:
  7868 ;;		line 983 in file "../main.c"
  7869 ;; Parameters:    Size  Location     Type
  7870 ;;  reg             1    wreg     unsigned char 
  7871 ;;  val             1   80[COMRAM] unsigned char 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  reg             1   29[BANK0 ] unsigned char 
  7874 ;;  val             1   26[BANK0 ] unsigned char 
  7875 ;;  rv              1   28[BANK0 ] unsigned char 
  7876 ;;  bOn             1   27[BANK0 ] enum E18242
  7877 ;;  bInfoEvent      1   25[BANK0 ] enum E18242
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      unsigned char 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : F/0
  7884 ;;		On exit  : F/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7887 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7888 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7889 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7890 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7891 ;;Total ram usage:        9 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    7
  7894 ;; This function calls:
  7895 ;;		_writeEEPROM
  7896 ;;		_readEEPROM
  7897 ;;		_SendInformationEvent
  7898 ;;		_calculateSetFilterMask
  7899 ;; This function is called by:
  7900 ;;		_vscp_writeRegister
  7901 ;;		_vscp_handleProtocolEvent
  7902 ;; This function uses a non-reentrant model
  7903 ;;
  7904                           
  7905                           	psect	text24
  7906  000F22                     __ptext24:
  7907                           	opt stack 0
  7908  000F22                     _vscp_writeAppReg:
  7909                           	opt stack 20
  7910                           
  7911                           ;incstack = 0
  7912                           ;incstack = 0
  7913                           ;vscp_writeAppReg@reg stored from wreg
  7914  000F22  CFE8 F0D3          	movff	wreg,vscp_writeAppReg@reg
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;main.c: 984: uint8_t rv;
  7918                           ;main.c: 985: BOOL bInfoEvent = 0;
  7919  000F26  6BCF               	clrf	vscp_writeAppReg@bInfoEvent& (0+255),b
  7920                           
  7921                           ;main.c: 986: BOOL bOn = 0;
  7922  000F28  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;main.c: 988: rv = ~val;
  7926  000F2A  1C51               	comf	vscp_writeAppReg@val,w,c
  7927  000F2C  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;main.c: 991: if ( reg == 0 ) {
  7931  000F2E  67D3               	tstfsz	vscp_writeAppReg@reg& (0+255),b
  7932  000F30  D00D               	goto	l9893
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;main.c: 992: writeEEPROM(0x43 + 0, val);
  7936  000F32  6A09               	clrf	?_writeEEPROM+1,c
  7937  000F34  0E43               	movlw	67
  7938  000F36  6E08               	movwf	?_writeEEPROM,c
  7939  000F38  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7940  000F3C  ECBA  F020         	call	_writeEEPROM	;wreg free
  7941                           
  7942                           ;main.c: 993: rv = readEEPROM(0x43 + 0);
  7943  000F40  6A09               	clrf	?_readEEPROM+1,c
  7944  000F42  0E43               	movlw	67
  7945  000F44  6E08               	movwf	?_readEEPROM,c
  7946  000F46  ECDB  F021         	call	_readEEPROM	;wreg free
  7947  000F4A  D39C               	goto	L24
  7948  000F4C                     l9893:
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;main.c: 995: else if ( reg == 1 ) {
  7952  000F4C  05D3               	decf	vscp_writeAppReg@reg& (0+255),w,b
  7953  000F4E  E10D               	bnz	l9897
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;main.c: 997: writeEEPROM(0x43 + 1, val);
  7957  000F50  6A09               	clrf	?_writeEEPROM+1,c
  7958  000F52  0E44               	movlw	68
  7959  000F54  6E08               	movwf	?_writeEEPROM,c
  7960  000F56  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  7961  000F5A  ECBA  F020         	call	_writeEEPROM	;wreg free
  7962                           
  7963                           ;main.c: 998: rv = readEEPROM(0x43 + 1);
  7964  000F5E  6A09               	clrf	?_readEEPROM+1,c
  7965  000F60  0E44               	movlw	68
  7966  000F62  6E08               	movwf	?_readEEPROM,c
  7967  000F64  ECDB  F021         	call	_readEEPROM	;wreg free
  7968  000F68  D38D               	goto	L24
  7969  000F6A                     l9897:
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 1001: else if ( (reg >= 2) && (reg <= 9) ) {
  7973  000F6A  0E01               	movlw	1
  7974  000F6C  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  7975  000F6E  D17B               	goto	l10049
  7976                           
  7977                           ; BSR set to: 0
  7978  000F70  0E0A               	movlw	10
  7979  000F72  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  7980  000F74  D178               	goto	l10049
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;main.c: 1003: if ( readEEPROM( 0x43 +
  7984                           ;main.c: 1004: 10 + reg - 2 ) &
  7985                           ;main.c: 1005: 0x80 ) {
  7986  000F76  0E4B               	movlw	75
  7987  000F78  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  7988  000F7A  6E08               	movwf	?_readEEPROM,c
  7989  000F7C  6A09               	clrf	?_readEEPROM+1,c
  7990  000F7E  0E00               	movlw	0
  7991  000F80  2209               	addwfc	?_readEEPROM+1,f,c
  7992  000F82  ECDB  F021         	call	_readEEPROM	;wreg free
  7993  000F86  0100               	movlb	0	; () banked
  7994  000F88  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  7995  000F8A  BFCC               	btfsc	??_vscp_writeAppReg& (0+255),7,b
  7996  000F8C  D157               	goto	l10047
  7997  000F8E  D37C               	goto	l10225
  7998  000F90                     l9905:
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;main.c: 1012: bInfoEvent = 1;
  8002  000F90  0E01               	movlw	1
  8003  000F92  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;main.c: 1014: if ( 1 == val ) {
  8007  000F94  0451               	decf	vscp_writeAppReg@val,w,c
  8008  000F96  E126               	bnz	l304
  8009                           
  8010                           ; BSR set to: 0
  8011                           ;main.c: 1016: LATBbits.LATB4 = 1;
  8012  000F98  888A               	bsf	3978,4,c	;volatile
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 1017: rv = LATBbits.LATB4;
  8016  000F9A  0E00               	movlw	0
  8017  000F9C  B88A               	btfsc	3978,4,c	;volatile
  8018  000F9E  0E01               	movlw	1
  8019  000FA0  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;main.c: 1018: bOn = 1;
  8023  000FA2  0E01               	movlw	1
  8024  000FA4  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;main.c: 1021: if ( readEEPROM( 0x43 + 10 ) & 0x04 ) {
  8028  000FA6  6A09               	clrf	?_readEEPROM+1,c
  8029  000FA8  0E4D               	movlw	77
  8030  000FAA  6E08               	movwf	?_readEEPROM,c
  8031  000FAC  ECDB  F021         	call	_readEEPROM	;wreg free
  8032  000FB0  0100               	movlb	0	; () banked
  8033  000FB2  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8034  000FB4  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8035  000FB6  D368               	goto	l10225
  8036  000FB8                     l9917:
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 1022: relay_protection_timer[ 0 ] =
  8040                           ;main.c: 1023: readEEPROM( 0x43 + 34 ) * 256 +
  8041                           ;main.c: 1024: readEEPROM( 0x43 + 35 );
  8042  000FB8  6A09               	clrf	?_readEEPROM+1,c
  8043  000FBA  0E66               	movlw	102
  8044  000FBC  6E08               	movwf	?_readEEPROM,c
  8045  000FBE  ECDB  F021         	call	_readEEPROM	;wreg free
  8046  000FC2  0100               	movlb	0	; () banked
  8047  000FC4  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8048  000FC6  6A09               	clrf	?_readEEPROM+1,c
  8049  000FC8  0E65               	movlw	101
  8050  000FCA  6E08               	movwf	?_readEEPROM,c
  8051  000FCC  ECDB  F021         	call	_readEEPROM	;wreg free
  8052  000FD0  0100               	movlb	0	; () banked
  8053  000FD2  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8054  000FD4  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8055  000FD6  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8056  000FD8  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8057  000FDA  6F60               	movwf	_relay_protection_timer& (0+255),b
  8058  000FDC  0E00               	movlw	0
  8059  000FDE  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8060  000FE0  6F61               	movwf	(_relay_protection_timer+1)& (0+255),b
  8061  000FE2  D352               	goto	l10225
  8062  000FE4                     l304:
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;main.c: 1028: else if (0 == val) {
  8066  000FE4  6651               	tstfsz	vscp_writeAppReg@val,c
  8067  000FE6  D350               	goto	l10225
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 1029: LATBbits.LATB4 = 0;
  8071  000FE8  988A               	bcf	3978,4,c	;volatile
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;main.c: 1030: rv = LATBbits.LATB4;
  8075  000FEA  0E00               	movlw	0
  8076  000FEC  B88A               	btfsc	3978,4,c	;volatile
  8077  000FEE  0E01               	movlw	1
  8078  000FF0  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8079  000FF2                     l9923:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;main.c: 1031: bOn = 0;
  8083  000FF2  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8084  000FF4  D349               	goto	l10225
  8085  000FF6                     l9925:
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;main.c: 1038: bInfoEvent = 1;
  8089  000FF6  0E01               	movlw	1
  8090  000FF8  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8091                           
  8092                           ; BSR set to: 0
  8093                           ;main.c: 1040: if (1 == val) {
  8094  000FFA  0451               	decf	vscp_writeAppReg@val,w,c
  8095  000FFC  E11D               	bnz	l310
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;main.c: 1042: LATBbits.LATB1 = 1;
  8099  000FFE  828A               	bsf	3978,1,c	;volatile
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;main.c: 1043: rv = LATBbits.LATB1;
  8103  001000  0E00               	movlw	0
  8104  001002  B28A               	btfsc	3978,1,c	;volatile
  8105  001004  0E01               	movlw	1
  8106  001006  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;main.c: 1044: bOn = 1;
  8110  001008  0E01               	movlw	1
  8111  00100A  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;main.c: 1046: if (readEEPROM(0x43 + 11) & 0x04) {
  8115  00100C  6A09               	clrf	?_readEEPROM+1,c
  8116  00100E  0E4E               	movlw	78
  8117  001010  6E08               	movwf	?_readEEPROM,c
  8118  001012  ECDB  F021         	call	_readEEPROM	;wreg free
  8119  001016  0100               	movlb	0	; () banked
  8120  001018  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8121  00101A  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8122  00101C  D335               	goto	l10225
  8123  00101E                     l9937:
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;main.c: 1047: relay_protection_timer[ 1 ] =
  8127                           ;main.c: 1048: readEEPROM(0x43 + 36) * 256 +
  8128                           ;main.c: 1049: readEEPROM(0x43 + 37);
  8129  00101E  6A09               	clrf	?_readEEPROM+1,c
  8130  001020  0E68               	movlw	104
  8131  001022  6E08               	movwf	?_readEEPROM,c
  8132  001024  ECDB  F021         	call	_readEEPROM	;wreg free
  8133  001028  0100               	movlb	0	; () banked
  8134  00102A  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8135  00102C  6A09               	clrf	?_readEEPROM+1,c
  8136  00102E  0E67               	movlw	103
  8137  001030  6E08               	movwf	?_readEEPROM,c
  8138  001032  ECDB  F021         	call	_readEEPROM	;wreg free
  8139  001036  D166               	goto	L25
  8140  001038                     l310:
  8141                           
  8142                           ; BSR set to: 0
  8143                           ;main.c: 1053: else if (0 == val) {
  8144  001038  6651               	tstfsz	vscp_writeAppReg@val,c
  8145  00103A  D326               	goto	l10225
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;main.c: 1054: LATBbits.LATB1 = 0;
  8149  00103C  928A               	bcf	3978,1,c	;volatile
  8150                           
  8151                           ; BSR set to: 0
  8152                           ;main.c: 1055: rv = LATBbits.LATB1;
  8153  00103E  0E00               	movlw	0
  8154  001040  B28A               	btfsc	3978,1,c	;volatile
  8155  001042  0E01               	movlw	1
  8156  001044  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8157  001046  D7D5               	goto	l9923
  8158  001048                     l9945:
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;main.c: 1063: bInfoEvent = 1;
  8162  001048  0E01               	movlw	1
  8163  00104A  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;main.c: 1065: if (1 == val) {
  8167  00104C  0451               	decf	vscp_writeAppReg@val,w,c
  8168  00104E  E126               	bnz	l315
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;main.c: 1067: LATBbits.LATB0 = 1;
  8172  001050  808A               	bsf	3978,0,c	;volatile
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;main.c: 1068: rv = LATBbits.LATB0;
  8176  001052  0E00               	movlw	0
  8177  001054  B08A               	btfsc	3978,0,c	;volatile
  8178  001056  0E01               	movlw	1
  8179  001058  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;main.c: 1069: bOn = 1;
  8183  00105A  0E01               	movlw	1
  8184  00105C  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;main.c: 1071: if ( readEEPROM(0x43 + 12) & 0x04) {
  8188  00105E  6A09               	clrf	?_readEEPROM+1,c
  8189  001060  0E4F               	movlw	79
  8190  001062  6E08               	movwf	?_readEEPROM,c
  8191  001064  ECDB  F021         	call	_readEEPROM	;wreg free
  8192  001068  0100               	movlb	0	; () banked
  8193  00106A  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8194  00106C  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8195  00106E  D30C               	goto	l10225
  8196  001070                     l9957:
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;main.c: 1072: relay_protection_timer[ 2 ] =
  8200                           ;main.c: 1073: readEEPROM(0x43 + 38) * 256 +
  8201                           ;main.c: 1074: readEEPROM(0x43 + 39);
  8202  001070  6A09               	clrf	?_readEEPROM+1,c
  8203  001072  0E6A               	movlw	106
  8204  001074  6E08               	movwf	?_readEEPROM,c
  8205  001076  ECDB  F021         	call	_readEEPROM	;wreg free
  8206  00107A  0100               	movlb	0	; () banked
  8207  00107C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8208  00107E  6A09               	clrf	?_readEEPROM+1,c
  8209  001080  0E69               	movlw	105
  8210  001082  6E08               	movwf	?_readEEPROM,c
  8211  001084  ECDB  F021         	call	_readEEPROM	;wreg free
  8212  001088  0100               	movlb	0	; () banked
  8213  00108A  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8214  00108C  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8215  00108E  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8216  001090  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8217  001092  6F64               	movwf	(_relay_protection_timer+4)& (0+255),b
  8218  001094  0E00               	movlw	0
  8219  001096  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8220  001098  6F65               	movwf	(_relay_protection_timer+5)& (0+255),b
  8221  00109A  D2F6               	goto	l10225
  8222  00109C                     l315:
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;main.c: 1078: else if (0 == val) {
  8226  00109C  6651               	tstfsz	vscp_writeAppReg@val,c
  8227  00109E  D2F4               	goto	l10225
  8228                           
  8229                           ; BSR set to: 0
  8230                           ;main.c: 1079: LATBbits.LATB0 = 0;
  8231  0010A0  908A               	bcf	3978,0,c	;volatile
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;main.c: 1080: rv = LATBbits.LATB0;
  8235  0010A2  0E00               	movlw	0
  8236  0010A4  B08A               	btfsc	3978,0,c	;volatile
  8237  0010A6  0E01               	movlw	1
  8238  0010A8  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8239  0010AA  D7A3               	goto	l9923
  8240  0010AC                     l9965:
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;main.c: 1089: bInfoEvent = 1;
  8244  0010AC  0E01               	movlw	1
  8245  0010AE  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;main.c: 1091: if (1 == val) {
  8249  0010B0  0451               	decf	vscp_writeAppReg@val,w,c
  8250  0010B2  E126               	bnz	l320
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;main.c: 1093: LATCbits.LATC7 = 1;
  8254  0010B4  8E8B               	bsf	3979,7,c	;volatile
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;main.c: 1094: rv = LATCbits.LATC7;
  8258  0010B6  0E00               	movlw	0
  8259  0010B8  BE8B               	btfsc	3979,7,c	;volatile
  8260  0010BA  0E01               	movlw	1
  8261  0010BC  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;main.c: 1095: bOn = 1;
  8265  0010BE  0E01               	movlw	1
  8266  0010C0  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;main.c: 1097: if (readEEPROM(0x43 + 13) & 0x04) {
  8270  0010C2  6A09               	clrf	?_readEEPROM+1,c
  8271  0010C4  0E50               	movlw	80
  8272  0010C6  6E08               	movwf	?_readEEPROM,c
  8273  0010C8  ECDB  F021         	call	_readEEPROM	;wreg free
  8274  0010CC  0100               	movlb	0	; () banked
  8275  0010CE  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8276  0010D0  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8277  0010D2  D2DA               	goto	l10225
  8278  0010D4                     l9977:
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;main.c: 1098: relay_protection_timer[ 3 ] =
  8282                           ;main.c: 1099: readEEPROM(0x43 + 40) * 256 +
  8283                           ;main.c: 1100: readEEPROM(0x43 + 41);
  8284  0010D4  6A09               	clrf	?_readEEPROM+1,c
  8285  0010D6  0E6C               	movlw	108
  8286  0010D8  6E08               	movwf	?_readEEPROM,c
  8287  0010DA  ECDB  F021         	call	_readEEPROM	;wreg free
  8288  0010DE  0100               	movlb	0	; () banked
  8289  0010E0  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8290  0010E2  6A09               	clrf	?_readEEPROM+1,c
  8291  0010E4  0E6B               	movlw	107
  8292  0010E6  6E08               	movwf	?_readEEPROM,c
  8293  0010E8  ECDB  F021         	call	_readEEPROM	;wreg free
  8294  0010EC  0100               	movlb	0	; () banked
  8295  0010EE  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8296  0010F0  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8297  0010F2  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8298  0010F4  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8299  0010F6  6F66               	movwf	(_relay_protection_timer+6)& (0+255),b
  8300  0010F8  0E00               	movlw	0
  8301  0010FA  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8302  0010FC  6F67               	movwf	(_relay_protection_timer+7)& (0+255),b
  8303  0010FE  D2C4               	goto	l10225
  8304  001100                     l320:
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;main.c: 1104: else if (0 == val) {
  8308  001100  6651               	tstfsz	vscp_writeAppReg@val,c
  8309  001102  D2C2               	goto	l10225
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;main.c: 1105: LATCbits.LATC7 = 0;
  8313  001104  9E8B               	bcf	3979,7,c	;volatile
  8314                           
  8315                           ; BSR set to: 0
  8316                           ;main.c: 1106: rv = LATCbits.LATC7;
  8317  001106  0E00               	movlw	0
  8318  001108  BE8B               	btfsc	3979,7,c	;volatile
  8319  00110A  0E01               	movlw	1
  8320  00110C  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8321  00110E  D771               	goto	l9923
  8322  001110                     l9985:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;main.c: 1115: bInfoEvent = 1;
  8326  001110  0E01               	movlw	1
  8327  001112  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 1117: if (1 == val) {
  8331  001114  0451               	decf	vscp_writeAppReg@val,w,c
  8332  001116  E126               	bnz	l325
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;main.c: 1119: LATCbits.LATC6 = 1;
  8336  001118  8C8B               	bsf	3979,6,c	;volatile
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;main.c: 1120: rv = LATCbits.LATC6;
  8340  00111A  0E00               	movlw	0
  8341  00111C  BC8B               	btfsc	3979,6,c	;volatile
  8342  00111E  0E01               	movlw	1
  8343  001120  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;main.c: 1121: bOn = 1;
  8347  001122  0E01               	movlw	1
  8348  001124  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1123: if (readEEPROM(0x43 + 14) & 0x04) {
  8352  001126  6A09               	clrf	?_readEEPROM+1,c
  8353  001128  0E51               	movlw	81
  8354  00112A  6E08               	movwf	?_readEEPROM,c
  8355  00112C  ECDB  F021         	call	_readEEPROM	;wreg free
  8356  001130  0100               	movlb	0	; () banked
  8357  001132  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8358  001134  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8359  001136  D2A8               	goto	l10225
  8360  001138                     l9997:
  8361                           
  8362                           ; BSR set to: 0
  8363                           ;main.c: 1124: relay_protection_timer[ 4 ] =
  8364                           ;main.c: 1125: readEEPROM(0x43 + 42) * 256 +
  8365                           ;main.c: 1126: readEEPROM(0x43 + 43);
  8366  001138  6A09               	clrf	?_readEEPROM+1,c
  8367  00113A  0E6E               	movlw	110
  8368  00113C  6E08               	movwf	?_readEEPROM,c
  8369  00113E  ECDB  F021         	call	_readEEPROM	;wreg free
  8370  001142  0100               	movlb	0	; () banked
  8371  001144  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8372  001146  6A09               	clrf	?_readEEPROM+1,c
  8373  001148  0E6D               	movlw	109
  8374  00114A  6E08               	movwf	?_readEEPROM,c
  8375  00114C  ECDB  F021         	call	_readEEPROM	;wreg free
  8376  001150  0100               	movlb	0	; () banked
  8377  001152  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8378  001154  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8379  001156  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8380  001158  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8381  00115A  6F68               	movwf	(_relay_protection_timer+8)& (0+255),b
  8382  00115C  0E00               	movlw	0
  8383  00115E  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8384  001160  6F69               	movwf	(_relay_protection_timer+9)& (0+255),b
  8385  001162  D292               	goto	l10225
  8386  001164                     l325:
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;main.c: 1130: else if (0 == val) {
  8390  001164  6651               	tstfsz	vscp_writeAppReg@val,c
  8391  001166  D290               	goto	l10225
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;main.c: 1131: LATCbits.LATC6 = 0;
  8395  001168  9C8B               	bcf	3979,6,c	;volatile
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;main.c: 1132: rv = LATCbits.LATC6;
  8399  00116A  0E00               	movlw	0
  8400  00116C  BC8B               	btfsc	3979,6,c	;volatile
  8401  00116E  0E01               	movlw	1
  8402  001170  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8403  001172  D73F               	goto	l9923
  8404  001174                     l10005:
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;main.c: 1141: bInfoEvent = 1;
  8408  001174  0E01               	movlw	1
  8409  001176  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 1143: if (1 == val) {
  8413  001178  0451               	decf	vscp_writeAppReg@val,w,c
  8414  00117A  E126               	bnz	l330
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;main.c: 1145: LATCbits.LATC5 = 1;
  8418  00117C  8A8B               	bsf	3979,5,c	;volatile
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;main.c: 1146: rv = LATCbits.LATC5;
  8422  00117E  0E00               	movlw	0
  8423  001180  BA8B               	btfsc	3979,5,c	;volatile
  8424  001182  0E01               	movlw	1
  8425  001184  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;main.c: 1147: bOn = 1;
  8429  001186  0E01               	movlw	1
  8430  001188  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;main.c: 1149: if (readEEPROM(0x43 + 15) & 0x04) {
  8434  00118A  6A09               	clrf	?_readEEPROM+1,c
  8435  00118C  0E52               	movlw	82
  8436  00118E  6E08               	movwf	?_readEEPROM,c
  8437  001190  ECDB  F021         	call	_readEEPROM	;wreg free
  8438  001194  0100               	movlb	0	; () banked
  8439  001196  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8440  001198  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8441  00119A  D276               	goto	l10225
  8442  00119C                     l10017:
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;main.c: 1150: relay_protection_timer[ 5 ] =
  8446                           ;main.c: 1151: readEEPROM(0x43 + 44) * 256 +
  8447                           ;main.c: 1152: readEEPROM(0x43 + 45);
  8448  00119C  6A09               	clrf	?_readEEPROM+1,c
  8449  00119E  0E70               	movlw	112
  8450  0011A0  6E08               	movwf	?_readEEPROM,c
  8451  0011A2  ECDB  F021         	call	_readEEPROM	;wreg free
  8452  0011A6  0100               	movlb	0	; () banked
  8453  0011A8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8454  0011AA  6A09               	clrf	?_readEEPROM+1,c
  8455  0011AC  0E6F               	movlw	111
  8456  0011AE  6E08               	movwf	?_readEEPROM,c
  8457  0011B0  ECDB  F021         	call	_readEEPROM	;wreg free
  8458  0011B4  0100               	movlb	0	; () banked
  8459  0011B6  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8460  0011B8  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8461  0011BA  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8462  0011BC  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8463  0011BE  6F6A               	movwf	(_relay_protection_timer+10)& (0+255),b
  8464  0011C0  0E00               	movlw	0
  8465  0011C2  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8466  0011C4  6F6B               	movwf	(_relay_protection_timer+11)& (0+255),b
  8467  0011C6  D260               	goto	l10225
  8468  0011C8                     l330:
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 1156: else if (0 == val) {
  8472  0011C8  6651               	tstfsz	vscp_writeAppReg@val,c
  8473  0011CA  D25E               	goto	l10225
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;main.c: 1157: LATCbits.LATC5 = 0;
  8477  0011CC  9A8B               	bcf	3979,5,c	;volatile
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;main.c: 1158: rv = LATCbits.LATC5;
  8481  0011CE  0E00               	movlw	0
  8482  0011D0  BA8B               	btfsc	3979,5,c	;volatile
  8483  0011D2  0E01               	movlw	1
  8484  0011D4  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8485  0011D6  D70D               	goto	l9923
  8486  0011D8                     l10025:
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;main.c: 1166: bInfoEvent = 1;
  8490  0011D8  0E01               	movlw	1
  8491  0011DA  6FCF               	movwf	vscp_writeAppReg@bInfoEvent& (0+255),b
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;main.c: 1168: if (1 == val) {
  8495  0011DC  0451               	decf	vscp_writeAppReg@val,w,c
  8496  0011DE  E126               	bnz	l335
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;main.c: 1170: LATCbits.LATC4 = 1;
  8500  0011E0  888B               	bsf	3979,4,c	;volatile
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 1171: rv = LATCbits.LATC4;
  8504  0011E2  0E00               	movlw	0
  8505  0011E4  B88B               	btfsc	3979,4,c	;volatile
  8506  0011E6  0E01               	movlw	1
  8507  0011E8  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;main.c: 1172: bOn = 1;
  8511  0011EA  0E01               	movlw	1
  8512  0011EC  6FD1               	movwf	vscp_writeAppReg@bOn& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;main.c: 1174: if (readEEPROM(0x43 + 16) & 0x04) {
  8516  0011EE  6A09               	clrf	?_readEEPROM+1,c
  8517  0011F0  0E53               	movlw	83
  8518  0011F2  6E08               	movwf	?_readEEPROM,c
  8519  0011F4  ECDB  F021         	call	_readEEPROM	;wreg free
  8520  0011F8  0100               	movlb	0	; () banked
  8521  0011FA  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8522  0011FC  A5CC               	btfss	??_vscp_writeAppReg& (0+255),2,b
  8523  0011FE  D244               	goto	l10225
  8524  001200                     l10037:
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;main.c: 1175: relay_protection_timer[ 6 ] =
  8528                           ;main.c: 1176: readEEPROM(0x43 + 46) * 256 +
  8529                           ;main.c: 1177: readEEPROM(0x43 + 47);
  8530  001200  6A09               	clrf	?_readEEPROM+1,c
  8531  001202  0E72               	movlw	114
  8532  001204  6E08               	movwf	?_readEEPROM,c
  8533  001206  ECDB  F021         	call	_readEEPROM	;wreg free
  8534  00120A  0100               	movlb	0	; () banked
  8535  00120C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8536  00120E  6A09               	clrf	?_readEEPROM+1,c
  8537  001210  0E71               	movlw	113
  8538  001212  6E08               	movwf	?_readEEPROM,c
  8539  001214  ECDB  F021         	call	_readEEPROM	;wreg free
  8540  001218  0100               	movlb	0	; () banked
  8541  00121A  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8542  00121C  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8543  00121E  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8544  001220  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8545  001222  6F6C               	movwf	(_relay_protection_timer+12)& (0+255),b
  8546  001224  0E00               	movlw	0
  8547  001226  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8548  001228  6F6D               	movwf	(_relay_protection_timer+13)& (0+255),b
  8549  00122A  D22E               	goto	l10225
  8550  00122C                     l335:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;main.c: 1181: else if (0 == val) {
  8554  00122C  6651               	tstfsz	vscp_writeAppReg@val,c
  8555  00122E  D22C               	goto	l10225
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;main.c: 1182: LATCbits.LATC4 = 0;
  8559  001230  988B               	bcf	3979,4,c	;volatile
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;main.c: 1183: rv = LATCbits.LATC4;
  8563  001232  0E00               	movlw	0
  8564  001234  B88B               	btfsc	3979,4,c	;volatile
  8565  001236  0E01               	movlw	1
  8566  001238  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8567  00123A  D6DB               	goto	l9923
  8568  00123C                     l10047:
  8569                           
  8570                           ; BSR set to: 0
  8571  00123C  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  8572                           
  8573                           ; Switch size 1, requested type "space"
  8574                           ; Number of cases is 7, Range of values is 2 to 8
  8575                           ; switch strategies available:
  8576                           ; Name         Instructions Cycles
  8577                           ; simple_byte           22    12 (average)
  8578                           ;	Chosen strategy is simple_byte
  8579  00123E  0A02               	xorlw	2	; case 2
  8580  001240  E101 D6A6          	bz	l9905
  8581  001244  0A01               	xorlw	1	; case 3
  8582  001246  E101 D6D6          	bz	l9925
  8583  00124A  0A07               	xorlw	7	; case 4
  8584  00124C  E101 D6FC          	bz	l9945
  8585  001250  0A01               	xorlw	1	; case 5
  8586  001252  E101 D72B          	bz	l9965
  8587  001256  0A03               	xorlw	3	; case 6
  8588  001258  E101 D75A          	bz	l9985
  8589  00125C  0A01               	xorlw	1	; case 7
  8590  00125E  E08A               	bz	l10005
  8591  001260  0A0F               	xorlw	15	; case 8
  8592  001262  E0BA               	bz	l10025
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;main.c: 1189: }
  8596                           ;main.c: 1190: }
  8597  001264  D211               	goto	l10225
  8598  001266                     l10049:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;main.c: 1193: else if ( (reg >= 10 ) &&
  8602                           ;main.c: 1194: (reg <= 17) ) {
  8603  001266  0E09               	movlw	9
  8604  001268  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  8605  00126A  D10A               	goto	l10157
  8606                           
  8607                           ; BSR set to: 0
  8608  00126C  0E12               	movlw	18
  8609  00126E  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  8610  001270  D107               	goto	l10157
  8611  001272  D0F2               	goto	l10155
  8612  001274                     l10055:
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;main.c: 1200: writeEEPROM( 0x43 + reg, val );
  8616  001274  0E43               	movlw	67
  8617  001276  DA49               	call	PL6	;call to abstracted procedure
  8618  001278  ECBA  F020         	call	_writeEEPROM	;wreg free
  8619                           
  8620                           ;main.c: 1201: rv = readEEPROM( 0x43 + reg );
  8621  00127C  DA3E               	call	PL4	;call to abstracted procedure
  8622  00127E  ECDB  F021         	call	_readEEPROM	;wreg free
  8623  001282  0100               	movlb	0	; () banked
  8624  001284  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;main.c: 1203: if ( val & 0x01 ) {
  8628  001286  A051               	btfss	vscp_writeAppReg@val,0,c
  8629  001288  D010               	goto	l10065
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;main.c: 1205: LATBbits.LATB4 = 0;
  8633  00128A  988A               	bcf	3978,4,c	;volatile
  8634                           
  8635                           ;main.c: 1206: bOn = 0;
  8636  00128C  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 1208: relay_pulse_flags |= 0x01;
  8640  00128E  818F               	bsf	_relay_pulse_flags& (0+255),0,b
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;main.c: 1209: relay_pulse_timer[ 0 ] =
  8644                           ;main.c: 1210: readEEPROM( 0x43 + 18 ) * 256 +
  8645                           ;main.c: 1211: readEEPROM( 0x43 + 19 );
  8646  001290  6A09               	clrf	?_readEEPROM+1,c
  8647  001292  0E56               	movlw	86
  8648  001294  6E08               	movwf	?_readEEPROM,c
  8649  001296  ECDB  F021         	call	_readEEPROM	;wreg free
  8650  00129A  0100               	movlb	0	; () banked
  8651  00129C  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8652  00129E  6A09               	clrf	?_readEEPROM+1,c
  8653  0012A0  0E55               	movlw	85
  8654  0012A2  6E08               	movwf	?_readEEPROM,c
  8655  0012A4  ECDB  F021         	call	_readEEPROM	;wreg free
  8656  0012A8  DA38               	call	PL44	;call to abstracted procedure
  8657  0012AA                     l10065:
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;main.c: 1212: }
  8661                           ;main.c: 1214: if ( val & 0x04 ) {
  8662  0012AA  B451               	btfsc	vscp_writeAppReg@val,2,c
  8663  0012AC  D685               	goto	l9917
  8664  0012AE  D1EC               	goto	l10225
  8665  0012B0                     l10069:
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;main.c: 1223: writeEEPROM( 0x43 + reg, val );
  8669  0012B0  0E43               	movlw	67
  8670  0012B2  DA2B               	call	PL6	;call to abstracted procedure
  8671  0012B4  ECBA  F020         	call	_writeEEPROM	;wreg free
  8672                           
  8673                           ;main.c: 1224: rv = readEEPROM( 0x43 + reg );
  8674  0012B8  DA20               	call	PL4	;call to abstracted procedure
  8675  0012BA  ECDB  F021         	call	_readEEPROM	;wreg free
  8676  0012BE  0100               	movlb	0	; () banked
  8677  0012C0  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8678                           
  8679                           ; BSR set to: 0
  8680                           ;main.c: 1226: if ( val & 0x01 ) {
  8681  0012C2  A051               	btfss	vscp_writeAppReg@val,0,c
  8682  0012C4  D011               	goto	l10079
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;main.c: 1228: LATBbits.LATB1 = 0;
  8686  0012C6  928A               	bcf	3978,1,c	;volatile
  8687                           
  8688                           ;main.c: 1229: bOn = 0;
  8689  0012C8  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;main.c: 1231: relay_pulse_flags |= 0x02;
  8693  0012CA  838F               	bsf	_relay_pulse_flags& (0+255),1,b
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;main.c: 1232: relay_pulse_timer[ 1 ] =
  8697                           ;main.c: 1233: readEEPROM( 0x43 + 18) * 256 +
  8698                           ;main.c: 1234: readEEPROM( 0x43 + 19);
  8699  0012CC  6A09               	clrf	?_readEEPROM+1,c
  8700  0012CE  0E56               	movlw	86
  8701  0012D0  6E08               	movwf	?_readEEPROM,c
  8702  0012D2  ECDB  F021         	call	_readEEPROM	;wreg free
  8703  0012D6  0100               	movlb	0	; () banked
  8704  0012D8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8705  0012DA  6A09               	clrf	?_readEEPROM+1,c
  8706  0012DC  0E55               	movlw	85
  8707  0012DE  6E08               	movwf	?_readEEPROM,c
  8708  0012E0  ECDB  F021         	call	_readEEPROM	;wreg free
  8709  0012E4  0100               	movlb	0	; () banked
  8710  0012E6  DA23               	call	PL54	;call to abstracted procedure
  8711  0012E8                     l10079:
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;main.c: 1235: }
  8715                           ;main.c: 1237: if ( val & 0x04 ) {
  8716  0012E8  A451               	btfss	vscp_writeAppReg@val,2,c
  8717  0012EA  D1CE               	goto	l10225
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;main.c: 1238: relay_protection_timer[ 1 ] =
  8721                           ;main.c: 1239: readEEPROM( 0x43 + 34 ) * 256 +
  8722                           ;main.c: 1240: readEEPROM( 0x43 + 35 );
  8723  0012EC  6A09               	clrf	?_readEEPROM+1,c
  8724  0012EE  0E66               	movlw	102
  8725  0012F0  6E08               	movwf	?_readEEPROM,c
  8726  0012F2  ECDB  F021         	call	_readEEPROM	;wreg free
  8727  0012F6  0100               	movlb	0	; () banked
  8728  0012F8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8729  0012FA  6A09               	clrf	?_readEEPROM+1,c
  8730  0012FC  0E65               	movlw	101
  8731  0012FE  6E08               	movwf	?_readEEPROM,c
  8732  001300  ECDB  F021         	call	_readEEPROM	;wreg free
  8733  001304                     L25:
  8734  001304  0100               	movlb	0	; () banked
  8735  001306  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8736  001308  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  8737  00130A  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  8738  00130C  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  8739  00130E  6F62               	movwf	(_relay_protection_timer+2)& (0+255),b
  8740  001310  0E00               	movlw	0
  8741  001312  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  8742  001314  6F63               	movwf	(_relay_protection_timer+3)& (0+255),b
  8743  001316  D1B8               	goto	l10225
  8744  001318                     l10083:
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1246: writeEEPROM( 0x43 + reg, val );
  8748  001318  0E43               	movlw	67
  8749  00131A  D9F7               	call	PL6	;call to abstracted procedure
  8750  00131C  ECBA  F020         	call	_writeEEPROM	;wreg free
  8751                           
  8752                           ;main.c: 1247: rv = readEEPROM( 0x43 + reg );
  8753  001320  D9EC               	call	PL4	;call to abstracted procedure
  8754  001322  ECDB  F021         	call	_readEEPROM	;wreg free
  8755  001326  0100               	movlb	0	; () banked
  8756  001328  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8757                           
  8758                           ; BSR set to: 0
  8759                           ;main.c: 1249: if ( val & 0x01 ) {
  8760  00132A  A051               	btfss	vscp_writeAppReg@val,0,c
  8761  00132C  D012               	goto	l10093
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;main.c: 1251: LATBbits.LATB0 = 0;
  8765  00132E  908A               	bcf	3978,0,c	;volatile
  8766                           
  8767                           ;main.c: 1252: bOn = 0;
  8768  001330  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;main.c: 1254: relay_pulse_flags |= 0x04;
  8772  001332  858F               	bsf	_relay_pulse_flags& (0+255),2,b
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;main.c: 1255: relay_pulse_timer[ 2 ] =
  8776                           ;main.c: 1256: readEEPROM( 0x43 + 22) * 256 +
  8777                           ;main.c: 1257: readEEPROM( 0x43 + 23);
  8778  001334  6A09               	clrf	?_readEEPROM+1,c
  8779  001336  0E5A               	movlw	90
  8780  001338  6E08               	movwf	?_readEEPROM,c
  8781  00133A  ECDB  F021         	call	_readEEPROM	;wreg free
  8782  00133E  0100               	movlb	0	; () banked
  8783  001340  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8784  001342  6A09               	clrf	?_readEEPROM+1,c
  8785  001344  0E59               	movlw	89
  8786  001346  6E08               	movwf	?_readEEPROM,c
  8787  001348  ECDB  F021         	call	_readEEPROM	;wreg free
  8788  00134C  0100               	movlb	0	; () banked
  8789  00134E  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8790  001350  DA07               	call	PL64	;call to abstracted procedure
  8791  001352                     l10093:
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;main.c: 1258: }
  8795                           ;main.c: 1260: if ( val & 0x04 ) {
  8796  001352  B451               	btfsc	vscp_writeAppReg@val,2,c
  8797  001354  D68D               	goto	l9957
  8798  001356  D198               	goto	l10225
  8799  001358                     l10097:
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;main.c: 1269: writeEEPROM( 0x43 + reg, val );
  8803  001358  0E43               	movlw	67
  8804  00135A  D9D7               	call	PL6	;call to abstracted procedure
  8805  00135C  ECBA  F020         	call	_writeEEPROM	;wreg free
  8806                           
  8807                           ;main.c: 1270: rv = readEEPROM( 0x43 + reg );
  8808  001360  D9CC               	call	PL4	;call to abstracted procedure
  8809  001362  ECDB  F021         	call	_readEEPROM	;wreg free
  8810  001366  0100               	movlb	0	; () banked
  8811  001368  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;main.c: 1272: if ( val & 0x01 ) {
  8815  00136A  A051               	btfss	vscp_writeAppReg@val,0,c
  8816  00136C  D012               	goto	l10107
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 1274: LATCbits.LATC7 = 0;
  8820  00136E  9E8B               	bcf	3979,7,c	;volatile
  8821                           
  8822                           ;main.c: 1275: bOn = 0;
  8823  001370  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;main.c: 1277: relay_pulse_flags |= 0x08;
  8827  001372  878F               	bsf	_relay_pulse_flags& (0+255),3,b
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;main.c: 1278: relay_pulse_timer[ 3 ] =
  8831                           ;main.c: 1279: readEEPROM( 0x43 + 24) * 256 +
  8832                           ;main.c: 1280: readEEPROM( 0x43 + 25);
  8833  001374  6A09               	clrf	?_readEEPROM+1,c
  8834  001376  0E5C               	movlw	92
  8835  001378  6E08               	movwf	?_readEEPROM,c
  8836  00137A  ECDB  F021         	call	_readEEPROM	;wreg free
  8837  00137E  0100               	movlb	0	; () banked
  8838  001380  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8839  001382  6A09               	clrf	?_readEEPROM+1,c
  8840  001384  0E5B               	movlw	91
  8841  001386  6E08               	movwf	?_readEEPROM,c
  8842  001388  ECDB  F021         	call	_readEEPROM	;wreg free
  8843  00138C  0100               	movlb	0	; () banked
  8844  00138E  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8845  001390  D9EF               	call	PL66	;call to abstracted procedure
  8846  001392                     l10107:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1281: }
  8850                           ;main.c: 1283: if ( val & 0x04 ) {
  8851  001392  B451               	btfsc	vscp_writeAppReg@val,2,c
  8852  001394  D69F               	goto	l9977
  8853  001396  D178               	goto	l10225
  8854  001398                     l10111:
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;main.c: 1292: writeEEPROM( 0x43 + reg, val );
  8858  001398  0E43               	movlw	67
  8859  00139A  D9B7               	call	PL6	;call to abstracted procedure
  8860  00139C  ECBA  F020         	call	_writeEEPROM	;wreg free
  8861                           
  8862                           ;main.c: 1293: rv = readEEPROM( 0x43 + reg );
  8863  0013A0  D9AC               	call	PL4	;call to abstracted procedure
  8864  0013A2  ECDB  F021         	call	_readEEPROM	;wreg free
  8865  0013A6  0100               	movlb	0	; () banked
  8866  0013A8  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;main.c: 1295: if ( val & 0x01 ) {
  8870  0013AA  A051               	btfss	vscp_writeAppReg@val,0,c
  8871  0013AC  D012               	goto	l10121
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;main.c: 1297: LATCbits.LATC6 = 0;
  8875  0013AE  9C8B               	bcf	3979,6,c	;volatile
  8876                           
  8877                           ;main.c: 1298: bOn = 0;
  8878  0013B0  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;main.c: 1300: relay_pulse_flags |= 0x10;
  8882  0013B2  898F               	bsf	_relay_pulse_flags& (0+255),4,b
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;main.c: 1301: relay_pulse_timer[ 4 ] =
  8886                           ;main.c: 1302: readEEPROM( 0x43 + 26) * 256 +
  8887                           ;main.c: 1303: readEEPROM( 0x43 + 27);
  8888  0013B4  6A09               	clrf	?_readEEPROM+1,c
  8889  0013B6  0E5E               	movlw	94
  8890  0013B8  6E08               	movwf	?_readEEPROM,c
  8891  0013BA  ECDB  F021         	call	_readEEPROM	;wreg free
  8892  0013BE  0100               	movlb	0	; () banked
  8893  0013C0  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8894  0013C2  6A09               	clrf	?_readEEPROM+1,c
  8895  0013C4  0E5D               	movlw	93
  8896  0013C6  6E08               	movwf	?_readEEPROM,c
  8897  0013C8  ECDB  F021         	call	_readEEPROM	;wreg free
  8898  0013CC  0100               	movlb	0	; () banked
  8899  0013CE  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8900  0013D0  D9BF               	call	PL62	;call to abstracted procedure
  8901  0013D2                     l10121:
  8902                           
  8903                           ; BSR set to: 0
  8904                           ;main.c: 1304: }
  8905                           ;main.c: 1306: if ( val & 0x04 ) {
  8906  0013D2  B451               	btfsc	vscp_writeAppReg@val,2,c
  8907  0013D4  D6B1               	goto	l9997
  8908  0013D6  D158               	goto	l10225
  8909  0013D8                     l10125:
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;main.c: 1315: writeEEPROM( 0x43 + reg, val );
  8913  0013D8  0E43               	movlw	67
  8914  0013DA  D997               	call	PL6	;call to abstracted procedure
  8915  0013DC  ECBA  F020         	call	_writeEEPROM	;wreg free
  8916                           
  8917                           ;main.c: 1316: rv = readEEPROM( 0x43 + reg );
  8918  0013E0  D98C               	call	PL4	;call to abstracted procedure
  8919  0013E2  ECDB  F021         	call	_readEEPROM	;wreg free
  8920  0013E6  0100               	movlb	0	; () banked
  8921  0013E8  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;main.c: 1318: if ( val & 0x01 ) {
  8925  0013EA  A051               	btfss	vscp_writeAppReg@val,0,c
  8926  0013EC  D012               	goto	l10135
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;main.c: 1320: LATCbits.LATC5 = 0;
  8930  0013EE  9A8B               	bcf	3979,5,c	;volatile
  8931                           
  8932                           ;main.c: 1321: bOn = 0;
  8933  0013F0  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8934                           
  8935                           ; BSR set to: 0
  8936                           ;main.c: 1323: relay_pulse_flags |= 0x20;
  8937  0013F2  8B8F               	bsf	_relay_pulse_flags& (0+255),5,b
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;main.c: 1324: relay_pulse_timer[ 5 ] =
  8941                           ;main.c: 1325: readEEPROM( 0x43 + 28) * 256 +
  8942                           ;main.c: 1326: readEEPROM( 0x43 + 29);
  8943  0013F4  6A09               	clrf	?_readEEPROM+1,c
  8944  0013F6  0E60               	movlw	96
  8945  0013F8  6E08               	movwf	?_readEEPROM,c
  8946  0013FA  ECDB  F021         	call	_readEEPROM	;wreg free
  8947  0013FE  0100               	movlb	0	; () banked
  8948  001400  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  8949  001402  6A09               	clrf	?_readEEPROM+1,c
  8950  001404  0E5F               	movlw	95
  8951  001406  6E08               	movwf	?_readEEPROM,c
  8952  001408  ECDB  F021         	call	_readEEPROM	;wreg free
  8953  00140C  0100               	movlb	0	; () banked
  8954  00140E  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  8955  001410  D997               	call	PL60	;call to abstracted procedure
  8956  001412                     l10135:
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;main.c: 1327: }
  8960                           ;main.c: 1329: if ( val & 0x04 ) {
  8961  001412  B451               	btfsc	vscp_writeAppReg@val,2,c
  8962  001414  D6C3               	goto	l10017
  8963  001416  D138               	goto	l10225
  8964  001418                     l10139:
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;main.c: 1338: writeEEPROM( 0x43 + reg, val );
  8968  001418  0E43               	movlw	67
  8969  00141A  D977               	call	PL6	;call to abstracted procedure
  8970  00141C  ECBA  F020         	call	_writeEEPROM	;wreg free
  8971                           
  8972                           ;main.c: 1339: rv = readEEPROM( 0x43 + reg );
  8973  001420  D96C               	call	PL4	;call to abstracted procedure
  8974  001422  ECDB  F021         	call	_readEEPROM	;wreg free
  8975  001426  0100               	movlb	0	; () banked
  8976  001428  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  8977                           
  8978                           ; BSR set to: 0
  8979                           ;main.c: 1341: if ( val & 0x01 ) {
  8980  00142A  A051               	btfss	vscp_writeAppReg@val,0,c
  8981  00142C  D012               	goto	l10149
  8982                           
  8983                           ; BSR set to: 0
  8984                           ;main.c: 1343: LATCbits.LATC4 = 0;
  8985  00142E  988B               	bcf	3979,4,c	;volatile
  8986                           
  8987                           ;main.c: 1344: bOn = 0;
  8988  001430  6BD1               	clrf	vscp_writeAppReg@bOn& (0+255),b
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 1346: relay_pulse_flags |= 0x40;
  8992  001432  8D8F               	bsf	_relay_pulse_flags& (0+255),6,b
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 1347: relay_pulse_timer[ 6 ] =
  8996                           ;main.c: 1348: readEEPROM( 0x43 + 30) * 256 +
  8997                           ;main.c: 1349: readEEPROM( 0x43 + 31);
  8998  001434  6A09               	clrf	?_readEEPROM+1,c
  8999  001436  0E62               	movlw	98
  9000  001438  6E08               	movwf	?_readEEPROM,c
  9001  00143A  ECDB  F021         	call	_readEEPROM	;wreg free
  9002  00143E  0100               	movlb	0	; () banked
  9003  001440  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9004  001442  6A09               	clrf	?_readEEPROM+1,c
  9005  001444  0E61               	movlw	97
  9006  001446  6E08               	movwf	?_readEEPROM,c
  9007  001448  ECDB  F021         	call	_readEEPROM	;wreg free
  9008  00144C  0100               	movlb	0	; () banked
  9009  00144E  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9010  001450  D997               	call	PL68	;call to abstracted procedure
  9011  001452                     l10149:
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;main.c: 1350: }
  9015                           ;main.c: 1352: if ( val & 0x04 ) {
  9016  001452  B451               	btfsc	vscp_writeAppReg@val,2,c
  9017  001454  D6D5               	goto	l10037
  9018  001456  D118               	goto	l10225
  9019  001458                     l10155:
  9020                           
  9021                           ; BSR set to: 0
  9022  001458  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9023                           
  9024                           ; Switch size 1, requested type "space"
  9025                           ; Number of cases is 7, Range of values is 10 to 16
  9026                           ; switch strategies available:
  9027                           ; Name         Instructions Cycles
  9028                           ; simple_byte           22    12 (average)
  9029                           ;	Chosen strategy is simple_byte
  9030  00145A  0A0A               	xorlw	10	; case 10
  9031  00145C  E101 D70A          	bz	l10055
  9032  001460  0A01               	xorlw	1	; case 11
  9033  001462  E101 D725          	bz	l10069
  9034  001466  0A07               	xorlw	7	; case 12
  9035  001468  E101 D756          	bz	l10083
  9036  00146C  0A01               	xorlw	1	; case 13
  9037  00146E  E101 D773          	bz	l10097
  9038  001472  0A03               	xorlw	3	; case 14
  9039  001474  E091               	bz	l10111
  9040  001476  0A01               	xorlw	1	; case 15
  9041  001478  E0AF               	bz	l10125
  9042  00147A  0A1F               	xorlw	31	; case 16
  9043  00147C  E0CD               	bz	l10139
  9044  00147E  D104               	goto	l10225
  9045  001480                     l10157:
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;main.c: 1363: else if ( (reg >= 18 ) &&
  9049                           ;main.c: 1364: (reg <= 33 ) ) {
  9050  001480  0E11               	movlw	17
  9051  001482  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9052  001484  D0A3               	goto	l10183
  9053                           
  9054                           ; BSR set to: 0
  9055  001486  0E22               	movlw	34
  9056  001488  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9057  00148A  D0A0               	goto	l10183
  9058                           
  9059                           ; BSR set to: 0
  9060                           ;main.c: 1367: writeEEPROM( 0x43 + reg, val );
  9061  00148C  0E43               	movlw	67
  9062  00148E  D93D               	call	PL6	;call to abstracted procedure
  9063  001490  ECBA  F020         	call	_writeEEPROM	;wreg free
  9064                           
  9065                           ;main.c: 1368: rv = readEEPROM( 0x43 + reg );
  9066  001494  D932               	call	PL4	;call to abstracted procedure
  9067  001496  ECDB  F021         	call	_readEEPROM	;wreg free
  9068  00149A  0100               	movlb	0	; () banked
  9069  00149C  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9070                           
  9071                           ;main.c: 1372: switch ( reg ) {
  9072  00149E  D083               	goto	l10181
  9073  0014A0                     l10163:
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 1375: relay_pulse_timer[ 0 ] =
  9077                           ;main.c: 1376: readEEPROM( 0x43 + 18) * 256 +
  9078                           ;main.c: 1377: readEEPROM( 0x43 + 19);
  9079  0014A0  6A09               	clrf	?_readEEPROM+1,c
  9080  0014A2  0E56               	movlw	86
  9081  0014A4  6E08               	movwf	?_readEEPROM,c
  9082  0014A6  ECDB  F021         	call	_readEEPROM	;wreg free
  9083  0014AA  0100               	movlb	0	; () banked
  9084  0014AC  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9085  0014AE  6A09               	clrf	?_readEEPROM+1,c
  9086  0014B0  0E55               	movlw	85
  9087  0014B2  6E08               	movwf	?_readEEPROM,c
  9088  0014B4  ECDB  F021         	call	_readEEPROM	;wreg free
  9089  0014B8  D930               	call	PL44	;call to abstracted procedure
  9090                           
  9091                           ;main.c: 1378: break;
  9092  0014BA  D0E6               	goto	l10225
  9093  0014BC                     l10165:
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;main.c: 1381: relay_pulse_timer[ 1 ] =
  9097                           ;main.c: 1382: readEEPROM( 0x43 + 20) * 256 +
  9098                           ;main.c: 1383: readEEPROM( 0x43 + 21);
  9099  0014BC  6A09               	clrf	?_readEEPROM+1,c
  9100  0014BE  0E58               	movlw	88
  9101  0014C0  6E08               	movwf	?_readEEPROM,c
  9102  0014C2  ECDB  F021         	call	_readEEPROM	;wreg free
  9103  0014C6  0100               	movlb	0	; () banked
  9104  0014C8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9105  0014CA  6A09               	clrf	?_readEEPROM+1,c
  9106  0014CC  0E57               	movlw	87
  9107  0014CE  6E08               	movwf	?_readEEPROM,c
  9108  0014D0  ECDB  F021         	call	_readEEPROM	;wreg free
  9109  0014D4  0100               	movlb	0	; () banked
  9110  0014D6  D92B               	call	PL54	;call to abstracted procedure
  9111                           
  9112                           ;main.c: 1384: break;
  9113  0014D8  D0D7               	goto	l10225
  9114  0014DA                     l10167:
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;main.c: 1387: relay_pulse_timer[ 2 ] =
  9118                           ;main.c: 1388: readEEPROM( 0x43 + 22) * 256 +
  9119                           ;main.c: 1389: readEEPROM( 0x43 + 23);
  9120  0014DA  6A09               	clrf	?_readEEPROM+1,c
  9121  0014DC  0E5A               	movlw	90
  9122  0014DE  6E08               	movwf	?_readEEPROM,c
  9123  0014E0  ECDB  F021         	call	_readEEPROM	;wreg free
  9124  0014E4  0100               	movlb	0	; () banked
  9125  0014E6  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9126  0014E8  6A09               	clrf	?_readEEPROM+1,c
  9127  0014EA  0E59               	movlw	89
  9128  0014EC  6E08               	movwf	?_readEEPROM,c
  9129  0014EE  ECDB  F021         	call	_readEEPROM	;wreg free
  9130  0014F2  0100               	movlb	0	; () banked
  9131  0014F4  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9132  0014F6  D934               	call	PL64	;call to abstracted procedure
  9133                           
  9134                           ;main.c: 1390: break;
  9135  0014F8  D0C7               	goto	l10225
  9136  0014FA                     l10169:
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;main.c: 1393: relay_pulse_timer[ 3 ] =
  9140                           ;main.c: 1394: readEEPROM( 0x43 + 24) * 256 +
  9141                           ;main.c: 1395: readEEPROM( 0x43 + 25);
  9142  0014FA  6A09               	clrf	?_readEEPROM+1,c
  9143  0014FC  0E5C               	movlw	92
  9144  0014FE  6E08               	movwf	?_readEEPROM,c
  9145  001500  ECDB  F021         	call	_readEEPROM	;wreg free
  9146  001504  0100               	movlb	0	; () banked
  9147  001506  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9148  001508  6A09               	clrf	?_readEEPROM+1,c
  9149  00150A  0E5B               	movlw	91
  9150  00150C  6E08               	movwf	?_readEEPROM,c
  9151  00150E  ECDB  F021         	call	_readEEPROM	;wreg free
  9152  001512  0100               	movlb	0	; () banked
  9153  001514  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9154  001516  D92C               	call	PL66	;call to abstracted procedure
  9155                           
  9156                           ;main.c: 1396: break;
  9157  001518  D0B7               	goto	l10225
  9158  00151A                     l10171:
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;main.c: 1399: relay_pulse_timer[ 4 ] =
  9162                           ;main.c: 1400: readEEPROM( 0x43 + 26) * 256 +
  9163                           ;main.c: 1401: readEEPROM( 0x43 + 27);
  9164  00151A  6A09               	clrf	?_readEEPROM+1,c
  9165  00151C  0E5E               	movlw	94
  9166  00151E  6E08               	movwf	?_readEEPROM,c
  9167  001520  ECDB  F021         	call	_readEEPROM	;wreg free
  9168  001524  0100               	movlb	0	; () banked
  9169  001526  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9170  001528  6A09               	clrf	?_readEEPROM+1,c
  9171  00152A  0E5D               	movlw	93
  9172  00152C  6E08               	movwf	?_readEEPROM,c
  9173  00152E  ECDB  F021         	call	_readEEPROM	;wreg free
  9174  001532  0100               	movlb	0	; () banked
  9175  001534  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9176  001536  D90C               	call	PL62	;call to abstracted procedure
  9177                           
  9178                           ;main.c: 1402: break;
  9179  001538  D0A7               	goto	l10225
  9180  00153A                     l10173:
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;main.c: 1405: relay_pulse_timer[ 5 ] =
  9184                           ;main.c: 1406: readEEPROM( 0x43 + 28) * 256 +
  9185                           ;main.c: 1407: readEEPROM( 0x43 + 29);
  9186  00153A  6A09               	clrf	?_readEEPROM+1,c
  9187  00153C  0E60               	movlw	96
  9188  00153E  6E08               	movwf	?_readEEPROM,c
  9189  001540  ECDB  F021         	call	_readEEPROM	;wreg free
  9190  001544  0100               	movlb	0	; () banked
  9191  001546  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9192  001548  6A09               	clrf	?_readEEPROM+1,c
  9193  00154A  0E5F               	movlw	95
  9194  00154C  6E08               	movwf	?_readEEPROM,c
  9195  00154E  ECDB  F021         	call	_readEEPROM	;wreg free
  9196  001552  0100               	movlb	0	; () banked
  9197  001554  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9198  001556  D8F4               	call	PL60	;call to abstracted procedure
  9199                           
  9200                           ;main.c: 1408: break;
  9201  001558  D097               	goto	l10225
  9202  00155A                     l10175:
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;main.c: 1411: relay_pulse_timer[ 6 ] =
  9206                           ;main.c: 1412: readEEPROM( 0x43 + 30) * 256 +
  9207                           ;main.c: 1413: readEEPROM( 0x43 + 31);
  9208  00155A  6A09               	clrf	?_readEEPROM+1,c
  9209  00155C  0E62               	movlw	98
  9210  00155E  6E08               	movwf	?_readEEPROM,c
  9211  001560  ECDB  F021         	call	_readEEPROM	;wreg free
  9212  001564  0100               	movlb	0	; () banked
  9213  001566  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9214  001568  6A09               	clrf	?_readEEPROM+1,c
  9215  00156A  0E61               	movlw	97
  9216  00156C  6E08               	movwf	?_readEEPROM,c
  9217  00156E  ECDB  F021         	call	_readEEPROM	;wreg free
  9218  001572  0100               	movlb	0	; () banked
  9219  001574  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9220  001576  D904               	call	PL68	;call to abstracted procedure
  9221                           
  9222                           ;main.c: 1414: break;
  9223  001578  D087               	goto	l10225
  9224  00157A                     l10177:
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;main.c: 1417: relay_pulse_timer[ 7 ] =
  9228                           ;main.c: 1418: readEEPROM( 0x43 + 32) * 256 +
  9229                           ;main.c: 1419: readEEPROM( 0x43 + 33);
  9230  00157A  6A09               	clrf	?_readEEPROM+1,c
  9231  00157C  0E64               	movlw	100
  9232  00157E  6E08               	movwf	?_readEEPROM,c
  9233  001580  ECDB  F021         	call	_readEEPROM	;wreg free
  9234  001584  0100               	movlb	0	; () banked
  9235  001586  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9236  001588  6A09               	clrf	?_readEEPROM+1,c
  9237  00158A  0E63               	movlw	99
  9238  00158C  6E08               	movwf	?_readEEPROM,c
  9239  00158E  ECDB  F021         	call	_readEEPROM	;wreg free
  9240  001592  0100               	movlb	0	; () banked
  9241  001594  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9242  001596  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9243  001598  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9244  00159A  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9245  00159C  6F7E               	movwf	(_relay_pulse_timer+14)& (0+255),b
  9246  00159E  0E00               	movlw	0
  9247  0015A0  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9248  0015A2  6F7F               	movwf	(_relay_pulse_timer+15)& (0+255),b
  9249                           
  9250                           ;main.c: 1420: break;
  9251  0015A4  D071               	goto	l10225
  9252  0015A6                     l10181:
  9253                           
  9254                           ; BSR set to: 0
  9255  0015A6  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9256                           
  9257                           ; Switch size 1, requested type "space"
  9258                           ; Number of cases is 8, Range of values is 19 to 33
  9259                           ; switch strategies available:
  9260                           ; Name         Instructions Cycles
  9261                           ; simple_byte           25    13 (average)
  9262                           ;	Chosen strategy is simple_byte
  9263  0015A8  0A13               	xorlw	19	; case 19
  9264  0015AA  E101 D779          	bz	l10163
  9265  0015AE  0A06               	xorlw	6	; case 21
  9266  0015B0  E085               	bz	l10165
  9267  0015B2  0A02               	xorlw	2	; case 23
  9268  0015B4  E092               	bz	l10167
  9269  0015B6  0A0E               	xorlw	14	; case 25
  9270  0015B8  E0A0               	bz	l10169
  9271  0015BA  0A02               	xorlw	2	; case 27
  9272  0015BC  E0AE               	bz	l10171
  9273  0015BE  0A06               	xorlw	6	; case 29
  9274  0015C0  E0BC               	bz	l10173
  9275  0015C2  0A02               	xorlw	2	; case 31
  9276  0015C4  E0CA               	bz	l10175
  9277  0015C6  0A3E               	xorlw	62	; case 33
  9278  0015C8  E0D8               	bz	l10177
  9279  0015CA  D05E               	goto	l10225
  9280  0015CC                     l10183:
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;main.c: 1428: else if ( ( reg >= 34 ) &&
  9284                           ;main.c: 1429: ( reg <= 49 ) ) {
  9285  0015CC  0E21               	movlw	33
  9286  0015CE  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9287  0015D0  D03C               	goto	l10209
  9288                           
  9289                           ; BSR set to: 0
  9290  0015D2  0E32               	movlw	50
  9291  0015D4  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9292  0015D6  D039               	goto	l10209
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;main.c: 1432: writeEEPROM( 0x43 + reg, val );
  9296  0015D8  0E43               	movlw	67
  9297  0015DA  D897               	call	PL6	;call to abstracted procedure
  9298  0015DC  ECBA  F020         	call	_writeEEPROM	;wreg free
  9299                           
  9300                           ;main.c: 1433: rv = readEEPROM( 0x43 + reg );
  9301  0015E0  D88C               	call	PL4	;call to abstracted procedure
  9302  0015E2  ECDB  F021         	call	_readEEPROM	;wreg free
  9303  0015E6  0100               	movlb	0	; () banked
  9304  0015E8  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9305                           
  9306                           ;main.c: 1435: switch ( reg ) {
  9307  0015EA  D016               	goto	l10207
  9308  0015EC                     l10203:
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;main.c: 1480: relay_protection_timer[ 7 ] =
  9312                           ;main.c: 1481: readEEPROM( 0x43 + 48 ) * 256 +
  9313                           ;main.c: 1482: readEEPROM( 0x43 + 49 );
  9314  0015EC  6A09               	clrf	?_readEEPROM+1,c
  9315  0015EE  0E74               	movlw	116
  9316  0015F0  6E08               	movwf	?_readEEPROM,c
  9317  0015F2  ECDB  F021         	call	_readEEPROM	;wreg free
  9318  0015F6  0100               	movlb	0	; () banked
  9319  0015F8  6FCC               	movwf	??_vscp_writeAppReg& (0+255),b
  9320  0015FA  6A09               	clrf	?_readEEPROM+1,c
  9321  0015FC  0E73               	movlw	115
  9322  0015FE  6E08               	movwf	?_readEEPROM,c
  9323  001600  ECDB  F021         	call	_readEEPROM	;wreg free
  9324  001604  0100               	movlb	0	; () banked
  9325  001606  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9326  001608  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9327  00160A  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9328  00160C  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9329  00160E  6F6E               	movwf	(_relay_protection_timer+14)& (0+255),b
  9330  001610  0E00               	movlw	0
  9331  001612  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9332  001614  6F6F               	movwf	(_relay_protection_timer+15)& (0+255),b
  9333                           
  9334                           ;main.c: 1483: break;
  9335  001616  D038               	goto	l10225
  9336  001618                     l10207:
  9337                           
  9338                           ; BSR set to: 0
  9339  001618  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9340                           
  9341                           ; Switch size 1, requested type "space"
  9342                           ; Number of cases is 8, Range of values is 35 to 49
  9343                           ; switch strategies available:
  9344                           ; Name         Instructions Cycles
  9345                           ; simple_byte           25    13 (average)
  9346                           ;	Chosen strategy is simple_byte
  9347  00161A  0A23               	xorlw	35	; case 35
  9348  00161C  E101 D4CC          	bz	l9917
  9349  001620  0A06               	xorlw	6	; case 37
  9350  001622  E101 D4FC          	bz	l9937
  9351  001626  0A02               	xorlw	2	; case 39
  9352  001628  E101 D522          	bz	l9957
  9353  00162C  0A0E               	xorlw	14	; case 41
  9354  00162E  E101 D551          	bz	l9977
  9355  001632  0A02               	xorlw	2	; case 43
  9356  001634  E101 D580          	bz	l9997
  9357  001638  0A06               	xorlw	6	; case 45
  9358  00163A  E101 D5AF          	bz	l10017
  9359  00163E  0A02               	xorlw	2	; case 47
  9360  001640  E101 D5DE          	bz	l10037
  9361  001644  0A1E               	xorlw	30	; case 49
  9362  001646  E0D2               	bz	l10203
  9363  001648  D01F               	goto	l10225
  9364  00164A                     l10209:
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;main.c: 1491: else if ( (reg >= 50 ) && (reg <= 65) ) {
  9368  00164A  0E31               	movlw	49
  9369  00164C  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9370  00164E  D00B               	goto	l10215
  9371                           
  9372                           ; BSR set to: 0
  9373  001650  0E42               	movlw	66
  9374  001652  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9375  001654  D008               	goto	l10215
  9376                           
  9377                           ; BSR set to: 0
  9378                           ;main.c: 1494: writeEEPROM( 0x43 + reg, val );
  9379  001656  0E43               	movlw	67
  9380  001658  D858               	call	PL6	;call to abstracted procedure
  9381  00165A  ECBA  F020         	call	_writeEEPROM	;wreg free
  9382                           
  9383                           ;main.c: 1495: rv = readEEPROM( 0x43 + reg );
  9384  00165E  D84D               	call	PL4	;call to abstracted procedure
  9385  001660  ECDB  F021         	call	_readEEPROM	;wreg free
  9386  001664  D00F               	goto	L24
  9387  001666                     l10215:
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;main.c: 1498: else if ( (reg >= 72) &&
  9391                           ;main.c: 1499: (reg < (72 + 7 * 8)) ) {
  9392  001666  0E47               	movlw	71
  9393  001668  65D3               	cpfsgt	vscp_writeAppReg@reg& (0+255),b
  9394  00166A  D00E               	goto	l10225
  9395                           
  9396                           ; BSR set to: 0
  9397  00166C  0E80               	movlw	128
  9398  00166E  61D3               	cpfslt	vscp_writeAppReg@reg& (0+255),b
  9399  001670  D00B               	goto	l10225
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;main.c: 1500: writeEEPROM( 0x43 + reg, val );
  9403  001672  0E43               	movlw	67
  9404  001674  D84A               	call	PL6	;call to abstracted procedure
  9405  001676  ECBA  F020         	call	_writeEEPROM	;wreg free
  9406                           
  9407                           ;main.c: 1501: calculateSetFilterMask();
  9408  00167A  ECC0  F00E         	call	_calculateSetFilterMask	;wreg free
  9409                           
  9410                           ;main.c: 1502: rv = readEEPROM( 0x43 + reg );
  9411  00167E  D83D               	call	PL4	;call to abstracted procedure
  9412  001680  ECDB  F021         	call	_readEEPROM	;wreg free
  9413  001684                     L24:
  9414  001684  0100               	movlb	0	; () banked
  9415  001686  6FD2               	movwf	vscp_writeAppReg@rv& (0+255),b
  9416  001688                     l10225:
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;main.c: 1503: }
  9420                           ;main.c: 1509: if ( bInfoEvent ) {
  9421  001688  51CF               	movf	vscp_writeAppReg@bInfoEvent& (0+255),w,b
  9422  00168A  E035               	bz	l10245
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;main.c: 1511: unsigned char val;
  9426                           ;main.c: 1512: val = readEEPROM( 0x43 +
  9427                           ;main.c: 1513: 10 + (reg - 2) );
  9428  00168C  0E4B               	movlw	75
  9429  00168E  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9430  001690  6E08               	movwf	?_readEEPROM,c
  9431  001692  6A09               	clrf	?_readEEPROM+1,c
  9432  001694  0E00               	movlw	0
  9433  001696  2209               	addwfc	?_readEEPROM+1,f,c
  9434  001698  ECDB  F021         	call	_readEEPROM	;wreg free
  9435  00169C  0100               	movlb	0	; () banked
  9436  00169E  6FD0               	movwf	vscp_writeAppReg@val_632& (0+255),b
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;main.c: 1515: if ( bOn ) {
  9440  0016A0  51D1               	movf	vscp_writeAppReg@bOn& (0+255),w,b
  9441  0016A2  E015               	bz	l395
  9442                           
  9443                           ; BSR set to: 0
  9444                           ;main.c: 1517: if ( val & 0x08 ) {
  9445  0016A4  A7D0               	btfss	vscp_writeAppReg@val_632& (0+255),3,b
  9446  0016A6  D008               	goto	l10235
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;main.c: 1518: SendInformationEvent( reg - 2,
  9450                           ;main.c: 1519: 20,
  9451                           ;main.c: 1520: 3 );
  9452  0016A8  0E14               	movlw	20
  9453  0016AA  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9454  0016AC  0E03               	movlw	3
  9455  0016AE  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9456  0016B0  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9457  0016B2  0FFE               	addlw	254
  9458  0016B4  EC52  F01F         	call	_SendInformationEvent
  9459  0016B8                     l10235:
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;main.c: 1521: }
  9463                           ;main.c: 1523: if ( val & 0x20 ) {
  9464  0016B8  ABD0               	btfss	vscp_writeAppReg@val_632& (0+255),5,b
  9465  0016BA  D01D               	goto	l10245
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;main.c: 1524: SendInformationEvent( reg - 2,
  9469                           ;main.c: 1525: 20,
  9470                           ;main.c: 1526: 25 );
  9471  0016BC  0E14               	movlw	20
  9472  0016BE  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9473  0016C0  0E19               	movlw	25
  9474  0016C2  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9475  0016C4  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9476  0016C6  0FFE               	addlw	254
  9477  0016C8  EC52  F01F         	call	_SendInformationEvent
  9478  0016CC  D014               	goto	l10245
  9479  0016CE                     l395:
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;main.c: 1530: else {
  9483                           ;main.c: 1532: if ( val & 0x10 ) {
  9484  0016CE  A9D0               	btfss	vscp_writeAppReg@val_632& (0+255),4,b
  9485  0016D0  D008               	goto	l10241
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;main.c: 1533: SendInformationEvent( reg - 2,
  9489                           ;main.c: 1534: 20,
  9490                           ;main.c: 1535: 4 );
  9491  0016D2  0E14               	movlw	20
  9492  0016D4  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9493  0016D6  0E04               	movlw	4
  9494  0016D8  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9495  0016DA  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9496  0016DC  0FFE               	addlw	254
  9497  0016DE  EC52  F01F         	call	_SendInformationEvent
  9498  0016E2                     l10241:
  9499                           
  9500                           ; BSR set to: 0
  9501                           ;main.c: 1536: }
  9502                           ;main.c: 1538: if ( val & 0x40 ) {
  9503  0016E2  ADD0               	btfss	vscp_writeAppReg@val_632& (0+255),6,b
  9504  0016E4  D008               	goto	l10245
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;main.c: 1539: SendInformationEvent( reg - 2,
  9508                           ;main.c: 1540: 20,
  9509                           ;main.c: 1541: 24 );
  9510  0016E6  0E14               	movlw	20
  9511  0016E8  6FCA               	movwf	?_SendInformationEvent& (0+255),b
  9512  0016EA  0E18               	movlw	24
  9513  0016EC  6FCB               	movwf	(?_SendInformationEvent+1)& (0+255),b
  9514  0016EE  51D3               	movf	vscp_writeAppReg@reg& (0+255),w,b
  9515  0016F0  0FFE               	addlw	254
  9516  0016F2  EC52  F01F         	call	_SendInformationEvent
  9517  0016F6                     l10245:
  9518                           
  9519                           ; BSR set to: 0
  9520                           ;main.c: 1542: }
  9521                           ;main.c: 1543: }
  9522                           ;main.c: 1544: }
  9523                           ;main.c: 1546: return rv;
  9524  0016F6  51D2               	movf	vscp_writeAppReg@rv& (0+255),w,b
  9525                           
  9526                           ; BSR set to: 0
  9527  0016F8  0012               	return	
  9528  0016FA                     __end_of_vscp_writeAppReg:
  9529                           	opt stack 0
  9530  0016FA                     PL4:
  9531                           	opt stack 20
  9532  0016FA  0E43               	movlw	67
  9533  0016FC  0100               	movlb	0	; () banked
  9534  0016FE  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9535  001700  6E08               	movwf	?_readEEPROM,c
  9536  001702  6A09               	clrf	?_readEEPROM+1,c
  9537  001704  0E00               	movlw	0
  9538  001706  2209               	addwfc	?_readEEPROM+1,f,c
  9539  001708  0C00               	retlw	0
  9540  00170A                     __end_ofPL4:
  9541                           	opt stack 0
  9542  00170A                     PL6:
  9543                           	opt stack 20
  9544  00170A  25D3               	addwf	vscp_writeAppReg@reg& (0+255),w,b
  9545  00170C  6E08               	movwf	?_writeEEPROM,c
  9546  00170E  6A09               	clrf	?_writeEEPROM+1,c
  9547  001710  0E00               	movlw	0
  9548  001712  2209               	addwfc	?_writeEEPROM+1,f,c
  9549  001714  C051  F00A         	movff	vscp_writeAppReg@val,?_writeEEPROM+2
  9550  001718  0C00               	retlw	0
  9551  00171A                     __end_ofPL6:
  9552                           	opt stack 0
  9553  00171A                     PL44:
  9554                           	opt stack 20
  9555  00171A  0100               	movlb	0	; () banked
  9556  00171C  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9557  00171E  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9558  001720  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9559  001722  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9560  001724  6F70               	movwf	_relay_pulse_timer& (0+255),b
  9561  001726  0E00               	movlw	0
  9562  001728  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9563  00172A  6F71               	movwf	(_relay_pulse_timer+1)& (0+255),b
  9564  00172C  0012               	return	
  9565  00172E                     __end_ofPL44:
  9566                           	opt stack 0
  9567  00172E                     PL54:
  9568                           	opt stack 20
  9569  00172E  6FCE               	movwf	(??_vscp_writeAppReg+2)& (0+255),b
  9570  001730  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9571  001732  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9572  001734  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9573  001736  6F72               	movwf	(_relay_pulse_timer+2)& (0+255),b
  9574  001738  0E00               	movlw	0
  9575  00173A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9576  00173C  6F73               	movwf	(_relay_pulse_timer+3)& (0+255),b
  9577  00173E  0012               	return	
  9578  001740                     __end_ofPL54:
  9579                           	opt stack 0
  9580  001740                     PL60:
  9581                           	opt stack 20
  9582  001740  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9583  001742  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9584  001744  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9585  001746  6F7A               	movwf	(_relay_pulse_timer+10)& (0+255),b
  9586  001748  0E00               	movlw	0
  9587  00174A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9588  00174C  6F7B               	movwf	(_relay_pulse_timer+11)& (0+255),b
  9589  00174E  0012               	return	
  9590  001750                     __end_ofPL60:
  9591                           	opt stack 0
  9592  001750                     PL62:
  9593                           	opt stack 20
  9594  001750  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9595  001752  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9596  001754  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9597  001756  6F78               	movwf	(_relay_pulse_timer+8)& (0+255),b
  9598  001758  0E00               	movlw	0
  9599  00175A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9600  00175C  6F79               	movwf	(_relay_pulse_timer+9)& (0+255),b
  9601  00175E  0012               	return	
  9602  001760                     __end_ofPL62:
  9603                           	opt stack 0
  9604  001760                     PL64:
  9605                           	opt stack 20
  9606  001760  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9607  001762  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9608  001764  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9609  001766  6F74               	movwf	(_relay_pulse_timer+4)& (0+255),b
  9610  001768  0E00               	movlw	0
  9611  00176A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9612  00176C  6F75               	movwf	(_relay_pulse_timer+5)& (0+255),b
  9613  00176E  0012               	return	
  9614  001770                     __end_ofPL64:
  9615                           	opt stack 0
  9616  001770                     PL66:
  9617                           	opt stack 20
  9618  001770  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9619  001772  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9620  001774  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9621  001776  6F76               	movwf	(_relay_pulse_timer+6)& (0+255),b
  9622  001778  0E00               	movlw	0
  9623  00177A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9624  00177C  6F77               	movwf	(_relay_pulse_timer+7)& (0+255),b
  9625  00177E  0012               	return	
  9626  001780                     __end_ofPL66:
  9627                           	opt stack 0
  9628  001780                     PL68:
  9629                           	opt stack 20
  9630  001780  6BCD               	clrf	(??_vscp_writeAppReg+1)& (0+255),b
  9631  001782  51CC               	movf	??_vscp_writeAppReg& (0+255),w,b
  9632  001784  25CD               	addwf	(??_vscp_writeAppReg+1)& (0+255),w,b
  9633  001786  6F7C               	movwf	(_relay_pulse_timer+12)& (0+255),b
  9634  001788  0E00               	movlw	0
  9635  00178A  21CE               	addwfc	(??_vscp_writeAppReg+2)& (0+255),w,b
  9636  00178C  6F7D               	movwf	(_relay_pulse_timer+13)& (0+255),b
  9637  00178E  0012               	return	
  9638  001790                     __end_ofPL68:
  9639                           	opt stack 0
  9640                           tblptru	equ	0xFF8
  9641                           tblptrh	equ	0xFF7
  9642                           tblptrl	equ	0xFF6
  9643                           tablat	equ	0xFF5
  9644                           prodh	equ	0xFF4
  9645                           prodl	equ	0xFF3
  9646                           intcon	equ	0xFF2
  9647                           postinc0	equ	0xFEE
  9648                           wreg	equ	0xFE8
  9649                           indf1	equ	0xFE7
  9650                           fsr1h	equ	0xFE2
  9651                           fsr1l	equ	0xFE1
  9652                           indf2	equ	0xFDF
  9653                           postinc2	equ	0xFDE
  9654                           postdec2	equ	0xFDD
  9655                           plusw2	equ	0xFDB
  9656                           fsr2h	equ	0xFDA
  9657                           fsr2l	equ	0xFD9
  9658                           status	equ	0xFD8
  9659                           
  9660 ;; *************** function _calculateSetFilterMask *****************
  9661 ;; Defined at:
  9662 ;;		line 2613 in file "../main.c"
  9663 ;; Parameters:    Size  Location     Type
  9664 ;;		None
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  rowfilter       4   61[COMRAM] unsigned long 
  9667 ;;  filter          4   57[COMRAM] unsigned long 
  9668 ;;  mask            4   53[COMRAM] unsigned long 
  9669 ;;  rowmask         4   48[COMRAM] unsigned long 
  9670 ;;  i               1   66[COMRAM] unsigned char 
  9671 ;;  j               1   65[COMRAM] unsigned char 
  9672 ;;  lastOID         1   52[COMRAM] unsigned char 
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9683 ;;      Locals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9684 ;;      Temps:         31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9685 ;;      Totals:        50       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9686 ;;Total ram usage:       50 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    3
  9689 ;; This function calls:
  9690 ;;		_readEEPROM
  9691 ;;		_ECANSetOperationMode
  9692 ;;		__CANIDToRegs
  9693 ;; This function is called by:
  9694 ;;		_vscp_writeAppReg
  9695 ;; This function uses a non-reentrant model
  9696 ;;
  9697                           
  9698                           	psect	text25
  9699  001D80                     __ptext25:
  9700                           	opt stack 0
  9701  001D80                     _calculateSetFilterMask:
  9702                           	opt stack 23
  9703                           
  9704                           ;main.c: 2614: uint8_t i,j;
  9705                           ;main.c: 2615: uint8_t lastOID;
  9706                           ;main.c: 2616: uint32_t rowmask;
  9707                           ;main.c: 2617: uint32_t rowfilter;
  9708                           ;main.c: 2620: uint32_t mask = 0xffffffff;
  9709                           
  9710                           ; BSR set to: 0
  9711                           ;incstack = 0
  9712                           ;incstack = 0
  9713  001D80  6836               	setf	calculateSetFilterMask@mask,c
  9714  001D82  6837               	setf	calculateSetFilterMask@mask+1,c
  9715  001D84  6838               	setf	calculateSetFilterMask@mask+2,c
  9716  001D86  6839               	setf	calculateSetFilterMask@mask+3,c
  9717                           
  9718                           ;main.c: 2621: uint32_t filter = 0;
  9719  001D88  6A3A               	clrf	calculateSetFilterMask@filter,c
  9720  001D8A  6A3B               	clrf	calculateSetFilterMask@filter+1,c
  9721  001D8C  6A3C               	clrf	calculateSetFilterMask@filter+2,c
  9722  001D8E  6A3D               	clrf	calculateSetFilterMask@filter+3,c
  9723                           
  9724                           ;main.c: 2624: for ( i=0; i < 7; i++ ) {
  9725  001D90  6A43               	clrf	calculateSetFilterMask@i,c
  9726  001D92                     l8461:
  9727                           
  9728                           ;main.c: 2627: if ( readEEPROM( 0x43 + 8*i + 1 ) & 0x80 ) {
  9729  001D92  5043               	movf	calculateSetFilterMask@i,w,c
  9730  001D94  D971               	call	PL10	;call to abstracted procedure
  9731  001D96  0E44               	movlw	68
  9732  001D98  2412               	addwf	??_calculateSetFilterMask,w,c
  9733  001D9A  6E08               	movwf	?_readEEPROM,c
  9734  001D9C  0E00               	movlw	0
  9735  001D9E  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9736  001DA0  6E09               	movwf	?_readEEPROM+1,c
  9737  001DA2  ECDB  F021         	call	_readEEPROM	;wreg free
  9738  001DA6  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
  9739  001DA8  AE14               	btfss	??_calculateSetFilterMask+2,7,c
  9740  001DAA  D11A               	goto	l8505
  9741                           
  9742                           ;main.c: 2636: rowmask =
  9743                           ;main.c: 2638: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 2 ) << 23 ) |
  9744                           ;main.c: 2640: ( (uint32_t)readEEPROM( 0x43 + 8*i + 2 ) << 16 ) |
  9745                           ;main.c: 2642: ( (uint32_t)readEEPROM( 0x43 + 8*i + 4 ) << 8 ) |
  9746                           ;main.c: 2644: 0xff;
  9747  001DAC  5043               	movf	calculateSetFilterMask@i,w,c
  9748  001DAE  D964               	call	PL10	;call to abstracted procedure
  9749  001DB0  0E47               	movlw	71
  9750  001DB2  2412               	addwf	??_calculateSetFilterMask,w,c
  9751  001DB4  6E08               	movwf	?_readEEPROM,c
  9752  001DB6  0E00               	movlw	0
  9753  001DB8  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9754  001DBA  6E09               	movwf	?_readEEPROM+1,c
  9755  001DBC  ECDB  F021         	call	_readEEPROM	;wreg free
  9756  001DC0  D967               	call	PL12	;call to abstracted procedure
  9757  001DC2  0E45               	movlw	69
  9758  001DC4  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9759  001DC6  6E08               	movwf	?_readEEPROM,c
  9760  001DC8  0E00               	movlw	0
  9761  001DCA  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9762  001DCC  6E09               	movwf	?_readEEPROM+1,c
  9763  001DCE  ECDB  F021         	call	_readEEPROM	;wreg free
  9764  001DD2  D933               	call	PL8	;call to abstracted procedure
  9765  001DD4  ECDB  F021         	call	_readEEPROM	;wreg free
  9766  001DD8  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9767  001DDA  0E02               	movlw	2
  9768  001DDC  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9769  001DDE  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9770  001DE2  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9771  001DE4  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9772  001DE6  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9773  001DE8  0E17               	movlw	23
  9774  001DEA                     u9925:
  9775  001DEA  90D8               	bcf	status,0,c
  9776  001DEC  3623               	rlcf	??_calculateSetFilterMask+17,f,c
  9777  001DEE  3624               	rlcf	??_calculateSetFilterMask+18,f,c
  9778  001DF0  3625               	rlcf	??_calculateSetFilterMask+19,f,c
  9779  001DF2  3626               	rlcf	??_calculateSetFilterMask+20,f,c
  9780  001DF4  2EE8               	decfsz	wreg,f,c
  9781  001DF6  D7F9               	goto	u9925
  9782  001DF8  501C               	movf	??_calculateSetFilterMask+10,w,c
  9783  001DFA  D964               	call	PL14	;call to abstracted procedure
  9784  001DFC  0EFF               	movlw	255
  9785  001DFE  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9786  001E00  6E31               	movwf	calculateSetFilterMask@rowmask,c
  9787  001E02  502C               	movf	??_calculateSetFilterMask+26,w,c
  9788  001E04  6E32               	movwf	calculateSetFilterMask@rowmask+1,c
  9789  001E06  502D               	movf	??_calculateSetFilterMask+27,w,c
  9790  001E08  6E33               	movwf	calculateSetFilterMask@rowmask+2,c
  9791  001E0A  502E               	movf	??_calculateSetFilterMask+28,w,c
  9792  001E0C  6E34               	movwf	calculateSetFilterMask@rowmask+3,c
  9793                           
  9794                           ;main.c: 2645: ;
  9795                           ;main.c: 2650: rowfilter =
  9796                           ;main.c: 2652: ( (uint32_t)( readEEPROM( 0x43 + 8*i + 1 ) & 1 ) << 24 ) |
  9797                           ;main.c: 2654: ( (uint32_t)readEEPROM( 0x43 + 8*i + 3 ) << 16 ) |
  9798                           ;main.c: 2656: ( (uint32_t)readEEPROM( 0x43 + 8*i + 5 ) << 8 ) |
  9799                           ;main.c: 2659: readEEPROM( 0x43 + 8*i );
  9800  001E0E  5043               	movf	calculateSetFilterMask@i,w,c
  9801  001E10  D933               	call	PL10	;call to abstracted procedure
  9802  001E12  0E48               	movlw	72
  9803  001E14  2412               	addwf	??_calculateSetFilterMask,w,c
  9804  001E16  6E08               	movwf	?_readEEPROM,c
  9805  001E18  0E00               	movlw	0
  9806  001E1A  2013               	addwfc	??_calculateSetFilterMask+1,w,c
  9807  001E1C  6E09               	movwf	?_readEEPROM+1,c
  9808  001E1E  ECDB  F021         	call	_readEEPROM	;wreg free
  9809  001E22  D936               	call	PL12	;call to abstracted procedure
  9810  001E24  0E46               	movlw	70
  9811  001E26  2419               	addwf	??_calculateSetFilterMask+7,w,c
  9812  001E28  6E08               	movwf	?_readEEPROM,c
  9813  001E2A  0E00               	movlw	0
  9814  001E2C  201A               	addwfc	??_calculateSetFilterMask+8,w,c
  9815  001E2E  6E09               	movwf	?_readEEPROM+1,c
  9816  001E30  ECDB  F021         	call	_readEEPROM	;wreg free
  9817  001E34  D902               	call	PL8	;call to abstracted procedure
  9818  001E36  ECDB  F021         	call	_readEEPROM	;wreg free
  9819  001E3A  6E22               	movwf	(??_calculateSetFilterMask+16)& (0+255),c
  9820  001E3C  0E01               	movlw	1
  9821  001E3E  1622               	andwf	??_calculateSetFilterMask+16,f,c
  9822  001E40  C022  F023         	movff	??_calculateSetFilterMask+16,??_calculateSetFilterMask+17
  9823  001E44  6A24               	clrf	(??_calculateSetFilterMask+18)& (0+255),c
  9824  001E46  6A25               	clrf	(??_calculateSetFilterMask+19)& (0+255),c
  9825  001E48  6A26               	clrf	(??_calculateSetFilterMask+20)& (0+255),c
  9826  001E4A  C023  F026         	movff	??_calculateSetFilterMask+17,??_calculateSetFilterMask+20
  9827  001E4E  6A25               	clrf	??_calculateSetFilterMask+19,c
  9828  001E50  6A24               	clrf	??_calculateSetFilterMask+18,c
  9829  001E52  6A23               	clrf	??_calculateSetFilterMask+17,c
  9830  001E54  501C               	movf	??_calculateSetFilterMask+10,w,c
  9831  001E56  D936               	call	PL14	;call to abstracted procedure
  9832  001E58  5043               	movf	calculateSetFilterMask@i,w,c
  9833  001E5A  6E2F               	movwf	(??_calculateSetFilterMask+29)& (0+255),c
  9834  001E5C  6A30               	clrf	(??_calculateSetFilterMask+30)& (0+255),c
  9835  001E5E  90D8               	bcf	status,0,c
  9836  001E60  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9837  001E62  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9838  001E64  90D8               	bcf	status,0,c
  9839  001E66  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9840  001E68  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9841  001E6A  90D8               	bcf	status,0,c
  9842  001E6C  362F               	rlcf	??_calculateSetFilterMask+29,f,c
  9843  001E6E  3630               	rlcf	??_calculateSetFilterMask+30,f,c
  9844  001E70  0E43               	movlw	67
  9845  001E72  242F               	addwf	??_calculateSetFilterMask+29,w,c
  9846  001E74  6E08               	movwf	?_readEEPROM,c
  9847  001E76  0E00               	movlw	0
  9848  001E78  2030               	addwfc	??_calculateSetFilterMask+30,w,c
  9849  001E7A  6E09               	movwf	?_readEEPROM+1,c
  9850  001E7C  ECDB  F021         	call	_readEEPROM	;wreg free
  9851  001E80  102B               	iorwf	??_calculateSetFilterMask+25,w,c
  9852  001E82  6E3E               	movwf	calculateSetFilterMask@rowfilter,c
  9853  001E84  502C               	movf	??_calculateSetFilterMask+26,w,c
  9854  001E86  6E3F               	movwf	calculateSetFilterMask@rowfilter+1,c
  9855  001E88  502D               	movf	??_calculateSetFilterMask+27,w,c
  9856  001E8A  6E40               	movwf	calculateSetFilterMask@rowfilter+2,c
  9857  001E8C  502E               	movf	??_calculateSetFilterMask+28,w,c
  9858  001E8E  6E41               	movwf	calculateSetFilterMask@rowfilter+3,c
  9859                           
  9860                           ;main.c: 2661: if ( 0 == i ) filter = rowfilter;
  9861  001E90  6643               	tstfsz	calculateSetFilterMask@i,c
  9862  001E92  D008               	goto	l8469
  9863  001E94  C03E  F03A         	movff	calculateSetFilterMask@rowfilter,calculateSetFilterMask@filter
  9864  001E98  C03F  F03B         	movff	calculateSetFilterMask@rowfilter+1,calculateSetFilterMask@filter+1
  9865  001E9C  C040  F03C         	movff	calculateSetFilterMask@rowfilter+2,calculateSetFilterMask@filter+2
  9866  001EA0  C041  F03D         	movff	calculateSetFilterMask@rowfilter+3,calculateSetFilterMask@filter+3
  9867  001EA4                     l8469:
  9868                           
  9869                           ;main.c: 2665: mask &= rowmask;
  9870  001EA4  5031               	movf	calculateSetFilterMask@rowmask,w,c
  9871  001EA6  1636               	andwf	calculateSetFilterMask@mask,f,c
  9872  001EA8  5032               	movf	calculateSetFilterMask@rowmask+1,w,c
  9873  001EAA  1637               	andwf	calculateSetFilterMask@mask+1,f,c
  9874  001EAC  5033               	movf	calculateSetFilterMask@rowmask+2,w,c
  9875  001EAE  1638               	andwf	calculateSetFilterMask@mask+2,f,c
  9876  001EB0  5034               	movf	calculateSetFilterMask@rowmask+3,w,c
  9877  001EB2  1639               	andwf	calculateSetFilterMask@mask+3,f,c
  9878                           
  9879                           ;main.c: 2670: for ( j=0; j<32; j++ ) {
  9880  001EB4  6A42               	clrf	calculateSetFilterMask@j,c
  9881  001EB6                     l8477:
  9882                           
  9883                           ;main.c: 2672: if ( ( ( filter >> j ) & 1 ) != ( ( rowfilter >> j ) & 1 ) ) {
  9884  001EB6  5042               	movf	calculateSetFilterMask@j,w,c
  9885  001EB8  C03E  F012         	movff	calculateSetFilterMask@rowfilter,??_calculateSetFilterMask
  9886  001EBC  C03F  F013         	movff	calculateSetFilterMask@rowfilter+1,??_calculateSetFilterMask+1
  9887  001EC0  C040  F014         	movff	calculateSetFilterMask@rowfilter+2,??_calculateSetFilterMask+2
  9888  001EC4  C041  F015         	movff	calculateSetFilterMask@rowfilter+3,??_calculateSetFilterMask+3
  9889  001EC8  2AE8               	incf	wreg,f,c
  9890  001ECA  D005               	goto	u9940
  9891  001ECC                     u9945:
  9892  001ECC  90D8               	bcf	status,0,c
  9893  001ECE  3215               	rrcf	??_calculateSetFilterMask+3,f,c
  9894  001ED0  3214               	rrcf	??_calculateSetFilterMask+2,f,c
  9895  001ED2  3213               	rrcf	??_calculateSetFilterMask+1,f,c
  9896  001ED4  3212               	rrcf	??_calculateSetFilterMask,f,c
  9897  001ED6                     u9940:
  9898  001ED6  2EE8               	decfsz	wreg,f,c
  9899  001ED8  D7F9               	goto	u9945
  9900  001EDA  0E01               	movlw	1
  9901  001EDC  1612               	andwf	??_calculateSetFilterMask,f,c
  9902  001EDE  5042               	movf	calculateSetFilterMask@j,w,c
  9903  001EE0  C03A  F016         	movff	calculateSetFilterMask@filter,??_calculateSetFilterMask+4
  9904  001EE4  C03B  F017         	movff	calculateSetFilterMask@filter+1,??_calculateSetFilterMask+5
  9905  001EE8  C03C  F018         	movff	calculateSetFilterMask@filter+2,??_calculateSetFilterMask+6
  9906  001EEC  C03D  F019         	movff	calculateSetFilterMask@filter+3,??_calculateSetFilterMask+7
  9907  001EF0  2AE8               	incf	wreg,f,c
  9908  001EF2  D005               	goto	u9950
  9909  001EF4                     u9955:
  9910  001EF4  90D8               	bcf	status,0,c
  9911  001EF6  3219               	rrcf	??_calculateSetFilterMask+7,f,c
  9912  001EF8  3218               	rrcf	??_calculateSetFilterMask+6,f,c
  9913  001EFA  3217               	rrcf	??_calculateSetFilterMask+5,f,c
  9914  001EFC  3216               	rrcf	??_calculateSetFilterMask+4,f,c
  9915  001EFE                     u9950:
  9916  001EFE  2EE8               	decfsz	wreg,f,c
  9917  001F00  D7F9               	goto	u9955
  9918  001F02  5016               	movf	??_calculateSetFilterMask+4,w,c
  9919  001F04  0B01               	andlw	1
  9920  001F06  1812               	xorwf	??_calculateSetFilterMask,w,c
  9921  001F08  E010               	bz	l8481
  9922                           
  9923                           ;main.c: 2673: mask &= ~(1<<j);
  9924  001F0A  C042  F012         	movff	calculateSetFilterMask@j,??_calculateSetFilterMask
  9925  001F0E  D8FC               	call	PL80	;call to abstracted procedure
  9926  001F10  D001               	goto	u9974
  9927  001F12                     u9975:
  9928  001F12  D8FF               	call	PL82	;call to abstracted procedure
  9929  001F14                     u9974:
  9930  001F14  2E12               	decfsz	??_calculateSetFilterMask,f,c
  9931  001F16  D7FD               	goto	u9975
  9932  001F18  1C13               	comf	??_calculateSetFilterMask+1,w,c
  9933  001F1A  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
  9934  001F1C  1C14               	comf	??_calculateSetFilterMask+2,w,c
  9935  001F1E  6E16               	movwf	(??_calculateSetFilterMask+4)& (0+255),c
  9936  001F20  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
  9937  001F22  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
  9938  001F24  0617               	decf	(??_calculateSetFilterMask+5)& (0+255),f,c
  9939  001F26  5017               	movf	(??_calculateSetFilterMask+5)& (0+255),w,c
  9940  001F28  D8E5               	call	PL34	;call to abstracted procedure
  9941  001F2A                     l8481:
  9942  001F2A  2A42               	incf	calculateSetFilterMask@j,f,c
  9943  001F2C  0E1F               	movlw	31
  9944  001F2E  6442               	cpfsgt	calculateSetFilterMask@j,c
  9945  001F30  D7C2               	goto	l8477
  9946                           
  9947                           ;main.c: 2674: }
  9948                           ;main.c: 2675: }
  9949                           ;main.c: 2681: filter &= rowfilter;
  9950  001F32  503E               	movf	calculateSetFilterMask@rowfilter,w,c
  9951  001F34  163A               	andwf	calculateSetFilterMask@filter,f,c
  9952  001F36  503F               	movf	calculateSetFilterMask@rowfilter+1,w,c
  9953  001F38  163B               	andwf	calculateSetFilterMask@filter+1,f,c
  9954  001F3A  5040               	movf	calculateSetFilterMask@rowfilter+2,w,c
  9955  001F3C  163C               	andwf	calculateSetFilterMask@filter+2,f,c
  9956  001F3E  5041               	movf	calculateSetFilterMask@rowfilter+3,w,c
  9957  001F40  163D               	andwf	calculateSetFilterMask@filter+3,f,c
  9958                           
  9959                           ;main.c: 2689: }
  9960                           ;main.c: 2691: if (i) {
  9961                           
  9962                           ;main.c: 2684: if ( !readEEPROM( 0x43 + 8*i + 1 ) & 0x40 ) {
  9963  001F42  5043               	movf	calculateSetFilterMask@i,w,c
  9964  001F44  E042               	bz	l8501
  9965                           
  9966                           ;main.c: 2694: for (j = 0; j < 8; j++) {
  9967  001F46  6A42               	clrf	calculateSetFilterMask@j,c
  9968  001F48                     l8495:
  9969                           
  9970                           ;main.c: 2695: if ((lastOID >> i & 1)
  9971                           ;main.c: 2696: != (readEEPROM(0x43 + 8 * i) >> i & 1)) {
  9972  001F48  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
  9973  001F4C  5043               	movf	calculateSetFilterMask@i,w,c
  9974  001F4E  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
  9975  001F50  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
  9976  001F52  90D8               	bcf	status,0,c
  9977  001F54  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9978  001F56  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9979  001F58  90D8               	bcf	status,0,c
  9980  001F5A  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9981  001F5C  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9982  001F5E  90D8               	bcf	status,0,c
  9983  001F60  3613               	rlcf	??_calculateSetFilterMask+1,f,c
  9984  001F62  3614               	rlcf	??_calculateSetFilterMask+2,f,c
  9985  001F64  0E43               	movlw	67
  9986  001F66  2413               	addwf	??_calculateSetFilterMask+1,w,c
  9987  001F68  6E08               	movwf	?_readEEPROM,c
  9988  001F6A  0E00               	movlw	0
  9989  001F6C  2014               	addwfc	??_calculateSetFilterMask+2,w,c
  9990  001F6E  6E09               	movwf	?_readEEPROM+1,c
  9991  001F70  ECDB  F021         	call	_readEEPROM	;wreg free
  9992  001F74  6E15               	movwf	(??_calculateSetFilterMask+3)& (0+255),c
  9993  001F76  2A12               	incf	??_calculateSetFilterMask,f,c
  9994  001F78  D002               	goto	u10004
  9995  001F7A                     u10005:
  9996  001F7A  90D8               	bcf	status,0,c
  9997  001F7C  3215               	rrcf	??_calculateSetFilterMask+3,f,c
  9998  001F7E                     u10004:
  9999  001F7E  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10000  001F80  D7FC               	goto	u10005
 10001  001F82  0E01               	movlw	1
 10002  001F84  1615               	andwf	??_calculateSetFilterMask+3,f,c
 10003  001F86  C043  F016         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask+4
 10004  001F8A  C035  F017         	movff	calculateSetFilterMask@lastOID,??_calculateSetFilterMask+5
 10005  001F8E  2A16               	incf	??_calculateSetFilterMask+4,f,c
 10006  001F90  D002               	goto	u10014
 10007  001F92                     u10015:
 10008  001F92  90D8               	bcf	status,0,c
 10009  001F94  3217               	rrcf	??_calculateSetFilterMask+5,f,c
 10010  001F96                     u10014:
 10011  001F96  2E16               	decfsz	??_calculateSetFilterMask+4,f,c
 10012  001F98  D7FC               	goto	u10015
 10013  001F9A  5017               	movf	??_calculateSetFilterMask+5,w,c
 10014  001F9C  0B01               	andlw	1
 10015  001F9E  1815               	xorwf	??_calculateSetFilterMask+3,w,c
 10016  001FA0  E010               	bz	l8499
 10017                           
 10018                           ;main.c: 2697: mask &= (1 << i);
 10019  001FA2  C043  F012         	movff	calculateSetFilterMask@i,??_calculateSetFilterMask
 10020  001FA6  D8B0               	call	PL80	;call to abstracted procedure
 10021  001FA8  D001               	goto	u10034
 10022  001FAA                     u10035:
 10023  001FAA  D8B3               	call	PL82	;call to abstracted procedure
 10024  001FAC                     u10034:
 10025  001FAC  2E12               	decfsz	??_calculateSetFilterMask,f,c
 10026  001FAE  D7FD               	goto	u10035
 10027  001FB0  C013  F015         	movff	??_calculateSetFilterMask+1,??_calculateSetFilterMask+3
 10028  001FB4  C014  F016         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+4
 10029  001FB8  0E00               	movlw	0
 10030  001FBA  BE16               	btfsc	(??_calculateSetFilterMask+4)& (0+255),7,c
 10031  001FBC  0EFF               	movlw	255
 10032  001FBE  6E17               	movwf	(??_calculateSetFilterMask+5)& (0+255),c
 10033  001FC0  D899               	call	PL34	;call to abstracted procedure
 10034  001FC2                     l8499:
 10035  001FC2  2A42               	incf	calculateSetFilterMask@j,f,c
 10036  001FC4  0E07               	movlw	7
 10037  001FC6  6442               	cpfsgt	calculateSetFilterMask@j,c
 10038  001FC8  D7BF               	goto	l8495
 10039  001FCA                     l8501:
 10040                           
 10041                           ;main.c: 2698: }
 10042                           ;main.c: 2699: }
 10043                           ;main.c: 2701: lastOID = readEEPROM(0x43 + 8 * i);
 10044  001FCA  5043               	movf	calculateSetFilterMask@i,w,c
 10045  001FCC  D855               	call	PL10	;call to abstracted procedure
 10046  001FCE  0E43               	movlw	67
 10047  001FD0  2412               	addwf	??_calculateSetFilterMask,w,c
 10048  001FD2  6E08               	movwf	?_readEEPROM,c
 10049  001FD4  0E00               	movlw	0
 10050  001FD6  2013               	addwfc	??_calculateSetFilterMask+1,w,c
 10051  001FD8  6E09               	movwf	?_readEEPROM+1,c
 10052  001FDA  ECDB  F021         	call	_readEEPROM	;wreg free
 10053  001FDE  6E35               	movwf	calculateSetFilterMask@lastOID,c
 10054  001FE0                     l8505:
 10055  001FE0  2A43               	incf	calculateSetFilterMask@i,f,c
 10056  001FE2  0E06               	movlw	6
 10057  001FE4  6443               	cpfsgt	calculateSetFilterMask@i,c
 10058  001FE6  D6D5               	goto	l8461
 10059                           
 10060                           ;main.c: 2707: }
 10061                           ;main.c: 2709: }
 10062                           ;main.c: 2710: }
 10063                           ;main.c: 2713: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 10064  001FE8  0E80               	movlw	128
 10065  001FEA  EC82  F021         	call	_ECANSetOperationMode
 10066                           
 10067                           ;main.c: 2716: _CANIDToRegs((BYTE*)&RXM1SIDH, mask, 1);
 10068  001FEE  010E               	movlb	14	; () banked
 10069  001FF0  0E0E               	movlw	14	;volatile
 10070  001FF2  6E09               	movwf	?__CANIDToRegs+1,c
 10071  001FF4  0EFC               	movlw	252	;volatile
 10072  001FF6  6E08               	movwf	?__CANIDToRegs,c
 10073  001FF8  C036  F00A         	movff	calculateSetFilterMask@mask,?__CANIDToRegs+2
 10074  001FFC  C037  F00B         	movff	calculateSetFilterMask@mask+1,?__CANIDToRegs+3
 10075  002000  C038  F00C         	movff	calculateSetFilterMask@mask+2,?__CANIDToRegs+4
 10076  002004  C039  F00D         	movff	calculateSetFilterMask@mask+3,?__CANIDToRegs+5
 10077  002008  0E01               	movlw	1
 10078  00200A  6E0E               	movwf	?__CANIDToRegs+6,c
 10079  00200C  EC66  F01A         	call	__CANIDToRegs	;wreg free
 10080                           
 10081                           ;main.c: 2719: RXF1EN = 1; _CANIDToRegs((BYTE*)&RXF1SIDH, filter, 1);;
 10082  002010  010E               	movlb	14	; () banked
 10083  002012  8346               	bsf	70,1,b	;volatile
 10084                           
 10085                           ; BSR set to: 14
 10086  002014  0E0E               	movlw	14	;volatile
 10087  002016  6E09               	movwf	?__CANIDToRegs+1,c
 10088  002018  0EE4               	movlw	228	;volatile
 10089  00201A  6E08               	movwf	?__CANIDToRegs,c
 10090  00201C  C03A  F00A         	movff	calculateSetFilterMask@filter,?__CANIDToRegs+2
 10091  002020  C03B  F00B         	movff	calculateSetFilterMask@filter+1,?__CANIDToRegs+3
 10092  002024  C03C  F00C         	movff	calculateSetFilterMask@filter+2,?__CANIDToRegs+4
 10093  002028  C03D  F00D         	movff	calculateSetFilterMask@filter+3,?__CANIDToRegs+5
 10094  00202C  0E01               	movlw	1
 10095  00202E  6E0E               	movwf	?__CANIDToRegs+6,c
 10096  002030  EC66  F01A         	call	__CANIDToRegs	;wreg free
 10097                           
 10098                           ;main.c: 2722: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
 10099  002034  0E00               	movlw	0
 10100  002036  EF82  F021         	goto	_ECANSetOperationMode
 10101  00203A                     __end_of_calculateSetFilterMask:
 10102                           	opt stack 0
 10103  00203A                     PL8:
 10104                           	opt stack 23
 10105  00203A  6E1B               	movwf	(??_calculateSetFilterMask+9)& (0+255),c
 10106  00203C  C01B  F01C         	movff	??_calculateSetFilterMask+9,??_calculateSetFilterMask+10
 10107  002040  6A1D               	clrf	(??_calculateSetFilterMask+11)& (0+255),c
 10108  002042  6A1E               	clrf	(??_calculateSetFilterMask+12)& (0+255),c
 10109  002044  6A1F               	clrf	(??_calculateSetFilterMask+13)& (0+255),c
 10110  002046  C01D  F01F         	movff	??_calculateSetFilterMask+11,??_calculateSetFilterMask+13
 10111  00204A  C01C  F01E         	movff	??_calculateSetFilterMask+10,??_calculateSetFilterMask+12
 10112  00204E  6A1D               	clrf	??_calculateSetFilterMask+11,c
 10113  002050  6A1C               	clrf	??_calculateSetFilterMask+10,c
 10114  002052  5043               	movf	calculateSetFilterMask@i,w,c
 10115  002054  6E20               	movwf	(??_calculateSetFilterMask+14)& (0+255),c
 10116  002056  6A21               	clrf	(??_calculateSetFilterMask+15)& (0+255),c
 10117  002058  90D8               	bcf	status,0,c
 10118  00205A  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10119  00205C  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10120  00205E  90D8               	bcf	status,0,c
 10121  002060  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10122  002062  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10123  002064  90D8               	bcf	status,0,c
 10124  002066  3620               	rlcf	??_calculateSetFilterMask+14,f,c
 10125  002068  3621               	rlcf	??_calculateSetFilterMask+15,f,c
 10126  00206A  0E44               	movlw	68
 10127  00206C  2420               	addwf	??_calculateSetFilterMask+14,w,c
 10128  00206E  6E08               	movwf	?_readEEPROM,c
 10129  002070  0E00               	movlw	0
 10130  002072  2021               	addwfc	??_calculateSetFilterMask+15,w,c
 10131  002074  6E09               	movwf	?_readEEPROM+1,c
 10132  002076  0012               	return	
 10133  002078                     __end_ofPL8:
 10134                           	opt stack 0
 10135  002078                     PL10:
 10136                           	opt stack 23
 10137  002078  6E12               	movwf	??_calculateSetFilterMask& (0+255),c
 10138  00207A  6A13               	clrf	(??_calculateSetFilterMask+1)& (0+255),c
 10139  00207C  90D8               	bcf	status,0,c
 10140  00207E  3612               	rlcf	??_calculateSetFilterMask,f,c
 10141  002080  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10142  002082  90D8               	bcf	status,0,c
 10143  002084  3612               	rlcf	??_calculateSetFilterMask,f,c
 10144  002086  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10145  002088  90D8               	bcf	status,0,c
 10146  00208A  3612               	rlcf	??_calculateSetFilterMask,f,c
 10147  00208C  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10148  00208E  0012               	return	
 10149  002090                     __end_ofPL10:
 10150                           	opt stack 0
 10151  002090                     PL12:
 10152                           	opt stack 23
 10153  002090  6E14               	movwf	(??_calculateSetFilterMask+2)& (0+255),c
 10154  002092  C014  F015         	movff	??_calculateSetFilterMask+2,??_calculateSetFilterMask+3
 10155  002096  6A16               	clrf	(??_calculateSetFilterMask+4)& (0+255),c
 10156  002098  6A17               	clrf	(??_calculateSetFilterMask+5)& (0+255),c
 10157  00209A  6A18               	clrf	(??_calculateSetFilterMask+6)& (0+255),c
 10158  00209C  C017  F018         	movff	??_calculateSetFilterMask+5,??_calculateSetFilterMask+6
 10159  0020A0  C016  F017         	movff	??_calculateSetFilterMask+4,??_calculateSetFilterMask+5
 10160  0020A4  C015  F016         	movff	??_calculateSetFilterMask+3,??_calculateSetFilterMask+4
 10161  0020A8  6A15               	clrf	??_calculateSetFilterMask+3,c
 10162  0020AA  5043               	movf	calculateSetFilterMask@i,w,c
 10163  0020AC  6E19               	movwf	(??_calculateSetFilterMask+7)& (0+255),c
 10164  0020AE  6A1A               	clrf	(??_calculateSetFilterMask+8)& (0+255),c
 10165  0020B0  90D8               	bcf	status,0,c
 10166  0020B2  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10167  0020B4  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10168  0020B6  90D8               	bcf	status,0,c
 10169  0020B8  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10170  0020BA  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10171  0020BC  90D8               	bcf	status,0,c
 10172  0020BE  3619               	rlcf	??_calculateSetFilterMask+7,f,c
 10173  0020C0  361A               	rlcf	??_calculateSetFilterMask+8,f,c
 10174  0020C2  0012               	return	
 10175  0020C4                     __end_ofPL12:
 10176                           	opt stack 0
 10177  0020C4                     PL14:
 10178                           	opt stack 23
 10179  0020C4  1023               	iorwf	??_calculateSetFilterMask+17,w,c
 10180  0020C6  6E27               	movwf	(??_calculateSetFilterMask+21)& (0+255),c
 10181  0020C8  501D               	movf	??_calculateSetFilterMask+11,w,c
 10182  0020CA  1024               	iorwf	??_calculateSetFilterMask+18,w,c
 10183  0020CC  6E28               	movwf	(??_calculateSetFilterMask+22)& (0+255),c
 10184  0020CE  501E               	movf	??_calculateSetFilterMask+12,w,c
 10185  0020D0  1025               	iorwf	??_calculateSetFilterMask+19,w,c
 10186  0020D2  6E29               	movwf	(??_calculateSetFilterMask+23)& (0+255),c
 10187  0020D4  501F               	movf	??_calculateSetFilterMask+13,w,c
 10188  0020D6  1026               	iorwf	??_calculateSetFilterMask+20,w,c
 10189  0020D8  6E2A               	movwf	(??_calculateSetFilterMask+24)& (0+255),c
 10190  0020DA  5015               	movf	??_calculateSetFilterMask+3,w,c
 10191  0020DC  1027               	iorwf	??_calculateSetFilterMask+21,w,c
 10192  0020DE  6E2B               	movwf	(??_calculateSetFilterMask+25)& (0+255),c
 10193  0020E0  5016               	movf	??_calculateSetFilterMask+4,w,c
 10194  0020E2  1028               	iorwf	??_calculateSetFilterMask+22,w,c
 10195  0020E4  6E2C               	movwf	(??_calculateSetFilterMask+26)& (0+255),c
 10196  0020E6  5017               	movf	??_calculateSetFilterMask+5,w,c
 10197  0020E8  1029               	iorwf	??_calculateSetFilterMask+23,w,c
 10198  0020EA  6E2D               	movwf	(??_calculateSetFilterMask+27)& (0+255),c
 10199  0020EC  5018               	movf	??_calculateSetFilterMask+6,w,c
 10200  0020EE  102A               	iorwf	??_calculateSetFilterMask+24,w,c
 10201  0020F0  6E2E               	movwf	(??_calculateSetFilterMask+28)& (0+255),c
 10202  0020F2  0012               	return	
 10203  0020F4                     __end_ofPL14:
 10204                           	opt stack 0
 10205  0020F4                     PL34:
 10206                           	opt stack 23
 10207  0020F4  6E18               	movwf	(??_calculateSetFilterMask+6)& (0+255),c
 10208  0020F6  5015               	movf	??_calculateSetFilterMask+3,w,c
 10209  0020F8  1636               	andwf	calculateSetFilterMask@mask,f,c
 10210  0020FA  5016               	movf	??_calculateSetFilterMask+4,w,c
 10211  0020FC  1637               	andwf	calculateSetFilterMask@mask+1,f,c
 10212  0020FE  5017               	movf	??_calculateSetFilterMask+5,w,c
 10213  002100  1638               	andwf	calculateSetFilterMask@mask+2,f,c
 10214  002102  5018               	movf	??_calculateSetFilterMask+6,w,c
 10215  002104  1639               	andwf	calculateSetFilterMask@mask+3,f,c
 10216  002106  0012               	return	
 10217  002108                     __end_ofPL34:
 10218                           	opt stack 0
 10219  002108                     PL80:
 10220                           	opt stack 23
 10221  002108  0E01               	movlw	1
 10222  00210A  6E13               	movwf	(??_calculateSetFilterMask+1)& (0+255),c
 10223  00210C  6A14               	clrf	(??_calculateSetFilterMask+2)& (0+255),c
 10224  00210E  2A12               	incf	??_calculateSetFilterMask,f,c
 10225  002110  0012               	return	
 10226  002112                     __end_ofPL80:
 10227                           	opt stack 0
 10228  002112                     PL82:
 10229                           	opt stack 23
 10230  002112  90D8               	bcf	status,0,c
 10231  002114  3613               	rlcf	??_calculateSetFilterMask+1,f,c
 10232  002116  3614               	rlcf	??_calculateSetFilterMask+2,f,c
 10233  002118  0012               	return	
 10234  00211A                     __end_ofPL82:
 10235                           	opt stack 0
 10236                           tblptru	equ	0xFF8
 10237                           tblptrh	equ	0xFF7
 10238                           tblptrl	equ	0xFF6
 10239                           tablat	equ	0xFF5
 10240                           prodh	equ	0xFF4
 10241                           prodl	equ	0xFF3
 10242                           intcon	equ	0xFF2
 10243                           postinc0	equ	0xFEE
 10244                           wreg	equ	0xFE8
 10245                           indf1	equ	0xFE7
 10246                           fsr1h	equ	0xFE2
 10247                           fsr1l	equ	0xFE1
 10248                           indf2	equ	0xFDF
 10249                           postinc2	equ	0xFDE
 10250                           postdec2	equ	0xFDD
 10251                           plusw2	equ	0xFDB
 10252                           fsr2h	equ	0xFDA
 10253                           fsr2l	equ	0xFD9
 10254                           status	equ	0xFD8
 10255                           
 10256 ;; *************** function _SendInformationEvent *****************
 10257 ;; Defined at:
 10258 ;;		line 1576 in file "../main.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  idx             1    wreg     unsigned char 
 10261 ;;  eventClass      1   20[BANK0 ] unsigned char 
 10262 ;;  eventTypeId     1   21[BANK0 ] unsigned char 
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;  idx             1   79[COMRAM] unsigned char 
 10265 ;;  data            3   76[COMRAM] unsigned char [3]
 10266 ;; Return value:  Size  Location     Type
 10267 ;;		None               void
 10268 ;; Registers used:
 10269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10270 ;; Tracked objects:
 10271 ;;		On entry : F/0
 10272 ;;		On exit  : F/0
 10273 ;;		Unchanged: 0/0
 10274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10275 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10276 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10277 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10278 ;;      Totals:         6       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10279 ;;Total ram usage:        8 bytes
 10280 ;; Hardware stack levels used:    1
 10281 ;; Hardware stack levels required when called:    6
 10282 ;; This function calls:
 10283 ;;		_readEEPROM
 10284 ;;		_sendVSCPFrame
 10285 ;; This function is called by:
 10286 ;;		_doApplicationOneSecondWork
 10287 ;;		_vscp_writeAppReg
 10288 ;;		_doActionOn
 10289 ;;		_doActionOff
 10290 ;;		_doActionStatus
 10291 ;;		_doActionToggle
 10292 ;; This function uses a non-reentrant model
 10293 ;;
 10294                           
 10295                           	psect	text26
 10296  003EA4                     __ptext26:
 10297                           	opt stack 0
 10298  003EA4                     _SendInformationEvent:
 10299                           	opt stack 22
 10300                           
 10301                           ;incstack = 0
 10302                           ;incstack = 0
 10303                           ;SendInformationEvent@idx stored from wreg
 10304  003EA4  CFE8 F050          	movff	wreg,SendInformationEvent@idx
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;main.c: 1577: uint8_t data[3];
 10308                           ;main.c: 1590: data[ 0 ] = idx;
 10309  003EA8  C050  F04D         	movff	SendInformationEvent@idx,SendInformationEvent@data
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;main.c: 1591: data[ 1 ] = readEEPROM( 0x43 + 50 + 2*idx );
 10313  003EAC  90D8               	bcf	status,0,c
 10314  003EAE  3450               	rlcf	SendInformationEvent@idx,w,c
 10315  003EB0  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10316  003EB2  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10317  003EB4  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10318  003EB6  0E75               	movlw	117
 10319  003EB8  244B               	addwf	??_SendInformationEvent,w,c
 10320  003EBA  6E08               	movwf	?_readEEPROM,c
 10321  003EBC  0E00               	movlw	0
 10322  003EBE  204C               	addwfc	??_SendInformationEvent+1,w,c
 10323  003EC0  6E09               	movwf	?_readEEPROM+1,c
 10324  003EC2  ECDB  F021         	call	_readEEPROM	;wreg free
 10325  003EC6  6E4E               	movwf	SendInformationEvent@data+1,c
 10326                           
 10327                           ;main.c: 1592: data[ 2 ] = readEEPROM( 0x43 + 51 + 2*idx );
 10328  003EC8  90D8               	bcf	status,0,c
 10329  003ECA  3450               	rlcf	SendInformationEvent@idx,w,c
 10330  003ECC  6E4B               	movwf	??_SendInformationEvent& (0+255),c
 10331  003ECE  6A4C               	clrf	(??_SendInformationEvent+1)& (0+255),c
 10332  003ED0  364C               	rlcf	(??_SendInformationEvent+1)& (0+255),f,c
 10333  003ED2  0E76               	movlw	118
 10334  003ED4  244B               	addwf	??_SendInformationEvent,w,c
 10335  003ED6  6E08               	movwf	?_readEEPROM,c
 10336  003ED8  0E00               	movlw	0
 10337  003EDA  204C               	addwfc	??_SendInformationEvent+1,w,c
 10338  003EDC  6E09               	movwf	?_readEEPROM+1,c
 10339  003EDE  ECDB  F021         	call	_readEEPROM	;wreg free
 10340  003EE2  6E4F               	movwf	SendInformationEvent@data+2,c
 10341                           
 10342                           ;main.c: 1593: sendVSCPFrame( eventClass,
 10343                           ;main.c: 1594: eventTypeId,
 10344                           ;main.c: 1595: vscp_nickname,
 10345                           ;main.c: 1596: 0x03,
 10346                           ;main.c: 1597: 3,
 10347                           ;main.c: 1598: data );
 10348  003EE4  0100               	movlb	0	; () banked
 10349  003EE6  C0CA  F03F         	movff	SendInformationEvent@eventClass,?_sendVSCPFrame
 10350  003EEA  6A40               	clrf	?_sendVSCPFrame+1,c
 10351  003EEC  C0CB  F041         	movff	SendInformationEvent@eventTypeId,?_sendVSCPFrame+2
 10352  003EF0  C096  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 10353  003EF4  0E03               	movlw	3
 10354  003EF6  6E43               	movwf	?_sendVSCPFrame+4,c
 10355  003EF8  6E44               	movwf	?_sendVSCPFrame+5,c
 10356  003EFA  0E4D               	movlw	low SendInformationEvent@data
 10357  003EFC  6E45               	movwf	?_sendVSCPFrame+6,c
 10358  003EFE  0E00               	movlw	high SendInformationEvent@data
 10359  003F00  6E46               	movwf	?_sendVSCPFrame+7,c
 10360  003F02  0E0F               	movlw	15
 10361  003F04  6E46               	movwf	?_sendVSCPFrame+7,c
 10362  003F06  0E5F               	movlw	__accesstop+-1
 10363  003F08  6445               	cpfsgt	?_sendVSCPFrame+6,c
 10364  003F0A  6A46               	clrf	?_sendVSCPFrame+7,c
 10365  003F0C  EF01  F01E         	goto	_sendVSCPFrame	;wreg free
 10366  003F10                     __end_of_SendInformationEvent:
 10367                           	opt stack 0
 10368                           tblptru	equ	0xFF8
 10369                           tblptrh	equ	0xFF7
 10370                           tblptrl	equ	0xFF6
 10371                           tablat	equ	0xFF5
 10372                           prodh	equ	0xFF4
 10373                           prodl	equ	0xFF3
 10374                           intcon	equ	0xFF2
 10375                           postinc0	equ	0xFEE
 10376                           wreg	equ	0xFE8
 10377                           indf1	equ	0xFE7
 10378                           fsr1h	equ	0xFE2
 10379                           fsr1l	equ	0xFE1
 10380                           indf2	equ	0xFDF
 10381                           postinc2	equ	0xFDE
 10382                           postdec2	equ	0xFDD
 10383                           plusw2	equ	0xFDB
 10384                           fsr2h	equ	0xFDA
 10385                           fsr2l	equ	0xFD9
 10386                           status	equ	0xFD8
 10387                           
 10388 ;; *************** function _vscp_readRegister *****************
 10389 ;; Defined at:
 10390 ;;		line 553 in file "../../vscp_firmware/common/vscp_firmware.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;  reg             1    wreg     unsigned char 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  reg             1   28[COMRAM] unsigned char 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  1    wreg      unsigned char 
 10397 ;; Registers used:
 10398 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : F/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10407 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10408 ;;Total ram usage:        1 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    5
 10411 ;; This function calls:
 10412 ;;		_vscp_readAppReg
 10413 ;;		_vscp_readStdReg
 10414 ;; This function is called by:
 10415 ;;		_vscp_handleProtocolEvent
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           	psect	text27
 10420  00431C                     __ptext27:
 10421                           	opt stack 0
 10422  00431C                     _vscp_readRegister:
 10423                           	opt stack 23
 10424                           
 10425                           ; BSR set to: 0
 10426                           ;incstack = 0
 10427                           ;incstack = 0
 10428                           ;vscp_readRegister@reg stored from wreg
 10429  00431C  CFE8 F01D          	movff	wreg,vscp_readRegister@reg
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;vscp_firmware.c: 554: if (reg >= 0x80) {
 10433  004320  0E7F               	movlw	127
 10434  004322  641D               	cpfsgt	vscp_readRegister@reg,c
 10435  004324  D003               	goto	l8981
 10436                           
 10437                           ; BSR set to: 0
 10438                           ;vscp_firmware.c: 555: return vscp_readStdReg(reg);
 10439  004326  501D               	movf	vscp_readRegister@reg,w,c
 10440  004328  EFC6  F017         	goto	_vscp_readStdReg
 10441  00432C                     l8981:
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;vscp_firmware.c: 557: return vscp_readAppReg(reg);
 10445  00432C  501D               	movf	vscp_readRegister@reg,w,c
 10446  00432E  EFA6  F01D         	goto	_vscp_readAppReg
 10447  004332                     __end_of_vscp_readRegister:
 10448                           	opt stack 0
 10449                           tblptru	equ	0xFF8
 10450                           tblptrh	equ	0xFF7
 10451                           tblptrl	equ	0xFF6
 10452                           tablat	equ	0xFF5
 10453                           prodh	equ	0xFF4
 10454                           prodl	equ	0xFF3
 10455                           intcon	equ	0xFF2
 10456                           postinc0	equ	0xFEE
 10457                           wreg	equ	0xFE8
 10458                           indf1	equ	0xFE7
 10459                           fsr1h	equ	0xFE2
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           plusw2	equ	0xFDB
 10465                           fsr2h	equ	0xFDA
 10466                           fsr2l	equ	0xFD9
 10467                           status	equ	0xFD8
 10468                           
 10469 ;; *************** function _vscp_readStdReg *****************
 10470 ;; Defined at:
 10471 ;;		line 566 in file "../../vscp_firmware/common/vscp_firmware.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;  reg             1    wreg     unsigned char 
 10474 ;; Auto vars:     Size  Location     Type
 10475 ;;  reg             1   27[COMRAM] unsigned char 
 10476 ;;  code            4   20[COMRAM] unsigned long 
 10477 ;;  idx             1   25[COMRAM] unsigned char 
 10478 ;;  code            4   16[COMRAM] unsigned long 
 10479 ;;  idx             1   24[COMRAM] unsigned char 
 10480 ;;  rv              1   26[COMRAM] unsigned char 
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      unsigned char 
 10483 ;; Registers used:
 10484 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : F/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10491 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10492 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10493 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10494 ;;Total ram usage:       17 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    4
 10497 ;; This function calls:
 10498 ;;		_vscp_getMajorVersion
 10499 ;;		_vscp_getMinorVersion
 10500 ;;		_vscp_getSubMinorVersion
 10501 ;;		_vscp_getGUID
 10502 ;;		_vscp_getMDF_URL
 10503 ;;		_vscp_getUserID
 10504 ;;		_vscp_getManufacturerId
 10505 ;;		_vscp_getBootLoaderAlgorithm
 10506 ;;		_vscp_getBufferSize
 10507 ;;		_vscp_getFamilyCode
 10508 ;;		_vscp_getFamilyType
 10509 ;;		_vscp_getRegisterPagesUsed
 10510 ;; This function is called by:
 10511 ;;		_vscp_readRegister
 10512 ;;		_vscp_handleProtocolEvent
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           	psect	text28
 10517  002F8C                     __ptext28:
 10518                           	opt stack 0
 10519  002F8C                     _vscp_readStdReg:
 10520                           	opt stack 24
 10521                           
 10522                           ;incstack = 0
 10523                           ;incstack = 0
 10524                           ;vscp_readStdReg@reg stored from wreg
 10525  002F8C  CFE8 F01C          	movff	wreg,vscp_readStdReg@reg
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;vscp_firmware.c: 567: uint8_t rv = 0;
 10529  002F90  6A1B               	clrf	vscp_readStdReg@rv,c
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;vscp_firmware.c: 569: if (0x80 == reg) {
 10533  002F92  501C               	movf	vscp_readStdReg@reg,w,c
 10534  002F94  0A80               	xorlw	128
 10535  002F96  E104               	bnz	l8991
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;vscp_firmware.c: 572: rv = vscp_alarmstatus;
 10539  002F98  C091  F01B         	movff	_vscp_alarmstatus,vscp_readStdReg@rv
 10540                           
 10541                           ;vscp_firmware.c: 573: vscp_alarmstatus = 0x00;
 10542  002F9C  6B91               	clrf	_vscp_alarmstatus& (0+255),b
 10543                           
 10544                           ;vscp_firmware.c: 575: }
 10545  002F9E  D0B3               	goto	l9079
 10546  002FA0                     l8991:
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;vscp_firmware.c: 576: else if (0x81 == reg) {
 10550  002FA0  501C               	movf	vscp_readStdReg@reg,w,c
 10551  002FA2  0A81               	xorlw	129
 10552  002FA4  E102               	bnz	l8995
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;vscp_firmware.c: 579: rv = 1;
 10556  002FA6  0E01               	movlw	1
 10557  002FA8  D075               	goto	L36
 10558  002FAA                     l8995:
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;vscp_firmware.c: 582: else if (0x82 == reg) {
 10562  002FAA  501C               	movf	vscp_readStdReg@reg,w,c
 10563  002FAC  0A82               	xorlw	130
 10564  002FAE  E102               	bnz	l8999
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;vscp_firmware.c: 585: rv = 5;
 10568  002FB0  0E05               	movlw	5
 10569  002FB2  D070               	goto	L36
 10570  002FB4                     l8999:
 10571                           
 10572                           ; BSR set to: 0
 10573                           ;vscp_firmware.c: 588: else if (0x83 == reg) {
 10574  002FB4  501C               	movf	vscp_readStdReg@reg,w,c
 10575  002FB6  0A83               	xorlw	131
 10576  002FB8  E102               	bnz	l9003
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;vscp_firmware.c: 591: rv = 0;
 10580  002FBA  6A1B               	clrf	vscp_readStdReg@rv,c
 10581                           
 10582                           ;vscp_firmware.c: 593: }
 10583  002FBC  D0A4               	goto	l9079
 10584  002FBE                     l9003:
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;vscp_firmware.c: 594: else if (0x94 == reg) {
 10588  002FBE  501C               	movf	vscp_readStdReg@reg,w,c
 10589  002FC0  0A94               	xorlw	148
 10590  002FC2  E103               	bnz	l9007
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;vscp_firmware.c: 597: rv = vscp_getMajorVersion();
 10594  002FC4  EC17  F022         	call	_vscp_getMajorVersion	;wreg free
 10595  002FC8  D065               	goto	L36
 10596  002FCA                     l9007:
 10597                           
 10598                           ; BSR set to: 0
 10599                           ;vscp_firmware.c: 600: else if (0x95 == reg) {
 10600  002FCA  501C               	movf	vscp_readStdReg@reg,w,c
 10601  002FCC  0A95               	xorlw	149
 10602  002FCE  E103               	bnz	l9011
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;vscp_firmware.c: 603: rv = vscp_getMinorVersion();
 10606  002FD0  EC16  F022         	call	_vscp_getMinorVersion	;wreg free
 10607  002FD4  D05F               	goto	L36
 10608  002FD6                     l9011:
 10609                           
 10610                           ; BSR set to: 0
 10611                           ;vscp_firmware.c: 606: else if (0x96 == reg) {
 10612  002FD6  501C               	movf	vscp_readStdReg@reg,w,c
 10613  002FD8  0A96               	xorlw	150
 10614  002FDA  E103               	bnz	l9015
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;vscp_firmware.c: 609: rv = vscp_getSubMinorVersion();
 10618  002FDC  EC15  F022         	call	_vscp_getSubMinorVersion	;wreg free
 10619  002FE0  D059               	goto	L36
 10620  002FE2                     l9015:
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;vscp_firmware.c: 612: else if (reg < 0x89) {
 10624  002FE2  0E89               	movlw	137
 10625  002FE4  601C               	cpfslt	vscp_readStdReg@reg,c
 10626  002FE6  D005               	goto	l9019
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;vscp_firmware.c: 615: rv = vscp_getUserID(reg - 0x84);
 10630  002FE8  501C               	movf	vscp_readStdReg@reg,w,c
 10631  002FEA  0F7C               	addlw	124
 10632  002FEC  ECA3  F021         	call	_vscp_getUserID
 10633  002FF0  D051               	goto	L36
 10634  002FF2                     l9019:
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;vscp_firmware.c: 618: else if ((reg > 0x88) &&
 10638                           ;vscp_firmware.c: 619: (reg < 0x91)) {
 10639  002FF2  0E88               	movlw	136
 10640  002FF4  641C               	cpfsgt	vscp_readStdReg@reg,c
 10641  002FF6  D008               	goto	l9025
 10642                           
 10643                           ; BSR set to: 0
 10644  002FF8  0E91               	movlw	145
 10645  002FFA  601C               	cpfslt	vscp_readStdReg@reg,c
 10646  002FFC  D005               	goto	l9025
 10647                           
 10648                           ; BSR set to: 0
 10649                           ;vscp_firmware.c: 622: rv = vscp_getManufacturerId(reg - 0x89);
 10650  002FFE  501C               	movf	vscp_readStdReg@reg,w,c
 10651  003000  0F77               	addlw	119
 10652  003002  EC99  F021         	call	_vscp_getManufacturerId
 10653  003006  D046               	goto	L36
 10654  003008                     l9025:
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;vscp_firmware.c: 625: else if (0x91 == reg) {
 10658  003008  501C               	movf	vscp_readStdReg@reg,w,c
 10659  00300A  0A91               	xorlw	145
 10660  00300C  E103               	bnz	l9029
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;vscp_firmware.c: 628: rv = vscp_nickname;
 10664  00300E  C096  F01B         	movff	_vscp_nickname,vscp_readStdReg@rv
 10665                           
 10666                           ;vscp_firmware.c: 630: }
 10667  003012  D079               	goto	l9079
 10668  003014                     l9029:
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;vscp_firmware.c: 631: else if (0x93 == reg) {
 10672  003014  501C               	movf	vscp_readStdReg@reg,w,c
 10673  003016  0A93               	xorlw	147
 10674  003018  E103               	bnz	l9033
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;vscp_firmware.c: 634: rv = (vscp_page_select & 0xff);
 10678  00301A  C052  F01B         	movff	_vscp_page_select,vscp_readStdReg@rv
 10679                           
 10680                           ;vscp_firmware.c: 636: }
 10681  00301E  D073               	goto	l9079
 10682  003020                     l9033:
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;vscp_firmware.c: 638: else if (0x92 == reg) {
 10686  003020  501C               	movf	vscp_readStdReg@reg,w,c
 10687  003022  0A92               	xorlw	146
 10688  003024  E102               	bnz	l9037
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;vscp_firmware.c: 641: rv = (vscp_page_select >> 8) & 0xff;
 10692  003026  5053               	movf	_vscp_page_select+1,w,c
 10693  003028  D035               	goto	L36
 10694  00302A                     l9037:
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;vscp_firmware.c: 644: else if (0x97 == reg) {
 10698  00302A  501C               	movf	vscp_readStdReg@reg,w,c
 10699  00302C  0A97               	xorlw	151
 10700  00302E  E103               	bnz	l9041
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;vscp_firmware.c: 646: rv = vscp_getBootLoaderAlgorithm();
 10704  003030  EC14  F022         	call	_vscp_getBootLoaderAlgorithm	;wreg free
 10705  003034  D02F               	goto	L36
 10706  003036                     l9041:
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;vscp_firmware.c: 648: else if (0x98 == reg) {
 10710  003036  501C               	movf	vscp_readStdReg@reg,w,c
 10711  003038  0A98               	xorlw	152
 10712  00303A  E103               	bnz	l9045
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;vscp_firmware.c: 650: rv = vscp_getBufferSize();
 10716  00303C  EC13  F022         	call	_vscp_getBufferSize	;wreg free
 10717  003040  D029               	goto	L36
 10718  003042                     l9045:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;vscp_firmware.c: 652: else if (0x99 == reg) {
 10722  003042  501C               	movf	vscp_readStdReg@reg,w,c
 10723  003044  0A99               	xorlw	153
 10724  003046  E103               	bnz	l9049
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;vscp_firmware.c: 654: rv = vscp_getRegisterPagesUsed();
 10728  003048  EC12  F022         	call	_vscp_getRegisterPagesUsed	;wreg free
 10729  00304C  D023               	goto	L36
 10730  00304E                     l9049:
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;vscp_firmware.c: 656: else if ( ( reg >= 0x9A ) &&
 10734                           ;vscp_firmware.c: 657: ( reg < ( 0x9A + 4 ) ) ) {
 10735  00304E  0E99               	movlw	153
 10736  003050  641C               	cpfsgt	vscp_readStdReg@reg,c
 10737  003052  D022               	goto	l9059
 10738                           
 10739                           ; BSR set to: 0
 10740  003054  0E9E               	movlw	158
 10741  003056  601C               	cpfslt	vscp_readStdReg@reg,c
 10742  003058  D01F               	goto	l9059
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;vscp_firmware.c: 659: uint32_t code = vscp_getFamilyCode();
 10746  00305A  ECFC  F021         	call	_vscp_getFamilyCode	;wreg free
 10747  00305E  C00B  F014         	movff	?_vscp_getFamilyCode+3,vscp_readStdReg@code+3
 10748  003062  C00A  F013         	movff	?_vscp_getFamilyCode+2,vscp_readStdReg@code+2
 10749  003066  C009  F012         	movff	?_vscp_getFamilyCode+1,vscp_readStdReg@code+1
 10750  00306A  C008  F011         	movff	?_vscp_getFamilyCode,vscp_readStdReg@code
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;vscp_firmware.c: 660: uint8_t idx = reg - 0x9A;
 10754  00306E  501C               	movf	vscp_readStdReg@reg,w,c
 10755  003070  0F66               	addlw	102
 10756  003072  6E19               	movwf	vscp_readStdReg@idx,c
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;vscp_firmware.c: 661: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10760  003074  5019               	movf	vscp_readStdReg@idx,w,c
 10761  003076  D849               	call	PL38	;call to abstracted procedure
 10762  003078  C011  F00D         	movff	vscp_readStdReg@code,??_vscp_readStdReg+1
 10763  00307C  C012  F00E         	movff	vscp_readStdReg@code+1,??_vscp_readStdReg+2
 10764  003080  C013  F00F         	movff	vscp_readStdReg@code+2,??_vscp_readStdReg+3
 10765  003084  C014  F010         	movff	vscp_readStdReg@code+3,??_vscp_readStdReg+4
 10766  003088  2AE8               	incf	wreg,f,c
 10767  00308A  D001               	goto	u11050
 10768  00308C                     u11055:
 10769  00308C  D848               	call	PL76	;call to abstracted procedure
 10770  00308E                     u11050:
 10771  00308E  2EE8               	decfsz	wreg,f,c
 10772  003090  D7FD               	goto	u11055
 10773  003092  D024               	goto	L37
 10774  003094                     L36:
 10775  003094  6E1B               	movwf	vscp_readStdReg@rv,c
 10776                           
 10777                           ;vscp_firmware.c: 662: }
 10778  003096  D037               	goto	l9079
 10779  003098                     l9059:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;vscp_firmware.c: 663: else if ( ( reg >= 0x9E ) &&
 10783                           ;vscp_firmware.c: 664: ( reg < ( 0x9E + 4 ) ) ) {
 10784  003098  0E9D               	movlw	157
 10785  00309A  641C               	cpfsgt	vscp_readStdReg@reg,c
 10786  00309C  D021               	goto	l9069
 10787                           
 10788                           ; BSR set to: 0
 10789  00309E  0EA2               	movlw	162
 10790  0030A0  601C               	cpfslt	vscp_readStdReg@reg,c
 10791  0030A2  D01E               	goto	l9069
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;vscp_firmware.c: 666: uint32_t code = vscp_getFamilyType();
 10795  0030A4  ECF7  F021         	call	_vscp_getFamilyType	;wreg free
 10796  0030A8  C00B  F018         	movff	?_vscp_getFamilyType+3,vscp_readStdReg@code_1217+3
 10797  0030AC  C00A  F017         	movff	?_vscp_getFamilyType+2,vscp_readStdReg@code_1217+2
 10798  0030B0  C009  F016         	movff	?_vscp_getFamilyType+1,vscp_readStdReg@code_1217+1
 10799  0030B4  C008  F015         	movff	?_vscp_getFamilyType,vscp_readStdReg@code_1217
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;vscp_firmware.c: 667: uint8_t idx = reg - 0x9E;
 10803  0030B8  501C               	movf	vscp_readStdReg@reg,w,c
 10804  0030BA  0F62               	addlw	98
 10805  0030BC  6E1A               	movwf	vscp_readStdReg@idx_1218,c
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;vscp_firmware.c: 668: rv = code >> ( ( ( 3 - idx ) * 8 ) & 0xff );
 10809  0030BE  501A               	movf	vscp_readStdReg@idx_1218,w,c
 10810  0030C0  D824               	call	PL38	;call to abstracted procedure
 10811  0030C2  C015  F00D         	movff	vscp_readStdReg@code_1217,??_vscp_readStdReg+1
 10812  0030C6  C016  F00E         	movff	vscp_readStdReg@code_1217+1,??_vscp_readStdReg+2
 10813  0030CA  C017  F00F         	movff	vscp_readStdReg@code_1217+2,??_vscp_readStdReg+3
 10814  0030CE  C018  F010         	movff	vscp_readStdReg@code_1217+3,??_vscp_readStdReg+4
 10815  0030D2  2AE8               	incf	wreg,f,c
 10816  0030D4  D001               	goto	u11080
 10817  0030D6                     u11085:
 10818  0030D6  D823               	call	PL76	;call to abstracted procedure
 10819  0030D8                     u11080:
 10820  0030D8  2EE8               	decfsz	wreg,f,c
 10821  0030DA  D7FD               	goto	u11085
 10822  0030DC                     L37:
 10823  0030DC  500D               	movf	??_vscp_readStdReg+1,w,c
 10824  0030DE  D7DA               	goto	L36
 10825  0030E0                     l9069:
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;vscp_firmware.c: 670: else if ((reg > (0xD0 - 1)) &&
 10829                           ;vscp_firmware.c: 671: (reg < 0xE0)) {
 10830  0030E0  0ECF               	movlw	207
 10831  0030E2  641C               	cpfsgt	vscp_readStdReg@reg,c
 10832  0030E4  D008               	goto	l9075
 10833                           
 10834                           ; BSR set to: 0
 10835  0030E6  0EE0               	movlw	224
 10836  0030E8  601C               	cpfslt	vscp_readStdReg@reg,c
 10837  0030EA  D005               	goto	l9075
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;vscp_firmware.c: 674: rv = vscp_getGUID(reg - 0xD0);
 10841  0030EC  501C               	movf	vscp_readStdReg@reg,w,c
 10842  0030EE  0F30               	addlw	48
 10843  0030F0  ECAD  F021         	call	_vscp_getGUID
 10844  0030F4  D7CF               	goto	L36
 10845  0030F6                     l9075:
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;vscp_firmware.c: 677: else if ( reg >= 0xE0 ) {
 10849  0030F6  0EDF               	movlw	223
 10850  0030F8  641C               	cpfsgt	vscp_readStdReg@reg,c
 10851  0030FA  D005               	goto	l9079
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;vscp_firmware.c: 680: rv = vscp_getMDF_URL(reg - 0xE0);
 10855  0030FC  501C               	movf	vscp_readStdReg@reg,w,c
 10856  0030FE  0F20               	addlw	32
 10857  003100  EC5B  F021         	call	_vscp_getMDF_URL
 10858  003104  D7C7               	goto	L36
 10859  003106                     l9079:
 10860                           
 10861                           ;vscp_firmware.c: 682: }
 10862                           ;vscp_firmware.c: 684: return rv;
 10863  003106  501B               	movf	vscp_readStdReg@rv,w,c
 10864  003108  0012               	return	
 10865  00310A                     __end_of_vscp_readStdReg:
 10866                           	opt stack 0
 10867  00310A                     PL38:
 10868                           	opt stack 24
 10869  00310A  0803               	sublw	3
 10870  00310C  6E0C               	movwf	??_vscp_readStdReg& (0+255),c
 10871  00310E  90D8               	bcf	status,0,c
 10872  003110  360C               	rlcf	??_vscp_readStdReg,f,c
 10873  003112  90D8               	bcf	status,0,c
 10874  003114  360C               	rlcf	??_vscp_readStdReg,f,c
 10875  003116  90D8               	bcf	status,0,c
 10876  003118  360C               	rlcf	??_vscp_readStdReg,f,c
 10877  00311A  500C               	movf	??_vscp_readStdReg,w,c
 10878  00311C  0012               	return	
 10879  00311E                     __end_ofPL38:
 10880                           	opt stack 0
 10881  00311E                     PL76:
 10882                           	opt stack 24
 10883  00311E  90D8               	bcf	status,0,c
 10884  003120  3210               	rrcf	??_vscp_readStdReg+4,f,c
 10885  003122  320F               	rrcf	??_vscp_readStdReg+3,f,c
 10886  003124  320E               	rrcf	??_vscp_readStdReg+2,f,c
 10887  003126  320D               	rrcf	??_vscp_readStdReg+1,f,c
 10888  003128  0012               	return	
 10889  00312A                     __end_ofPL76:
 10890                           	opt stack 0
 10891                           tblptru	equ	0xFF8
 10892                           tblptrh	equ	0xFF7
 10893                           tblptrl	equ	0xFF6
 10894                           tablat	equ	0xFF5
 10895                           prodh	equ	0xFF4
 10896                           prodl	equ	0xFF3
 10897                           intcon	equ	0xFF2
 10898                           postinc0	equ	0xFEE
 10899                           wreg	equ	0xFE8
 10900                           indf1	equ	0xFE7
 10901                           fsr1h	equ	0xFE2
 10902                           fsr1l	equ	0xFE1
 10903                           indf2	equ	0xFDF
 10904                           postinc2	equ	0xFDE
 10905                           postdec2	equ	0xFDD
 10906                           plusw2	equ	0xFDB
 10907                           fsr2h	equ	0xFDA
 10908                           fsr2l	equ	0xFD9
 10909                           status	equ	0xFD8
 10910                           
 10911 ;; *************** function _vscp_getRegisterPagesUsed *****************
 10912 ;; Defined at:
 10913 ;;		line 2503 in file "../main.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;                  1    wreg      unsigned char 
 10920 ;; Registers used:
 10921 ;;		wreg
 10922 ;; Tracked objects:
 10923 ;;		On entry : F/0
 10924 ;;		On exit  : F/0
 10925 ;;		Unchanged: F/0
 10926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    2
 10934 ;; This function calls:
 10935 ;;		Nothing
 10936 ;; This function is called by:
 10937 ;;		_vscp_readStdReg
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           	psect	text29
 10942  004424                     __ptext29:
 10943                           	opt stack 0
 10944  004424                     _vscp_getRegisterPagesUsed:
 10945                           	opt stack 25
 10946                           
 10947                           ; BSR set to: 0
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;main.c: 2504: return 1;
 10951                           
 10952                           ;incstack = 0
 10953                           ;incstack = 0
 10954  004424  0C01               	retlw	1
 10955  004426                     __end_of_vscp_getRegisterPagesUsed:
 10956                           	opt stack 0
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           postinc0	equ	0xFEE
 10965                           wreg	equ	0xFE8
 10966                           indf1	equ	0xFE7
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           plusw2	equ	0xFDB
 10973                           fsr2h	equ	0xFDA
 10974                           fsr2l	equ	0xFD9
 10975                           status	equ	0xFD8
 10976                           
 10977 ;; *************** function _vscp_getFamilyType *****************
 10978 ;; Defined at:
 10979 ;;		line 2484 in file "../main.c"
 10980 ;; Parameters:    Size  Location     Type
 10981 ;;		None
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;		None
 10984 ;; Return value:  Size  Location     Type
 10985 ;;                  4    7[COMRAM] unsigned long 
 10986 ;; Registers used:
 10987 ;;		None
 10988 ;; Tracked objects:
 10989 ;;		On entry : F/0
 10990 ;;		On exit  : F/0
 10991 ;;		Unchanged: F/0
 10992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10993 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10996 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10997 ;;Total ram usage:        4 bytes
 10998 ;; Hardware stack levels used:    1
 10999 ;; Hardware stack levels required when called:    2
 11000 ;; This function calls:
 11001 ;;		Nothing
 11002 ;; This function is called by:
 11003 ;;		_vscp_readStdReg
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text30
 11008  0043EE                     __ptext30:
 11009                           	opt stack 0
 11010  0043EE                     _vscp_getFamilyType:
 11011                           	opt stack 25
 11012                           
 11013                           ; BSR set to: 0
 11014                           ;main.c: 2485: return 0;
 11015                           
 11016                           ; BSR set to: 0
 11017                           ;incstack = 0
 11018                           ;incstack = 0
 11019  0043EE  6A08               	clrf	?_vscp_getFamilyType,c
 11020  0043F0  6A09               	clrf	?_vscp_getFamilyType+1,c
 11021  0043F2  6A0A               	clrf	?_vscp_getFamilyType+2,c
 11022  0043F4  6A0B               	clrf	?_vscp_getFamilyType+3,c
 11023                           
 11024                           ; BSR set to: 0
 11025  0043F6  0012               	return	
 11026  0043F8                     __end_of_vscp_getFamilyType:
 11027                           	opt stack 0
 11028                           tblptru	equ	0xFF8
 11029                           tblptrh	equ	0xFF7
 11030                           tblptrl	equ	0xFF6
 11031                           tablat	equ	0xFF5
 11032                           prodh	equ	0xFF4
 11033                           prodl	equ	0xFF3
 11034                           intcon	equ	0xFF2
 11035                           postinc0	equ	0xFEE
 11036                           wreg	equ	0xFE8
 11037                           indf1	equ	0xFE7
 11038                           fsr1h	equ	0xFE2
 11039                           fsr1l	equ	0xFE1
 11040                           indf2	equ	0xFDF
 11041                           postinc2	equ	0xFDE
 11042                           postdec2	equ	0xFDD
 11043                           plusw2	equ	0xFDB
 11044                           fsr2h	equ	0xFDA
 11045                           fsr2l	equ	0xFD9
 11046                           status	equ	0xFD8
 11047                           
 11048 ;; *************** function _vscp_getFamilyCode *****************
 11049 ;; Defined at:
 11050 ;;		line 2475 in file "../main.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;		None
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;		None
 11055 ;; Return value:  Size  Location     Type
 11056 ;;                  4    7[COMRAM] unsigned long 
 11057 ;; Registers used:
 11058 ;;		None
 11059 ;; Tracked objects:
 11060 ;;		On entry : F/0
 11061 ;;		On exit  : F/0
 11062 ;;		Unchanged: F/0
 11063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11067 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11068 ;;Total ram usage:        4 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    2
 11071 ;; This function calls:
 11072 ;;		Nothing
 11073 ;; This function is called by:
 11074 ;;		_vscp_readStdReg
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           	psect	text31
 11079  0043F8                     __ptext31:
 11080                           	opt stack 0
 11081  0043F8                     _vscp_getFamilyCode:
 11082                           	opt stack 25
 11083                           
 11084                           ; BSR set to: 0
 11085                           ;main.c: 2476: return 0L;
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;incstack = 0
 11089                           ;incstack = 0
 11090  0043F8  6A08               	clrf	?_vscp_getFamilyCode,c
 11091  0043FA  6A09               	clrf	?_vscp_getFamilyCode+1,c
 11092  0043FC  6A0A               	clrf	?_vscp_getFamilyCode+2,c
 11093  0043FE  6A0B               	clrf	?_vscp_getFamilyCode+3,c
 11094                           
 11095                           ; BSR set to: 0
 11096  004400  0012               	return	
 11097  004402                     __end_of_vscp_getFamilyCode:
 11098                           	opt stack 0
 11099                           tblptru	equ	0xFF8
 11100                           tblptrh	equ	0xFF7
 11101                           tblptrl	equ	0xFF6
 11102                           tablat	equ	0xFF5
 11103                           prodh	equ	0xFF4
 11104                           prodl	equ	0xFF3
 11105                           intcon	equ	0xFF2
 11106                           postinc0	equ	0xFEE
 11107                           wreg	equ	0xFE8
 11108                           indf1	equ	0xFE7
 11109                           fsr1h	equ	0xFE2
 11110                           fsr1l	equ	0xFE1
 11111                           indf2	equ	0xFDF
 11112                           postinc2	equ	0xFDE
 11113                           postdec2	equ	0xFDD
 11114                           plusw2	equ	0xFDB
 11115                           fsr2h	equ	0xFDA
 11116                           fsr2l	equ	0xFD9
 11117                           status	equ	0xFD8
 11118                           
 11119 ;; *************** function _vscp_getBufferSize *****************
 11120 ;; Defined at:
 11121 ;;		line 2336 in file "../main.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;		None
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      unsigned char 
 11128 ;; Registers used:
 11129 ;;		wreg
 11130 ;; Tracked objects:
 11131 ;;		On entry : F/0
 11132 ;;		On exit  : F/0
 11133 ;;		Unchanged: F/0
 11134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11139 ;;Total ram usage:        0 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    2
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_vscp_readStdReg
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text32
 11150  004426                     __ptext32:
 11151                           	opt stack 0
 11152  004426                     _vscp_getBufferSize:
 11153                           	opt stack 25
 11154                           
 11155                           ; BSR set to: 0
 11156                           
 11157                           ; BSR set to: 0
 11158                           ;main.c: 2337: return 8;
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;incstack = 0
 11162                           ;incstack = 0
 11163  004426  0C08               	retlw	8
 11164  004428                     __end_of_vscp_getBufferSize:
 11165                           	opt stack 0
 11166                           tblptru	equ	0xFF8
 11167                           tblptrh	equ	0xFF7
 11168                           tblptrl	equ	0xFF6
 11169                           tablat	equ	0xFF5
 11170                           prodh	equ	0xFF4
 11171                           prodl	equ	0xFF3
 11172                           intcon	equ	0xFF2
 11173                           postinc0	equ	0xFEE
 11174                           wreg	equ	0xFE8
 11175                           indf1	equ	0xFE7
 11176                           fsr1h	equ	0xFE2
 11177                           fsr1l	equ	0xFE1
 11178                           indf2	equ	0xFDF
 11179                           postinc2	equ	0xFDE
 11180                           postdec2	equ	0xFDD
 11181                           plusw2	equ	0xFDB
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function _vscp_getBootLoaderAlgorithm *****************
 11187 ;; Defined at:
 11188 ;;		line 2327 in file "../main.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;		None
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;		None
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  1    wreg      unsigned char 
 11195 ;; Registers used:
 11196 ;;		wreg
 11197 ;; Tracked objects:
 11198 ;;		On entry : F/0
 11199 ;;		On exit  : F/0
 11200 ;;		Unchanged: F/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11206 ;;Total ram usage:        0 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    2
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_vscp_readStdReg
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text33
 11217  004428                     __ptext33:
 11218                           	opt stack 0
 11219  004428                     _vscp_getBootLoaderAlgorithm:
 11220                           	opt stack 25
 11221                           
 11222                           ; BSR set to: 0
 11223                           
 11224                           ; BSR set to: 0
 11225                           ;main.c: 2328: return 0x01;
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;incstack = 0
 11229                           ;incstack = 0
 11230  004428  0C01               	retlw	1
 11231  00442A                     __end_of_vscp_getBootLoaderAlgorithm:
 11232                           	opt stack 0
 11233                           tblptru	equ	0xFF8
 11234                           tblptrh	equ	0xFF7
 11235                           tblptrl	equ	0xFF6
 11236                           tablat	equ	0xFF5
 11237                           prodh	equ	0xFF4
 11238                           prodl	equ	0xFF3
 11239                           intcon	equ	0xFF2
 11240                           postinc0	equ	0xFEE
 11241                           wreg	equ	0xFE8
 11242                           indf1	equ	0xFE7
 11243                           fsr1h	equ	0xFE2
 11244                           fsr1l	equ	0xFE1
 11245                           indf2	equ	0xFDF
 11246                           postinc2	equ	0xFDE
 11247                           postdec2	equ	0xFDD
 11248                           plusw2	equ	0xFDB
 11249                           fsr2h	equ	0xFDA
 11250                           fsr2l	equ	0xFD9
 11251                           status	equ	0xFD8
 11252                           
 11253 ;; *************** function _vscp_getManufacturerId *****************
 11254 ;; Defined at:
 11255 ;;		line 2318 in file "../main.c"
 11256 ;; Parameters:    Size  Location     Type
 11257 ;;  idx             1    wreg     unsigned char 
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;  idx             1   10[COMRAM] unsigned char 
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  1    wreg      unsigned char 
 11262 ;; Registers used:
 11263 ;;		wreg, status,2, status,0, cstack
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11272 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11273 ;;Total ram usage:        1 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    3
 11276 ;; This function calls:
 11277 ;;		_readEEPROM
 11278 ;; This function is called by:
 11279 ;;		_vscp_readStdReg
 11280 ;;		_vscp_writeStdReg
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           	psect	text34
 11285  004332                     __ptext34:
 11286                           	opt stack 0
 11287  004332                     _vscp_getManufacturerId:
 11288                           	opt stack 24
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;incstack = 0
 11292                           ;incstack = 0
 11293                           ;vscp_getManufacturerId@idx stored from wreg
 11294  004332  CFE8 F00B          	movff	wreg,vscp_getManufacturerId@idx
 11295                           
 11296                           ;main.c: 2319: return readEEPROM( 0x0B + idx );
 11297  004336  0E0B               	movlw	11
 11298  004338  240B               	addwf	vscp_getManufacturerId@idx,w,c
 11299  00433A  6E08               	movwf	?_readEEPROM,c
 11300  00433C  6A09               	clrf	?_readEEPROM+1,c
 11301  00433E  0E00               	movlw	0
 11302  004340  2209               	addwfc	?_readEEPROM+1,f,c
 11303  004342  EFDB  F021         	goto	_readEEPROM	;wreg free
 11304  004346                     __end_of_vscp_getManufacturerId:
 11305                           	opt stack 0
 11306                           tblptru	equ	0xFF8
 11307                           tblptrh	equ	0xFF7
 11308                           tblptrl	equ	0xFF6
 11309                           tablat	equ	0xFF5
 11310                           prodh	equ	0xFF4
 11311                           prodl	equ	0xFF3
 11312                           intcon	equ	0xFF2
 11313                           postinc0	equ	0xFEE
 11314                           wreg	equ	0xFE8
 11315                           indf1	equ	0xFE7
 11316                           fsr1h	equ	0xFE2
 11317                           fsr1l	equ	0xFE1
 11318                           indf2	equ	0xFDF
 11319                           postinc2	equ	0xFDE
 11320                           postdec2	equ	0xFDD
 11321                           plusw2	equ	0xFDB
 11322                           fsr2h	equ	0xFDA
 11323                           fsr2l	equ	0xFD9
 11324                           status	equ	0xFD8
 11325                           
 11326 ;; *************** function _vscp_getUserID *****************
 11327 ;; Defined at:
 11328 ;;		line 2298 in file "../main.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;  idx             1    wreg     unsigned char 
 11331 ;; Auto vars:     Size  Location     Type
 11332 ;;  idx             1   10[COMRAM] unsigned char 
 11333 ;; Return value:  Size  Location     Type
 11334 ;;                  1    wreg      unsigned char 
 11335 ;; Registers used:
 11336 ;;		wreg, status,2, status,0, cstack
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/0
 11339 ;;		On exit  : 0/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11345 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11346 ;;Total ram usage:        1 bytes
 11347 ;; Hardware stack levels used:    1
 11348 ;; Hardware stack levels required when called:    3
 11349 ;; This function calls:
 11350 ;;		_readEEPROM
 11351 ;; This function is called by:
 11352 ;;		_vscp_readStdReg
 11353 ;;		_vscp_writeStdReg
 11354 ;; This function uses a non-reentrant model
 11355 ;;
 11356                           
 11357                           	psect	text35
 11358  004346                     __ptext35:
 11359                           	opt stack 0
 11360  004346                     _vscp_getUserID:
 11361                           	opt stack 24
 11362                           
 11363                           ;incstack = 0
 11364                           ;incstack = 0
 11365                           ;vscp_getUserID@idx stored from wreg
 11366  004346  CFE8 F00B          	movff	wreg,vscp_getUserID@idx
 11367                           
 11368                           ;main.c: 2299: return readEEPROM( 0x06 + idx );
 11369  00434A  0E06               	movlw	6
 11370  00434C  240B               	addwf	vscp_getUserID@idx,w,c
 11371  00434E  6E08               	movwf	?_readEEPROM,c
 11372  004350  6A09               	clrf	?_readEEPROM+1,c
 11373  004352  0E00               	movlw	0
 11374  004354  2209               	addwfc	?_readEEPROM+1,f,c
 11375  004356  EFDB  F021         	goto	_readEEPROM	;wreg free
 11376  00435A                     __end_of_vscp_getUserID:
 11377                           	opt stack 0
 11378                           tblptru	equ	0xFF8
 11379                           tblptrh	equ	0xFF7
 11380                           tblptrl	equ	0xFF6
 11381                           tablat	equ	0xFF5
 11382                           prodh	equ	0xFF4
 11383                           prodl	equ	0xFF3
 11384                           intcon	equ	0xFF2
 11385                           postinc0	equ	0xFEE
 11386                           wreg	equ	0xFE8
 11387                           indf1	equ	0xFE7
 11388                           fsr1h	equ	0xFE2
 11389                           fsr1l	equ	0xFE1
 11390                           indf2	equ	0xFDF
 11391                           postinc2	equ	0xFDE
 11392                           postdec2	equ	0xFDD
 11393                           plusw2	equ	0xFDB
 11394                           fsr2h	equ	0xFDA
 11395                           fsr2l	equ	0xFD9
 11396                           status	equ	0xFD8
 11397                           
 11398 ;; *************** function _vscp_getMDF_URL *****************
 11399 ;; Defined at:
 11400 ;;		line 2289 in file "../main.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;  idx             1    wreg     unsigned char 
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;  idx             1    8[COMRAM] unsigned char 
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      unsigned char 
 11407 ;; Registers used:
 11408 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11409 ;; Tracked objects:
 11410 ;;		On entry : F/0
 11411 ;;		On exit  : F/0
 11412 ;;		Unchanged: F/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11417 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11418 ;;Total ram usage:        2 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:    2
 11421 ;; This function calls:
 11422 ;;		Nothing
 11423 ;; This function is called by:
 11424 ;;		_vscp_readStdReg
 11425 ;;		_vscp_handleProtocolEvent
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           	psect	text36
 11430  0042B6                     __ptext36:
 11431                           	opt stack 0
 11432  0042B6                     _vscp_getMDF_URL:
 11433                           	opt stack 25
 11434                           
 11435                           ;incstack = 0
 11436                           ;incstack = 0
 11437                           ;vscp_getMDF_URL@idx stored from wreg
 11438  0042B6  CFE8 F009          	movff	wreg,vscp_getMDF_URL@idx
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;main.c: 2290: return vscp_deviceURL[ idx ];
 11442  0042BA  5009               	movf	vscp_getMDF_URL@idx,w,c
 11443  0042BC  0F00               	addlw	low _vscp_deviceURL
 11444  0042BE  6E08               	movwf	??_vscp_getMDF_URL& (0+255),c
 11445  0042C0  C008  FFF6         	movff	??_vscp_getMDF_URL,tblptrl
 11446  0042C4  0E0F               	movlw	high __smallconst
 11447  0042C6  6EF7               	movwf	tblptrh,c
 11448  0042C8  0E00               	movlw	low (__smallconst shr (0+16))
 11449  0042CA  6EF8               	movwf	tblptru,c
 11450  0042CC  0008               	tblrd		*
 11451  0042CE  50F5               	movf	tablat,w,c
 11452                           
 11453                           ; BSR set to: 0
 11454  0042D0  0012               	return	
 11455  0042D2                     __end_of_vscp_getMDF_URL:
 11456                           	opt stack 0
 11457                           tblptru	equ	0xFF8
 11458                           tblptrh	equ	0xFF7
 11459                           tblptrl	equ	0xFF6
 11460                           tablat	equ	0xFF5
 11461                           prodh	equ	0xFF4
 11462                           prodl	equ	0xFF3
 11463                           intcon	equ	0xFF2
 11464                           postinc0	equ	0xFEE
 11465                           wreg	equ	0xFE8
 11466                           indf1	equ	0xFE7
 11467                           fsr1h	equ	0xFE2
 11468                           fsr1l	equ	0xFE1
 11469                           indf2	equ	0xFDF
 11470                           postinc2	equ	0xFDE
 11471                           postdec2	equ	0xFDD
 11472                           plusw2	equ	0xFDB
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function _vscp_getGUID *****************
 11478 ;; Defined at:
 11479 ;;		line 2277 in file "../main.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  idx             1    wreg     unsigned char 
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;  idx             1   10[COMRAM] unsigned char 
 11484 ;; Return value:  Size  Location     Type
 11485 ;;                  1    wreg      unsigned char 
 11486 ;; Registers used:
 11487 ;;		wreg, status,2, status,0, cstack
 11488 ;; Tracked objects:
 11489 ;;		On entry : 0/0
 11490 ;;		On exit  : 0/0
 11491 ;;		Unchanged: 0/0
 11492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11497 ;;Total ram usage:        1 bytes
 11498 ;; Hardware stack levels used:    1
 11499 ;; Hardware stack levels required when called:    3
 11500 ;; This function calls:
 11501 ;;		_readEEPROM
 11502 ;; This function is called by:
 11503 ;;		_vscp_readStdReg
 11504 ;;		_vscp_writeStdReg
 11505 ;;		_vscp_handleProtocolEvent
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           	psect	text37
 11510  00435A                     __ptext37:
 11511                           	opt stack 0
 11512  00435A                     _vscp_getGUID:
 11513                           	opt stack 24
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;incstack = 0
 11517                           ;incstack = 0
 11518                           ;vscp_getGUID@idx stored from wreg
 11519  00435A  CFE8 F00B          	movff	wreg,vscp_getGUID@idx
 11520                           
 11521                           ;main.c: 2278: return readEEPROM( 0x13 + idx );
 11522  00435E  0E13               	movlw	19
 11523  004360  240B               	addwf	vscp_getGUID@idx,w,c
 11524  004362  6E08               	movwf	?_readEEPROM,c
 11525  004364  6A09               	clrf	?_readEEPROM+1,c
 11526  004366  0E00               	movlw	0
 11527  004368  2209               	addwfc	?_readEEPROM+1,f,c
 11528  00436A  EFDB  F021         	goto	_readEEPROM	;wreg free
 11529  00436E                     __end_of_vscp_getGUID:
 11530                           	opt stack 0
 11531                           tblptru	equ	0xFF8
 11532                           tblptrh	equ	0xFF7
 11533                           tblptrl	equ	0xFF6
 11534                           tablat	equ	0xFF5
 11535                           prodh	equ	0xFF4
 11536                           prodl	equ	0xFF3
 11537                           intcon	equ	0xFF2
 11538                           postinc0	equ	0xFEE
 11539                           wreg	equ	0xFE8
 11540                           indf1	equ	0xFE7
 11541                           fsr1h	equ	0xFE2
 11542                           fsr1l	equ	0xFE1
 11543                           indf2	equ	0xFDF
 11544                           postinc2	equ	0xFDE
 11545                           postdec2	equ	0xFDD
 11546                           plusw2	equ	0xFDB
 11547                           fsr2h	equ	0xFDA
 11548                           fsr2l	equ	0xFD9
 11549                           status	equ	0xFD8
 11550                           
 11551 ;; *************** function _vscp_getSubMinorVersion *****************
 11552 ;; Defined at:
 11553 ;;		line 2266 in file "../main.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;		None
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  1    wreg      unsigned char 
 11560 ;; Registers used:
 11561 ;;		wreg
 11562 ;; Tracked objects:
 11563 ;;		On entry : F/0
 11564 ;;		On exit  : F/0
 11565 ;;		Unchanged: F/0
 11566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11571 ;;Total ram usage:        0 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    2
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_vscp_readStdReg
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           	psect	text38
 11582  00442A                     __ptext38:
 11583                           	opt stack 0
 11584  00442A                     _vscp_getSubMinorVersion:
 11585                           	opt stack 25
 11586                           
 11587                           ; BSR set to: 0
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;main.c: 2267: return 0;
 11591                           
 11592                           ;incstack = 0
 11593                           ;incstack = 0
 11594  00442A  0C00               	retlw	0
 11595  00442C                     __end_of_vscp_getSubMinorVersion:
 11596                           	opt stack 0
 11597                           tblptru	equ	0xFF8
 11598                           tblptrh	equ	0xFF7
 11599                           tblptrl	equ	0xFF6
 11600                           tablat	equ	0xFF5
 11601                           prodh	equ	0xFF4
 11602                           prodl	equ	0xFF3
 11603                           intcon	equ	0xFF2
 11604                           postinc0	equ	0xFEE
 11605                           wreg	equ	0xFE8
 11606                           indf1	equ	0xFE7
 11607                           fsr1h	equ	0xFE2
 11608                           fsr1l	equ	0xFE1
 11609                           indf2	equ	0xFDF
 11610                           postinc2	equ	0xFDE
 11611                           postdec2	equ	0xFDD
 11612                           plusw2	equ	0xFDB
 11613                           fsr2h	equ	0xFDA
 11614                           fsr2l	equ	0xFD9
 11615                           status	equ	0xFD8
 11616                           
 11617 ;; *************** function _vscp_getMinorVersion *****************
 11618 ;; Defined at:
 11619 ;;		line 2257 in file "../main.c"
 11620 ;; Parameters:    Size  Location     Type
 11621 ;;		None
 11622 ;; Auto vars:     Size  Location     Type
 11623 ;;		None
 11624 ;; Return value:  Size  Location     Type
 11625 ;;                  1    wreg      unsigned char 
 11626 ;; Registers used:
 11627 ;;		wreg
 11628 ;; Tracked objects:
 11629 ;;		On entry : F/0
 11630 ;;		On exit  : F/0
 11631 ;;		Unchanged: F/0
 11632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11637 ;;Total ram usage:        0 bytes
 11638 ;; Hardware stack levels used:    1
 11639 ;; Hardware stack levels required when called:    2
 11640 ;; This function calls:
 11641 ;;		Nothing
 11642 ;; This function is called by:
 11643 ;;		_vscp_readStdReg
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           	psect	text39
 11648  00442C                     __ptext39:
 11649                           	opt stack 0
 11650  00442C                     _vscp_getMinorVersion:
 11651                           	opt stack 25
 11652                           
 11653                           ; BSR set to: 0
 11654                           
 11655                           ; BSR set to: 0
 11656                           ;main.c: 2258: return 1;
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;incstack = 0
 11660                           ;incstack = 0
 11661  00442C  0C01               	retlw	1
 11662  00442E                     __end_of_vscp_getMinorVersion:
 11663                           	opt stack 0
 11664                           tblptru	equ	0xFF8
 11665                           tblptrh	equ	0xFF7
 11666                           tblptrl	equ	0xFF6
 11667                           tablat	equ	0xFF5
 11668                           prodh	equ	0xFF4
 11669                           prodl	equ	0xFF3
 11670                           intcon	equ	0xFF2
 11671                           postinc0	equ	0xFEE
 11672                           wreg	equ	0xFE8
 11673                           indf1	equ	0xFE7
 11674                           fsr1h	equ	0xFE2
 11675                           fsr1l	equ	0xFE1
 11676                           indf2	equ	0xFDF
 11677                           postinc2	equ	0xFDE
 11678                           postdec2	equ	0xFDD
 11679                           plusw2	equ	0xFDB
 11680                           fsr2h	equ	0xFDA
 11681                           fsr2l	equ	0xFD9
 11682                           status	equ	0xFD8
 11683                           
 11684 ;; *************** function _vscp_getMajorVersion *****************
 11685 ;; Defined at:
 11686 ;;		line 2248 in file "../main.c"
 11687 ;; Parameters:    Size  Location     Type
 11688 ;;		None
 11689 ;; Auto vars:     Size  Location     Type
 11690 ;;		None
 11691 ;; Return value:  Size  Location     Type
 11692 ;;                  1    wreg      unsigned char 
 11693 ;; Registers used:
 11694 ;;		wreg
 11695 ;; Tracked objects:
 11696 ;;		On entry : F/0
 11697 ;;		On exit  : F/0
 11698 ;;		Unchanged: F/0
 11699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11704 ;;Total ram usage:        0 bytes
 11705 ;; Hardware stack levels used:    1
 11706 ;; Hardware stack levels required when called:    2
 11707 ;; This function calls:
 11708 ;;		Nothing
 11709 ;; This function is called by:
 11710 ;;		_vscp_readStdReg
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           	psect	text40
 11715  00442E                     __ptext40:
 11716                           	opt stack 0
 11717  00442E                     _vscp_getMajorVersion:
 11718                           	opt stack 25
 11719                           
 11720                           ; BSR set to: 0
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;main.c: 2249: return 1;
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;incstack = 0
 11727                           ;incstack = 0
 11728  00442E  0C01               	retlw	1
 11729  004430                     __end_of_vscp_getMajorVersion:
 11730                           	opt stack 0
 11731                           tblptru	equ	0xFF8
 11732                           tblptrh	equ	0xFF7
 11733                           tblptrl	equ	0xFF6
 11734                           tablat	equ	0xFF5
 11735                           prodh	equ	0xFF4
 11736                           prodl	equ	0xFF3
 11737                           intcon	equ	0xFF2
 11738                           postinc0	equ	0xFEE
 11739                           wreg	equ	0xFE8
 11740                           indf1	equ	0xFE7
 11741                           fsr1h	equ	0xFE2
 11742                           fsr1l	equ	0xFE1
 11743                           indf2	equ	0xFDF
 11744                           postinc2	equ	0xFDE
 11745                           postdec2	equ	0xFDD
 11746                           plusw2	equ	0xFDB
 11747                           fsr2h	equ	0xFDA
 11748                           fsr2l	equ	0xFD9
 11749                           status	equ	0xFD8
 11750                           
 11751 ;; *************** function _vscp_newNodeOnline *****************
 11752 ;; Defined at:
 11753 ;;		line 494 in file "../../vscp_firmware/common/vscp_firmware.c"
 11754 ;; Parameters:    Size  Location     Type
 11755 ;;		None
 11756 ;; Auto vars:     Size  Location     Type
 11757 ;;		None
 11758 ;; Return value:  Size  Location     Type
 11759 ;;		None               void
 11760 ;; Registers used:
 11761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11762 ;; Tracked objects:
 11763 ;;		On entry : F/0
 11764 ;;		On exit  : F/0
 11765 ;;		Unchanged: 0/0
 11766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11769 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11770 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11771 ;;Total ram usage:        1 bytes
 11772 ;; Hardware stack levels used:    1
 11773 ;; Hardware stack levels required when called:    7
 11774 ;; This function calls:
 11775 ;;		_vscp_sendEvent
 11776 ;; This function is called by:
 11777 ;;		_vscp_handleProtocolEvent
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           	psect	text41
 11782  0040B0                     __ptext41:
 11783                           	opt stack 0
 11784  0040B0                     _vscp_newNodeOnline:
 11785                           	opt stack 21
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;vscp_firmware.c: 495: if ((1 == (vscp_imsg.flags & 0x0f)) &&
 11789                           ;vscp_firmware.c: 496: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;incstack = 0
 11793                           ;incstack = 0
 11794  0040B0  C09B  F04C         	movff	_vscp_imsg,??_vscp_newNodeOnline
 11795  0040B4  0E0F               	movlw	15
 11796  0040B6  164C               	andwf	??_vscp_newNodeOnline,f,c
 11797  0040B8  044C               	decf	??_vscp_newNodeOnline,w,c
 11798  0040BA  A4D8               	btfss	status,2,c
 11799  0040BC  0012               	return	
 11800                           
 11801                           ; BSR set to: 0
 11802  0040BE  5196               	movf	_vscp_nickname& (0+255),w,b
 11803  0040C0  EE20  F0A1         	lfsr	2,_vscp_imsg+6
 11804  0040C4  62DF               	cpfseq	indf2,c
 11805  0040C6  0012               	return	
 11806                           
 11807                           ; BSR set to: 0
 11808                           ;vscp_firmware.c: 502: vscp_omsg.flags = 0x80;
 11809  0040C8  0E80               	movlw	128
 11810  0040CA  6FA9               	movwf	_vscp_omsg& (0+255),b
 11811                           
 11812                           ; BSR set to: 0
 11813                           ;vscp_firmware.c: 503: vscp_omsg.priority = 0x00;
 11814  0040CC  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;vscp_firmware.c: 504: vscp_omsg.vscp_class = 0;
 11818  0040CE  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 11819  0040D0  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 11820                           
 11821                           ;vscp_firmware.c: 505: vscp_omsg.vscp_type = 3;
 11822  0040D2  0E03               	movlw	3
 11823  0040D4  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;vscp_firmware.c: 506: vscp_sendEvent();
 11827  0040D6  EF94  F020         	goto	_vscp_sendEvent	;wreg free
 11828  0040DA                     __end_of_vscp_newNodeOnline:
 11829                           	opt stack 0
 11830                           tblptru	equ	0xFF8
 11831                           tblptrh	equ	0xFF7
 11832                           tblptrl	equ	0xFF6
 11833                           tablat	equ	0xFF5
 11834                           prodh	equ	0xFF4
 11835                           prodl	equ	0xFF3
 11836                           intcon	equ	0xFF2
 11837                           postinc0	equ	0xFEE
 11838                           wreg	equ	0xFE8
 11839                           indf1	equ	0xFE7
 11840                           fsr1h	equ	0xFE2
 11841                           fsr1l	equ	0xFE1
 11842                           indf2	equ	0xFDF
 11843                           postinc2	equ	0xFDE
 11844                           postdec2	equ	0xFDD
 11845                           plusw2	equ	0xFDB
 11846                           fsr2h	equ	0xFDA
 11847                           fsr2l	equ	0xFD9
 11848                           status	equ	0xFD8
 11849                           
 11850 ;; *************** function _vscp_handleDropNickname *****************
 11851 ;; Defined at:
 11852 ;;		line 430 in file "../../vscp_firmware/common/vscp_firmware.c"
 11853 ;; Parameters:    Size  Location     Type
 11854 ;;		None
 11855 ;; Auto vars:     Size  Location     Type
 11856 ;;  bytes           1   11[COMRAM] unsigned char 
 11857 ;; Return value:  Size  Location     Type
 11858 ;;		None               void
 11859 ;; Registers used:
 11860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11861 ;; Tracked objects:
 11862 ;;		On entry : F/0
 11863 ;;		On exit  : F/0
 11864 ;;		Unchanged: 0/0
 11865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11869 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11870 ;;Total ram usage:        1 bytes
 11871 ;; Hardware stack levels used:    1
 11872 ;; Hardware stack levels required when called:    5
 11873 ;; This function calls:
 11874 ;;		_vscp_init
 11875 ;;		_vscp_writeNicknamePermanent
 11876 ;; This function is called by:
 11877 ;;		_vscp_handleProtocolEvent
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           	psect	text42
 11882  004024                     __ptext42:
 11883                           	opt stack 0
 11884  004024                     _vscp_handleDropNickname:
 11885                           	opt stack 23
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;vscp_firmware.c: 431: uint8_t bytes = vscp_imsg.flags & 0x0f;
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;incstack = 0
 11892                           ;incstack = 0
 11893  004024  519B               	movf	_vscp_imsg& (0+255),w,b
 11894  004026  0B0F               	andlw	15
 11895  004028  6E0C               	movwf	vscp_handleDropNickname@bytes,c
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;vscp_firmware.c: 437: if ((bytes >= 1) && (vscp_nickname == vscp_imsg.data[ 0 ])) {
 11899  00402A  500C               	movf	vscp_handleDropNickname@bytes,w,c
 11900  00402C  B4D8               	btfsc	status,2,c
 11901  00402E  0012               	return	
 11902                           
 11903                           ; BSR set to: 0
 11904  004030  5196               	movf	_vscp_nickname& (0+255),w,b
 11905  004032  EE20  F0A1         	lfsr	2,_vscp_imsg+6
 11906  004036  62DF               	cpfseq	indf2,c
 11907  004038  0012               	return	
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;vscp_firmware.c: 469: if ((bytes == 1) || ((bytes > 1) && (vscp_imsg.data[1] == 0))) {
 11911  00403A  040C               	decf	vscp_handleDropNickname@bytes,w,c
 11912  00403C  E005               	bz	l1093
 11913                           
 11914                           ; BSR set to: 0
 11915  00403E  0E01               	movlw	1
 11916  004040  640C               	cpfsgt	vscp_handleDropNickname@bytes,c
 11917  004042  0C01               	retlw	1
 11918                           
 11919                           ; BSR set to: 0
 11920  004044  67A2               	tstfsz	(_vscp_imsg+7)& (0+255),b
 11921  004046  0C01               	retlw	1
 11922  004048                     l1093:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;vscp_firmware.c: 471: vscp_nickname = 0xff;
 11926  004048  6996               	setf	_vscp_nickname& (0+255),b
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;vscp_firmware.c: 472: vscp_writeNicknamePermanent(0xff);
 11930  00404A  0EFF               	movlw	255
 11931  00404C  ECC9  F021         	call	_vscp_writeNicknamePermanent
 11932                           
 11933                           ;vscp_firmware.c: 473: vscp_init();
 11934  004050  EFB0  F01F         	goto	_vscp_init	;wreg free
 11935  004054                     __end_of_vscp_handleDropNickname:
 11936                           	opt stack 0
 11937                           tblptru	equ	0xFF8
 11938                           tblptrh	equ	0xFF7
 11939                           tblptrl	equ	0xFF6
 11940                           tablat	equ	0xFF5
 11941                           prodh	equ	0xFF4
 11942                           prodl	equ	0xFF3
 11943                           intcon	equ	0xFF2
 11944                           postinc0	equ	0xFEE
 11945                           wreg	equ	0xFE8
 11946                           indf1	equ	0xFE7
 11947                           fsr1h	equ	0xFE2
 11948                           fsr1l	equ	0xFE1
 11949                           indf2	equ	0xFDF
 11950                           postinc2	equ	0xFDE
 11951                           postdec2	equ	0xFDD
 11952                           plusw2	equ	0xFDB
 11953                           fsr2h	equ	0xFDA
 11954                           fsr2l	equ	0xFD9
 11955                           status	equ	0xFD8
 11956                           
 11957 ;; *************** function _vscp_init *****************
 11958 ;; Defined at:
 11959 ;;		line 117 in file "../../vscp_firmware/common/vscp_firmware.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;		None
 11962 ;; Auto vars:     Size  Location     Type
 11963 ;;		None
 11964 ;; Return value:  Size  Location     Type
 11965 ;;		None               void
 11966 ;; Registers used:
 11967 ;;		wreg, status,2, cstack
 11968 ;; Tracked objects:
 11969 ;;		On entry : 0/0
 11970 ;;		On exit  : F/0
 11971 ;;		Unchanged: 0/0
 11972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11977 ;;Total ram usage:        0 bytes
 11978 ;; Hardware stack levels used:    1
 11979 ;; Hardware stack levels required when called:    4
 11980 ;; This function calls:
 11981 ;;		_vscp_readNicknamePermanent
 11982 ;; This function is called by:
 11983 ;;		_main
 11984 ;;		_vscp_handleDropNickname
 11985 ;;		_vscp_handleProtocolEvent
 11986 ;; This function uses a non-reentrant model
 11987 ;;
 11988                           
 11989                           	psect	text43
 11990  003F60                     __ptext43:
 11991                           	opt stack 0
 11992  003F60                     _vscp_init:
 11993                           	opt stack 23
 11994                           
 11995                           ;vscp_firmware.c: 118: vscp_initledfunc = 0x02;
 11996                           
 11997                           ; BSR set to: 0
 11998                           ;incstack = 0
 11999                           ;incstack = 0
 12000  003F60  0E02               	movlw	2
 12001  003F62  6E56               	movwf	_vscp_initledfunc,c
 12002                           
 12003                           ;vscp_firmware.c: 121: vscp_nickname = vscp_readNicknamePermanent();
 12004  003F64  EC01  F022         	call	_vscp_readNicknamePermanent	;wreg free
 12005  003F68  0100               	movlb	0	; () banked
 12006  003F6A  6F96               	movwf	_vscp_nickname& (0+255),b
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;vscp_firmware.c: 124: if (!vscp_nickname) vscp_nickname = 0xff;
 12010  003F6C  6796               	tstfsz	_vscp_nickname& (0+255),b
 12011  003F6E  D001               	goto	l1035
 12012                           
 12013                           ; BSR set to: 0
 12014  003F70  6996               	setf	_vscp_nickname& (0+255),b
 12015  003F72                     l1035:
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;vscp_firmware.c: 127: vscp_imsg.flags = 0;
 12019  003F72  6B9B               	clrf	_vscp_imsg& (0+255),b
 12020                           
 12021                           ;vscp_firmware.c: 128: vscp_imsg.priority = 0;
 12022  003F74  6B9C               	clrf	(_vscp_imsg+1)& (0+255),b
 12023                           
 12024                           ;vscp_firmware.c: 129: vscp_imsg.vscp_class = 0;
 12025  003F76  6B9D               	clrf	(_vscp_imsg+2)& (0+255),b
 12026  003F78  6B9E               	clrf	(_vscp_imsg+3)& (0+255),b
 12027                           
 12028                           ;vscp_firmware.c: 130: vscp_imsg.vscp_type = 0;
 12029  003F7A  6B9F               	clrf	(_vscp_imsg+4)& (0+255),b
 12030                           
 12031                           ;vscp_firmware.c: 133: vscp_omsg.flags = 0;
 12032  003F7C  6BA9               	clrf	_vscp_omsg& (0+255),b
 12033                           
 12034                           ;vscp_firmware.c: 134: vscp_omsg.priority = 0;
 12035  003F7E  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 12036                           
 12037                           ;vscp_firmware.c: 135: vscp_omsg.vscp_class = 0;
 12038  003F80  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12039  003F82  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12040                           
 12041                           ;vscp_firmware.c: 138: vscp_errorcnt = 0;
 12042  003F84  6BAD               	clrf	(_vscp_omsg+4)& (0+255),b
 12043                           
 12044                           ;vscp_firmware.c: 139: vscp_alarmstatus = 0;
 12045  003F86  6B91               	clrf	_vscp_alarmstatus& (0+255),b
 12046                           
 12047                           ;vscp_firmware.c: 141: vscp_probe_address = 0;
 12048  003F88  6A57               	clrf	_vscp_probe_address,c
 12049                           
 12050                           ;vscp_firmware.c: 144: vscp_node_state = 0x00;
 12051  003F8A  6B97               	clrf	_vscp_node_state& (0+255),b
 12052                           
 12053                           ;vscp_firmware.c: 145: vscp_node_substate = 0x00;
 12054  003F8C  6B98               	clrf	_vscp_node_substate& (0+255),b
 12055                           
 12056                           ;vscp_firmware.c: 147: vscp_probe_cnt = 0;
 12057  003F8E  6B99               	clrf	_vscp_probe_cnt& (0+255),b
 12058                           
 12059                           ;vscp_firmware.c: 148: vscp_page_select = 0;
 12060  003F90  6A52               	clrf	_vscp_page_select,c
 12061  003F92  6A53               	clrf	_vscp_page_select+1,c
 12062                           
 12063                           ;vscp_firmware.c: 151: vscp_timer = 0;
 12064  003F94  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12065  003F96  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12066                           
 12067                           ;vscp_firmware.c: 152: vscp_configtimer = 0;
 12068  003F98  6B84               	clrf	_vscp_configtimer& (0+255),b	;volatile
 12069  003F9A  6B85               	clrf	(_vscp_configtimer+1)& (0+255),b	;volatile
 12070                           
 12071                           ;vscp_firmware.c: 153: vscp_second = 0;
 12072  003F9C  6B9A               	clrf	_vscp_second& (0+255),b
 12073                           
 12074                           ;vscp_firmware.c: 154: vscp_minute = 0;
 12075  003F9E  6B95               	clrf	_vscp_minute& (0+255),b
 12076                           
 12077                           ;vscp_firmware.c: 155: vscp_hour = 0;
 12078  003FA0  6B93               	clrf	_vscp_hour& (0+255),b
 12079                           
 12080                           ; BSR set to: 0
 12081  003FA2  0012               	return	
 12082  003FA4                     __end_of_vscp_init:
 12083                           	opt stack 0
 12084                           tblptru	equ	0xFF8
 12085                           tblptrh	equ	0xFF7
 12086                           tblptrl	equ	0xFF6
 12087                           tablat	equ	0xFF5
 12088                           prodh	equ	0xFF4
 12089                           prodl	equ	0xFF3
 12090                           intcon	equ	0xFF2
 12091                           postinc0	equ	0xFEE
 12092                           wreg	equ	0xFE8
 12093                           indf1	equ	0xFE7
 12094                           fsr1h	equ	0xFE2
 12095                           fsr1l	equ	0xFE1
 12096                           indf2	equ	0xFDF
 12097                           postinc2	equ	0xFDE
 12098                           postdec2	equ	0xFDD
 12099                           plusw2	equ	0xFDB
 12100                           fsr2h	equ	0xFDA
 12101                           fsr2l	equ	0xFD9
 12102                           status	equ	0xFD8
 12103                           
 12104 ;; *************** function _vscp_readNicknamePermanent *****************
 12105 ;; Defined at:
 12106 ;;		line 861 in file "../main.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;		None
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;		None
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  1    wreg      unsigned char 
 12113 ;; Registers used:
 12114 ;;		wreg, status,2, cstack
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12124 ;;Total ram usage:        0 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    3
 12127 ;; This function calls:
 12128 ;;		_readEEPROM
 12129 ;; This function is called by:
 12130 ;;		_vscp_init
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text44
 12135  004402                     __ptext44:
 12136                           	opt stack 0
 12137  004402                     _vscp_readNicknamePermanent:
 12138                           	opt stack 23
 12139                           
 12140                           ;main.c: 862: return readEEPROM( 0x01 );
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;incstack = 0
 12144                           ;incstack = 0
 12145  004402  6A09               	clrf	?_readEEPROM+1,c
 12146  004404  0E01               	movlw	1
 12147  004406  6E08               	movwf	?_readEEPROM,c
 12148  004408  EFDB  F021         	goto	_readEEPROM	;wreg free
 12149  00440C                     __end_of_vscp_readNicknamePermanent:
 12150                           	opt stack 0
 12151                           tblptru	equ	0xFF8
 12152                           tblptrh	equ	0xFF7
 12153                           tblptrl	equ	0xFF6
 12154                           tablat	equ	0xFF5
 12155                           prodh	equ	0xFF4
 12156                           prodl	equ	0xFF3
 12157                           intcon	equ	0xFF2
 12158                           postinc0	equ	0xFEE
 12159                           wreg	equ	0xFE8
 12160                           indf1	equ	0xFE7
 12161                           fsr1h	equ	0xFE2
 12162                           fsr1l	equ	0xFE1
 12163                           indf2	equ	0xFDF
 12164                           postinc2	equ	0xFDE
 12165                           postdec2	equ	0xFDD
 12166                           plusw2	equ	0xFDB
 12167                           fsr2h	equ	0xFDA
 12168                           fsr2l	equ	0xFD9
 12169                           status	equ	0xFD8
 12170                           
 12171 ;; *************** function _vscp_handleSetNickname *****************
 12172 ;; Defined at:
 12173 ;;		line 414 in file "../../vscp_firmware/common/vscp_firmware.c"
 12174 ;; Parameters:    Size  Location     Type
 12175 ;;		None
 12176 ;; Auto vars:     Size  Location     Type
 12177 ;;		None
 12178 ;; Return value:  Size  Location     Type
 12179 ;;		None               void
 12180 ;; Registers used:
 12181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12182 ;; Tracked objects:
 12183 ;;		On entry : F/0
 12184 ;;		On exit  : 0/0
 12185 ;;		Unchanged: 0/0
 12186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12191 ;;Total ram usage:        0 bytes
 12192 ;; Hardware stack levels used:    1
 12193 ;; Hardware stack levels required when called:    4
 12194 ;; This function calls:
 12195 ;;		_vscp_writeNicknamePermanent
 12196 ;;		_vscp_setSegmentCRC
 12197 ;; This function is called by:
 12198 ;;		_vscp_handleProtocolEvent
 12199 ;; This function uses a non-reentrant model
 12200 ;;
 12201                           
 12202                           	psect	text45
 12203  00419A                     __ptext45:
 12204                           	opt stack 0
 12205  00419A                     _vscp_handleSetNickname:
 12206                           	opt stack 24
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;vscp_firmware.c: 415: if ((2 == (vscp_imsg.flags & 0x0f)) &&
 12210                           ;vscp_firmware.c: 416: (vscp_nickname == vscp_imsg.data[ 0 ])) {
 12211                           
 12212                           ;incstack = 0
 12213                           ;incstack = 0
 12214  00419A  519B               	movf	_vscp_imsg& (0+255),w,b
 12215  00419C  0B0F               	andlw	15
 12216  00419E  0A02               	xorlw	2
 12217  0041A0  A4D8               	btfss	status,2,c
 12218  0041A2  0012               	return	
 12219                           
 12220                           ; BSR set to: 0
 12221  0041A4  5196               	movf	_vscp_nickname& (0+255),w,b
 12222  0041A6  EE20  F0A1         	lfsr	2,_vscp_imsg+6
 12223  0041AA  62DF               	cpfseq	indf2,c
 12224  0041AC  0012               	return	
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;vscp_firmware.c: 419: vscp_nickname = vscp_imsg.data[ 1 ];
 12228  0041AE  C0A2  F096         	movff	_vscp_imsg+7,_vscp_nickname
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;vscp_firmware.c: 420: vscp_writeNicknamePermanent(vscp_nickname);
 12232  0041B2  5196               	movf	_vscp_nickname& (0+255),w,b
 12233  0041B4  ECC9  F021         	call	_vscp_writeNicknamePermanent
 12234                           
 12235                           ;vscp_firmware.c: 421: vscp_setSegmentCRC(0x40);
 12236  0041B8  0E40               	movlw	64
 12237  0041BA  EFC0  F021         	goto	_vscp_setSegmentCRC
 12238  0041BE                     __end_of_vscp_handleSetNickname:
 12239                           	opt stack 0
 12240                           tblptru	equ	0xFF8
 12241                           tblptrh	equ	0xFF7
 12242                           tblptrl	equ	0xFF6
 12243                           tablat	equ	0xFF5
 12244                           prodh	equ	0xFF4
 12245                           prodl	equ	0xFF3
 12246                           intcon	equ	0xFF2
 12247                           postinc0	equ	0xFEE
 12248                           wreg	equ	0xFE8
 12249                           indf1	equ	0xFE7
 12250                           fsr1h	equ	0xFE2
 12251                           fsr1l	equ	0xFE1
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           plusw2	equ	0xFDB
 12256                           fsr2h	equ	0xFDA
 12257                           fsr2l	equ	0xFD9
 12258                           status	equ	0xFD8
 12259                           
 12260 ;; *************** function _vscp_handleHeartbeat *****************
 12261 ;; Defined at:
 12262 ;;		line 388 in file "../../vscp_firmware/common/vscp_firmware.c"
 12263 ;; Parameters:    Size  Location     Type
 12264 ;;		None
 12265 ;; Auto vars:     Size  Location     Type
 12266 ;;		None
 12267 ;; Return value:  Size  Location     Type
 12268 ;;		None               void
 12269 ;; Registers used:
 12270 ;;		wreg, status,2, status,0, cstack
 12271 ;; Tracked objects:
 12272 ;;		On entry : F/0
 12273 ;;		On exit  : 0/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12280 ;;Total ram usage:        0 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:    4
 12283 ;; This function calls:
 12284 ;;		_vscp_writeNicknamePermanent
 12285 ;;		_vscp_getSegmentCRC
 12286 ;;		_vscp_setSegmentCRC
 12287 ;; This function is called by:
 12288 ;;		_vscp_handleProtocolEvent
 12289 ;; This function uses a non-reentrant model
 12290 ;;
 12291                           
 12292                           	psect	text46
 12293  003FA4                     __ptext46:
 12294                           	opt stack 0
 12295  003FA4                     _vscp_handleHeartbeat:
 12296                           	opt stack 24
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;vscp_firmware.c: 389: if ( !vscp_getSegmentCRC() ) {
 12300                           
 12301                           ;incstack = 0
 12302                           ;incstack = 0
 12303  003FA4  EC06  F022         	call	_vscp_getSegmentCRC	;wreg free
 12304  003FA8  0900               	iorlw	0
 12305  003FAA  E118               	bnz	l8945
 12306                           
 12307                           ;vscp_firmware.c: 390: if ( ( 5 == (vscp_imsg.flags & 0x0f ) ) &&
 12308                           ;vscp_firmware.c: 391: (vscp_getSegmentCRC() != vscp_imsg.data[ 0 ])) {
 12309  003FAC  0100               	movlb	0	; () banked
 12310  003FAE  519B               	movf	_vscp_imsg& (0+255),w,b
 12311  003FB0  0B0F               	andlw	15
 12312  003FB2  0A05               	xorlw	5
 12313  003FB4  A4D8               	btfss	status,2,c
 12314  003FB6  0012               	return	
 12315                           
 12316                           ; BSR set to: 0
 12317  003FB8  EC06  F022         	call	_vscp_getSegmentCRC	;wreg free
 12318  003FBC  0100               	movlb	0	; () banked
 12319  003FBE  19A1               	xorwf	(_vscp_imsg+6)& (0+255),w,b
 12320  003FC0  B4D8               	btfsc	status,2,c
 12321  003FC2  0012               	return	
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;vscp_firmware.c: 395: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12325  003FC4  51A1               	movf	(_vscp_imsg+6)& (0+255),w,b
 12326  003FC6  ECC0  F021         	call	_vscp_setSegmentCRC
 12327                           
 12328                           ;vscp_firmware.c: 398: vscp_nickname = 0xff;
 12329  003FCA  0100               	movlb	0	; () banked
 12330  003FCC  6996               	setf	_vscp_nickname& (0+255),b
 12331                           
 12332                           ;vscp_firmware.c: 399: vscp_writeNicknamePermanent(0xff);
 12333  003FCE  0EFF               	movlw	255
 12334  003FD0  ECC9  F021         	call	_vscp_writeNicknamePermanent
 12335                           
 12336                           ;vscp_firmware.c: 400: vscp_node_state = 0x01;
 12337  003FD4  0E01               	movlw	1
 12338  003FD6  0100               	movlb	0	; () banked
 12339  003FD8  6F97               	movwf	_vscp_node_state& (0+255),b
 12340  003FDA  0C01               	retlw	1
 12341  003FDC                     l8945:
 12342                           
 12343                           ;vscp_firmware.c: 403: else {
 12344                           ;vscp_firmware.c: 405: vscp_setSegmentCRC(vscp_imsg.data[ 0 ]);
 12345  003FDC  0100               	movlb	0	; () banked
 12346  003FDE  51A1               	movf	(_vscp_imsg+6)& (0+255),w,b
 12347  003FE0  EFC0  F021         	goto	_vscp_setSegmentCRC
 12348  003FE4                     __end_of_vscp_handleHeartbeat:
 12349                           	opt stack 0
 12350                           tblptru	equ	0xFF8
 12351                           tblptrh	equ	0xFF7
 12352                           tblptrl	equ	0xFF6
 12353                           tablat	equ	0xFF5
 12354                           prodh	equ	0xFF4
 12355                           prodl	equ	0xFF3
 12356                           intcon	equ	0xFF2
 12357                           postinc0	equ	0xFEE
 12358                           wreg	equ	0xFE8
 12359                           indf1	equ	0xFE7
 12360                           fsr1h	equ	0xFE2
 12361                           fsr1l	equ	0xFE1
 12362                           indf2	equ	0xFDF
 12363                           postinc2	equ	0xFDE
 12364                           postdec2	equ	0xFDD
 12365                           plusw2	equ	0xFDB
 12366                           fsr2h	equ	0xFDA
 12367                           fsr2l	equ	0xFD9
 12368                           status	equ	0xFD8
 12369                           
 12370 ;; *************** function _vscp_getMatrixInfo *****************
 12371 ;; Defined at:
 12372 ;;		line 2458 in file "../main.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  pData           1    wreg     PTR unsigned char 
 12375 ;;		 -> vscp_omsg(13), 
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;  pData           1    0[COMRAM] PTR unsigned char 
 12378 ;;		 -> vscp_omsg(13), 
 12379 ;;  i               1    7[COMRAM] unsigned char 
 12380 ;; Return value:  Size  Location     Type
 12381 ;;		None               void
 12382 ;; Registers used:
 12383 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12384 ;; Tracked objects:
 12385 ;;		On entry : F/0
 12386 ;;		On exit  : F/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12392 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12393 ;;Total ram usage:        1 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    2
 12396 ;; This function calls:
 12397 ;;		Nothing
 12398 ;; This function is called by:
 12399 ;;		_vscp_handleProtocolEvent
 12400 ;; This function uses a non-reentrant model
 12401 ;;
 12402                           
 12403                           	psect	text47
 12404  0041FE                     __ptext47:
 12405                           	opt stack 0
 12406  0041FE                     _vscp_getMatrixInfo:
 12407                           	opt stack 26
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;main.c: 2459: uint8_t i;
 12411                           ;main.c: 2461: vscp_omsg.data[ 0 ] = 7;
 12412                           
 12413                           ;incstack = 0
 12414                           ;incstack = 0
 12415  0041FE  0E07               	movlw	7
 12416  004200  6FAE               	movwf	(_vscp_omsg+5)& (0+255),b
 12417                           
 12418                           ;main.c: 2462: vscp_omsg.data[ 1 ] = 72;
 12419  004202  0E48               	movlw	72
 12420  004204  6FAF               	movwf	(_vscp_omsg+6)& (0+255),b
 12421                           
 12422                           ;main.c: 2465: for ( i = 2; i < 8; i++ ) {
 12423  004206  0E02               	movlw	2
 12424  004208  6E08               	movwf	vscp_getMatrixInfo@i,c
 12425  00420A                     l6443:
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;main.c: 2466: vscp_omsg.data[ i ] = 0;
 12429  00420A  5008               	movf	vscp_getMatrixInfo@i,w,c
 12430  00420C  0FAE               	addlw	low (_vscp_omsg+5)
 12431  00420E  6ED9               	movwf	fsr2l,c
 12432  004210  6ADA               	clrf	fsr2h,c
 12433  004212  6ADF               	clrf	indf2,c
 12434                           
 12435                           ; BSR set to: 0
 12436  004214  2A08               	incf	vscp_getMatrixInfo@i,f,c
 12437                           
 12438                           ; BSR set to: 0
 12439  004216  0E07               	movlw	7
 12440  004218  6408               	cpfsgt	vscp_getMatrixInfo@i,c
 12441  00421A  D7F7               	goto	l6443
 12442  00421C  0C07               	retlw	7
 12443  00421E                     __end_of_vscp_getMatrixInfo:
 12444                           	opt stack 0
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           postinc0	equ	0xFEE
 12453                           wreg	equ	0xFE8
 12454                           indf1	equ	0xFE7
 12455                           fsr1h	equ	0xFE2
 12456                           fsr1l	equ	0xFE1
 12457                           indf2	equ	0xFDF
 12458                           postinc2	equ	0xFDE
 12459                           postdec2	equ	0xFDD
 12460                           plusw2	equ	0xFDB
 12461                           fsr2h	equ	0xFDA
 12462                           fsr2l	equ	0xFD9
 12463                           status	equ	0xFD8
 12464                           
 12465 ;; *************** function _vscp_goBootloaderMode *****************
 12466 ;; Defined at:
 12467 ;;		line 2442 in file "../main.c"
 12468 ;; Parameters:    Size  Location     Type
 12469 ;;  algorithm       1    wreg     unsigned char 
 12470 ;; Auto vars:     Size  Location     Type
 12471 ;;  algorithm       1   10[COMRAM] unsigned char 
 12472 ;; Return value:  Size  Location     Type
 12473 ;;		None               void
 12474 ;; Registers used:
 12475 ;;		wreg, status,2, status,0, cstack
 12476 ;; Tracked objects:
 12477 ;;		On entry : F/0
 12478 ;;		On exit  : 0/0
 12479 ;;		Unchanged: 0/0
 12480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12482 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12484 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12485 ;;Total ram usage:        1 bytes
 12486 ;; Hardware stack levels used:    1
 12487 ;; Hardware stack levels required when called:    3
 12488 ;; This function calls:
 12489 ;;		_writeEEPROM
 12490 ;; This function is called by:
 12491 ;;		_vscp_handleProtocolEvent
 12492 ;; This function uses a non-reentrant model
 12493 ;;
 12494                           
 12495                           	psect	text48
 12496  0042D2                     __ptext48:
 12497                           	opt stack 0
 12498  0042D2                     _vscp_goBootloaderMode:
 12499                           	opt stack 25
 12500                           
 12501                           ; BSR set to: 0
 12502                           ;incstack = 0
 12503                           ;incstack = 0
 12504                           ;vscp_goBootloaderMode@algorithm stored from wreg
 12505  0042D2  CFE8 F00B          	movff	wreg,vscp_goBootloaderMode@algorithm
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;main.c: 2443: if ( 0x01 != algorithm ) return;
 12509  0042D6  040B               	decf	vscp_goBootloaderMode@algorithm,w,c
 12510  0042D8  A4D8               	btfss	status,2,c
 12511  0042DA  0012               	return	
 12512                           
 12513                           ; BSR set to: 0
 12514                           ;main.c: 2447: writeEEPROM(0x00, 0xff);
 12515  0042DC  6A09               	clrf	?_writeEEPROM+1,c
 12516  0042DE  6A08               	clrf	?_writeEEPROM,c
 12517  0042E0  0EFF               	movlw	255
 12518  0042E2  680A               	setf	?_writeEEPROM+2,c
 12519  0042E4  ECBA  F020         	call	_writeEEPROM	;wreg free
 12520  0042E8  00FF               	reset		;# 
 12521  0042EA  0012               	return	
 12522  0042EC                     __end_of_vscp_goBootloaderMode:
 12523                           	opt stack 0
 12524                           tblptru	equ	0xFF8
 12525                           tblptrh	equ	0xFF7
 12526                           tblptrl	equ	0xFF6
 12527                           tablat	equ	0xFF5
 12528                           prodh	equ	0xFF4
 12529                           prodl	equ	0xFF3
 12530                           intcon	equ	0xFF2
 12531                           postinc0	equ	0xFEE
 12532                           wreg	equ	0xFE8
 12533                           indf1	equ	0xFE7
 12534                           fsr1h	equ	0xFE2
 12535                           fsr1l	equ	0xFE1
 12536                           indf2	equ	0xFDF
 12537                           postinc2	equ	0xFDE
 12538                           postdec2	equ	0xFDD
 12539                           plusw2	equ	0xFDB
 12540                           fsr2h	equ	0xFDA
 12541                           fsr2l	equ	0xFD9
 12542                           status	equ	0xFD8
 12543                           
 12544 ;; *************** function _vscp_handleProbeState *****************
 12545 ;; Defined at:
 12546 ;;		line 200 in file "../../vscp_firmware/common/vscp_firmware.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;		None
 12549 ;; Auto vars:     Size  Location     Type
 12550 ;;		None
 12551 ;; Return value:  Size  Location     Type
 12552 ;;		None               void
 12553 ;; Registers used:
 12554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12555 ;; Tracked objects:
 12556 ;;		On entry : 0/0
 12557 ;;		On exit  : F/0
 12558 ;;		Unchanged: 0/0
 12559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12564 ;;Total ram usage:        0 bytes
 12565 ;; Hardware stack levels used:    1
 12566 ;; Hardware stack levels required when called:    8
 12567 ;; This function calls:
 12568 ;;		_vscp_goActiveState
 12569 ;;		_vscp_writeNicknamePermanent
 12570 ;;		_vscp_sendEvent
 12571 ;;		_vscp_setSegmentCRC
 12572 ;; This function is called by:
 12573 ;;		_main
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           	psect	text49
 12578  003A92                     __ptext49:
 12579                           	opt stack 0
 12580  003A92                     _vscp_handleProbeState:
 12581                           	opt stack 21
 12582                           
 12583                           ;vscp_firmware.c: 201: switch (vscp_node_substate) {
 12584                           
 12585                           ;incstack = 0
 12586                           ;incstack = 0
 12587  003A92  D053               	goto	l7367
 12588  003A94                     l7297:
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;vscp_firmware.c: 205: if (0xff != vscp_probe_address) {
 12592  003A94  2857               	incf	_vscp_probe_address,w,c
 12593  003A96  E010               	bz	l7313
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;vscp_firmware.c: 207: vscp_omsg.flags = 0x80 + 1;
 12597  003A98  0E81               	movlw	129
 12598  003A9A  6FA9               	movwf	_vscp_omsg& (0+255),b
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;vscp_firmware.c: 208: vscp_omsg.priority = 0x00;
 12602  003A9C  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;vscp_firmware.c: 209: vscp_omsg.vscp_class = 0;
 12606  003A9E  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12607  003AA0  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12608                           
 12609                           ;vscp_firmware.c: 210: vscp_omsg.vscp_type = 2;
 12610  003AA2  0E02               	movlw	2
 12611  003AA4  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;vscp_firmware.c: 211: vscp_omsg.data[ 0 ] = vscp_probe_address;
 12615  003AA6  C057  F0AE         	movff	_vscp_probe_address,_vscp_omsg+5
 12616                           
 12617                           ; BSR set to: 0
 12618                           ;vscp_firmware.c: 214: vscp_sendEvent();
 12619  003AAA  EC94  F020         	call	_vscp_sendEvent	;wreg free
 12620                           
 12621                           ; BSR set to: 0
 12622                           ;vscp_firmware.c: 216: vscp_node_substate = 0x01;
 12623  003AAE  0E01               	movlw	1
 12624  003AB0  6F98               	movwf	_vscp_node_substate& (0+255),b
 12625  003AB2                     l7311:
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;vscp_firmware.c: 217: vscp_timer = 0;
 12629  003AB2  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12630  003AB4  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12631                           
 12632                           ;vscp_firmware.c: 219: } else {
 12633  003AB6  D048               	goto	l1050
 12634  003AB8                     l7313:
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;vscp_firmware.c: 222: vscp_node_state = 0x04;
 12638  003AB8  0E04               	movlw	4
 12639  003ABA  6F97               	movwf	_vscp_node_state& (0+255),b
 12640                           
 12641                           ;vscp_firmware.c: 225: vscp_omsg.flags = 0x80 + 1;
 12642  003ABC  0E81               	movlw	129
 12643  003ABE  6FA9               	movwf	_vscp_omsg& (0+255),b
 12644                           
 12645                           ; BSR set to: 0
 12646                           ;vscp_firmware.c: 226: vscp_omsg.data[ 0 ] = 0xff;
 12647  003AC0  69AE               	setf	(_vscp_omsg+5)& (0+255),b
 12648                           
 12649                           ;vscp_firmware.c: 227: vscp_omsg.priority = 0x07;
 12650  003AC2  0E07               	movlw	7
 12651  003AC4  6FAA               	movwf	(_vscp_omsg+1)& (0+255),b
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;vscp_firmware.c: 228: vscp_omsg.vscp_class = 0;
 12655  003AC6  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12656  003AC8  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12657                           
 12658                           ;vscp_firmware.c: 229: vscp_omsg.vscp_type = 3;
 12659  003ACA  0E03               	movlw	3
 12660  003ACC  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;vscp_firmware.c: 232: vscp_sendEvent();
 12664  003ACE  EC94  F020         	call	_vscp_sendEvent	;wreg free
 12665  003AD2  D03A               	goto	l1050
 12666  003AD4                     l1051:
 12667                           
 12668                           ; BSR set to: 0
 12669                           ;vscp_firmware.c: 239: if (vscp_imsg.flags & 0x80) {
 12670  003AD4  AF9B               	btfss	_vscp_imsg& (0+255),7,b
 12671  003AD6  D00F               	goto	l7337
 12672                           
 12673                           ; BSR set to: 0
 12674                           ;vscp_firmware.c: 242: if ((0 == vscp_imsg.vscp_class) &&
 12675                           ;vscp_firmware.c: 243: (3 == vscp_imsg.vscp_type)) {
 12676  003AD8  519E               	movf	(_vscp_imsg+3)& (0+255),w,b
 12677  003ADA  119D               	iorwf	(_vscp_imsg+2)& (0+255),w,b
 12678  003ADC  E135               	bnz	l1050
 12679                           
 12680                           ; BSR set to: 0
 12681  003ADE  519F               	movf	(_vscp_imsg+4)& (0+255),w,b
 12682  003AE0  0A03               	xorlw	3
 12683  003AE2  E132               	bnz	l1050
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;vscp_firmware.c: 246: if (0 == vscp_probe_address) {
 12687  003AE4  6657               	tstfsz	_vscp_probe_address,c
 12688  003AE6  D003               	goto	l7331
 12689                           
 12690                           ; BSR set to: 0
 12691                           ;vscp_firmware.c: 250: vscp_node_state = 0x02;
 12692  003AE8  0E02               	movlw	2
 12693  003AEA  6F97               	movwf	_vscp_node_state& (0+255),b
 12694  003AEC  D7E2               	goto	l7311
 12695  003AEE                     l7331:
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;vscp_firmware.c: 256: vscp_probe_address++;
 12699  003AEE  2A57               	incf	_vscp_probe_address,f,c
 12700                           
 12701                           ; BSR set to: 0
 12702                           ;vscp_firmware.c: 257: vscp_node_substate = 0x00;
 12703  003AF0  6B98               	clrf	_vscp_node_substate& (0+255),b
 12704  003AF2                     l7335:
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;vscp_firmware.c: 258: vscp_probe_cnt = 0;
 12708  003AF2  6B99               	clrf	_vscp_probe_cnt& (0+255),b
 12709  003AF4  D029               	goto	l1050
 12710  003AF6                     l7337:
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;vscp_firmware.c: 264: if (vscp_timer > 1000) {
 12714  003AF6  0EE9               	movlw	233
 12715  003AF8  5D86               	subwf	_vscp_timer& (0+255),w,b	;volatile
 12716  003AFA  0E03               	movlw	3
 12717  003AFC  5987               	subwfb	(_vscp_timer+1)& (0+255),w,b	;volatile
 12718  003AFE  E324               	bnc	l1050
 12719                           
 12720                           ; BSR set to: 0
 12721                           ;vscp_firmware.c: 266: vscp_probe_cnt++;
 12722  003B00  2B99               	incf	_vscp_probe_cnt& (0+255),f,b
 12723                           
 12724                           ; BSR set to: 0
 12725                           ;vscp_firmware.c: 268: if (vscp_probe_cnt >= 3) {
 12726  003B02  0E02               	movlw	2
 12727  003B04  6599               	cpfsgt	_vscp_probe_cnt& (0+255),b
 12728  003B06  D017               	goto	l1058
 12729                           
 12730                           ; BSR set to: 0
 12731                           ;vscp_firmware.c: 271: if (0 == vscp_probe_address) {
 12732  003B08  6657               	tstfsz	_vscp_probe_address,c
 12733  003B0A  D005               	goto	l1059
 12734                           
 12735                           ; BSR set to: 0
 12736                           ;vscp_firmware.c: 274: vscp_probe_address++;
 12737  003B0C  2A57               	incf	_vscp_probe_address,f,c
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;vscp_firmware.c: 275: vscp_node_substate = 0x00;
 12741  003B0E  6B98               	clrf	_vscp_node_substate& (0+255),b
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;vscp_firmware.c: 276: vscp_timer = 0;
 12745  003B10  6B86               	clrf	_vscp_timer& (0+255),b	;volatile
 12746  003B12  6B87               	clrf	(_vscp_timer+1)& (0+255),b	;volatile
 12747  003B14  D7EE               	goto	l7335
 12748  003B16                     l1059:
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;vscp_firmware.c: 282: vscp_nickname = vscp_probe_address;
 12752  003B16  C057  F096         	movff	_vscp_probe_address,_vscp_nickname
 12753                           
 12754                           ; BSR set to: 0
 12755                           ;vscp_firmware.c: 283: vscp_node_state = 0x03;
 12756  003B1A  0E03               	movlw	3
 12757  003B1C  6F97               	movwf	_vscp_node_state& (0+255),b
 12758                           
 12759                           ; BSR set to: 0
 12760                           ;vscp_firmware.c: 284: vscp_node_substate = 0x00;
 12761  003B1E  6B98               	clrf	_vscp_node_substate& (0+255),b
 12762                           
 12763                           ; BSR set to: 0
 12764                           ;vscp_firmware.c: 285: vscp_writeNicknamePermanent(vscp_nickname);
 12765  003B20  5196               	movf	_vscp_nickname& (0+255),w,b
 12766  003B22  ECC9  F021         	call	_vscp_writeNicknamePermanent
 12767                           
 12768                           ;vscp_firmware.c: 286: vscp_setSegmentCRC(0x40);
 12769  003B26  0E40               	movlw	64
 12770  003B28  ECC0  F021         	call	_vscp_setSegmentCRC
 12771                           
 12772                           ;vscp_firmware.c: 289: vscp_probe_cnt = 0;
 12773  003B2C  0100               	movlb	0	; () banked
 12774  003B2E  6B99               	clrf	_vscp_probe_cnt& (0+255),b
 12775                           
 12776                           ; BSR set to: 0
 12777                           ;vscp_firmware.c: 290: vscp_goActiveState();
 12778  003B30  EC3D  F021         	call	_vscp_goActiveState	;wreg free
 12779  003B34  D009               	goto	l1050
 12780  003B36                     l1058:
 12781                           
 12782                           ; BSR set to: 0
 12783                           ;vscp_firmware.c: 294: vscp_node_substate = 0x00;
 12784  003B36  6B98               	clrf	_vscp_node_substate& (0+255),b
 12785  003B38  D007               	goto	l1050
 12786  003B3A                     l7367:
 12787  003B3A  0100               	movlb	0	; () banked
 12788  003B3C  5198               	movf	_vscp_node_substate& (0+255),w,b
 12789                           
 12790                           ; Switch size 1, requested type "space"
 12791                           ; Number of cases is 3, Range of values is 0 to 2
 12792                           ; switch strategies available:
 12793                           ; Name         Instructions Cycles
 12794                           ; simple_byte           10     6 (average)
 12795                           ;	Chosen strategy is simple_byte
 12796  003B3E  E0AA               	bz	l7297
 12797  003B40  0A01               	xorlw	1	; case 1
 12798  003B42  E0C8               	bz	l1051
 12799  003B44  0A03               	xorlw	3	; case 2
 12800  003B46  E1F7               	bnz	l1058
 12801  003B48                     l1050:
 12802                           
 12803                           ; BSR set to: 0
 12804                           ;vscp_firmware.c: 309: vscp_imsg.flags = 0;
 12805  003B48  6B9B               	clrf	_vscp_imsg& (0+255),b
 12806                           
 12807                           ; BSR set to: 0
 12808  003B4A  0012               	return	
 12809  003B4C                     __end_of_vscp_handleProbeState:
 12810                           	opt stack 0
 12811                           tblptru	equ	0xFF8
 12812                           tblptrh	equ	0xFF7
 12813                           tblptrl	equ	0xFF6
 12814                           tablat	equ	0xFF5
 12815                           prodh	equ	0xFF4
 12816                           prodl	equ	0xFF3
 12817                           intcon	equ	0xFF2
 12818                           postinc0	equ	0xFEE
 12819                           wreg	equ	0xFE8
 12820                           indf1	equ	0xFE7
 12821                           fsr1h	equ	0xFE2
 12822                           fsr1l	equ	0xFE1
 12823                           indf2	equ	0xFDF
 12824                           postinc2	equ	0xFDE
 12825                           postdec2	equ	0xFDD
 12826                           plusw2	equ	0xFDB
 12827                           fsr2h	equ	0xFDA
 12828                           fsr2l	equ	0xFD9
 12829                           status	equ	0xFD8
 12830                           
 12831 ;; *************** function _vscp_goActiveState *****************
 12832 ;; Defined at:
 12833 ;;		line 350 in file "../../vscp_firmware/common/vscp_firmware.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;		None
 12838 ;; Return value:  Size  Location     Type
 12839 ;;		None               void
 12840 ;; Registers used:
 12841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : F/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12851 ;;Total ram usage:        0 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; Hardware stack levels required when called:    7
 12854 ;; This function calls:
 12855 ;;		_vscp_sendEvent
 12856 ;; This function is called by:
 12857 ;;		_main
 12858 ;;		_vscp_handleProbeState
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text50
 12863  00427A                     __ptext50:
 12864                           	opt stack 0
 12865  00427A                     _vscp_goActiveState:
 12866                           	opt stack 21
 12867                           
 12868                           ;vscp_firmware.c: 351: vscp_omsg.flags = 0x80 + 1;
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;incstack = 0
 12872                           ;incstack = 0
 12873  00427A  0E81               	movlw	129
 12874  00427C  0100               	movlb	0	; () banked
 12875  00427E  6FA9               	movwf	_vscp_omsg& (0+255),b
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;vscp_firmware.c: 352: vscp_omsg.priority = 0x00;
 12879  004280  6BAA               	clrf	(_vscp_omsg+1)& (0+255),b
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;vscp_firmware.c: 353: vscp_omsg.vscp_class = 0;
 12883  004282  6BAB               	clrf	(_vscp_omsg+2)& (0+255),b
 12884  004284  6BAC               	clrf	(_vscp_omsg+3)& (0+255),b
 12885                           
 12886                           ;vscp_firmware.c: 354: vscp_omsg.vscp_type = 2;
 12887  004286  0E02               	movlw	2
 12888  004288  6FAD               	movwf	(_vscp_omsg+4)& (0+255),b
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;vscp_firmware.c: 355: vscp_omsg.data[ 0 ] = vscp_nickname;
 12892  00428A  C096  F0AE         	movff	_vscp_nickname,_vscp_omsg+5
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;vscp_firmware.c: 358: vscp_sendEvent();
 12896  00428E  EC94  F020         	call	_vscp_sendEvent	;wreg free
 12897                           
 12898                           ; BSR set to: 0
 12899                           ;vscp_firmware.c: 360: vscp_initledfunc = 0x01;
 12900  004292  0E01               	movlw	1
 12901  004294  6E56               	movwf	_vscp_initledfunc,c
 12902                           
 12903                           ; BSR set to: 0
 12904  004296  0C01               	retlw	1
 12905  004298                     __end_of_vscp_goActiveState:
 12906                           	opt stack 0
 12907                           tblptru	equ	0xFF8
 12908                           tblptrh	equ	0xFF7
 12909                           tblptrl	equ	0xFF6
 12910                           tablat	equ	0xFF5
 12911                           prodh	equ	0xFF4
 12912                           prodl	equ	0xFF3
 12913                           intcon	equ	0xFF2
 12914                           postinc0	equ	0xFEE
 12915                           wreg	equ	0xFE8
 12916                           indf1	equ	0xFE7
 12917                           fsr1h	equ	0xFE2
 12918                           fsr1l	equ	0xFE1
 12919                           indf2	equ	0xFDF
 12920                           postinc2	equ	0xFDE
 12921                           postdec2	equ	0xFDD
 12922                           plusw2	equ	0xFDB
 12923                           fsr2h	equ	0xFDA
 12924                           fsr2l	equ	0xFD9
 12925                           status	equ	0xFD8
 12926                           
 12927 ;; *************** function _vscp_sendEvent *****************
 12928 ;; Defined at:
 12929 ;;		line 1275 in file "../../vscp_firmware/common/vscp_firmware.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;		None
 12932 ;; Auto vars:     Size  Location     Type
 12933 ;;  rv              1    0        unsigned char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  1    wreg      unsigned char 
 12936 ;; Registers used:
 12937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12938 ;; Tracked objects:
 12939 ;;		On entry : F/0
 12940 ;;		On exit  : F/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12946 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12947 ;;Total ram usage:        1 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    6
 12950 ;; This function calls:
 12951 ;;		_sendVSCPFrame
 12952 ;; This function is called by:
 12953 ;;		_vscp_handleProbeState
 12954 ;;		_vscp_goActiveState
 12955 ;;		_vscp_sendHeartBeat
 12956 ;;		_vscp_newNodeOnline
 12957 ;;		_vscp_handleProtocolEvent
 12958 ;; This function uses a non-reentrant model
 12959 ;;
 12960                           
 12961                           	psect	text51
 12962  004128                     __ptext51:
 12963                           	opt stack 0
 12964  004128                     _vscp_sendEvent:
 12965                           	opt stack 21
 12966                           
 12967                           ; BSR set to: 0
 12968                           
 12969                           ; BSR set to: 0
 12970                           ;incstack = 0
 12971                           ;incstack = 0
 12972  004128  C0AB  F03F         	movff	_vscp_omsg+2,?_sendVSCPFrame
 12973  00412C  C0AC  F040         	movff	_vscp_omsg+3,?_sendVSCPFrame+1
 12974  004130  C0AD  F041         	movff	_vscp_omsg+4,?_sendVSCPFrame+2
 12975  004134  C096  F042         	movff	_vscp_nickname,?_sendVSCPFrame+3
 12976  004138  C0AA  F043         	movff	_vscp_omsg+1,?_sendVSCPFrame+4
 12977  00413C  51A9               	movf	_vscp_omsg& (0+255),w,b
 12978  00413E  0B0F               	andlw	15
 12979  004140  6E44               	movwf	?_sendVSCPFrame+5,c
 12980  004142  0E00               	movlw	high (_vscp_omsg+5)
 12981  004144  6E46               	movwf	?_sendVSCPFrame+7,c
 12982  004146  0EAE               	movlw	low (_vscp_omsg+5)
 12983  004148  6E45               	movwf	?_sendVSCPFrame+6,c
 12984  00414A  EF01  F01E         	goto	_sendVSCPFrame	;wreg free
 12985  00414E                     __end_of_vscp_sendEvent:
 12986                           	opt stack 0
 12987                           tblptru	equ	0xFF8
 12988                           tblptrh	equ	0xFF7
 12989                           tblptrl	equ	0xFF6
 12990                           tablat	equ	0xFF5
 12991                           prodh	equ	0xFF4
 12992                           prodl	equ	0xFF3
 12993                           intcon	equ	0xFF2
 12994                           postinc0	equ	0xFEE
 12995                           wreg	equ	0xFE8
 12996                           indf1	equ	0xFE7
 12997                           fsr1h	equ	0xFE2
 12998                           fsr1l	equ	0xFE1
 12999                           indf2	equ	0xFDF
 13000                           postinc2	equ	0xFDE
 13001                           postdec2	equ	0xFDD
 13002                           plusw2	equ	0xFDB
 13003                           fsr2h	equ	0xFDA
 13004                           fsr2l	equ	0xFD9
 13005                           status	equ	0xFD8
 13006                           
 13007 ;; *************** function _sendVSCPFrame *****************
 13008 ;; Defined at:
 13009 ;;		line 2517 in file "../main.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  vscpclass       2   62[COMRAM] unsigned short 
 13012 ;;  vscptype        1   64[COMRAM] unsigned char 
 13013 ;;  nodeid          1   65[COMRAM] unsigned char 
 13014 ;;  priority        1   66[COMRAM] unsigned char 
 13015 ;;  size            1   67[COMRAM] unsigned char 
 13016 ;;  pData           2   68[COMRAM] PTR unsigned char 
 13017 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13018 ;; Auto vars:     Size  Location     Type
 13019 ;;  id              4   70[COMRAM] unsigned long 
 13020 ;; Return value:  Size  Location     Type
 13021 ;;                  1    wreg      unsigned char 
 13022 ;; Registers used:
 13023 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13024 ;; Tracked objects:
 13025 ;;		On entry : F/0
 13026 ;;		On exit  : F/0
 13027 ;;		Unchanged: 0/0
 13028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13029 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13030 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13031 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13032 ;;      Totals:        12      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13033 ;;Total ram usage:       32 bytes
 13034 ;; Hardware stack levels used:    1
 13035 ;; Hardware stack levels required when called:    5
 13036 ;; This function calls:
 13037 ;;		_sendCANFrame
 13038 ;; This function is called by:
 13039 ;;		_SendInformationEvent
 13040 ;;		_vscp_sendEvent
 13041 ;; This function uses a non-reentrant model
 13042 ;;
 13043                           
 13044                           	psect	text52
 13045  003C02                     __ptext52:
 13046                           	opt stack 0
 13047  003C02                     _sendVSCPFrame:
 13048                           	opt stack 22
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;main.c: 2518: uint32_t id = ( (uint32_t)priority << 26 ) |
 13052                           ;main.c: 2519: ( (uint32_t)vscpclass << 16 ) |
 13053                           ;main.c: 2520: ( (uint32_t)vscptype << 8 ) |
 13054                           ;main.c: 2521: nodeid;
 13055                           
 13056                           ; BSR set to: 0
 13057                           ;incstack = 0
 13058                           ;incstack = 0
 13059  003C02  C041  F0B6         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 13060  003C06  6BB7               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 13061  003C08  6BB8               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 13062  003C0A  6BB9               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 13063  003C0C  C0B8  F0B9         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 13064  003C10  C0B7  F0B8         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 13065  003C14  C0B6  F0B7         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 13066  003C18  6BB6               	clrf	??_sendVSCPFrame& (0+255),b
 13067  003C1A  503F               	movf	sendVSCPFrame@vscpclass,w,c
 13068  003C1C  6FBA               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 13069  003C1E  5040               	movf	sendVSCPFrame@vscpclass+1,w,c
 13070  003C20  6FBB               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 13071  003C22  6BBC               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 13072  003C24  6BBD               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 13073  003C26  C0BB  F0BD         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 13074  003C2A  C0BA  F0BC         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 13075  003C2E  6BBB               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 13076  003C30  6BBA               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 13077  003C32  C043  F0BE         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 13078  003C36  6BBF               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 13079  003C38  6BC0               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 13080  003C3A  6BC1               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 13081  003C3C  0E1A               	movlw	26
 13082  003C3E                     u10065:
 13083  003C3E  90D8               	bcf	status,0,c
 13084  003C40  37BE               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 13085  003C42  37BF               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 13086  003C44  37C0               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 13087  003C46  37C1               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 13088  003C48  2EE8               	decfsz	wreg,f,c
 13089  003C4A  D7F9               	goto	u10065
 13090  003C4C  51BA               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 13091  003C4E  11BE               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 13092  003C50  6FC2               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 13093  003C52  51BB               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 13094  003C54  11BF               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 13095  003C56  6FC3               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 13096  003C58  51BC               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 13097  003C5A  11C0               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 13098  003C5C  6FC4               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 13099  003C5E  51BD               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 13100  003C60  11C1               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 13101  003C62  6FC5               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 13102  003C64  51B6               	movf	??_sendVSCPFrame& (0+255),w,b
 13103  003C66  11C2               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 13104  003C68  6FC6               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 13105  003C6A  51B7               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 13106  003C6C  11C3               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 13107  003C6E  6FC7               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 13108  003C70  51B8               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 13109  003C72  11C4               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 13110  003C74  6FC8               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 13111  003C76  51B9               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 13112  003C78  11C5               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 13113  003C7A  6FC9               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 13114  003C7C  5042               	movf	sendVSCPFrame@nodeid,w,c
 13115  003C7E  11C6               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 13116  003C80  6E47               	movwf	sendVSCPFrame@id,c
 13117  003C82  51C7               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 13118  003C84  6E48               	movwf	sendVSCPFrame@id+1,c
 13119  003C86  51C8               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 13120  003C88  6E49               	movwf	sendVSCPFrame@id+2,c
 13121  003C8A  51C9               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 13122  003C8C  6E4A               	movwf	sendVSCPFrame@id+3,c
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;main.c: 2523: if ( !sendCANFrame( id, size, pData ) ) {
 13126  003C8E  C047  F037         	movff	sendVSCPFrame@id,?_sendCANFrame
 13127  003C92  C048  F038         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 13128  003C96  C049  F039         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 13129  003C9A  C04A  F03A         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 13130  003C9E  C044  F03B         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 13131  003CA2  C045  F03C         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 13132  003CA6  C046  F03D         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 13133  003CAA  ECF2  F01F         	call	_sendCANFrame	;wreg free
 13134  003CAE  0900               	iorlw	0
 13135  003CB0  E101               	bnz	l8527
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;main.c: 2524: return 0;
 13139  003CB2  0C00               	retlw	0
 13140  003CB4                     l8527:
 13141                           
 13142                           ; BSR set to: 0
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;main.c: 2525: }
 13146                           ;main.c: 2527: return 1;
 13147  003CB4  0C01               	retlw	1
 13148  003CB6                     __end_of_sendVSCPFrame:
 13149                           	opt stack 0
 13150                           tblptru	equ	0xFF8
 13151                           tblptrh	equ	0xFF7
 13152                           tblptrl	equ	0xFF6
 13153                           tablat	equ	0xFF5
 13154                           prodh	equ	0xFF4
 13155                           prodl	equ	0xFF3
 13156                           intcon	equ	0xFF2
 13157                           postinc0	equ	0xFEE
 13158                           wreg	equ	0xFE8
 13159                           indf1	equ	0xFE7
 13160                           fsr1h	equ	0xFE2
 13161                           fsr1l	equ	0xFE1
 13162                           indf2	equ	0xFDF
 13163                           postinc2	equ	0xFDE
 13164                           postdec2	equ	0xFDD
 13165                           plusw2	equ	0xFDB
 13166                           fsr2h	equ	0xFDA
 13167                           fsr2l	equ	0xFD9
 13168                           status	equ	0xFD8
 13169                           
 13170 ;; *************** function _sendCANFrame *****************
 13171 ;; Defined at:
 13172 ;;		line 2562 in file "../main.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;  id              4   54[COMRAM] unsigned long 
 13175 ;;  dlc             1   58[COMRAM] unsigned char 
 13176 ;;  pdata           2   59[COMRAM] PTR unsigned char 
 13177 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;  rv              1   61[COMRAM] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;                  1    wreg      unsigned char 
 13182 ;; Registers used:
 13183 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13184 ;; Tracked objects:
 13185 ;;		On entry : F/0
 13186 ;;		On exit  : F/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13189 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13192 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13193 ;;Total ram usage:        8 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    4
 13196 ;; This function calls:
 13197 ;;		_ECANSendMessage
 13198 ;; This function is called by:
 13199 ;;		_sendVSCPFrame
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           	psect	text53
 13204  003FE4                     __ptext53:
 13205                           	opt stack 0
 13206  003FE4                     _sendCANFrame:
 13207                           	opt stack 22
 13208                           
 13209                           ; BSR set to: 0
 13210                           ;main.c: 2563: uint8_t rv = 0;
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;incstack = 0
 13214                           ;incstack = 0
 13215  003FE4  6A3E               	clrf	sendCANFrame@rv,c
 13216                           
 13217                           ;main.c: 2564: sendTimer = 0;
 13218  003FE6  6A55               	clrf	_sendTimer,c
 13219                           
 13220                           ;main.c: 2566: while ( sendTimer < 1 ) {
 13221  003FE8  D017               	goto	l8817
 13222  003FEA                     l8813:
 13223                           
 13224                           ;main.c: 2567: if ( ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 13225  003FEA  C037  F012         	movff	sendCANFrame@id,?_ECANSendMessage
 13226  003FEE  C038  F013         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 13227  003FF2  C039  F014         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 13228  003FF6  C03A  F015         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 13229  003FFA  C03C  F016         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 13230  003FFE  C03D  F017         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 13231  004002  C03B  F018         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 13232  004006  0E20               	movlw	32
 13233  004008  6E19               	movwf	?_ECANSendMessage+7,c
 13234  00400A  EC95  F018         	call	_ECANSendMessage	;wreg free
 13235  00400E  0900               	iorlw	0
 13236  004010  E003               	bz	l8817
 13237                           
 13238                           ;main.c: 2568: rv = 1;
 13239  004012  0E01               	movlw	1
 13240  004014  6E3E               	movwf	sendCANFrame@rv,c
 13241                           
 13242                           ;main.c: 2569: break;
 13243  004016  D002               	goto	l656
 13244  004018                     l8817:
 13245  004018  5055               	movf	_sendTimer,w,c
 13246  00401A  E0E7               	bz	l8813
 13247  00401C                     l656:
 13248                           
 13249                           ;main.c: 2570: }
 13250                           ;main.c: 2571: }
 13251                           ;main.c: 2573: vscp_omsg.flags = 0;
 13252  00401C  0100               	movlb	0	; () banked
 13253  00401E  6BA9               	clrf	_vscp_omsg& (0+255),b
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;main.c: 2575: return rv;
 13257  004020  503E               	movf	sendCANFrame@rv,w,c
 13258                           
 13259                           ; BSR set to: 0
 13260  004022  0012               	return	
 13261  004024                     __end_of_sendCANFrame:
 13262                           	opt stack 0
 13263                           tblptru	equ	0xFF8
 13264                           tblptrh	equ	0xFF7
 13265                           tblptrl	equ	0xFF6
 13266                           tablat	equ	0xFF5
 13267                           prodh	equ	0xFF4
 13268                           prodl	equ	0xFF3
 13269                           intcon	equ	0xFF2
 13270                           postinc0	equ	0xFEE
 13271                           wreg	equ	0xFE8
 13272                           indf1	equ	0xFE7
 13273                           fsr1h	equ	0xFE2
 13274                           fsr1l	equ	0xFE1
 13275                           indf2	equ	0xFDF
 13276                           postinc2	equ	0xFDE
 13277                           postdec2	equ	0xFDD
 13278                           plusw2	equ	0xFDB
 13279                           fsr2h	equ	0xFDA
 13280                           fsr2l	equ	0xFD9
 13281                           status	equ	0xFD8
 13282                           
 13283 ;; *************** function _ECANSendMessage *****************
 13284 ;; Defined at:
 13285 ;;		line 617 in file "../ECAN.c"
 13286 ;; Parameters:    Size  Location     Type
 13287 ;;  id              4   17[COMRAM] unsigned long 
 13288 ;;  data            2   21[COMRAM] PTR unsigned char 
 13289 ;;		 -> SendInformationEvent@data(3), vscp_omsg(13), 
 13290 ;;  dataLen         1   23[COMRAM] unsigned char 
 13291 ;;  msgFlags        1   24[COMRAM] enum E18967
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;  pb             18   26[COMRAM] PTR unsigned char [9]
 13294 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13295 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13296 ;;		 -> B0CON(1), 
 13297 ;;  ptr             2   52[COMRAM] PTR unsigned char 
 13298 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13299 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13300 ;;		 -> B0CON(1), 
 13301 ;;  tempPtr         2   48[COMRAM] PTR unsigned char 
 13302 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13303 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13304 ;;		 -> B0CON(1), 
 13305 ;;  i               1   51[COMRAM] unsigned char 
 13306 ;;  temp            1   50[COMRAM] unsigned char 
 13307 ;;  tempBSEL0       1   47[COMRAM] struct .
 13308 ;;  j               1   46[COMRAM] unsigned char 
 13309 ;;  buffers         1   45[COMRAM] unsigned char 
 13310 ;;  mode            1   44[COMRAM] unsigned char 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;                  1    wreg      enum E18242
 13313 ;; Registers used:
 13314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13315 ;; Tracked objects:
 13316 ;;		On entry : 0/0
 13317 ;;		On exit  : 0/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13320 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13321 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13323 ;;      Totals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13324 ;;Total ram usage:       37 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; Hardware stack levels required when called:    3
 13327 ;; This function calls:
 13328 ;;		__CANIDToRegs
 13329 ;; This function is called by:
 13330 ;;		_sendCANFrame
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text54
 13335  00312A                     __ptext54:
 13336                           	opt stack 0
 13337  00312A                     _ECANSendMessage:
 13338                           	opt stack 22
 13339                           
 13340                           ;ECAN.c: 619: BYTE mode;
 13341                           ;ECAN.c: 620: BYTE buffers;
 13342                           ;ECAN.c: 628: BYTE i,j;
 13343                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 13344                           ;ECAN.c: 630: BYTE* pb[9];
 13345                           ;ECAN.c: 631: BYTE temp;
 13346                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 13347                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;incstack = 0
 13351                           ;incstack = 0
 13352  00312A  0E0F               	movlw	15	;volatile
 13353  00312C  6E1C               	movwf	ECANSendMessage@pb+1,c
 13354  00312E  0E20               	movlw	32	;volatile
 13355  003130  6E1B               	movwf	ECANSendMessage@pb,c
 13356                           
 13357                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 13358  003132  0E0F               	movlw	15	;volatile
 13359  003134  6E1E               	movwf	ECANSendMessage@pb+3,c
 13360  003136  0E10               	movlw	16	;volatile
 13361  003138  6E1D               	movwf	ECANSendMessage@pb+2,c
 13362                           
 13363                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 13364  00313A  0E0F               	movlw	15	;volatile
 13365  00313C  6E20               	movwf	ECANSendMessage@pb+5,c
 13366  00313E  6A1F               	clrf	ECANSendMessage@pb+4,c
 13367                           
 13368                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 13369  003140  010E               	movlb	14	; () banked
 13370  003142  0E0E               	movlw	14	;volatile
 13371  003144  6E22               	movwf	ECANSendMessage@pb+7,c
 13372  003146  0E80               	movlw	128	;volatile
 13373  003148  6E21               	movwf	ECANSendMessage@pb+6,c
 13374                           
 13375                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 13376  00314A  0E0E               	movlw	14	;volatile
 13377  00314C  6E24               	movwf	ECANSendMessage@pb+9,c
 13378  00314E  0E90               	movlw	144	;volatile
 13379  003150  6E23               	movwf	ECANSendMessage@pb+8,c
 13380                           
 13381                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 13382  003152  0E0E               	movlw	14	;volatile
 13383  003154  6E26               	movwf	ECANSendMessage@pb+11,c
 13384  003156  0EA0               	movlw	160	;volatile
 13385  003158  6E25               	movwf	ECANSendMessage@pb+10,c
 13386                           
 13387                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 13388  00315A  0E0E               	movlw	14	;volatile
 13389  00315C  6E28               	movwf	ECANSendMessage@pb+13,c
 13390  00315E  0EB0               	movlw	176	;volatile
 13391  003160  6E27               	movwf	ECANSendMessage@pb+12,c
 13392                           
 13393                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 13394  003162  0E0E               	movlw	14	;volatile
 13395  003164  6E2A               	movwf	ECANSendMessage@pb+15,c
 13396  003166  0EC0               	movlw	192	;volatile
 13397  003168  6E29               	movwf	ECANSendMessage@pb+14,c
 13398                           
 13399                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 13400  00316A  0E0E               	movlw	14	;volatile
 13401  00316C  6E2C               	movwf	ECANSendMessage@pb+17,c
 13402  00316E  0ED0               	movlw	208	;volatile
 13403  003170  6E2B               	movwf	ECANSendMessage@pb+16,c
 13404                           
 13405                           ; BSR set to: 14
 13406                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 13407  003172  5072               	movf	3954,w,c	;volatile
 13408  003174  0BC0               	andlw	192
 13409  003176  6E2D               	movwf	ECANSendMessage@mode,c
 13410                           
 13411                           ; BSR set to: 14
 13412                           ;ECAN.c: 660: if ( mode == 0x00 )
 13413  003178  662D               	tstfsz	ECANSendMessage@mode,c
 13414  00317A  D002               	goto	l8831
 13415                           
 13416                           ; BSR set to: 14
 13417                           ;ECAN.c: 661: buffers = 2;
 13418  00317C  0E02               	movlw	2
 13419  00317E  D001               	goto	L38
 13420  003180                     l8831:
 13421                           
 13422                           ; BSR set to: 14
 13423                           ;ECAN.c: 662: else
 13424                           ;ECAN.c: 663: buffers = 8;
 13425  003180  0E08               	movlw	8
 13426  003182                     L38:
 13427  003182  6E2E               	movwf	ECANSendMessage@buffers,c
 13428                           
 13429                           ; BSR set to: 14
 13430                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 13431  003184  90D8               	bcf	status,0,c
 13432  003186  317D               	rrcf	125,w,b	;volatile
 13433  003188  6E30               	movwf	ECANSendMessage@tempBSEL0,c
 13434                           
 13435                           ; BSR set to: 14
 13436                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 13437  00318A  6A34               	clrf	ECANSendMessage@i,c
 13438  00318C  D07C               	goto	l8891
 13439  00318E                     l8837:
 13440                           
 13441                           ;ECAN.c: 688: {
 13442                           ;ECAN.c: 693: ptr = pb[i];
 13443  00318E  5034               	movf	ECANSendMessage@i,w,c
 13444  003190  0D02               	mullw	2
 13445  003192  50F3               	movf	prodl,w,c
 13446  003194  0F1B               	addlw	low ECANSendMessage@pb
 13447  003196  6ED9               	movwf	fsr2l,c
 13448  003198  6ADA               	clrf	fsr2h,c
 13449  00319A  CFDE F035          	movff	postinc2,ECANSendMessage@ptr
 13450  00319E  CFDD F036          	movff	postdec2,ECANSendMessage@ptr+1
 13451                           
 13452                           ;ECAN.c: 694: tempPtr = ptr;
 13453  0031A2  C035  F031         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 13454  0031A6  C036  F032         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 13455                           
 13456                           ;ECAN.c: 702: if ( i > 2 )
 13457  0031AA  0E02               	movlw	2
 13458  0031AC  6434               	cpfsgt	ECANSendMessage@i,c
 13459  0031AE  D004               	goto	l8849
 13460                           
 13461                           ;ECAN.c: 703: {
 13462                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 13463  0031B0  90D8               	bcf	status,0,c
 13464  0031B2  3230               	rrcf	ECANSendMessage@tempBSEL0,f,c
 13465                           
 13466                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 13467  0031B4  A030               	btfss	ECANSendMessage@tempBSEL0,0,c
 13468  0031B6  D066               	goto	l8889
 13469  0031B8                     l8849:
 13470                           
 13471                           ;ECAN.c: 714: }
 13472                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 13473  0031B8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13474  0031BC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13475  0031C0  50DF               	movf	indf2,w,c
 13476  0031C2  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13477  0031C4  B61A               	btfsc	??_ECANSendMessage,3,c
 13478  0031C6  D05E               	goto	l8889
 13479                           
 13480                           ;ECAN.c: 721: {
 13481                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 13482  0031C8  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13483  0031CC  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13484  0031D0  0EFC               	movlw	252
 13485  0031D2  16DF               	andwf	indf2,f,c
 13486                           
 13487                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 13488  0031D4  C019  F01A         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 13489  0031D8  0E03               	movlw	3
 13490  0031DA  161A               	andwf	??_ECANSendMessage,f,c
 13491  0031DC  C035  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 13492  0031E0  C036  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 13493  0031E4  501A               	movf	??_ECANSendMessage,w,c
 13494  0031E6  12DF               	iorwf	indf2,f,c
 13495                           
 13496                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 13497  0031E8  AC19               	btfss	ECANSendMessage@msgFlags,6,c
 13498  0031EA  D004               	goto	l848
 13499                           
 13500                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 13501  0031EC  5018               	movf	ECANSendMessage@dataLen,w,c
 13502  0031EE  0940               	iorlw	64
 13503  0031F0  6E33               	movwf	ECANSendMessage@temp,c
 13504  0031F2  D002               	goto	l8859
 13505  0031F4                     l848:
 13506                           
 13507                           ;ECAN.c: 729: else
 13508                           ;ECAN.c: 730: temp = dataLen;
 13509  0031F4  C018  F033         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 13510  0031F8                     l8859:
 13511                           
 13512                           ;ECAN.c: 732: *(ptr+5) = temp;
 13513  0031F8  EE20 F005          	lfsr	2,5
 13514  0031FC  5035               	movf	ECANSendMessage@ptr,w,c
 13515  0031FE  26D9               	addwf	fsr2l,f,c
 13516  003200  5036               	movf	ECANSendMessage@ptr+1,w,c
 13517  003202  22DA               	addwfc	fsr2h,f,c
 13518  003204  C033  FFDF         	movff	ECANSendMessage@temp,indf2
 13519                           
 13520                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 13521  003208  AA19               	btfss	ECANSendMessage@msgFlags,5,c
 13522  00320A  D003               	goto	l850
 13523                           
 13524                           ;ECAN.c: 736: temp = 1;
 13525  00320C  0E01               	movlw	1
 13526  00320E  6E33               	movwf	ECANSendMessage@temp,c
 13527  003210  D001               	goto	l8865
 13528  003212                     l850:
 13529                           
 13530                           ;ECAN.c: 738: else
 13531                           ;ECAN.c: 739: temp = 0;
 13532  003212  6A33               	clrf	ECANSendMessage@temp,c
 13533  003214                     l8865:
 13534                           
 13535                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 13536  003214  2835               	incf	ECANSendMessage@ptr,w,c
 13537  003216  6E08               	movwf	?__CANIDToRegs,c
 13538  003218  0E00               	movlw	0
 13539  00321A  2036               	addwfc	ECANSendMessage@ptr+1,w,c
 13540  00321C  6E09               	movwf	?__CANIDToRegs+1,c
 13541  00321E  C012  F00A         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 13542  003222  C013  F00B         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 13543  003226  C014  F00C         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 13544  00322A  C015  F00D         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 13545  00322E  C033  F00E         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 13546  003232  EC66  F01A         	call	__CANIDToRegs	;wreg free
 13547                           
 13548                           ;ECAN.c: 745: ptr += 6;
 13549  003236  0E06               	movlw	6
 13550  003238  2635               	addwf	ECANSendMessage@ptr,f,c
 13551  00323A  0E00               	movlw	0
 13552  00323C  2236               	addwfc	ECANSendMessage@ptr+1,f,c
 13553                           
 13554                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 13555  00323E  6A2F               	clrf	ECANSendMessage@j,c
 13556  003240  D00F               	goto	l8879
 13557  003242                     l8871:
 13558                           
 13559                           ;ECAN.c: 748: *ptr++ = *data++;
 13560  003242  C016  FFD9         	movff	ECANSendMessage@data,fsr2l
 13561  003246  C017  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 13562  00324A  C035  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 13563  00324E  C036  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 13564  003252  CFDF FFE7          	movff	indf2,indf1
 13565  003256  4A16               	infsnz	ECANSendMessage@data,f,c
 13566  003258  2A17               	incf	ECANSendMessage@data+1,f,c
 13567  00325A  4A35               	infsnz	ECANSendMessage@ptr,f,c
 13568  00325C  2A36               	incf	ECANSendMessage@ptr+1,f,c
 13569  00325E  2A2F               	incf	ECANSendMessage@j,f,c
 13570  003260                     l8879:
 13571  003260  5018               	movf	ECANSendMessage@dataLen,w,c
 13572  003262  5C2F               	subwf	ECANSendMessage@j,w,c
 13573  003264  E3EE               	bnc	l8871
 13574                           
 13575                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 13576  003266  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13577  00326A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13578  00326E  50DF               	movf	indf2,w,c
 13579  003270  6E1A               	movwf	??_ECANSendMessage& (0+255),c
 13580  003272  B41A               	btfsc	??_ECANSendMessage,2,c
 13581  003274  0C01               	retlw	1
 13582                           
 13583                           ;ECAN.c: 753: *tempPtr |= 0x08;
 13584  003276  C031  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 13585  00327A  C032  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 13586  00327E  0E00               	movlw	0
 13587  003280  86DB               	bsf	plusw2,3,c
 13588                           
 13589                           ;ECAN.c: 755: return TRUE;
 13590  003282  0C01               	retlw	1
 13591  003284                     l8889:
 13592  003284  2A34               	incf	ECANSendMessage@i,f,c
 13593  003286                     l8891:
 13594  003286  502E               	movf	ECANSendMessage@buffers,w,c
 13595  003288  5C34               	subwf	ECANSendMessage@i,w,c
 13596  00328A  E381               	bnc	l8837
 13597                           
 13598                           ;ECAN.c: 756: }
 13599                           ;ECAN.c: 757: }
 13600                           ;ECAN.c: 760: return FALSE;
 13601  00328C  0C00               	retlw	0
 13602  00328E                     __end_of_ECANSendMessage:
 13603                           	opt stack 0
 13604                           tblptru	equ	0xFF8
 13605                           tblptrh	equ	0xFF7
 13606                           tblptrl	equ	0xFF6
 13607                           tablat	equ	0xFF5
 13608                           prodh	equ	0xFF4
 13609                           prodl	equ	0xFF3
 13610                           intcon	equ	0xFF2
 13611                           postinc0	equ	0xFEE
 13612                           wreg	equ	0xFE8
 13613                           indf1	equ	0xFE7
 13614                           fsr1h	equ	0xFE2
 13615                           fsr1l	equ	0xFE1
 13616                           indf2	equ	0xFDF
 13617                           postinc2	equ	0xFDE
 13618                           postdec2	equ	0xFDD
 13619                           plusw2	equ	0xFDB
 13620                           fsr2h	equ	0xFDA
 13621                           fsr2l	equ	0xFD9
 13622                           status	equ	0xFD8
 13623                           
 13624 ;; *************** function __CANIDToRegs *****************
 13625 ;; Defined at:
 13626 ;;		line 1099 in file "../ECAN.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 13629 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 13630 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 13631 ;;		 -> B0CON(1), RXF1SIDH(1), RXM1SIDH(1), 
 13632 ;;  val             4    9[COMRAM] unsigned long 
 13633 ;;  type            1   13[COMRAM] unsigned char 
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;  Value           1   16[COMRAM] PTR struct _CAN_MESSAGE_
 13636 ;;		 -> _CANIDToRegs@val(4), 
 13637 ;; Return value:  Size  Location     Type
 13638 ;;		None               void
 13639 ;; Registers used:
 13640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/E
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13646 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13647 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13648 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13649 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13650 ;;Total ram usage:       10 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    2
 13653 ;; This function calls:
 13654 ;;		Nothing
 13655 ;; This function is called by:
 13656 ;;		_calculateSetFilterMask
 13657 ;;		_ECANSendMessage
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           	psect	text55
 13662  0034CC                     __ptext55:
 13663                           	opt stack 0
 13664  0034CC                     __CANIDToRegs:
 13665                           	opt stack 22
 13666                           
 13667                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 13668                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 13669                           
 13670                           ;incstack = 0
 13671                           ;incstack = 0
 13672  0034CC  0E0A               	movlw	low __CANIDToRegs@val
 13673  0034CE  6E11               	movwf	__CANIDToRegs@Value,c
 13674                           
 13675                           ;ECAN.c: 1104: if ( type == 0 )
 13676  0034D0  660E               	tstfsz	__CANIDToRegs@type,c
 13677  0034D2  D022               	goto	l8907
 13678                           
 13679                           ;ECAN.c: 1105: {
 13680                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 13681  0034D4  5011               	movf	__CANIDToRegs@Value,w,c
 13682  0034D6  6ED9               	movwf	fsr2l,c
 13683  0034D8  6ADA               	clrf	fsr2h,c
 13684  0034DA  50DF               	movf	indf2,w,c
 13685  0034DC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13686  0034DE  90D8               	bcf	status,0,c
 13687  0034E0  320F               	rrcf	??__CANIDToRegs,f,c
 13688  0034E2  90D8               	bcf	status,0,c
 13689  0034E4  320F               	rrcf	??__CANIDToRegs,f,c
 13690  0034E6  90D8               	bcf	status,0,c
 13691  0034E8  300F               	rrcf	??__CANIDToRegs,w,c
 13692                           
 13693                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 13694  0034EA  D862               	call	PL30	;call to abstracted procedure
 13695  0034EC  2AD9               	incf	fsr2l,f,c
 13696  0034EE  6ADA               	clrf	fsr2h,c
 13697  0034F0  D872               	call	PL74	;call to abstracted procedure
 13698  0034F2                     u10735:
 13699  0034F2  90D8               	bcf	status,0,c
 13700  0034F4  360F               	rlcf	??__CANIDToRegs,f,c
 13701  0034F6  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13702  0034F8  D7FC               	goto	u10735
 13703  0034FA  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13704                           
 13705                           ;ECAN.c: 1109: ptr++;
 13706                           
 13707                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 13708  0034FE  D846               	call	PL18	;call to abstracted procedure
 13709  003500  D86A               	call	PL74	;call to abstracted procedure
 13710  003502                     u10745:
 13711  003502  90D8               	bcf	status,0,c
 13712  003504  360F               	rlcf	??__CANIDToRegs,f,c
 13713  003506  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13714  003508  D7FC               	goto	u10745
 13715  00350A  500F               	movf	??__CANIDToRegs,w,c
 13716  00350C  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13717  003510  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13718  003514  6EDF               	movwf	indf2,c
 13719                           
 13720                           ;ECAN.c: 1111: }
 13721  003516  0012               	return	
 13722  003518                     l8907:
 13723                           
 13724                           ;ECAN.c: 1112: else
 13725                           ;ECAN.c: 1113: {
 13726                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 13727  003518  5011               	movf	__CANIDToRegs@Value,w,c
 13728  00351A  D842               	call	PL26	;call to abstracted procedure
 13729  00351C  0E05               	movlw	5
 13730  00351E  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13731  003520                     u10755:
 13732  003520  90D8               	bcf	status,0,c
 13733  003522  320F               	rrcf	??__CANIDToRegs,f,c
 13734  003524  2E10               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 13735  003526  D7FC               	goto	u10755
 13736  003528  500F               	movf	??__CANIDToRegs,w,c
 13737                           
 13738                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 13739  00352A  D842               	call	PL30	;call to abstracted procedure
 13740  00352C  0E03               	movlw	3
 13741  00352E  D849               	call	PL36	;call to abstracted procedure
 13742  003530  360F               	rlcf	??__CANIDToRegs,f,c
 13743  003532  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13744                           
 13745                           ;ECAN.c: 1117: ptr++;
 13746                           
 13747                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 13748  003536  D82A               	call	PL18	;call to abstracted procedure
 13749  003538  0E02               	movlw	2
 13750  00353A  D843               	call	PL36	;call to abstracted procedure
 13751  00353C  340F               	rlcf	??__CANIDToRegs,w,c
 13752  00353E  0BE0               	andlw	224
 13753  003540  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13754  003544  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13755  003548  6EDF               	movwf	indf2,c
 13756                           
 13757                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 13758  00354A  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13759  00354E  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13760  003552  0E00               	movlw	0
 13761  003554  86DB               	bsf	plusw2,3,c
 13762                           
 13763                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 13764  003556  5011               	movf	__CANIDToRegs@Value,w,c
 13765  003558  D823               	call	PL26	;call to abstracted procedure
 13766  00355A  0E03               	movlw	3
 13767  00355C  160F               	andwf	??__CANIDToRegs,f,c
 13768  00355E  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13769                           
 13770                           ;ECAN.c: 1122: ptr++;
 13771                           
 13772                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 13773  003562  D814               	call	PL18	;call to abstracted procedure
 13774  003564  2AD9               	incf	fsr2l,f,c
 13775  003566  6ADA               	clrf	fsr2h,c
 13776  003568  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13777  00356C  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13778  003570  CFDF FFE7          	movff	indf2,indf1
 13779                           
 13780                           ;ECAN.c: 1124: ptr++;
 13781  003574  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13782  003576  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13783                           
 13784                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 13785  003578  5011               	movf	__CANIDToRegs@Value,w,c
 13786  00357A  6ED9               	movwf	fsr2l,c
 13787  00357C  6ADA               	clrf	fsr2h,c
 13788  00357E  C008  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 13789  003582  C009  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 13790  003586  CFDF FFE7          	movff	indf2,indf1
 13791  00358A  0012               	return	
 13792  00358C                     __end_of__CANIDToRegs:
 13793                           	opt stack 0
 13794  00358C                     PL18:
 13795                           	opt stack 22
 13796  00358C  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13797  003590  500F               	movf	??__CANIDToRegs,w,c
 13798  003592  12DF               	iorwf	indf2,f,c
 13799  003594  4A08               	infsnz	__CANIDToRegs@ptr,f,c
 13800  003596  2A09               	incf	__CANIDToRegs@ptr+1,f,c
 13801  003598  5011               	movf	__CANIDToRegs@Value,w,c
 13802  00359A  6ED9               	movwf	fsr2l,c
 13803  00359C  6ADA               	clrf	fsr2h,c
 13804  00359E  0012               	return	
 13805  0035A0                     __end_ofPL18:
 13806                           	opt stack 0
 13807  0035A0                     PL26:
 13808                           	opt stack 22
 13809  0035A0  6ED9               	movwf	fsr2l,c
 13810  0035A2  6ADA               	clrf	fsr2h,c
 13811  0035A4  0E02               	movlw	2
 13812  0035A6  26D9               	addwf	fsr2l,f,c
 13813  0035A8  6ADA               	clrf	fsr2h,c
 13814  0035AA  50DF               	movf	indf2,w,c
 13815  0035AC  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13816  0035AE  0012               	return	
 13817  0035B0                     __end_ofPL26:
 13818                           	opt stack 0
 13819  0035B0                     PL30:
 13820                           	opt stack 22
 13821  0035B0  C008  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 13822  0035B4  C009  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 13823  0035B8  6EDF               	movwf	indf2,c
 13824  0035BA  5011               	movf	__CANIDToRegs@Value,w,c
 13825  0035BC  6ED9               	movwf	fsr2l,c
 13826  0035BE  6ADA               	clrf	fsr2h,c
 13827  0035C0  0012               	return	
 13828  0035C2                     __end_ofPL30:
 13829                           	opt stack 0
 13830  0035C2                     PL36:
 13831                           	opt stack 22
 13832  0035C2  26D9               	addwf	fsr2l,f,c
 13833  0035C4  6ADA               	clrf	fsr2h,c
 13834  0035C6  50DF               	movf	indf2,w,c
 13835  0035C8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13836  0035CA  90D8               	bcf	status,0,c
 13837  0035CC  360F               	rlcf	??__CANIDToRegs,f,c
 13838  0035CE  90D8               	bcf	status,0,c
 13839  0035D0  360F               	rlcf	??__CANIDToRegs,f,c
 13840  0035D2  90D8               	bcf	status,0,c
 13841  0035D4  0012               	return	
 13842  0035D6                     __end_ofPL36:
 13843                           	opt stack 0
 13844  0035D6                     PL74:
 13845                           	opt stack 22
 13846  0035D6  50DF               	movf	indf2,w,c
 13847  0035D8  6E0F               	movwf	??__CANIDToRegs& (0+255),c
 13848  0035DA  0E05               	movlw	5
 13849  0035DC  6E10               	movwf	(??__CANIDToRegs+1)& (0+255),c
 13850  0035DE  0C05               	retlw	5
 13851  0035E0                     __end_ofPL74:
 13852                           	opt stack 0
 13853                           tblptru	equ	0xFF8
 13854                           tblptrh	equ	0xFF7
 13855                           tblptrl	equ	0xFF6
 13856                           tablat	equ	0xFF5
 13857                           prodh	equ	0xFF4
 13858                           prodl	equ	0xFF3
 13859                           intcon	equ	0xFF2
 13860                           postinc0	equ	0xFEE
 13861                           wreg	equ	0xFE8
 13862                           indf1	equ	0xFE7
 13863                           fsr1h	equ	0xFE2
 13864                           fsr1l	equ	0xFE1
 13865                           indf2	equ	0xFDF
 13866                           postinc2	equ	0xFDE
 13867                           postdec2	equ	0xFDD
 13868                           plusw2	equ	0xFDB
 13869                           fsr2h	equ	0xFDA
 13870                           fsr2l	equ	0xFD9
 13871                           status	equ	0xFD8
 13872                           
 13873 ;; *************** function _vscp_getEvent *****************
 13874 ;; Defined at:
 13875 ;;		line 1295 in file "../../vscp_firmware/common/vscp_firmware.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;		None
 13878 ;; Auto vars:     Size  Location     Type
 13879 ;;  rv              1   43[COMRAM] unsigned char 
 13880 ;; Return value:  Size  Location     Type
 13881 ;;                  1    wreg      unsigned char 
 13882 ;; Registers used:
 13883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13884 ;; Tracked objects:
 13885 ;;		On entry : F/0
 13886 ;;		On exit  : 0/0
 13887 ;;		Unchanged: 0/0
 13888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13893 ;;Total ram usage:        1 bytes
 13894 ;; Hardware stack levels used:    1
 13895 ;; Hardware stack levels required when called:    6
 13896 ;; This function calls:
 13897 ;;		_getVSCPFrame
 13898 ;; This function is called by:
 13899 ;;		_main
 13900 ;; This function uses a non-reentrant model
 13901 ;;
 13902                           
 13903                           	psect	text56
 13904  004084                     __ptext56:
 13905                           	opt stack 0
 13906  004084                     _vscp_getEvent:
 13907                           	opt stack 23
 13908                           
 13909                           ; BSR set to: 0
 13910                           ;vscp_firmware.c: 1296: int8_t rv;
 13911                           ;vscp_firmware.c: 1302: if (vscp_imsg.flags & 0x80) return !0;
 13912                           
 13913                           ;incstack = 0
 13914                           ;incstack = 0
 13915  004084  BF9B               	btfsc	_vscp_imsg& (0+255),7,b
 13916  004086  0012               	return	
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;vscp_firmware.c: 1305: if ((rv = getVSCPFrame(&vscp_imsg.vscp_class,
 13920                           ;vscp_firmware.c: 1306: &vscp_imsg.vscp_type,
 13921                           ;vscp_firmware.c: 1307: &vscp_imsg.oaddr,
 13922                           ;vscp_firmware.c: 1308: &vscp_imsg.priority,
 13923                           ;vscp_firmware.c: 1309: &vscp_imsg.flags,
 13924                           ;vscp_firmware.c: 1310: vscp_imsg.data))) {
 13925  004088  0E9F               	movlw	low (_vscp_imsg+4)
 13926  00408A  6E1E               	movwf	?_getVSCPFrame,c
 13927  00408C  0EA0               	movlw	low (_vscp_imsg+5)
 13928  00408E  6E1F               	movwf	?_getVSCPFrame+1,c
 13929  004090  0E9C               	movlw	low (_vscp_imsg+1)
 13930  004092  6E20               	movwf	?_getVSCPFrame+2,c
 13931  004094  0E9B               	movlw	low _vscp_imsg
 13932  004096  6E21               	movwf	?_getVSCPFrame+3,c
 13933  004098  0EA1               	movlw	low (_vscp_imsg+6)
 13934  00409A  6E22               	movwf	?_getVSCPFrame+4,c
 13935  00409C  0E9D               	movlw	(_vscp_imsg+2)& (0+255)
 13936  00409E  ECE2  F01E         	call	_getVSCPFrame
 13937  0040A2  6E2C               	movwf	vscp_getEvent@rv,c
 13938  0040A4  502C               	movf	vscp_getEvent@rv& (0+255),w,c
 13939  0040A6  B4D8               	btfsc	status,2,c
 13940  0040A8  0012               	return	
 13941                           
 13942                           ;vscp_firmware.c: 1312: vscp_imsg.flags |= 0x80;
 13943  0040AA  0100               	movlb	0	; () banked
 13944  0040AC  8F9B               	bsf	_vscp_imsg& (0+255),7,b
 13945  0040AE  0012               	return	
 13946  0040B0                     __end_of_vscp_getEvent:
 13947                           	opt stack 0
 13948                           tblptru	equ	0xFF8
 13949                           tblptrh	equ	0xFF7
 13950                           tblptrl	equ	0xFF6
 13951                           tablat	equ	0xFF5
 13952                           prodh	equ	0xFF4
 13953                           prodl	equ	0xFF3
 13954                           intcon	equ	0xFF2
 13955                           postinc0	equ	0xFEE
 13956                           wreg	equ	0xFE8
 13957                           indf1	equ	0xFE7
 13958                           fsr1h	equ	0xFE2
 13959                           fsr1l	equ	0xFE1
 13960                           indf2	equ	0xFDF
 13961                           postinc2	equ	0xFDE
 13962                           postdec2	equ	0xFDD
 13963                           plusw2	equ	0xFDB
 13964                           fsr2h	equ	0xFDA
 13965                           fsr2l	equ	0xFD9
 13966                           status	equ	0xFD8
 13967                           
 13968 ;; *************** function _getVSCPFrame *****************
 13969 ;; Defined at:
 13970 ;;		line 2541 in file "../main.c"
 13971 ;; Parameters:    Size  Location     Type
 13972 ;;  pvscpclass      1    wreg     PTR unsigned short 
 13973 ;;		 -> vscp_imsg(14), 
 13974 ;;  pvscptype       1   29[COMRAM] PTR unsigned char 
 13975 ;;		 -> vscp_imsg(14), 
 13976 ;;  pNodeId         1   30[COMRAM] PTR unsigned char 
 13977 ;;		 -> vscp_imsg(14), 
 13978 ;;  pPriority       1   31[COMRAM] PTR unsigned char 
 13979 ;;		 -> vscp_imsg(14), 
 13980 ;;  pSize           1   32[COMRAM] PTR unsigned char 
 13981 ;;		 -> vscp_imsg(14), 
 13982 ;;  pData           1   33[COMRAM] PTR unsigned char 
 13983 ;;		 -> vscp_imsg(14), 
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;  pvscpclass      1   38[COMRAM] PTR unsigned short 
 13986 ;;		 -> vscp_imsg(14), 
 13987 ;;  id              4   39[COMRAM] unsigned long 
 13988 ;; Return value:  Size  Location     Type
 13989 ;;                  1    wreg      unsigned char 
 13990 ;; Registers used:
 13991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13992 ;; Tracked objects:
 13993 ;;		On entry : F/0
 13994 ;;		On exit  : 0/0
 13995 ;;		Unchanged: 0/0
 13996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13997 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13998 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13999 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14000 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14001 ;;Total ram usage:       14 bytes
 14002 ;; Hardware stack levels used:    1
 14003 ;; Hardware stack levels required when called:    5
 14004 ;; This function calls:
 14005 ;;		_getCANFrame
 14006 ;; This function is called by:
 14007 ;;		_vscp_getEvent
 14008 ;; This function uses a non-reentrant model
 14009 ;;
 14010                           
 14011                           	psect	text57
 14012  003DC4                     __ptext57:
 14013                           	opt stack 0
 14014  003DC4                     _getVSCPFrame:
 14015                           	opt stack 23
 14016                           
 14017                           ;incstack = 0
 14018                           ;incstack = 0
 14019                           ;getVSCPFrame@pvscpclass stored from wreg
 14020  003DC4  CFE8 F027          	movff	wreg,getVSCPFrame@pvscpclass
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;main.c: 2542: uint32_t id;
 14024                           ;main.c: 2544: if ( !getCANFrame(&id, pSize, pData) ) {
 14025  003DC8  C021  F01A         	movff	getVSCPFrame@pSize,?_getCANFrame
 14026  003DCC  C022  F01B         	movff	getVSCPFrame@pData,?_getCANFrame+1
 14027  003DD0  0E28               	movlw	getVSCPFrame@id& (0+255)
 14028  003DD2  ECA7  F020         	call	_getCANFrame
 14029  003DD6  0900               	iorlw	0
 14030  003DD8  E101               	bnz	l6479
 14031                           
 14032                           ;main.c: 2545: return 0;
 14033  003DDA  0C00               	retlw	0
 14034  003DDC                     l6479:
 14035                           
 14036                           ;main.c: 2546: }
 14037                           ;main.c: 2548: *pNodeId = id & 0x0ff;
 14038  003DDC  501F               	movf	getVSCPFrame@pNodeId,w,c
 14039  003DDE  6ED9               	movwf	fsr2l,c
 14040  003DE0  6ADA               	clrf	fsr2h,c
 14041  003DE2  C028  FFDF         	movff	getVSCPFrame@id,indf2
 14042                           
 14043                           ;main.c: 2549: *pvscptype = (id >> 8) & 0xff;
 14044  003DE6  501E               	movf	getVSCPFrame@pvscptype,w,c
 14045  003DE8  6ED9               	movwf	fsr2l,c
 14046  003DEA  6ADA               	clrf	fsr2h,c
 14047  003DEC  C029  FFDF         	movff	getVSCPFrame@id+1,indf2
 14048                           
 14049                           ;main.c: 2550: *pvscpclass = (id >> 16) & 0x1ff;
 14050  003DF0  502A               	movf	(getVSCPFrame@id+2)& (0+255),w,c
 14051  003DF2  6E23               	movwf	??_getVSCPFrame& (0+255),c
 14052  003DF4  0E01               	movlw	1
 14053  003DF6  142B               	andwf	(getVSCPFrame@id+3)& (0+255),w,c
 14054  003DF8  6E24               	movwf	(??_getVSCPFrame+1)& (0+255),c
 14055  003DFA  5027               	movf	getVSCPFrame@pvscpclass,w,c
 14056  003DFC  6ED9               	movwf	fsr2l,c
 14057  003DFE  6ADA               	clrf	fsr2h,c
 14058  003E00  C023  FFDE         	movff	??_getVSCPFrame,postinc2
 14059  003E04  C024  FFDD         	movff	??_getVSCPFrame+1,postdec2
 14060                           
 14061                           ;main.c: 2551: *pPriority = (uint16_t) (0x07 & (id >> 26));
 14062  003E08  5020               	movf	getVSCPFrame@pPriority,w,c
 14063  003E0A  6ED9               	movwf	fsr2l,c
 14064  003E0C  6ADA               	clrf	fsr2h,c
 14065  003E0E  C028  F023         	movff	getVSCPFrame@id,??_getVSCPFrame
 14066  003E12  C029  F024         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 14067  003E16  C02A  F025         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 14068  003E1A  C02B  F026         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 14069  003E1E  0E1B               	movlw	27
 14070  003E20  D005               	goto	u6780
 14071  003E22                     u6785:
 14072  003E22  90D8               	bcf	status,0,c
 14073  003E24  3226               	rrcf	??_getVSCPFrame+3,f,c
 14074  003E26  3225               	rrcf	??_getVSCPFrame+2,f,c
 14075  003E28  3224               	rrcf	??_getVSCPFrame+1,f,c
 14076  003E2A  3223               	rrcf	??_getVSCPFrame,f,c
 14077  003E2C                     u6780:
 14078  003E2C  2EE8               	decfsz	wreg,f,c
 14079  003E2E  D7F9               	goto	u6785
 14080  003E30  5023               	movf	??_getVSCPFrame,w,c
 14081  003E32  0B07               	andlw	7
 14082  003E34  6EDF               	movwf	indf2,c
 14083                           
 14084                           ;main.c: 2553: return 1;
 14085  003E36  0C01               	retlw	1
 14086  003E38                     __end_of_getVSCPFrame:
 14087                           	opt stack 0
 14088                           tblptru	equ	0xFF8
 14089                           tblptrh	equ	0xFF7
 14090                           tblptrl	equ	0xFF6
 14091                           tablat	equ	0xFF5
 14092                           prodh	equ	0xFF4
 14093                           prodl	equ	0xFF3
 14094                           intcon	equ	0xFF2
 14095                           postinc0	equ	0xFEE
 14096                           wreg	equ	0xFE8
 14097                           indf1	equ	0xFE7
 14098                           fsr1h	equ	0xFE2
 14099                           fsr1l	equ	0xFE1
 14100                           indf2	equ	0xFDF
 14101                           postinc2	equ	0xFDE
 14102                           postdec2	equ	0xFDD
 14103                           plusw2	equ	0xFDB
 14104                           fsr2h	equ	0xFDA
 14105                           fsr2l	equ	0xFD9
 14106                           status	equ	0xFD8
 14107                           
 14108 ;; *************** function _getCANFrame *****************
 14109 ;; Defined at:
 14110 ;;		line 2583 in file "../main.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;  pid             1    wreg     PTR unsigned long 
 14113 ;;		 -> getVSCPFrame@id(4), 
 14114 ;;  pdlc            1   25[COMRAM] PTR unsigned char 
 14115 ;;		 -> vscp_imsg(14), 
 14116 ;;  pdata           1   26[COMRAM] PTR unsigned char 
 14117 ;;		 -> vscp_imsg(14), 
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;  pid             1   27[COMRAM] PTR unsigned long 
 14120 ;;		 -> getVSCPFrame@id(4), 
 14121 ;;  flags           1   28[COMRAM] enum E19010
 14122 ;; Return value:  Size  Location     Type
 14123 ;;                  1    wreg      unsigned char 
 14124 ;; Registers used:
 14125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14126 ;; Tracked objects:
 14127 ;;		On entry : F/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14131 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14134 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14135 ;;Total ram usage:        4 bytes
 14136 ;; Hardware stack levels used:    1
 14137 ;; Hardware stack levels required when called:    4
 14138 ;; This function calls:
 14139 ;;		_ECANReceiveMessage
 14140 ;; This function is called by:
 14141 ;;		_getVSCPFrame
 14142 ;; This function uses a non-reentrant model
 14143 ;;
 14144                           
 14145                           	psect	text58
 14146  00414E                     __ptext58:
 14147                           	opt stack 0
 14148  00414E                     _getCANFrame:
 14149                           	opt stack 23
 14150                           
 14151                           ;incstack = 0
 14152                           ;incstack = 0
 14153                           ;getCANFrame@pid stored from wreg
 14154  00414E  CFE8 F01C          	movff	wreg,getCANFrame@pid
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;main.c: 2584: ECAN_RX_MSG_FLAGS flags;
 14158                           ;main.c: 2588: if (vscp_imsg.flags & 0x80) return 0;
 14159  004152  BF9B               	btfsc	_vscp_imsg& (0+255),7,b
 14160  004154                     l6491:
 14161  004154  0C00               	retlw	0
 14162                           
 14163                           ; BSR set to: 0
 14164                           ;main.c: 2590: if ( ECANReceiveMessage( pid, pdata, pdlc, &flags) ) {
 14165  004156  C01B  F00F         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 14166  00415A  C01A  F010         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+1
 14167  00415E  0E1D               	movlw	low getCANFrame@flags
 14168  004160  6E11               	movwf	?_ECANReceiveMessage+2,c
 14169  004162  501C               	movf	getCANFrame@pid,w,c
 14170  004164  ECE5  F015         	call	_ECANReceiveMessage
 14171  004168  0900               	iorlw	0
 14172  00416A  E0F4               	bz	l6491
 14173                           
 14174                           ;main.c: 2593: if (flags & ECAN_RX_RTR_FRAME) return 0;
 14175  00416C  AC1D               	btfss	getCANFrame@flags,6,c
 14176                           
 14177                           ;main.c: 2596: if (!(flags & ECAN_RX_XTD_FRAME)) return 0;
 14178  00416E  AA1D               	btfss	getCANFrame@flags,5,c
 14179  004170  0C00               	retlw	0
 14180                           
 14181                           ;main.c: 2598: return 1;
 14182  004172  0C01               	retlw	1
 14183  004174                     __end_of_getCANFrame:
 14184                           	opt stack 0
 14185                           tblptru	equ	0xFF8
 14186                           tblptrh	equ	0xFF7
 14187                           tblptrl	equ	0xFF6
 14188                           tablat	equ	0xFF5
 14189                           prodh	equ	0xFF4
 14190                           prodl	equ	0xFF3
 14191                           intcon	equ	0xFF2
 14192                           postinc0	equ	0xFEE
 14193                           wreg	equ	0xFE8
 14194                           indf1	equ	0xFE7
 14195                           fsr1h	equ	0xFE2
 14196                           fsr1l	equ	0xFE1
 14197                           indf2	equ	0xFDF
 14198                           postinc2	equ	0xFDE
 14199                           postdec2	equ	0xFDD
 14200                           plusw2	equ	0xFDB
 14201                           fsr2h	equ	0xFDA
 14202                           fsr2l	equ	0xFD9
 14203                           status	equ	0xFD8
 14204                           
 14205 ;; *************** function _ECANReceiveMessage *****************
 14206 ;; Defined at:
 14207 ;;		line 803 in file "../ECAN.c"
 14208 ;; Parameters:    Size  Location     Type
 14209 ;;  id              1    wreg     PTR unsigned long 
 14210 ;;		 -> getVSCPFrame@id(4), 
 14211 ;;  data            1   14[COMRAM] PTR unsigned char 
 14212 ;;		 -> vscp_imsg(14), 
 14213 ;;  dataLen         1   15[COMRAM] PTR unsigned char 
 14214 ;;		 -> vscp_imsg(14), 
 14215 ;;  msgFlags        1   16[COMRAM] PTR enum E18985
 14216 ;;		 -> getCANFrame@flags(1), 
 14217 ;; Auto vars:     Size  Location     Type
 14218 ;;  id              1   19[COMRAM] PTR unsigned long 
 14219 ;;		 -> getVSCPFrame@id(4), 
 14220 ;;  ptr             2   23[COMRAM] PTR unsigned char 
 14221 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14222 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14223 ;;  savedPtr        2   17[COMRAM] PTR unsigned char 
 14224 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14225 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14226 ;;  temp            1   22[COMRAM] struct .
 14227 ;;  mode            1   21[COMRAM] unsigned char 
 14228 ;;  i               1   20[COMRAM] unsigned char 
 14229 ;; Return value:  Size  Location     Type
 14230 ;;                  1    wreg      enum E18242
 14231 ;; Registers used:
 14232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14233 ;; Tracked objects:
 14234 ;;		On entry : F/0
 14235 ;;		On exit  : 0/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14238 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14239 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14241 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14242 ;;Total ram usage:       11 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; Hardware stack levels required when called:    3
 14245 ;; This function calls:
 14246 ;;		__ECANPointBuffer
 14247 ;;		__RegsToCANID
 14248 ;; This function is called by:
 14249 ;;		_getCANFrame
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           	psect	text59
 14254  002BCA                     __ptext59:
 14255                           	opt stack 0
 14256  002BCA                     _ECANReceiveMessage:
 14257                           	opt stack 23
 14258                           
 14259                           ;incstack = 0
 14260                           ;incstack = 0
 14261                           ;ECANReceiveMessage@id stored from wreg
 14262  002BCA  CFE8 F014          	movff	wreg,ECANReceiveMessage@id
 14263                           
 14264                           ; BSR set to: 0
 14265                           ;ECAN.c: 805: BYTE mode;
 14266                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 14267                           ;ECAN.c: 809: char i;
 14268                           ;ECAN.c: 810: BYTE_VAL temp;
 14269                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 14270  002BCE  6A54               	clrf	__ECANRxFilterHitInfo,c
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 14274  002BD0  5072               	movf	3954,w,c	;volatile
 14275  002BD2  0BC0               	andlw	192
 14276  002BD4  6E16               	movwf	ECANReceiveMessage@mode,c
 14277                           
 14278                           ; BSR set to: 0
 14279                           ;ECAN.c: 816: if ( mode == 0x00 )
 14280  002BD6  6616               	tstfsz	ECANReceiveMessage@mode,c
 14281  002BD8  D030               	goto	l6627
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;ECAN.c: 822: {
 14285                           ;ECAN.c: 824: if ( RXB0FUL )
 14286  002BDA  AE60               	btfss	3936,7,c	;volatile
 14287  002BDC  D012               	goto	l861
 14288                           
 14289                           ; BSR set to: 0
 14290                           ;ECAN.c: 825: {
 14291                           ;ECAN.c: 827: RXB0IF = 0;
 14292  002BDE  9077               	bcf	3959,0,c	;volatile
 14293                           
 14294                           ;ECAN.c: 830: if ( RXB0OVFL )
 14295  002BE0  AE71               	btfss	3953,7,c	;volatile
 14296  002BE2  D006               	goto	l6603
 14297                           
 14298                           ; BSR set to: 0
 14299                           ;ECAN.c: 831: {
 14300                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 14301  002BE4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14302  002BE6  6ED9               	movwf	fsr2l,c
 14303  002BE8  6ADA               	clrf	fsr2h,c
 14304  002BEA  0E00               	movlw	0
 14305  002BEC  86DB               	bsf	plusw2,3,c
 14306                           
 14307                           ; BSR set to: 0
 14308                           ;ECAN.c: 833: RXB0OVFL = 0;
 14309  002BEE  9E71               	bcf	3953,7,c	;volatile
 14310  002BF0                     l6603:
 14311                           
 14312                           ; BSR set to: 0
 14313                           ;ECAN.c: 834: }
 14314                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 14315  002BF0  A060               	btfss	3936,0,c	;volatile
 14316  002BF2  D002               	bra	u6955
 14317  002BF4  8054               	bsf	__ECANRxFilterHitInfo,0,c
 14318  002BF6  D001               	bra	u6957
 14319  002BF8                     u6955:
 14320  002BF8  9054               	bcf	__ECANRxFilterHitInfo,0,c
 14321  002BFA                     u6957:
 14322                           
 14323                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 14324  002BFA  0E0F               	movlw	15	;volatile
 14325  002BFC  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14326  002BFE  0E60               	movlw	96	;volatile
 14327  002C00  D01A               	goto	L39
 14328  002C02                     l861:
 14329                           
 14330                           ; BSR set to: 0
 14331                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 14332  002C02  010F               	movlb	15	; () banked
 14333  002C04  AF30               	btfss	48,7,b	;volatile
 14334  002C06  0C00               	retlw	0
 14335                           
 14336                           ; BSR set to: 15
 14337                           ;ECAN.c: 842: {
 14338                           ;ECAN.c: 844: RXB1IF = 0;
 14339  002C08  9277               	bcf	3959,1,c	;volatile
 14340                           
 14341                           ;ECAN.c: 847: if ( RXB1OVFL )
 14342  002C0A  AC71               	btfss	3953,6,c	;volatile
 14343  002C0C  D006               	goto	l6613
 14344                           
 14345                           ; BSR set to: 15
 14346                           ;ECAN.c: 848: {
 14347                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 14348  002C0E  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14349  002C10  6ED9               	movwf	fsr2l,c
 14350  002C12  6ADA               	clrf	fsr2h,c
 14351  002C14  0E00               	movlw	0
 14352  002C16  86DB               	bsf	plusw2,3,c
 14353                           
 14354                           ; BSR set to: 15
 14355                           ;ECAN.c: 850: RXB1OVFL = 0;
 14356  002C18  9C71               	bcf	3953,6,c	;volatile
 14357  002C1A                     l6613:
 14358                           
 14359                           ; BSR set to: 15
 14360                           ;ECAN.c: 851: }
 14361                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 14362  002C1A  5130               	movf	48,w,b	;volatile
 14363  002C1C  0B07               	andlw	7
 14364  002C1E  6E54               	movwf	__ECANRxFilterHitInfo,c
 14365                           
 14366                           ; BSR set to: 15
 14367                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 14368  002C20  0E02               	movlw	2
 14369  002C22  6054               	cpfslt	__ECANRxFilterHitInfo,c
 14370  002C24  D005               	goto	l6619
 14371                           
 14372                           ; BSR set to: 15
 14373                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 14374  002C26  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14375  002C28  6ED9               	movwf	fsr2l,c
 14376  002C2A  6ADA               	clrf	fsr2h,c
 14377  002C2C  0E00               	movlw	0
 14378  002C2E  8EDB               	bsf	plusw2,7,c
 14379  002C30                     l6619:
 14380                           
 14381                           ; BSR set to: 15
 14382                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 14383  002C30  0E0F               	movlw	15	;volatile
 14384  002C32  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14385  002C34  0E30               	movlw	48	;volatile
 14386  002C36                     L39:
 14387  002C36  6E18               	movwf	ECANReceiveMessage@ptr,c
 14388                           
 14389                           ;ECAN.c: 860: }
 14390  002C38  D05B               	goto	l6681
 14391  002C3A                     l6627:
 14392                           
 14393                           ; BSR set to: 0
 14394                           ;ECAN.c: 869: else if ( mode == 0x40 )
 14395  002C3A  5016               	movf	ECANReceiveMessage@mode,w,c
 14396  002C3C  0A40               	xorlw	64
 14397  002C3E  E13E               	bnz	l871
 14398                           
 14399                           ; BSR set to: 0
 14400                           ;ECAN.c: 875: {
 14401                           ;ECAN.c: 876: if ( RXB0FUL )
 14402  002C40  AE60               	btfss	3936,7,c	;volatile
 14403  002C42  D004               	goto	l872
 14404                           
 14405                           ; BSR set to: 0
 14406                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 14407  002C44  0E0F               	movlw	15	;volatile
 14408  002C46  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14409  002C48  0E60               	movlw	96	;volatile
 14410  002C4A  D036               	goto	L46
 14411  002C4C                     l872:
 14412                           
 14413                           ; BSR set to: 0
 14414                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 14415  002C4C  010F               	movlb	15	; () banked
 14416  002C4E  AF30               	btfss	48,7,b	;volatile
 14417  002C50  D004               	goto	l874
 14418                           
 14419                           ; BSR set to: 15
 14420                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 14421  002C52  0E0F               	movlw	15	;volatile
 14422  002C54  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14423  002C56  0E30               	movlw	48	;volatile
 14424  002C58  D02F               	goto	L46
 14425  002C5A                     l874:
 14426                           
 14427                           ; BSR set to: 15
 14428                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 14429  002C5A  010E               	movlb	14
 14430  002C5C  A57D               	btfss	125,2,b	;volatile
 14431  002C5E  AF80               	btfss	128,7,b	;volatile
 14432  002C60  D004               	goto	l876
 14433                           
 14434                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 14435  002C62  0E0E               	movlw	14	;volatile
 14436  002C64  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14437  002C66  0E80               	movlw	128	;volatile
 14438  002C68  D027               	goto	L46
 14439  002C6A                     l876:
 14440                           
 14441                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 14442  002C6A  010E               	movlb	14
 14443  002C6C  A77D               	btfss	125,3,b	;volatile
 14444  002C6E  AF90               	btfss	144,7,b	;volatile
 14445  002C70  D004               	goto	l878
 14446                           
 14447                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 14448  002C72  0E0E               	movlw	14	;volatile
 14449  002C74  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14450  002C76  0E90               	movlw	144	;volatile
 14451  002C78  D01F               	goto	L46
 14452  002C7A                     l878:
 14453                           
 14454                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 14455  002C7A  010E               	movlb	14
 14456  002C7C  A97D               	btfss	125,4,b	;volatile
 14457  002C7E  AFA0               	btfss	160,7,b	;volatile
 14458  002C80  D004               	goto	l880
 14459                           
 14460                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 14461  002C82  0E0E               	movlw	14	;volatile
 14462  002C84  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14463  002C86  0EA0               	movlw	160	;volatile
 14464  002C88  D017               	goto	L46
 14465  002C8A                     l880:
 14466                           
 14467                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 14468  002C8A  010E               	movlb	14
 14469  002C8C  AB7D               	btfss	125,5,b	;volatile
 14470  002C8E  AFB0               	btfss	176,7,b	;volatile
 14471  002C90  D004               	goto	l882
 14472                           
 14473                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 14474  002C92  0E0E               	movlw	14	;volatile
 14475  002C94  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14476  002C96  0EB0               	movlw	176	;volatile
 14477  002C98  D00F               	goto	L46
 14478  002C9A                     l882:
 14479                           
 14480                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 14481  002C9A  010E               	movlb	14
 14482  002C9C  AD7D               	btfss	125,6,b	;volatile
 14483  002C9E  AFC0               	btfss	192,7,b	;volatile
 14484  002CA0  D004               	goto	l884
 14485                           
 14486                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 14487  002CA2  0E0E               	movlw	14	;volatile
 14488  002CA4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14489  002CA6  0EC0               	movlw	192	;volatile
 14490  002CA8  D007               	goto	L46
 14491  002CAA                     l884:
 14492                           
 14493                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 14494  002CAA  010E               	movlb	14
 14495  002CAC  AF7D               	btfss	125,7,b	;volatile
 14496  002CAE  AFD0               	btfss	208,7,b	;volatile
 14497  002CB0  0C00               	retlw	0
 14498                           
 14499                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 14500  002CB2  0E0E               	movlw	14	;volatile
 14501  002CB4  6E19               	movwf	ECANReceiveMessage@ptr+1,c
 14502  002CB6  0ED0               	movlw	208	;volatile
 14503  002CB8                     L46:
 14504  002CB8  6E18               	movwf	ECANReceiveMessage@ptr,c
 14505  002CBA  D00A               	goto	l6671
 14506  002CBC                     l871:
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;ECAN.c: 910: else
 14510                           ;ECAN.c: 915: {
 14511                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 14512  002CBC  AE71               	btfss	3953,7,c	;volatile
 14513  002CBE  0C00               	retlw	0
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;ECAN.c: 917: {
 14517                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 14518  002CC0  506F               	movf	3951,w,c	;volatile
 14519  002CC2  0B07               	andlw	7
 14520  002CC4  ECA3  F01E         	call	__ECANPointBuffer
 14521  002CC8  C008  F018         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 14522  002CCC  C009  F019         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 14523  002CD0                     l6671:
 14524                           
 14525                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 14526  002CD0  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14527  002CD4  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14528  002CD8  50DF               	movf	indf2,w,c
 14529  002CDA  0B1F               	andlw	31
 14530  002CDC  6E54               	movwf	__ECANRxFilterHitInfo,c
 14531                           
 14532                           ;ECAN.c: 932: RXB1IF = 0;
 14533  002CDE  9277               	bcf	3959,1,c	;volatile
 14534                           
 14535                           ;ECAN.c: 934: if ( RXB1OVFL )
 14536  002CE0  AC71               	btfss	3953,6,c	;volatile
 14537  002CE2  D006               	goto	l6681
 14538                           
 14539                           ;ECAN.c: 935: {
 14540                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 14541  002CE4  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14542  002CE6  6ED9               	movwf	fsr2l,c
 14543  002CE8  6ADA               	clrf	fsr2h,c
 14544  002CEA  0E00               	movlw	0
 14545  002CEC  86DB               	bsf	plusw2,3,c
 14546                           
 14547                           ;ECAN.c: 937: RXB1OVFL = 0;
 14548  002CEE  9C71               	bcf	3953,6,c	;volatile
 14549  002CF0                     l6681:
 14550                           
 14551                           ;ECAN.c: 942: savedPtr = ptr;
 14552  002CF0  C018  F012         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 14553  002CF4  C019  F013         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 14554                           
 14555                           ;ECAN.c: 943: *msgFlags = 0;
 14556  002CF8  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14557  002CFA  6ED9               	movwf	fsr2l,c
 14558  002CFC  6ADA               	clrf	fsr2h,c
 14559  002CFE  6ADF               	clrf	indf2,c
 14560                           
 14561                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 14562  002D00  EE20 F005          	lfsr	2,5
 14563  002D04  D854               	call	PL70	;call to abstracted procedure
 14564                           
 14565                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 14566  002D06  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14567  002D08  6ED9               	movwf	fsr2l,c
 14568  002D0A  6ADA               	clrf	fsr2h,c
 14569  002D0C  5017               	movf	ECANReceiveMessage@temp,w,c
 14570  002D0E  0B0F               	andlw	15
 14571  002D10  6EDF               	movwf	indf2,c
 14572                           
 14573                           ;ECAN.c: 950: if ( temp.bits.b6 )
 14574  002D12  AC17               	btfss	ECANReceiveMessage@temp,6,c
 14575  002D14  D005               	goto	l892
 14576                           
 14577                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 14578  002D16  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14579  002D18  6ED9               	movwf	fsr2l,c
 14580  002D1A  6ADA               	clrf	fsr2h,c
 14581  002D1C  0E00               	movlw	0
 14582  002D1E  8CDB               	bsf	plusw2,6,c
 14583  002D20                     l892:
 14584                           
 14585                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 14586  002D20  EE20 F002          	lfsr	2,2
 14587  002D24  D844               	call	PL70	;call to abstracted procedure
 14588                           
 14589                           ;ECAN.c: 955: if ( temp.bits.b3 )
 14590  002D26  A617               	btfss	ECANReceiveMessage@temp,3,c
 14591  002D28  D008               	goto	l893
 14592                           
 14593                           ;ECAN.c: 956: {
 14594                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 14595  002D2A  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14596  002D2C  6ED9               	movwf	fsr2l,c
 14597  002D2E  6ADA               	clrf	fsr2h,c
 14598  002D30  0E00               	movlw	0
 14599  002D32  8ADB               	bsf	plusw2,5,c
 14600                           
 14601                           ;ECAN.c: 958: temp.Val = 1;
 14602  002D34  0E01               	movlw	1
 14603  002D36  6E17               	movwf	ECANReceiveMessage@temp,c
 14604                           
 14605                           ;ECAN.c: 959: }
 14606  002D38  D001               	goto	l6699
 14607  002D3A                     l893:
 14608                           
 14609                           ;ECAN.c: 960: else
 14610                           ;ECAN.c: 961: temp.Val = 0;
 14611  002D3A  6A17               	clrf	ECANReceiveMessage@temp,c
 14612  002D3C                     l6699:
 14613                           
 14614                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 14615  002D3C  2818               	incf	ECANReceiveMessage@ptr,w,c
 14616  002D3E  6E08               	movwf	?__RegsToCANID,c
 14617  002D40  0E00               	movlw	0
 14618  002D42  2019               	addwfc	ECANReceiveMessage@ptr+1,w,c
 14619  002D44  6E09               	movwf	?__RegsToCANID+1,c
 14620  002D46  C014  F00A         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 14621  002D4A  C017  F00B         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 14622  002D4E  ECD7  F019         	call	__RegsToCANID	;wreg free
 14623                           
 14624                           ;ECAN.c: 966: ptr += 6;
 14625  002D52  0E06               	movlw	6
 14626  002D54  2618               	addwf	ECANReceiveMessage@ptr,f,c
 14627  002D56  0E00               	movlw	0
 14628  002D58  2219               	addwfc	ECANReceiveMessage@ptr+1,f,c
 14629                           
 14630                           ;ECAN.c: 967: temp.Val = *dataLen;
 14631  002D5A  5010               	movf	ECANReceiveMessage@dataLen,w,c
 14632  002D5C  6ED9               	movwf	fsr2l,c
 14633  002D5E  6ADA               	clrf	fsr2h,c
 14634  002D60  50DF               	movf	indf2,w,c
 14635  002D62  6E17               	movwf	ECANReceiveMessage@temp,c
 14636                           
 14637                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 14638  002D64  6A15               	clrf	ECANReceiveMessage@i,c
 14639  002D66  D00D               	goto	l6715
 14640  002D68                     l6707:
 14641                           
 14642                           ;ECAN.c: 969: *data++ = *ptr++;
 14643  002D68  C018  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 14644  002D6C  C019  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 14645  002D70  500F               	movf	ECANReceiveMessage@data,w,c
 14646  002D72  6EE1               	movwf	fsr1l,c
 14647  002D74  6AE2               	clrf	fsr1h,c
 14648  002D76  CFDF FFE7          	movff	indf2,indf1
 14649  002D7A  4A18               	infsnz	ECANReceiveMessage@ptr,f,c
 14650  002D7C  2A19               	incf	ECANReceiveMessage@ptr+1,f,c
 14651  002D7E  2A0F               	incf	ECANReceiveMessage@data,f,c
 14652  002D80  2A15               	incf	ECANReceiveMessage@i,f,c
 14653  002D82                     l6715:
 14654  002D82  5017               	movf	ECANReceiveMessage@temp,w,c
 14655  002D84  5C15               	subwf	ECANReceiveMessage@i,w,c
 14656  002D86  E3F0               	bnc	l6707
 14657                           
 14658                           ;ECAN.c: 972: if ( IRXIF )
 14659  002D88  AE77               	btfss	3959,7,c	;volatile
 14660  002D8A  D006               	goto	l6721
 14661                           
 14662                           ;ECAN.c: 973: {
 14663                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 14664  002D8C  5011               	movf	ECANReceiveMessage@msgFlags,w,c
 14665  002D8E  6ED9               	movwf	fsr2l,c
 14666  002D90  6ADA               	clrf	fsr2h,c
 14667  002D92  0E00               	movlw	0
 14668  002D94  88DB               	bsf	plusw2,4,c
 14669                           
 14670                           ;ECAN.c: 975: IRXIF = 0;
 14671  002D96  9E77               	bcf	3959,7,c	;volatile
 14672  002D98                     l6721:
 14673                           
 14674                           ;ECAN.c: 976: }
 14675                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 14676  002D98  C012  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 14677  002D9C  C013  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 14678  002DA0  0E7F               	movlw	127
 14679  002DA2  16DF               	andwf	indf2,f,c
 14680                           
 14681                           ;ECAN.c: 983: if ( mode == 0x80 )
 14682  002DA4  5016               	movf	ECANReceiveMessage@mode,w,c
 14683  002DA6  0A80               	xorlw	128
 14684  002DA8  B4D8               	btfsc	status,2,c
 14685                           
 14686                           ;ECAN.c: 984: FIFOEMPTY = 0;
 14687  002DAA  9E71               	bcf	3953,7,c	;volatile
 14688                           
 14689                           ;ECAN.c: 990: return TRUE;
 14690  002DAC  0C01               	retlw	1
 14691  002DAE                     __end_of_ECANReceiveMessage:
 14692                           	opt stack 0
 14693  002DAE                     PL70:
 14694                           	opt stack 23
 14695  002DAE  5018               	movf	ECANReceiveMessage@ptr,w,c
 14696  002DB0  26D9               	addwf	fsr2l,f,c
 14697  002DB2  5019               	movf	ECANReceiveMessage@ptr+1,w,c
 14698  002DB4  22DA               	addwfc	fsr2h,f,c
 14699  002DB6  50DF               	movf	indf2,w,c
 14700  002DB8  6E17               	movwf	ECANReceiveMessage@temp,c
 14701  002DBA  0012               	return	
 14702  002DBC                     __end_ofPL70:
 14703                           	opt stack 0
 14704                           tblptru	equ	0xFF8
 14705                           tblptrh	equ	0xFF7
 14706                           tblptrl	equ	0xFF6
 14707                           tablat	equ	0xFF5
 14708                           prodh	equ	0xFF4
 14709                           prodl	equ	0xFF3
 14710                           intcon	equ	0xFF2
 14711                           postinc0	equ	0xFEE
 14712                           wreg	equ	0xFE8
 14713                           indf1	equ	0xFE7
 14714                           fsr1h	equ	0xFE2
 14715                           fsr1l	equ	0xFE1
 14716                           indf2	equ	0xFDF
 14717                           postinc2	equ	0xFDE
 14718                           postdec2	equ	0xFDD
 14719                           plusw2	equ	0xFDB
 14720                           fsr2h	equ	0xFDA
 14721                           fsr2l	equ	0xFD9
 14722                           status	equ	0xFD8
 14723                           
 14724 ;; *************** function __RegsToCANID *****************
 14725 ;; Defined at:
 14726 ;;		line 1156 in file "../ECAN.c"
 14727 ;; Parameters:    Size  Location     Type
 14728 ;;  ptr             2    7[COMRAM] PTR unsigned char 
 14729 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14730 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14731 ;;  val             1    9[COMRAM] PTR unsigned long 
 14732 ;;		 -> getVSCPFrame@id(4), 
 14733 ;;  type            1   10[COMRAM] unsigned char 
 14734 ;; Auto vars:     Size  Location     Type
 14735 ;;  Value           1   13[COMRAM] PTR struct _CAN_MESSAGE_
 14736 ;;		 -> getVSCPFrame@id(4), 
 14737 ;; Return value:  Size  Location     Type
 14738 ;;		None               void
 14739 ;; Registers used:
 14740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14746 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14748 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14749 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14750 ;;Total ram usage:        7 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:    2
 14753 ;; This function calls:
 14754 ;;		Nothing
 14755 ;; This function is called by:
 14756 ;;		_ECANReceiveMessage
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           	psect	text60
 14761  0033AE                     __ptext60:
 14762                           	opt stack 0
 14763  0033AE                     __RegsToCANID:
 14764                           	opt stack 23
 14765                           
 14766                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 14767                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 14768                           
 14769                           ;incstack = 0
 14770                           ;incstack = 0
 14771  0033AE  C00A  F00E         	movff	__RegsToCANID@val,__RegsToCANID@Value
 14772                           
 14773                           ;ECAN.c: 1161: if ( type == 0 )
 14774  0033B2  660B               	tstfsz	__RegsToCANID@type,c
 14775  0033B4  D02B               	goto	l6795
 14776                           
 14777                           ;ECAN.c: 1162: {
 14778                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 14779  0033B6  500E               	movf	__RegsToCANID@Value,w,c
 14780  0033B8  6ED9               	movwf	fsr2l,c
 14781  0033BA  D86C               	call	PL46	;call to abstracted procedure
 14782  0033BC  360C               	rlcf	??__RegsToCANID,f,c
 14783  0033BE  90D8               	bcf	status,0,c
 14784  0033C0  360C               	rlcf	??__RegsToCANID,f,c
 14785  0033C2  90D8               	bcf	status,0,c
 14786  0033C4  340C               	rlcf	??__RegsToCANID,w,c
 14787  0033C6  6EDF               	movwf	indf2,c
 14788                           
 14789                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 14790  0033C8  500E               	movf	__RegsToCANID@Value,w,c
 14791  0033CA  6ED9               	movwf	fsr2l,c
 14792  0033CC  6ADA               	clrf	fsr2h,c
 14793  0033CE  2AD9               	incf	fsr2l,f,c
 14794  0033D0  6ADA               	clrf	fsr2h,c
 14795  0033D2  D873               	call	PL56	;call to abstracted procedure
 14796  0033D4                     u7275:
 14797  0033D4  90D8               	bcf	status,0,c
 14798  0033D6  320C               	rrcf	??__RegsToCANID,f,c
 14799  0033D8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14800  0033DA  D7FC               	goto	u7275
 14801  0033DC  500C               	movf	??__RegsToCANID,w,c
 14802                           
 14803                           ;ECAN.c: 1166: ptr++;
 14804                           
 14805                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 14806  0033DE  D863               	call	PL48	;call to abstracted procedure
 14807  0033E0  0E05               	movlw	5
 14808  0033E2  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14809  0033E4                     u7285:
 14810  0033E4  90D8               	bcf	status,0,c
 14811  0033E6  320C               	rrcf	??__RegsToCANID,f,c
 14812  0033E8  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14813  0033EA  D7FC               	goto	u7285
 14814  0033EC  500E               	movf	__RegsToCANID@Value,w,c
 14815  0033EE  6ED9               	movwf	fsr2l,c
 14816  0033F0  6ADA               	clrf	fsr2h,c
 14817  0033F2  500C               	movf	??__RegsToCANID,w,c
 14818  0033F4  12DF               	iorwf	indf2,f,c
 14819                           
 14820                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 14821  0033F6  D83D               	call	PL20	;call to abstracted procedure
 14822  0033F8  6ADF               	clrf	indf2,c
 14823                           
 14824                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 14825  0033FA  500E               	movf	__RegsToCANID@Value,w,c
 14826  0033FC  6ED9               	movwf	fsr2l,c
 14827  0033FE  6ADA               	clrf	fsr2h,c
 14828  003400  0E03               	movlw	3
 14829  003402  26D9               	addwf	fsr2l,f,c
 14830  003404  6ADA               	clrf	fsr2h,c
 14831  003406  0E00               	movlw	0
 14832  003408  6EDF               	movwf	indf2,c
 14833                           
 14834                           ;ECAN.c: 1170: }
 14835  00340A  0C00               	retlw	0
 14836  00340C                     l6795:
 14837                           
 14838                           ;ECAN.c: 1171: else
 14839                           ;ECAN.c: 1172: {
 14840                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 14841  00340C  D832               	call	PL20	;call to abstracted procedure
 14842  00340E  D855               	call	PL56	;call to abstracted procedure
 14843  003410                     u7295:
 14844  003410  90D8               	bcf	status,0,c
 14845  003412  360C               	rlcf	??__RegsToCANID,f,c
 14846  003414  2E0D               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 14847  003416  D7FC               	goto	u7295
 14848  003418  500C               	movf	??__RegsToCANID,w,c
 14849  00341A  6EDF               	movwf	indf2,c
 14850                           
 14851                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 14852  00341C  500E               	movf	__RegsToCANID@Value,w,c
 14853  00341E  6ED9               	movwf	fsr2l,c
 14854  003420  6ADA               	clrf	fsr2h,c
 14855  003422  0E03               	movlw	3
 14856  003424  26D9               	addwf	fsr2l,f,c
 14857  003426  D836               	call	PL46	;call to abstracted procedure
 14858  003428  320C               	rrcf	??__RegsToCANID,f,c
 14859  00342A  90D8               	bcf	status,0,c
 14860  00342C  320C               	rrcf	??__RegsToCANID,f,c
 14861  00342E  90D8               	bcf	status,0,c
 14862  003430  300C               	rrcf	??__RegsToCANID,w,c
 14863                           
 14864                           ;ECAN.c: 1176: ptr++;
 14865                           
 14866                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 14867  003432  D839               	call	PL48	;call to abstracted procedure
 14868  003434  0E03               	movlw	3
 14869  003436  160C               	andwf	??__RegsToCANID,f,c
 14870  003438  D81C               	call	PL20	;call to abstracted procedure
 14871  00343A  500C               	movf	??__RegsToCANID,w,c
 14872  00343C  12DF               	iorwf	indf2,f,c
 14873                           
 14874                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 14875  00343E  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14876  003442  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14877  003446  50DF               	movf	indf2,w,c
 14878  003448  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14879  00344A  90D8               	bcf	status,0,c
 14880  00344C  320C               	rrcf	??__RegsToCANID,f,c
 14881  00344E  90D8               	bcf	status,0,c
 14882  003450  320C               	rrcf	??__RegsToCANID,f,c
 14883  003452  90D8               	bcf	status,0,c
 14884  003454  320C               	rrcf	??__RegsToCANID,f,c
 14885  003456  0E1C               	movlw	28
 14886  003458  160C               	andwf	??__RegsToCANID,f,c
 14887  00345A  D80B               	call	PL20	;call to abstracted procedure
 14888  00345C  500C               	movf	??__RegsToCANID,w,c
 14889  00345E  12DF               	iorwf	indf2,f,c
 14890                           
 14891                           ;ECAN.c: 1180: ptr++;
 14892                           
 14893                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 14894  003460  D80F               	call	PL40	;call to abstracted procedure
 14895  003462  2AE1               	incf	fsr1l,f,c
 14896  003464  6AE2               	clrf	fsr1h,c
 14897  003466  CFDF FFE7          	movff	indf2,indf1
 14898                           
 14899                           ;ECAN.c: 1182: ptr++;
 14900                           
 14901                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 14902  00346A  D80A               	call	PL40	;call to abstracted procedure
 14903  00346C  CFDF FFE7          	movff	indf2,indf1
 14904  003470  0012               	return	
 14905  003472                     __end_of__RegsToCANID:
 14906                           	opt stack 0
 14907  003472                     PL20:
 14908                           	opt stack 23
 14909  003472  500E               	movf	__RegsToCANID@Value,w,c
 14910  003474  6ED9               	movwf	fsr2l,c
 14911  003476  6ADA               	clrf	fsr2h,c
 14912  003478  0E02               	movlw	2
 14913  00347A  26D9               	addwf	fsr2l,f,c
 14914  00347C  6ADA               	clrf	fsr2h,c
 14915  00347E  0012               	return	
 14916  003480                     __end_ofPL20:
 14917                           	opt stack 0
 14918  003480                     PL40:
 14919                           	opt stack 23
 14920  003480  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14921  003482  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14922  003484  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14923  003488  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14924  00348C  500E               	movf	__RegsToCANID@Value,w,c
 14925  00348E  6EE1               	movwf	fsr1l,c
 14926  003490  6AE2               	clrf	fsr1h,c
 14927  003492  0012               	return	
 14928  003494                     __end_ofPL40:
 14929                           	opt stack 0
 14930  003494                     PL46:
 14931                           	opt stack 23
 14932  003494  6ADA               	clrf	fsr2h,c
 14933  003496  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14934  00349A  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14935  00349E  50E7               	movf	indf1,w,c
 14936  0034A0  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14937  0034A2  90D8               	bcf	status,0,c
 14938  0034A4  0012               	return	
 14939  0034A6                     __end_ofPL46:
 14940                           	opt stack 0
 14941  0034A6                     PL48:
 14942                           	opt stack 23
 14943  0034A6  6EDF               	movwf	indf2,c
 14944  0034A8  4A08               	infsnz	__RegsToCANID@ptr,f,c
 14945  0034AA  2A09               	incf	__RegsToCANID@ptr+1,f,c
 14946  0034AC  C008  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 14947  0034B0  C009  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 14948  0034B4  50DF               	movf	indf2,w,c
 14949  0034B6  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14950  0034B8  0012               	return	
 14951  0034BA                     __end_ofPL48:
 14952                           	opt stack 0
 14953  0034BA                     PL56:
 14954                           	opt stack 23
 14955  0034BA  C008  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 14956  0034BE  C009  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 14957  0034C2  50E7               	movf	indf1,w,c
 14958  0034C4  6E0C               	movwf	??__RegsToCANID& (0+255),c
 14959  0034C6  0E05               	movlw	5
 14960  0034C8  6E0D               	movwf	(??__RegsToCANID+1)& (0+255),c
 14961  0034CA  0C05               	retlw	5
 14962  0034CC                     __end_ofPL56:
 14963                           	opt stack 0
 14964                           tblptru	equ	0xFF8
 14965                           tblptrh	equ	0xFF7
 14966                           tblptrl	equ	0xFF6
 14967                           tablat	equ	0xFF5
 14968                           prodh	equ	0xFF4
 14969                           prodl	equ	0xFF3
 14970                           intcon	equ	0xFF2
 14971                           postinc0	equ	0xFEE
 14972                           wreg	equ	0xFE8
 14973                           indf1	equ	0xFE7
 14974                           fsr1h	equ	0xFE2
 14975                           fsr1l	equ	0xFE1
 14976                           indf2	equ	0xFDF
 14977                           postinc2	equ	0xFDE
 14978                           postdec2	equ	0xFDD
 14979                           plusw2	equ	0xFDB
 14980                           fsr2h	equ	0xFDA
 14981                           fsr2l	equ	0xFD9
 14982                           status	equ	0xFD8
 14983                           
 14984 ;; *************** function __ECANPointBuffer *****************
 14985 ;; Defined at:
 14986 ;;		line 1207 in file "../ECAN.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;  b               1    wreg     unsigned char 
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;  b               1   10[COMRAM] unsigned char 
 14991 ;;  pt              2   11[COMRAM] PTR unsigned char 
 14992 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 14993 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 14994 ;; Return value:  Size  Location     Type
 14995 ;;                  2    7[COMRAM] PTR unsigned char 
 14996 ;; Registers used:
 14997 ;;		wreg, status,2, status,0
 14998 ;; Tracked objects:
 14999 ;;		On entry : F/0
 15000 ;;		On exit  : 0/0
 15001 ;;		Unchanged: 0/0
 15002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15004 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15006 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15007 ;;Total ram usage:        6 bytes
 15008 ;; Hardware stack levels used:    1
 15009 ;; Hardware stack levels required when called:    2
 15010 ;; This function calls:
 15011 ;;		Nothing
 15012 ;; This function is called by:
 15013 ;;		_ECANReceiveMessage
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           	psect	text61
 15018  003D46                     __ptext61:
 15019                           	opt stack 0
 15020  003D46                     __ECANPointBuffer:
 15021                           	opt stack 23
 15022                           
 15023                           ;incstack = 0
 15024                           ;incstack = 0
 15025                           ;__ECANPointBuffer@b stored from wreg
 15026  003D46  CFE8 F00B          	movff	wreg,__ECANPointBuffer@b
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;ECAN.c: 1208: BYTE* pt;
 15030                           ;ECAN.c: 1210: switch(b)
 15031  003D4A  D028               	goto	l6781
 15032  003D4C                     l6763:
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 15036  003D4C  0E0F               	movlw	15	;volatile
 15037  003D4E  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15038  003D50  0E60               	movlw	96	;volatile
 15039  003D52  D022               	goto	L53
 15040  003D54                     l6765:
 15041                           
 15042                           ; BSR set to: 0
 15043                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 15044  003D54  010F               	movlb	15	; () banked
 15045  003D56  0E0F               	movlw	15	;volatile
 15046  003D58  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15047  003D5A  0E30               	movlw	48	;volatile
 15048  003D5C  D01D               	goto	L53
 15049  003D5E                     l6767:
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 15053  003D5E  010E               	movlb	14	; () banked
 15054  003D60  0E0E               	movlw	14	;volatile
 15055  003D62  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15056  003D64  0E80               	movlw	128	;volatile
 15057  003D66  D018               	goto	L53
 15058  003D68                     l6769:
 15059                           
 15060                           ; BSR set to: 0
 15061                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 15062  003D68  010E               	movlb	14	; () banked
 15063  003D6A  0E0E               	movlw	14	;volatile
 15064  003D6C  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15065  003D6E  0E90               	movlw	144	;volatile
 15066  003D70  D013               	goto	L53
 15067  003D72                     l6771:
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 15071  003D72  010E               	movlb	14	; () banked
 15072  003D74  0E0E               	movlw	14	;volatile
 15073  003D76  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15074  003D78  0EA0               	movlw	160	;volatile
 15075  003D7A  D00E               	goto	L53
 15076  003D7C                     l6773:
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 15080  003D7C  010E               	movlb	14	; () banked
 15081  003D7E  0E0E               	movlw	14	;volatile
 15082  003D80  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15083  003D82  0EB0               	movlw	176	;volatile
 15084  003D84  D009               	goto	L53
 15085  003D86                     l6775:
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 15089  003D86  010E               	movlb	14	; () banked
 15090  003D88  0E0E               	movlw	14	;volatile
 15091  003D8A  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15092  003D8C  0EC0               	movlw	192	;volatile
 15093  003D8E  D004               	goto	L53
 15094  003D90                     l6777:
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 15098  003D90  010E               	movlb	14	; () banked
 15099  003D92  0E0E               	movlw	14	;volatile
 15100  003D94  6E0D               	movwf	__ECANPointBuffer@pt+1,c
 15101  003D96  0ED0               	movlw	208	;volatile
 15102  003D98                     L53:
 15103  003D98  6E0C               	movwf	__ECANPointBuffer@pt,c
 15104                           
 15105                           ;ECAN.c: 1235: break;
 15106  003D9A  D00F               	goto	l920
 15107  003D9C                     l6781:
 15108                           
 15109                           ; BSR set to: 0
 15110  003D9C  500B               	movf	__ECANPointBuffer@b,w,c
 15111                           
 15112                           ; Switch size 1, requested type "space"
 15113                           ; Number of cases is 7, Range of values is 0 to 6
 15114                           ; switch strategies available:
 15115                           ; Name         Instructions Cycles
 15116                           ; simple_byte           22    12 (average)
 15117                           ;	Chosen strategy is simple_byte
 15118  003D9E  E0D6               	bz	l6763
 15119  003DA0  0A01               	xorlw	1	; case 1
 15120  003DA2  E0D8               	bz	l6765
 15121  003DA4  0A03               	xorlw	3	; case 2
 15122  003DA6  E0DB               	bz	l6767
 15123  003DA8  0A01               	xorlw	1	; case 3
 15124  003DAA  E0DE               	bz	l6769
 15125  003DAC  0A07               	xorlw	7	; case 4
 15126  003DAE  E0E1               	bz	l6771
 15127  003DB0  0A01               	xorlw	1	; case 5
 15128  003DB2  E0E4               	bz	l6773
 15129  003DB4  0A03               	xorlw	3	; case 6
 15130  003DB6  E0E7               	bz	l6775
 15131  003DB8  D7EB               	goto	l6777
 15132  003DBA                     l920:
 15133                           
 15134                           ;ECAN.c: 1237: return (pt);
 15135  003DBA  C00C  F008         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 15136  003DBE  C00D  F009         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 15137  003DC2  0012               	return	
 15138  003DC4                     __end_of__ECANPointBuffer:
 15139                           	opt stack 0
 15140                           tblptru	equ	0xFF8
 15141                           tblptrh	equ	0xFF7
 15142                           tblptrl	equ	0xFF6
 15143                           tablat	equ	0xFF5
 15144                           prodh	equ	0xFF4
 15145                           prodl	equ	0xFF3
 15146                           intcon	equ	0xFF2
 15147                           postinc0	equ	0xFEE
 15148                           wreg	equ	0xFE8
 15149                           indf1	equ	0xFE7
 15150                           fsr1h	equ	0xFE2
 15151                           fsr1l	equ	0xFE1
 15152                           indf2	equ	0xFDF
 15153                           postinc2	equ	0xFDE
 15154                           postdec2	equ	0xFDD
 15155                           plusw2	equ	0xFDB
 15156                           fsr2h	equ	0xFDA
 15157                           fsr2l	equ	0xFD9
 15158                           status	equ	0xFD8
 15159                           
 15160 ;; *************** function _vscp_check_pstorage *****************
 15161 ;; Defined at:
 15162 ;;		line 166 in file "../../vscp_firmware/common/vscp_firmware.c"
 15163 ;; Parameters:    Size  Location     Type
 15164 ;;		None
 15165 ;; Auto vars:     Size  Location     Type
 15166 ;;		None
 15167 ;; Return value:  Size  Location     Type
 15168 ;;                  1    wreg      unsigned char 
 15169 ;; Registers used:
 15170 ;;		wreg, status,2, status,0, cstack
 15171 ;; Tracked objects:
 15172 ;;		On entry : 0/0
 15173 ;;		On exit  : 0/0
 15174 ;;		Unchanged: 0/0
 15175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15180 ;;Total ram usage:        0 bytes
 15181 ;; Hardware stack levels used:    1
 15182 ;; Hardware stack levels required when called:    4
 15183 ;; This function calls:
 15184 ;;		_vscp_writeNicknamePermanent
 15185 ;;		_vscp_getSegmentCRC
 15186 ;;		_vscp_setSegmentCRC
 15187 ;;		_vscp_setControlByte
 15188 ;; This function is called by:
 15189 ;;		_main
 15190 ;; This function uses a non-reentrant model
 15191 ;;
 15192                           
 15193                           	psect	text62
 15194  00421E                     __ptext62:
 15195                           	opt stack 0
 15196  00421E                     _vscp_check_pstorage:
 15197                           	opt stack 25
 15198                           
 15199                           ;vscp_firmware.c: 169: if ((vscp_getSegmentCRC() & 0xc0) == 0x40) {
 15200                           
 15201                           ;incstack = 0
 15202                           ;incstack = 0
 15203  00421E  EC06  F022         	call	_vscp_getSegmentCRC	;wreg free
 15204  004222  0BC0               	andlw	192
 15205  004224  0A40               	xorlw	64
 15206  004226  E101               	bnz	l7239
 15207                           
 15208                           ;vscp_firmware.c: 170: return !0;
 15209  004228  0C01               	retlw	1
 15210  00422A                     l7239:
 15211                           
 15212                           ;vscp_firmware.c: 171: }
 15213                           ;vscp_firmware.c: 174: vscp_writeNicknamePermanent(0xff);
 15214  00422A  0EFF               	movlw	255
 15215  00422C  ECC9  F021         	call	_vscp_writeNicknamePermanent
 15216                           
 15217                           ;vscp_firmware.c: 177: vscp_setSegmentCRC(0x00);
 15218  004230  0E00               	movlw	0
 15219  004232  ECC0  F021         	call	_vscp_setSegmentCRC
 15220                           
 15221                           ;vscp_firmware.c: 181: vscp_setControlByte(0xA0);
 15222  004236  0EA0               	movlw	160
 15223  004238  ECB7  F021         	call	_vscp_setControlByte
 15224                           
 15225                           ;vscp_firmware.c: 183: return 0;
 15226  00423C  0C00               	retlw	0
 15227  00423E                     __end_of_vscp_check_pstorage:
 15228                           	opt stack 0
 15229                           tblptru	equ	0xFF8
 15230                           tblptrh	equ	0xFF7
 15231                           tblptrl	equ	0xFF6
 15232                           tablat	equ	0xFF5
 15233                           prodh	equ	0xFF4
 15234                           prodl	equ	0xFF3
 15235                           intcon	equ	0xFF2
 15236                           postinc0	equ	0xFEE
 15237                           wreg	equ	0xFE8
 15238                           indf1	equ	0xFE7
 15239                           fsr1h	equ	0xFE2
 15240                           fsr1l	equ	0xFE1
 15241                           indf2	equ	0xFDF
 15242                           postinc2	equ	0xFDE
 15243                           postdec2	equ	0xFDD
 15244                           plusw2	equ	0xFDB
 15245                           fsr2h	equ	0xFDA
 15246                           fsr2l	equ	0xFD9
 15247                           status	equ	0xFD8
 15248                           
 15249 ;; *************** function _vscp_setControlByte *****************
 15250 ;; Defined at:
 15251 ;;		line 2382 in file "../main.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  ctrl            1    wreg     unsigned char 
 15254 ;; Auto vars:     Size  Location     Type
 15255 ;;  ctrl            1   10[COMRAM] unsigned char 
 15256 ;; Return value:  Size  Location     Type
 15257 ;;		None               void
 15258 ;; Registers used:
 15259 ;;		wreg, status,2, cstack
 15260 ;; Tracked objects:
 15261 ;;		On entry : 0/0
 15262 ;;		On exit  : 0/0
 15263 ;;		Unchanged: 0/0
 15264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15266 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15268 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15269 ;;Total ram usage:        1 bytes
 15270 ;; Hardware stack levels used:    1
 15271 ;; Hardware stack levels required when called:    3
 15272 ;; This function calls:
 15273 ;;		_writeEEPROM
 15274 ;; This function is called by:
 15275 ;;		_vscp_check_pstorage
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text63
 15280  00436E                     __ptext63:
 15281                           	opt stack 0
 15282  00436E                     _vscp_setControlByte:
 15283                           	opt stack 25
 15284                           
 15285                           ;incstack = 0
 15286                           ;incstack = 0
 15287                           ;vscp_setControlByte@ctrl stored from wreg
 15288  00436E  CFE8 F00B          	movff	wreg,vscp_setControlByte@ctrl
 15289                           
 15290                           ;main.c: 2383: writeEEPROM(0x03, ctrl);
 15291  004372  6A09               	clrf	?_writeEEPROM+1,c
 15292  004374  0E03               	movlw	3
 15293  004376  6E08               	movwf	?_writeEEPROM,c
 15294  004378  C00B  F00A         	movff	vscp_setControlByte@ctrl,?_writeEEPROM+2
 15295  00437C  EFBA  F020         	goto	_writeEEPROM	;wreg free
 15296  004380                     __end_of_vscp_setControlByte:
 15297                           	opt stack 0
 15298                           tblptru	equ	0xFF8
 15299                           tblptrh	equ	0xFF7
 15300                           tblptrl	equ	0xFF6
 15301                           tablat	equ	0xFF5
 15302                           prodh	equ	0xFF4
 15303                           prodl	equ	0xFF3
 15304                           intcon	equ	0xFF2
 15305                           postinc0	equ	0xFEE
 15306                           wreg	equ	0xFE8
 15307                           indf1	equ	0xFE7
 15308                           fsr1h	equ	0xFE2
 15309                           fsr1l	equ	0xFE1
 15310                           indf2	equ	0xFDF
 15311                           postinc2	equ	0xFDE
 15312                           postdec2	equ	0xFDD
 15313                           plusw2	equ	0xFDB
 15314                           fsr2h	equ	0xFDA
 15315                           fsr2l	equ	0xFD9
 15316                           status	equ	0xFD8
 15317                           
 15318 ;; *************** function _vscp_setSegmentCRC *****************
 15319 ;; Defined at:
 15320 ;;		line 2373 in file "../main.c"
 15321 ;; Parameters:    Size  Location     Type
 15322 ;;  crc             1    wreg     unsigned char 
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;  crc             1   10[COMRAM] unsigned char 
 15325 ;; Return value:  Size  Location     Type
 15326 ;;		None               void
 15327 ;; Registers used:
 15328 ;;		wreg, status,2, cstack
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15337 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15338 ;;Total ram usage:        1 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    3
 15341 ;; This function calls:
 15342 ;;		_writeEEPROM
 15343 ;; This function is called by:
 15344 ;;		_vscp_check_pstorage
 15345 ;;		_vscp_handleProbeState
 15346 ;;		_vscp_handleHeartbeat
 15347 ;;		_vscp_handleSetNickname
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351                           	psect	text64
 15352  004380                     __ptext64:
 15353                           	opt stack 0
 15354  004380                     _vscp_setSegmentCRC:
 15355                           	opt stack 24
 15356                           
 15357                           ;incstack = 0
 15358                           ;incstack = 0
 15359                           ;vscp_setSegmentCRC@crc stored from wreg
 15360  004380  CFE8 F00B          	movff	wreg,vscp_setSegmentCRC@crc
 15361                           
 15362                           ;main.c: 2374: writeEEPROM( 0x02, crc );
 15363  004384  6A09               	clrf	?_writeEEPROM+1,c
 15364  004386  0E02               	movlw	2
 15365  004388  6E08               	movwf	?_writeEEPROM,c
 15366  00438A  C00B  F00A         	movff	vscp_setSegmentCRC@crc,?_writeEEPROM+2
 15367  00438E  EFBA  F020         	goto	_writeEEPROM	;wreg free
 15368  004392                     __end_of_vscp_setSegmentCRC:
 15369                           	opt stack 0
 15370                           tblptru	equ	0xFF8
 15371                           tblptrh	equ	0xFF7
 15372                           tblptrl	equ	0xFF6
 15373                           tablat	equ	0xFF5
 15374                           prodh	equ	0xFF4
 15375                           prodl	equ	0xFF3
 15376                           intcon	equ	0xFF2
 15377                           postinc0	equ	0xFEE
 15378                           wreg	equ	0xFE8
 15379                           indf1	equ	0xFE7
 15380                           fsr1h	equ	0xFE2
 15381                           fsr1l	equ	0xFE1
 15382                           indf2	equ	0xFDF
 15383                           postinc2	equ	0xFDE
 15384                           postdec2	equ	0xFDD
 15385                           plusw2	equ	0xFDB
 15386                           fsr2h	equ	0xFDA
 15387                           fsr2l	equ	0xFD9
 15388                           status	equ	0xFD8
 15389                           
 15390 ;; *************** function _vscp_getSegmentCRC *****************
 15391 ;; Defined at:
 15392 ;;		line 2364 in file "../main.c"
 15393 ;; Parameters:    Size  Location     Type
 15394 ;;		None
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;		None
 15397 ;; Return value:  Size  Location     Type
 15398 ;;                  1    wreg      unsigned char 
 15399 ;; Registers used:
 15400 ;;		wreg, status,2, cstack
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15410 ;;Total ram usage:        0 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    3
 15413 ;; This function calls:
 15414 ;;		_readEEPROM
 15415 ;; This function is called by:
 15416 ;;		_vscp_check_pstorage
 15417 ;;		_vscp_handleHeartbeat
 15418 ;; This function uses a non-reentrant model
 15419 ;;
 15420                           
 15421                           	psect	text65
 15422  00440C                     __ptext65:
 15423                           	opt stack 0
 15424  00440C                     _vscp_getSegmentCRC:
 15425                           	opt stack 24
 15426                           
 15427                           ;main.c: 2365: return readEEPROM( 0x02 );
 15428                           
 15429                           ;incstack = 0
 15430                           ;incstack = 0
 15431  00440C  6A09               	clrf	?_readEEPROM+1,c
 15432  00440E  0E02               	movlw	2
 15433  004410  6E08               	movwf	?_readEEPROM,c
 15434  004412  EFDB  F021         	goto	_readEEPROM	;wreg free
 15435  004416                     __end_of_vscp_getSegmentCRC:
 15436                           	opt stack 0
 15437                           tblptru	equ	0xFF8
 15438                           tblptrh	equ	0xFF7
 15439                           tblptrl	equ	0xFF6
 15440                           tablat	equ	0xFF5
 15441                           prodh	equ	0xFF4
 15442                           prodl	equ	0xFF3
 15443                           intcon	equ	0xFF2
 15444                           postinc0	equ	0xFEE
 15445                           wreg	equ	0xFE8
 15446                           indf1	equ	0xFE7
 15447                           fsr1h	equ	0xFE2
 15448                           fsr1l	equ	0xFE1
 15449                           indf2	equ	0xFDF
 15450                           postinc2	equ	0xFDE
 15451                           postdec2	equ	0xFDD
 15452                           plusw2	equ	0xFDB
 15453                           fsr2h	equ	0xFDA
 15454                           fsr2l	equ	0xFD9
 15455                           status	equ	0xFD8
 15456                           
 15457 ;; *************** function _vscp_writeNicknamePermanent *****************
 15458 ;; Defined at:
 15459 ;;		line 870 in file "../main.c"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;  nickname        1    wreg     unsigned char 
 15462 ;; Auto vars:     Size  Location     Type
 15463 ;;  nickname        1   10[COMRAM] unsigned char 
 15464 ;; Return value:  Size  Location     Type
 15465 ;;		None               void
 15466 ;; Registers used:
 15467 ;;		wreg, status,2, cstack
 15468 ;; Tracked objects:
 15469 ;;		On entry : 0/0
 15470 ;;		On exit  : 0/0
 15471 ;;		Unchanged: 0/0
 15472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15474 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15476 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15477 ;;Total ram usage:        1 bytes
 15478 ;; Hardware stack levels used:    1
 15479 ;; Hardware stack levels required when called:    3
 15480 ;; This function calls:
 15481 ;;		_writeEEPROM
 15482 ;; This function is called by:
 15483 ;;		_vscp_check_pstorage
 15484 ;;		_vscp_handleProbeState
 15485 ;;		_vscp_handleHeartbeat
 15486 ;;		_vscp_handleSetNickname
 15487 ;;		_vscp_handleDropNickname
 15488 ;; This function uses a non-reentrant model
 15489 ;;
 15490                           
 15491                           	psect	text66
 15492  004392                     __ptext66:
 15493                           	opt stack 0
 15494  004392                     _vscp_writeNicknamePermanent:
 15495                           	opt stack 24
 15496                           
 15497                           ;incstack = 0
 15498                           ;incstack = 0
 15499                           ;vscp_writeNicknamePermanent@nickname stored from wreg
 15500  004392  CFE8 F00B          	movff	wreg,vscp_writeNicknamePermanent@nickname
 15501                           
 15502                           ;main.c: 871: writeEEPROM( 0x01, nickname );
 15503  004396  6A09               	clrf	?_writeEEPROM+1,c
 15504  004398  0E01               	movlw	1
 15505  00439A  6E08               	movwf	?_writeEEPROM,c
 15506  00439C  C00B  F00A         	movff	vscp_writeNicknamePermanent@nickname,?_writeEEPROM+2
 15507  0043A0  EFBA  F020         	goto	_writeEEPROM	;wreg free
 15508  0043A4                     __end_of_vscp_writeNicknamePermanent:
 15509                           	opt stack 0
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           postinc0	equ	0xFEE
 15518                           wreg	equ	0xFE8
 15519                           indf1	equ	0xFE7
 15520                           fsr1h	equ	0xFE2
 15521                           fsr1l	equ	0xFE1
 15522                           indf2	equ	0xFDF
 15523                           postinc2	equ	0xFDE
 15524                           postdec2	equ	0xFDD
 15525                           plusw2	equ	0xFDB
 15526                           fsr2h	equ	0xFDA
 15527                           fsr2l	equ	0xFD9
 15528                           status	equ	0xFD8
 15529                           
 15530 ;; *************** function _writeEEPROM *****************
 15531 ;; Defined at:
 15532 ;;		line 23 in file "../../vscp_firmware/pic/common/eeprom.c"
 15533 ;; Parameters:    Size  Location     Type
 15534 ;;  address         2    7[COMRAM] unsigned short 
 15535 ;;  data            1    9[COMRAM] unsigned char 
 15536 ;; Auto vars:     Size  Location     Type
 15537 ;;		None
 15538 ;; Return value:  Size  Location     Type
 15539 ;;		None               void
 15540 ;; Registers used:
 15541 ;;		wreg, status,2
 15542 ;; Tracked objects:
 15543 ;;		On entry : 0/0
 15544 ;;		On exit  : 0/0
 15545 ;;		Unchanged: 0/0
 15546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15551 ;;Total ram usage:        3 bytes
 15552 ;; Hardware stack levels used:    1
 15553 ;; Hardware stack levels required when called:    2
 15554 ;; This function calls:
 15555 ;;		Nothing
 15556 ;; This function is called by:
 15557 ;;		_main
 15558 ;;		_init_app_eeprom
 15559 ;;		_vscp_setGUID
 15560 ;;		_vscp_setManufacturerId
 15561 ;;		_vscp_writeNicknamePermanent
 15562 ;;		_vscp_writeAppReg
 15563 ;;		_doActionDisable
 15564 ;;		_vscp_setUserID
 15565 ;;		_vscp_setSegmentCRC
 15566 ;;		_vscp_setControlByte
 15567 ;;		_vscp_goBootloaderMode
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text67
 15572  004174                     __ptext67:
 15573                           	opt stack 0
 15574  004174                     _writeEEPROM:
 15575                           	opt stack 25
 15576                           
 15577                           ;eeprom.c: 29: EEADR = address & 0xff;
 15578                           
 15579                           ;incstack = 0
 15580                           ;incstack = 0
 15581  004174  C008  FF74         	movff	writeEEPROM@address,3956	;volatile
 15582                           
 15583                           ;eeprom.c: 30: EEDATA = data;
 15584  004178  C00A  FF73         	movff	writeEEPROM@data,3955	;volatile
 15585                           
 15586                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 15587  00417C  9E7F               	bcf	3967,7,c	;volatile
 15588                           
 15589                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 15590  00417E  9C7F               	bcf	3967,6,c	;volatile
 15591                           
 15592                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 15593  004180  847F               	bsf	3967,2,c	;volatile
 15594                           
 15595                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 15596  004182  9EF2               	bcf	intcon,7,c	;volatile
 15597                           
 15598                           ;eeprom.c: 37: EECON2 = 0x55;
 15599  004184  0E55               	movlw	85
 15600  004186  6E7E               	movwf	3966,c	;volatile
 15601                           
 15602                           ;eeprom.c: 38: EECON2 = 0xaa;
 15603  004188  0EAA               	movlw	170
 15604  00418A  6E7E               	movwf	3966,c	;volatile
 15605                           
 15606                           ;eeprom.c: 39: EECON1bits.WR = 1;
 15607  00418C  827F               	bsf	3967,1,c	;volatile
 15608                           
 15609                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 15610  00418E  8EF2               	bsf	intcon,7,c	;volatile
 15611  004190                     l1299:
 15612  004190  ACB7               	btfss	4023,6,c	;volatile
 15613  004192  D7FE               	goto	l1299
 15614                           
 15615                           ;eeprom.c: 44: PIR4bits.EEIF = 0;
 15616  004194  9CB7               	bcf	4023,6,c	;volatile
 15617                           
 15618                           ;eeprom.c: 49: EECON1bits.WREN = 0;
 15619  004196  947F               	bcf	3967,2,c	;volatile
 15620  004198  0012               	return	
 15621  00419A                     __end_of_writeEEPROM:
 15622                           	opt stack 0
 15623                           tblptru	equ	0xFF8
 15624                           tblptrh	equ	0xFF7
 15625                           tblptrl	equ	0xFF6
 15626                           tablat	equ	0xFF5
 15627                           prodh	equ	0xFF4
 15628                           prodl	equ	0xFF3
 15629                           intcon	equ	0xFF2
 15630                           postinc0	equ	0xFEE
 15631                           wreg	equ	0xFE8
 15632                           indf1	equ	0xFE7
 15633                           fsr1h	equ	0xFE2
 15634                           fsr1l	equ	0xFE1
 15635                           indf2	equ	0xFDF
 15636                           postinc2	equ	0xFDE
 15637                           postdec2	equ	0xFDD
 15638                           plusw2	equ	0xFDB
 15639                           fsr2h	equ	0xFDA
 15640                           fsr2l	equ	0xFD9
 15641                           status	equ	0xFD8
 15642                           
 15643 ;; *************** function _init *****************
 15644 ;; Defined at:
 15645 ;;		line 341 in file "../main.c"
 15646 ;; Parameters:    Size  Location     Type
 15647 ;;		None
 15648 ;; Auto vars:     Size  Location     Type
 15649 ;;		None
 15650 ;; Return value:  Size  Location     Type
 15651 ;;		None               void
 15652 ;; Registers used:
 15653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15654 ;; Tracked objects:
 15655 ;;		On entry : 0/0
 15656 ;;		On exit  : 0/0
 15657 ;;		Unchanged: 0/0
 15658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15663 ;;Total ram usage:        0 bytes
 15664 ;; Hardware stack levels used:    1
 15665 ;; Hardware stack levels required when called:    4
 15666 ;; This function calls:
 15667 ;;		_WriteTimer0
 15668 ;;		_init_app_ram
 15669 ;;		_OpenTimer0
 15670 ;;		_ECANInitialize
 15671 ;; This function is called by:
 15672 ;;		_main
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           	psect	text68
 15677  004054                     __ptext68:
 15678                           	opt stack 0
 15679  004054                     _init:
 15680                           	opt stack 25
 15681                           
 15682                           ;main.c: 346: init_app_ram();
 15683                           
 15684                           ;incstack = 0
 15685                           ;incstack = 0
 15686  004054  ECF9  F01B         	call	_init_app_ram	;wreg free
 15687                           
 15688                           ;main.c: 357: TRISA = 0x00;
 15689  004058  6A92               	clrf	3986,c	;volatile
 15690                           
 15691                           ;main.c: 358: PORTA = 0x00;
 15692  00405A  6A80               	clrf	3968,c	;volatile
 15693                           
 15694                           ;main.c: 370: TRISB = 0b00001100;
 15695  00405C  0E0C               	movlw	12
 15696  00405E  6E93               	movwf	3987,c	;volatile
 15697                           
 15698                           ;main.c: 371: PORTB = 0x00;
 15699  004060  6A81               	clrf	3969,c	;volatile
 15700                           
 15701                           ;main.c: 381: TRISC = 0b00000001;
 15702  004062  0E01               	movlw	1
 15703  004064  6E94               	movwf	3988,c	;volatile
 15704                           
 15705                           ;main.c: 382: PORTC = 0x00;
 15706  004066  6A82               	clrf	3970,c	;volatile
 15707                           
 15708                           ;main.c: 408: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 15709  004068  0E92               	movlw	146
 15710  00406A  EC4C  F021         	call	_OpenTimer0
 15711                           
 15712                           ;main.c: 409: WriteTimer0( 0xfb1d );
 15713  00406E  0EFB               	movlw	251
 15714  004070  6E09               	movwf	?_WriteTimer0+1,c
 15715  004072  0E1D               	movlw	29
 15716  004074  6E08               	movwf	?_WriteTimer0,c
 15717  004076  ECD2  F021         	call	_WriteTimer0	;wreg free
 15718                           
 15719                           ;main.c: 412: ECANInitialize();
 15720  00407A  EC5B  F01E         	call	_ECANInitialize	;wreg free
 15721                           
 15722                           ;main.c: 433: INTCONbits.PEIE = 1;
 15723  00407E  8CF2               	bsf	intcon,6,c	;volatile
 15724                           
 15725                           ;main.c: 436: INTCONbits.GIE = 1;
 15726  004080  8EF2               	bsf	intcon,7,c	;volatile
 15727  004082  0012               	return	
 15728  004084                     __end_of_init:
 15729                           	opt stack 0
 15730                           tblptru	equ	0xFF8
 15731                           tblptrh	equ	0xFF7
 15732                           tblptrl	equ	0xFF6
 15733                           tablat	equ	0xFF5
 15734                           prodh	equ	0xFF4
 15735                           prodl	equ	0xFF3
 15736                           intcon	equ	0xFF2
 15737                           postinc0	equ	0xFEE
 15738                           wreg	equ	0xFE8
 15739                           indf1	equ	0xFE7
 15740                           fsr1h	equ	0xFE2
 15741                           fsr1l	equ	0xFE1
 15742                           indf2	equ	0xFDF
 15743                           postinc2	equ	0xFDE
 15744                           postdec2	equ	0xFDD
 15745                           plusw2	equ	0xFDB
 15746                           fsr2h	equ	0xFDA
 15747                           fsr2l	equ	0xFD9
 15748                           status	equ	0xFD8
 15749                           
 15750 ;; *************** function _ECANInitialize *****************
 15751 ;; Defined at:
 15752 ;;		line 168 in file "../ECAN.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;		None
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;		None
 15757 ;; Return value:  Size  Location     Type
 15758 ;;		None               void
 15759 ;; Registers used:
 15760 ;;		wreg, status,2, status,0, cstack
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15770 ;;Total ram usage:        0 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:    3
 15773 ;; This function calls:
 15774 ;;		_ECANSetOperationMode
 15775 ;; This function is called by:
 15776 ;;		_init
 15777 ;; This function uses a non-reentrant model
 15778 ;;
 15779                           
 15780                           	psect	text69
 15781  003CB6                     __ptext69:
 15782                           	opt stack 0
 15783  003CB6                     _ECANInitialize:
 15784                           	opt stack 25
 15785                           
 15786                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15787                           
 15788                           ;incstack = 0
 15789                           ;incstack = 0
 15790  003CB6  0E80               	movlw	128
 15791  003CB8  EC82  F021         	call	_ECANSetOperationMode
 15792                           
 15793                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 15794  003CBC  0E09               	movlw	9
 15795  003CBE  010E               	movlb	14	; () banked
 15796  003CC0  6F43               	movwf	67,b	;volatile
 15797                           
 15798                           ; BSR set to: 14
 15799                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 15800  003CC2  0EFC               	movlw	252
 15801  003CC4  6F44               	movwf	68,b	;volatile
 15802                           
 15803                           ; BSR set to: 14
 15804                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 15805                           ;ECAN.c: 181: (0 << 6) |
 15806                           ;ECAN.c: 182: (2-1);
 15807  003CC6  0E01               	movlw	1
 15808  003CC8  6F45               	movwf	69,b	;volatile
 15809                           
 15810                           ; BSR set to: 14
 15811                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 15812  003CCA  0E20               	movlw	32
 15813  003CCC  6E70               	movwf	3952,c	;volatile
 15814                           
 15815                           ; BSR set to: 14
 15816                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 15817  003CCE  8E72               	bsf	3954,7,c	;volatile
 15818                           
 15819                           ; BSR set to: 14
 15820                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 15821  003CD0  9C72               	bcf	3954,6,c	;volatile
 15822                           
 15823                           ; BSR set to: 14
 15824                           ;ECAN.c: 205: RXB0CON = 0;
 15825  003CD2  6A60               	clrf	3936,c	;volatile
 15826                           
 15827                           ; BSR set to: 14
 15828                           ;ECAN.c: 211: RXB1CON = 0;
 15829  003CD4  010F               	movlb	15	; () banked
 15830  003CD6  6B30               	clrf	48,b	;volatile
 15831                           
 15832                           ; BSR set to: 15
 15833                           ;ECAN.c: 221: B0CON = 0;
 15834  003CD8  010E               	movlb	14	; () banked
 15835  003CDA  6B80               	clrf	128,b	;volatile
 15836                           
 15837                           ; BSR set to: 14
 15838                           ;ECAN.c: 231: B1CON = 0;
 15839  003CDC  6B90               	clrf	144,b	;volatile
 15840                           
 15841                           ; BSR set to: 14
 15842                           ;ECAN.c: 241: B2CON = 0;
 15843  003CDE  6BA0               	clrf	160,b	;volatile
 15844                           
 15845                           ; BSR set to: 14
 15846                           ;ECAN.c: 254: B3CON = 0 << 2;
 15847  003CE0  6BB0               	clrf	176,b	;volatile
 15848                           
 15849                           ; BSR set to: 14
 15850                           ;ECAN.c: 264: B4CON = 0 << 2;
 15851  003CE2  6BC0               	clrf	192,b	;volatile
 15852                           
 15853                           ; BSR set to: 14
 15854                           ;ECAN.c: 274: B5CON = 0 << 2;
 15855  003CE4  6BD0               	clrf	208,b	;volatile
 15856                           
 15857                           ; BSR set to: 14
 15858                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 15859  003CE6  0EE0               	movlw	224
 15860  003CE8  6F7D               	movwf	125,b	;volatile
 15861                           
 15862                           ; BSR set to: 14
 15863                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 15864  003CEA  6BE0               	clrf	224,b	;volatile
 15865                           
 15866                           ; BSR set to: 14
 15867  003CEC  0E08               	movlw	8
 15868  003CEE  6FE1               	movwf	225,b	;volatile
 15869                           
 15870                           ; BSR set to: 14
 15871  003CF0  6BE2               	clrf	226,b	;volatile
 15872                           
 15873                           ; BSR set to: 14
 15874  003CF2  6BE3               	clrf	227,b	;volatile
 15875                           
 15876                           ; BSR set to: 14
 15877                           ;ECAN.c: 303: RXF1SIDH = (long)0x001E1A00L >> 21L;RXF1SIDL = (((long)0x001E1A00L >> 13L)
      +                           & 0xe0) | ((long)(0x001E1A00L) & 0x03L) | 0x08;RXF1EIDH = (long)0x001E1A00L >> 8L;RXF1E
      +                          IDL = 0x001E1A00L;;
 15878  003CF4  6BE4               	clrf	228,b	;volatile
 15879                           
 15880                           ; BSR set to: 14
 15881  003CF6  0EE8               	movlw	232
 15882  003CF8  6FE5               	movwf	229,b	;volatile
 15883                           
 15884                           ; BSR set to: 14
 15885  003CFA  0E1A               	movlw	26
 15886  003CFC  6FE6               	movwf	230,b	;volatile
 15887                           
 15888                           ; BSR set to: 14
 15889  003CFE  6BE7               	clrf	231,b	;volatile
 15890                           
 15891                           ; BSR set to: 14
 15892                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (1 << 1) | (1);
 15893  003D00  0E03               	movlw	3
 15894  003D02  6F46               	movwf	70,b	;volatile
 15895                           
 15896                           ; BSR set to: 14
 15897                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 15898  003D04  6B47               	clrf	71,b	;volatile
 15899                           
 15900                           ; BSR set to: 14
 15901                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 15902  003D06  6B71               	clrf	113,b	;volatile
 15903                           
 15904                           ; BSR set to: 14
 15905                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 15906  003D08  0E11               	movlw	17
 15907  003D0A  6F72               	movwf	114,b	;volatile
 15908                           
 15909                           ; BSR set to: 14
 15910                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 15911  003D0C  6F73               	movwf	115,b	;volatile
 15912                           
 15913                           ; BSR set to: 14
 15914                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 15915  003D0E  6B74               	clrf	116,b	;volatile
 15916                           
 15917                           ; BSR set to: 14
 15918                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 15919  003D10  6B75               	clrf	117,b	;volatile
 15920                           
 15921                           ; BSR set to: 14
 15922                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 15923  003D12  6B76               	clrf	118,b	;volatile
 15924                           
 15925                           ; BSR set to: 14
 15926                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 15927  003D14  6B77               	clrf	119,b	;volatile
 15928                           
 15929                           ; BSR set to: 14
 15930                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 15931  003D16  6B78               	clrf	120,b	;volatile
 15932                           
 15933                           ; BSR set to: 14
 15934                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 15935  003D18  0E54               	movlw	84
 15936  003D1A  6F79               	movwf	121,b	;volatile
 15937                           
 15938                           ; BSR set to: 14
 15939                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 15940  003D1C  0E05               	movlw	5
 15941  003D1E  6F7A               	movwf	122,b	;volatile
 15942                           
 15943                           ; BSR set to: 14
 15944                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15945  003D20  6B7B               	clrf	123,b	;volatile
 15946                           
 15947                           ; BSR set to: 14
 15948                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 15949  003D22  6B7B               	clrf	123,b	;volatile
 15950                           
 15951                           ; BSR set to: 14
 15952                           ;ECAN.c: 481: RXM0SIDH = (long)0x01FF0000L >> 21L; RXM0SIDL = (((long)0x01FF0000L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FF0000L) & 0x03L); RXM0EIDH = (long)0x01FF0000L >> 8L; RXM0EIDL 
      +                          = 0x01FF0000L;;
 15953  003D24  0E0F               	movlw	15
 15954  003D26  6FF8               	movwf	248,b	;volatile
 15955                           
 15956                           ; BSR set to: 14
 15957  003D28  0EE0               	movlw	224
 15958  003D2A  6FF9               	movwf	249,b	;volatile
 15959                           
 15960                           ; BSR set to: 14
 15961  003D2C  6BFA               	clrf	250,b	;volatile
 15962                           
 15963                           ; BSR set to: 14
 15964  003D2E  6BFB               	clrf	251,b	;volatile
 15965                           
 15966                           ; BSR set to: 14
 15967                           ;ECAN.c: 482: RXM0EXIDM = 1;
 15968  003D30  87F9               	bsf	249,3,b	;volatile
 15969                           
 15970                           ; BSR set to: 14
 15971                           ;ECAN.c: 489: RXM1SIDH = (long)0x01FFFF00L >> 21L; RXM1SIDL = (((long)0x01FFFF00L >> 13L
      +                          ) & 0xe0) | ((long)(0x01FFFF00L) & 0x03L); RXM1EIDH = (long)0x01FFFF00L >> 8L; RXM1EIDL 
      +                          = 0x01FFFF00L;;
 15972  003D32  0E0F               	movlw	15
 15973  003D34  6FFC               	movwf	252,b	;volatile
 15974                           
 15975                           ; BSR set to: 14
 15976  003D36  0EE0               	movlw	224
 15977  003D38  6FFD               	movwf	253,b	;volatile
 15978                           
 15979                           ; BSR set to: 14
 15980  003D3A  69FE               	setf	254,b	;volatile
 15981                           
 15982                           ; BSR set to: 14
 15983  003D3C  6BFF               	clrf	255,b	;volatile
 15984                           
 15985                           ; BSR set to: 14
 15986                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 15987  003D3E  87FD               	bsf	253,3,b	;volatile
 15988                           
 15989                           ; BSR set to: 14
 15990                           ;ECAN.c: 498: ECANSetOperationMode(0x00);
 15991  003D40  0E00               	movlw	0
 15992  003D42  EF82  F021         	goto	_ECANSetOperationMode
 15993  003D46                     __end_of_ECANInitialize:
 15994                           	opt stack 0
 15995                           tblptru	equ	0xFF8
 15996                           tblptrh	equ	0xFF7
 15997                           tblptrl	equ	0xFF6
 15998                           tablat	equ	0xFF5
 15999                           prodh	equ	0xFF4
 16000                           prodl	equ	0xFF3
 16001                           intcon	equ	0xFF2
 16002                           postinc0	equ	0xFEE
 16003                           wreg	equ	0xFE8
 16004                           indf1	equ	0xFE7
 16005                           fsr1h	equ	0xFE2
 16006                           fsr1l	equ	0xFE1
 16007                           indf2	equ	0xFDF
 16008                           postinc2	equ	0xFDE
 16009                           postdec2	equ	0xFDD
 16010                           plusw2	equ	0xFDB
 16011                           fsr2h	equ	0xFDA
 16012                           fsr2l	equ	0xFD9
 16013                           status	equ	0xFD8
 16014                           
 16015 ;; *************** function _ECANSetOperationMode *****************
 16016 ;; Defined at:
 16017 ;;		line 1012 in file "../ECAN.c"
 16018 ;; Parameters:    Size  Location     Type
 16019 ;;  mode            1    wreg     enum E18998
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;  mode            1    7[COMRAM] enum E18998
 16022 ;; Return value:  Size  Location     Type
 16023 ;;		None               void
 16024 ;; Registers used:
 16025 ;;		wreg, status,2, status,0
 16026 ;; Tracked objects:
 16027 ;;		On entry : 0/0
 16028 ;;		On exit  : 0/0
 16029 ;;		Unchanged: 0/0
 16030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16032 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16034 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16035 ;;Total ram usage:        1 bytes
 16036 ;; Hardware stack levels used:    1
 16037 ;; Hardware stack levels required when called:    2
 16038 ;; This function calls:
 16039 ;;		Nothing
 16040 ;; This function is called by:
 16041 ;;		_calculateSetFilterMask
 16042 ;;		_ECANInitialize
 16043 ;; This function uses a non-reentrant model
 16044 ;;
 16045                           
 16046                           	psect	text70
 16047  004304                     __ptext70:
 16048                           	opt stack 0
 16049  004304                     _ECANSetOperationMode:
 16050                           	opt stack 23
 16051                           
 16052                           ;incstack = 0
 16053                           ;incstack = 0
 16054                           ;ECANSetOperationMode@mode stored from wreg
 16055  004304  CFE8 F008          	movff	wreg,ECANSetOperationMode@mode
 16056                           
 16057                           ;ECAN.c: 1013: CANCON &= 0x1F;
 16058  004308  0E1F               	movlw	31
 16059  00430A  166F               	andwf	3951,f,c	;volatile
 16060                           
 16061                           ;ECAN.c: 1014: CANCON |= mode;
 16062  00430C  5008               	movf	ECANSetOperationMode@mode,w,c
 16063  00430E  126F               	iorwf	3951,f,c	;volatile
 16064  004310                     l6733:
 16065  004310  506F               	movf	3951,w,c	;volatile
 16066  004312  0BE0               	andlw	224
 16067  004314  1808               	xorwf	ECANSetOperationMode@mode,w,c
 16068  004316  B4D8               	btfsc	status,2,c
 16069  004318  0012               	return	
 16070  00431A  D7FA               	goto	l6733
 16071  00431C                     __end_of_ECANSetOperationMode:
 16072                           	opt stack 0
 16073                           tblptru	equ	0xFF8
 16074                           tblptrh	equ	0xFF7
 16075                           tblptrl	equ	0xFF6
 16076                           tablat	equ	0xFF5
 16077                           prodh	equ	0xFF4
 16078                           prodl	equ	0xFF3
 16079                           intcon	equ	0xFF2
 16080                           postinc0	equ	0xFEE
 16081                           wreg	equ	0xFE8
 16082                           indf1	equ	0xFE7
 16083                           fsr1h	equ	0xFE2
 16084                           fsr1l	equ	0xFE1
 16085                           indf2	equ	0xFDF
 16086                           postinc2	equ	0xFDE
 16087                           postdec2	equ	0xFDD
 16088                           plusw2	equ	0xFDB
 16089                           fsr2h	equ	0xFDA
 16090                           fsr2l	equ	0xFD9
 16091                           status	equ	0xFD8
 16092                           
 16093 ;; *************** function _OpenTimer0 *****************
 16094 ;; Defined at:
 16095 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;  config          1    wreg     unsigned char 
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;  config          1    7[COMRAM] unsigned char 
 16100 ;; Return value:  Size  Location     Type
 16101 ;;		None               void
 16102 ;; Registers used:
 16103 ;;		wreg, status,2, status,0
 16104 ;; Tracked objects:
 16105 ;;		On entry : 0/0
 16106 ;;		On exit  : 0/0
 16107 ;;		Unchanged: 0/0
 16108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16113 ;;Total ram usage:        1 bytes
 16114 ;; Hardware stack levels used:    1
 16115 ;; Hardware stack levels required when called:    2
 16116 ;; This function calls:
 16117 ;;		Nothing
 16118 ;; This function is called by:
 16119 ;;		_init
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           	psect	text71
 16124  004298                     __ptext71:
 16125                           	opt stack 0
 16126  004298                     _OpenTimer0:
 16127                           	opt stack 26
 16128                           
 16129                           ;incstack = 0
 16130                           ;incstack = 0
 16131                           ;OpenTimer0@config stored from wreg
 16132  004298  CFE8 F008          	movff	wreg,OpenTimer0@config
 16133  00429C  5008               	movf	OpenTimer0@config,w,c
 16134  00429E  0B7F               	andlw	127
 16135  0042A0  6ED5               	movwf	4053,c	;volatile
 16136  0042A2  6AD7               	clrf	4055,c	;volatile
 16137  0042A4  6AD6               	clrf	4054,c	;volatile
 16138  0042A6  94F2               	bcf	intcon,2,c	;volatile
 16139  0042A8  AE08               	btfss	OpenTimer0@config,7,c
 16140  0042AA  D002               	goto	l1318
 16141  0042AC  8AF2               	bsf	intcon,5,c	;volatile
 16142  0042AE  D001               	goto	l1319
 16143  0042B0                     l1318:
 16144  0042B0  9AF2               	bcf	intcon,5,c	;volatile
 16145  0042B2                     l1319:
 16146  0042B2  8ED5               	bsf	4053,7,c	;volatile
 16147  0042B4  0012               	return	
 16148  0042B6                     __end_of_OpenTimer0:
 16149                           	opt stack 0
 16150                           tblptru	equ	0xFF8
 16151                           tblptrh	equ	0xFF7
 16152                           tblptrl	equ	0xFF6
 16153                           tablat	equ	0xFF5
 16154                           prodh	equ	0xFF4
 16155                           prodl	equ	0xFF3
 16156                           intcon	equ	0xFF2
 16157                           postinc0	equ	0xFEE
 16158                           wreg	equ	0xFE8
 16159                           indf1	equ	0xFE7
 16160                           fsr1h	equ	0xFE2
 16161                           fsr1l	equ	0xFE1
 16162                           indf2	equ	0xFDF
 16163                           postinc2	equ	0xFDE
 16164                           postdec2	equ	0xFDD
 16165                           plusw2	equ	0xFDB
 16166                           fsr2h	equ	0xFDA
 16167                           fsr2l	equ	0xFD9
 16168                           status	equ	0xFD8
 16169                           
 16170 ;; *************** function _init_app_ram *****************
 16171 ;; Defined at:
 16172 ;;		line 446 in file "../main.c"
 16173 ;; Parameters:    Size  Location     Type
 16174 ;;		None
 16175 ;; Auto vars:     Size  Location     Type
 16176 ;;  i               1   12[COMRAM] unsigned char 
 16177 ;; Return value:  Size  Location     Type
 16178 ;;		None               void
 16179 ;; Registers used:
 16180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16181 ;; Tracked objects:
 16182 ;;		On entry : 0/0
 16183 ;;		On exit  : 0/0
 16184 ;;		Unchanged: 0/0
 16185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16187 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16189 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16190 ;;Total ram usage:        3 bytes
 16191 ;; Hardware stack levels used:    1
 16192 ;; Hardware stack levels required when called:    3
 16193 ;; This function calls:
 16194 ;;		_readEEPROM
 16195 ;; This function is called by:
 16196 ;;		_main
 16197 ;;		_init
 16198 ;;		_vscp_restoreDefaults
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           	psect	text72
 16203  0037F2                     __ptext72:
 16204                           	opt stack 0
 16205  0037F2                     _init_app_ram:
 16206                           	opt stack 23
 16207                           
 16208                           ;main.c: 447: uint8_t i;
 16209                           ;main.c: 449: measurement_clock = 0;
 16210                           
 16211                           ;incstack = 0
 16212                           ;incstack = 0
 16213  0037F2  0100               	movlb	0	; () banked
 16214  0037F4  6B80               	clrf	_measurement_clock& (0+255),b	;volatile
 16215  0037F6  6B81               	clrf	(_measurement_clock+1)& (0+255),b	;volatile
 16216  0037F8  6B82               	clrf	(_measurement_clock+2)& (0+255),b	;volatile
 16217  0037FA  6B83               	clrf	(_measurement_clock+3)& (0+255),b	;volatile
 16218                           
 16219                           ;main.c: 451: seconds = 0;
 16220  0037FC  6B90               	clrf	_seconds& (0+255),b
 16221                           
 16222                           ;main.c: 452: minutes = 0;
 16223  0037FE  6B8E               	clrf	_minutes& (0+255),b
 16224                           
 16225                           ;main.c: 453: hours = 0;
 16226  003800  6B8D               	clrf	_hours& (0+255),b
 16227                           
 16228                           ;main.c: 455: relay_pulse_flags = 0;
 16229  003802  6B8F               	clrf	_relay_pulse_flags& (0+255),b
 16230                           
 16231                           ;main.c: 458: for ( i = 0; i < 8; i++ ) {
 16232  003804  6A0D               	clrf	init_app_ram@i,c
 16233  003806                     l7251:
 16234                           
 16235                           ; BSR set to: 0
 16236                           ;main.c: 459: relay_pulse_timer[ i ] = 0;
 16237  003806  500D               	movf	init_app_ram@i,w,c
 16238  003808  0D02               	mullw	2
 16239  00380A  50F3               	movf	prodl,w,c
 16240  00380C  0F70               	addlw	low _relay_pulse_timer
 16241  00380E  6ED9               	movwf	fsr2l,c
 16242  003810  6ADA               	clrf	fsr2h,c
 16243  003812  6ADE               	clrf	postinc2,c
 16244  003814  6ADD               	clrf	postdec2,c
 16245                           
 16246                           ;main.c: 460: relay_protection_timer[ i ] = 0;
 16247  003816  500D               	movf	init_app_ram@i,w,c
 16248  003818  0D02               	mullw	2
 16249  00381A  50F3               	movf	prodl,w,c
 16250  00381C  0F60               	addlw	low _relay_protection_timer
 16251  00381E  6ED9               	movwf	fsr2l,c
 16252  003820  6ADA               	clrf	fsr2h,c
 16253  003822  6ADE               	clrf	postinc2,c
 16254  003824  6ADD               	clrf	postdec2,c
 16255                           
 16256                           ; BSR set to: 0
 16257  003826  2A0D               	incf	init_app_ram@i,f,c
 16258                           
 16259                           ; BSR set to: 0
 16260  003828  0E07               	movlw	7
 16261  00382A  640D               	cpfsgt	init_app_ram@i,c
 16262  00382C  D7EC               	goto	l7251
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;main.c: 461: }
 16266                           ;main.c: 463: for ( i=0; i<7; i++ ) {
 16267  00382E  6A0D               	clrf	init_app_ram@i,c
 16268  003830                     l7261:
 16269                           
 16270                           ;main.c: 466: if ( readEEPROM( 0x43 + 10 + i ) &
 16271                           ;main.c: 467: 0x01 ) {
 16272  003830  0E4D               	movlw	77
 16273  003832  240D               	addwf	init_app_ram@i,w,c
 16274  003834  6E08               	movwf	?_readEEPROM,c
 16275  003836  6A09               	clrf	?_readEEPROM+1,c
 16276  003838  0E00               	movlw	0
 16277  00383A  2209               	addwfc	?_readEEPROM+1,f,c
 16278  00383C  ECDB  F021         	call	_readEEPROM	;wreg free
 16279  003840  6E0B               	movwf	??_init_app_ram& (0+255),c
 16280  003842  A00B               	btfss	??_init_app_ram,0,c
 16281  003844  D027               	goto	l7267
 16282                           
 16283                           ;main.c: 469: relay_pulse_flags |= (1<<i);
 16284  003846  C00D  F00B         	movff	init_app_ram@i,??_init_app_ram
 16285  00384A  0E01               	movlw	1
 16286  00384C  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16287  00384E  2A0B               	incf	??_init_app_ram,f,c
 16288  003850  D002               	goto	u8074
 16289  003852                     u8075:
 16290  003852  90D8               	bcf	status,0,c
 16291  003854  360C               	rlcf	??_init_app_ram+1,f,c
 16292  003856                     u8074:
 16293  003856  2E0B               	decfsz	??_init_app_ram,f,c
 16294  003858  D7FC               	goto	u8075
 16295  00385A  500C               	movf	??_init_app_ram+1,w,c
 16296  00385C  0100               	movlb	0	; () banked
 16297  00385E  138F               	iorwf	_relay_pulse_flags& (0+255),f,b
 16298                           
 16299                           ; BSR set to: 0
 16300                           ;main.c: 470: relay_pulse_timer[ i ] =
 16301                           ;main.c: 471: readEEPROM( 0x43 + 18 + i ) * 256 +
 16302                           ;main.c: 472: readEEPROM( 0x43 + 19 + i );
 16303  003860  0E55               	movlw	85
 16304  003862  240D               	addwf	init_app_ram@i,w,c
 16305  003864  6E08               	movwf	?_readEEPROM,c
 16306  003866  6A09               	clrf	?_readEEPROM+1,c
 16307  003868  0E00               	movlw	0
 16308  00386A  2209               	addwfc	?_readEEPROM+1,f,c
 16309  00386C  ECDB  F021         	call	_readEEPROM	;wreg free
 16310  003870  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16311  003872  6A0B               	clrf	??_init_app_ram& (0+255),c
 16312  003874  0E56               	movlw	86
 16313  003876  240D               	addwf	init_app_ram@i,w,c
 16314  003878  6E08               	movwf	?_readEEPROM,c
 16315  00387A  6A09               	clrf	?_readEEPROM+1,c
 16316  00387C  0E00               	movlw	0
 16317  00387E  2209               	addwfc	?_readEEPROM+1,f,c
 16318  003880  ECDB  F021         	call	_readEEPROM	;wreg free
 16319  003884  D831               	call	PL58	;call to abstracted procedure
 16320  003886  0F70               	addlw	low _relay_pulse_timer
 16321  003888  6ED9               	movwf	fsr2l,c
 16322  00388A  6ADA               	clrf	fsr2h,c
 16323  00388C  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16324  003890  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16325  003894                     l7267:
 16326                           
 16327                           ;main.c: 473: }
 16328                           ;main.c: 476: if ( readEEPROM(0x43 + 15 + i ) & 0x04) {
 16329  003894  0E52               	movlw	82
 16330  003896  240D               	addwf	init_app_ram@i,w,c
 16331  003898  6E08               	movwf	?_readEEPROM,c
 16332  00389A  6A09               	clrf	?_readEEPROM+1,c
 16333  00389C  0E00               	movlw	0
 16334  00389E  2209               	addwfc	?_readEEPROM+1,f,c
 16335  0038A0  ECDB  F021         	call	_readEEPROM	;wreg free
 16336  0038A4  6E0B               	movwf	??_init_app_ram& (0+255),c
 16337  0038A6  A40B               	btfss	??_init_app_ram,2,c
 16338  0038A8  D01A               	goto	l7271
 16339                           
 16340                           ;main.c: 477: relay_protection_timer[ i ] =
 16341                           ;main.c: 478: readEEPROM(0x43 + 44 + i ) * 256 +
 16342                           ;main.c: 479: readEEPROM(0x43 + 45 + i );
 16343  0038AA  0E6F               	movlw	111
 16344  0038AC  240D               	addwf	init_app_ram@i,w,c
 16345  0038AE  6E08               	movwf	?_readEEPROM,c
 16346  0038B0  6A09               	clrf	?_readEEPROM+1,c
 16347  0038B2  0E00               	movlw	0
 16348  0038B4  2209               	addwfc	?_readEEPROM+1,f,c
 16349  0038B6  ECDB  F021         	call	_readEEPROM	;wreg free
 16350  0038BA  6E0C               	movwf	(??_init_app_ram+1)& (0+255),c
 16351  0038BC  6A0B               	clrf	??_init_app_ram& (0+255),c
 16352  0038BE  0E70               	movlw	112
 16353  0038C0  240D               	addwf	init_app_ram@i,w,c
 16354  0038C2  6E08               	movwf	?_readEEPROM,c
 16355  0038C4  6A09               	clrf	?_readEEPROM+1,c
 16356  0038C6  0E00               	movlw	0
 16357  0038C8  2209               	addwfc	?_readEEPROM+1,f,c
 16358  0038CA  ECDB  F021         	call	_readEEPROM	;wreg free
 16359  0038CE  D80C               	call	PL58	;call to abstracted procedure
 16360  0038D0  0F60               	addlw	low _relay_protection_timer
 16361  0038D2  6ED9               	movwf	fsr2l,c
 16362  0038D4  6ADA               	clrf	fsr2h,c
 16363  0038D6  C00B  FFDE         	movff	??_init_app_ram,postinc2
 16364  0038DA  C00C  FFDD         	movff	??_init_app_ram+1,postdec2
 16365  0038DE                     l7271:
 16366  0038DE  2A0D               	incf	init_app_ram@i,f,c
 16367  0038E0  0E06               	movlw	6
 16368  0038E2  640D               	cpfsgt	init_app_ram@i,c
 16369  0038E4  D7A5               	goto	l7261
 16370  0038E6  0C06               	retlw	6
 16371  0038E8                     __end_of_init_app_ram:
 16372                           	opt stack 0
 16373  0038E8                     PL58:
 16374                           	opt stack 23
 16375  0038E8  260B               	addwf	??_init_app_ram,f,c
 16376  0038EA  0E00               	movlw	0
 16377  0038EC  220C               	addwfc	??_init_app_ram+1,f,c
 16378  0038EE  500D               	movf	init_app_ram@i,w,c
 16379  0038F0  0D02               	mullw	2
 16380  0038F2  50F3               	movf	prodl,w,c
 16381  0038F4  0100               	movlb	0	; () banked
 16382  0038F6  0012               	return	
 16383  0038F8                     __end_ofPL58:
 16384                           	opt stack 0
 16385                           tblptru	equ	0xFF8
 16386                           tblptrh	equ	0xFF7
 16387                           tblptrl	equ	0xFF6
 16388                           tablat	equ	0xFF5
 16389                           prodh	equ	0xFF4
 16390                           prodl	equ	0xFF3
 16391                           intcon	equ	0xFF2
 16392                           postinc0	equ	0xFEE
 16393                           wreg	equ	0xFE8
 16394                           indf1	equ	0xFE7
 16395                           fsr1h	equ	0xFE2
 16396                           fsr1l	equ	0xFE1
 16397                           indf2	equ	0xFDF
 16398                           postinc2	equ	0xFDE
 16399                           postdec2	equ	0xFDD
 16400                           plusw2	equ	0xFDB
 16401                           fsr2h	equ	0xFDA
 16402                           fsr2l	equ	0xFD9
 16403                           status	equ	0xFD8
 16404                           
 16405 ;; *************** function _WriteTimer0 *****************
 16406 ;; Defined at:
 16407 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 16408 ;; Parameters:    Size  Location     Type
 16409 ;;  timer0          2    7[COMRAM] unsigned int 
 16410 ;; Auto vars:     Size  Location     Type
 16411 ;;  timer           2    9[COMRAM] struct Timers
 16412 ;; Return value:  Size  Location     Type
 16413 ;;		None               void
 16414 ;; Registers used:
 16415 ;;		None
 16416 ;; Tracked objects:
 16417 ;;		On entry : 0/0
 16418 ;;		On exit  : 0/0
 16419 ;;		Unchanged: 0/0
 16420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16424 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16425 ;;Total ram usage:        4 bytes
 16426 ;; Hardware stack levels used:    1
 16427 ;; Hardware stack levels required when called:    2
 16428 ;; This function calls:
 16429 ;;		Nothing
 16430 ;; This function is called by:
 16431 ;;		_init
 16432 ;; This function uses a non-reentrant model
 16433 ;;
 16434                           
 16435                           	psect	text73
 16436  0043A4                     __ptext73:
 16437                           	opt stack 0
 16438  0043A4                     _WriteTimer0:
 16439                           	opt stack 26
 16440                           
 16441                           ;incstack = 0
 16442                           ;incstack = 0
 16443  0043A4  C008  F00A         	movff	WriteTimer0@timer0,WriteTimer0@timer
 16444  0043A8  C009  F00B         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 16445  0043AC  C00B  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 16446  0043B0  C00A  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 16447  0043B4  0012               	return	
 16448  0043B6                     __end_of_WriteTimer0:
 16449                           	opt stack 0
 16450                           tblptru	equ	0xFF8
 16451                           tblptrh	equ	0xFF7
 16452                           tblptrl	equ	0xFF6
 16453                           tablat	equ	0xFF5
 16454                           prodh	equ	0xFF4
 16455                           prodl	equ	0xFF3
 16456                           intcon	equ	0xFF2
 16457                           postinc0	equ	0xFEE
 16458                           wreg	equ	0xFE8
 16459                           indf1	equ	0xFE7
 16460                           fsr1h	equ	0xFE2
 16461                           fsr1l	equ	0xFE1
 16462                           indf2	equ	0xFDF
 16463                           postinc2	equ	0xFDE
 16464                           postdec2	equ	0xFDD
 16465                           plusw2	equ	0xFDB
 16466                           fsr2h	equ	0xFDA
 16467                           fsr2l	equ	0xFD9
 16468                           status	equ	0xFD8
 16469                           
 16470 ;; *************** function _vscp_readAppReg *****************
 16471 ;; Defined at:
 16472 ;;		line 910 in file "../main.c"
 16473 ;; Parameters:    Size  Location     Type
 16474 ;;  reg             1    wreg     unsigned char 
 16475 ;; Auto vars:     Size  Location     Type
 16476 ;;  reg             1   11[COMRAM] unsigned char 
 16477 ;;  rv              1   10[COMRAM] unsigned char 
 16478 ;; Return value:  Size  Location     Type
 16479 ;;                  1    wreg      unsigned char 
 16480 ;; Registers used:
 16481 ;;		wreg, status,2, status,0, cstack
 16482 ;; Tracked objects:
 16483 ;;		On entry : F/0
 16484 ;;		On exit  : 0/0
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16490 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16491 ;;Total ram usage:        2 bytes
 16492 ;; Hardware stack levels used:    1
 16493 ;; Hardware stack levels required when called:    3
 16494 ;; This function calls:
 16495 ;;		_readEEPROM
 16496 ;; This function is called by:
 16497 ;;		_vscp_readRegister
 16498 ;;		_vscp_handleProtocolEvent
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text74
 16503  003B4C                     __ptext74:
 16504                           	opt stack 0
 16505  003B4C                     _vscp_readAppReg:
 16506                           	opt stack 24
 16507                           
 16508                           ;incstack = 0
 16509                           ;incstack = 0
 16510                           ;vscp_readAppReg@reg stored from wreg
 16511  003B4C  CFE8 F00C          	movff	wreg,vscp_readAppReg@reg
 16512                           
 16513                           ; BSR set to: 0
 16514                           ;main.c: 911: uint8_t rv;
 16515                           ;main.c: 913: rv = 0x00;
 16516  003B50  6A0B               	clrf	vscp_readAppReg@rv,c
 16517                           
 16518                           ; BSR set to: 0
 16519                           ;main.c: 916: if ( reg == 0x00 ) {
 16520  003B52  660C               	tstfsz	vscp_readAppReg@reg,c
 16521  003B54  D006               	goto	l8053
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;main.c: 917: rv = readEEPROM(0x43 + 0);
 16525  003B56  6A09               	clrf	?_readEEPROM+1,c
 16526  003B58  0E43               	movlw	67
 16527  003B5A  6E08               	movwf	?_readEEPROM,c
 16528  003B5C  ECDB  F021         	call	_readEEPROM	;wreg free
 16529  003B60  D04D               	goto	L56
 16530  003B62                     l8053:
 16531                           
 16532                           ; BSR set to: 0
 16533                           ;main.c: 920: else if ( reg == 0x01 ) {
 16534  003B62  040C               	decf	vscp_readAppReg@reg,w,c
 16535  003B64  E106               	bnz	l8057
 16536                           
 16537                           ; BSR set to: 0
 16538                           ;main.c: 921: rv = readEEPROM(0x43 + 1);
 16539  003B66  6A09               	clrf	?_readEEPROM+1,c
 16540  003B68  0E44               	movlw	68
 16541  003B6A  6E08               	movwf	?_readEEPROM,c
 16542  003B6C  ECDB  F021         	call	_readEEPROM	;wreg free
 16543  003B70  D045               	goto	L56
 16544  003B72                     l8057:
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;main.c: 923: else if ( (reg >= 2) && (reg < 10) ) {
 16548  003B72  0E01               	movlw	1
 16549  003B74  640C               	cpfsgt	vscp_readAppReg@reg,c
 16550  003B76  D034               	goto	l8081
 16551                           
 16552                           ; BSR set to: 0
 16553  003B78  0E0A               	movlw	10
 16554  003B7A  600C               	cpfslt	vscp_readAppReg@reg,c
 16555  003B7C  D031               	goto	l8081
 16556  003B7E  D01E               	goto	l8079
 16557  003B80                     l8063:
 16558                           
 16559                           ; BSR set to: 0
 16560                           ;main.c: 929: rv = LATBbits.LATB4;
 16561  003B80  0E00               	movlw	0
 16562  003B82  B88A               	btfsc	3978,4,c	;volatile
 16563  003B84  0E01               	movlw	1
 16564  003B86  D03A               	goto	L56
 16565  003B88                     l8065:
 16566                           
 16567                           ; BSR set to: 0
 16568                           ;main.c: 934: rv = LATBbits.LATB1;
 16569  003B88  0E00               	movlw	0
 16570  003B8A  B28A               	btfsc	3978,1,c	;volatile
 16571  003B8C  0E01               	movlw	1
 16572  003B8E  D036               	goto	L56
 16573  003B90                     l8067:
 16574                           
 16575                           ; BSR set to: 0
 16576                           ;main.c: 939: rv = LATBbits.LATB0;
 16577  003B90  0E00               	movlw	0
 16578  003B92  B08A               	btfsc	3978,0,c	;volatile
 16579  003B94  0E01               	movlw	1
 16580  003B96  D032               	goto	L56
 16581  003B98                     l8069:
 16582                           
 16583                           ; BSR set to: 0
 16584                           ;main.c: 944: rv = LATCbits.LATC7;
 16585  003B98  0E00               	movlw	0
 16586  003B9A  BE8B               	btfsc	3979,7,c	;volatile
 16587  003B9C  0E01               	movlw	1
 16588  003B9E  D02E               	goto	L56
 16589  003BA0                     l8071:
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;main.c: 949: rv = LATCbits.LATC6;
 16593  003BA0  0E00               	movlw	0
 16594  003BA2  BC8B               	btfsc	3979,6,c	;volatile
 16595  003BA4  0E01               	movlw	1
 16596  003BA6  D02A               	goto	L56
 16597  003BA8                     l8073:
 16598                           
 16599                           ; BSR set to: 0
 16600                           ;main.c: 954: rv = LATCbits.LATC5;
 16601  003BA8  0E00               	movlw	0
 16602  003BAA  BA8B               	btfsc	3979,5,c	;volatile
 16603  003BAC  0E01               	movlw	1
 16604  003BAE  D026               	goto	L56
 16605  003BB0                     l8075:
 16606                           
 16607                           ; BSR set to: 0
 16608                           ;main.c: 959: rv = LATCbits.LATC4;
 16609  003BB0  0E00               	movlw	0
 16610  003BB2  B88B               	btfsc	3979,4,c	;volatile
 16611  003BB4  0E01               	movlw	1
 16612  003BB6  D022               	goto	L56
 16613  003BB8                     l290:
 16614                           
 16615                           ; BSR set to: 0
 16616                           ;main.c: 964: rv = 0;
 16617  003BB8  6A0B               	clrf	vscp_readAppReg@rv,c
 16618                           
 16619                           ;main.c: 965: break;
 16620  003BBA  D021               	goto	l8087
 16621  003BBC                     l8079:
 16622                           
 16623                           ; BSR set to: 0
 16624  003BBC  500C               	movf	vscp_readAppReg@reg,w,c
 16625                           
 16626                           ; Switch size 1, requested type "space"
 16627                           ; Number of cases is 8, Range of values is 2 to 9
 16628                           ; switch strategies available:
 16629                           ; Name         Instructions Cycles
 16630                           ; simple_byte           25    13 (average)
 16631                           ;	Chosen strategy is simple_byte
 16632  003BBE  0A02               	xorlw	2	; case 2
 16633  003BC0  E0DF               	bz	l8063
 16634  003BC2  0A01               	xorlw	1	; case 3
 16635  003BC4  E0E1               	bz	l8065
 16636  003BC6  0A07               	xorlw	7	; case 4
 16637  003BC8  E0E3               	bz	l8067
 16638  003BCA  0A01               	xorlw	1	; case 5
 16639  003BCC  E0E5               	bz	l8069
 16640  003BCE  0A03               	xorlw	3	; case 6
 16641  003BD0  E0E7               	bz	l8071
 16642  003BD2  0A01               	xorlw	1	; case 7
 16643  003BD4  E0E9               	bz	l8073
 16644  003BD6  0A0F               	xorlw	15	; case 8
 16645  003BD8  E0EB               	bz	l8075
 16646  003BDA  0A01               	xorlw	1	; case 9
 16647  003BDC  E0ED               	bz	l290
 16648  003BDE  D00F               	goto	l8087
 16649  003BE0                     l8081:
 16650                           
 16651                           ; BSR set to: 0
 16652                           ;main.c: 969: else if ( ( reg >= 10 ) &&
 16653                           ;main.c: 970: (reg < (72 + 7 * 8 ) ) ) {
 16654  003BE0  0E09               	movlw	9
 16655  003BE2  640C               	cpfsgt	vscp_readAppReg@reg,c
 16656  003BE4  D00C               	goto	l8087
 16657                           
 16658                           ; BSR set to: 0
 16659  003BE6  0E80               	movlw	128
 16660  003BE8  600C               	cpfslt	vscp_readAppReg@reg,c
 16661  003BEA  D009               	goto	l8087
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;main.c: 971: rv = readEEPROM( 0x43 + reg );
 16665  003BEC  0E43               	movlw	67
 16666  003BEE  240C               	addwf	vscp_readAppReg@reg,w,c
 16667  003BF0  6E08               	movwf	?_readEEPROM,c
 16668  003BF2  6A09               	clrf	?_readEEPROM+1,c
 16669  003BF4  0E00               	movlw	0
 16670  003BF6  2209               	addwfc	?_readEEPROM+1,f,c
 16671  003BF8  ECDB  F021         	call	_readEEPROM	;wreg free
 16672  003BFC                     L56:
 16673  003BFC  6E0B               	movwf	vscp_readAppReg@rv,c
 16674  003BFE                     l8087:
 16675                           
 16676                           ;main.c: 972: }
 16677                           ;main.c: 974: return rv;
 16678  003BFE  500B               	movf	vscp_readAppReg@rv,w,c
 16679  003C00  0012               	return	
 16680  003C02                     __end_of_vscp_readAppReg:
 16681                           	opt stack 0
 16682                           tblptru	equ	0xFF8
 16683                           tblptrh	equ	0xFF7
 16684                           tblptrl	equ	0xFF6
 16685                           tablat	equ	0xFF5
 16686                           prodh	equ	0xFF4
 16687                           prodl	equ	0xFF3
 16688                           intcon	equ	0xFF2
 16689                           postinc0	equ	0xFEE
 16690                           wreg	equ	0xFE8
 16691                           indf1	equ	0xFE7
 16692                           fsr1h	equ	0xFE2
 16693                           fsr1l	equ	0xFE1
 16694                           indf2	equ	0xFDF
 16695                           postinc2	equ	0xFDE
 16696                           postdec2	equ	0xFDD
 16697                           plusw2	equ	0xFDB
 16698                           fsr2h	equ	0xFDA
 16699                           fsr2l	equ	0xFD9
 16700                           status	equ	0xFD8
 16701                           
 16702 ;; *************** function _readEEPROM *****************
 16703 ;; Defined at:
 16704 ;;		line 92 in file "../../vscp_firmware/pic/common/eeprom.c"
 16705 ;; Parameters:    Size  Location     Type
 16706 ;;  address         2    7[COMRAM] unsigned short 
 16707 ;; Auto vars:     Size  Location     Type
 16708 ;;  data            1    9[COMRAM] unsigned char 
 16709 ;; Return value:  Size  Location     Type
 16710 ;;                  1    wreg      unsigned char 
 16711 ;; Registers used:
 16712 ;;		wreg, status,2
 16713 ;; Tracked objects:
 16714 ;;		On entry : 0/0
 16715 ;;		On exit  : 0/0
 16716 ;;		Unchanged: 0/0
 16717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16718 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16721 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16722 ;;Total ram usage:        3 bytes
 16723 ;; Hardware stack levels used:    1
 16724 ;; Hardware stack levels required when called:    2
 16725 ;; This function calls:
 16726 ;;		Nothing
 16727 ;; This function is called by:
 16728 ;;		_init_app_ram
 16729 ;;		_doApplicationOneSecondWork
 16730 ;;		_vscp_readNicknamePermanent
 16731 ;;		_vscp_getZone
 16732 ;;		_vscp_getSubzone
 16733 ;;		_vscp_readAppReg
 16734 ;;		_vscp_writeAppReg
 16735 ;;		_SendInformationEvent
 16736 ;;		_doDM
 16737 ;;		_doActionOn
 16738 ;;		_doActionOff
 16739 ;;		_doActionPulse
 16740 ;;		_doActionStatus
 16741 ;;		_doActionDisable
 16742 ;;		_doActionToggle
 16743 ;;		_vscp_getGUID
 16744 ;;		_vscp_getUserID
 16745 ;;		_vscp_getManufacturerId
 16746 ;;		_vscp_getSegmentCRC
 16747 ;;		_calculateSetFilterMask
 16748 ;; This function uses a non-reentrant model
 16749 ;;
 16750                           
 16751                           	psect	text75
 16752  0043B6                     __ptext75:
 16753                           	opt stack 0
 16754  0043B6                     _readEEPROM:
 16755                           	opt stack 25
 16756                           
 16757                           ;eeprom.c: 93: uint8_t data;
 16758                           ;eeprom.c: 98: EEADR = address & 0xff;
 16759                           
 16760                           ;incstack = 0
 16761                           ;incstack = 0
 16762  0043B6  C008  FF74         	movff	readEEPROM@address,3956	;volatile
 16763                           
 16764                           ;eeprom.c: 99: EECON1bits.EEPGD= 0;
 16765  0043BA  9E7F               	bcf	3967,7,c	;volatile
 16766                           
 16767                           ;eeprom.c: 100: EECON1bits.CFGS = 0;
 16768  0043BC  9C7F               	bcf	3967,6,c	;volatile
 16769                           
 16770                           ;eeprom.c: 101: EECON1bits.RD = 1;
 16771  0043BE  807F               	bsf	3967,0,c	;volatile
 16772                           
 16773                           ;eeprom.c: 102: data = EEDATA;
 16774  0043C0  CF73 F00A          	movff	3955,readEEPROM@data	;volatile
 16775                           
 16776                           ;eeprom.c: 104: return data;
 16777  0043C4  500A               	movf	readEEPROM@data,w,c
 16778  0043C6  0012               	return	
 16779  0043C8                     __end_of_readEEPROM:
 16780                           	opt stack 0
 16781                           tblptru	equ	0xFF8
 16782                           tblptrh	equ	0xFF7
 16783                           tblptrl	equ	0xFF6
 16784                           tablat	equ	0xFF5
 16785                           prodh	equ	0xFF4
 16786                           prodl	equ	0xFF3
 16787                           intcon	equ	0xFF2
 16788                           postinc0	equ	0xFEE
 16789                           wreg	equ	0xFE8
 16790                           indf1	equ	0xFE7
 16791                           fsr1h	equ	0xFE2
 16792                           fsr1l	equ	0xFE1
 16793                           indf2	equ	0xFDF
 16794                           postinc2	equ	0xFDE
 16795                           postdec2	equ	0xFDD
 16796                           plusw2	equ	0xFDB
 16797                           fsr2h	equ	0xFDA
 16798                           fsr2l	equ	0xFD9
 16799                           status	equ	0xFD8
 16800                           
 16801 ;; *************** function _interrupt_at_low_vector *****************
 16802 ;; Defined at:
 16803 ;;		line 155 in file "../main.c"
 16804 ;; Parameters:    Size  Location     Type
 16805 ;;		None
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;		None
 16808 ;; Return value:  Size  Location     Type
 16809 ;;		None               void
 16810 ;; Registers used:
 16811 ;;		wreg, status,2, status,0, cstack
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16819 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16820 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16821 ;;Total ram usage:        3 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    1
 16824 ;; This function calls:
 16825 ;;		i1_WriteTimer0
 16826 ;; This function is called by:
 16827 ;;		Interrupt level 1
 16828 ;; This function uses a non-reentrant model
 16829 ;;
 16830                           
 16831                           	psect	intcodelo
 16832  000018                     __pintcodelo:
 16833                           	opt stack 0
 16834  000018                     _interrupt_at_low_vector:
 16835                           	opt stack 20
 16836                           
 16837                           ;incstack = 0
 16838  000018  CFD8 F005          	movff	status,??_interrupt_at_low_vector
 16839  00001C  CFE8 F006          	movff	wreg,??_interrupt_at_low_vector+1
 16840  000020  CFE0 F007          	movff	bsr,??_interrupt_at_low_vector+2
 16841  000024                     
 16842                           ;main.c: 157: if ( INTCONbits.TMR0IF ) {
 16843  000024  A4F2               	btfss	intcon,2,c	;volatile
 16844  000026  D001               	goto	i1u786_21
 16845  000028  D001               	goto	i1u786_20
 16846  00002A                     i1u786_21:
 16847  00002A  D03E               	goto	i1l145
 16848  00002C                     i1u786_20:
 16849  00002C                     
 16850                           ;main.c: 160: WriteTimer0(0xfb1d);
 16851  00002C  0EFB               	movlw	251
 16852  00002E  6E02               	movwf	?i1_WriteTimer0+1,c
 16853  000030  0E1D               	movlw	29
 16854  000032  6E01               	movwf	?i1_WriteTimer0,c
 16855  000034  ECE4  F021         	call	i1_WriteTimer0	;wreg free
 16856  000038                     
 16857                           ;main.c: 162: vscp_timer++;
 16858  000038  0100               	movlb	0	; () banked
 16859  00003A  4B86               	infsnz	_vscp_timer& (0+255),f,b	;volatile
 16860  00003C  2B87               	incf	(_vscp_timer+1)& (0+255),f,b	;volatile
 16861  00003E                     
 16862                           ; BSR set to: 0
 16863                           ;main.c: 163: vscp_configtimer++;
 16864  00003E  4B84               	infsnz	_vscp_configtimer& (0+255),f,b	;volatile
 16865  000040  2B85               	incf	(_vscp_configtimer+1)& (0+255),f,b	;volatile
 16866  000042                     
 16867                           ; BSR set to: 0
 16868                           ;main.c: 164: measurement_clock++;
 16869  000042  0E01               	movlw	1
 16870  000044  2780               	addwf	_measurement_clock& (0+255),f,b	;volatile
 16871  000046  0E00               	movlw	0
 16872  000048  2381               	addwfc	(_measurement_clock+1)& (0+255),f,b	;volatile
 16873  00004A  0E00               	movlw	0
 16874  00004C  2382               	addwfc	(_measurement_clock+2)& (0+255),f,b	;volatile
 16875  00004E  0E00               	movlw	0
 16876  000050  2383               	addwfc	(_measurement_clock+3)& (0+255),f,b	;volatile
 16877  000052                     
 16878                           ; BSR set to: 0
 16879                           ;main.c: 167: if ( PORTCbits.RC0 ) {
 16880  000052  A082               	btfss	3970,0,c	;volatile
 16881  000054  D001               	goto	i1u787_21
 16882  000056  D001               	goto	i1u787_20
 16883  000058                     i1u787_21:
 16884  000058  D002               	goto	i1l7089
 16885  00005A                     i1u787_20:
 16886  00005A                     
 16887                           ; BSR set to: 0
 16888                           ;main.c: 168: vscp_initbtncnt = 0;
 16889  00005A  6B94               	clrf	_vscp_initbtncnt& (0+255),b	;volatile
 16890                           
 16891                           ;main.c: 169: } else {
 16892  00005C  D001               	goto	i1l137
 16893  00005E                     i1l7089:
 16894                           
 16895                           ; BSR set to: 0
 16896                           ;main.c: 171: vscp_initbtncnt++;
 16897  00005E  2B94               	incf	_vscp_initbtncnt& (0+255),f,b	;volatile
 16898  000060                     i1l137:
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;main.c: 172: }
 16902                           ;main.c: 175: vscp_statuscnt++;
 16903  000060  2A58               	incf	_vscp_statuscnt,f,c	;volatile
 16904  000062                     
 16905                           ; BSR set to: 0
 16906                           ;main.c: 176: if ( ( 0x02 == vscp_initledfunc ) &&
 16907                           ;main.c: 177: ( vscp_statuscnt > 100 ) ) {
 16908  000062  5056               	movf	_vscp_initledfunc,w,c
 16909  000064  0A02               	xorlw	2
 16910  000066  A4D8               	btfss	status,2,c
 16911  000068  D001               	goto	i1u788_21
 16912  00006A  D001               	goto	i1u788_20
 16913  00006C                     i1u788_21:
 16914  00006C  D00E               	goto	i1l7099
 16915  00006E                     i1u788_20:
 16916  00006E                     
 16917                           ; BSR set to: 0
 16918  00006E  0E64               	movlw	100
 16919  000070  6458               	cpfsgt	_vscp_statuscnt,c	;volatile
 16920  000072  D001               	goto	i1u789_21
 16921  000074  D001               	goto	i1u789_20
 16922  000076                     i1u789_21:
 16923  000076  D009               	goto	i1l7099
 16924  000078                     i1u789_20:
 16925  000078                     
 16926                           ; BSR set to: 0
 16927                           ;main.c: 179: if ( PORTCbits.RC1 ) {
 16928  000078  A282               	btfss	3970,1,c	;volatile
 16929  00007A  D001               	goto	i1u790_21
 16930  00007C  D001               	goto	i1u790_20
 16931  00007E                     i1u790_21:
 16932  00007E  D002               	goto	i1l139
 16933  000080                     i1u790_20:
 16934  000080                     
 16935                           ; BSR set to: 0
 16936                           ;main.c: 180: PORTCbits.RC1 = 0;
 16937  000080  9282               	bcf	3970,1,c	;volatile
 16938                           
 16939                           ;main.c: 181: }
 16940  000082  D001               	goto	i1l140
 16941  000084                     i1l139:
 16942                           
 16943                           ; BSR set to: 0
 16944                           ;main.c: 182: else {
 16945                           ;main.c: 183: PORTCbits.RC1 = 1;
 16946  000084  8282               	bsf	3970,1,c	;volatile
 16947  000086                     i1l140:
 16948                           
 16949                           ; BSR set to: 0
 16950                           ;main.c: 184: }
 16951                           ;main.c: 186: vscp_statuscnt = 0;
 16952  000086  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16953                           
 16954                           ;main.c: 188: }
 16955  000088  D00E               	goto	i1l141
 16956  00008A                     i1l7099:
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;main.c: 189: else if (0x01 == vscp_initledfunc) {
 16960  00008A  0456               	decf	_vscp_initledfunc,w,c
 16961  00008C  A4D8               	btfss	status,2,c
 16962  00008E  D001               	goto	i1u791_21
 16963  000090  D001               	goto	i1u791_20
 16964  000092                     i1u791_21:
 16965  000092  D003               	goto	i1l142
 16966  000094                     i1u791_20:
 16967  000094                     
 16968                           ; BSR set to: 0
 16969                           ;main.c: 190: PORTCbits.RC1 = 1;
 16970  000094  8282               	bsf	3970,1,c	;volatile
 16971                           
 16972                           ;main.c: 191: vscp_statuscnt = 0;
 16973  000096  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16974                           
 16975                           ;main.c: 192: }
 16976  000098  D006               	goto	i1l141
 16977  00009A                     i1l142:
 16978                           
 16979                           ; BSR set to: 0
 16980                           ;main.c: 193: else if (0x00 == vscp_initledfunc) {
 16981  00009A  6656               	tstfsz	_vscp_initledfunc,c
 16982  00009C  D001               	goto	i1u792_21
 16983  00009E  D001               	goto	i1u792_20
 16984  0000A0                     i1u792_21:
 16985  0000A0  D002               	goto	i1l141
 16986  0000A2                     i1u792_20:
 16987  0000A2                     
 16988                           ; BSR set to: 0
 16989                           ;main.c: 194: PORTCbits.RC1 = 0;
 16990  0000A2  9282               	bcf	3970,1,c	;volatile
 16991                           
 16992                           ;main.c: 195: vscp_statuscnt = 0;
 16993  0000A4  6A58               	clrf	_vscp_statuscnt,c	;volatile
 16994  0000A6                     i1l141:
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;main.c: 196: }
 16998                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 16999  0000A6  94F2               	bcf	intcon,2,c	;volatile
 17000  0000A8                     i1l145:
 17001  0000A8  C007  FFE0         	movff	??_interrupt_at_low_vector+2,bsr
 17002  0000AC  C006  FFE8         	movff	??_interrupt_at_low_vector+1,wreg
 17003  0000B0  C005  FFD8         	movff	??_interrupt_at_low_vector,status
 17004  0000B4  0010               	retfie	
 17005  0000B6                     __end_of_interrupt_at_low_vector:
 17006                           	opt stack 0
 17007                           tblptru	equ	0xFF8
 17008                           tblptrh	equ	0xFF7
 17009                           tblptrl	equ	0xFF6
 17010                           tablat	equ	0xFF5
 17011                           prodh	equ	0xFF4
 17012                           prodl	equ	0xFF3
 17013                           intcon	equ	0xFF2
 17014                           postinc0	equ	0xFEE
 17015                           wreg	equ	0xFE8
 17016                           indf1	equ	0xFE7
 17017                           fsr1h	equ	0xFE2
 17018                           fsr1l	equ	0xFE1
 17019                           bsr	equ	0xFE0
 17020                           indf2	equ	0xFDF
 17021                           postinc2	equ	0xFDE
 17022                           postdec2	equ	0xFDD
 17023                           plusw2	equ	0xFDB
 17024                           fsr2h	equ	0xFDA
 17025                           fsr2l	equ	0xFD9
 17026                           status	equ	0xFD8
 17027                           
 17028 ;; *************** function i1_WriteTimer0 *****************
 17029 ;; Defined at:
 17030 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 17031 ;; Parameters:    Size  Location     Type
 17032 ;;  timer0          2    0[COMRAM] unsigned int 
 17033 ;; Auto vars:     Size  Location     Type
 17034 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 17035 ;; Return value:  Size  Location     Type
 17036 ;;		None               void
 17037 ;; Registers used:
 17038 ;;		None
 17039 ;; Tracked objects:
 17040 ;;		On entry : 0/0
 17041 ;;		On exit  : 0/0
 17042 ;;		Unchanged: 0/0
 17043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17047 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17048 ;;Total ram usage:        4 bytes
 17049 ;; Hardware stack levels used:    1
 17050 ;; This function calls:
 17051 ;;		Nothing
 17052 ;; This function is called by:
 17053 ;;		_interrupt_at_low_vector
 17054 ;; This function uses a non-reentrant model
 17055 ;;
 17056                           
 17057                           	psect	text77
 17058  0043C8                     __ptext77:
 17059                           	opt stack 0
 17060  0043C8                     i1_WriteTimer0:
 17061                           	opt stack 20
 17062                           
 17063                           ;incstack = 0
 17064                           ;incstack = 0
 17065  0043C8  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 17066  0043CC  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 17067  0043D0  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 17068  0043D4  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 17069  0043D8  0012               	return	
 17070  0043DA                     __end_ofi1_WriteTimer0:
 17071                           	opt stack 0
 17072                           tblptru	equ	0xFF8
 17073                           tblptrh	equ	0xFF7
 17074                           tblptrl	equ	0xFF6
 17075                           tablat	equ	0xFF5
 17076                           prodh	equ	0xFF4
 17077                           prodl	equ	0xFF3
 17078                           intcon	equ	0xFF2
 17079                           postinc0	equ	0xFEE
 17080                           wreg	equ	0xFE8
 17081                           indf1	equ	0xFE7
 17082                           fsr1h	equ	0xFE2
 17083                           fsr1l	equ	0xFE1
 17084                           bsr	equ	0xFE0
 17085                           indf2	equ	0xFDF
 17086                           postinc2	equ	0xFDE
 17087                           postdec2	equ	0xFDD
 17088                           plusw2	equ	0xFDB
 17089                           fsr2h	equ	0xFDA
 17090                           fsr2l	equ	0xFD9
 17091                           status	equ	0xFD8
 17092                           tblptru	equ	0xFF8
 17093                           tblptrh	equ	0xFF7
 17094                           tblptrl	equ	0xFF6
 17095                           tablat	equ	0xFF5
 17096                           prodh	equ	0xFF4
 17097                           prodl	equ	0xFF3
 17098                           intcon	equ	0xFF2
 17099                           postinc0	equ	0xFEE
 17100                           wreg	equ	0xFE8
 17101                           indf1	equ	0xFE7
 17102                           fsr1h	equ	0xFE2
 17103                           fsr1l	equ	0xFE1
 17104                           bsr	equ	0xFE0
 17105                           indf2	equ	0xFDF
 17106                           postinc2	equ	0xFDE
 17107                           postdec2	equ	0xFDD
 17108                           plusw2	equ	0xFDB
 17109                           fsr2h	equ	0xFDA
 17110                           fsr2l	equ	0xFD9
 17111                           status	equ	0xFD8
 17112                           
 17113                           	psect	rparam
 17114  0000                     tblptru	equ	0xFF8
 17115                           tblptrh	equ	0xFF7
 17116                           tblptrl	equ	0xFF6
 17117                           tablat	equ	0xFF5
 17118                           prodh	equ	0xFF4
 17119                           prodl	equ	0xFF3
 17120                           intcon	equ	0xFF2
 17121                           postinc0	equ	0xFEE
 17122                           wreg	equ	0xFE8
 17123                           indf1	equ	0xFE7
 17124                           fsr1h	equ	0xFE2
 17125                           fsr1l	equ	0xFE1
 17126                           bsr	equ	0xFE0
 17127                           indf2	equ	0xFDF
 17128                           postinc2	equ	0xFDE
 17129                           postdec2	equ	0xFDD
 17130                           plusw2	equ	0xFDB
 17131                           fsr2h	equ	0xFDA
 17132                           fsr2l	equ	0xFD9
 17133                           status	equ	0xFD8
 17134                           tblptru	equ	0xFF8
 17135                           tblptrh	equ	0xFF7
 17136                           tblptrl	equ	0xFF6
 17137                           tablat	equ	0xFF5
 17138                           prodh	equ	0xFF4
 17139                           prodl	equ	0xFF3
 17140                           intcon	equ	0xFF2
 17141                           postinc0	equ	0xFEE
 17142                           wreg	equ	0xFE8
 17143                           indf1	equ	0xFE7
 17144                           fsr1h	equ	0xFE2
 17145                           fsr1l	equ	0xFE1
 17146                           bsr	equ	0xFE0
 17147                           indf2	equ	0xFDF
 17148                           postinc2	equ	0xFDE
 17149                           postdec2	equ	0xFDD
 17150                           plusw2	equ	0xFDB
 17151                           fsr2h	equ	0xFDA
 17152                           fsr2l	equ	0xFD9
 17153                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    33
    Data        0
    BSS         93
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     81      88
    BANK0           160     59     146
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    vscp_getMatrixInfo@pData	PTR unsigned char  size(1) Largest target is 13
		 -> vscp_omsg(BANK0[13]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXF1SIDH(ABS[1]), RXM1SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E18985 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pdata	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(COMRAM[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 14
		 -> vscp_imsg(BANK0[14]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 13
		 -> SendInformationEvent@data(COMRAM[3]), vscp_omsg(BANK0[13]), 


Critical Paths under _main in COMRAM

    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _vscp_sendHeartBeat->_vscp_sendEvent
    _vscp_getSubzone->_readEEPROM
    _vscp_getZone->_readEEPROM
    _doDM->_doActionOff
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionDisable->_writeEEPROM
    _doActionDisable->_readEEPROM
    _doActionStatus->_SendInformationEvent
    _doActionPulse->_readEEPROM
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeAppReg
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _vscp_setUserID->_writeEEPROM
    _vscp_setManufacturerId->_writeEEPROM
    _vscp_setGUID->_writeEEPROM
    _vscp_writeAppReg->_SendInformationEvent
    _calculateSetFilterMask->__CANIDToRegs
    _SendInformationEvent->_sendVSCPFrame
    _vscp_readRegister->_vscp_readStdReg
    _vscp_readStdReg->_vscp_getGUID
    _vscp_readStdReg->_vscp_getUserID
    _vscp_readStdReg->_vscp_getManufacturerId
    _vscp_readStdReg->_vscp_getFamilyCode
    _vscp_readStdReg->_vscp_getFamilyType
    _vscp_getManufacturerId->_readEEPROM
    _vscp_getUserID->_readEEPROM
    _vscp_getGUID->_readEEPROM
    _vscp_newNodeOnline->_vscp_sendEvent
    _vscp_handleDropNickname->_vscp_writeNicknamePermanent
    _vscp_readNicknamePermanent->_readEEPROM
    _vscp_handleSetNickname->_vscp_writeNicknamePermanent
    _vscp_handleSetNickname->_vscp_setSegmentCRC
    _vscp_handleHeartbeat->_vscp_writeNicknamePermanent
    _vscp_handleHeartbeat->_vscp_setSegmentCRC
    _vscp_goBootloaderMode->_writeEEPROM
    _vscp_handleProbeState->_vscp_sendEvent
    _vscp_goActiveState->_vscp_sendEvent
    _vscp_sendEvent->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _vscp_getEvent->_getVSCPFrame
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _vscp_check_pstorage->_vscp_writeNicknamePermanent
    _vscp_check_pstorage->_vscp_setSegmentCRC
    _vscp_check_pstorage->_vscp_setControlByte
    _vscp_setControlByte->_writeEEPROM
    _vscp_setSegmentCRC->_writeEEPROM
    _vscp_getSegmentCRC->_readEEPROM
    _vscp_writeNicknamePermanent->_writeEEPROM
    _init->_init_app_ram
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_readEEPROM
    _vscp_readAppReg->_readEEPROM

Critical Paths under _interrupt_at_low_vector in COMRAM

    _interrupt_at_low_vector->i1_WriteTimer0

Critical Paths under _main in BANK0

    _main->_vscp_handleProtocolEvent
    _doApplicationOneSecondWork->_doActionOff
    _vscp_doOneSecondWork->_vscp_sendHeartBeat
    _doDM->_doActionOn
    _doDM->_doActionStatus
    _doDM->_doActionToggle
    _doActionToggle->_SendInformationEvent
    _doActionStatus->_SendInformationEvent
    _doActionOn->_SendInformationEvent
    _doActionOff->_SendInformationEvent
    _vscp_handleProtocolEvent->_vscp_writeRegister
    _vscp_writeRegister->_vscp_writeAppReg
    _vscp_writeAppReg->_SendInformationEvent
    _SendInformationEvent->_sendVSCPFrame
    _vscp_sendEvent->_sendVSCPFrame

Critical Paths under _interrupt_at_low_vector in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupt_at_low_vector in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupt_at_low_vector in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupt_at_low_vector in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupt_at_low_vector in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupt_at_low_vector in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupt_at_low_vector in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupt_at_low_vector in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupt_at_low_vector in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupt_at_low_vector in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupt_at_low_vector in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupt_at_low_vector in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupt_at_low_vector in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupt_at_low_vector in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupt_at_low_vector in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   70463
                               _init
                _vscp_check_pstorage
                    _init_app_eeprom
                       _init_app_ram
                          _vscp_init
                        _writeEEPROM
                      _vscp_getEvent
                 _vscp_goActiveState
              _vscp_handleProbeState
           _vscp_handleProtocolEvent
                               _doDM
                         _vscp_error
               _vscp_doOneSecondWork
         _doApplicationOneSecondWork
                             _doWork
 ---------------------------------------------------------------------------------
 (1) _doWork                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doApplicationOneSecondWork                           6     6      0    7490
                                             27 BANK0      6     6      0
                         _readEEPROM
                        _doActionOff
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_doOneSecondWork                                 1     1      0    2438
                                             76 COMRAM     1     1      0
                       _vscp_getZone
                    _vscp_getSubzone
                 _vscp_sendHeartBeat
 ---------------------------------------------------------------------------------
 (2) _vscp_sendHeartBeat                                   2     1      1    2308
                                             75 COMRAM     1     1      0
                                             20 BANK0      1     0      1
                       _vscp_getZone (ARG)
                    _vscp_getSubzone (ARG)
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_getSubzone                                      0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_getZone                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_error                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doDM                                                17    17      0   15705
                                             28 BANK0     17    17      0
                         _readEEPROM
                        _doActionOff
                         _doActionOn
                      _doActionPulse
                     _doActionStatus
                    _doActionDisable
                     _doActionToggle
 ---------------------------------------------------------------------------------
 (2) _doActionToggle                                       7     6      1    3454
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionDisable                                      6     5      1     397
                                             10 COMRAM     6     5      1
                        _writeEEPROM
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionStatus                                       7     6      1    3412
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionPulse                                        7     6      1     353
                                             10 COMRAM     7     6      1
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _doActionOn                                           7     6      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      6     6      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (2) _doActionOff                                          6     5      1    3196
                                             80 COMRAM     1     0      1
                                             22 BANK0      5     5      0
                         _readEEPROM
               _SendInformationEvent
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProtocolEvent                            27    27      0   34567
                                             32 BANK0     27    27      0
                          _vscp_init
                    _vscp_readAppReg
                   _vscp_writeAppReg
                     _vscp_sendEvent
                       _vscp_getGUID
                    _vscp_getMDF_URL
              _vscp_goBootloaderMode
                 _vscp_getMatrixInfo
               _vscp_handleHeartbeat
             _vscp_handleSetNickname
            _vscp_handleDropNickname
                 _vscp_newNodeOnline
                  _vscp_readRegister
                    _vscp_readStdReg
                 _vscp_writeRegister
                   _vscp_writeStdReg
                            ___lbmod
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     159
                                              7 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _vscp_writeRegister                                   2     1      1   11300
                                             30 BANK0      2     1      1
                   _vscp_writeAppReg
                   _vscp_writeStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_writeStdReg                                     7     6      1    2191
                                             14 COMRAM     7     6      1
                       _vscp_setGUID
             _vscp_setManufacturerId
                       _vscp_getGUID
                     _vscp_getUserID
                     _vscp_setUserID
             _vscp_getManufacturerId
               _vscp_restoreDefaults
 ---------------------------------------------------------------------------------
 (3) _vscp_restoreDefaults                                 0     0      0     722
                    _init_app_eeprom
                       _init_app_ram
 ---------------------------------------------------------------------------------
 (4) _init_app_eeprom                                      4     4      0     180
                                             10 COMRAM     4     4      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setUserID                                       2     1      1      88
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setManufacturerId                               2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setGUID                                         2     1      1     110
                                             10 COMRAM     2     1      1
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeAppReg                                     9     8      1    8899
                                             80 COMRAM     1     0      1
                                             22 BANK0      8     8      0
                        _writeEEPROM
                         _readEEPROM
               _SendInformationEvent
                    _vscp_readAppReg (ARG)
             _calculateSetFilterMask
 ---------------------------------------------------------------------------------
 (4) _calculateSetFilterMask                              50    50      0    1879
                                             17 COMRAM    50    50      0
                         _readEEPROM
               _ECANSetOperationMode
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _SendInformationEvent                                 8     6      2    2567
                                             74 COMRAM     6     6      0
                                             20 BANK0      2     0      2
                         _readEEPROM
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _vscp_readRegister                                    1     1      0    1909
                                             28 COMRAM     1     1      0
                    _vscp_readAppReg
                    _vscp_readStdReg
 ---------------------------------------------------------------------------------
 (2) _vscp_readStdReg                                     17    17      0    1436
                                             11 COMRAM    17    17      0
               _vscp_getMajorVersion
               _vscp_getMinorVersion
            _vscp_getSubMinorVersion
                       _vscp_getGUID
                    _vscp_getMDF_URL
                     _vscp_getUserID
             _vscp_getManufacturerId
        _vscp_getBootLoaderAlgorithm
                 _vscp_getBufferSize
                 _vscp_getFamilyCode
                 _vscp_getFamilyType
          _vscp_getRegisterPagesUsed
 ---------------------------------------------------------------------------------
 (3) _vscp_getRegisterPagesUsed                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyType                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getFamilyCode                                   4     0      4       0
                                              7 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _vscp_getBufferSize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getBootLoaderAlgorithm                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getManufacturerId                               1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getUserID                                       1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getMDF_URL                                      2     2      0      22
                                              7 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _vscp_getGUID                                         1     1      0      96
                                             10 COMRAM     1     1      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSubMinorVersion                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMinorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _vscp_getMajorVersion                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _vscp_newNodeOnline                                   1     1      0    2246
                                             75 COMRAM     1     1      0
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (2) _vscp_handleDropNickname                              1     1      0     227
                                             11 COMRAM     1     1      0
                          _vscp_init
        _vscp_writeNicknamePermanent
 ---------------------------------------------------------------------------------
 (3) _vscp_init                                            0     0      0      65
         _vscp_readNicknamePermanent
 ---------------------------------------------------------------------------------
 (4) _vscp_readNicknamePermanent                           0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _vscp_handleSetNickname                               0     0      0     132
        _vscp_writeNicknamePermanent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_handleHeartbeat                                 0     0      0     197
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_getMatrixInfo                                   2     2      0      68
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _vscp_goBootloaderMode                                1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (1) _vscp_handleProbeState                                0     0      0    4624
                 _vscp_goActiveState
        _vscp_writeNicknamePermanent
                     _vscp_sendEvent
                 _vscp_setSegmentCRC
 ---------------------------------------------------------------------------------
 (2) _vscp_goActiveState                                   0     0      0    2246
                     _vscp_sendEvent
 ---------------------------------------------------------------------------------
 (3) _vscp_sendEvent                                       1     1      0    2246
                                             74 COMRAM     1     1      0
                      _sendVSCPFrame
 ---------------------------------------------------------------------------------
 (3) _sendVSCPFrame                                       32    24      8    2236
                                             62 COMRAM    12     4      8
                                              0 BANK0     20    20      0
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (4) _sendCANFrame                                         8     1      7    2016
                                             54 COMRAM     8     1      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (5) _ECANSendMessage                                     37    29      8    1886
                                             17 COMRAM    37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (6) __CANIDToRegs                                        10     3      7     693
                                              7 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (1) _vscp_getEvent                                        1     1      0    1599
                                             43 COMRAM     1     1      0
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _getVSCPFrame                                        14     9      5    1592
                                             29 COMRAM    14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     2      2    1328
                                             25 COMRAM     4     2      2
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  11     8      3    1180
                                             14 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     489
                                              7 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      52
                                              7 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (1) _vscp_check_pstorage                                  0     0      0     263
        _vscp_writeNicknamePermanent
                 _vscp_getSegmentCRC
                 _vscp_setSegmentCRC
                _vscp_setControlByte
 ---------------------------------------------------------------------------------
 (2) _vscp_setControlByte                                  1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_setSegmentCRC                                   1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_getSegmentCRC                                   0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _vscp_writeNicknamePermanent                          1     1      0      66
                                             10 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (3) _writeEEPROM                                          3     0      3      44
                                              7 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     700
                        _WriteTimer0
                       _init_app_ram
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      44
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (5) _ECANSetOperationMode                                 1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                              7 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _init_app_ram                                         3     3      0     542
                                             10 COMRAM     3     3      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                              7 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _vscp_readAppReg                                      2     2      0     380
                                             10 COMRAM     2     2      0
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              7 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _interrupt_at_low_vector                              3     3      0     221
                                              4 COMRAM     3     3      0
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _vscp_check_pstorage
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_getSegmentCRC
       _readEEPROM
     _vscp_setSegmentCRC
       _writeEEPROM
     _vscp_setControlByte
       _writeEEPROM
   _init_app_eeprom
     _writeEEPROM
   _init_app_ram
     _readEEPROM
   _vscp_init
     _vscp_readNicknamePermanent
       _readEEPROM
   _writeEEPROM
   _vscp_getEvent
     _getVSCPFrame
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
   _vscp_goActiveState
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _vscp_handleProbeState
     _vscp_goActiveState
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_writeNicknamePermanent
       _writeEEPROM
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_setSegmentCRC
       _writeEEPROM
   _vscp_handleProtocolEvent
     _vscp_init
       _vscp_readNicknamePermanent
         _readEEPROM
     _vscp_readAppReg
       _readEEPROM
     _vscp_writeAppReg
       _writeEEPROM
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
       _vscp_readAppReg (ARG)
         _readEEPROM
       _calculateSetFilterMask (ARG)
         _readEEPROM
         _ECANSetOperationMode
         __CANIDToRegs
     _vscp_sendEvent
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
     _vscp_getGUID
       _readEEPROM
     _vscp_getMDF_URL
     _vscp_goBootloaderMode
       _writeEEPROM
     _vscp_getMatrixInfo
     _vscp_handleHeartbeat
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_getSegmentCRC
         _readEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleSetNickname
       _vscp_writeNicknamePermanent
         _writeEEPROM
       _vscp_setSegmentCRC
         _writeEEPROM
     _vscp_handleDropNickname
       _vscp_init
         _vscp_readNicknamePermanent
           _readEEPROM
       _vscp_writeNicknamePermanent
         _writeEEPROM
     _vscp_newNodeOnline
       _vscp_sendEvent
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _vscp_readRegister
       _vscp_readAppReg
         _readEEPROM
       _vscp_readStdReg
         _vscp_getMajorVersion
         _vscp_getMinorVersion
         _vscp_getSubMinorVersion
         _vscp_getGUID
           _readEEPROM
         _vscp_getMDF_URL
         _vscp_getUserID
           _readEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_getBootLoaderAlgorithm
         _vscp_getBufferSize
         _vscp_getFamilyCode
         _vscp_getFamilyType
         _vscp_getRegisterPagesUsed
     _vscp_readStdReg
       _vscp_getMajorVersion
       _vscp_getMinorVersion
       _vscp_getSubMinorVersion
       _vscp_getGUID
         _readEEPROM
       _vscp_getMDF_URL
       _vscp_getUserID
         _readEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_getBootLoaderAlgorithm
       _vscp_getBufferSize
       _vscp_getFamilyCode
       _vscp_getFamilyType
       _vscp_getRegisterPagesUsed
     _vscp_writeRegister
       _vscp_writeAppReg
         _writeEEPROM
         _readEEPROM
         _SendInformationEvent
           _readEEPROM
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
         _vscp_readAppReg (ARG)
           _readEEPROM
         _calculateSetFilterMask (ARG)
           _readEEPROM
           _ECANSetOperationMode
           __CANIDToRegs
       _vscp_writeStdReg
         _vscp_setGUID
           _writeEEPROM
         _vscp_setManufacturerId
           _writeEEPROM
         _vscp_getGUID
           _readEEPROM
         _vscp_getUserID
           _readEEPROM
         _vscp_setUserID
           _writeEEPROM
         _vscp_getManufacturerId
           _readEEPROM
         _vscp_restoreDefaults
           _init_app_eeprom
             _writeEEPROM
           _init_app_ram
             _readEEPROM
     _vscp_writeStdReg
       _vscp_setGUID
         _writeEEPROM
       _vscp_setManufacturerId
         _writeEEPROM
       _vscp_getGUID
         _readEEPROM
       _vscp_getUserID
         _readEEPROM
       _vscp_setUserID
         _writeEEPROM
       _vscp_getManufacturerId
         _readEEPROM
       _vscp_restoreDefaults
         _init_app_eeprom
           _writeEEPROM
         _init_app_ram
           _readEEPROM
     ___lbmod
   _doDM
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionOn
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionPulse
       _readEEPROM
     _doActionStatus
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _doActionDisable
       _writeEEPROM
       _readEEPROM
     _doActionToggle
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _vscp_error
   _vscp_doOneSecondWork
     _vscp_getZone
       _readEEPROM
     _vscp_getSubzone
       _readEEPROM
     _vscp_sendHeartBeat
       _vscp_getZone (ARG)
         _readEEPROM
       _vscp_getSubzone (ARG)
         _readEEPROM
       _vscp_sendEvent (ARG)
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
   _doApplicationOneSecondWork
     _readEEPROM
     _doActionOff
       _readEEPROM
       _SendInformationEvent
         _readEEPROM
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
     _SendInformationEvent
       _readEEPROM
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
   _doWork

 _interrupt_at_low_vector (ROOT)
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3B      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     51      58       1       92.6%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EA       6        0.0%
DATA                 0      0      F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sun Apr 19 18:15:25 2015

                      doActionToggle@val 00CF                  __end_of_vscp_readAppReg 3C02  
                  __end_of_sendVSCPFrame 3CB6                                       PL2 2BA2  
                                     PL4 16FA                                       PL6 170A  
                                     PL8 203A             ?_vscp_writeNicknamePermanent 0001  
            ??_vscp_getRegisterPagesUsed 0008                                       bsr 000FE0  
    vscp_writeNicknamePermanent@nickname 000B                  __end_of_vscp_readStdReg 310A  
                  doActionToggle@dmflags 00CE                                      PL10 2078  
                                    PL20 3472                                      PL12 2090  
                                    PL30 35B0                                      PL22 26DA  
                                    PL14 20C4                                      PL40 3480  
                                    PL32 26F6                                      PL24 26E8  
                                    PL16 2BBC                                      PL50 2704  
                                    PL42 1D54                                      PL34 20F4  
                                    PL26 35A0                                      PL18 358C  
                                    PL60 1740                                      PL52 2716  
                                    PL44 171A                                      PL36 35C2  
                                    PL28 1D3C                                      PL70 2DAE  
                                    PL62 1750                                      PL54 172E  
                                    PL46 3494                                      PL38 310A  
                                    PL80 2108                                      PL72 1D68  
                                    PL64 1760                                      PL56 34BA  
                                    PL48 34A6                                      PL82 2112  
                                    PL74 35D6                                      PL66 1770  
                                    PL58 38E8                                      PL76 311E  
                                    PL68 1780                                      PL78 1D76  
                                    l211 2598                                      l220 25BC  
                                    l212 25A0                                      l204 257C  
                                    l221 25C4                                      l205 2584  
                                    l310 1038                                      l214 25A4  
                                    l223 25C8                                      l215 25AC  
                                    l320 1100                                      l304 0FE4  
                                    l224 25D2                                      l208 258C  
                                    l217 25B0                                      l209 2594  
                                    l330 11C8                                      l226 268E  
                                    l218 25B8                                      l162 396E  
                                    l315 109C                                      l325 1164  
                                    l149 3910                                      l158 3954  
                                    l335 122C                                      l415 29EC  
                                    l185 2448                                      l417 2A06  
                     vscp_readStdReg@idx 0019                                      l290 3BB8  
                                    l442 2780                                      l451 2880  
                                    l444 2964                                      l453 28C0  
                                    l445 27C0                                      l517 36BE  
                                    l470 3A2C                                      l550 3304  
                                    l542 32E0                                      l471 3A64  
                                    l455 2900                                      l447 2800  
                                    l543 32E8                                      l472 3A30  
                                    l552 3308                                      l473 3A34  
                                    l449 2840                                      l561 332C  
                                    l553 3310                                      l474 3A38  
                                    l562 3336                                      l546 32F0  
                                    l395 16CE                                      l475 3A3C  
                                    l491 2E12                                      l555 3314  
                                    l547 32F8                                      l476 3A40  
                                    l564 3380                                      l556 331C  
                                    l477 3A44                                      l493 2E42  
                                    l549 32FC                                      l494 2E72  
                                    l558 3320                                      l495 2EA2  
                                    l559 3328                                      l920 3DBA  
                                    l656 401C                                      l496 2ED2  
                                    l497 2F02                                      l850 3212  
                                    l498 2F32                        doActionStatus@bOn 00CF  
                                    l861 2C02                       vscp_readStdReg@reg 001C  
                                    l871 2CBC                                      l880 2C8A  
                                    l872 2C4C                                      l848 31F4  
                                    l882 2C9A                                      l874 2C5A  
                                    l892 2D20                                      l884 2CAA  
                                    l876 2C6A                                      l893 2D3A  
                                    l878 2C7A           __size_of_vscp_handleProbeState 00BA  
                      doActionStatus@arg 0051                           getVSCPFrame@id 0028  
                      doActionStatus@val 00D0            __end_of_vscp_handleProbeState 3B4C  
                  ?_vscp_restoreDefaults 0001                     __size_of_WriteTimer0 0012  
                 _calculateSetFilterMask 1D80                                      wreg 000FE8  
            ?_doApplicationOneSecondWork 0001                                     l1050 3B48  
                                   l1051 3AD4                                     l1035 3F72  
                   __size_of_doActionOff 00BA                                     l1240 1AC6  
                                   l1216 194A                                     l1241 1ADA  
                                   l1058 3B36                                     l1242 1B16  
                                   l1059 3B16                                     l1251 1B52  
                                   l1093 4048                                     l1318 42B0  
                                   l1182 37EC                                     l1319 42B2  
                                   l1299 4190                      vscp_readStdReg@code 0011  
                                   l7311 3AB2                vscp_getManufacturerId@idx 000B  
                                   l7313 3AB8                                     l5625 41CA  
                                   l7251 3806                                     l6603 2BF0  
                                   l7331 3AEE                                     l6443 420A  
                                   l9011 2FD6                                     l9003 2FBE  
                                   l5619 41EA                                     l7067 40FA  
                                   l7059 40E4                                     l8053 3B62  
                                   l7261 3830                                     l6613 2C1A  
                                   l4685 244A                                     l8071 3BA0  
                                   l8063 3B80                                     l7271 38DE  
                                   l7239 422A                                     l7335 3AF2  
                                   l9015 2FE2                                     l9007 2FCA  
                                   l9103 3716                                     l8073 3BA8  
                                   l8065 3B88                                     l8081 3BE0  
                                   l8057 3B72                                     l6721 2D98  
                                   l7337 3AF6                                     l9041 3036  
                                   l9033 3020                                     l9025 3008  
                                   l8075 3BB0                                     l8067 3B90  
                                   l7267 3894                                     l6707 2D68  
                                   l6715 2D82                                     l6619 2C30  
                                   l6627 2C3A                                     l6491 4154  
                                   l9019 2FF2                                     l9123 3770  
                                   l9115 3752                                     l9211 393A  
                                   l8069 3B98                                     l6733 4310  
                                   l9045 3042                                     l9037 302A  
                                   l9029 3014                                     l8501 1FCA  
                                   l9125 3774                                     l9109 3736  
                                   l8079 3BBC                                     l8087 3BFE  
                                   l6671 2CD0                                     l6479 3DDC  
                                   l7367 3B3A                                     l9127 378A  
                                   l9215 3944                                     l9231 3972  
                                   l9207 3932                                     l6681 2CF0  
                                   l7297 3A94                                     l9049 304E  
                                   l8505 1FE0                                     l9401 194E  
                                   l9217 3948                                     l9233 398A  
                                   l6771 3D72                                     l6763 3D4C  
                                   l9075 30F6                                     l9059 3098  
                                   l9147 37D2                                     l9139 37BE  
                                   l9411 1992                                     l9403 196C  
                                   l9227 3968                                     l9219 394E  
                                   l6773 3D7C                                     l6765 3D54  
                                   l6781 3D9C                                     l9069 30E0  
                                   l8461 1D92                                     l9157 37EE  
                                   l9421 19EE                                     l9309 17EE  
                                   l9261 39D2                                     l9245 39B6  
                                   l6775 3D86                                     l6767 3D5E  
                                   l8527 3CB4                                     l9079 3106  
                                   l9407 197A                                     l9343 1820  
                                   l9271 17A2                                     l8607 2DFA  
                                   l6777 3D90                                     l6769 3D68  
                                   l8481 1F2A                                     l9441 1A20  
                                   l9417 19D8                                     l9329 1814  
                                   l9273 17A6                                     l9257 39CA  
                                   l6795 340C                                     l6699 2D3C  
                                   l9603 1BC2                                     l9531 1B02  
                                   l9275 17AA                                     l9267 179A  
                                   l8643 2F62                                     l8813 3FEA  
                                   l8477 1EB6                                     l8469 1EA4  
                                   l9437 1A14                                     l9269 179E  
                                   l8645 2F82                                     l8717 3E72  
                                   l8709 3E3E                                     l9197 390C  
                                   l8831 3180                                     l8495 1F48  
                                   l9631 1C0C                                     l9623 1BD6  
                                   l9607 1BC6                                     l9535 1B0A  
                                   l9527 1AFA                                     l9519 1ADC  
                                   l9455 1A66                                     l9439 1A16  
                                   l9359 187A                                     l9295 17E6  
                                   l8719 3E9A                                     l8817 4018  
                                   l9545 1B18                                     l9449 1A3A  
                                   l9369 18AE                                     l7881 3F3C  
                                   l8907 3518                                     l8499 1FC2  
                                   l9635 1C24                                     l9627 1BF6  
                                   l9571 1B54                                     l9483 1A9A  
                                   l9467 1A7A                                     l9379 18E2  
                                   l7875 3F32                                     l8837 318E  
                                   l9653 1C5E                                     l9645 1C44  
                                   l9549 1B32                                     l9389 1916  
                                   l9733 2AEA                                     l9717 2A20  
                                   l7885 3F44                                     l9821 25D6  
                                   l8871 3242                                     l8599 2DC2  
                                   l9743 2B38                                     l9751 2B6C  
                                   l9831 2668                                     l9823 25F2  
                                   l8865 3214                                     l8849 31B8  
                                   l8945 3FDC                                     l9905 0F90  
                                   l9657 1C86                                     l9585 1B7C  
                                   l9745 2B52                                     l9737 2B04  
                                   l9729 2AD0                                     l9753 2B96  
                                   l9841 26A0                                     l8859 31F8  
                                   l8891 3286                                     l9923 0FF2  
                                   l9595 1BA0                                     l9499 1ABA  
                                   l9739 2B1E                                     l9835 267A  
                                   l9763 249C                                     l8981 432C  
                                   l9925 0FF6                                     l9917 0FB8  
                                   l9845 26B4                                     l9781 250C  
                                   l8879 3260                                     l8991 2FA0  
                                   l9679 1CD8                                     l9695 299E  
                                   l9783 2544                                     l9847 26D6  
                                   l9759 2494                                     l8889 3284  
                                   l9945 1048                                     l9937 101E  
                                   l9873 3A48                                     l9865 3A12  
                                   l9881 3A88                                     l9857 39DE  
                                   l9793 2586                                     l8995 2FAA  
                                   l9965 10AC                                     l9957 1070  
                                   l9893 0F4C                                     l9877 3A76  
                                   l8999 2FB4                                     l9985 1110  
                                   l9977 10D4                                     l9897 0F6A  
                                   l9997 1138              __size_of_vscp_getMatrixInfo 0020  
                         sendCANFrame@id 0037                                     u8074 3856  
                                   u8075 3852                                     u7275 33D4  
                                   u7285 33E4                                     u7295 3410  
                                   u6780 3E2C                           sendCANFrame@rv 003E  
                                   u6785 3E22                                     u6955 2BF8  
                                   u6957 2BFA                                     u9940 1ED6  
                                   u9925 1DEA                                     u9950 1EFE  
                                   u9945 1ECC                                     u9955 1EF4  
                                   u9974 1F14                                     u9975 1F12  
                       ??_ECANInitialize 0009                vscp_setManufacturerId@idx 000C  
                                   ___IT 000101                                     _doDM 2992  
                  __size_of_vscp_getGUID 0014                         ?_vscp_getMDF_URL 0001  
                                   _main 38F8                                     _init 4054  
                                   fsr1h 000FE2                                     fsr2h 000FDA  
                                   indf1 000FE7                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                  __size_of_vscp_getZone 000A                      i1WriteTimer0@timer0 0001  
                       _vscp_writeAppReg 0F22                              _vscp_minute 0095  
                            _vscp_second 009A                                     prodh 000FF4  
                                   prodl 000FF3                                     start 00B6  
                   doActionPulse@dmflags 000F            __size_of_vscp_doOneSecondWork 0050  
                          __CFG_FOSC$HS2 000000                        vscp_getUserID@idx 000B  
                  __size_of_vscp_setGUID 0020                            __CFG_MCLRE$ON 000000  
                       _vscp_writeStdReg 36EC                          _doActionDisable 3E38  
                            _writeEEPROM 4174                ECANReceiveMessage@dataLen 0010  
                  getVSCPFrame@pPriority 0020                     __end_of_getVSCPFrame 3E38  
            __size_of_vscp_getSegmentCRC 000A                         __RegsToCANID@val 000A  
                       __RegsToCANID@ptr 0008                     __size_of_getCANFrame 0026  
                                  l10005 1174                                    l10111 1398  
                                  l10121 13D2                                    l10025 11D8  
                                  l10017 119C                                    l10203 15EC  
                                  l10107 1392                                    l10125 13D8  
                                  l10037 1200                                    l10215 1666  
                                  l10207 1618                                    l10135 1412  
                                  l10055 1274                                    l10047 123C  
                                  l10303 2976                                    l10241 16E2  
                                  l10209 164A                                    l10065 12AA  
                                  l10049 1266                                    l10225 1688  
                                  l10235 16B8                                    l10171 151A  
                                  l10163 14A0                                    l10139 1418  
                                  l10083 1318                                    l10155 1458  
                                  l10307 2988                                    l10331 3646  
                                  l10411 333A                                    l10245 16F6  
                                  l10173 153A                                    l10165 14BC  
                                  l10181 15A6                                    l10149 1452  
                                  l10093 1352                                    l10069 12B0  
                                  l10157 1480                                    l10333 3650  
                                  l10325 361C                                    l10317 35E8  
                                  l10413 3356                                    l10175 155A  
                                  l10167 14DA                                    l10183 15CC  
                                  l10079 12E8                                    l10263 2766  
                                  l10255 272E                                    l10351 36AA  
                                  l10335 365A                                    l10327 3632  
                                  l10343 3678                                    _B0CON 000E80  
                                  l10177 157A                                    l10169 14FA  
                                  l10097 1358                                    l10441 4270  
                                  l10337 3664                                    l10329 363C  
                                  l10345 3694                                    l10361 36E2  
                                  l10425 3392                                    l10339 366E  
                                  l10419 336C                                    l10371 3296  
                                  l10357 36D0                                    l10429 33A4  
                                  l10383 32EA                                    _B1CON 000E90  
                                  ?_doDM 0001                                    l10299 2940  
                                  l10379 32CA                                    _B2CON 000EA0  
                                  _B3CON 000EB0                                    _B4CON 000EC0  
          __size_of_SendInformationEvent 006C            __size_of_vscp_getMajorVersion 0002  
                                  _B5CON 000ED0               __end_of_vscp_goActiveState 4298  
          ??_vscp_writeNicknamePermanent 000B                       writeEEPROM@address 0008  
                                  ?_main 0001                                    ?_init 0001  
                 ?_vscp_goBootloaderMode 0001                            i1_WriteTimer0 43C8  
                                  _EEADR 000F74                          __end_of___lbmod 4102  
                _vscp_handleDropNickname 4024                                    _BSEL0 000E7D  
                                  u10004 1F7E                                    u10005 1F7A  
                                  u10014 1F96                                    u10015 1F92  
                                  u10034 1FAC                                    u10035 1FAA  
                                  u10065 3C3E                                    u11050 308E  
                                  u10234 2DD2                                    u10235 2DCE  
                                  u11055 308C                                    u11080 30D8  
                                  _T0CON 000FD5                                    u13004 273E  
                                  u11085 30D6                                    u13005 273A  
                                  u10394 3E4E                                    u10395 3E4A  
                                  u12174 24EA                                    u10735 34F2  
                                  u12175 24E6                                    u10745 3502  
                                  u13154 35F8                                    u12194 2554  
                                  u10755 3520                                    u13155 35F4  
                                  u12195 2550                                    u12364 39EE  
                                  u12365 39EA                                    u13254 32A6  
                                  u13255 32A2                                    i1l140 0086  
                                  i1l141 00A6                                    i1l142 009A  
                                  i1l137 0060                                    i1l145 00A8  
                                  i1l139 0084                          sendCANFrame@dlc 003B  
                                  _MSEL0 000E79                                    _MSEL1 000E7A  
                                  _MSEL2 000E7B                                    _IRXIF 007BBF  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
     __end_of_vscp_readNicknamePermanent 440C               _vscp_readNicknamePermanent 4402  
                                  _PORTA 000F80                                    _PORTB 000F81  
                                  _PORTC 000F82                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                       ?_vscp_getSubzone 0001                             _vscp_getGUID 435A  
                                  doDM@i 00E2                             _vscp_getZone 43E4  
                     vscp_writeAppReg@rv 00D2                                    _hours 008D  
              _vscp_getRegisterPagesUsed 4424                   __size_of_vscp_getEvent 002C  
                           _vscp_setGUID 41DE                                    tablat 000FF5  
                _vscp_getSubMinorVersion 442A                                    plusw2 000FDB  
                                  status 000FD8               __end_of_vscp_sendHeartBeat 4128  
                   _ECANSetOperationMode 4304                          __initialization 423E  
                           __end_of_doDM 2BA2                             __end_of_main 39D8  
                           __end_of_init 4084                         ?_vscp_readAppReg 0001  
                _interrupt_at_low_vector 0018                           doDM@class_mask 00D7  
                      ??_ECANSendMessage 001A                           ?i1_WriteTimer0 0001  
                                 ??_doDM 00D2                         ?_vscp_readStdReg 0001  
                  getVSCPFrame@pvscptype 001E                   ??_vscp_restoreDefaults 000F  
                                 ??_main 0052                                   ??_init 000E  
          __size_of_vscp_handleHeartbeat 0040                 ??_vscp_getManufacturerId 000B  
               ??_vscp_setManufacturerId 000C                 _vscp_handleProtocolEvent 1790  
                          __activetblptr 000003                        __RegsToCANID@type 000B  
                         __CFG_PLLCFG$ON 000000                           __CFG_RETEN$OFF 000000  
             ECANReceiveMessage@msgFlags 0011            doApplicationOneSecondWork@bOn 00D4  
              __size_of__ECANPointBuffer 007E                                   _B0TXEN 0073EA  
                                 _B1TXEN 0073EB                                   _B2TXEN 0073EC  
                                 _B3TXEN 0073ED                                   _B4TXEN 0073EE  
                                 _B5TXEN 0073EF                   __size_of_doActionPulse 01D0  
             ECANReceiveMessage@savedPtr 0012                                   _CANCON 000F6F  
                                 _EEDATA 000F73                                   _EECON2 000F7E  
                                 _CIOCON 000F70                            doDM@type_mask 00DA  
                     vscp_writeStdReg@rv 0014                            ?_init_app_ram 0001  
                                 _MDSEL0 007B96                                   _MDSEL1 007B97  
                        __CFG_BBSIZ$BB2K 000000                                   i1l7101 0094  
                                 i1l7103 00A2                                   i1l7081 003E  
                             _OpenTimer0 4298                                   i1l7091 0062  
                                 i1l7083 0042                                   i1l7075 0024  
                                 i1l7093 006E                                   i1l7085 0052  
                                 i1l7077 002C                           __CFG_WDTEN$OFF 000000  
                                 i1l7095 0078                                   i1l7087 005A  
                                 i1l7079 0038                                   i1l7097 0080  
                                 i1l7089 005E                                   i1l7099 008A  
                        _init_app_eeprom 211A                                   _RXB0IF 007BB8  
                                 _RXB1IF 007BB9                  __end_of_doActionDisable 3EA4  
                                 _RXF1EN 007231                   ECANReceiveMessage@data 000F  
                 ECANReceiveMessage@mode 0016                   ECANReceiveMessage@temp 0017  
                      getVSCPFrame@pData 0022                        getVSCPFrame@pSize 0021  
                     _vscp_newNodeOnline 40B0                    ?_ECANSetOperationMode 0001  
                     __CANIDToRegs@Value 0011                           __CFG_XINST$OFF 000000  
 vscp_handleProtocolEvent@page_save_1244 00DF                           getCANFrame@pid 001C  
                         __CFG_STVREN$ON 000000                                ??___lbmod 0009  
                          _vscp_getEvent 4084                                   _doWork 4422  
                       OpenTimer0@config 0008                      ?_vscp_newNodeOnline 0001  
              ??_vscp_handleDropNickname 000C                      vscp_writeAppReg@bOn 00D1  
        calculateSetFilterMask@rowfilter 003E               calculateSetFilterMask@mask 0036  
                    vscp_writeAppReg@reg 00D3               __end_of_vscp_setSegmentCRC 4392  
                    vscp_writeAppReg@val 0051                                   clear_0 4244  
                                 clear_1 4250                            ?_sendCANFrame 0037  
           vscp_handleProtocolEvent@byte 00ED                  __size_of_vscp_getUserID 0014  
                          _vscp_nickname 0096                             __mediumconst 0000  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                    vscp_setSegmentCRC@crc 000B  
              ??_vscp_getSubMinorVersion 0008     __size_of_vscp_getBootLoaderAlgorithm 0002  
                         ??_init_app_ram 000B                     ??_vscp_newNodeOnline 004C  
                        ___lbmod@divisor 0008                          doActionToggle@i 00D1  
                             __accesstop 0060                  __end_of__initialization 4256  
                        ___lbmod@counter 000A            __size_of_vscp_getMinorVersion 0002  
                        doActionStatus@i 00D1                          writeEEPROM@data 000A  
                  __size_of_getVSCPFrame 0074                       _vscp_writeRegister 425C  
              ??_interrupt_at_low_vector 0005                  __size_of_vscp_sendEvent 0026  
                         __pcstackCOMRAM 0001                           ?_vscp_getEvent 0001  
                          _doActionPulse 2DBC              __end_of_vscp_check_pstorage 423E  
                __size_of_vscp_setUserID 0018                          ??i1_WriteTimer0 0003  
                    ?_vscp_writeRegister 00D4                               __end_ofPL2 2BBC  
                             __end_ofPL4 170A                               __end_ofPL6 171A  
                             __end_ofPL8 2078                           ??_sendCANFrame 003E  
                             _doActionOn 2728                  ?_calculateSetFilterMask 0001  
          calculateSetFilterMask@lastOID 0035               __end_of_vscp_getFamilyCode 4402  
                          ?__RegsToCANID 0008              __size_of_ECANReceiveMessage 01E4  
                     sendVSCPFrame@pData 0045               __end_of_vscp_getFamilyType 43F8  
        __size_of_vscp_getManufacturerId 0014                  vscp_writeRegister@value 00D4  
        __size_of_vscp_setManufacturerId 0020                 __end_of_vscp_writeAppReg 16FA  
                 getVSCPFrame@pvscpclass 0027                  __end_of_init_app_eeprom 2490  
            __end_of_vscp_setControlByte 4380                 __end_of_vscp_writeStdReg 37F2  
          calculateSetFilterMask@rowmask 0031                       __RegsToCANID@Value 000E  
                   ??_vscp_writeRegister 0052          __end_of_vscp_handleDropNickname 4054  
                           _getVSCPFrame 3DC4                               __pbssBANK0 0060  
                            ?_OpenTimer0 0001               __end_of_vscp_getBufferSize 4428  
                       ?_doActionDisable 000B                    vscp_writeRegister@reg 00D5  
                 ??_ECANSetOperationMode 0008                             __IT_INT_MASK 0088  
                           __IT_SAVE_BSR 0089       __size_of_vscp_getRegisterPagesUsed 0002  
                           ?_writeEEPROM 0008                           ?_doActionPulse 000B  
        __end_of_vscp_getSubMinorVersion 442C                 ECANSetOperationMode@mode 0008  
                                _B0RXFUL 007407                                  _B1RXFUL 007487  
                   __ECANRxFilterHitInfo 0054                                  _B2RXFUL 007507  
                                _B3RXFUL 007587                                  _B4RXFUL 007607  
                                ?_doWork 0001                  ??_vscp_goBootloaderMode 000B  
                                _B5RXFUL 007687           __end_of_calculateSetFilterMask 203A  
                __size_of_doActionToggle 0120                         WriteTimer0@timer 000A  
                __size_of_doActionStatus 010C                                  _ECANCON 000F72  
                          ??_WriteTimer0 000A                           ??__RegsToCANID 000C  
                  sendVSCPFrame@priority 0043                                  _BRGCON1 000E43  
                                _BRGCON2 000E44                                  _BRGCON3 000E45  
         SendInformationEvent@eventClass 00CA                      vscp_writeStdReg@reg 0015  
           __end_of_vscp_doOneSecondWork 3F60                         __CFG_CANMX$PORTB 000000  
            ?_vscp_readNicknamePermanent 0001                    sendVSCPFrame@vscptype 0041  
                          ??_doActionOff 00CC          __end_of_interrupt_at_low_vector 00B6  
               vscp_readStdReg@code_1217 0015                        sendCANFrame@pdata 003C  
                  _vscp_handleProbeState 3A92                                  _RXB0CON 000F60  
                                _RXB1CON 000F30                                  _RXB0FUL 007B07  
                       __ECANPointBuffer 3D46               __end_of_vscp_getMatrixInfo 421E  
                                _TXB0CON 000F20                                  _TXB1CON 000F10  
                                _TXB2CON 000F00                                  _RXFCON0 000E46  
                                _RXFCON1 000E47                    doActionStatus@dmflags 00CE  
                     _vscp_goActiveState 427A                   __size_of_sendVSCPFrame 00B4  
           __end_of_SendInformationEvent 3F10             __end_of_vscp_getMajorVersion 4430  
                     __size_of_vscp_init 0044                  SendInformationEvent@idx 0050  
                             _readEEPROM 43B6                   _vscp_getManufacturerId 4332  
                 _vscp_setManufacturerId 41BE                          _ECANSendMessage 312A  
                    ?_vscp_goActiveState 0001                                  __Hparam 0000  
                        ??_vscp_getEvent 002C                                  __Lparam 0000  
                     _vscp_node_substate 0098               __end_of_vscp_getSegmentCRC 4416  
             ??_vscp_handleProtocolEvent 00D6                            ??_getCANFrame 001C  
                           doActionOff@i 00D0        __end_of_vscp_getRegisterPagesUsed 4426  
               __size_of_vscp_getMDF_URL 001C                                  ___lbmod 40DA  
                        getCANFrame@pdlc 001A                  vscp_writeAppReg@val_632 00D0  
                              _FIFOEMPTY 007B8F                          __size_of_doWork 0002  
                           __psmallconst 0F00                     __end_of_init_app_ram 38E8  
                     _vscp_sendHeartBeat 4102                                  __pcinit 423E  
                         _vscp_deviceURL 0F00                              ?_doActionOn 0051  
                                __ramtop 0F00                      __size_of_OpenTimer0 001E  
                                __ptext0 38F8                                  __ptext1 4422  
                                __ptext2 2490                                  __ptext3 3F10  
                                __ptext4 4102                                  __ptext5 43DA  
                                __ptext6 43E4                                  __ptext7 441E  
                                __ptext8 2992                                  __ptext9 328E  
                         _vscp_getUserID 4346                                _T0CONbits 000FD5  
                   ??_vscp_goActiveState 004C                         doActionDisable@i 0010  
                  vscp_writeStdReg@value 000F                      ?_vscp_sendHeartBeat 00CA  
               ??_vscp_handleSetNickname 000C                                  _minutes 008E  
                                _seconds 0090                        __CFG_MSSPMSK$MSK7 000000  
                    __end_of_WriteTimer0 43B6                         ?_init_app_eeprom 0001  
                      vscp_readAppReg@rv 000B                       vscp_getMDF_URL@idx 0009  
          vscp_handleProtocolEvent@bytes 00E3                     end_of_initialization 4256  
                    __end_of_doActionOff 3A92             __end_of_vscp_handleHeartbeat 3FE4  
               __size_of_vscp_getSubzone 000A                     __end_of_sendCANFrame 4024  
              vscp_handleProtocolEvent@i 00EF                vscp_handleProtocolEvent@j 00F0  
              vscp_handleProtocolEvent@k 00EA                          ??_doActionPulse 000C  
                 doActionDisable@dmflags 000E                     ??_vscp_sendHeartBeat 004C  
                         _vscp_sendEvent 4128                        ECANSendMessage@id 0012  
                      ECANSendMessage@pb 001B                                  postdec2 000FDD  
                __size_of_ECANInitialize 0090                           _vscp_setUserID 42EC  
                                postinc0 000FEE                                  postinc2 000FDE  
                 __end_of_vscp_deviceURL 0F21      __end_of_vscp_writeNicknamePermanent 43A4  
            _vscp_writeNicknamePermanent 4392                       __ECANPointBuffer@b 000B  
                          _sendVSCPFrame 3C02                   __end_of_vscp_getUserID 435A  
           ?_vscp_getBootLoaderAlgorithm 0001                                _RXM0EXIDM 0077CB  
                      __end_of_vscp_init 3FA4                           _vscp_probe_cnt 0099  
                              _PORTCbits 000F82                      __end_of_getCANFrame 4174  
          __size_of_vscp_restoreDefaults 0008                   ?_vscp_handleProbeState 0001  
               __size_of_vscp_readAppReg 00B6                         ___lbmod@dividend 0009  
                       doActionPulse@arg 000B                           _vscp_statuscnt 0058  
               __size_of_vscp_readStdReg 017E                         doActionPulse@val 0010  
                     _vscp_setSegmentCRC 4380                        readEEPROM@address 0008  
             vscp_handleProtocolEvent@cb 00E8                  __end_of_ECANSendMessage 328E  
                      vscp_readStdReg@rv 001B                              ___lbmod@rem 000B  
                          ?__CANIDToRegs 0008                              doDM@dmflags 00E1  
                   __end_of__RegsToCANID 3472                              ?_readEEPROM 0008  
                    __size_of_doActionOn 026A                      ?_vscp_setSegmentCRC 0001  
                 __end_of_vscp_sendEvent 414E                               _vscp_error 441E  
                   _vscp_doOneSecondWork 3F10                       i1WriteTimer0@timer 0003  
                             _vscp_timer 0086                   __end_of_vscp_setUserID 4304  
                 vscp_sendHeartBeat@zone 004C                           ?_sendVSCPFrame 003F  
            doApplicationOneSecondWork@i 00D6                           _doActionToggle 328E  
                   __size_of_writeEEPROM 0026                           _doActionStatus 35E0  
                        ?_vscp_getUserID 0001                           __end_of_doWork 4424  
           __end_of_vscp_getMinorVersion 442E                              _WriteTimer0 43A4  
                   _SendInformationEvent 3EA4                     _vscp_getMajorVersion 442E  
                   ??_vscp_setSegmentCRC 000B                        ??_vscp_getMDF_URL 0008  
          ??_vscp_getBootLoaderAlgorithm 0008                                ___DCDelay 00F1  
                            __end_ofPL10 2090                              __end_ofPL20 3480  
                            __end_ofPL12 20C4                        ?_vscp_writeAppReg 0051  
                            __end_ofPL30 35C2                              __end_ofPL22 26E8  
                            __end_ofPL14 20F4                              __end_ofPL40 3494  
                            __end_ofPL32 2704                              __end_ofPL24 26F6  
                            __end_ofPL16 2BCA                              __end_ofPL50 2716  
                            __end_ofPL42 1D68                              __end_ofPL34 2108  
                            __end_ofPL26 35B0                              __end_ofPL18 35A0  
                            __end_ofPL60 1750                              __end_ofPL52 2728  
                            __end_ofPL44 172E                              __end_ofPL36 35D6  
                            __end_ofPL28 1D54                              __end_ofPL70 2DBC  
                            __end_ofPL62 1760                              __end_ofPL54 1740  
                            __end_ofPL46 34A6                              __end_ofPL38 311E  
                            __end_ofPL80 2112                              __end_ofPL72 1D76  
                            __end_ofPL64 1770                              __end_ofPL56 34CC  
                            __end_ofPL48 34BA                              __end_ofPL82 211A  
                            __end_ofPL74 35E0                              __end_ofPL66 1780  
                            __end_ofPL58 38F8                              __end_ofPL76 312A  
                            __end_ofPL68 1790                              __end_ofPL78 1D80  
                    start_initialization 423E                              _doActionOff 39D8  
        __size_of_vscp_handleSetNickname 0024                       ??_vscp_writeAppReg 00CC  
                      ?_vscp_writeStdReg 000F                   _relay_protection_timer 0060  
            __size_of_vscp_newNodeOnline 002A                             ??_OpenTimer0 0008  
                     ??_vscp_writeStdReg 0010                       _vscp_getFamilyCode 43F8  
                         ??__CANIDToRegs 000F                       _vscp_getFamilyType 43EE  
                       doDM@class_filter 00D5                      sendVSCPFrame@nodeid 0042  
                      _vscp_readRegister 431C                          ?_vscp_sendEvent 0001  
vscp_handleProtocolEvent@bytes_this_time 00E7                    ?_vscp_doOneSecondWork 0001  
                  ECANReceiveMessage@ptr 0018                      ?_vscp_getFamilyCode 0008  
                     ?_vscp_readRegister 0001         __end_of_vscp_handleProtocolEvent 1D3C  
                        ?_vscp_setUserID 000B                                _doDM$2092 00DB  
                              _doDM$2093 00DC                                _doDM$2094 00DD  
                              _doDM$2095 00DE                                _doDM$2096 00DF  
                              _doDM$2097 00E0                      ?_vscp_getFamilyType 0008  
                  __size_of_init_app_ram 00F6                 ?_vscp_handleDropNickname 0001  
                 __end_of_doActionToggle 33AE                        ??_vscp_getSubzone 000B  
                 __end_of_doActionStatus 36EC                 __end_of__ECANPointBuffer 3DC4  
                      __CANIDToRegs@type 000E                              _getCANFrame 414E  
                               ??_doWork 0008                       _vscp_getBufferSize 4426  
            vscp_handleProtocolEvent@len 00E4                           doActionOff@arg 0051  
            vscp_handleProtocolEvent@pos 00E2               __end_of_ECANReceiveMessage 2DAE  
                         doActionOff@val 00CF                      ??_vscp_readRegister 001D  
         __size_of_vscp_goBootloaderMode 001A                    ?_SendInformationEvent 00CA  
                  ?_vscp_getMajorVersion 0001                    __end_ofi1_WriteTimer0 43DA  
          __end_of_vscp_goBootloaderMode 42EC                     _vscp_handleHeartbeat 3FA4  
                     __end_of_OpenTimer0 42B6      __size_of_doApplicationOneSecondWork 024A  
                    ?_vscp_getBufferSize 0001                      __size_of_readEEPROM 0012  
                         doActionPulse@i 0011             __size_of_vscp_check_pstorage 0020  
                   ??_vscp_getFamilyCode 000C                 ?_vscp_getSubMinorVersion 0001  
                            __pbssCOMRAM 0052                     ??_vscp_getFamilyType 000C  
                        __IT_SAVE_STATUS 008A                            ?_vscp_getGUID 0001  
                          __pcstackBANK0 00B6                         _vscp_alarmstatus 0091  
                          ?_vscp_getZone 0001                    __size_of_sendCANFrame 0040  
                ?_vscp_getManufacturerId 0001                  ?_vscp_setManufacturerId 000B  
                          ?_vscp_setGUID 000B              __size_of_vscp_writeRegister 001E  
                       ?_ECANSendMessage 0012                        ??_vscp_readAppReg 000B  
                      sendVSCPFrame@size 0044                __end_of_vscp_readRegister 4332  
                      _relay_pulse_flags 008F                             _init_app_ram 37F2  
                      _relay_pulse_timer 0070             __size_of_vscp_setControlByte 0012  
               ?_interrupt_at_low_vector 0001                        ??_vscp_readStdReg 000C  
                   ??_vscp_getBufferSize 0008                                __pnvBANK0 00F1  
                          __IT_SAVE_WREG 008B                              ?_vscp_error 0001  
                     _vscp_getMatrixInfo 41FE                   _vscp_handleSetNickname 419A  
          __size_of_ECANSetOperationMode 0018                          ??_sendVSCPFrame 00B6  
                        ?_doActionToggle 0051                           _ECANInitialize 3CB6  
                        ?_doActionStatus 0051                 __size_of_doActionDisable 006C  
                               ?___lbmod 0008                      ?_vscp_getMatrixInfo 0001  
                calculateSetFilterMask@i 0043                  calculateSetFilterMask@j 0042  
                        vscp_getGUID@idx 000B                              __pintcodelo 0018  
                           ??_doActionOn 00CC                    ?_vscp_handleHeartbeat 0001  
       vscp_handleProtocolEvent@len_1234 00E6                  vscp_readStdReg@idx_1218 001A  
             vscp_setManufacturerId@data 000B                             _sendCANFrame 3FE4  
                            __smallconst 0F00                        WriteTimer0@timer0 0008  
                     _vscp_getSegmentCRC 440C                           ??_vscp_getGUID 000B  
                         ??_vscp_getZone 000B                              doActionOn@i 00D1  
         __end_of_vscp_getManufacturerId 4346           __end_of_vscp_setManufacturerId 41DE  
                  __size_of__RegsToCANID 00C4         vscp_handleProtocolEvent@pos_1233 00E5  
                        doDM@type_filter 00D9                           ??_vscp_setGUID 000C  
                    ?_vscp_getSegmentCRC 0001                     ??_vscp_getMatrixInfo 0008  
                       _vscp_configtimer 0084                       doActionDisable@arg 000B  
                     doActionDisable@val 000F          SendInformationEvent@eventTypeId 00CB  
                 ??_vscp_doOneSecondWork 004D                   sendVSCPFrame@vscpclass 003F  
                               _LATBbits 000F8A                     _vscp_getMinorVersion 442C  
                               _LATCbits 000F8B                                _sendTimer 0055  
                     __end_of_doActionOn 2992                   __end_of_ECANInitialize 3D46  
                               i1u790_20 0080                                 i1u790_21 007E  
                               i1u791_20 0094                                 i1u791_21 0092  
                               _PIR4bits 000FB7                                 i1u792_20 00A2  
                               i1u792_21 00A0                                 i1u786_20 002C  
                               i1u786_21 002A                                 i1u787_20 005A  
                               i1u787_21 0058                                 i1u788_20 006E  
                               i1u788_21 006C                                 i1u789_20 0078  
                               i1u789_21 0076                         ECANSendMessage@i 0034  
                       ECANSendMessage@j 002F                    __end_of_vscp_getEvent 40B0  
                               _RXF0EIDH 000EE2                                 _RXF0EIDL 000EE3  
                               _RXB0OVFL 007B8F                                 _RXF1EIDH 000EE6  
                               _RXF1EIDL 000EE7                                 _RXB1OVFL 007B8E  
                               _RXF0SIDH 000EE0                                 _RXF0SIDL 000EE1  
                               _RXF1SIDH 000EE4                                 _RXF1SIDL 000EE5  
                               _RXM0EIDH 000EFA                                 _RXM0EIDL 000EFB  
                        vscp_getEvent@rv 002C                                 _RXM1EIDH 000EFE  
                               _RXM1EIDL 000EFF                     ??_vscp_getSegmentCRC 000B  
                               _RXFBCON0 000E71                                 _RXFBCON1 000E72  
                               _RXFBCON2 000E73                                 _RXFBCON3 000E74  
                               _RXFBCON4 000E75                                 _RXFBCON5 000E76  
                               _RXFBCON6 000E77                                 _RXFBCON7 000E78  
                               _RXM0SIDH 000EF8                                 _RXM0SIDL 000EF9  
                 ??_SendInformationEvent 004B                                 _RXM1SIDH 000EFC  
                 ??_vscp_getMajorVersion 0008                                 _RXM1SIDL 000EFD  
             ?_vscp_getRegisterPagesUsed 0001                  ??_vscp_handleProbeState 004C  
                     vscp_setUserID@data 000B                     __end_of__CANIDToRegs 358C  
                       __CFG_SOSCSEL$DIG 000000                             __RegsToCANID 33AE  
                     _vscp_probe_address 0057                       doActionOff@dmflags 00CE  
            __size_of_vscp_goActiveState 001E                      getVSCPFrame@pNodeId 001F  
                              _vscp_init 3F60                                _vscp_imsg 009B  
                              _vscp_hour 0093                                _vscp_omsg 00A9  
                       vscp_setGUID@data 000B        __size_of_vscp_handleProtocolEvent 05AC  
                    __size_of_vscp_error 0004                ?_vscp_handleProtocolEvent 0001  
               SendInformationEvent@data 004D     __size_of_vscp_writeNicknamePermanent 0012  
     __end_of_doApplicationOneSecondWork 26DA               _doApplicationOneSecondWork 2490  
                       _vscp_page_select 0052               __size_of_vscp_readRegister 0016  
                               ___DCByte 008C                        _measurement_clock 0080  
                  ?_vscp_getMinorVersion 0001                             ??_readEEPROM 000A  
               __size_of_init_app_eeprom 0376             __end_of_vscp_restoreDefaults 441E  
                             _EECON1bits 000F7F                          ?_ECANInitialize 0001  
               ??_calculateSetFilterMask 0012                                 __Hrparam 0000  
                   ECANReceiveMessage@id 0014              __size_of_vscp_sendHeartBeat 0026  
                       ??_vscp_getUserID 000B                          _vscp_getMDF_URL 42B6  
                               __Lrparam 0000                    __end_of_doActionPulse 2F8C  
                       __CANIDToRegs@val 000A                         __CANIDToRegs@ptr 0008  
                          doActionOn@arg 0051                            doActionOn@val 00D0  
                       _vscp_initledfunc 0056                         __size_of___lbmod 0028  
                 ??_vscp_handleHeartbeat 000C                         getCANFrame@flags 001D  
                           ?_WriteTimer0 0008                         getCANFrame@pdata 001B  
                      ??_doActionDisable 000C               vscp_writeAppReg@bInfoEvent 00CF  
                     __end_of_readEEPROM 43C8                               ?_vscp_init 0001  
                           ?_doActionOff 0051                                 __ptext10 3E38  
                               __ptext11 35E0                                 __ptext20 211A  
                               __ptext12 2DBC                                 __ptext21 42EC  
                               __ptext13 2728                                 __ptext30 43EE  
                               __ptext22 41BE                                 __ptext14 39D8  
                               __ptext31 43F8                                 __ptext23 41DE  
                               __ptext15 1790                                 __ptext40 442E  
                               __ptext32 4426                                 __ptext24 0F22  
                               __ptext16 40DA                                 __ptext41 40B0  
                               __ptext33 4428                                 __ptext25 1D80  
                               __ptext17 425C                                 __ptext50 427A  
                               __ptext42 4024                                 __ptext34 4332  
                               __ptext26 3EA4                                 __ptext18 36EC  
                               __ptext51 4128                                 __ptext43 3F60  
                               __ptext35 4346                                 __ptext27 431C  
                               __ptext19 4416                                 __ptext60 33AE  
                               __ptext52 3C02                                 __ptext44 4402  
                               __ptext36 42B6                                 __ptext28 2F8C  
                               __ptext61 3D46                                 __ptext53 3FE4  
                               __ptext45 419A                                 __ptext37 435A  
                               __ptext29 4424                                 __ptext70 4304  
                               __ptext62 421E                                 __ptext54 312A  
                               __ptext46 3FA4                                 __ptext38 442A  
                               __ptext71 4298                                 __ptext63 436E  
                               __ptext55 34CC                                 __ptext47 41FE  
                               __ptext39 442C                                 __ptext72 37F2  
                               __ptext64 4380                                 __ptext56 4084  
                               __ptext48 42D2                                 __ptext73 43A4  
                               __ptext65 440C                                 __ptext57 3DC4  
                               __ptext49 3A92                                 __ptext74 3B4C  
                               __ptext66 4392                                 __ptext58 414E  
                               __ptext75 43B6                                 __ptext67 4174  
                               __ptext59 2BCA                                 __ptext68 4054  
                               __ptext77 43C8                                 __ptext69 3CB6  
         vscp_goBootloaderMode@algorithm 000B                vscp_sendHeartBeat@subzone 00CA  
                          ?_getVSCPFrame 001E                         ??_vscp_sendEvent 004B  
                        _vscp_getSubzone 43DA             calculateSetFilterMask@filter 003A  
                       ??_vscp_setUserID 000C                            __size_of_doDM 0210  
                          __size_of_main 00E0                            __size_of_init 0030  
              __size_of_vscp_writeAppReg 07D8                      _vscp_check_pstorage 421E  
                          init_app_ram@i 000D           vscp_handleProtocolEvent@i_1232 00EC  
         vscp_handleProtocolEvent@i_1235 00EE           vscp_handleProtocolEvent@i_1243 00E9  
                   __end_of_vscp_getGUID 436E                            ??_writeEEPROM 000B  
              __size_of_vscp_writeStdReg 0106                      ECANSendMessage@data 0016  
               ECANSendMessage@tempBSEL0 0030                             ?_getCANFrame 001A  
                    ECANSendMessage@mode 002D                     __end_of_vscp_getZone 43EE  
                    ECANSendMessage@temp 0033                        ?__ECANPointBuffer 0008  
                      doActionOn@dmflags 00CF                        vscp_setUserID@idx 000C  
                   __end_of_vscp_setGUID 41FE                       vscp_readAppReg@reg 000C  
                     ??__ECANPointBuffer 000B           vscp_handleProtocolEvent@offset 00E1  
                            _RXB0FILHIT0 007B00                          vscp_setGUID@idx 000C  
                    __CFG_INTOSCSEL$HIGH 000000                         init_app_eeprom@i 000D  
                       init_app_eeprom@j 000E                      _vscp_setControlByte 436E  
            __size_of_vscp_setSegmentCRC 0012                          _vscp_readAppReg 3B4C  
                   ?_vscp_check_pstorage 0001                              _RXB1CONbits 000F30  
       __size_of_vscp_handleDropNickname 0030                               _INTCONbits 000FF2  
           ??_vscp_readNicknamePermanent 000B                      ECANReceiveMessage@i 0015  
                        _vscp_guid_reset 0092                          _vscp_readStdReg 2F8C  
           vscp_handleDropNickname@bytes 000C               __end_of_vscp_newNodeOnline 40DA  
                     _ECANReceiveMessage 2BCA                           ??_getVSCPFrame 0023  
                        _vscp_initbtncnt 0094                          sendVSCPFrame@id 0047  
                               intlevel1 0000                   ??_vscp_getMinorVersion 0008  
                vscp_getMatrixInfo@pData 0001                  __end_of_vscp_getMDF_URL 42D2  
                   ?_vscp_setControlByte 0001                      ?_ECANReceiveMessage 000F  
                ?_vscp_handleSetNickname 0001                         ??_doActionToggle 00CC  
       __size_of_vscp_getSubMinorVersion 0002                         ??_doActionStatus 00CC  
                        _vscp_node_state 0097                             ??_vscp_error 0008  
                ECANSendMessage@msgFlags 0019                      vscp_getMatrixInfo@i 0008  
        __size_of_calculateSetFilterMask 02BA                  vscp_setControlByte@ctrl 000B  
                     ECANSendMessage@ptr 0035                        ??_init_app_eeprom 000B  
                  __size_of__CANIDToRegs 00C0                           readEEPROM@data 000A  
                     __CFG_WDTPS$1048576 000000      __size_of_vscp_readNicknamePermanent 000A  
    __end_of_vscp_getBootLoaderAlgorithm 442A              _vscp_getBootLoaderAlgorithm 4428  
       __size_of_interrupt_at_low_vector 009E                   ECANSendMessage@dataLen 0018  
                    __end_of_writeEEPROM 419A                      __ECANPointBuffer@pt 000C  
                   ??_ECANReceiveMessage 0012                    ??_vscp_check_pstorage 000C  
                 ECANSendMessage@buffers 002E                    _vscp_goBootloaderMode 42D2  
           __end_of_ECANSetOperationMode 431C                     _vscp_restoreDefaults 4416  
            __size_of_vscp_getFamilyCode 000A                              ??_vscp_init 000B  
                __end_of_vscp_getSubzone 43E4              __size_of_vscp_getFamilyType 000A  
                             _RXM1EXIDEN 0077EB               __end_of_vscp_writeRegister 427A  
                     __end_of_vscp_error 4422                   ECANSendMessage@tempPtr 0031  
         __end_of_vscp_handleSetNickname 41BE       vscp_handleProtocolEvent@bytes_1240 00EB  
                  ??_vscp_setControlByte 000B                     vscp_readRegister@reg 001D  
           ??_doApplicationOneSecondWork 00D1                             __CANIDToRegs 34CC  
                 __size_ofi1_WriteTimer0 0012        vscp_handleProtocolEvent@page_save 00DD  
            __size_of_vscp_getBufferSize 0002        doApplicationOneSecondWork@ctrlreg 00D5  
               __size_of_ECANSendMessage 0164                        doActionToggle@bOn 00D0  
                      doActionToggle@arg 0051  
