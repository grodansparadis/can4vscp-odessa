
<h1 class="sectionedit1" id="the_verbose_mode">The verbose mode</h1>
<div class="level1">

<p>
The verbose mode is intended for diagnostics of a CAN4VSCP bus just by using a simple terminal program. When you power the module and it is set to start in verbose mode  you will see something like this
</p>

<p>
<a href="/frankfurt/rs232/manual/lib/exe/detail.php?id=the_verbose_mode&amp;media=verbose_helo.png" class="media" title="verbose_helo.png"><img src="/frankfurt/rs232/manual/lib/exe/fetch.php?w=500&amp;tok=637626&amp;media=verbose_helo.png" class="mediacenter" alt="" width="500" /></a>
</p>

<p>
You can always issue the <strong>help</strong> command to get syntax end help about available commands.
</p>

<p>
Here is a description of all available commands. 
</p>

</div>
<!-- EDIT1 SECTION "The verbose mode" [1-410] -->
<h1 class="sectionedit2" id="help">HELP</h1>
<div class="level1">

<p>
Display this help information.
</p>

<p>
Something like this will be shown
</p>

<p>
<a href="/frankfurt/rs232/manual/lib/exe/detail.php?id=the_verbose_mode&amp;media=verbose_help.png" class="media" title="verbose_help.png"><img src="/frankfurt/rs232/manual/lib/exe/fetch.php?w=500&amp;tok=dc281c&amp;media=verbose_help.png" class="mediacenter" alt="" width="500" /></a>
</p>

</div>
<!-- EDIT2 SECTION "HELP" [411-529] -->
<h1 class="sectionedit3" id="boot">BOOT</h1>
<div class="level1">

<p>
Enter boot loader.
</p>

<p>
The module will respond with
</p>
<pre class="code">+OK</pre>

<p>
and after that it has entered the boot loader. There is only one way to exit the boot loader mode and that is by updating the firmware. So use the command with care.
</p>

</div>
<!-- EDIT3 SECTION "BOOT" [530-774] -->
<h1 class="sectionedit4" id="open">OPEN</h1>
<div class="level1">

<p>
Open CAN interface in <strong>normal mode</strong>.
</p>

<p>
The module will respond with
</p>
<pre class="code">+OK</pre>

<p>
when the  connection to the CAN4VSCP bus is open. Frames sent on the bus will asynchronously be received hereafter.
</p>

<p>
Note that you can mix the <strong>open</strong>, <strong>silent</strong>, <strong>listen</strong> and <strong>loopback</strong> without useing <strong>close</strong> in between.
</p>

</div>
<!-- EDIT4 SECTION "OPEN" [775-1104] -->
<h1 class="sectionedit5" id="silent">SILENT</h1>
<div class="level1">

<p>
Open CAN interface in <strong>silent mode</strong>.
</p>

<p>
The module will respond with
</p>
<pre class="code">+OK</pre>

<p>
when the  connection to the CAN4VSCP bus is open. This command is the same as the <strong>open</strong> command with the difference that it does not display received frames asynchronously. You have to poll for them using the <strong>RX</strong> command.
</p>

<p>
Note that you can mix the <strong>open</strong>, <strong>silent</strong>, <strong>listen</strong> and <strong>loopback</strong> without useing <strong>close</strong> in between.
</p>

</div>
<!-- EDIT5 SECTION "SILENT" [1105-1547] -->
<h1 class="sectionedit6" id="listen">LISTEN</h1>
<div class="level1">

<p>
Open CAN interface in <strong>listen only mode</strong>.
</p>

<p>
The module will respond with
</p>
<pre class="code">+OK</pre>

<p>
when the  connection to the CAN4VSCP bus is open. In this mode the module just listens passively to traffic on the CAN4VSCP bus. You can not send events.
</p>

<p>
Note that you can mix the <strong>open</strong>, <strong>silent</strong>, <strong>listen</strong> and <strong>loopback</strong> without useing <strong>close</strong> in between.
</p>

</div>
<!-- EDIT6 SECTION "LISTEN" [1548-1921] -->
<h1 class="sectionedit7" id="loopback">LOOPBACK</h1>
<div class="level1">

<p>
Open CAN interface in <strong>loopback mode</strong>.
</p>

<p>
The module will respond with
</p>
<pre class="code">+OK</pre>

<p>
when the device is in loopback mode.
</p>

<p>
Use this mode to test the interface of the adapter.
</p>

<p>
Note that you can mix the <strong>open</strong>, <strong>silent</strong>, <strong>listen</strong> and <strong>loopback</strong> without useing <strong>close</strong> in between.
</p>

</div>
<!-- EDIT7 SECTION "LOOPBACK" [1922-2231] -->
<h1 class="sectionedit8" id="close">CLOSE</h1>
<div class="level1">

<p>
Close CAN interface.
</p>

<p>
The module will respond with
</p>
<pre class="code">+OK</pre>

<p>
when the CAN4VSCP interface is closed.   
</p>

</div>
<!-- EDIT8 SECTION "CLOSE" [2232-2355] -->
<h1 class="sectionedit9" id="version">VERSION</h1>
<div class="level1">

<p>
Display firmware version information.
</p>

</div>
<!-- EDIT9 SECTION "VERSION" [2356-2418] -->
<h1 class="sectionedit10" id="ifmode">IFMODE</h1>
<div class="level1">

<p>
Display selected interface mode.
</p>

<p>
The module will respond with the current selected interface mode. Possible responses are
</p>
<ul>
<li class="level1"><div class="li"> +OK - Closed mode</div>
</li>
<li class="level1"><div class="li"> +OK - Normal mode </div>
</li>
<li class="level1"><div class="li"> +OK - Silent mode </div>
</li>
<li class="level1"><div class="li"> +OK - Listen mode</div>
</li>
<li class="level1"><div class="li"> +OK - Loopback mode</div>
</li>
</ul>

</div>
<!-- EDIT10 SECTION "IFMODE" [2419-2680] -->
<h1 class="sectionedit11" id="tx">TX</h1>
<div class="level1">

<p>
Send CAN frame .
</p>
<pre class="code">   
Format: priority,class,type,nodeid,count,data,,,</pre>

<p>
The module will respond with 
</p>
<pre class="code">+OK</pre>

<p>
when the event is sent on the CAN4VSCP bus.  
</p>

</div>
<!-- EDIT11 SECTION "TX" [2681-2859] -->
<h1 class="sectionedit12" id="rx">RX</h1>
<div class="level1">

<p>
Read CAN frame.
</p>

<p>
The format for the frame is 
</p>
<pre class="code">&lt;priority,class,type,nodeid,count,data,,,&gt;</pre>

<p>
which look like this for a real frame
</p>
<pre class="code">&lt;Prio=7,class=20,type=9,nodeid=2,size=3,Data=0,2,3&gt; 
+OK</pre>

<p>
If no event(s) are available to read
</p>
<pre class="code">+OK - no events </pre>

<p>
will be send back.
</p>

</div>
<!-- EDIT12 SECTION "RX" [2860-3151] -->
<h1 class="sectionedit13" id="stat">STAT</h1>
<div class="level1">

<p>
Display CAN statistics.
</p>

<p>
The result of the command is
</p>
<pre class="code">Sent CAN frames: 0
Sent CAN bytes: 0
Received CAN frames: 165
Received CAN bytes: 618 </pre>

</div>
<!-- EDIT13 SECTION "STAT" [3152-3322] -->
<h1 class="sectionedit14" id="err">ERR</h1>
<div class="level1">

<p>
Display CAN error information.
</p>

<p>
The result of the command is
</p>
<pre class="code">CAN Receive overruns: 0
CAN Transmit overruns: 0
UART Receive overruns: 0
UART Receive overruns: 0
Transmit Error Counter: 0
Receive Error Counter: 0 </pre>

</div>
<!-- EDIT14 SECTION "ERR" [3323-3569] -->
<h1 class="sectionedit15" id="find">FIND</h1>
<div class="level1">

<p>
Find available CAN4VSCP nodes on bus.
</p>

<p>
The output from the command looks like this
</p>

<p>
<a href="/frankfurt/rs232/manual/lib/exe/detail.php?id=the_verbose_mode&amp;media=command_find.png" class="media" title="command_find.png"><img src="/frankfurt/rs232/manual/lib/exe/fetch.php?w=700&amp;tok=7ba3ef&amp;media=command_find.png" class="mediacenter" alt="" width="700" /></a>
</p>

<p>
As noted the node id, the GUID, the MDF and the firmware version of the devices is returned.
</p>

</div>
<!-- EDIT15 SECTION "FIND" [3570-3797] -->
<h1 class="sectionedit16" id="rreg">RREG</h1>
<div class="level1">

<p>
Read register(s) of a node.
</p>
<pre class="code">Format: rreg [page:]reg [count]).</pre>

<p>
Values between [] are optional. Page is zero if not give, count is one if not given.  
</p>

</div>
<!-- EDIT16 SECTION "RREG" [3798-3973] -->
<h1 class="sectionedit17" id="wreg">WREG</h1>
<div class="level1">

<p>
Write register of node. 
</p>
<pre class="code">Format: wreg [page:]reg content).</pre>

<p>
Values between [] are optional. Page is zero if not give.
</p>

</div>
<!-- EDIT17 SECTION "WREG" [3974-4117] -->
<h1 class="sectionedit18" id="info">INFO</h1>
<div class="level1">

<p>
Get info about an existent node on the bus.
</p>
<pre class="code">Format: info nickname.</pre>

</div>
<!-- EDIT18 SECTION "INFO" [4118-4214] -->
<h1 class="sectionedit19" id="filter">FILTER</h1>
<div class="level1">

<p>
Set filter .
</p>
<pre class="code">       
Format: filter filterno,prio,class,type,nodeid  (filterno = 0-15).</pre>

</div>
<!-- EDIT19 SECTION "FILTER" [4215-4329] -->
<h1 class="sectionedit20" id="mask">MASK</h1>
<div class="level1">

<p>
Set mask .
</p>
<pre class="code">Format: mask maskno,prio,class,type,nodeid (maskno = 0 or 1).</pre>

</div>
<!-- EDIT20 SECTION "MASK" [4330-4428] -->
<h1 class="sectionedit21" id="set">SET</h1>
<div class="level1">

<p>
Set persistent functionality.
</p>

</div>

<h5 id="hex">HEX</h5>
<div class="level5">

<p>
Display numbers in hexadecimal.
</p>

</div>

<h5 id="decimal">DECIMAL</h5>
<div class="level5">

<p>
Display numbers in decimal.
</p>

</div>

<h5 id="rwtimeout">RWTIMEOUT</h5>
<div class="level5">

<p>
Set register read/write timeout. Default=10 ms .
</p>

<p>
<em class="u">Format:</em> <br/>

</p>
<pre class="code">  set rwtimeout timeout</pre>

</div>

<h5 id="startif">STARTIF</h5>
<div class="level5">

<p>
Set interface state to use on startup.
</p>

</div>

<h5 id="mode">MODE</h5>
<div class="level5">

<p>
Set adapter mode that should be used on startup. 
</p>

<p>
<em class="u">Modes:</em> <br/>

</p>
<pre class="code">  verbose|vscp|slcan</pre>

<p>
<br/>

</p>
<hr />

<p>
Copyright Â© 2000-2015 <a href="mailto:&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x69;&#x6e;&#x66;&#x6f;&#x40;&#x67;&#x72;&#x6f;&#x64;&#x61;&#x6e;&#x73;&#x70;&#x61;&#x72;&#x61;&#x64;&#x69;&#x73;&#x2e;&#x63;&#x6f;&#x6d;" class="mail" title="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x69;&#x6e;&#x66;&#x6f;&#x40;&#x67;&#x72;&#x6f;&#x64;&#x61;&#x6e;&#x73;&#x70;&#x61;&#x72;&#x61;&#x64;&#x69;&#x73;&#x2e;&#x63;&#x6f;&#x6d;">Contact</a>, <a href="http://www.grodansparadis.com" class="urlextern" title="http://www.grodansparadis.com"  rel="nofollow">Paradise of the Frog / Grodans Paradis AB</a>
</p>

</div>
<!-- EDIT21 SECTION "SET" [4429-] -->